	.file	"full.llvm"
	.section	.debug_info,"",@progbits
.Lsection_info:
	.section	.debug_abbrev,"",@progbits
.Lsection_abbrev:
	.section	.debug_aranges,"",@progbits
	.section	.debug_macinfo,"",@progbits
	.section	.debug_line,"",@progbits
.Lsection_line:
	.section	.debug_loc,"",@progbits
	.section	.debug_pubnames,"",@progbits
	.section	.debug_pubtypes,"",@progbits
	.section	.debug_str,"MS",@progbits,1
.Linfo_string:
	.section	.debug_ranges,"",@progbits
.Ldebug_range:
	.section	.debug_loc,"",@progbits
.Lsection_debug_loc:
	.text
.Ltext_begin:
	.data
	.file	1 "mma_test_eigen.c"
	.file	2 "eispack.c"
	.text
	.globl	test_stores
	.align	16, 0x90
	.type	test_stores,@function
test_stores:                            # @test_stores
	.cfi_startproc
.Lfunc_begin0:
	.loc	1 16 0                  # mma_test_eigen.c:16:0
# BB#0:
	pushq	%rbp
.Ltmp7:
	.cfi_def_cfa_offset 16
	pushq	%r15
.Ltmp8:
	.cfi_def_cfa_offset 24
	pushq	%r14
.Ltmp9:
	.cfi_def_cfa_offset 32
	pushq	%r13
.Ltmp10:
	.cfi_def_cfa_offset 40
	pushq	%r12
.Ltmp11:
	.cfi_def_cfa_offset 48
	pushq	%rbx
.Ltmp12:
	.cfi_def_cfa_offset 56
	subq	$1592, %rsp             # imm = 0x638
.Ltmp13:
	.cfi_def_cfa_offset 1648
.Ltmp14:
	.cfi_offset %rbx, -56
.Ltmp15:
	.cfi_offset %r12, -48
.Ltmp16:
	.cfi_offset %r13, -40
.Ltmp17:
	.cfi_offset %r14, -32
.Ltmp18:
	.cfi_offset %r15, -24
.Ltmp19:
	.cfi_offset %rbp, -16
	movabsq	$0, %rax
	movabsq	$1, %rcx
	leaq	.L.str7, %r8
	leaq	.L.str9, %r9
	movabsq	$2, %r10
	leaq	.L.str13, %r11
	movabsq	$3, %rbx
	leaq	.L.str12, %r14
	movabsq	$18, %r15
	leaq	.L.str5, %r12
	leaq	.L.str6, %r13
	leaq	.L.str11, %rbp
	movl	%edx, 1588(%rsp)        # 4-byte Spill
	movl	$0, %edx
	movl	%edx, 1584(%rsp)        # 4-byte Spill
	movl	$1, %edx
	movq	%rax, 1576(%rsp)        # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 1568(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 1560(%rsp)        # 8-byte Spill
	leaq	.L.str10, %rax
	movq	%rax, 1552(%rsp)        # 8-byte Spill
	leaq	.L.str8, %rax
	movq	%rax, 1544(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 1536(%rsp)        # 8-byte Spill
	movabsq	$24601, %rax            # imm = 0x6019
	movq	%rax, 1528(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 1520(%rsp)        # 8-byte Spill
	leaq	.L.str20, %rax
	movq	%rax, 1512(%rsp)        # 8-byte Spill
	leaq	.L.str27, %rax
	.loc	1 16 0 prologue_end     # mma_test_eigen.c:16:0
.Ltmp20:
	movq	%rax, 1504(%rsp)        # 8-byte Spill
	movq	1528(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 1496(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	1520(%rsp), %rax        # 8-byte Reload
	movq	%rsi, 1488(%rsp)        # 8-byte Spill
	movq	%rax, %rsi
	movq	1496(%rsp), %rax        # 8-byte Reload
	movl	%edx, 1484(%rsp)        # 4-byte Spill
	movq	%rax, %rdx
	movq	%rcx, 1472(%rsp)        # 8-byte Spill
	movq	1504(%rsp), %rax        # 8-byte Reload
	movq	%r8, 1464(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	1576(%rsp), %rax        # 8-byte Reload
	movq	%r9, 1456(%rsp)         # 8-byte Spill
	movq	%rax, %r9
	movq	1456(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	movq	%r13, 1448(%rsp)        # 8-byte Spill
	movq	%rbp, 1440(%rsp)        # 8-byte Spill
	movq	%r12, 1432(%rsp)        # 8-byte Spill
	movq	%r15, 1424(%rsp)        # 8-byte Spill
	movq	%r14, 1416(%rsp)        # 8-byte Spill
	movq	%rbx, 1408(%rsp)        # 8-byte Spill
	movq	%r10, 1400(%rsp)        # 8-byte Spill
	movq	%r11, 1392(%rsp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movq	1528(%rsp), %rdi        # 8-byte Reload
	movq	1520(%rsp), %rsi        # 8-byte Reload
	movq	1488(%rsp), %rdx        # 8-byte Reload
	movq	1472(%rsp), %rcx        # 8-byte Reload
	movq	1512(%rsp), %r8         # 8-byte Reload
	movq	1576(%rsp), %r9         # 8-byte Reload
	movq	1456(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	1588(%rsp), %esi        # 4-byte Reload
	movl	%esi, %esi
	movl	%esi, %edx
	movq	1528(%rsp), %rdi        # 8-byte Reload
	movq	1560(%rsp), %rsi        # 8-byte Reload
	movq	1472(%rsp), %rcx        # 8-byte Reload
	movq	1552(%rsp), %r8         # 8-byte Reload
	movq	1576(%rsp), %r9         # 8-byte Reload
	movq	1456(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	#DEBUG_VALUE: test_stores:store_vals <- [RSP+1496]
	#DEBUG_VALUE: test_stores:store_loc <- [RSP+1488]
	#DEBUG_VALUE: test_stores:num_vals <- [RSP+1588]
.Ltmp21:
	#DEBUG_VALUE: test_stores:num_failures <- 0
	#DEBUG_VALUE: i <- 0
	.loc	1 18 0                  # mma_test_eigen.c:18:0
	movq	1424(%rsp), %rdi        # 8-byte Reload
	movq	1432(%rsp), %rsi        # 8-byte Reload
	movq	1448(%rsp), %rdx        # 8-byte Reload
	movq	1464(%rsp), %rcx        # 8-byte Reload
	movq	1536(%rsp), %r8         # 8-byte Reload
	movl	1584(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1400(%rsp), %rdi        # 8-byte Reload
	movq	1560(%rsp), %rsi        # 8-byte Reload
	movq	1576(%rsp), %rdx        # 8-byte Reload
	movq	1576(%rsp), %rcx        # 8-byte Reload
	movq	1544(%rsp), %r8         # 8-byte Reload
	movq	1576(%rsp), %r9         # 8-byte Reload
	movq	1456(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	1588(%rsp), %esi        # 4-byte Reload
	movl	%esi, %esi
	movl	%esi, %edx
	movq	1472(%rsp), %rdi        # 8-byte Reload
	movq	1560(%rsp), %rsi        # 8-byte Reload
	movq	1472(%rsp), %rcx        # 8-byte Reload
	movq	1552(%rsp), %r8         # 8-byte Reload
	movq	1576(%rsp), %r9         # 8-byte Reload
	movq	1456(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	1588(%rsp), %esi        # 4-byte Reload
	cmpl	$0, %esi
	setg	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	1568(%rsp), %rdi        # 8-byte Reload
	movq	1472(%rsp), %rsi        # 8-byte Reload
	movq	1472(%rsp), %rcx        # 8-byte Reload
	movq	1464(%rsp), %r8         # 8-byte Reload
	movq	1576(%rsp), %r9         # 8-byte Reload
	movq	1456(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 1391(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	1424(%rsp), %rdi        # 8-byte Reload
	movq	1432(%rsp), %rsi        # 8-byte Reload
	movq	1448(%rsp), %rdx        # 8-byte Reload
	movq	1440(%rsp), %rcx        # 8-byte Reload
	movq	1400(%rsp), %r8         # 8-byte Reload
	movl	1584(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1408(%rsp), %rdi        # 8-byte Reload
	movq	1576(%rsp), %rsi        # 8-byte Reload
	movq	1576(%rsp), %rdx        # 8-byte Reload
	movq	1472(%rsp), %rcx        # 8-byte Reload
	movq	1416(%rsp), %r8         # 8-byte Reload
	movq	1576(%rsp), %r9         # 8-byte Reload
	movq	1456(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1400(%rsp), %rdi        # 8-byte Reload
	movq	1576(%rsp), %rsi        # 8-byte Reload
	movq	1576(%rsp), %rdx        # 8-byte Reload
	movq	1472(%rsp), %rcx        # 8-byte Reload
	movq	1392(%rsp), %r8         # 8-byte Reload
	movq	1576(%rsp), %r9         # 8-byte Reload
	movq	1456(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	1391(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, %edx
	movq	1472(%rsp), %rdi        # 8-byte Reload
	movq	1472(%rsp), %rsi        # 8-byte Reload
	movq	1472(%rsp), %rcx        # 8-byte Reload
	movq	1464(%rsp), %r8         # 8-byte Reload
	movq	1576(%rsp), %r9         # 8-byte Reload
	movq	1456(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	1391(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	movq	1576(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 1376(%rsp)        # 8-byte Spill
	jne	.LBB0_1
	jmp	.LBB0_4
.Ltmp22:
.LBB0_1:                                # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	movq	1376(%rsp), %rax        # 8-byte Reload
	movabsq	$2, %rcx
	movabsq	$64, %rdx
	leaq	.L.str, %rsi
	movabsq	$0, %rdi
	leaq	.L.str8, %r8
	leaq	.L.str9, %r9
	movabsq	$1, %r10
	leaq	.L.str17, %r11
	movabsq	$5, %rbx
	leaq	fprintf, %r14
	leaq	.L.str24, %r15
	movabsq	$19, %r12
	leaq	.L.str5, %r13
	leaq	.L.str12, %rbp
	movq	%rax, 1368(%rsp)        # 8-byte Spill
	leaq	.L.str23, %rax
	movq	%rax, 1360(%rsp)        # 8-byte Spill
	movabsq	$49, %rax
	movq	%rsi, 1352(%rsp)        # 8-byte Spill
	movl	$0, %esi
	movl	%esi, 1348(%rsp)        # 4-byte Spill
	movl	$1, %esi
	movq	%rax, 1336(%rsp)        # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 1328(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 1320(%rsp)        # 8-byte Spill
	leaq	.L.str22, %rax
	movq	%rax, 1312(%rsp)        # 8-byte Spill
	leaq	.L.str14, %rax
	movq	%rax, 1304(%rsp)        # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, 1296(%rsp)        # 8-byte Spill
	leaq	.L.str21, %rax
	movq	%rax, 1288(%rsp)        # 8-byte Spill
	leaq	.L.str19, %rax
	movq	%rax, 1280(%rsp)        # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, 1272(%rsp)        # 8-byte Spill
	leaq	.L.str20, %rax
	movq	%rax, 1264(%rsp)        # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 1256(%rsp)        # 8-byte Spill
	leaq	stdout, %rax
	movq	%rax, 1248(%rsp)        # 8-byte Spill
	leaq	.L.str18, %rax
	movq	%rax, 1240(%rsp)        # 8-byte Spill
	leaq	.L.str16, %rax
	movq	%rax, 1232(%rsp)        # 8-byte Spill
	leaq	.L.str15, %rax
	movq	%rax, 1224(%rsp)        # 8-byte Spill
	leaq	.L.str6, %rax
	movq	%rax, 1216(%rsp)        # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 1208(%rsp)        # 8-byte Spill
	movabsq	$48, %rax
	.loc	1 19 0                  # mma_test_eigen.c:19:0
.Ltmp23:
	movq	%rax, 1200(%rsp)        # 8-byte Spill
	movq	1208(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 1192(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movl	%esi, 1188(%rsp)        # 4-byte Spill
	movq	%r13, %rsi
	movq	%rdx, 1176(%rsp)        # 8-byte Spill
	movq	%rbp, %rdx
	movq	1304(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 1168(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	1200(%rsp), %rax        # 8-byte Reload
	movq	%r8, 1160(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movl	1348(%rsp), %eax        # 4-byte Reload
	movq	%r9, 1152(%rsp)         # 8-byte Spill
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movq	%r15, 1144(%rsp)        # 8-byte Spill
	movq	%r12, 1136(%rsp)        # 8-byte Spill
	movq	%r13, 1128(%rsp)        # 8-byte Spill
	movq	%rbp, 1120(%rsp)        # 8-byte Spill
	movq	%r14, 1112(%rsp)        # 8-byte Spill
	movq	%rbx, 1104(%rsp)        # 8-byte Spill
	movq	%r10, 1096(%rsp)        # 8-byte Spill
	movq	%r11, 1088(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	1168(%rsp), %rdi        # 8-byte Reload
	movq	1176(%rsp), %rsi        # 8-byte Reload
	movq	1192(%rsp), %rdx        # 8-byte Reload
	movq	1192(%rsp), %rcx        # 8-byte Reload
	movq	1160(%rsp), %r8         # 8-byte Reload
	movq	1096(%rsp), %r9         # 8-byte Reload
	movq	1216(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1096(%rsp), %rdi        # 8-byte Reload
	movq	1176(%rsp), %rsi        # 8-byte Reload
	movq	1192(%rsp), %rdx        # 8-byte Reload
	movq	1096(%rsp), %rcx        # 8-byte Reload
	movq	1224(%rsp), %r8         # 8-byte Reload
	movq	1096(%rsp), %r9         # 8-byte Reload
	movq	1232(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1328(%rsp), %rdi        # 8-byte Reload
	movq	1176(%rsp), %rsi        # 8-byte Reload
	movq	1368(%rsp), %rdx        # 8-byte Reload
	movq	1096(%rsp), %rcx        # 8-byte Reload
	movq	1304(%rsp), %r8         # 8-byte Reload
	movq	1192(%rsp), %r9         # 8-byte Reload
	movq	1232(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	1128(%rsp), %rsi        # 8-byte Reload
	movq	1120(%rsp), %rdx        # 8-byte Reload
	movq	1088(%rsp), %rcx        # 8-byte Reload
	movq	1272(%rsp), %r8         # 8-byte Reload
	movl	1348(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1096(%rsp), %rdi        # 8-byte Reload
	movq	1176(%rsp), %rsi        # 8-byte Reload
	movq	1248(%rsp), %rdx        # 8-byte Reload
	movq	1096(%rsp), %rcx        # 8-byte Reload
	movq	1240(%rsp), %r8         # 8-byte Reload
	movq	1192(%rsp), %r9         # 8-byte Reload
	movq	1152(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	stdout, %rcx
	movq	1328(%rsp), %rdi        # 8-byte Reload
	movq	1176(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	1096(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 1080(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	1088(%rsp), %r8         # 8-byte Reload
	movq	1192(%rsp), %r9         # 8-byte Reload
	movq	1152(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	1128(%rsp), %rsi        # 8-byte Reload
	movq	1120(%rsp), %rdx        # 8-byte Reload
	movq	1280(%rsp), %rcx        # 8-byte Reload
	movq	1256(%rsp), %r8         # 8-byte Reload
	movl	1348(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1168(%rsp), %rdi        # 8-byte Reload
	movq	1176(%rsp), %rsi        # 8-byte Reload
	movq	1368(%rsp), %rdx        # 8-byte Reload
	movq	1096(%rsp), %rcx        # 8-byte Reload
	movq	1304(%rsp), %r8         # 8-byte Reload
	movq	1192(%rsp), %r9         # 8-byte Reload
	movq	1152(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1096(%rsp), %rdi        # 8-byte Reload
	movq	1176(%rsp), %rsi        # 8-byte Reload
	movq	1488(%rsp), %rdx        # 8-byte Reload
	movq	1096(%rsp), %rcx        # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movq	1192(%rsp), %r9         # 8-byte Reload
	movq	1152(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1368(%rsp), %rcx        # 8-byte Reload
	shlq	$2, %rcx
	movq	1488(%rsp), %rdx        # 8-byte Reload
	addq	%rcx, %rdx
	movq	1328(%rsp), %rdi        # 8-byte Reload
	movq	1176(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 1072(%rsp)        # 8-byte Spill
	movq	1096(%rsp), %rcx        # 8-byte Reload
	movq	1280(%rsp), %r8         # 8-byte Reload
	movq	1192(%rsp), %r9         # 8-byte Reload
	movq	1152(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	1128(%rsp), %rsi        # 8-byte Reload
	movq	1120(%rsp), %rdx        # 8-byte Reload
	movq	1288(%rsp), %rcx        # 8-byte Reload
	movq	1272(%rsp), %r8         # 8-byte Reload
	movl	1348(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1096(%rsp), %rdi        # 8-byte Reload
	movq	1176(%rsp), %rsi        # 8-byte Reload
	movq	1072(%rsp), %rdx        # 8-byte Reload
	movq	1096(%rsp), %rcx        # 8-byte Reload
	movq	1280(%rsp), %r8         # 8-byte Reload
	movq	1192(%rsp), %r9         # 8-byte Reload
	movq	1152(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1488(%rsp), %rcx        # 8-byte Reload
	movq	1368(%rsp), %rdx        # 8-byte Reload
	movl	(%rcx,%rdx,4), %eax
	movl	%eax, %esi
	movl	%esi, %edx
	movq	1328(%rsp), %rdi        # 8-byte Reload
	movq	1320(%rsp), %rsi        # 8-byte Reload
	movq	1096(%rsp), %rcx        # 8-byte Reload
	movq	1288(%rsp), %r8         # 8-byte Reload
	movq	1192(%rsp), %r9         # 8-byte Reload
	movq	1152(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, 1068(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	1128(%rsp), %rsi        # 8-byte Reload
	movq	1120(%rsp), %rdx        # 8-byte Reload
	movq	1312(%rsp), %rcx        # 8-byte Reload
	movq	1296(%rsp), %r8         # 8-byte Reload
	movl	1348(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1096(%rsp), %rdi        # 8-byte Reload
	movq	1176(%rsp), %rsi        # 8-byte Reload
	movq	1368(%rsp), %rdx        # 8-byte Reload
	movq	1096(%rsp), %rcx        # 8-byte Reload
	movq	1304(%rsp), %r8         # 8-byte Reload
	movq	1192(%rsp), %r9         # 8-byte Reload
	movq	1152(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1368(%rsp), %rcx        # 8-byte Reload
	movl	%ecx, %eax
	movl	%eax, %esi
	movl	%esi, %edx
	movq	1328(%rsp), %rdi        # 8-byte Reload
	movq	1320(%rsp), %rsi        # 8-byte Reload
	movq	1096(%rsp), %rcx        # 8-byte Reload
	movq	1312(%rsp), %r8         # 8-byte Reload
	movq	1192(%rsp), %r9         # 8-byte Reload
	movq	1152(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, 1064(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	1128(%rsp), %rsi        # 8-byte Reload
	movq	1120(%rsp), %rdx        # 8-byte Reload
	movq	1360(%rsp), %rcx        # 8-byte Reload
	movq	1336(%rsp), %r8         # 8-byte Reload
	movl	1348(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1104(%rsp), %rdi        # 8-byte Reload
	movq	1176(%rsp), %rsi        # 8-byte Reload
	movq	1112(%rsp), %rdx        # 8-byte Reload
	movq	1096(%rsp), %rcx        # 8-byte Reload
	movq	1144(%rsp), %r8         # 8-byte Reload
	movq	1192(%rsp), %r9         # 8-byte Reload
	movq	1152(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1096(%rsp), %rdi        # 8-byte Reload
	movq	1176(%rsp), %rsi        # 8-byte Reload
	movq	1080(%rsp), %rdx        # 8-byte Reload
	movq	1096(%rsp), %rcx        # 8-byte Reload
	movq	1088(%rsp), %r8         # 8-byte Reload
	movq	1192(%rsp), %r9         # 8-byte Reload
	movq	1152(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1168(%rsp), %rdi        # 8-byte Reload
	movq	1176(%rsp), %rsi        # 8-byte Reload
	movq	1352(%rsp), %rdx        # 8-byte Reload
	movq	1192(%rsp), %rcx        # 8-byte Reload
	movq	1160(%rsp), %r8         # 8-byte Reload
	movq	1192(%rsp), %r9         # 8-byte Reload
	movq	1152(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movl	$.L.str, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
                                        # kill: AL<def> AL<kill> EAX<kill>
	movq	1080(%rsp), %rdi        # 8-byte Reload
	movl	1064(%rsp), %edx        # 4-byte Reload
	movl	1068(%rsp), %ecx        # 4-byte Reload
	callq	fprintf
	movabsq	$2, %rsi
	movabsq	$64, %rdi
	leaq	.L.str1, %rdx
	movabsq	$0, %r8
	leaq	.L.str8, %r9
	leaq	.L.str9, %r10
	movabsq	$1, %r11
	leaq	.L.str25, %rbx
	movabsq	$5, %r14
	leaq	fprintf, %r15
	leaq	.L.str24, %r12
	movabsq	$20, %r13
	leaq	.L.str5, %rbp
	leaq	.L.str12, %rcx
	movq	%rcx, 1056(%rsp)        # 8-byte Spill
	leaq	.L.str30, %rcx
	movq	%rcx, 1048(%rsp)        # 8-byte Spill
	movabsq	$49, %rcx
	movl	%eax, 1044(%rsp)        # 4-byte Spill
	movl	$0, %eax
	movl	%eax, 1040(%rsp)        # 4-byte Spill
	movl	$1, %eax
	movq	%rcx, 1032(%rsp)        # 8-byte Spill
	movabsq	$19134, %rcx            # imm = 0x4ABE
	movq	%rcx, 1024(%rsp)        # 8-byte Spill
	movabsq	$32, %rcx
	movq	%rcx, 1016(%rsp)        # 8-byte Spill
	leaq	.L.str29, %rcx
	movq	%rcx, 1008(%rsp)        # 8-byte Spill
	leaq	.L.str14, %rcx
	movq	%rcx, 1000(%rsp)        # 8-byte Spill
	movabsq	$33, %rcx
	movq	%rcx, 992(%rsp)         # 8-byte Spill
	leaq	.L.str28, %rcx
	movq	%rcx, 984(%rsp)         # 8-byte Spill
	leaq	.L.str26, %rcx
	movq	%rcx, 976(%rsp)         # 8-byte Spill
	movabsq	$27, %rcx
	movq	%rcx, 968(%rsp)         # 8-byte Spill
	leaq	.L.str27, %rcx
	movq	%rcx, 960(%rsp)         # 8-byte Spill
	movabsq	$29, %rcx
	movq	%rcx, 952(%rsp)         # 8-byte Spill
	leaq	stdout, %rcx
	movq	%rcx, 944(%rsp)         # 8-byte Spill
	leaq	.L.str18, %rcx
	movq	%rcx, 936(%rsp)         # 8-byte Spill
	leaq	.L.str23, %rcx
	.loc	1 20 0                  # mma_test_eigen.c:20:0
	movl	%eax, 932(%rsp)         # 4-byte Spill
	movl	1044(%rsp), %eax        # 4-byte Reload
	movl	%eax, %eax
                                        # kill: RAX<def> EAX<kill>
	movq	%rax, 920(%rsp)         # 8-byte Spill
	movq	1024(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 912(%rsp)         # 8-byte Spill
	movq	%rax, %rdi
	movq	1016(%rsp), %rax        # 8-byte Reload
	movq	%rsi, 904(%rsp)         # 8-byte Spill
	movq	%rax, %rsi
	movq	920(%rsp), %rax         # 8-byte Reload
	movq	%rdx, 896(%rsp)         # 8-byte Spill
	movq	%rax, %rdx
	movq	%rcx, 888(%rsp)         # 8-byte Spill
	movq	%r11, %rcx
	movq	888(%rsp), %rax         # 8-byte Reload
	movq	%r8, 880(%rsp)          # 8-byte Spill
	movq	%rax, %r8
	movq	880(%rsp), %rax         # 8-byte Reload
	movq	%r9, 872(%rsp)          # 8-byte Spill
	movq	%rax, %r9
	movq	%r10, (%rsp)
	movq	%r12, 864(%rsp)         # 8-byte Spill
	movq	%rbp, 856(%rsp)         # 8-byte Spill
	movq	%r13, 848(%rsp)         # 8-byte Spill
	movq	%r15, 840(%rsp)         # 8-byte Spill
	movq	%r14, 832(%rsp)         # 8-byte Spill
	movq	%r10, 824(%rsp)         # 8-byte Spill
	movq	%r11, 816(%rsp)         # 8-byte Spill
	movq	%rbx, 808(%rsp)         # 8-byte Spill
	callq	trace_logger_log_int
	movq	848(%rsp), %rdi         # 8-byte Reload
	movq	856(%rsp), %rsi         # 8-byte Reload
	movq	1056(%rsp), %rdx        # 8-byte Reload
	movq	808(%rsp), %rcx         # 8-byte Reload
	movq	968(%rsp), %r8          # 8-byte Reload
	movl	1040(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	816(%rsp), %rdi         # 8-byte Reload
	movq	912(%rsp), %rsi         # 8-byte Reload
	movq	944(%rsp), %rdx         # 8-byte Reload
	movq	816(%rsp), %rcx         # 8-byte Reload
	movq	936(%rsp), %r8          # 8-byte Reload
	movq	880(%rsp), %r9          # 8-byte Reload
	movq	824(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	stdout, %rax
	movq	1024(%rsp), %rdi        # 8-byte Reload
	movq	912(%rsp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	movq	816(%rsp), %rcx         # 8-byte Reload
	movq	808(%rsp), %r8          # 8-byte Reload
	movq	880(%rsp), %r9          # 8-byte Reload
	movq	824(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 800(%rsp)         # 8-byte Spill
	callq	trace_logger_log_ptr
	movq	848(%rsp), %rdi         # 8-byte Reload
	movq	856(%rsp), %rsi         # 8-byte Reload
	movq	1056(%rsp), %rdx        # 8-byte Reload
	movq	976(%rsp), %rcx         # 8-byte Reload
	movq	952(%rsp), %r8          # 8-byte Reload
	movl	1040(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	904(%rsp), %rdi         # 8-byte Reload
	movq	912(%rsp), %rsi         # 8-byte Reload
	movq	1368(%rsp), %rdx        # 8-byte Reload
	movq	816(%rsp), %rcx         # 8-byte Reload
	movq	1000(%rsp), %r8         # 8-byte Reload
	movq	880(%rsp), %r9          # 8-byte Reload
	movq	824(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	816(%rsp), %rdi         # 8-byte Reload
	movq	912(%rsp), %rsi         # 8-byte Reload
	movq	1496(%rsp), %rdx        # 8-byte Reload
	movq	816(%rsp), %rcx         # 8-byte Reload
	movq	960(%rsp), %r8          # 8-byte Reload
	movq	880(%rsp), %r9          # 8-byte Reload
	movq	824(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1368(%rsp), %rax        # 8-byte Reload
	shlq	$2, %rax
	movq	1496(%rsp), %rcx        # 8-byte Reload
	addq	%rax, %rcx
	movq	1024(%rsp), %rdi        # 8-byte Reload
	movq	912(%rsp), %rsi         # 8-byte Reload
	movq	%rcx, %rdx
	movq	816(%rsp), %rax         # 8-byte Reload
	movq	%rcx, 792(%rsp)         # 8-byte Spill
	movq	%rax, %rcx
	movq	976(%rsp), %r8          # 8-byte Reload
	movq	880(%rsp), %r9          # 8-byte Reload
	movq	824(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	848(%rsp), %rdi         # 8-byte Reload
	movq	856(%rsp), %rsi         # 8-byte Reload
	movq	1056(%rsp), %rdx        # 8-byte Reload
	movq	984(%rsp), %rcx         # 8-byte Reload
	movq	968(%rsp), %r8          # 8-byte Reload
	movl	1040(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	816(%rsp), %rdi         # 8-byte Reload
	movq	912(%rsp), %rsi         # 8-byte Reload
	movq	792(%rsp), %rdx         # 8-byte Reload
	movq	816(%rsp), %rcx         # 8-byte Reload
	movq	976(%rsp), %r8          # 8-byte Reload
	movq	880(%rsp), %r9          # 8-byte Reload
	movq	824(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1496(%rsp), %rax        # 8-byte Reload
	movq	1368(%rsp), %rcx        # 8-byte Reload
	movl	(%rax,%rcx,4), %esi
	movl	%esi, %edi
	movl	%edi, %edx
	movq	1024(%rsp), %rdi        # 8-byte Reload
	movq	1016(%rsp), %r8         # 8-byte Reload
	movl	%esi, 788(%rsp)         # 4-byte Spill
	movq	%r8, %rsi
	movq	816(%rsp), %rcx         # 8-byte Reload
	movq	984(%rsp), %r8          # 8-byte Reload
	movq	880(%rsp), %r9          # 8-byte Reload
	movq	824(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	848(%rsp), %rdi         # 8-byte Reload
	movq	856(%rsp), %rsi         # 8-byte Reload
	movq	1056(%rsp), %rdx        # 8-byte Reload
	movq	1008(%rsp), %rcx        # 8-byte Reload
	movq	992(%rsp), %r8          # 8-byte Reload
	movl	1040(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	816(%rsp), %rdi         # 8-byte Reload
	movq	912(%rsp), %rsi         # 8-byte Reload
	movq	1368(%rsp), %rdx        # 8-byte Reload
	movq	816(%rsp), %rcx         # 8-byte Reload
	movq	1000(%rsp), %r8         # 8-byte Reload
	movq	880(%rsp), %r9          # 8-byte Reload
	movq	824(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1368(%rsp), %rax        # 8-byte Reload
	movl	%eax, %esi
	movl	%esi, %edi
	movl	%edi, %edx
	movq	1024(%rsp), %rdi        # 8-byte Reload
	movq	1016(%rsp), %rcx        # 8-byte Reload
	movl	%esi, 784(%rsp)         # 4-byte Spill
	movq	%rcx, %rsi
	movq	816(%rsp), %rcx         # 8-byte Reload
	movq	1008(%rsp), %r8         # 8-byte Reload
	movq	880(%rsp), %r9          # 8-byte Reload
	movq	824(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	848(%rsp), %rdi         # 8-byte Reload
	movq	856(%rsp), %rsi         # 8-byte Reload
	movq	1056(%rsp), %rdx        # 8-byte Reload
	movq	1048(%rsp), %rcx        # 8-byte Reload
	movq	1032(%rsp), %r8         # 8-byte Reload
	movl	1040(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	832(%rsp), %rdi         # 8-byte Reload
	movq	912(%rsp), %rsi         # 8-byte Reload
	movq	840(%rsp), %rdx         # 8-byte Reload
	movq	816(%rsp), %rcx         # 8-byte Reload
	movq	864(%rsp), %r8          # 8-byte Reload
	movq	880(%rsp), %r9          # 8-byte Reload
	movq	824(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	816(%rsp), %rdi         # 8-byte Reload
	movq	912(%rsp), %rsi         # 8-byte Reload
	movq	800(%rsp), %rdx         # 8-byte Reload
	movq	816(%rsp), %rcx         # 8-byte Reload
	movq	808(%rsp), %r8          # 8-byte Reload
	movq	880(%rsp), %r9          # 8-byte Reload
	movq	824(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	904(%rsp), %rdi         # 8-byte Reload
	movq	912(%rsp), %rsi         # 8-byte Reload
	movq	896(%rsp), %rdx         # 8-byte Reload
	movq	880(%rsp), %rcx         # 8-byte Reload
	movq	872(%rsp), %r8          # 8-byte Reload
	movq	880(%rsp), %r9          # 8-byte Reload
	movq	824(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$.L.str1, %esi
                                        # kill: RSI<def> ESI<kill>
	xorl	%edi, %edi
	movb	%dil, %al
	movq	800(%rsp), %rdi         # 8-byte Reload
	movl	784(%rsp), %edx         # 4-byte Reload
	movl	788(%rsp), %ecx         # 4-byte Reload
	callq	fprintf
	movabsq	$1, %rsi
	leaq	.L.str33, %rdi
	movabsq	$0, %r8
	leaq	.L.str9, %r9
	movabsq	$2, %r10
	leaq	.L.str35, %r11
	movabsq	$3, %rbx
	leaq	.L.str16, %r14
	movabsq	$21, %r15
	leaq	.L.str5, %r12
	leaq	.L.str12, %r13
	leaq	.L.str34, %rcx
	movl	$0, %edx
	movl	$1, %ebp
	movq	%rcx, 776(%rsp)         # 8-byte Spill
	movabsq	$19134, %rcx            # imm = 0x4ABE
	movq	%rcx, 768(%rsp)         # 8-byte Spill
	movabsq	$32, %rcx
	movq	%rcx, 760(%rsp)         # 8-byte Spill
	leaq	.L.str31, %rcx
	movq	%rcx, 752(%rsp)         # 8-byte Spill
	leaq	.L.str32, %rcx
	movq	%rcx, 744(%rsp)         # 8-byte Spill
	movabsq	$46, %rcx
	movq	%rcx, 736(%rsp)         # 8-byte Spill
	movabsq	$64, %rcx
	movq	%rcx, 728(%rsp)         # 8-byte Spill
	leaq	.L.str26, %rcx
	movq	%rcx, 720(%rsp)         # 8-byte Spill
	movabsq	$27, %rcx
	movq	%rcx, 712(%rsp)         # 8-byte Spill
	leaq	.L.str19, %rcx
	movq	%rcx, 704(%rsp)         # 8-byte Spill
	leaq	.L.str30, %rcx
	.loc	1 21 0                  # mma_test_eigen.c:21:0
.Ltmp24:
	movl	%eax, %eax
                                        # kill: RAX<def> EAX<kill>
	movq	%rax, 696(%rsp)         # 8-byte Spill
	movq	768(%rsp), %rax         # 8-byte Reload
	movq	%rdi, 688(%rsp)         # 8-byte Spill
	movq	%rax, %rdi
	movq	760(%rsp), %rax         # 8-byte Reload
	movq	%rsi, 680(%rsp)         # 8-byte Spill
	movq	%rax, %rsi
	movq	696(%rsp), %rax         # 8-byte Reload
	movl	%edx, 676(%rsp)         # 4-byte Spill
	movq	%rax, %rdx
	movq	680(%rsp), %rax         # 8-byte Reload
	movq	%rcx, 664(%rsp)         # 8-byte Spill
	movq	%rax, %rcx
	movq	664(%rsp), %rax         # 8-byte Reload
	movq	%r8, 656(%rsp)          # 8-byte Spill
	movq	%rax, %r8
	movq	656(%rsp), %rax         # 8-byte Reload
	movq	%r9, 648(%rsp)          # 8-byte Spill
	movq	%rax, %r9
	movq	648(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%ebp, 644(%rsp)         # 4-byte Spill
	movq	%r13, 632(%rsp)         # 8-byte Spill
	movq	%r12, 624(%rsp)         # 8-byte Spill
	movq	%r15, 616(%rsp)         # 8-byte Spill
	movq	%r10, 608(%rsp)         # 8-byte Spill
	movq	%r11, 600(%rsp)         # 8-byte Spill
	movq	%rbx, 592(%rsp)         # 8-byte Spill
	movq	%r14, 584(%rsp)         # 8-byte Spill
	callq	trace_logger_log_int
	movq	616(%rsp), %rdi         # 8-byte Reload
	movq	624(%rsp), %rsi         # 8-byte Reload
	movq	632(%rsp), %rdx         # 8-byte Reload
	movq	752(%rsp), %rcx         # 8-byte Reload
	movq	712(%rsp), %r8          # 8-byte Reload
	movl	676(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	680(%rsp), %rdi         # 8-byte Reload
	movq	728(%rsp), %rsi         # 8-byte Reload
	movq	1072(%rsp), %rdx        # 8-byte Reload
	movq	680(%rsp), %rcx         # 8-byte Reload
	movq	704(%rsp), %r8          # 8-byte Reload
	movq	656(%rsp), %r9          # 8-byte Reload
	movq	648(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1488(%rsp), %rax        # 8-byte Reload
	movq	1368(%rsp), %rcx        # 8-byte Reload
	movl	(%rax,%rcx,4), %ebp
	movl	%ebp, %esi
	movl	%esi, %edx
	movq	768(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	680(%rsp), %rcx         # 8-byte Reload
	movq	752(%rsp), %r8          # 8-byte Reload
	movq	656(%rsp), %r9          # 8-byte Reload
	movq	648(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 580(%rsp)         # 4-byte Spill
	callq	trace_logger_log_int
	movq	616(%rsp), %rdi         # 8-byte Reload
	movq	624(%rsp), %rsi         # 8-byte Reload
	movq	632(%rsp), %rdx         # 8-byte Reload
	movq	744(%rsp), %rcx         # 8-byte Reload
	movq	712(%rsp), %r8          # 8-byte Reload
	movl	676(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	680(%rsp), %rdi         # 8-byte Reload
	movq	728(%rsp), %rsi         # 8-byte Reload
	movq	792(%rsp), %rdx         # 8-byte Reload
	movq	680(%rsp), %rcx         # 8-byte Reload
	movq	720(%rsp), %r8          # 8-byte Reload
	movq	656(%rsp), %r9          # 8-byte Reload
	movq	648(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1496(%rsp), %rax        # 8-byte Reload
	movq	1368(%rsp), %rcx        # 8-byte Reload
	movl	(%rax,%rcx,4), %ebp
	movl	%ebp, %esi
	movl	%esi, %edx
	movq	768(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	680(%rsp), %rcx         # 8-byte Reload
	movq	744(%rsp), %r8          # 8-byte Reload
	movq	656(%rsp), %r9          # 8-byte Reload
	movq	648(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 576(%rsp)         # 4-byte Spill
	callq	trace_logger_log_int
	movq	616(%rsp), %rdi         # 8-byte Reload
	movq	624(%rsp), %rsi         # 8-byte Reload
	movq	632(%rsp), %rdx         # 8-byte Reload
	movq	688(%rsp), %rcx         # 8-byte Reload
	movq	736(%rsp), %r8          # 8-byte Reload
	movl	676(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	576(%rsp), %r9d         # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	608(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	680(%rsp), %rcx         # 8-byte Reload
	movq	744(%rsp), %r8          # 8-byte Reload
	movq	656(%rsp), %r9          # 8-byte Reload
	movq	648(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	580(%rsp), %ebp         # 4-byte Reload
	movl	%ebp, %esi
	movl	%esi, %edx
	movq	680(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	680(%rsp), %rcx         # 8-byte Reload
	movq	752(%rsp), %r8          # 8-byte Reload
	movq	656(%rsp), %r9          # 8-byte Reload
	movq	648(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	580(%rsp), %ebp         # 4-byte Reload
	movl	576(%rsp), %esi         # 4-byte Reload
	cmpl	%esi, %ebp
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	768(%rsp), %rdi         # 8-byte Reload
	movq	680(%rsp), %rsi         # 8-byte Reload
	movq	680(%rsp), %rcx         # 8-byte Reload
	movq	688(%rsp), %r8          # 8-byte Reload
	movq	656(%rsp), %r9          # 8-byte Reload
	movq	648(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 575(%rsp)          # 1-byte Spill
	callq	trace_logger_log_int
	movq	616(%rsp), %rdi         # 8-byte Reload
	movq	624(%rsp), %rsi         # 8-byte Reload
	movq	632(%rsp), %rdx         # 8-byte Reload
	movq	776(%rsp), %rcx         # 8-byte Reload
	movq	608(%rsp), %r8          # 8-byte Reload
	movl	676(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	592(%rsp), %rdi         # 8-byte Reload
	movq	656(%rsp), %rsi         # 8-byte Reload
	movq	656(%rsp), %rdx         # 8-byte Reload
	movq	680(%rsp), %rcx         # 8-byte Reload
	movq	584(%rsp), %r8          # 8-byte Reload
	movq	656(%rsp), %r9          # 8-byte Reload
	movq	648(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	608(%rsp), %rdi         # 8-byte Reload
	movq	656(%rsp), %rsi         # 8-byte Reload
	movq	656(%rsp), %rdx         # 8-byte Reload
	movq	680(%rsp), %rcx         # 8-byte Reload
	movq	600(%rsp), %r8          # 8-byte Reload
	movq	656(%rsp), %r9          # 8-byte Reload
	movq	648(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	575(%rsp), %al          # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	680(%rsp), %rdi         # 8-byte Reload
	movq	680(%rsp), %rsi         # 8-byte Reload
	movq	680(%rsp), %rcx         # 8-byte Reload
	movq	688(%rsp), %r8          # 8-byte Reload
	movq	656(%rsp), %r9          # 8-byte Reload
	movq	648(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	575(%rsp), %al          # 1-byte Reload
	testb	$1, %al
	jne	.LBB0_3
# BB#2:                                 #   in Loop: Header=BB0_1 Depth=1
	movabsq	$2, %rdi
	movabsq	$64, %rax
	leaq	.L.str2, %rdx
	movabsq	$0, %rcx
	leaq	.L.str8, %r8
	leaq	.L.str9, %rsi
	movabsq	$1, %r9
	leaq	.L.str36, %r10
	movabsq	$6, %r11
	leaq	fprintf, %rbx
	leaq	.L.str24, %r14
	movabsq	$22, %r15
	leaq	.L.str5, %r12
	leaq	.L.str35, %r13
	leaq	.L.str38, %rbp
	movq	%rax, 560(%rsp)         # 8-byte Spill
	movabsq	$49, %rax
	movq	%rsi, 552(%rsp)         # 8-byte Spill
	movl	$0, %esi
	movl	%esi, 548(%rsp)         # 4-byte Spill
	movl	$1, %esi
	movq	%rax, 536(%rsp)         # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 528(%rsp)         # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 520(%rsp)         # 8-byte Spill
	leaq	.L.str37, %rax
	movq	%rax, 512(%rsp)         # 8-byte Spill
	leaq	.L.str14, %rax
	movq	%rax, 504(%rsp)         # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, 496(%rsp)         # 8-byte Spill
	leaq	stdout, %rax
	movq	%rax, 488(%rsp)         # 8-byte Spill
	leaq	.L.str18, %rax
	movq	%rax, 480(%rsp)         # 8-byte Spill
	movabsq	$27, %rax
	.loc	1 22 0                  # mma_test_eigen.c:22:0
.Ltmp25:
	movq	%rdi, 472(%rsp)         # 8-byte Spill
	movq	%r15, %rdi
	movl	%esi, 468(%rsp)         # 4-byte Spill
	movq	%r12, %rsi
	movq	%rdx, 456(%rsp)         # 8-byte Spill
	movq	%r13, %rdx
	movq	%rcx, 448(%rsp)         # 8-byte Spill
	movq	%r10, %rcx
	movq	%r8, 440(%rsp)          # 8-byte Spill
	movq	%rax, %r8
	movl	548(%rsp), %eax         # 4-byte Reload
	movq	%r9, 432(%rsp)          # 8-byte Spill
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movq	%rbp, 424(%rsp)         # 8-byte Spill
	movq	%r14, 416(%rsp)         # 8-byte Spill
	movq	%r12, 408(%rsp)         # 8-byte Spill
	movq	%r15, 400(%rsp)         # 8-byte Spill
	movq	%rbx, 392(%rsp)         # 8-byte Spill
	movq	%r13, 384(%rsp)         # 8-byte Spill
	movq	%r10, 376(%rsp)         # 8-byte Spill
	movq	%r11, 368(%rsp)         # 8-byte Spill
	callq	trace_logger_log0
	movq	432(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	movq	488(%rsp), %rdx         # 8-byte Reload
	movq	432(%rsp), %rcx         # 8-byte Reload
	movq	480(%rsp), %r8          # 8-byte Reload
	movq	448(%rsp), %r9          # 8-byte Reload
	movq	552(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	stdout, %rcx
	movq	528(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	movq	%rcx, %rdx
	movq	432(%rsp), %r8          # 8-byte Reload
	movq	%rcx, 360(%rsp)         # 8-byte Spill
	movq	%r8, %rcx
	movq	376(%rsp), %r8          # 8-byte Reload
	movq	448(%rsp), %r9          # 8-byte Reload
	movq	552(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	400(%rsp), %rdi         # 8-byte Reload
	movq	408(%rsp), %rsi         # 8-byte Reload
	movq	384(%rsp), %rdx         # 8-byte Reload
	movq	512(%rsp), %rcx         # 8-byte Reload
	movq	496(%rsp), %r8          # 8-byte Reload
	movl	548(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	432(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	movq	1368(%rsp), %rdx        # 8-byte Reload
	movq	432(%rsp), %rcx         # 8-byte Reload
	movq	504(%rsp), %r8          # 8-byte Reload
	movq	448(%rsp), %r9          # 8-byte Reload
	movq	552(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1368(%rsp), %rcx        # 8-byte Reload
	movl	%ecx, %eax
	movl	%eax, %esi
	movl	%esi, %edx
	movq	528(%rsp), %rdi         # 8-byte Reload
	movq	520(%rsp), %rsi         # 8-byte Reload
	movq	432(%rsp), %rcx         # 8-byte Reload
	movq	512(%rsp), %r8          # 8-byte Reload
	movq	448(%rsp), %r9          # 8-byte Reload
	movq	552(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, 356(%rsp)         # 4-byte Spill
	callq	trace_logger_log_int
	movq	400(%rsp), %rdi         # 8-byte Reload
	movq	408(%rsp), %rsi         # 8-byte Reload
	movq	384(%rsp), %rdx         # 8-byte Reload
	movq	424(%rsp), %rcx         # 8-byte Reload
	movq	536(%rsp), %r8          # 8-byte Reload
	movl	548(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	368(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	movq	392(%rsp), %rdx         # 8-byte Reload
	movq	432(%rsp), %rcx         # 8-byte Reload
	movq	416(%rsp), %r8          # 8-byte Reload
	movq	448(%rsp), %r9          # 8-byte Reload
	movq	552(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	432(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	movq	360(%rsp), %rdx         # 8-byte Reload
	movq	432(%rsp), %rcx         # 8-byte Reload
	movq	376(%rsp), %r8          # 8-byte Reload
	movq	448(%rsp), %r9          # 8-byte Reload
	movq	552(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	472(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	movq	456(%rsp), %rdx         # 8-byte Reload
	movq	448(%rsp), %rcx         # 8-byte Reload
	movq	440(%rsp), %r8          # 8-byte Reload
	movq	448(%rsp), %r9          # 8-byte Reload
	movq	552(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movl	$.L.str2, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
                                        # kill: AL<def> AL<kill> EAX<kill>
	movq	360(%rsp), %rdi         # 8-byte Reload
	movl	356(%rsp), %edx         # 4-byte Reload
	movl	580(%rsp), %ecx         # 4-byte Reload
	movl	576(%rsp), %r8d         # 4-byte Reload
	callq	fprintf
	movabsq	$1, %rsi
	movabsq	$0, %rdi
	leaq	.L.str16, %r8
	leaq	.L.str9, %r9
	movabsq	$25, %r10
	leaq	.L.str5, %r11
	leaq	.L.str35, %rdx
	leaq	.L.str39, %rcx
	movabsq	$2, %rbx
	movl	$0, %ebp
	movl	$1, %r14d
	movabsq	$19134, %r15            # imm = 0x4ABE
	movabsq	$32, %r12
	leaq	.L.str38, %r13
	.loc	1 25 0                  # mma_test_eigen.c:25:0
	movl	%eax, %eax
                                        # kill: RAX<def> EAX<kill>
	movq	%rdi, 344(%rsp)         # 8-byte Spill
	movq	%r15, %rdi
	movq	%rsi, 336(%rsp)         # 8-byte Spill
	movq	%r12, %rsi
	movq	%rdx, 328(%rsp)         # 8-byte Spill
	movq	%rax, %rdx
	movq	336(%rsp), %rax         # 8-byte Reload
	movq	%rcx, 320(%rsp)         # 8-byte Spill
	movq	%rax, %rcx
	movq	%r8, 312(%rsp)          # 8-byte Spill
	movq	%r13, %r8
	movq	344(%rsp), %r15         # 8-byte Reload
	movq	%r9, 304(%rsp)          # 8-byte Spill
	movq	%r15, %r9
	movq	304(%rsp), %r12         # 8-byte Reload
	movq	%r12, (%rsp)
	movl	%r14d, 300(%rsp)        # 4-byte Spill
	movl	%ebp, 296(%rsp)         # 4-byte Spill
	movq	%rbx, 288(%rsp)         # 8-byte Spill
	movq	%r10, 280(%rsp)         # 8-byte Spill
	movq	%r11, 272(%rsp)         # 8-byte Spill
	callq	trace_logger_log_int
	movq	280(%rsp), %rdi         # 8-byte Reload
	movq	272(%rsp), %rsi         # 8-byte Reload
	movq	328(%rsp), %rdx         # 8-byte Reload
	movq	320(%rsp), %rcx         # 8-byte Reload
	movq	288(%rsp), %r8          # 8-byte Reload
	movl	296(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	336(%rsp), %rdi         # 8-byte Reload
	movq	344(%rsp), %rsi         # 8-byte Reload
	movq	344(%rsp), %rdx         # 8-byte Reload
	movq	336(%rsp), %rcx         # 8-byte Reload
	movq	312(%rsp), %r8          # 8-byte Reload
	movq	344(%rsp), %r9          # 8-byte Reload
	movq	304(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
.Ltmp26:
.LBB0_3:                                #   in Loop: Header=BB0_1 Depth=1
	movabsq	$1, %rax
	leaq	.L.str41, %rcx
	movabsq	$0, %rdx
	leaq	.L.str9, %rsi
	movabsq	$2, %rdi
	leaq	.L.str12, %r8
	movabsq	$3, %r9
	leaq	.L.str13, %r10
	movabsq	$18, %r11
	leaq	.L.str5, %rbx
	leaq	.L.str16, %r14
	leaq	.L.str42, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 264(%rsp)         # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 256(%rsp)         # 8-byte Spill
	leaq	.L.str40, %rax
	movq	%rax, 248(%rsp)         # 8-byte Spill
	leaq	.L.str10, %rax
	movq	%rax, 240(%rsp)         # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 232(%rsp)         # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 224(%rsp)         # 8-byte Spill
	leaq	.L.str15, %rax
	movq	%rax, 216(%rsp)         # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, 208(%rsp)         # 8-byte Spill
	leaq	.L.str14, %rax
	movq	%rax, 200(%rsp)         # 8-byte Spill
	leaq	.L.str8, %rax
	movq	%rax, 192(%rsp)         # 8-byte Spill
	movabsq	$8, %rax
	.loc	1 18 0                  # mma_test_eigen.c:18:0
	movq	%rdi, 184(%rsp)         # 8-byte Spill
	movq	%r11, %rdi
	movq	%rsi, 176(%rsp)         # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, 168(%rsp)         # 8-byte Spill
	movq	%r14, %rdx
	movq	%rax, 160(%rsp)         # 8-byte Spill
	movq	216(%rsp), %rax         # 8-byte Reload
	movq	%rcx, 152(%rsp)         # 8-byte Spill
	movq	%rax, %rcx
	movq	160(%rsp), %rax         # 8-byte Reload
	movq	%r8, 144(%rsp)          # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 136(%rsp)          # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r15, 128(%rsp)         # 8-byte Spill
	movl	%ebp, 124(%rsp)         # 4-byte Spill
	movl	%r12d, 120(%rsp)        # 4-byte Spill
	movq	%r13, 112(%rsp)         # 8-byte Spill
	movq	%r14, 104(%rsp)         # 8-byte Spill
	movq	%rbx, 96(%rsp)          # 8-byte Spill
	movq	%r10, 88(%rsp)          # 8-byte Spill
	movq	%r11, 80(%rsp)          # 8-byte Spill
	callq	trace_logger_log0
	movq	184(%rsp), %rdi         # 8-byte Reload
	movq	224(%rsp), %rsi         # 8-byte Reload
	movq	264(%rsp), %rdx         # 8-byte Reload
	movq	168(%rsp), %rcx         # 8-byte Reload
	movq	192(%rsp), %r8          # 8-byte Reload
	movq	168(%rsp), %r9          # 8-byte Reload
	movq	176(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	264(%rsp), %rdi         # 8-byte Reload
	movq	224(%rsp), %rsi         # 8-byte Reload
	movq	1368(%rsp), %rdx        # 8-byte Reload
	movq	264(%rsp), %rcx         # 8-byte Reload
	movq	200(%rsp), %r8          # 8-byte Reload
	movq	168(%rsp), %r9          # 8-byte Reload
	movq	176(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1368(%rsp), %rax        # 8-byte Reload
	addq	$1, %rax
	movq	112(%rsp), %rdi         # 8-byte Reload
	movq	224(%rsp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	movq	264(%rsp), %rcx         # 8-byte Reload
	movq	216(%rsp), %r8          # 8-byte Reload
	movq	168(%rsp), %r9          # 8-byte Reload
	movq	176(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 72(%rsp)          # 8-byte Spill
	callq	trace_logger_log_int
	movq	80(%rsp), %rdi          # 8-byte Reload
	movq	96(%rsp), %rsi          # 8-byte Reload
	movq	104(%rsp), %rdx         # 8-byte Reload
	movq	248(%rsp), %rcx         # 8-byte Reload
	movq	208(%rsp), %r8          # 8-byte Reload
	movl	124(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	264(%rsp), %rdi         # 8-byte Reload
	movq	224(%rsp), %rsi         # 8-byte Reload
	movq	72(%rsp), %rdx          # 8-byte Reload
	movq	264(%rsp), %rcx         # 8-byte Reload
	movq	216(%rsp), %r8          # 8-byte Reload
	movq	168(%rsp), %r9          # 8-byte Reload
	movq	176(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	72(%rsp), %rax          # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	112(%rsp), %rdi         # 8-byte Reload
	movq	256(%rsp), %rsi         # 8-byte Reload
	movq	264(%rsp), %rcx         # 8-byte Reload
	movq	248(%rsp), %r8          # 8-byte Reload
	movq	168(%rsp), %r9          # 8-byte Reload
	movq	176(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 68(%rsp)          # 4-byte Spill
	callq	trace_logger_log_int
	movq	80(%rsp), %rdi          # 8-byte Reload
	movq	96(%rsp), %rsi          # 8-byte Reload
	movq	104(%rsp), %rdx         # 8-byte Reload
	movq	152(%rsp), %rcx         # 8-byte Reload
	movq	232(%rsp), %r8          # 8-byte Reload
	movl	124(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	1588(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	184(%rsp), %rdi         # 8-byte Reload
	movq	256(%rsp), %rsi         # 8-byte Reload
	movq	264(%rsp), %rcx         # 8-byte Reload
	movq	240(%rsp), %r8          # 8-byte Reload
	movq	168(%rsp), %r9          # 8-byte Reload
	movq	176(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	68(%rsp), %ebp          # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	264(%rsp), %rdi         # 8-byte Reload
	movq	256(%rsp), %rsi         # 8-byte Reload
	movq	264(%rsp), %rcx         # 8-byte Reload
	movq	248(%rsp), %r8          # 8-byte Reload
	movq	168(%rsp), %r9          # 8-byte Reload
	movq	176(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	68(%rsp), %ebp          # 4-byte Reload
	movl	1588(%rsp), %r12d       # 4-byte Reload
	cmpl	%r12d, %ebp
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	112(%rsp), %rdi         # 8-byte Reload
	movq	264(%rsp), %rsi         # 8-byte Reload
	movq	264(%rsp), %rcx         # 8-byte Reload
	movq	152(%rsp), %r8          # 8-byte Reload
	movq	168(%rsp), %r9          # 8-byte Reload
	movq	176(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 67(%rsp)           # 1-byte Spill
	callq	trace_logger_log_int
	movq	80(%rsp), %rdi          # 8-byte Reload
	movq	96(%rsp), %rsi          # 8-byte Reload
	movq	104(%rsp), %rdx         # 8-byte Reload
	movq	128(%rsp), %rcx         # 8-byte Reload
	movq	184(%rsp), %r8          # 8-byte Reload
	movl	124(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	136(%rsp), %rdi         # 8-byte Reload
	movq	168(%rsp), %rsi         # 8-byte Reload
	movq	168(%rsp), %rdx         # 8-byte Reload
	movq	264(%rsp), %rcx         # 8-byte Reload
	movq	88(%rsp), %r8           # 8-byte Reload
	movq	168(%rsp), %r9          # 8-byte Reload
	movq	176(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	184(%rsp), %rdi         # 8-byte Reload
	movq	168(%rsp), %rsi         # 8-byte Reload
	movq	168(%rsp), %rdx         # 8-byte Reload
	movq	264(%rsp), %rcx         # 8-byte Reload
	movq	144(%rsp), %r8          # 8-byte Reload
	movq	168(%rsp), %r9          # 8-byte Reload
	movq	176(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	67(%rsp), %al           # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	264(%rsp), %rdi         # 8-byte Reload
	movq	264(%rsp), %rsi         # 8-byte Reload
	movq	264(%rsp), %rcx         # 8-byte Reload
	movq	152(%rsp), %r8          # 8-byte Reload
	movq	168(%rsp), %r9          # 8-byte Reload
	movq	176(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	67(%rsp), %al           # 1-byte Reload
	testb	$1, %al
	movq	72(%rsp), %rcx          # 8-byte Reload
	movq	%rcx, 1376(%rsp)        # 8-byte Spill
	jne	.LBB0_4
	jmp	.LBB0_1
.Ltmp27:
.LBB0_4:                                # %._crit_edge
	movl	$0, %eax
	movabsq	$1, %rcx
	movabsq	$32, %rsi
	movabsq	$0, %rdx
	leaq	.L.str8, %r8
	leaq	.L.str9, %rdi
	movabsq	$28, %r9
	leaq	.L.str5, %r10
	leaq	.L.str13, %r11
	leaq	.L.str43, %rbx
	movl	$1, %ebp
	.loc	1 28 0                  # mma_test_eigen.c:28:0
	movq	%rdi, 56(%rsp)          # 8-byte Spill
	movq	%r9, %rdi
	movq	%rsi, 48(%rsp)          # 8-byte Spill
	movq	%r10, %rsi
	movq	%rdx, 40(%rsp)          # 8-byte Spill
	movq	%r11, %rdx
	movq	%rcx, 32(%rsp)          # 8-byte Spill
	movq	%rbx, %rcx
	movq	32(%rsp), %r9           # 8-byte Reload
	movq	%r8, 24(%rsp)           # 8-byte Spill
	movq	%r9, %r8
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movl	%eax, 20(%rsp)          # 4-byte Spill
	movl	%ebp, 16(%rsp)          # 4-byte Spill
	callq	trace_logger_log0
	movq	32(%rsp), %rdi          # 8-byte Reload
	movq	48(%rsp), %rsi          # 8-byte Reload
	movq	40(%rsp), %rdx          # 8-byte Reload
	movq	40(%rsp), %rcx          # 8-byte Reload
	movq	24(%rsp), %r8           # 8-byte Reload
	movq	40(%rsp), %r9           # 8-byte Reload
	movq	56(%rsp), %r10          # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	20(%rsp), %eax          # 4-byte Reload
	addq	$1592, %rsp             # imm = 0x638
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
.Ltmp28:
.Ltmp29:
	.size	test_stores, .Ltmp29-test_stores
.Lfunc_end0:
	.cfi_endproc

	.section	.rodata.cst8,"aM",@progbits,8
	.align	8
.LCPI1_0:
	.quad	4607182418800017408     # double 1
.LCPI1_1:
	.quad	4611686018427387904     # double 2
.LCPI1_2:
	.quad	4613937818241073152     # double 3
.LCPI1_3:
	.quad	4652007308841189376     # double 1000
	.text
	.globl	store_kernel
	.align	16, 0x90
	.type	store_kernel,@function
store_kernel:                           # @store_kernel
	.cfi_startproc
.Lfunc_begin1:
	.loc	1 33 0                  # mma_test_eigen.c:33:0
# BB#0:
	pushq	%rbp
.Ltmp37:
	.cfi_def_cfa_offset 16
	pushq	%r15
.Ltmp38:
	.cfi_def_cfa_offset 24
	pushq	%r14
.Ltmp39:
	.cfi_def_cfa_offset 32
	pushq	%r13
.Ltmp40:
	.cfi_def_cfa_offset 40
	pushq	%r12
.Ltmp41:
	.cfi_def_cfa_offset 48
	pushq	%rbx
.Ltmp42:
	.cfi_def_cfa_offset 56
	subq	$1944, %rsp             # imm = 0x798
.Ltmp43:
	.cfi_def_cfa_offset 2000
.Ltmp44:
	.cfi_offset %rbx, -56
.Ltmp45:
	.cfi_offset %r12, -48
.Ltmp46:
	.cfi_offset %r13, -40
.Ltmp47:
	.cfi_offset %r14, -32
.Ltmp48:
	.cfi_offset %r15, -24
.Ltmp49:
	.cfi_offset %rbp, -16
	movabsq	$1, %rax
	movabsq	$64, %rcx
	leaq	.L.str19, %r8
	movabsq	$0, %r9
	leaq	.L.str9, %r10
	movabsq	$2, %r11
	leaq	malloc, %rbx
	leaq	.L.str45, %r14
	movabsq	$37, %r15
	leaq	.L.str44, %r12
	leaq	.L.str6, %r13
	leaq	.L.str21, %rbp
	movq	%rax, 1936(%rsp)        # 8-byte Spill
	movabsq	$49, %rax
	movl	%edx, 1932(%rsp)        # 4-byte Spill
	movl	$1, %edx
	movq	%rax, 1920(%rsp)        # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 1912(%rsp)        # 8-byte Spill
	leaq	.L.str17, %rax
	movq	%rax, 1904(%rsp)        # 8-byte Spill
	movabsq	$3, %rax
	movq	%rax, 1896(%rsp)        # 8-byte Spill
	leaq	.L.str8, %rax
	movq	%rax, 1888(%rsp)        # 8-byte Spill
	movabsq	$20, %rax
	movq	%rax, 1880(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 1872(%rsp)        # 8-byte Spill
	leaq	.L.str7, %rax
	movq	%rax, 1864(%rsp)        # 8-byte Spill
	movabsq	$34, %rax
	movq	%rax, 1856(%rsp)        # 8-byte Spill
	leaq	.L.str10, %rax
	movq	%rax, 1848(%rsp)        # 8-byte Spill
	movabsq	$12, %rax
	movq	%rax, 1840(%rsp)        # 8-byte Spill
	leaq	.L.str20, %rax
	movq	%rax, 1832(%rsp)        # 8-byte Spill
	leaq	.L.str27, %rax
	.loc	1 33 0 prologue_end     # mma_test_eigen.c:33:0
.Ltmp50:
	movq	%rdi, 1824(%rsp)        # 8-byte Spill
	movq	%r12, %rdi
	movq	%rax, 1816(%rsp)        # 8-byte Spill
	movq	1896(%rsp), %rax        # 8-byte Reload
	movq	%rsi, 1808(%rsp)        # 8-byte Spill
	movq	%rax, %rsi
	movq	%r13, 1800(%rsp)        # 8-byte Spill
	movq	%rbp, 1792(%rsp)        # 8-byte Spill
	movl	%edx, 1788(%rsp)        # 4-byte Spill
	movq	%rcx, 1776(%rsp)        # 8-byte Spill
	movq	%r8, 1768(%rsp)         # 8-byte Spill
	movq	%r9, 1760(%rsp)         # 8-byte Spill
	movq	%r10, 1752(%rsp)        # 8-byte Spill
	movq	%r11, 1744(%rsp)        # 8-byte Spill
	movq	%rbx, 1736(%rsp)        # 8-byte Spill
	movq	%r14, 1728(%rsp)        # 8-byte Spill
	movq	%r15, 1720(%rsp)        # 8-byte Spill
	movq	%r12, 1712(%rsp)        # 8-byte Spill
	callq	trace_logger_log_entry
	movq	1936(%rsp), %rdi        # 8-byte Reload
	movq	1776(%rsp), %rsi        # 8-byte Reload
	movq	1824(%rsp), %rdx        # 8-byte Reload
	movq	1936(%rsp), %rcx        # 8-byte Reload
	movq	1816(%rsp), %r8         # 8-byte Reload
	movq	1760(%rsp), %r9         # 8-byte Reload
	movq	1752(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1744(%rsp), %rdi        # 8-byte Reload
	movq	1776(%rsp), %rsi        # 8-byte Reload
	movq	1808(%rsp), %rdx        # 8-byte Reload
	movq	1936(%rsp), %rcx        # 8-byte Reload
	movq	1832(%rsp), %r8         # 8-byte Reload
	movq	1760(%rsp), %r9         # 8-byte Reload
	movq	1752(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	1932(%rsp), %esi        # 4-byte Reload
	movl	%esi, %esi
	movl	%esi, %edx
	movq	1896(%rsp), %rdi        # 8-byte Reload
	movq	1872(%rsp), %rsi        # 8-byte Reload
	movq	1936(%rsp), %rcx        # 8-byte Reload
	movq	1848(%rsp), %r8         # 8-byte Reload
	movq	1760(%rsp), %r9         # 8-byte Reload
	movq	1752(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	#DEBUG_VALUE: store_kernel:store_vals <- [RSP+1824]
	#DEBUG_VALUE: store_kernel:store_loc <- [RSP+1808]
	#DEBUG_VALUE: store_kernel:num_vals <- [RSP+1932]
	.loc	1 37 0                  # mma_test_eigen.c:37:0
	movq	1720(%rsp), %rdi        # 8-byte Reload
	movq	1712(%rsp), %rsi        # 8-byte Reload
	movq	1800(%rsp), %rdx        # 8-byte Reload
	movq	1864(%rsp), %rcx        # 8-byte Reload
	movq	1840(%rsp), %r8         # 8-byte Reload
	movl	1788(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	1932(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %esi
	movl	%esi, %edx
	movq	1744(%rsp), %rdi        # 8-byte Reload
	movq	1872(%rsp), %rsi        # 8-byte Reload
	movq	1936(%rsp), %rcx        # 8-byte Reload
	movq	1848(%rsp), %r8         # 8-byte Reload
	movq	1760(%rsp), %r9         # 8-byte Reload
	movq	1752(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	1932(%rsp), %esi        # 4-byte Reload
	movl	%esi, %esi
	movl	%esi, %edx
	movq	1936(%rsp), %rdi        # 8-byte Reload
	movq	1872(%rsp), %rsi        # 8-byte Reload
	movq	1936(%rsp), %rcx        # 8-byte Reload
	movq	1848(%rsp), %r8         # 8-byte Reload
	movq	1760(%rsp), %r9         # 8-byte Reload
	movq	1752(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	1932(%rsp), %esi        # 4-byte Reload
	imull	%esi, %esi
	movl	%esi, %edi
	movl	%edi, %edx
	movq	1912(%rsp), %rdi        # 8-byte Reload
	movq	1872(%rsp), %rax        # 8-byte Reload
	movl	%esi, 1708(%rsp)        # 4-byte Spill
	movq	%rax, %rsi
	movq	1936(%rsp), %rcx        # 8-byte Reload
	movq	1864(%rsp), %r8         # 8-byte Reload
	movq	1760(%rsp), %r9         # 8-byte Reload
	movq	1752(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1720(%rsp), %rdi        # 8-byte Reload
	movq	1712(%rsp), %rsi        # 8-byte Reload
	movq	1800(%rsp), %rdx        # 8-byte Reload
	movq	1904(%rsp), %rcx        # 8-byte Reload
	movq	1856(%rsp), %r8         # 8-byte Reload
	movl	1788(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	1708(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %esi
	movl	%esi, %edx
	movq	1936(%rsp), %rdi        # 8-byte Reload
	movq	1872(%rsp), %rsi        # 8-byte Reload
	movq	1936(%rsp), %rcx        # 8-byte Reload
	movq	1864(%rsp), %r8         # 8-byte Reload
	movq	1760(%rsp), %r9         # 8-byte Reload
	movq	1752(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	1708(%rsp), %esi        # 4-byte Reload
	movl	%esi, %esi
	movl	%esi, %eax
	movq	1912(%rsp), %rdi        # 8-byte Reload
	movq	1776(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	1936(%rsp), %rcx        # 8-byte Reload
	movq	1904(%rsp), %r8         # 8-byte Reload
	movq	1760(%rsp), %r9         # 8-byte Reload
	movq	1752(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 1696(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	1720(%rsp), %rdi        # 8-byte Reload
	movq	1712(%rsp), %rsi        # 8-byte Reload
	movq	1800(%rsp), %rdx        # 8-byte Reload
	movq	1768(%rsp), %rcx        # 8-byte Reload
	movq	1880(%rsp), %r8         # 8-byte Reload
	movl	1788(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1744(%rsp), %rdi        # 8-byte Reload
	movq	1776(%rsp), %rsi        # 8-byte Reload
	movq	1896(%rsp), %rdx        # 8-byte Reload
	movq	1760(%rsp), %rcx        # 8-byte Reload
	movq	1888(%rsp), %r8         # 8-byte Reload
	movq	1760(%rsp), %r9         # 8-byte Reload
	movq	1752(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1936(%rsp), %rdi        # 8-byte Reload
	movq	1776(%rsp), %rsi        # 8-byte Reload
	movq	1696(%rsp), %rdx        # 8-byte Reload
	movq	1936(%rsp), %rcx        # 8-byte Reload
	movq	1904(%rsp), %r8         # 8-byte Reload
	movq	1760(%rsp), %r9         # 8-byte Reload
	movq	1752(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1696(%rsp), %rax        # 8-byte Reload
	shlq	$3, %rax
	movq	1912(%rsp), %rdi        # 8-byte Reload
	movq	1776(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	1936(%rsp), %rcx        # 8-byte Reload
	movq	1768(%rsp), %r8         # 8-byte Reload
	movq	1760(%rsp), %r9         # 8-byte Reload
	movq	1752(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 1688(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	1720(%rsp), %rdi        # 8-byte Reload
	movq	1712(%rsp), %rsi        # 8-byte Reload
	movq	1800(%rsp), %rdx        # 8-byte Reload
	movq	1792(%rsp), %rcx        # 8-byte Reload
	movq	1920(%rsp), %r8         # 8-byte Reload
	movl	1788(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1744(%rsp), %rdi        # 8-byte Reload
	movq	1776(%rsp), %rsi        # 8-byte Reload
	movq	1736(%rsp), %rdx        # 8-byte Reload
	movq	1936(%rsp), %rcx        # 8-byte Reload
	movq	1728(%rsp), %r8         # 8-byte Reload
	movq	1760(%rsp), %r9         # 8-byte Reload
	movq	1752(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1936(%rsp), %rdi        # 8-byte Reload
	movq	1776(%rsp), %rsi        # 8-byte Reload
	movq	1688(%rsp), %rdx        # 8-byte Reload
	movq	1936(%rsp), %rcx        # 8-byte Reload
	movq	1768(%rsp), %r8         # 8-byte Reload
	movq	1760(%rsp), %r9         # 8-byte Reload
	movq	1752(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1688(%rsp), %rdi        # 8-byte Reload
	callq	malloc
.Ltmp51:
	movabsq	$1, %rcx
	movabsq	$64, %rdx
	leaq	.L.str25, %rsi
	movabsq	$0, %rdi
	leaq	.L.str9, %r8
	movabsq	$2, %r9
	leaq	malloc, %r10
	leaq	.L.str45, %r11
	movabsq	$38, %rbx
	leaq	.L.str44, %r14
	leaq	.L.str6, %r15
	leaq	.L.str26, %r12
	movabsq	$49, %r13
	movl	$1, %ebp
	movq	%rax, 1680(%rsp)        # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 1672(%rsp)        # 8-byte Spill
	leaq	.L.str23, %rax
	movq	%rax, 1664(%rsp)        # 8-byte Spill
	movabsq	$3, %rax
	movq	%rax, 1656(%rsp)        # 8-byte Spill
	leaq	.L.str8, %rax
	movq	%rax, 1648(%rsp)        # 8-byte Spill
	movabsq	$20, %rax
	movq	%rax, 1640(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 1632(%rsp)        # 8-byte Spill
	leaq	.L.str10, %rax
	movq	%rax, 1624(%rsp)        # 8-byte Spill
	movabsq	$35, %rax
	movq	%rax, 1616(%rsp)        # 8-byte Spill
	leaq	.L.str22, %rax
	movq	%rax, 1608(%rsp)        # 8-byte Spill
	leaq	.L.str21, %rax
	movq	%rax, 1600(%rsp)        # 8-byte Spill
	movabsq	$37, %rax
	movq	%rax, 1592(%rsp)        # 8-byte Spill
	movabsq	$44, %rax
	movq	%rax, 1584(%rsp)        # 8-byte Spill
	movq	1672(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 1576(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 1568(%rsp)        # 8-byte Spill
	movq	%rdx, %rsi
	movq	1680(%rsp), %rax        # 8-byte Reload
	movq	%rdx, 1560(%rsp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	%rcx, 1552(%rsp)        # 8-byte Spill
	movq	1600(%rsp), %rax        # 8-byte Reload
	movq	%r8, 1544(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	1576(%rsp), %rax        # 8-byte Reload
	movq	%r9, 1536(%rsp)         # 8-byte Spill
	movq	%rax, %r9
	movq	1544(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	movq	%r15, 1528(%rsp)        # 8-byte Spill
	movq	%r12, 1520(%rsp)        # 8-byte Spill
	movq	%r13, 1512(%rsp)        # 8-byte Spill
	movl	%ebp, 1508(%rsp)        # 4-byte Spill
	movq	%r14, 1496(%rsp)        # 8-byte Spill
	movq	%rbx, 1488(%rsp)        # 8-byte Spill
	movq	%r10, 1480(%rsp)        # 8-byte Spill
	movq	%r11, 1472(%rsp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movq	1592(%rsp), %rdi        # 8-byte Reload
	movq	1496(%rsp), %rsi        # 8-byte Reload
	movq	1528(%rsp), %rdx        # 8-byte Reload
	movq	1608(%rsp), %rcx        # 8-byte Reload
	movq	1584(%rsp), %r8         # 8-byte Reload
	movl	1508(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1552(%rsp), %rdi        # 8-byte Reload
	movq	1560(%rsp), %rsi        # 8-byte Reload
	movq	1680(%rsp), %rdx        # 8-byte Reload
	movq	1552(%rsp), %rcx        # 8-byte Reload
	movq	1600(%rsp), %r8         # 8-byte Reload
	movq	1576(%rsp), %r9         # 8-byte Reload
	movq	1544(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1680(%rsp), %rax        # 8-byte Reload
	movq	1672(%rsp), %rdi        # 8-byte Reload
	movq	1560(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	1552(%rsp), %rcx        # 8-byte Reload
	movq	1608(%rsp), %r8         # 8-byte Reload
	movq	1576(%rsp), %r9         # 8-byte Reload
	movq	1544(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 1464(%rsp)        # 8-byte Spill
	callq	trace_logger_log_ptr
.Ltmp52:
	#DEBUG_VALUE: store_kernel:a <- [RSP+1464]
	.loc	1 38 0                  # mma_test_eigen.c:38:0
	movq	1488(%rsp), %rdi        # 8-byte Reload
	movq	1496(%rsp), %rsi        # 8-byte Reload
	movq	1528(%rsp), %rdx        # 8-byte Reload
	movq	1664(%rsp), %rcx        # 8-byte Reload
	movq	1616(%rsp), %r8         # 8-byte Reload
	movl	1508(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	1932(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	1552(%rsp), %rdi        # 8-byte Reload
	movq	1632(%rsp), %rsi        # 8-byte Reload
	movq	1552(%rsp), %rcx        # 8-byte Reload
	movq	1624(%rsp), %r8         # 8-byte Reload
	movq	1576(%rsp), %r9         # 8-byte Reload
	movq	1544(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	1932(%rsp), %ebp        # 4-byte Reload
	movslq	%ebp, %rax
	movq	1672(%rsp), %rdi        # 8-byte Reload
	movq	1560(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	1552(%rsp), %rcx        # 8-byte Reload
	movq	1664(%rsp), %r8         # 8-byte Reload
	movq	1576(%rsp), %r9         # 8-byte Reload
	movq	1544(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 1456(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	1488(%rsp), %rdi        # 8-byte Reload
	movq	1496(%rsp), %rsi        # 8-byte Reload
	movq	1528(%rsp), %rdx        # 8-byte Reload
	movq	1568(%rsp), %rcx        # 8-byte Reload
	movq	1640(%rsp), %r8         # 8-byte Reload
	movl	1508(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1536(%rsp), %rdi        # 8-byte Reload
	movq	1560(%rsp), %rsi        # 8-byte Reload
	movq	1656(%rsp), %rdx        # 8-byte Reload
	movq	1576(%rsp), %rcx        # 8-byte Reload
	movq	1648(%rsp), %r8         # 8-byte Reload
	movq	1576(%rsp), %r9         # 8-byte Reload
	movq	1544(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1552(%rsp), %rdi        # 8-byte Reload
	movq	1560(%rsp), %rsi        # 8-byte Reload
	movq	1456(%rsp), %rdx        # 8-byte Reload
	movq	1552(%rsp), %rcx        # 8-byte Reload
	movq	1664(%rsp), %r8         # 8-byte Reload
	movq	1576(%rsp), %r9         # 8-byte Reload
	movq	1544(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1456(%rsp), %rax        # 8-byte Reload
	shlq	$3, %rax
	movq	1672(%rsp), %rdi        # 8-byte Reload
	movq	1560(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	1552(%rsp), %rcx        # 8-byte Reload
	movq	1568(%rsp), %r8         # 8-byte Reload
	movq	1576(%rsp), %r9         # 8-byte Reload
	movq	1544(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 1448(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	1488(%rsp), %rdi        # 8-byte Reload
	movq	1496(%rsp), %rsi        # 8-byte Reload
	movq	1528(%rsp), %rdx        # 8-byte Reload
	movq	1520(%rsp), %rcx        # 8-byte Reload
	movq	1512(%rsp), %r8         # 8-byte Reload
	movl	1508(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1536(%rsp), %rdi        # 8-byte Reload
	movq	1560(%rsp), %rsi        # 8-byte Reload
	movq	1480(%rsp), %rdx        # 8-byte Reload
	movq	1552(%rsp), %rcx        # 8-byte Reload
	movq	1472(%rsp), %r8         # 8-byte Reload
	movq	1576(%rsp), %r9         # 8-byte Reload
	movq	1544(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1552(%rsp), %rdi        # 8-byte Reload
	movq	1560(%rsp), %rsi        # 8-byte Reload
	movq	1448(%rsp), %rdx        # 8-byte Reload
	movq	1552(%rsp), %rcx        # 8-byte Reload
	movq	1568(%rsp), %r8         # 8-byte Reload
	movq	1576(%rsp), %r9         # 8-byte Reload
	movq	1544(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1448(%rsp), %rdi        # 8-byte Reload
	callq	malloc
.Ltmp53:
	movabsq	$1, %rcx
	movabsq	$64, %rdx
	leaq	.L.str19, %r8
	movabsq	$0, %rsi
	leaq	.L.str9, %rdi
	movabsq	$2, %r9
	leaq	malloc, %r10
	leaq	.L.str45, %r11
	movabsq	$39, %rbx
	leaq	.L.str44, %r14
	leaq	.L.str6, %r15
	leaq	.L.str29, %r12
	movabsq	$49, %r13
	movl	$1, %ebp
	movq	%rax, 1440(%rsp)        # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 1432(%rsp)        # 8-byte Spill
	leaq	.L.str28, %rax
	movq	%rax, 1424(%rsp)        # 8-byte Spill
	leaq	.L.str26, %rax
	movq	%rax, 1416(%rsp)        # 8-byte Spill
	movabsq	$38, %rax
	movq	%rax, 1408(%rsp)        # 8-byte Spill
	movabsq	$44, %rax
	movq	%rax, 1400(%rsp)        # 8-byte Spill
	movq	1432(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 1392(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 1384(%rsp)        # 8-byte Spill
	movq	%rdx, %rsi
	movq	1440(%rsp), %rax        # 8-byte Reload
	movq	%rdx, 1376(%rsp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	%rcx, 1368(%rsp)        # 8-byte Spill
	movq	1416(%rsp), %rax        # 8-byte Reload
	movq	%r8, 1360(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	1384(%rsp), %rax        # 8-byte Reload
	movq	%r9, 1352(%rsp)         # 8-byte Spill
	movq	%rax, %r9
	movq	1392(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	movq	%r15, 1344(%rsp)        # 8-byte Spill
	movq	%r12, 1336(%rsp)        # 8-byte Spill
	movq	%r14, 1328(%rsp)        # 8-byte Spill
	movq	%r13, 1320(%rsp)        # 8-byte Spill
	movl	%ebp, 1316(%rsp)        # 4-byte Spill
	movq	%rbx, 1304(%rsp)        # 8-byte Spill
	movq	%r10, 1296(%rsp)        # 8-byte Spill
	movq	%r11, 1288(%rsp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movq	1408(%rsp), %rdi        # 8-byte Reload
	movq	1328(%rsp), %rsi        # 8-byte Reload
	movq	1344(%rsp), %rdx        # 8-byte Reload
	movq	1424(%rsp), %rcx        # 8-byte Reload
	movq	1400(%rsp), %r8         # 8-byte Reload
	movl	1316(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1368(%rsp), %rdi        # 8-byte Reload
	movq	1376(%rsp), %rsi        # 8-byte Reload
	movq	1440(%rsp), %rdx        # 8-byte Reload
	movq	1368(%rsp), %rcx        # 8-byte Reload
	movq	1416(%rsp), %r8         # 8-byte Reload
	movq	1384(%rsp), %r9         # 8-byte Reload
	movq	1392(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1440(%rsp), %rax        # 8-byte Reload
	movq	1432(%rsp), %rdi        # 8-byte Reload
	movq	1376(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	1368(%rsp), %rcx        # 8-byte Reload
	movq	1424(%rsp), %r8         # 8-byte Reload
	movq	1384(%rsp), %r9         # 8-byte Reload
	movq	1392(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 1280(%rsp)        # 8-byte Spill
	callq	trace_logger_log_ptr
.Ltmp54:
	#DEBUG_VALUE: store_kernel:w <- [RSP+1280]
	.loc	1 39 0                  # mma_test_eigen.c:39:0
	movq	1304(%rsp), %rdi        # 8-byte Reload
	movq	1328(%rsp), %rsi        # 8-byte Reload
	movq	1344(%rsp), %rdx        # 8-byte Reload
	movq	1336(%rsp), %rcx        # 8-byte Reload
	movq	1320(%rsp), %r8         # 8-byte Reload
	movl	1316(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1352(%rsp), %rdi        # 8-byte Reload
	movq	1376(%rsp), %rsi        # 8-byte Reload
	movq	1296(%rsp), %rdx        # 8-byte Reload
	movq	1368(%rsp), %rcx        # 8-byte Reload
	movq	1288(%rsp), %r8         # 8-byte Reload
	movq	1384(%rsp), %r9         # 8-byte Reload
	movq	1392(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1368(%rsp), %rdi        # 8-byte Reload
	movq	1376(%rsp), %rsi        # 8-byte Reload
	movq	1688(%rsp), %rdx        # 8-byte Reload
	movq	1368(%rsp), %rcx        # 8-byte Reload
	movq	1360(%rsp), %r8         # 8-byte Reload
	movq	1384(%rsp), %r9         # 8-byte Reload
	movq	1392(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1688(%rsp), %rdi        # 8-byte Reload
	callq	malloc
.Ltmp55:
	movabsq	$5, %rdi
	movabsq	$64, %rcx
	movabsq	$1, %rdx
	leaq	.L.str30, %rsi
	movabsq	$0, %r8
	leaq	.L.str9, %r9
	movabsq	$4, %r10
	leaq	.L.str8, %r11
	movabsq	$3, %rbx
	leaq	.L.str28, %r14
	movabsq	$2, %r15
	leaq	.L.str22, %r12
	movabsq	$32, %r13
	leaq	.L.str10, %rbp
	movq	%rax, 1272(%rsp)        # 8-byte Spill
	movabsq	$6, %rax
	movq	%rax, 1264(%rsp)        # 8-byte Spill
	leaq	rs, %rax
	movq	%rax, 1256(%rsp)        # 8-byte Spill
	leaq	.L.str66, %rax
	movq	%rax, 1248(%rsp)        # 8-byte Spill
	movabsq	$49, %rax
	movq	%rax, 1240(%rsp)        # 8-byte Spill
	leaq	.L.str44, %rax
	movq	%rax, 1232(%rsp)        # 8-byte Spill
	leaq	.L.str6, %rax
	movq	%rax, 1224(%rsp)        # 8-byte Spill
	leaq	.L.str65, %rax
	movq	%rsi, 1216(%rsp)        # 8-byte Spill
	movl	$1, %esi
	vmovsd	.LCPI1_0, %xmm0
	movq	%rax, 1208(%rsp)        # 8-byte Spill
	leaq	.L.str63, %rax
	movq	%rax, 1200(%rsp)        # 8-byte Spill
	movabsq	$48, %rax
	movq	%rax, 1192(%rsp)        # 8-byte Spill
	leaq	.L.str64, %rax
	movq	%rax, 1184(%rsp)        # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, 1176(%rsp)        # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 1168(%rsp)        # 8-byte Spill
	leaq	.L.str62, %rax
	movq	%rax, 1160(%rsp)        # 8-byte Spill
	movabsq	$44, %rax
	movq	%rax, 1152(%rsp)        # 8-byte Spill
	leaq	.L.str21, %rax
	movq	%rax, 1144(%rsp)        # 8-byte Spill
	movabsq	$29, %rax
	vmovsd	.LCPI1_1, %xmm1
	movq	%rax, 1136(%rsp)        # 8-byte Spill
	leaq	.L.str60, %rax
	movq	%rax, 1128(%rsp)        # 8-byte Spill
	movabsq	$47, %rax
	movq	%rax, 1120(%rsp)        # 8-byte Spill
	leaq	.L.str61, %rax
	movq	%rax, 1112(%rsp)        # 8-byte Spill
	leaq	.L.str59, %rax
	movq	%rax, 1104(%rsp)        # 8-byte Spill
	movabsq	$56, %rax
	vmovsd	.LCPI1_2, %xmm2
	movq	%rax, 1096(%rsp)        # 8-byte Spill
	leaq	.L.str57, %rax
	movq	%rax, 1088(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 1080(%rsp)        # 8-byte Spill
	leaq	.L.str58, %rax
	movq	%rax, 1072(%rsp)        # 8-byte Spill
	leaq	.L.str56, %rax
	movq	%rax, 1064(%rsp)        # 8-byte Spill
	leaq	.L.str54, %rax
	movq	%rax, 1056(%rsp)        # 8-byte Spill
	movabsq	$45, %rax
	movq	%rax, 1048(%rsp)        # 8-byte Spill
	leaq	.L.str55, %rax
	movq	%rax, 1040(%rsp)        # 8-byte Spill
	leaq	.L.str53, %rax
	movq	%rax, 1032(%rsp)        # 8-byte Spill
	movabsq	$40, %rax
	movq	%rax, 1024(%rsp)        # 8-byte Spill
	leaq	.L.str51, %rax
	movq	%rax, 1016(%rsp)        # 8-byte Spill
	leaq	.L.str52, %rax
	movq	%rax, 1008(%rsp)        # 8-byte Spill
	leaq	.L.str38, %rax
	movq	%rax, 1000(%rsp)        # 8-byte Spill
	leaq	.L.str37, %rax
	movq	%rax, 992(%rsp)         # 8-byte Spill
	movabsq	$43, %rax
	movq	%rax, 984(%rsp)         # 8-byte Spill
	leaq	.L.str50, %rax
	movq	%rax, 976(%rsp)         # 8-byte Spill
	leaq	.L.str36, %rax
	movq	%rax, 968(%rsp)         # 8-byte Spill
	movabsq	$24, %rax
	movq	%rax, 960(%rsp)         # 8-byte Spill
	leaq	.L.str48, %rax
	movq	%rax, 952(%rsp)         # 8-byte Spill
	movabsq	$42, %rax
	movq	%rax, 944(%rsp)         # 8-byte Spill
	leaq	.L.str49, %rax
	movq	%rax, 936(%rsp)         # 8-byte Spill
	leaq	.L.str33, %rax
	movq	%rax, 928(%rsp)         # 8-byte Spill
	movabsq	$16, %rax
	movq	%rax, 920(%rsp)         # 8-byte Spill
	leaq	.L.str32, %rax
	movq	%rax, 912(%rsp)         # 8-byte Spill
	movabsq	$41, %rax
	movq	%rax, 904(%rsp)         # 8-byte Spill
	leaq	.L.str47, %rax
	movq	%rax, 896(%rsp)         # 8-byte Spill
	leaq	.L.str31, %rax
	movq	%rax, 888(%rsp)         # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, 880(%rsp)         # 8-byte Spill
	leaq	.L.str46, %rax
	movq	%rax, 872(%rsp)         # 8-byte Spill
	leaq	.L.str29, %rax
	movq	%rax, 864(%rsp)         # 8-byte Spill
	movabsq	$39, %rax
	movq	%rax, 856(%rsp)         # 8-byte Spill
	movq	1168(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 848(%rsp)         # 8-byte Spill
	movq	%rax, %rdi
	movl	%esi, 844(%rsp)         # 4-byte Spill
	movq	%rcx, %rsi
	movq	1272(%rsp), %rax        # 8-byte Reload
	movq	%rdx, 832(%rsp)         # 8-byte Spill
	movq	%rax, %rdx
	movq	832(%rsp), %rax         # 8-byte Reload
	movq	%rcx, 824(%rsp)         # 8-byte Spill
	movq	%rax, %rcx
	movq	864(%rsp), %rax         # 8-byte Reload
	movq	%r8, 816(%rsp)          # 8-byte Spill
	movq	%rax, %r8
	movq	816(%rsp), %rax         # 8-byte Reload
	movq	%r9, 808(%rsp)          # 8-byte Spill
	movq	%rax, %r9
	movq	808(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	vmovsd	%xmm2, 800(%rsp)        # 8-byte Spill
	movq	%rbp, 792(%rsp)         # 8-byte Spill
	vmovsd	%xmm0, 784(%rsp)        # 8-byte Spill
	vmovsd	%xmm1, 776(%rsp)        # 8-byte Spill
	movq	%r13, 768(%rsp)         # 8-byte Spill
	movq	%r12, 760(%rsp)         # 8-byte Spill
	movq	%r10, 752(%rsp)         # 8-byte Spill
	movq	%r11, 744(%rsp)         # 8-byte Spill
	movq	%rbx, 736(%rsp)         # 8-byte Spill
	movq	%r14, 728(%rsp)         # 8-byte Spill
	movq	%r15, 720(%rsp)         # 8-byte Spill
	callq	trace_logger_log_ptr
	movq	856(%rsp), %rdi         # 8-byte Reload
	movq	1232(%rsp), %rsi        # 8-byte Reload
	movq	1224(%rsp), %rdx        # 8-byte Reload
	movq	1216(%rsp), %rcx        # 8-byte Reload
	movq	1152(%rsp), %r8         # 8-byte Reload
	movl	844(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	832(%rsp), %rdi         # 8-byte Reload
	movq	824(%rsp), %rsi         # 8-byte Reload
	movq	1272(%rsp), %rdx        # 8-byte Reload
	movq	832(%rsp), %rcx         # 8-byte Reload
	movq	864(%rsp), %r8          # 8-byte Reload
	movq	816(%rsp), %r9          # 8-byte Reload
	movq	808(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1272(%rsp), %rax        # 8-byte Reload
	movq	1168(%rsp), %rdi        # 8-byte Reload
	movq	824(%rsp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	movq	832(%rsp), %rcx         # 8-byte Reload
	movq	1216(%rsp), %r8         # 8-byte Reload
	movq	816(%rsp), %r9          # 8-byte Reload
	movq	808(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 712(%rsp)         # 8-byte Spill
	callq	trace_logger_log_ptr
.Ltmp56:
	#DEBUG_VALUE: store_kernel:z <- [RSP+712]
	.loc	1 40 0                  # mma_test_eigen.c:40:0
	movq	1024(%rsp), %rdi        # 8-byte Reload
	movq	1232(%rsp), %rsi        # 8-byte Reload
	movq	1224(%rsp), %rdx        # 8-byte Reload
	movq	872(%rsp), %rcx         # 8-byte Reload
	movq	1176(%rsp), %r8         # 8-byte Reload
	movl	844(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	720(%rsp), %rdi         # 8-byte Reload
	movq	824(%rsp), %rsi         # 8-byte Reload
	movq	1464(%rsp), %rdx        # 8-byte Reload
	movq	832(%rsp), %rcx         # 8-byte Reload
	movq	760(%rsp), %r8          # 8-byte Reload
	movq	816(%rsp), %r9          # 8-byte Reload
	movq	808(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	832(%rsp), %rdi         # 8-byte Reload
	movq	824(%rsp), %rsi         # 8-byte Reload
	vmovsd	784(%rsp), %xmm0        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	744(%rsp), %rcx         # 8-byte Reload
	movq	816(%rsp), %r8          # 8-byte Reload
	movq	808(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	1680(%rsp), %rax        # 8-byte Reload
	vmovsd	784(%rsp), %xmm0        # 8-byte Reload
	vmovsd	%xmm0, (%rax)
	.loc	1 41 0                  # mma_test_eigen.c:41:0
	movq	904(%rsp), %rdi         # 8-byte Reload
	movq	1232(%rsp), %rsi        # 8-byte Reload
	movq	1224(%rsp), %rdx        # 8-byte Reload
	movq	888(%rsp), %rcx         # 8-byte Reload
	movq	1136(%rsp), %r8         # 8-byte Reload
	movl	844(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	720(%rsp), %rdi         # 8-byte Reload
	movq	824(%rsp), %rsi         # 8-byte Reload
	movq	880(%rsp), %rdx         # 8-byte Reload
	movq	816(%rsp), %rcx         # 8-byte Reload
	movq	744(%rsp), %r8          # 8-byte Reload
	movq	816(%rsp), %r9          # 8-byte Reload
	movq	808(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	832(%rsp), %rdi         # 8-byte Reload
	movq	824(%rsp), %rsi         # 8-byte Reload
	movq	1680(%rsp), %rdx        # 8-byte Reload
	movq	832(%rsp), %rcx         # 8-byte Reload
	movq	1144(%rsp), %r8         # 8-byte Reload
	movq	816(%rsp), %r9          # 8-byte Reload
	movq	808(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1680(%rsp), %rax        # 8-byte Reload
	addq	$8, %rax
	movq	1168(%rsp), %rdi        # 8-byte Reload
	movq	824(%rsp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	movq	832(%rsp), %rcx         # 8-byte Reload
	movq	888(%rsp), %r8          # 8-byte Reload
	movq	816(%rsp), %r9          # 8-byte Reload
	movq	808(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 704(%rsp)         # 8-byte Spill
	callq	trace_logger_log_ptr
	movq	904(%rsp), %rdi         # 8-byte Reload
	movq	1232(%rsp), %rsi        # 8-byte Reload
	movq	1224(%rsp), %rdx        # 8-byte Reload
	movq	912(%rsp), %rcx         # 8-byte Reload
	movq	1152(%rsp), %r8         # 8-byte Reload
	movl	844(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	832(%rsp), %rdi         # 8-byte Reload
	movq	824(%rsp), %rsi         # 8-byte Reload
	movq	704(%rsp), %rdx         # 8-byte Reload
	movq	832(%rsp), %rcx         # 8-byte Reload
	movq	888(%rsp), %r8          # 8-byte Reload
	movq	816(%rsp), %r9          # 8-byte Reload
	movq	808(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	704(%rsp), %rax         # 8-byte Reload
	movq	1168(%rsp), %rdi        # 8-byte Reload
	movq	824(%rsp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	movq	832(%rsp), %rcx         # 8-byte Reload
	movq	912(%rsp), %r8          # 8-byte Reload
	movq	816(%rsp), %r9          # 8-byte Reload
	movq	808(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 696(%rsp)         # 8-byte Spill
	callq	trace_logger_log_ptr
	movq	904(%rsp), %rdi         # 8-byte Reload
	movq	1232(%rsp), %rsi        # 8-byte Reload
	movq	1224(%rsp), %rdx        # 8-byte Reload
	movq	896(%rsp), %rcx         # 8-byte Reload
	movq	1176(%rsp), %r8         # 8-byte Reload
	movl	844(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	720(%rsp), %rdi         # 8-byte Reload
	movq	824(%rsp), %rsi         # 8-byte Reload
	movq	696(%rsp), %rdx         # 8-byte Reload
	movq	832(%rsp), %rcx         # 8-byte Reload
	movq	912(%rsp), %r8          # 8-byte Reload
	movq	816(%rsp), %r9          # 8-byte Reload
	movq	808(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	832(%rsp), %rdi         # 8-byte Reload
	movq	824(%rsp), %rsi         # 8-byte Reload
	vmovsd	776(%rsp), %xmm0        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	744(%rsp), %rcx         # 8-byte Reload
	movq	816(%rsp), %r8          # 8-byte Reload
	movq	808(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	1680(%rsp), %rax        # 8-byte Reload
	vmovsd	776(%rsp), %xmm0        # 8-byte Reload
	vmovsd	%xmm0, 8(%rax)
	.loc	1 42 0                  # mma_test_eigen.c:42:0
	movq	944(%rsp), %rdi         # 8-byte Reload
	movq	1232(%rsp), %rsi        # 8-byte Reload
	movq	1224(%rsp), %rdx        # 8-byte Reload
	movq	928(%rsp), %rcx         # 8-byte Reload
	movq	1136(%rsp), %r8         # 8-byte Reload
	movl	844(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	720(%rsp), %rdi         # 8-byte Reload
	movq	824(%rsp), %rsi         # 8-byte Reload
	movq	920(%rsp), %rdx         # 8-byte Reload
	movq	816(%rsp), %rcx         # 8-byte Reload
	movq	744(%rsp), %r8          # 8-byte Reload
	movq	816(%rsp), %r9          # 8-byte Reload
	movq	808(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	832(%rsp), %rdi         # 8-byte Reload
	movq	824(%rsp), %rsi         # 8-byte Reload
	movq	1680(%rsp), %rdx        # 8-byte Reload
	movq	832(%rsp), %rcx         # 8-byte Reload
	movq	1144(%rsp), %r8         # 8-byte Reload
	movq	816(%rsp), %r9          # 8-byte Reload
	movq	808(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1680(%rsp), %rax        # 8-byte Reload
	addq	$16, %rax
	movq	1168(%rsp), %rdi        # 8-byte Reload
	movq	824(%rsp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	movq	832(%rsp), %rcx         # 8-byte Reload
	movq	928(%rsp), %r8          # 8-byte Reload
	movq	816(%rsp), %r9          # 8-byte Reload
	movq	808(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 688(%rsp)         # 8-byte Spill
	callq	trace_logger_log_ptr
	movq	944(%rsp), %rdi         # 8-byte Reload
	movq	1232(%rsp), %rsi        # 8-byte Reload
	movq	1224(%rsp), %rdx        # 8-byte Reload
	movq	952(%rsp), %rcx         # 8-byte Reload
	movq	1152(%rsp), %r8         # 8-byte Reload
	movl	844(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	832(%rsp), %rdi         # 8-byte Reload
	movq	824(%rsp), %rsi         # 8-byte Reload
	movq	688(%rsp), %rdx         # 8-byte Reload
	movq	832(%rsp), %rcx         # 8-byte Reload
	movq	928(%rsp), %r8          # 8-byte Reload
	movq	816(%rsp), %r9          # 8-byte Reload
	movq	808(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	688(%rsp), %rax         # 8-byte Reload
	movq	1168(%rsp), %rdi        # 8-byte Reload
	movq	824(%rsp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	movq	832(%rsp), %rcx         # 8-byte Reload
	movq	952(%rsp), %r8          # 8-byte Reload
	movq	816(%rsp), %r9          # 8-byte Reload
	movq	808(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 680(%rsp)         # 8-byte Spill
	callq	trace_logger_log_ptr
	movq	944(%rsp), %rdi         # 8-byte Reload
	movq	1232(%rsp), %rsi        # 8-byte Reload
	movq	1224(%rsp), %rdx        # 8-byte Reload
	movq	936(%rsp), %rcx         # 8-byte Reload
	movq	1176(%rsp), %r8         # 8-byte Reload
	movl	844(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	720(%rsp), %rdi         # 8-byte Reload
	movq	824(%rsp), %rsi         # 8-byte Reload
	movq	680(%rsp), %rdx         # 8-byte Reload
	movq	832(%rsp), %rcx         # 8-byte Reload
	movq	952(%rsp), %r8          # 8-byte Reload
	movq	816(%rsp), %r9          # 8-byte Reload
	movq	808(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	832(%rsp), %rdi         # 8-byte Reload
	movq	824(%rsp), %rsi         # 8-byte Reload
	vmovsd	800(%rsp), %xmm0        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	744(%rsp), %rcx         # 8-byte Reload
	movq	816(%rsp), %r8          # 8-byte Reload
	movq	808(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	1680(%rsp), %rax        # 8-byte Reload
	vmovsd	800(%rsp), %xmm0        # 8-byte Reload
	vmovsd	%xmm0, 16(%rax)
	.loc	1 43 0                  # mma_test_eigen.c:43:0
	movq	984(%rsp), %rdi         # 8-byte Reload
	movq	1232(%rsp), %rsi        # 8-byte Reload
	movq	1224(%rsp), %rdx        # 8-byte Reload
	movq	968(%rsp), %rcx         # 8-byte Reload
	movq	1136(%rsp), %r8         # 8-byte Reload
	movl	844(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	720(%rsp), %rdi         # 8-byte Reload
	movq	824(%rsp), %rsi         # 8-byte Reload
	movq	960(%rsp), %rdx         # 8-byte Reload
	movq	816(%rsp), %rcx         # 8-byte Reload
	movq	744(%rsp), %r8          # 8-byte Reload
	movq	816(%rsp), %r9          # 8-byte Reload
	movq	808(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	832(%rsp), %rdi         # 8-byte Reload
	movq	824(%rsp), %rsi         # 8-byte Reload
	movq	1680(%rsp), %rdx        # 8-byte Reload
	movq	832(%rsp), %rcx         # 8-byte Reload
	movq	1144(%rsp), %r8         # 8-byte Reload
	movq	816(%rsp), %r9          # 8-byte Reload
	movq	808(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1680(%rsp), %rax        # 8-byte Reload
	addq	$24, %rax
	movq	1168(%rsp), %rdi        # 8-byte Reload
	movq	824(%rsp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	movq	832(%rsp), %rcx         # 8-byte Reload
	movq	968(%rsp), %r8          # 8-byte Reload
	movq	816(%rsp), %r9          # 8-byte Reload
	movq	808(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 672(%rsp)         # 8-byte Spill
	callq	trace_logger_log_ptr
	movq	984(%rsp), %rdi         # 8-byte Reload
	movq	1232(%rsp), %rsi        # 8-byte Reload
	movq	1224(%rsp), %rdx        # 8-byte Reload
	movq	992(%rsp), %rcx         # 8-byte Reload
	movq	1152(%rsp), %r8         # 8-byte Reload
	movl	844(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	832(%rsp), %rdi         # 8-byte Reload
	movq	824(%rsp), %rsi         # 8-byte Reload
	movq	672(%rsp), %rdx         # 8-byte Reload
	movq	832(%rsp), %rcx         # 8-byte Reload
	movq	968(%rsp), %r8          # 8-byte Reload
	movq	816(%rsp), %r9          # 8-byte Reload
	movq	808(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	672(%rsp), %rax         # 8-byte Reload
	movq	1168(%rsp), %rdi        # 8-byte Reload
	movq	824(%rsp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	movq	832(%rsp), %rcx         # 8-byte Reload
	movq	992(%rsp), %r8          # 8-byte Reload
	movq	816(%rsp), %r9          # 8-byte Reload
	movq	808(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 664(%rsp)         # 8-byte Spill
	callq	trace_logger_log_ptr
	movq	984(%rsp), %rdi         # 8-byte Reload
	movq	1232(%rsp), %rsi        # 8-byte Reload
	movq	1224(%rsp), %rdx        # 8-byte Reload
	movq	976(%rsp), %rcx         # 8-byte Reload
	movq	1176(%rsp), %r8         # 8-byte Reload
	movl	844(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	720(%rsp), %rdi         # 8-byte Reload
	movq	824(%rsp), %rsi         # 8-byte Reload
	movq	664(%rsp), %rdx         # 8-byte Reload
	movq	832(%rsp), %rcx         # 8-byte Reload
	movq	992(%rsp), %r8          # 8-byte Reload
	movq	816(%rsp), %r9          # 8-byte Reload
	movq	808(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	832(%rsp), %rdi         # 8-byte Reload
	movq	824(%rsp), %rsi         # 8-byte Reload
	vmovsd	776(%rsp), %xmm0        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	744(%rsp), %rcx         # 8-byte Reload
	movq	816(%rsp), %r8          # 8-byte Reload
	movq	808(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	1680(%rsp), %rax        # 8-byte Reload
	vmovsd	776(%rsp), %xmm0        # 8-byte Reload
	vmovsd	%xmm0, 24(%rax)
	.loc	1 44 0                  # mma_test_eigen.c:44:0
	movq	1152(%rsp), %rdi        # 8-byte Reload
	movq	1232(%rsp), %rsi        # 8-byte Reload
	movq	1224(%rsp), %rdx        # 8-byte Reload
	movq	1000(%rsp), %rcx        # 8-byte Reload
	movq	1136(%rsp), %r8         # 8-byte Reload
	movl	844(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	720(%rsp), %rdi         # 8-byte Reload
	movq	824(%rsp), %rsi         # 8-byte Reload
	movq	768(%rsp), %rdx         # 8-byte Reload
	movq	816(%rsp), %rcx         # 8-byte Reload
	movq	744(%rsp), %r8          # 8-byte Reload
	movq	816(%rsp), %r9          # 8-byte Reload
	movq	808(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	832(%rsp), %rdi         # 8-byte Reload
	movq	824(%rsp), %rsi         # 8-byte Reload
	movq	1680(%rsp), %rdx        # 8-byte Reload
	movq	832(%rsp), %rcx         # 8-byte Reload
	movq	1144(%rsp), %r8         # 8-byte Reload
	movq	816(%rsp), %r9          # 8-byte Reload
	movq	808(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1680(%rsp), %rax        # 8-byte Reload
	addq	$32, %rax
	movq	1168(%rsp), %rdi        # 8-byte Reload
	movq	824(%rsp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	movq	832(%rsp), %rcx         # 8-byte Reload
	movq	1000(%rsp), %r8         # 8-byte Reload
	movq	816(%rsp), %r9          # 8-byte Reload
	movq	808(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 656(%rsp)         # 8-byte Spill
	callq	trace_logger_log_ptr
	movq	1152(%rsp), %rdi        # 8-byte Reload
	movq	1232(%rsp), %rsi        # 8-byte Reload
	movq	1224(%rsp), %rdx        # 8-byte Reload
	movq	1016(%rsp), %rcx        # 8-byte Reload
	movq	1152(%rsp), %r8         # 8-byte Reload
	movl	844(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	832(%rsp), %rdi         # 8-byte Reload
	movq	824(%rsp), %rsi         # 8-byte Reload
	movq	656(%rsp), %rdx         # 8-byte Reload
	movq	832(%rsp), %rcx         # 8-byte Reload
	movq	1000(%rsp), %r8         # 8-byte Reload
	movq	816(%rsp), %r9          # 8-byte Reload
	movq	808(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	656(%rsp), %rax         # 8-byte Reload
	movq	1168(%rsp), %rdi        # 8-byte Reload
	movq	824(%rsp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	movq	832(%rsp), %rcx         # 8-byte Reload
	movq	1016(%rsp), %r8         # 8-byte Reload
	movq	816(%rsp), %r9          # 8-byte Reload
	movq	808(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 648(%rsp)         # 8-byte Spill
	callq	trace_logger_log_ptr
	movq	1152(%rsp), %rdi        # 8-byte Reload
	movq	1232(%rsp), %rsi        # 8-byte Reload
	movq	1224(%rsp), %rdx        # 8-byte Reload
	movq	1008(%rsp), %rcx        # 8-byte Reload
	movq	1176(%rsp), %r8         # 8-byte Reload
	movl	844(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	720(%rsp), %rdi         # 8-byte Reload
	movq	824(%rsp), %rsi         # 8-byte Reload
	movq	648(%rsp), %rdx         # 8-byte Reload
	movq	832(%rsp), %rcx         # 8-byte Reload
	movq	1016(%rsp), %r8         # 8-byte Reload
	movq	816(%rsp), %r9          # 8-byte Reload
	movq	808(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	832(%rsp), %rdi         # 8-byte Reload
	movq	824(%rsp), %rsi         # 8-byte Reload
	vmovsd	784(%rsp), %xmm0        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	744(%rsp), %rcx         # 8-byte Reload
	movq	816(%rsp), %r8          # 8-byte Reload
	movq	808(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	1680(%rsp), %rax        # 8-byte Reload
	vmovsd	784(%rsp), %xmm0        # 8-byte Reload
	vmovsd	%xmm0, 32(%rax)
	.loc	1 45 0                  # mma_test_eigen.c:45:0
	movq	1048(%rsp), %rdi        # 8-byte Reload
	movq	1232(%rsp), %rsi        # 8-byte Reload
	movq	1224(%rsp), %rdx        # 8-byte Reload
	movq	1032(%rsp), %rcx        # 8-byte Reload
	movq	1136(%rsp), %r8         # 8-byte Reload
	movl	844(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	720(%rsp), %rdi         # 8-byte Reload
	movq	824(%rsp), %rsi         # 8-byte Reload
	movq	1024(%rsp), %rdx        # 8-byte Reload
	movq	816(%rsp), %rcx         # 8-byte Reload
	movq	744(%rsp), %r8          # 8-byte Reload
	movq	816(%rsp), %r9          # 8-byte Reload
	movq	808(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	832(%rsp), %rdi         # 8-byte Reload
	movq	824(%rsp), %rsi         # 8-byte Reload
	movq	1680(%rsp), %rdx        # 8-byte Reload
	movq	832(%rsp), %rcx         # 8-byte Reload
	movq	1144(%rsp), %r8         # 8-byte Reload
	movq	816(%rsp), %r9          # 8-byte Reload
	movq	808(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1680(%rsp), %rax        # 8-byte Reload
	addq	$40, %rax
	movq	1168(%rsp), %rdi        # 8-byte Reload
	movq	824(%rsp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	movq	832(%rsp), %rcx         # 8-byte Reload
	movq	1032(%rsp), %r8         # 8-byte Reload
	movq	816(%rsp), %r9          # 8-byte Reload
	movq	808(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 640(%rsp)         # 8-byte Spill
	callq	trace_logger_log_ptr
	movq	1048(%rsp), %rdi        # 8-byte Reload
	movq	1232(%rsp), %rsi        # 8-byte Reload
	movq	1224(%rsp), %rdx        # 8-byte Reload
	movq	1056(%rsp), %rcx        # 8-byte Reload
	movq	1152(%rsp), %r8         # 8-byte Reload
	movl	844(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	832(%rsp), %rdi         # 8-byte Reload
	movq	824(%rsp), %rsi         # 8-byte Reload
	movq	640(%rsp), %rdx         # 8-byte Reload
	movq	832(%rsp), %rcx         # 8-byte Reload
	movq	1032(%rsp), %r8         # 8-byte Reload
	movq	816(%rsp), %r9          # 8-byte Reload
	movq	808(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	640(%rsp), %rax         # 8-byte Reload
	movq	1168(%rsp), %rdi        # 8-byte Reload
	movq	824(%rsp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	movq	832(%rsp), %rcx         # 8-byte Reload
	movq	1056(%rsp), %r8         # 8-byte Reload
	movq	816(%rsp), %r9          # 8-byte Reload
	movq	808(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 632(%rsp)         # 8-byte Spill
	callq	trace_logger_log_ptr
	movq	1048(%rsp), %rdi        # 8-byte Reload
	movq	1232(%rsp), %rsi        # 8-byte Reload
	movq	1224(%rsp), %rdx        # 8-byte Reload
	movq	1040(%rsp), %rcx        # 8-byte Reload
	movq	1176(%rsp), %r8         # 8-byte Reload
	movl	844(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	720(%rsp), %rdi         # 8-byte Reload
	movq	824(%rsp), %rsi         # 8-byte Reload
	movq	632(%rsp), %rdx         # 8-byte Reload
	movq	832(%rsp), %rcx         # 8-byte Reload
	movq	1056(%rsp), %r8         # 8-byte Reload
	movq	816(%rsp), %r9          # 8-byte Reload
	movq	808(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	832(%rsp), %rdi         # 8-byte Reload
	movq	824(%rsp), %rsi         # 8-byte Reload
	vmovsd	776(%rsp), %xmm0        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	744(%rsp), %rcx         # 8-byte Reload
	movq	816(%rsp), %r8          # 8-byte Reload
	movq	808(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	1680(%rsp), %rax        # 8-byte Reload
	vmovsd	776(%rsp), %xmm0        # 8-byte Reload
	vmovsd	%xmm0, 40(%rax)
	.loc	1 46 0                  # mma_test_eigen.c:46:0
	movq	1080(%rsp), %rdi        # 8-byte Reload
	movq	1232(%rsp), %rsi        # 8-byte Reload
	movq	1224(%rsp), %rdx        # 8-byte Reload
	movq	1064(%rsp), %rcx        # 8-byte Reload
	movq	1136(%rsp), %r8         # 8-byte Reload
	movl	844(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	720(%rsp), %rdi         # 8-byte Reload
	movq	824(%rsp), %rsi         # 8-byte Reload
	movq	1192(%rsp), %rdx        # 8-byte Reload
	movq	816(%rsp), %rcx         # 8-byte Reload
	movq	744(%rsp), %r8          # 8-byte Reload
	movq	816(%rsp), %r9          # 8-byte Reload
	movq	808(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	832(%rsp), %rdi         # 8-byte Reload
	movq	824(%rsp), %rsi         # 8-byte Reload
	movq	1680(%rsp), %rdx        # 8-byte Reload
	movq	832(%rsp), %rcx         # 8-byte Reload
	movq	1144(%rsp), %r8         # 8-byte Reload
	movq	816(%rsp), %r9          # 8-byte Reload
	movq	808(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1680(%rsp), %rax        # 8-byte Reload
	addq	$48, %rax
	movq	1168(%rsp), %rdi        # 8-byte Reload
	movq	824(%rsp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	movq	832(%rsp), %rcx         # 8-byte Reload
	movq	1064(%rsp), %r8         # 8-byte Reload
	movq	816(%rsp), %r9          # 8-byte Reload
	movq	808(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 624(%rsp)         # 8-byte Spill
	callq	trace_logger_log_ptr
	movq	1080(%rsp), %rdi        # 8-byte Reload
	movq	1232(%rsp), %rsi        # 8-byte Reload
	movq	1224(%rsp), %rdx        # 8-byte Reload
	movq	1088(%rsp), %rcx        # 8-byte Reload
	movq	1152(%rsp), %r8         # 8-byte Reload
	movl	844(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	832(%rsp), %rdi         # 8-byte Reload
	movq	824(%rsp), %rsi         # 8-byte Reload
	movq	624(%rsp), %rdx         # 8-byte Reload
	movq	832(%rsp), %rcx         # 8-byte Reload
	movq	1064(%rsp), %r8         # 8-byte Reload
	movq	816(%rsp), %r9          # 8-byte Reload
	movq	808(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	624(%rsp), %rax         # 8-byte Reload
	movq	1168(%rsp), %rdi        # 8-byte Reload
	movq	824(%rsp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	movq	832(%rsp), %rcx         # 8-byte Reload
	movq	1088(%rsp), %r8         # 8-byte Reload
	movq	816(%rsp), %r9          # 8-byte Reload
	movq	808(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 616(%rsp)         # 8-byte Spill
	callq	trace_logger_log_ptr
	movq	1080(%rsp), %rdi        # 8-byte Reload
	movq	1232(%rsp), %rsi        # 8-byte Reload
	movq	1224(%rsp), %rdx        # 8-byte Reload
	movq	1072(%rsp), %rcx        # 8-byte Reload
	movq	1176(%rsp), %r8         # 8-byte Reload
	movl	844(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	720(%rsp), %rdi         # 8-byte Reload
	movq	824(%rsp), %rsi         # 8-byte Reload
	movq	616(%rsp), %rdx         # 8-byte Reload
	movq	832(%rsp), %rcx         # 8-byte Reload
	movq	1088(%rsp), %r8         # 8-byte Reload
	movq	816(%rsp), %r9          # 8-byte Reload
	movq	808(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	832(%rsp), %rdi         # 8-byte Reload
	movq	824(%rsp), %rsi         # 8-byte Reload
	vmovsd	800(%rsp), %xmm0        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	744(%rsp), %rcx         # 8-byte Reload
	movq	816(%rsp), %r8          # 8-byte Reload
	movq	808(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	1680(%rsp), %rax        # 8-byte Reload
	vmovsd	800(%rsp), %xmm0        # 8-byte Reload
	vmovsd	%xmm0, 48(%rax)
	.loc	1 47 0                  # mma_test_eigen.c:47:0
	movq	1120(%rsp), %rdi        # 8-byte Reload
	movq	1232(%rsp), %rsi        # 8-byte Reload
	movq	1224(%rsp), %rdx        # 8-byte Reload
	movq	1104(%rsp), %rcx        # 8-byte Reload
	movq	1136(%rsp), %r8         # 8-byte Reload
	movl	844(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	720(%rsp), %rdi         # 8-byte Reload
	movq	824(%rsp), %rsi         # 8-byte Reload
	movq	1096(%rsp), %rdx        # 8-byte Reload
	movq	816(%rsp), %rcx         # 8-byte Reload
	movq	744(%rsp), %r8          # 8-byte Reload
	movq	816(%rsp), %r9          # 8-byte Reload
	movq	808(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	832(%rsp), %rdi         # 8-byte Reload
	movq	824(%rsp), %rsi         # 8-byte Reload
	movq	1680(%rsp), %rdx        # 8-byte Reload
	movq	832(%rsp), %rcx         # 8-byte Reload
	movq	1144(%rsp), %r8         # 8-byte Reload
	movq	816(%rsp), %r9          # 8-byte Reload
	movq	808(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1680(%rsp), %rax        # 8-byte Reload
	addq	$56, %rax
	movq	1168(%rsp), %rdi        # 8-byte Reload
	movq	824(%rsp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	movq	832(%rsp), %rcx         # 8-byte Reload
	movq	1104(%rsp), %r8         # 8-byte Reload
	movq	816(%rsp), %r9          # 8-byte Reload
	movq	808(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 608(%rsp)         # 8-byte Spill
	callq	trace_logger_log_ptr
	movq	1120(%rsp), %rdi        # 8-byte Reload
	movq	1232(%rsp), %rsi        # 8-byte Reload
	movq	1224(%rsp), %rdx        # 8-byte Reload
	movq	1128(%rsp), %rcx        # 8-byte Reload
	movq	1152(%rsp), %r8         # 8-byte Reload
	movl	844(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	832(%rsp), %rdi         # 8-byte Reload
	movq	824(%rsp), %rsi         # 8-byte Reload
	movq	608(%rsp), %rdx         # 8-byte Reload
	movq	832(%rsp), %rcx         # 8-byte Reload
	movq	1104(%rsp), %r8         # 8-byte Reload
	movq	816(%rsp), %r9          # 8-byte Reload
	movq	808(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	608(%rsp), %rax         # 8-byte Reload
	movq	1168(%rsp), %rdi        # 8-byte Reload
	movq	824(%rsp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	movq	832(%rsp), %rcx         # 8-byte Reload
	movq	1128(%rsp), %r8         # 8-byte Reload
	movq	816(%rsp), %r9          # 8-byte Reload
	movq	808(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 600(%rsp)         # 8-byte Spill
	callq	trace_logger_log_ptr
	movq	1120(%rsp), %rdi        # 8-byte Reload
	movq	1232(%rsp), %rsi        # 8-byte Reload
	movq	1224(%rsp), %rdx        # 8-byte Reload
	movq	1112(%rsp), %rcx        # 8-byte Reload
	movq	1176(%rsp), %r8         # 8-byte Reload
	movl	844(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	720(%rsp), %rdi         # 8-byte Reload
	movq	824(%rsp), %rsi         # 8-byte Reload
	movq	600(%rsp), %rdx         # 8-byte Reload
	movq	832(%rsp), %rcx         # 8-byte Reload
	movq	1128(%rsp), %r8         # 8-byte Reload
	movq	816(%rsp), %r9          # 8-byte Reload
	movq	808(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	832(%rsp), %rdi         # 8-byte Reload
	movq	824(%rsp), %rsi         # 8-byte Reload
	vmovsd	776(%rsp), %xmm0        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	744(%rsp), %rcx         # 8-byte Reload
	movq	816(%rsp), %r8          # 8-byte Reload
	movq	808(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	1680(%rsp), %rax        # 8-byte Reload
	vmovsd	776(%rsp), %xmm0        # 8-byte Reload
	vmovsd	%xmm0, 56(%rax)
	.loc	1 48 0                  # mma_test_eigen.c:48:0
	movq	1192(%rsp), %rdi        # 8-byte Reload
	movq	1232(%rsp), %rsi        # 8-byte Reload
	movq	1224(%rsp), %rdx        # 8-byte Reload
	movq	1160(%rsp), %rcx        # 8-byte Reload
	movq	1136(%rsp), %r8         # 8-byte Reload
	movl	844(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	720(%rsp), %rdi         # 8-byte Reload
	movq	824(%rsp), %rsi         # 8-byte Reload
	movq	824(%rsp), %rdx         # 8-byte Reload
	movq	816(%rsp), %rcx         # 8-byte Reload
	movq	744(%rsp), %r8          # 8-byte Reload
	movq	816(%rsp), %r9          # 8-byte Reload
	movq	808(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	832(%rsp), %rdi         # 8-byte Reload
	movq	824(%rsp), %rsi         # 8-byte Reload
	movq	1680(%rsp), %rdx        # 8-byte Reload
	movq	832(%rsp), %rcx         # 8-byte Reload
	movq	1144(%rsp), %r8         # 8-byte Reload
	movq	816(%rsp), %r9          # 8-byte Reload
	movq	808(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1680(%rsp), %rax        # 8-byte Reload
	addq	$64, %rax
	movq	1168(%rsp), %rdi        # 8-byte Reload
	movq	824(%rsp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	movq	832(%rsp), %rcx         # 8-byte Reload
	movq	1160(%rsp), %r8         # 8-byte Reload
	movq	816(%rsp), %r9          # 8-byte Reload
	movq	808(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 592(%rsp)         # 8-byte Spill
	callq	trace_logger_log_ptr
	movq	1192(%rsp), %rdi        # 8-byte Reload
	movq	1232(%rsp), %rsi        # 8-byte Reload
	movq	1224(%rsp), %rdx        # 8-byte Reload
	movq	1200(%rsp), %rcx        # 8-byte Reload
	movq	1152(%rsp), %r8         # 8-byte Reload
	movl	844(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	832(%rsp), %rdi         # 8-byte Reload
	movq	824(%rsp), %rsi         # 8-byte Reload
	movq	592(%rsp), %rdx         # 8-byte Reload
	movq	832(%rsp), %rcx         # 8-byte Reload
	movq	1160(%rsp), %r8         # 8-byte Reload
	movq	816(%rsp), %r9          # 8-byte Reload
	movq	808(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	592(%rsp), %rax         # 8-byte Reload
	movq	1168(%rsp), %rdi        # 8-byte Reload
	movq	824(%rsp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	movq	832(%rsp), %rcx         # 8-byte Reload
	movq	1200(%rsp), %r8         # 8-byte Reload
	movq	816(%rsp), %r9          # 8-byte Reload
	movq	808(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 584(%rsp)         # 8-byte Spill
	callq	trace_logger_log_ptr
	movq	1192(%rsp), %rdi        # 8-byte Reload
	movq	1232(%rsp), %rsi        # 8-byte Reload
	movq	1224(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1176(%rsp), %r8         # 8-byte Reload
	movl	844(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	720(%rsp), %rdi         # 8-byte Reload
	movq	824(%rsp), %rsi         # 8-byte Reload
	movq	584(%rsp), %rdx         # 8-byte Reload
	movq	832(%rsp), %rcx         # 8-byte Reload
	movq	1200(%rsp), %r8         # 8-byte Reload
	movq	816(%rsp), %r9          # 8-byte Reload
	movq	808(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	832(%rsp), %rdi         # 8-byte Reload
	movq	824(%rsp), %rsi         # 8-byte Reload
	vmovsd	784(%rsp), %xmm0        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	744(%rsp), %rcx         # 8-byte Reload
	movq	816(%rsp), %r8          # 8-byte Reload
	movq	808(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	1680(%rsp), %rax        # 8-byte Reload
	vmovsd	784(%rsp), %xmm0        # 8-byte Reload
	vmovsd	%xmm0, 64(%rax)
	.loc	1 49 0                  # mma_test_eigen.c:49:0
	movq	1240(%rsp), %rdi        # 8-byte Reload
	movq	1232(%rsp), %rsi        # 8-byte Reload
	movq	1224(%rsp), %rdx        # 8-byte Reload
	movq	1208(%rsp), %rcx        # 8-byte Reload
	movq	1240(%rsp), %r8         # 8-byte Reload
	movl	844(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1264(%rsp), %rdi        # 8-byte Reload
	movq	824(%rsp), %rsi         # 8-byte Reload
	movq	1256(%rsp), %rdx        # 8-byte Reload
	movq	832(%rsp), %rcx         # 8-byte Reload
	movq	1248(%rsp), %r8         # 8-byte Reload
	movq	816(%rsp), %r9          # 8-byte Reload
	movq	808(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	1932(%rsp), %esi        # 4-byte Reload
	movl	%esi, %esi
	movl	%esi, %edx
	movq	832(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	movq	832(%rsp), %rcx         # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	816(%rsp), %r9          # 8-byte Reload
	movq	808(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	720(%rsp), %rdi         # 8-byte Reload
	movq	824(%rsp), %rsi         # 8-byte Reload
	movq	1464(%rsp), %rdx        # 8-byte Reload
	movq	832(%rsp), %rcx         # 8-byte Reload
	movq	760(%rsp), %r8          # 8-byte Reload
	movq	816(%rsp), %r9          # 8-byte Reload
	movq	808(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	736(%rsp), %rdi         # 8-byte Reload
	movq	824(%rsp), %rsi         # 8-byte Reload
	movq	1280(%rsp), %rdx        # 8-byte Reload
	movq	832(%rsp), %rcx         # 8-byte Reload
	movq	728(%rsp), %r8          # 8-byte Reload
	movq	816(%rsp), %r9          # 8-byte Reload
	movq	808(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	752(%rsp), %rdi         # 8-byte Reload
	movq	832(%rsp), %rsi         # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	816(%rsp), %rcx         # 8-byte Reload
	movq	744(%rsp), %r8          # 8-byte Reload
	movq	816(%rsp), %r9          # 8-byte Reload
	movq	808(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	848(%rsp), %rdi         # 8-byte Reload
	movq	824(%rsp), %rsi         # 8-byte Reload
	movq	712(%rsp), %rdx         # 8-byte Reload
	movq	832(%rsp), %rcx         # 8-byte Reload
	movq	1216(%rsp), %r8         # 8-byte Reload
	movq	816(%rsp), %r9          # 8-byte Reload
	movq	808(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	xorl	%ecx, %ecx
	movl	1932(%rsp), %edi        # 4-byte Reload
	movq	1464(%rsp), %rsi        # 8-byte Reload
	movq	1280(%rsp), %rdx        # 8-byte Reload
	movq	712(%rsp), %r8          # 8-byte Reload
	callq	rs
.Ltmp57:
	movabsq	$0, %rdx
	movabsq	$1, %rsi
	leaq	.L.str67, %r8
	leaq	.L.str9, %r9
	movabsq	$2, %r10
	leaq	.L.str13, %r11
	movabsq	$3, %rdi
	leaq	.L.str12, %rbx
	movabsq	$50, %r14
	leaq	.L.str44, %r15
	leaq	.L.str6, %r12
	leaq	.L.str68, %rcx
	movl	$1, %ebp
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rcx, 576(%rsp)         # 8-byte Spill
	movabsq	$32, %rcx
	movq	%rcx, 568(%rsp)         # 8-byte Spill
	leaq	.L.str10, %rcx
	movq	%rcx, 560(%rsp)         # 8-byte Spill
	leaq	.L.str8, %rcx
	movq	%rcx, 552(%rsp)         # 8-byte Spill
	movabsq	$46, %rcx
	movq	%rcx, 544(%rsp)         # 8-byte Spill
	leaq	.L.str65, %rcx
	.loc	1 50 0                  # mma_test_eigen.c:50:0
.Ltmp58:
	movl	%eax, %eax
                                        # kill: RAX<def> EAX<kill>
	movq	%rdi, 536(%rsp)         # 8-byte Spill
	movq	%r13, %rdi
	movq	%rax, 528(%rsp)         # 8-byte Spill
	movq	568(%rsp), %rax         # 8-byte Reload
	movq	%rsi, 520(%rsp)         # 8-byte Spill
	movq	%rax, %rsi
	movq	528(%rsp), %rax         # 8-byte Reload
	movq	%rdx, 512(%rsp)         # 8-byte Spill
	movq	%rax, %rdx
	movq	520(%rsp), %rax         # 8-byte Reload
	movq	%rcx, 504(%rsp)         # 8-byte Spill
	movq	%rax, %rcx
	movq	504(%rsp), %rax         # 8-byte Reload
	movq	%r8, 496(%rsp)          # 8-byte Spill
	movq	%rax, %r8
	movq	512(%rsp), %rax         # 8-byte Reload
	movq	%r9, 488(%rsp)          # 8-byte Spill
	movq	%rax, %r9
	movq	488(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	movq	%r13, 480(%rsp)         # 8-byte Spill
	movq	%r12, 472(%rsp)         # 8-byte Spill
	movl	%ebp, 468(%rsp)         # 4-byte Spill
	movq	%r15, 456(%rsp)         # 8-byte Spill
	movq	%r14, 448(%rsp)         # 8-byte Spill
	movq	%r10, 440(%rsp)         # 8-byte Spill
	movq	%r11, 432(%rsp)         # 8-byte Spill
	movq	%rbx, 424(%rsp)         # 8-byte Spill
	callq	trace_logger_log_int
.Ltmp59:
	#DEBUG_VALUE: i <- 0
	movq	448(%rsp), %rdi         # 8-byte Reload
	movq	456(%rsp), %rsi         # 8-byte Reload
	movq	472(%rsp), %rdx         # 8-byte Reload
	movq	496(%rsp), %rcx         # 8-byte Reload
	movq	544(%rsp), %r8          # 8-byte Reload
	movl	468(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	440(%rsp), %rdi         # 8-byte Reload
	movq	568(%rsp), %rsi         # 8-byte Reload
	movq	512(%rsp), %rdx         # 8-byte Reload
	movq	512(%rsp), %rcx         # 8-byte Reload
	movq	552(%rsp), %r8          # 8-byte Reload
	movq	512(%rsp), %r9          # 8-byte Reload
	movq	488(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	1932(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %esi
	movl	%esi, %edx
	movq	520(%rsp), %rdi         # 8-byte Reload
	movq	568(%rsp), %rsi         # 8-byte Reload
	movq	520(%rsp), %rcx         # 8-byte Reload
	movq	560(%rsp), %r8          # 8-byte Reload
	movq	512(%rsp), %r9          # 8-byte Reload
	movq	488(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	1932(%rsp), %ebp        # 4-byte Reload
	cmpl	$0, %ebp
	setg	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	480(%rsp), %rdi         # 8-byte Reload
	movq	520(%rsp), %rsi         # 8-byte Reload
	movq	520(%rsp), %rcx         # 8-byte Reload
	movq	496(%rsp), %r8          # 8-byte Reload
	movq	512(%rsp), %r9          # 8-byte Reload
	movq	488(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 423(%rsp)          # 1-byte Spill
	callq	trace_logger_log_int
	movq	448(%rsp), %rdi         # 8-byte Reload
	movq	456(%rsp), %rsi         # 8-byte Reload
	movq	472(%rsp), %rdx         # 8-byte Reload
	movq	576(%rsp), %rcx         # 8-byte Reload
	movq	440(%rsp), %r8          # 8-byte Reload
	movl	468(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	536(%rsp), %rdi         # 8-byte Reload
	movq	512(%rsp), %rsi         # 8-byte Reload
	movq	512(%rsp), %rdx         # 8-byte Reload
	movq	520(%rsp), %rcx         # 8-byte Reload
	movq	424(%rsp), %r8          # 8-byte Reload
	movq	512(%rsp), %r9          # 8-byte Reload
	movq	488(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	440(%rsp), %rdi         # 8-byte Reload
	movq	512(%rsp), %rsi         # 8-byte Reload
	movq	512(%rsp), %rdx         # 8-byte Reload
	movq	520(%rsp), %rcx         # 8-byte Reload
	movq	432(%rsp), %r8          # 8-byte Reload
	movq	512(%rsp), %r9          # 8-byte Reload
	movq	488(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	423(%rsp), %al          # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	520(%rsp), %rdi         # 8-byte Reload
	movq	520(%rsp), %rsi         # 8-byte Reload
	movq	520(%rsp), %rcx         # 8-byte Reload
	movq	496(%rsp), %r8          # 8-byte Reload
	movq	512(%rsp), %r9          # 8-byte Reload
	movq	488(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	423(%rsp), %al          # 1-byte Reload
	testb	$1, %al
	movq	512(%rsp), %rcx         # 8-byte Reload
	movq	%rcx, 408(%rsp)         # 8-byte Spill
	jne	.LBB1_1
	jmp	.LBB1_2
.Ltmp60:
.LBB1_1:                                # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	movq	408(%rsp), %rax         # 8-byte Reload
	movabsq	$1, %rcx
	leaq	.L.str41, %rdx
	movabsq	$0, %rsi
	leaq	.L.str9, %rdi
	movabsq	$2, %r8
	leaq	.L.str12, %r9
	movabsq	$3, %r10
	leaq	.L.str13, %r11
	movabsq	$50, %rbx
	leaq	.L.str44, %r14
	leaq	.L.str74, %r15
	movl	$1, %ebp
	movabsq	$19134, %r12            # imm = 0x4ABE
	movabsq	$32, %r13
	movq	%rax, 400(%rsp)         # 8-byte Spill
	leaq	.L.str40, %rax
	movq	%rax, 392(%rsp)         # 8-byte Spill
	leaq	.L.str10, %rax
	movq	%rax, 384(%rsp)         # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 376(%rsp)         # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 368(%rsp)         # 8-byte Spill
	leaq	.L.str15, %rax
	movq	%rax, 360(%rsp)         # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, 352(%rsp)         # 8-byte Spill
	leaq	.L.str14, %rax
	movq	%rax, 344(%rsp)         # 8-byte Spill
	leaq	.L.str8, %rax
	movq	%rax, 336(%rsp)         # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, 328(%rsp)         # 8-byte Spill
	leaq	.L.str72, %rax
	movq	%rax, 320(%rsp)         # 8-byte Spill
	leaq	.L.str73, %rax
	movq	%rax, 312(%rsp)         # 8-byte Spill
	movabsq	$52, %rax
	movq	%rax, 304(%rsp)         # 8-byte Spill
	leaq	.L.str34, %rax
	movq	%rax, 296(%rsp)         # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, 288(%rsp)         # 8-byte Spill
	leaq	.L.str20, %rax
	movq	%rax, 280(%rsp)         # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 272(%rsp)         # 8-byte Spill
	leaq	.L.str71, %rax
	movq	%rax, 264(%rsp)         # 8-byte Spill
	movabsq	$37, %rax
	movq	%rax, 256(%rsp)         # 8-byte Spill
	movabsq	$1000, %rax             # imm = 0x3E8
	vmovsd	.LCPI1_3, %xmm0
	movq	%rax, 248(%rsp)         # 8-byte Spill
	leaq	.L.str70, %rax
	movq	%rax, 240(%rsp)         # 8-byte Spill
	movabsq	$13, %rax
	movq	%rax, 232(%rsp)         # 8-byte Spill
	leaq	.L.str69, %rax
	movq	%rax, 224(%rsp)         # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, 216(%rsp)         # 8-byte Spill
	leaq	.L.str28, %rax
	movq	%rax, 208(%rsp)         # 8-byte Spill
	leaq	.L.str6, %rax
	movq	%rax, 200(%rsp)         # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 192(%rsp)         # 8-byte Spill
	movabsq	$48, %rax
	.loc	1 52 0                  # mma_test_eigen.c:52:0
.Ltmp61:
	movq	%rax, 184(%rsp)         # 8-byte Spill
	movq	192(%rsp), %rax         # 8-byte Reload
	movq	%rdi, 176(%rsp)         # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 168(%rsp)         # 8-byte Spill
	movq	%r14, %rsi
	movq	%rdx, 160(%rsp)         # 8-byte Spill
	movq	%r9, %rdx
	movq	344(%rsp), %rax         # 8-byte Reload
	movq	%rcx, 152(%rsp)         # 8-byte Spill
	movq	%rax, %rcx
	movq	184(%rsp), %rax         # 8-byte Reload
	movq	%r8, 144(%rsp)          # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 136(%rsp)          # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movl	%ebp, 132(%rsp)         # 4-byte Spill
	movq	%r12, 120(%rsp)         # 8-byte Spill
	movq	%r13, 112(%rsp)         # 8-byte Spill
	vmovsd	%xmm0, 104(%rsp)        # 8-byte Spill
	movq	%r15, 96(%rsp)          # 8-byte Spill
	movq	%r14, 88(%rsp)          # 8-byte Spill
	movq	%r10, 80(%rsp)          # 8-byte Spill
	movq	%r11, 72(%rsp)          # 8-byte Spill
	movq	%rbx, 64(%rsp)          # 8-byte Spill
	callq	trace_logger_log0
	movq	144(%rsp), %rdi         # 8-byte Reload
	movq	368(%rsp), %rsi         # 8-byte Reload
	movq	168(%rsp), %rdx         # 8-byte Reload
	movq	168(%rsp), %rcx         # 8-byte Reload
	movq	336(%rsp), %r8          # 8-byte Reload
	movq	152(%rsp), %r9          # 8-byte Reload
	movq	200(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	152(%rsp), %rdi         # 8-byte Reload
	movq	368(%rsp), %rsi         # 8-byte Reload
	movq	168(%rsp), %rdx         # 8-byte Reload
	movq	152(%rsp), %rcx         # 8-byte Reload
	movq	360(%rsp), %r8          # 8-byte Reload
	movq	152(%rsp), %r9          # 8-byte Reload
	movq	136(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	120(%rsp), %rdi         # 8-byte Reload
	movq	368(%rsp), %rsi         # 8-byte Reload
	movq	400(%rsp), %rdx         # 8-byte Reload
	movq	152(%rsp), %rcx         # 8-byte Reload
	movq	344(%rsp), %r8          # 8-byte Reload
	movq	168(%rsp), %r9          # 8-byte Reload
	movq	136(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	304(%rsp), %rdi         # 8-byte Reload
	movq	88(%rsp), %rsi          # 8-byte Reload
	movq	136(%rsp), %rdx         # 8-byte Reload
	movq	224(%rsp), %rcx         # 8-byte Reload
	movq	272(%rsp), %r8          # 8-byte Reload
	movl	132(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	144(%rsp), %rdi         # 8-byte Reload
	movq	368(%rsp), %rsi         # 8-byte Reload
	movq	400(%rsp), %rdx         # 8-byte Reload
	movq	152(%rsp), %rcx         # 8-byte Reload
	movq	344(%rsp), %r8          # 8-byte Reload
	movq	168(%rsp), %r9          # 8-byte Reload
	movq	176(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	152(%rsp), %rdi         # 8-byte Reload
	movq	368(%rsp), %rsi         # 8-byte Reload
	movq	1280(%rsp), %rdx        # 8-byte Reload
	movq	152(%rsp), %rcx         # 8-byte Reload
	movq	208(%rsp), %r8          # 8-byte Reload
	movq	168(%rsp), %r9          # 8-byte Reload
	movq	176(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	400(%rsp), %rax         # 8-byte Reload
	shlq	$3, %rax
	movq	1280(%rsp), %rcx        # 8-byte Reload
	addq	%rax, %rcx
	movq	120(%rsp), %rdi         # 8-byte Reload
	movq	368(%rsp), %rsi         # 8-byte Reload
	movq	%rcx, %rdx
	movq	152(%rsp), %rax         # 8-byte Reload
	movq	%rcx, 56(%rsp)          # 8-byte Spill
	movq	%rax, %rcx
	movq	224(%rsp), %r8          # 8-byte Reload
	movq	168(%rsp), %r9          # 8-byte Reload
	movq	176(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	304(%rsp), %rdi         # 8-byte Reload
	movq	88(%rsp), %rsi          # 8-byte Reload
	movq	136(%rsp), %rdx         # 8-byte Reload
	movq	240(%rsp), %rcx         # 8-byte Reload
	movq	216(%rsp), %r8          # 8-byte Reload
	movl	132(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	152(%rsp), %rdi         # 8-byte Reload
	movq	368(%rsp), %rsi         # 8-byte Reload
	movq	56(%rsp), %rdx          # 8-byte Reload
	movq	152(%rsp), %rcx         # 8-byte Reload
	movq	224(%rsp), %r8          # 8-byte Reload
	movq	168(%rsp), %r9          # 8-byte Reload
	movq	176(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1280(%rsp), %rax        # 8-byte Reload
	movq	400(%rsp), %rcx         # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
	movq	120(%rsp), %rdi         # 8-byte Reload
	movq	368(%rsp), %rsi         # 8-byte Reload
	vmovsd	%xmm0, 48(%rsp)         # 8-byte Spill
	movq	152(%rsp), %rdx         # 8-byte Reload
	movq	240(%rsp), %rcx         # 8-byte Reload
	movq	168(%rsp), %r8          # 8-byte Reload
	movq	176(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	304(%rsp), %rdi         # 8-byte Reload
	movq	88(%rsp), %rsi          # 8-byte Reload
	movq	136(%rsp), %rdx         # 8-byte Reload
	movq	264(%rsp), %rcx         # 8-byte Reload
	movq	232(%rsp), %r8          # 8-byte Reload
	movl	132(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	144(%rsp), %rdi         # 8-byte Reload
	movq	368(%rsp), %rsi         # 8-byte Reload
	vmovsd	104(%rsp), %xmm0        # 8-byte Reload
	movq	168(%rsp), %rdx         # 8-byte Reload
	movq	336(%rsp), %rcx         # 8-byte Reload
	movq	168(%rsp), %r8          # 8-byte Reload
	movq	176(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	152(%rsp), %rdi         # 8-byte Reload
	movq	368(%rsp), %rsi         # 8-byte Reload
	vmovsd	48(%rsp), %xmm0         # 8-byte Reload
	movq	152(%rsp), %rdx         # 8-byte Reload
	movq	240(%rsp), %rcx         # 8-byte Reload
	movq	168(%rsp), %r8          # 8-byte Reload
	movq	176(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	48(%rsp), %xmm0         # 8-byte Reload
	vmovsd	104(%rsp), %xmm1        # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	120(%rsp), %rdi         # 8-byte Reload
	movq	368(%rsp), %rsi         # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	152(%rsp), %rdx         # 8-byte Reload
	movq	264(%rsp), %rcx         # 8-byte Reload
	movq	168(%rsp), %r8          # 8-byte Reload
	movq	176(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 40(%rsp)         # 8-byte Spill
	callq	trace_logger_log_double
	movq	304(%rsp), %rdi         # 8-byte Reload
	movq	88(%rsp), %rsi          # 8-byte Reload
	movq	136(%rsp), %rdx         # 8-byte Reload
	movq	320(%rsp), %rcx         # 8-byte Reload
	movq	256(%rsp), %r8          # 8-byte Reload
	movl	132(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	152(%rsp), %rdi         # 8-byte Reload
	movq	368(%rsp), %rsi         # 8-byte Reload
	vmovsd	40(%rsp), %xmm0         # 8-byte Reload
	movq	152(%rsp), %rdx         # 8-byte Reload
	movq	264(%rsp), %rcx         # 8-byte Reload
	movq	168(%rsp), %r8          # 8-byte Reload
	movq	176(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	40(%rsp), %xmm0         # 8-byte Reload
	vcvttsd2si	%xmm0, %ebp
	movl	%ebp, %esi
	movl	%esi, %edx
	movq	120(%rsp), %rdi         # 8-byte Reload
	movq	112(%rsp), %rsi         # 8-byte Reload
	movq	152(%rsp), %rcx         # 8-byte Reload
	movq	320(%rsp), %r8          # 8-byte Reload
	movq	168(%rsp), %r9          # 8-byte Reload
	movq	176(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%ebp, 36(%rsp)          # 4-byte Spill
	callq	trace_logger_log_int
	movq	304(%rsp), %rdi         # 8-byte Reload
	movq	88(%rsp), %rsi          # 8-byte Reload
	movq	136(%rsp), %rdx         # 8-byte Reload
	movq	312(%rsp), %rcx         # 8-byte Reload
	movq	272(%rsp), %r8          # 8-byte Reload
	movl	132(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	144(%rsp), %rdi         # 8-byte Reload
	movq	368(%rsp), %rsi         # 8-byte Reload
	movq	400(%rsp), %rdx         # 8-byte Reload
	movq	152(%rsp), %rcx         # 8-byte Reload
	movq	344(%rsp), %r8          # 8-byte Reload
	movq	168(%rsp), %r9          # 8-byte Reload
	movq	176(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	152(%rsp), %rdi         # 8-byte Reload
	movq	368(%rsp), %rsi         # 8-byte Reload
	movq	1808(%rsp), %rdx        # 8-byte Reload
	movq	152(%rsp), %rcx         # 8-byte Reload
	movq	280(%rsp), %r8          # 8-byte Reload
	movq	168(%rsp), %r9          # 8-byte Reload
	movq	176(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	400(%rsp), %rax         # 8-byte Reload
	shlq	$2, %rax
	movq	1808(%rsp), %rcx        # 8-byte Reload
	addq	%rax, %rcx
	movq	120(%rsp), %rdi         # 8-byte Reload
	movq	368(%rsp), %rsi         # 8-byte Reload
	movq	%rcx, %rdx
	movq	152(%rsp), %rax         # 8-byte Reload
	movq	%rcx, 24(%rsp)          # 8-byte Spill
	movq	%rax, %rcx
	movq	312(%rsp), %r8          # 8-byte Reload
	movq	168(%rsp), %r9          # 8-byte Reload
	movq	176(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	304(%rsp), %rdi         # 8-byte Reload
	movq	88(%rsp), %rsi          # 8-byte Reload
	movq	136(%rsp), %rdx         # 8-byte Reload
	movq	296(%rsp), %rcx         # 8-byte Reload
	movq	288(%rsp), %r8          # 8-byte Reload
	movl	132(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	144(%rsp), %rdi         # 8-byte Reload
	movq	368(%rsp), %rsi         # 8-byte Reload
	movq	24(%rsp), %rdx          # 8-byte Reload
	movq	152(%rsp), %rcx         # 8-byte Reload
	movq	312(%rsp), %r8          # 8-byte Reload
	movq	168(%rsp), %r9          # 8-byte Reload
	movq	176(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	36(%rsp), %ebp          # 4-byte Reload
	movl	%ebp, %esi
	movl	%esi, %edx
	movq	152(%rsp), %rdi         # 8-byte Reload
	movq	112(%rsp), %rsi         # 8-byte Reload
	movq	152(%rsp), %rcx         # 8-byte Reload
	movq	320(%rsp), %r8          # 8-byte Reload
	movq	168(%rsp), %r9          # 8-byte Reload
	movq	176(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1808(%rsp), %rax        # 8-byte Reload
	movq	400(%rsp), %rcx         # 8-byte Reload
	movl	36(%rsp), %ebp          # 4-byte Reload
	movl	%ebp, (%rax,%rcx,4)
.Ltmp62:
	.loc	1 50 0                  # mma_test_eigen.c:50:0
	movq	64(%rsp), %rdi          # 8-byte Reload
	movq	88(%rsp), %rsi          # 8-byte Reload
	movq	136(%rsp), %rdx         # 8-byte Reload
	movq	360(%rsp), %rcx         # 8-byte Reload
	movq	328(%rsp), %r8          # 8-byte Reload
	movl	132(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	144(%rsp), %rdi         # 8-byte Reload
	movq	368(%rsp), %rsi         # 8-byte Reload
	movq	152(%rsp), %rdx         # 8-byte Reload
	movq	168(%rsp), %rcx         # 8-byte Reload
	movq	336(%rsp), %r8          # 8-byte Reload
	movq	168(%rsp), %r9          # 8-byte Reload
	movq	176(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	152(%rsp), %rdi         # 8-byte Reload
	movq	368(%rsp), %rsi         # 8-byte Reload
	movq	400(%rsp), %rdx         # 8-byte Reload
	movq	152(%rsp), %rcx         # 8-byte Reload
	movq	344(%rsp), %r8          # 8-byte Reload
	movq	168(%rsp), %r9          # 8-byte Reload
	movq	176(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	400(%rsp), %rax         # 8-byte Reload
	addq	$1, %rax
	movq	120(%rsp), %rdi         # 8-byte Reload
	movq	368(%rsp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	movq	152(%rsp), %rcx         # 8-byte Reload
	movq	360(%rsp), %r8          # 8-byte Reload
	movq	168(%rsp), %r9          # 8-byte Reload
	movq	176(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 16(%rsp)          # 8-byte Spill
	callq	trace_logger_log_int
	movq	64(%rsp), %rdi          # 8-byte Reload
	movq	88(%rsp), %rsi          # 8-byte Reload
	movq	136(%rsp), %rdx         # 8-byte Reload
	movq	392(%rsp), %rcx         # 8-byte Reload
	movq	352(%rsp), %r8          # 8-byte Reload
	movl	132(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	152(%rsp), %rdi         # 8-byte Reload
	movq	368(%rsp), %rsi         # 8-byte Reload
	movq	16(%rsp), %rdx          # 8-byte Reload
	movq	152(%rsp), %rcx         # 8-byte Reload
	movq	360(%rsp), %r8          # 8-byte Reload
	movq	168(%rsp), %r9          # 8-byte Reload
	movq	176(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	16(%rsp), %rax          # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %esi
	movl	%esi, %edx
	movq	120(%rsp), %rdi         # 8-byte Reload
	movq	112(%rsp), %rsi         # 8-byte Reload
	movq	152(%rsp), %rcx         # 8-byte Reload
	movq	392(%rsp), %r8          # 8-byte Reload
	movq	168(%rsp), %r9          # 8-byte Reload
	movq	176(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 12(%rsp)          # 4-byte Spill
	callq	trace_logger_log_int
	movq	64(%rsp), %rdi          # 8-byte Reload
	movq	88(%rsp), %rsi          # 8-byte Reload
	movq	136(%rsp), %rdx         # 8-byte Reload
	movq	160(%rsp), %rcx         # 8-byte Reload
	movq	376(%rsp), %r8          # 8-byte Reload
	movl	132(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	1932(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	144(%rsp), %rdi         # 8-byte Reload
	movq	112(%rsp), %rsi         # 8-byte Reload
	movq	152(%rsp), %rcx         # 8-byte Reload
	movq	384(%rsp), %r8          # 8-byte Reload
	movq	168(%rsp), %r9          # 8-byte Reload
	movq	176(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	12(%rsp), %ebp          # 4-byte Reload
	movl	%ebp, %esi
	movl	%esi, %edx
	movq	152(%rsp), %rdi         # 8-byte Reload
	movq	112(%rsp), %rsi         # 8-byte Reload
	movq	152(%rsp), %rcx         # 8-byte Reload
	movq	392(%rsp), %r8          # 8-byte Reload
	movq	168(%rsp), %r9          # 8-byte Reload
	movq	176(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	12(%rsp), %ebp          # 4-byte Reload
	movl	1932(%rsp), %esi        # 4-byte Reload
	cmpl	%esi, %ebp
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	120(%rsp), %rdi         # 8-byte Reload
	movq	152(%rsp), %rsi         # 8-byte Reload
	movq	152(%rsp), %rcx         # 8-byte Reload
	movq	160(%rsp), %r8          # 8-byte Reload
	movq	168(%rsp), %r9          # 8-byte Reload
	movq	176(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 11(%rsp)           # 1-byte Spill
	callq	trace_logger_log_int
	movq	64(%rsp), %rdi          # 8-byte Reload
	movq	88(%rsp), %rsi          # 8-byte Reload
	movq	136(%rsp), %rdx         # 8-byte Reload
	movq	96(%rsp), %rcx          # 8-byte Reload
	movq	144(%rsp), %r8          # 8-byte Reload
	movl	132(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	80(%rsp), %rdi          # 8-byte Reload
	movq	168(%rsp), %rsi         # 8-byte Reload
	movq	168(%rsp), %rdx         # 8-byte Reload
	movq	152(%rsp), %rcx         # 8-byte Reload
	movq	72(%rsp), %r8           # 8-byte Reload
	movq	168(%rsp), %r9          # 8-byte Reload
	movq	176(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	144(%rsp), %rdi         # 8-byte Reload
	movq	168(%rsp), %rsi         # 8-byte Reload
	movq	168(%rsp), %rdx         # 8-byte Reload
	movq	152(%rsp), %rcx         # 8-byte Reload
	movq	136(%rsp), %r8          # 8-byte Reload
	movq	168(%rsp), %r9          # 8-byte Reload
	movq	176(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	11(%rsp), %al           # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	152(%rsp), %rdi         # 8-byte Reload
	movq	152(%rsp), %rsi         # 8-byte Reload
	movq	152(%rsp), %rcx         # 8-byte Reload
	movq	160(%rsp), %r8          # 8-byte Reload
	movq	168(%rsp), %r9          # 8-byte Reload
	movq	176(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	11(%rsp), %al           # 1-byte Reload
	testb	$1, %al
	movq	16(%rsp), %rcx          # 8-byte Reload
	movq	%rcx, 408(%rsp)         # 8-byte Spill
	jne	.LBB1_2
	jmp	.LBB1_1
.Ltmp63:
.LBB1_2:                                # %._crit_edge
	movabsq	$54, %rdi
	leaq	.L.str44, %rsi
	leaq	.L.str13, %rdx
	leaq	.L.str43, %rcx
	movabsq	$1, %r8
	movl	$1, %r9d
	.loc	1 54 0                  # mma_test_eigen.c:54:0
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$1944, %rsp             # imm = 0x798
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
.Ltmp64:
.Ltmp65:
	.size	store_kernel, .Ltmp65-store_kernel
.Lfunc_end1:
	.cfi_endproc

	.globl	main
	.align	16, 0x90
	.type	main,@function
main:                                   # @main
	.cfi_startproc
.Lfunc_begin2:
	.loc	1 56 0                  # mma_test_eigen.c:56:0
# BB#0:
	pushq	%rbp
.Ltmp73:
	.cfi_def_cfa_offset 16
	pushq	%r15
.Ltmp74:
	.cfi_def_cfa_offset 24
	pushq	%r14
.Ltmp75:
	.cfi_def_cfa_offset 32
	pushq	%r13
.Ltmp76:
	.cfi_def_cfa_offset 40
	pushq	%r12
.Ltmp77:
	.cfi_def_cfa_offset 48
	pushq	%rbx
.Ltmp78:
	.cfi_def_cfa_offset 56
	subq	$1352, %rsp             # imm = 0x548
.Ltmp79:
	.cfi_def_cfa_offset 1408
.Ltmp80:
	.cfi_offset %rbx, -56
.Ltmp81:
	.cfi_offset %r12, -48
.Ltmp82:
	.cfi_offset %r13, -40
.Ltmp83:
	.cfi_offset %r14, -32
.Ltmp84:
	.cfi_offset %r15, -24
.Ltmp85:
	.cfi_offset %rbp, -16
	leaq	.L.str84, %rdi
	movabsq	$21, %rsi
	.loc	1 58 0 prologue_end     # mma_test_eigen.c:58:0
.Ltmp86:
	callq	trace_logger_write_labelmap
	movabsq	$1, %rsi
	movabsq	$64, %rdi
	movabsq	$12, %rdx
	movabsq	$0, %rax
	leaq	.L.str8, %r8
	leaq	.L.str9, %rcx
	movabsq	$2, %r9
	leaq	malloc, %r10
	leaq	.L.str45, %r11
	movabsq	$59, %rbx
	leaq	.L.str75, %r14
	leaq	.L.str6, %r15
	leaq	.L.str7, %r12
	movabsq	$49, %r13
	movl	$0, %ebp
	movq	%rsi, 1344(%rsp)        # 8-byte Spill
	movl	$1, %esi
.Ltmp87:
	#DEBUG_VALUE: main:num_vals <- 3
	.loc	1 59 0                  # mma_test_eigen.c:59:0
	movq	%rdi, 1336(%rsp)        # 8-byte Spill
	movq	%rbx, %rdi
	movl	%esi, 1332(%rsp)        # 4-byte Spill
	movq	%r14, %rsi
	movq	%rdx, 1320(%rsp)        # 8-byte Spill
	movq	%r15, %rdx
	movq	%rcx, 1312(%rsp)        # 8-byte Spill
	movq	%r12, %rcx
	movq	%r8, 1304(%rsp)         # 8-byte Spill
	movq	%r13, %r8
	movq	%r9, 1296(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r11, 1288(%rsp)        # 8-byte Spill
	movq	%rax, 1280(%rsp)        # 8-byte Spill
	movq	%r10, 1272(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	1296(%rsp), %rdi        # 8-byte Reload
	movq	1336(%rsp), %rsi        # 8-byte Reload
	movq	1272(%rsp), %rdx        # 8-byte Reload
	movq	1344(%rsp), %rcx        # 8-byte Reload
	movq	1288(%rsp), %r8         # 8-byte Reload
	movq	1280(%rsp), %r9         # 8-byte Reload
	movq	1312(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1344(%rsp), %rdi        # 8-byte Reload
	movq	1336(%rsp), %rsi        # 8-byte Reload
	movq	1320(%rsp), %rdx        # 8-byte Reload
	movq	1280(%rsp), %rcx        # 8-byte Reload
	movq	1304(%rsp), %r8         # 8-byte Reload
	movq	1280(%rsp), %r9         # 8-byte Reload
	movq	1312(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$12, %ebp
	movl	%ebp, %edi
	callq	malloc
	movabsq	$1, %rcx
	movabsq	$64, %rdx
	movabsq	$12, %rsi
	movabsq	$0, %rdi
	leaq	.L.str8, %r8
	leaq	.L.str9, %r9
	movabsq	$2, %r10
	leaq	malloc, %r11
	leaq	.L.str45, %rbx
	movabsq	$60, %r14
	leaq	.L.str75, %r15
	leaq	.L.str6, %r12
	leaq	.L.str19, %r13
	movabsq	$49, %rbp
	movq	%rsi, 1264(%rsp)        # 8-byte Spill
	movl	$0, %esi
	movl	%esi, 1260(%rsp)        # 4-byte Spill
	movl	$1, %esi
	movq	%rax, 1248(%rsp)        # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 1240(%rsp)        # 8-byte Spill
	leaq	.L.str17, %rax
	movq	%rax, 1232(%rsp)        # 8-byte Spill
	leaq	.L.str7, %rax
	movq	%rax, 1224(%rsp)        # 8-byte Spill
	movabsq	$59, %rax
	movq	%rax, 1216(%rsp)        # 8-byte Spill
	movabsq	$44, %rax
	movq	%rax, 1208(%rsp)        # 8-byte Spill
	movq	1240(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 1200(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movl	%esi, 1196(%rsp)        # 4-byte Spill
	movq	%rdx, %rsi
	movq	1248(%rsp), %rax        # 8-byte Reload
	movq	%rdx, 1184(%rsp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	%rcx, 1176(%rsp)        # 8-byte Spill
	movq	1224(%rsp), %rax        # 8-byte Reload
	movq	%r8, 1168(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	1200(%rsp), %rax        # 8-byte Reload
	movq	%r9, 1160(%rsp)         # 8-byte Spill
	movq	%rax, %r9
	movq	1160(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	movq	%r15, 1152(%rsp)        # 8-byte Spill
	movq	%r12, 1144(%rsp)        # 8-byte Spill
	movq	%r13, 1136(%rsp)        # 8-byte Spill
	movq	%rbp, 1128(%rsp)        # 8-byte Spill
	movq	%r14, 1120(%rsp)        # 8-byte Spill
	movq	%rbx, 1112(%rsp)        # 8-byte Spill
	movq	%r10, 1104(%rsp)        # 8-byte Spill
	movq	%r11, 1096(%rsp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movq	1216(%rsp), %rdi        # 8-byte Reload
	movq	1152(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	1232(%rsp), %rcx        # 8-byte Reload
	movq	1208(%rsp), %r8         # 8-byte Reload
	movl	1260(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1176(%rsp), %rdi        # 8-byte Reload
	movq	1184(%rsp), %rsi        # 8-byte Reload
	movq	1248(%rsp), %rdx        # 8-byte Reload
	movq	1176(%rsp), %rcx        # 8-byte Reload
	movq	1224(%rsp), %r8         # 8-byte Reload
	movq	1200(%rsp), %r9         # 8-byte Reload
	movq	1160(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1248(%rsp), %rax        # 8-byte Reload
	movq	1240(%rsp), %rdi        # 8-byte Reload
	movq	1184(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	1176(%rsp), %rcx        # 8-byte Reload
	movq	1232(%rsp), %r8         # 8-byte Reload
	movq	1200(%rsp), %r9         # 8-byte Reload
	movq	1160(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 1088(%rsp)        # 8-byte Spill
	callq	trace_logger_log_ptr
.Ltmp88:
	#DEBUG_VALUE: main:store_vals <- [RSP+1088]
	.loc	1 60 0                  # mma_test_eigen.c:60:0
	movq	1120(%rsp), %rdi        # 8-byte Reload
	movq	1152(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	1136(%rsp), %rcx        # 8-byte Reload
	movq	1128(%rsp), %r8         # 8-byte Reload
	movl	1260(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1104(%rsp), %rdi        # 8-byte Reload
	movq	1184(%rsp), %rsi        # 8-byte Reload
	movq	1096(%rsp), %rdx        # 8-byte Reload
	movq	1176(%rsp), %rcx        # 8-byte Reload
	movq	1112(%rsp), %r8         # 8-byte Reload
	movq	1200(%rsp), %r9         # 8-byte Reload
	movq	1160(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1176(%rsp), %rdi        # 8-byte Reload
	movq	1184(%rsp), %rsi        # 8-byte Reload
	movq	1264(%rsp), %rdx        # 8-byte Reload
	movq	1200(%rsp), %rcx        # 8-byte Reload
	movq	1168(%rsp), %r8         # 8-byte Reload
	movq	1200(%rsp), %r9         # 8-byte Reload
	movq	1160(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$12, %esi
	movl	%esi, %edi
	callq	malloc
.Ltmp89:
	movabsq	$0, %rcx
	movabsq	$1, %rdx
	leaq	.L.str77, %r8
	leaq	.L.str9, %rdi
	movabsq	$61, %r9
	leaq	.L.str75, %r10
	leaq	.L.str6, %r11
	leaq	.L.str76, %rbx
	movabsq	$2, %r14
	movl	$0, %esi
	movl	$1, %ebp
	movabsq	$19134, %r15            # imm = 0x4ABE
	movabsq	$64, %r12
	leaq	.L.str21, %r13
	movq	%rax, 1080(%rsp)        # 8-byte Spill
	leaq	.L.str19, %rax
	movq	%rax, 1072(%rsp)        # 8-byte Spill
	movabsq	$60, %rax
	movq	%rax, 1064(%rsp)        # 8-byte Spill
	movabsq	$44, %rax
	movq	%rdi, 1056(%rsp)        # 8-byte Spill
	movq	%r15, %rdi
	movl	%esi, 1052(%rsp)        # 4-byte Spill
	movq	%r12, %rsi
	movq	%rax, 1040(%rsp)        # 8-byte Spill
	movq	1080(%rsp), %rax        # 8-byte Reload
	movq	%rdx, 1032(%rsp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	1032(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 1024(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	1072(%rsp), %rax        # 8-byte Reload
	movq	%r8, 1016(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	1024(%rsp), %rax        # 8-byte Reload
	movq	%r9, 1008(%rsp)         # 8-byte Spill
	movq	%rax, %r9
	movq	1056(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%ebp, 1004(%rsp)        # 4-byte Spill
	movq	%r15, 992(%rsp)         # 8-byte Spill
	movq	%r12, 984(%rsp)         # 8-byte Spill
	movq	%r13, 976(%rsp)         # 8-byte Spill
	movq	%r14, 968(%rsp)         # 8-byte Spill
	movq	%r10, 960(%rsp)         # 8-byte Spill
	movq	%r11, 952(%rsp)         # 8-byte Spill
	movq	%rbx, 944(%rsp)         # 8-byte Spill
	callq	trace_logger_log_ptr
	movq	1064(%rsp), %rdi        # 8-byte Reload
	movq	960(%rsp), %rsi         # 8-byte Reload
	movq	952(%rsp), %rdx         # 8-byte Reload
	movq	976(%rsp), %rcx         # 8-byte Reload
	movq	1040(%rsp), %r8         # 8-byte Reload
	movl	1052(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1032(%rsp), %rdi        # 8-byte Reload
	movq	984(%rsp), %rsi         # 8-byte Reload
	movq	1080(%rsp), %rdx        # 8-byte Reload
	movq	1032(%rsp), %rcx        # 8-byte Reload
	movq	1072(%rsp), %r8         # 8-byte Reload
	movq	1024(%rsp), %r9         # 8-byte Reload
	movq	1056(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1080(%rsp), %rax        # 8-byte Reload
	movq	992(%rsp), %rdi         # 8-byte Reload
	movq	984(%rsp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	movq	1032(%rsp), %rcx        # 8-byte Reload
	movq	976(%rsp), %r8          # 8-byte Reload
	movq	1024(%rsp), %r9         # 8-byte Reload
	movq	1056(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 936(%rsp)         # 8-byte Spill
	callq	trace_logger_log_ptr
.Ltmp90:
	#DEBUG_VALUE: main:store_loc <- [RSP+936]
	#DEBUG_VALUE: i <- 0
	.loc	1 61 0                  # mma_test_eigen.c:61:0
	movq	1008(%rsp), %rdi        # 8-byte Reload
	movq	960(%rsp), %rsi         # 8-byte Reload
	movq	952(%rsp), %rdx         # 8-byte Reload
	movq	944(%rsp), %rcx         # 8-byte Reload
	movq	968(%rsp), %r8          # 8-byte Reload
	movl	1052(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1032(%rsp), %rdi        # 8-byte Reload
	movq	1024(%rsp), %rsi        # 8-byte Reload
	movq	1024(%rsp), %rdx        # 8-byte Reload
	movq	1032(%rsp), %rcx        # 8-byte Reload
	movq	1016(%rsp), %r8         # 8-byte Reload
	movq	1024(%rsp), %r9         # 8-byte Reload
	movq	1056(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1024(%rsp), %rax        # 8-byte Reload
	movq	%rax, 928(%rsp)         # 8-byte Spill
.Ltmp91:
.LBB2_1:                                # =>This Inner Loop Header: Depth=1
	movq	928(%rsp), %rax         # 8-byte Reload
	movabsq	$1, %rcx
	leaq	.L.str41, %rdx
	movabsq	$0, %rsi
	leaq	.L.str9, %rdi
	movabsq	$2, %r8
	leaq	.L.str77, %r9
	movabsq	$3, %r10
	leaq	.L.str81, %r11
	movabsq	$61, %rbx
	leaq	.L.str75, %r14
	leaq	.L.str80, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 920(%rsp)         # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 912(%rsp)         # 8-byte Spill
	leaq	.L.str15, %rax
	movq	%rax, 904(%rsp)         # 8-byte Spill
	leaq	.L.str8, %rax
	movq	%rax, 896(%rsp)         # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 888(%rsp)         # 8-byte Spill
	leaq	.L.str14, %rax
	movq	%rax, 880(%rsp)         # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, 872(%rsp)         # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 864(%rsp)         # 8-byte Spill
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
	movq	%rax, 856(%rsp)         # 8-byte Spill
	leaq	.L.str26, %rax
	movq	%rax, 848(%rsp)         # 8-byte Spill
	movabsq	$63, %rax
	movq	%rax, 840(%rsp)         # 8-byte Spill
	leaq	.L.str79, %rax
	movq	%rax, 832(%rsp)         # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, 824(%rsp)         # 8-byte Spill
	leaq	.L.str21, %rax
	movq	%rax, 816(%rsp)         # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 808(%rsp)         # 8-byte Spill
	leaq	.L.str25, %rax
	movq	%rax, 800(%rsp)         # 8-byte Spill
	leaq	.L.str23, %rax
	movq	%rax, 792(%rsp)         # 8-byte Spill
	movabsq	$62, %rax
	movq	%rax, 784(%rsp)         # 8-byte Spill
	leaq	.L.str78, %rax
	movq	%rax, 776(%rsp)         # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, 768(%rsp)         # 8-byte Spill
	leaq	.L.str17, %rax
	movq	%rax, 760(%rsp)         # 8-byte Spill
	leaq	.L.str6, %rax
	movq	%rax, 752(%rsp)         # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 744(%rsp)         # 8-byte Spill
	movabsq	$48, %rax
	.loc	1 62 0                  # mma_test_eigen.c:62:0
.Ltmp92:
	movq	%rax, 736(%rsp)         # 8-byte Spill
	movq	744(%rsp), %rax         # 8-byte Reload
	movq	%rdi, 728(%rsp)         # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 720(%rsp)         # 8-byte Spill
	movq	%r14, %rsi
	movq	%rdx, 712(%rsp)         # 8-byte Spill
	movq	%r9, %rdx
	movq	880(%rsp), %rax         # 8-byte Reload
	movq	%rcx, 704(%rsp)         # 8-byte Spill
	movq	%rax, %rcx
	movq	736(%rsp), %rax         # 8-byte Reload
	movq	%r8, 696(%rsp)          # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 688(%rsp)          # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r15, 680(%rsp)         # 8-byte Spill
	movl	%ebp, 676(%rsp)         # 4-byte Spill
	movl	%r12d, 672(%rsp)        # 4-byte Spill
	movq	%r13, 664(%rsp)         # 8-byte Spill
	movq	%r14, 656(%rsp)         # 8-byte Spill
	movq	%rbx, 648(%rsp)         # 8-byte Spill
	movq	%r10, 640(%rsp)         # 8-byte Spill
	movq	%r11, 632(%rsp)         # 8-byte Spill
	callq	trace_logger_log0
	movq	696(%rsp), %rdi         # 8-byte Reload
	movq	912(%rsp), %rsi         # 8-byte Reload
	movq	720(%rsp), %rdx         # 8-byte Reload
	movq	704(%rsp), %rcx         # 8-byte Reload
	movq	904(%rsp), %r8          # 8-byte Reload
	movq	704(%rsp), %r9          # 8-byte Reload
	movq	688(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	704(%rsp), %rdi         # 8-byte Reload
	movq	912(%rsp), %rsi         # 8-byte Reload
	movq	720(%rsp), %rdx         # 8-byte Reload
	movq	720(%rsp), %rcx         # 8-byte Reload
	movq	896(%rsp), %r8          # 8-byte Reload
	movq	704(%rsp), %r9          # 8-byte Reload
	movq	752(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	664(%rsp), %rdi         # 8-byte Reload
	movq	912(%rsp), %rsi         # 8-byte Reload
	movq	920(%rsp), %rdx         # 8-byte Reload
	movq	704(%rsp), %rcx         # 8-byte Reload
	movq	880(%rsp), %r8          # 8-byte Reload
	movq	720(%rsp), %r9          # 8-byte Reload
	movq	752(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	784(%rsp), %rdi         # 8-byte Reload
	movq	656(%rsp), %rsi         # 8-byte Reload
	movq	688(%rsp), %rdx         # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	808(%rsp), %r8          # 8-byte Reload
	movl	676(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	696(%rsp), %rdi         # 8-byte Reload
	movq	912(%rsp), %rsi         # 8-byte Reload
	movq	920(%rsp), %rdx         # 8-byte Reload
	movq	704(%rsp), %rcx         # 8-byte Reload
	movq	880(%rsp), %r8          # 8-byte Reload
	movq	720(%rsp), %r9          # 8-byte Reload
	movq	728(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	704(%rsp), %rdi         # 8-byte Reload
	movq	912(%rsp), %rsi         # 8-byte Reload
	movq	1088(%rsp), %rdx        # 8-byte Reload
	movq	704(%rsp), %rcx         # 8-byte Reload
	movq	760(%rsp), %r8          # 8-byte Reload
	movq	720(%rsp), %r9          # 8-byte Reload
	movq	728(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	920(%rsp), %rax         # 8-byte Reload
	shlq	$2, %rax
	movq	1088(%rsp), %rcx        # 8-byte Reload
	addq	%rax, %rcx
	movq	664(%rsp), %rdi         # 8-byte Reload
	movq	912(%rsp), %rsi         # 8-byte Reload
	movq	%rcx, %rdx
	movq	704(%rsp), %rax         # 8-byte Reload
	movq	%rcx, 624(%rsp)         # 8-byte Spill
	movq	%rax, %rcx
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	720(%rsp), %r9          # 8-byte Reload
	movq	728(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	784(%rsp), %rdi         # 8-byte Reload
	movq	656(%rsp), %rsi         # 8-byte Reload
	movq	688(%rsp), %rdx         # 8-byte Reload
	movq	800(%rsp), %rcx         # 8-byte Reload
	movq	768(%rsp), %r8          # 8-byte Reload
	movl	676(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	704(%rsp), %rdi         # 8-byte Reload
	movq	912(%rsp), %rsi         # 8-byte Reload
	movq	920(%rsp), %rdx         # 8-byte Reload
	movq	704(%rsp), %rcx         # 8-byte Reload
	movq	880(%rsp), %r8          # 8-byte Reload
	movq	720(%rsp), %r9          # 8-byte Reload
	movq	728(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	920(%rsp), %rax         # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	664(%rsp), %rdi         # 8-byte Reload
	movq	864(%rsp), %rsi         # 8-byte Reload
	movq	704(%rsp), %rcx         # 8-byte Reload
	movq	800(%rsp), %r8          # 8-byte Reload
	movq	720(%rsp), %r9          # 8-byte Reload
	movq	728(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 620(%rsp)         # 4-byte Spill
	callq	trace_logger_log_int
	movq	784(%rsp), %rdi         # 8-byte Reload
	movq	656(%rsp), %rsi         # 8-byte Reload
	movq	688(%rsp), %rdx         # 8-byte Reload
	movq	776(%rsp), %rcx         # 8-byte Reload
	movq	824(%rsp), %r8          # 8-byte Reload
	movl	676(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	696(%rsp), %rdi         # 8-byte Reload
	movq	912(%rsp), %rsi         # 8-byte Reload
	movq	624(%rsp), %rdx         # 8-byte Reload
	movq	704(%rsp), %rcx         # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	720(%rsp), %r9          # 8-byte Reload
	movq	728(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	620(%rsp), %ebp         # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	704(%rsp), %rdi         # 8-byte Reload
	movq	864(%rsp), %rsi         # 8-byte Reload
	movq	704(%rsp), %rcx         # 8-byte Reload
	movq	800(%rsp), %r8          # 8-byte Reload
	movq	720(%rsp), %r9          # 8-byte Reload
	movq	728(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1088(%rsp), %rax        # 8-byte Reload
	movq	920(%rsp), %rcx         # 8-byte Reload
	movl	620(%rsp), %ebp         # 4-byte Reload
	movl	%ebp, (%rax,%rcx,4)
	.loc	1 63 0                  # mma_test_eigen.c:63:0
	movq	840(%rsp), %rdi         # 8-byte Reload
	movq	656(%rsp), %rsi         # 8-byte Reload
	movq	688(%rsp), %rdx         # 8-byte Reload
	movq	848(%rsp), %rcx         # 8-byte Reload
	movq	808(%rsp), %r8          # 8-byte Reload
	movl	676(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	696(%rsp), %rdi         # 8-byte Reload
	movq	912(%rsp), %rsi         # 8-byte Reload
	movq	920(%rsp), %rdx         # 8-byte Reload
	movq	704(%rsp), %rcx         # 8-byte Reload
	movq	880(%rsp), %r8          # 8-byte Reload
	movq	720(%rsp), %r9          # 8-byte Reload
	movq	728(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	704(%rsp), %rdi         # 8-byte Reload
	movq	912(%rsp), %rsi         # 8-byte Reload
	movq	936(%rsp), %rdx         # 8-byte Reload
	movq	704(%rsp), %rcx         # 8-byte Reload
	movq	816(%rsp), %r8          # 8-byte Reload
	movq	720(%rsp), %r9          # 8-byte Reload
	movq	728(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	920(%rsp), %rax         # 8-byte Reload
	shlq	$2, %rax
	movq	936(%rsp), %rcx         # 8-byte Reload
	addq	%rax, %rcx
	movq	664(%rsp), %rdi         # 8-byte Reload
	movq	912(%rsp), %rsi         # 8-byte Reload
	movq	%rcx, %rdx
	movq	704(%rsp), %rax         # 8-byte Reload
	movq	%rcx, 608(%rsp)         # 8-byte Spill
	movq	%rax, %rcx
	movq	848(%rsp), %r8          # 8-byte Reload
	movq	720(%rsp), %r9          # 8-byte Reload
	movq	728(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	840(%rsp), %rdi         # 8-byte Reload
	movq	656(%rsp), %rsi         # 8-byte Reload
	movq	688(%rsp), %rdx         # 8-byte Reload
	movq	832(%rsp), %rcx         # 8-byte Reload
	movq	824(%rsp), %r8          # 8-byte Reload
	movl	676(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	696(%rsp), %rdi         # 8-byte Reload
	movq	912(%rsp), %rsi         # 8-byte Reload
	movq	608(%rsp), %rdx         # 8-byte Reload
	movq	704(%rsp), %rcx         # 8-byte Reload
	movq	848(%rsp), %r8          # 8-byte Reload
	movq	720(%rsp), %r9          # 8-byte Reload
	movq	728(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	704(%rsp), %rdi         # 8-byte Reload
	movq	864(%rsp), %rsi         # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	720(%rsp), %rcx         # 8-byte Reload
	movq	896(%rsp), %r8          # 8-byte Reload
	movq	720(%rsp), %r9          # 8-byte Reload
	movq	728(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	936(%rsp), %rax         # 8-byte Reload
	movq	920(%rsp), %rcx         # 8-byte Reload
	movl	$-1, (%rax,%rcx,4)
.Ltmp93:
	.loc	1 61 0                  # mma_test_eigen.c:61:0
	movq	648(%rsp), %rdi         # 8-byte Reload
	movq	656(%rsp), %rsi         # 8-byte Reload
	movq	688(%rsp), %rdx         # 8-byte Reload
	movq	904(%rsp), %rcx         # 8-byte Reload
	movq	872(%rsp), %r8          # 8-byte Reload
	movl	676(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	696(%rsp), %rdi         # 8-byte Reload
	movq	912(%rsp), %rsi         # 8-byte Reload
	movq	704(%rsp), %rdx         # 8-byte Reload
	movq	720(%rsp), %rcx         # 8-byte Reload
	movq	896(%rsp), %r8          # 8-byte Reload
	movq	720(%rsp), %r9          # 8-byte Reload
	movq	728(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	704(%rsp), %rdi         # 8-byte Reload
	movq	912(%rsp), %rsi         # 8-byte Reload
	movq	920(%rsp), %rdx         # 8-byte Reload
	movq	704(%rsp), %rcx         # 8-byte Reload
	movq	880(%rsp), %r8          # 8-byte Reload
	movq	720(%rsp), %r9          # 8-byte Reload
	movq	728(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	920(%rsp), %rax         # 8-byte Reload
	addq	$1, %rax
	movq	664(%rsp), %rdi         # 8-byte Reload
	movq	912(%rsp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	movq	704(%rsp), %rcx         # 8-byte Reload
	movq	904(%rsp), %r8          # 8-byte Reload
	movq	720(%rsp), %r9          # 8-byte Reload
	movq	728(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 600(%rsp)         # 8-byte Spill
	callq	trace_logger_log_int
	movq	648(%rsp), %rdi         # 8-byte Reload
	movq	656(%rsp), %rsi         # 8-byte Reload
	movq	688(%rsp), %rdx         # 8-byte Reload
	movq	712(%rsp), %rcx         # 8-byte Reload
	movq	888(%rsp), %r8          # 8-byte Reload
	movl	676(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	696(%rsp), %rdi         # 8-byte Reload
	movq	912(%rsp), %rsi         # 8-byte Reload
	movq	640(%rsp), %rdx         # 8-byte Reload
	movq	720(%rsp), %rcx         # 8-byte Reload
	movq	896(%rsp), %r8          # 8-byte Reload
	movq	720(%rsp), %r9          # 8-byte Reload
	movq	728(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	704(%rsp), %rdi         # 8-byte Reload
	movq	912(%rsp), %rsi         # 8-byte Reload
	movq	600(%rsp), %rdx         # 8-byte Reload
	movq	704(%rsp), %rcx         # 8-byte Reload
	movq	904(%rsp), %r8          # 8-byte Reload
	movq	720(%rsp), %r9          # 8-byte Reload
	movq	728(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	600(%rsp), %rax         # 8-byte Reload
	cmpq	$3, %rax
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ebp
	movl	%ebp, %edx
	movq	664(%rsp), %rdi         # 8-byte Reload
	movq	704(%rsp), %rsi         # 8-byte Reload
	movq	704(%rsp), %rcx         # 8-byte Reload
	movq	712(%rsp), %r8          # 8-byte Reload
	movq	720(%rsp), %r9          # 8-byte Reload
	movq	728(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 599(%rsp)          # 1-byte Spill
	callq	trace_logger_log_int
	movq	648(%rsp), %rdi         # 8-byte Reload
	movq	656(%rsp), %rsi         # 8-byte Reload
	movq	688(%rsp), %rdx         # 8-byte Reload
	movq	680(%rsp), %rcx         # 8-byte Reload
	movq	696(%rsp), %r8          # 8-byte Reload
	movl	676(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	640(%rsp), %rdi         # 8-byte Reload
	movq	720(%rsp), %rsi         # 8-byte Reload
	movq	720(%rsp), %rdx         # 8-byte Reload
	movq	704(%rsp), %rcx         # 8-byte Reload
	movq	632(%rsp), %r8          # 8-byte Reload
	movq	720(%rsp), %r9          # 8-byte Reload
	movq	728(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	696(%rsp), %rdi         # 8-byte Reload
	movq	720(%rsp), %rsi         # 8-byte Reload
	movq	720(%rsp), %rdx         # 8-byte Reload
	movq	704(%rsp), %rcx         # 8-byte Reload
	movq	688(%rsp), %r8          # 8-byte Reload
	movq	720(%rsp), %r9          # 8-byte Reload
	movq	728(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	599(%rsp), %al          # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	704(%rsp), %rdi         # 8-byte Reload
	movq	704(%rsp), %rsi         # 8-byte Reload
	movq	704(%rsp), %rcx         # 8-byte Reload
	movq	712(%rsp), %r8          # 8-byte Reload
	movq	720(%rsp), %r9          # 8-byte Reload
	movq	728(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	599(%rsp), %al          # 1-byte Reload
	testb	$1, %al
	movq	600(%rsp), %rcx         # 8-byte Reload
	movq	%rcx, 928(%rsp)         # 8-byte Spill
	jne	.LBB2_2
	jmp	.LBB2_1
.Ltmp94:
.LBB2_2:
	movabsq	$3, %rax
	movabsq	$32, %rsi
	movabsq	$0, %rcx
	leaq	.L.str8, %rdx
	leaq	.L.str9, %rdi
	movabsq	$2, %r8
	movabsq	$64, %r9
	movabsq	$1, %r10
	leaq	.L.str21, %r11
                                        # implicit-def: RBX
	movabsq	$4, %r14
	leaq	store_kernel, %r15
	leaq	.L.str44, %r12
	movabsq	$66, %r13
	leaq	.L.str75, %rbp
	movq	%rax, 584(%rsp)         # 8-byte Spill
	leaq	.L.str81, %rax
	movq	%rax, 576(%rsp)         # 8-byte Spill
	leaq	.L.str82, %rax
	movq	%rax, 568(%rsp)         # 8-byte Spill
	movabsq	$49, %rax
	movq	%rsi, 560(%rsp)         # 8-byte Spill
	movl	$0, %esi
	movl	%esi, 556(%rsp)         # 4-byte Spill
	movl	$1, %esi
	.loc	1 66 0                  # mma_test_eigen.c:66:0
	movq	%rdi, 544(%rsp)         # 8-byte Spill
	movq	%r13, %rdi
	movl	%esi, 540(%rsp)         # 4-byte Spill
	movq	%rbp, %rsi
	movq	576(%rsp), %r13         # 8-byte Reload
	movq	%rdx, 528(%rsp)         # 8-byte Spill
	movq	%r13, %rdx
	movq	568(%rsp), %rbp         # 8-byte Reload
	movq	%rcx, 520(%rsp)         # 8-byte Spill
	movq	%rbp, %rcx
	movq	%r8, 512(%rsp)          # 8-byte Spill
	movq	%rax, %r8
	movl	556(%rsp), %ebp         # 4-byte Reload
	movq	%r9, 504(%rsp)          # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r14, 496(%rsp)         # 8-byte Spill
	movq	%r15, 488(%rsp)         # 8-byte Spill
	movq	%r12, 480(%rsp)         # 8-byte Spill
	movq	%rbx, 472(%rsp)         # 8-byte Spill
	movq	%r11, 464(%rsp)         # 8-byte Spill
	movq	%r10, 456(%rsp)         # 8-byte Spill
	callq	trace_logger_log0
	movq	496(%rsp), %rdi         # 8-byte Reload
	movq	504(%rsp), %rsi         # 8-byte Reload
	movq	488(%rsp), %rdx         # 8-byte Reload
	movq	456(%rsp), %rcx         # 8-byte Reload
	movq	480(%rsp), %r8          # 8-byte Reload
	movq	520(%rsp), %r9          # 8-byte Reload
	movq	544(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	456(%rsp), %rdi         # 8-byte Reload
	movq	504(%rsp), %rsi         # 8-byte Reload
	movq	472(%rsp), %rdx         # 8-byte Reload
	movq	520(%rsp), %rcx         # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	520(%rsp), %r9          # 8-byte Reload
	movq	544(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	512(%rsp), %rdi         # 8-byte Reload
	movq	504(%rsp), %rsi         # 8-byte Reload
	movq	936(%rsp), %rdx         # 8-byte Reload
	movq	456(%rsp), %rcx         # 8-byte Reload
	movq	464(%rsp), %r8          # 8-byte Reload
	movq	520(%rsp), %r9          # 8-byte Reload
	movq	544(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	584(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	movq	584(%rsp), %rdx         # 8-byte Reload
	movq	520(%rsp), %rcx         # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	520(%rsp), %r9          # 8-byte Reload
	movq	544(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$3, %edx
                                        # implicit-def: RDI
	movq	936(%rsp), %rsi         # 8-byte Reload
	callq	store_kernel
	movabsq	$3, %rax
	movabsq	$32, %rsi
	movabsq	$0, %rcx
	leaq	.L.str8, %r8
	leaq	.L.str9, %rdi
	movabsq	$2, %r9
	movabsq	$64, %r10
	movabsq	$1, %r11
	leaq	.L.str21, %rbx
	leaq	.L.str17, %r14
	movabsq	$4, %r15
	leaq	test_stores, %rdx
	leaq	.L.str5, %r12
	movabsq	$78, %r13
	leaq	.L.str75, %rbp
	movq	%rax, 448(%rsp)         # 8-byte Spill
	leaq	.L.str81, %rax
	movq	%rax, 440(%rsp)         # 8-byte Spill
	leaq	.L.str29, %rax
	movq	%rax, 432(%rsp)         # 8-byte Spill
	movabsq	$49, %rax
	movq	%rsi, 424(%rsp)         # 8-byte Spill
	movl	$0, %esi
	movl	%esi, 420(%rsp)         # 4-byte Spill
	movl	$1, %esi
	.loc	1 78 0                  # mma_test_eigen.c:78:0
	movq	%rdi, 408(%rsp)         # 8-byte Spill
	movq	%r13, %rdi
	movl	%esi, 404(%rsp)         # 4-byte Spill
	movq	%rbp, %rsi
	movq	440(%rsp), %r13         # 8-byte Reload
	movq	%rdx, 392(%rsp)         # 8-byte Spill
	movq	%r13, %rdx
	movq	432(%rsp), %rbp         # 8-byte Reload
	movq	%rcx, 384(%rsp)         # 8-byte Spill
	movq	%rbp, %rcx
	movq	%r8, 376(%rsp)          # 8-byte Spill
	movq	%rax, %r8
	movl	420(%rsp), %ebp         # 4-byte Reload
	movq	%r9, 368(%rsp)          # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r15, 360(%rsp)         # 8-byte Spill
	movq	%r14, 352(%rsp)         # 8-byte Spill
	movq	%r12, 344(%rsp)         # 8-byte Spill
	movq	%rbx, 336(%rsp)         # 8-byte Spill
	movq	%r10, 328(%rsp)         # 8-byte Spill
	movq	%r11, 320(%rsp)         # 8-byte Spill
	callq	trace_logger_log0
	movq	360(%rsp), %rdi         # 8-byte Reload
	movq	328(%rsp), %rsi         # 8-byte Reload
	movq	392(%rsp), %rdx         # 8-byte Reload
	movq	320(%rsp), %rcx         # 8-byte Reload
	movq	344(%rsp), %r8          # 8-byte Reload
	movq	384(%rsp), %r9          # 8-byte Reload
	movq	408(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	320(%rsp), %rdi         # 8-byte Reload
	movq	328(%rsp), %rsi         # 8-byte Reload
	movq	1088(%rsp), %rdx        # 8-byte Reload
	movq	320(%rsp), %rcx         # 8-byte Reload
	movq	352(%rsp), %r8          # 8-byte Reload
	movq	384(%rsp), %r9          # 8-byte Reload
	movq	408(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	368(%rsp), %rdi         # 8-byte Reload
	movq	328(%rsp), %rsi         # 8-byte Reload
	movq	936(%rsp), %rdx         # 8-byte Reload
	movq	320(%rsp), %rcx         # 8-byte Reload
	movq	336(%rsp), %r8          # 8-byte Reload
	movq	384(%rsp), %r9          # 8-byte Reload
	movq	408(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	448(%rsp), %rdi         # 8-byte Reload
	movq	424(%rsp), %rsi         # 8-byte Reload
	movq	448(%rsp), %rdx         # 8-byte Reload
	movq	384(%rsp), %rcx         # 8-byte Reload
	movq	376(%rsp), %r8          # 8-byte Reload
	movq	384(%rsp), %r9          # 8-byte Reload
	movq	408(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$3, %edx
	movq	1088(%rsp), %rdi        # 8-byte Reload
	movq	936(%rsp), %rsi         # 8-byte Reload
	callq	test_stores
	movabsq	$2, %rdi
	movabsq	$64, %rcx
	leaq	.L.str4, %rdx
	movabsq	$0, %rsi
	leaq	.L.str8, %r8
	leaq	.L.str9, %r9
	movabsq	$1, %r10
	leaq	.L.str30, %r11
	movabsq	$3, %rbx
	leaq	fprintf, %r14
	leaq	.L.str24, %r15
	movabsq	$83, %r12
	leaq	.L.str75, %r13
	leaq	.L.str81, %rbp
	movq	%rcx, 312(%rsp)         # 8-byte Spill
	leaq	.L.str31, %rcx
	movq	%rcx, 304(%rsp)         # 8-byte Spill
	movabsq	$49, %rcx
	movl	%eax, 300(%rsp)         # 4-byte Spill
	movl	$0, %eax
	movl	%eax, 296(%rsp)         # 4-byte Spill
	movl	$1, %eax
	movq	%rcx, 288(%rsp)         # 8-byte Spill
	movabsq	$19134, %rcx            # imm = 0x4ABE
	movq	%rcx, 280(%rsp)         # 8-byte Spill
	leaq	stdout, %rcx
	movq	%rcx, 272(%rsp)         # 8-byte Spill
	leaq	.L.str18, %rcx
	movq	%rcx, 264(%rsp)         # 8-byte Spill
	movabsq	$80, %rcx
	movq	%rcx, 256(%rsp)         # 8-byte Spill
	movabsq	$27, %rcx
	movq	%rcx, 248(%rsp)         # 8-byte Spill
	movabsq	$32, %rcx
	movq	%rcx, 240(%rsp)         # 8-byte Spill
	leaq	.L.str29, %rcx
	movl	%eax, 236(%rsp)         # 4-byte Spill
	movl	300(%rsp), %eax         # 4-byte Reload
	movl	%eax, %eax
                                        # kill: RAX<def> EAX<kill>
	movq	%rax, 224(%rsp)         # 8-byte Spill
	movq	280(%rsp), %rax         # 8-byte Reload
	movq	%rdi, 216(%rsp)         # 8-byte Spill
	movq	%rax, %rdi
	movq	240(%rsp), %rax         # 8-byte Reload
	movq	%rsi, 208(%rsp)         # 8-byte Spill
	movq	%rax, %rsi
	movq	224(%rsp), %rax         # 8-byte Reload
	movq	%rdx, 200(%rsp)         # 8-byte Spill
	movq	%rax, %rdx
	movq	%rcx, 192(%rsp)         # 8-byte Spill
	movq	%r10, %rcx
	movq	192(%rsp), %rax         # 8-byte Reload
	movq	%r8, 184(%rsp)          # 8-byte Spill
	movq	%rax, %r8
	movq	208(%rsp), %rax         # 8-byte Reload
	movq	%r9, 176(%rsp)          # 8-byte Spill
	movq	%rax, %r9
	movq	176(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	movq	%rbp, 168(%rsp)         # 8-byte Spill
	movq	%r15, 160(%rsp)         # 8-byte Spill
	movq	%r12, 152(%rsp)         # 8-byte Spill
	movq	%r13, 144(%rsp)         # 8-byte Spill
	movq	%r14, 136(%rsp)         # 8-byte Spill
	movq	%rbx, 128(%rsp)         # 8-byte Spill
	movq	%r10, 120(%rsp)         # 8-byte Spill
	movq	%r11, 112(%rsp)         # 8-byte Spill
	callq	trace_logger_log_int
.Ltmp95:
	#DEBUG_VALUE: main:num_failures <- 0
	.loc	1 80 0                  # mma_test_eigen.c:80:0
	movq	256(%rsp), %rdi         # 8-byte Reload
	movq	144(%rsp), %rsi         # 8-byte Reload
	movq	168(%rsp), %rdx         # 8-byte Reload
	movq	112(%rsp), %rcx         # 8-byte Reload
	movq	248(%rsp), %r8          # 8-byte Reload
	movl	296(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	120(%rsp), %rdi         # 8-byte Reload
	movq	312(%rsp), %rsi         # 8-byte Reload
	movq	272(%rsp), %rdx         # 8-byte Reload
	movq	120(%rsp), %rcx         # 8-byte Reload
	movq	264(%rsp), %r8          # 8-byte Reload
	movq	208(%rsp), %r9          # 8-byte Reload
	movq	176(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	stdout, %rax
.Ltmp96:
	.loc	1 83 0                  # mma_test_eigen.c:83:0
	movq	280(%rsp), %rdi         # 8-byte Reload
	movq	312(%rsp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	movq	120(%rsp), %rcx         # 8-byte Reload
	movq	112(%rsp), %r8          # 8-byte Reload
	movq	208(%rsp), %r9          # 8-byte Reload
	movq	176(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 104(%rsp)         # 8-byte Spill
	callq	trace_logger_log_ptr
	movq	152(%rsp), %rdi         # 8-byte Reload
	movq	144(%rsp), %rsi         # 8-byte Reload
	movq	168(%rsp), %rdx         # 8-byte Reload
	movq	304(%rsp), %rcx         # 8-byte Reload
	movq	288(%rsp), %r8          # 8-byte Reload
	movl	296(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	128(%rsp), %rdi         # 8-byte Reload
	movq	312(%rsp), %rsi         # 8-byte Reload
	movq	136(%rsp), %rdx         # 8-byte Reload
	movq	120(%rsp), %rcx         # 8-byte Reload
	movq	160(%rsp), %r8          # 8-byte Reload
	movq	208(%rsp), %r9          # 8-byte Reload
	movq	176(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	120(%rsp), %rdi         # 8-byte Reload
	movq	312(%rsp), %rsi         # 8-byte Reload
	movq	104(%rsp), %rdx         # 8-byte Reload
	movq	120(%rsp), %rcx         # 8-byte Reload
	movq	112(%rsp), %r8          # 8-byte Reload
	movq	208(%rsp), %r9          # 8-byte Reload
	movq	176(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	216(%rsp), %rdi         # 8-byte Reload
	movq	312(%rsp), %rsi         # 8-byte Reload
	movq	200(%rsp), %rdx         # 8-byte Reload
	movq	208(%rsp), %rcx         # 8-byte Reload
	movq	184(%rsp), %r8          # 8-byte Reload
	movq	208(%rsp), %r9          # 8-byte Reload
	movq	176(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$.L.str4, %esi
                                        # kill: RSI<def> ESI<kill>
	xorl	%edi, %edi
	movb	%dil, %al
	movq	104(%rsp), %rdi         # 8-byte Reload
	callq	fprintf
	movl	$0, %esi
	movabsq	$1, %rcx
	movabsq	$32, %rdx
	movabsq	$0, %rdi
	leaq	.L.str8, %r8
	leaq	.L.str9, %r9
	movabsq	$85, %r10
	leaq	.L.str75, %r11
	leaq	.L.str81, %rbx
	leaq	.L.str83, %r14
	movl	$1, %ebp
	movabsq	$19134, %r15            # imm = 0x4ABE
	leaq	.L.str31, %r12
	.loc	1 85 0                  # mma_test_eigen.c:85:0
	movl	%eax, %eax
	movl	%eax, %r13d
	movq	%rdi, 96(%rsp)          # 8-byte Spill
	movq	%r15, %rdi
	movl	%esi, 92(%rsp)          # 4-byte Spill
	movq	%rdx, %rsi
	movq	%rdx, 80(%rsp)          # 8-byte Spill
	movq	%r13, %rdx
	movq	%rcx, 72(%rsp)          # 8-byte Spill
	movq	%r8, 64(%rsp)           # 8-byte Spill
	movq	%r12, %r8
	movq	96(%rsp), %r15          # 8-byte Reload
	movq	%r9, 56(%rsp)           # 8-byte Spill
	movq	%r15, %r9
	movq	56(%rsp), %r12          # 8-byte Reload
	movq	%r12, (%rsp)
	movq	%r10, 48(%rsp)          # 8-byte Spill
	movl	%ebp, 44(%rsp)          # 4-byte Spill
	movq	%r11, 32(%rsp)          # 8-byte Spill
	movq	%rbx, 24(%rsp)          # 8-byte Spill
	movq	%r14, 16(%rsp)          # 8-byte Spill
	callq	trace_logger_log_int
	movq	48(%rsp), %rdi          # 8-byte Reload
	movq	32(%rsp), %rsi          # 8-byte Reload
	movq	24(%rsp), %rdx          # 8-byte Reload
	movq	16(%rsp), %rcx          # 8-byte Reload
	movq	72(%rsp), %r8           # 8-byte Reload
	movl	92(%rsp), %r9d          # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	72(%rsp), %rdi          # 8-byte Reload
	movq	80(%rsp), %rsi          # 8-byte Reload
	movq	96(%rsp), %rdx          # 8-byte Reload
	movq	96(%rsp), %rcx          # 8-byte Reload
	movq	64(%rsp), %r8           # 8-byte Reload
	movq	96(%rsp), %r9           # 8-byte Reload
	movq	56(%rsp), %r10          # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	92(%rsp), %eax          # 4-byte Reload
	addq	$1352, %rsp             # imm = 0x548
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
.Ltmp97:
.Ltmp98:
	.size	main, .Ltmp98-main
.Lfunc_end2:
	.cfi_endproc

	.section	.rodata.cst16,"aM",@progbits,16
	.align	16
.LCPI3_0:
	.quad	9223372036854775807     # double nan
	.quad	9223372036854775807     # double nan
	.section	.rodata.cst8,"aM",@progbits,8
	.align	8
.LCPI3_1:
	.quad	4616189618054758400     # double 4
.LCPI3_2:
	.quad	4607182418800017408     # double 1
.LCPI3_3:
	.quad	4611686018427387904     # double 2
	.text
	.globl	pythag
	.align	16, 0x90
	.type	pythag,@function
pythag:                                 # @pythag
	.cfi_startproc
.Lfunc_begin3:
	.loc	2 70 0                  # eispack.c:70:0
# BB#0:
	pushq	%rbp
.Ltmp106:
	.cfi_def_cfa_offset 16
	pushq	%r15
.Ltmp107:
	.cfi_def_cfa_offset 24
	pushq	%r14
.Ltmp108:
	.cfi_def_cfa_offset 32
	pushq	%r13
.Ltmp109:
	.cfi_def_cfa_offset 40
	pushq	%r12
.Ltmp110:
	.cfi_def_cfa_offset 48
	pushq	%rbx
.Ltmp111:
	.cfi_def_cfa_offset 56
	subq	$1464, %rsp             # imm = 0x5B8
.Ltmp112:
	.cfi_def_cfa_offset 1520
.Ltmp113:
	.cfi_offset %rbx, -56
.Ltmp114:
	.cfi_offset %r12, -48
.Ltmp115:
	.cfi_offset %r13, -40
.Ltmp116:
	.cfi_offset %r14, -32
.Ltmp117:
	.cfi_offset %r15, -24
.Ltmp118:
	.cfi_offset %rbp, -16
	movabsq	$2, %rax
	movabsq	$64, %rcx
	movabsq	$1, %rdx
	leaq	.L.str994, %rsi
	movabsq	$0, %rdi
	leaq	.L.str792, %r8
	leaq	.L.str590, %r9
	movabsq	$3, %r10
	leaq	r8_max, %r11
	leaq	.L.str1297, %rbx
	movabsq	$77, %r14
	leaq	.L.str388, %r15
	leaq	.L.str489, %r12
	leaq	.L.str1196, %r13
	movabsq	$49, %rbp
	movq	%rsi, 1456(%rsp)        # 8-byte Spill
	movl	$0, %esi
	movl	%esi, 1452(%rsp)        # 4-byte Spill
	movl	$1, %esi
	movq	%rax, 1440(%rsp)        # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 1432(%rsp)        # 8-byte Spill
	leaq	.L.str1095, %rax
	movq	%rax, 1424(%rsp)        # 8-byte Spill
	leaq	fabs, %rax
	movq	%rax, 1416(%rsp)        # 8-byte Spill
	leaq	.L.str691, %rax
	movq	%rax, 1408(%rsp)        # 8-byte Spill
	leaq	.L.str893, %rax
	movq	%rax, 1400(%rsp)        # 8-byte Spill
	movabsq	$24601, %rax            # imm = 0x6019
	.loc	2 11 0 prologue_end     # eispack.c:11:0
.Ltmp119:
	movq	%rdi, 1392(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movl	%esi, 1388(%rsp)        # 4-byte Spill
	movq	%rcx, %rsi
	vmovsd	%xmm0, 1376(%rsp)       # 8-byte Spill
	movq	%rdx, 1368(%rsp)        # 8-byte Spill
	movq	%rax, 1360(%rsp)        # 8-byte Spill
	movq	1400(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 1352(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	1392(%rsp), %rax        # 8-byte Reload
	movq	%r8, 1344(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	1344(%rsp), %rax        # 8-byte Reload
	movq	%r9, 1336(%rsp)         # 8-byte Spill
	movq	%rax, %r9
	vmovsd	%xmm1, 1328(%rsp)       # 8-byte Spill
	movq	%r12, 1320(%rsp)        # 8-byte Spill
	movq	%r14, 1312(%rsp)        # 8-byte Spill
	movq	%r15, 1304(%rsp)        # 8-byte Spill
	movq	%r13, 1296(%rsp)        # 8-byte Spill
	movq	%rbp, 1288(%rsp)        # 8-byte Spill
	movq	%rbx, 1280(%rsp)        # 8-byte Spill
	movq	%r11, 1272(%rsp)        # 8-byte Spill
	movq	%r10, 1264(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	1360(%rsp), %rdi        # 8-byte Reload
	movq	1352(%rsp), %rsi        # 8-byte Reload
	vmovsd	1328(%rsp), %xmm0       # 8-byte Reload
	movq	1368(%rsp), %rdx        # 8-byte Reload
	movq	1424(%rsp), %rcx        # 8-byte Reload
	movq	1392(%rsp), %r8         # 8-byte Reload
	movq	1344(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	#DEBUG_VALUE: pythag:a <- [RSP+1376]
	#DEBUG_VALUE: pythag:b <- [RSP+1328]
	.loc	2 77 0                  # eispack.c:77:0
	movq	1312(%rsp), %rdi        # 8-byte Reload
	movq	1304(%rsp), %rsi        # 8-byte Reload
	movq	1320(%rsp), %rdx        # 8-byte Reload
	movq	1336(%rsp), %rcx        # 8-byte Reload
	movq	1288(%rsp), %r8         # 8-byte Reload
	movl	1452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1440(%rsp), %rdi        # 8-byte Reload
	movq	1352(%rsp), %rsi        # 8-byte Reload
	movq	1416(%rsp), %rdx        # 8-byte Reload
	movq	1368(%rsp), %rcx        # 8-byte Reload
	movq	1408(%rsp), %r8         # 8-byte Reload
	movq	1392(%rsp), %r9         # 8-byte Reload
	movq	1344(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1368(%rsp), %rdi        # 8-byte Reload
	movq	1352(%rsp), %rsi        # 8-byte Reload
	vmovsd	1376(%rsp), %xmm0       # 8-byte Reload
	movq	1368(%rsp), %rdx        # 8-byte Reload
	movq	1400(%rsp), %rcx        # 8-byte Reload
	movq	1392(%rsp), %r8         # 8-byte Reload
	movq	1344(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	.LCPI3_0(%rip), %xmm0
	vmovsd	1376(%rsp), %xmm1       # 8-byte Reload
	vandpd	%xmm0, %xmm1, %xmm0
	movq	1432(%rsp), %rdi        # 8-byte Reload
	movq	1352(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 1256(%rsp)       # 8-byte Spill
	movq	1368(%rsp), %rdx        # 8-byte Reload
	movq	1336(%rsp), %rcx        # 8-byte Reload
	movq	1392(%rsp), %r8         # 8-byte Reload
	movq	1344(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1312(%rsp), %rdi        # 8-byte Reload
	movq	1304(%rsp), %rsi        # 8-byte Reload
	movq	1320(%rsp), %rdx        # 8-byte Reload
	movq	1456(%rsp), %rcx        # 8-byte Reload
	movq	1288(%rsp), %r8         # 8-byte Reload
	movl	1452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1440(%rsp), %rdi        # 8-byte Reload
	movq	1352(%rsp), %rsi        # 8-byte Reload
	movq	1416(%rsp), %rdx        # 8-byte Reload
	movq	1368(%rsp), %rcx        # 8-byte Reload
	movq	1408(%rsp), %r8         # 8-byte Reload
	movq	1392(%rsp), %r9         # 8-byte Reload
	movq	1344(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1368(%rsp), %rdi        # 8-byte Reload
	movq	1352(%rsp), %rsi        # 8-byte Reload
	vmovsd	1328(%rsp), %xmm0       # 8-byte Reload
	movq	1368(%rsp), %rdx        # 8-byte Reload
	movq	1424(%rsp), %rcx        # 8-byte Reload
	movq	1392(%rsp), %r8         # 8-byte Reload
	movq	1344(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	.LCPI3_0(%rip), %xmm0
	vmovsd	1328(%rsp), %xmm1       # 8-byte Reload
	vandpd	%xmm0, %xmm1, %xmm0
	movq	1432(%rsp), %rdi        # 8-byte Reload
	movq	1352(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 1248(%rsp)       # 8-byte Spill
	movq	1368(%rsp), %rdx        # 8-byte Reload
	movq	1456(%rsp), %rcx        # 8-byte Reload
	movq	1392(%rsp), %r8         # 8-byte Reload
	movq	1344(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1312(%rsp), %rdi        # 8-byte Reload
	movq	1304(%rsp), %rsi        # 8-byte Reload
	movq	1320(%rsp), %rdx        # 8-byte Reload
	movq	1296(%rsp), %rcx        # 8-byte Reload
	movq	1288(%rsp), %r8         # 8-byte Reload
	movl	1452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1264(%rsp), %rdi        # 8-byte Reload
	movq	1352(%rsp), %rsi        # 8-byte Reload
	movq	1272(%rsp), %rdx        # 8-byte Reload
	movq	1368(%rsp), %rcx        # 8-byte Reload
	movq	1280(%rsp), %r8         # 8-byte Reload
	movq	1392(%rsp), %r9         # 8-byte Reload
	movq	1344(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1368(%rsp), %rdi        # 8-byte Reload
	movq	1352(%rsp), %rsi        # 8-byte Reload
	vmovsd	1256(%rsp), %xmm0       # 8-byte Reload
	movq	1368(%rsp), %rdx        # 8-byte Reload
	movq	1336(%rsp), %rcx        # 8-byte Reload
	movq	1392(%rsp), %r8         # 8-byte Reload
	movq	1344(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1440(%rsp), %rdi        # 8-byte Reload
	movq	1352(%rsp), %rsi        # 8-byte Reload
	vmovsd	1248(%rsp), %xmm0       # 8-byte Reload
	movq	1368(%rsp), %rdx        # 8-byte Reload
	movq	1456(%rsp), %rcx        # 8-byte Reload
	movq	1392(%rsp), %r8         # 8-byte Reload
	movq	1344(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	1256(%rsp), %xmm0       # 8-byte Reload
	vmovsd	1248(%rsp), %xmm1       # 8-byte Reload
	callq	r8_max
.Ltmp120:
	movabsq	$1, %rax
	leaq	.L.str1398, %rcx
	movabsq	$0, %rdx
	leaq	.L.str792, %rsi
	movabsq	$2, %rdi
	leaq	.L.str17102, %r8
	movabsq	$3, %r9
	leaq	.L.str16101, %r10
	movabsq	$79, %r11
	leaq	.L.str388, %rbx
	leaq	.L.str489, %r14
	leaq	.L.str15100, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	vxorps	%xmm1, %xmm1, %xmm1
	movq	%rax, 1240(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 1232(%rsp)        # 8-byte Spill
	leaq	.L.str1196, %rax
	movq	%rax, 1224(%rsp)        # 8-byte Spill
	leaq	.L.str1499, %rax
	movq	%rax, 1216(%rsp)        # 8-byte Spill
	movabsq	$47, %rax
	movq	%rdi, 1208(%rsp)        # 8-byte Spill
	movq	%r13, %rdi
	movq	%rax, 1200(%rsp)        # 8-byte Spill
	movq	1232(%rsp), %rax        # 8-byte Reload
	movq	%rsi, 1192(%rsp)        # 8-byte Spill
	movq	%rax, %rsi
	vmovsd	%xmm0, 1184(%rsp)       # 8-byte Spill
	movq	1240(%rsp), %rax        # 8-byte Reload
	movq	%rdx, 1176(%rsp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	1224(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 1168(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	1176(%rsp), %rax        # 8-byte Reload
	movq	%r8, 1160(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	1192(%rsp), %rax        # 8-byte Reload
	movq	%r9, 1152(%rsp)         # 8-byte Spill
	movq	%rax, %r9
	movl	%r12d, 1148(%rsp)       # 4-byte Spill
	movq	%r15, 1136(%rsp)        # 8-byte Spill
	movl	%ebp, 1132(%rsp)        # 4-byte Spill
	movq	%r13, 1120(%rsp)        # 8-byte Spill
	vmovsd	%xmm1, 1112(%rsp)       # 8-byte Spill
	movq	%r14, 1104(%rsp)        # 8-byte Spill
	movq	%rbx, 1096(%rsp)        # 8-byte Spill
	movq	%r10, 1088(%rsp)        # 8-byte Spill
	movq	%r11, 1080(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
.Ltmp121:
	#DEBUG_VALUE: pythag:p <- [RSP+1184]
	.loc	2 79 0                  # eispack.c:79:0
	movq	1080(%rsp), %rdi        # 8-byte Reload
	movq	1096(%rsp), %rsi        # 8-byte Reload
	movq	1104(%rsp), %rdx        # 8-byte Reload
	movq	1168(%rsp), %rcx        # 8-byte Reload
	movq	1200(%rsp), %r8         # 8-byte Reload
	movl	1132(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1208(%rsp), %rdi        # 8-byte Reload
	movq	1232(%rsp), %rsi        # 8-byte Reload
	vmovsd	1112(%rsp), %xmm0       # 8-byte Reload
	movq	1176(%rsp), %rdx        # 8-byte Reload
	movq	1216(%rsp), %rcx        # 8-byte Reload
	movq	1176(%rsp), %r8         # 8-byte Reload
	movq	1192(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1240(%rsp), %rdi        # 8-byte Reload
	movq	1232(%rsp), %rsi        # 8-byte Reload
	vmovsd	1184(%rsp), %xmm0       # 8-byte Reload
	movq	1240(%rsp), %rdx        # 8-byte Reload
	movq	1224(%rsp), %rcx        # 8-byte Reload
	movq	1176(%rsp), %r8         # 8-byte Reload
	movq	1192(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	1184(%rsp), %xmm0       # 8-byte Reload
	vmovsd	1112(%rsp), %xmm1       # 8-byte Reload
	vucomisd	%xmm1, %xmm0
	setne	%al
	setp	%cl
	orb	%al, %cl
	movb	%cl, %al
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	1120(%rsp), %rdi        # 8-byte Reload
	movq	1240(%rsp), %rsi        # 8-byte Reload
	movq	1240(%rsp), %r8         # 8-byte Reload
	movb	%cl, 1079(%rsp)         # 1-byte Spill
	movq	%r8, %rcx
	movq	1168(%rsp), %r8         # 8-byte Reload
	movq	1176(%rsp), %r9         # 8-byte Reload
	movq	1192(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1080(%rsp), %rdi        # 8-byte Reload
	movq	1096(%rsp), %rsi        # 8-byte Reload
	movq	1104(%rsp), %rdx        # 8-byte Reload
	movq	1136(%rsp), %rcx        # 8-byte Reload
	movq	1208(%rsp), %r8         # 8-byte Reload
	movl	1132(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1152(%rsp), %rdi        # 8-byte Reload
	movq	1176(%rsp), %rsi        # 8-byte Reload
	movq	1176(%rsp), %rdx        # 8-byte Reload
	movq	1240(%rsp), %rcx        # 8-byte Reload
	movq	1088(%rsp), %r8         # 8-byte Reload
	movq	1176(%rsp), %r9         # 8-byte Reload
	movq	1192(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1208(%rsp), %rdi        # 8-byte Reload
	movq	1176(%rsp), %rsi        # 8-byte Reload
	movq	1176(%rsp), %rdx        # 8-byte Reload
	movq	1240(%rsp), %rcx        # 8-byte Reload
	movq	1160(%rsp), %r8         # 8-byte Reload
	movq	1176(%rsp), %r9         # 8-byte Reload
	movq	1192(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	1079(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	1240(%rsp), %rdi        # 8-byte Reload
	movq	1240(%rsp), %rsi        # 8-byte Reload
	movq	1240(%rsp), %rcx        # 8-byte Reload
	movq	1168(%rsp), %r8         # 8-byte Reload
	movq	1176(%rsp), %r9         # 8-byte Reload
	movq	1192(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	1079(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	vmovsd	1184(%rsp), %xmm0       # 8-byte Reload
	vmovsd	%xmm0, 1064(%rsp)       # 8-byte Spill
	jne	.LBB3_1
	jmp	.LBB3_3
.Ltmp122:
.LBB3_1:
	movabsq	$2, %rdi
	movabsq	$64, %rax
	movabsq	$1, %rcx
	leaq	.L.str994, %rdx
	movabsq	$0, %rsi
	leaq	.L.str792, %r8
	leaq	.L.str590, %r9
	movabsq	$3, %r10
	leaq	r8_min, %r11
	leaq	.L.str19104, %rbx
	movabsq	$81, %r14
	leaq	.L.str388, %r15
	leaq	.L.str16101, %r12
	leaq	.L.str18103, %r13
	movabsq	$49, %rbp
	movq	%rsi, 1056(%rsp)        # 8-byte Spill
	movl	$0, %esi
	movl	%esi, 1052(%rsp)        # 4-byte Spill
	movl	$1, %esi
	.loc	2 81 0                  # eispack.c:81:0
.Ltmp123:
	movq	%rdi, 1040(%rsp)        # 8-byte Spill
	movq	%r14, %rdi
	movl	%esi, 1036(%rsp)        # 4-byte Spill
	movq	%r15, %rsi
	movq	%rdx, 1024(%rsp)        # 8-byte Spill
	movq	%r12, %rdx
	movq	%rcx, 1016(%rsp)        # 8-byte Spill
	movq	%r13, %rcx
	movq	%r8, 1008(%rsp)         # 8-byte Spill
	movq	%rbp, %r8
	movl	1052(%rsp), %ebp        # 4-byte Reload
	movq	%r9, 1000(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r11, 992(%rsp)         # 8-byte Spill
	movq	%rax, 984(%rsp)         # 8-byte Spill
	movq	%r10, 976(%rsp)         # 8-byte Spill
	movq	%rbx, 968(%rsp)         # 8-byte Spill
	callq	trace_logger_log0
	movq	976(%rsp), %rdi         # 8-byte Reload
	movq	984(%rsp), %rsi         # 8-byte Reload
	movq	992(%rsp), %rdx         # 8-byte Reload
	movq	1016(%rsp), %rcx        # 8-byte Reload
	movq	968(%rsp), %r8          # 8-byte Reload
	movq	1056(%rsp), %r9         # 8-byte Reload
	movq	1008(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1016(%rsp), %rdi        # 8-byte Reload
	movq	984(%rsp), %rsi         # 8-byte Reload
	vmovsd	1256(%rsp), %xmm0       # 8-byte Reload
	movq	1016(%rsp), %rdx        # 8-byte Reload
	movq	1000(%rsp), %rcx        # 8-byte Reload
	movq	1056(%rsp), %r8         # 8-byte Reload
	movq	1008(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1040(%rsp), %rdi        # 8-byte Reload
	movq	984(%rsp), %rsi         # 8-byte Reload
	vmovsd	1248(%rsp), %xmm0       # 8-byte Reload
	movq	1016(%rsp), %rdx        # 8-byte Reload
	movq	1024(%rsp), %rcx        # 8-byte Reload
	movq	1056(%rsp), %r8         # 8-byte Reload
	movq	1008(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	1256(%rsp), %xmm0       # 8-byte Reload
	vmovsd	1248(%rsp), %xmm1       # 8-byte Reload
	callq	r8_min
	movabsq	$1, %rax
	leaq	.L.str23108, %rcx
	movabsq	$0, %rdx
	leaq	.L.str792, %rsi
	movabsq	$2, %rdi
	leaq	.L.str25110, %r8
	movabsq	$3, %r9
	leaq	.L.str17102, %r10
	movabsq	$88, %r11
	leaq	.L.str388, %rbx
	leaq	.L.str16101, %r14
	leaq	.L.str24109, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 960(%rsp)         # 8-byte Spill
	movabsq	$4, %rax
	vmovsd	.LCPI3_1, %xmm1
	movq	%rax, 952(%rsp)         # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 944(%rsp)         # 8-byte Spill
	leaq	.L.str22107, %rax
	movq	%rax, 936(%rsp)         # 8-byte Spill
	leaq	.L.str1499, %rax
	movq	%rax, 928(%rsp)         # 8-byte Spill
	movabsq	$47, %rax
	movq	%rax, 920(%rsp)         # 8-byte Spill
	leaq	.L.str21106, %rax
	movq	%rax, 912(%rsp)         # 8-byte Spill
	movabsq	$86, %rax
	movq	%rax, 904(%rsp)         # 8-byte Spill
	movabsq	$9, %rax
	movq	%rax, 896(%rsp)         # 8-byte Spill
	leaq	.L.str20105, %rax
	movq	%rax, 888(%rsp)         # 8-byte Spill
	movabsq	$82, %rax
	movq	%rax, 880(%rsp)         # 8-byte Spill
	movabsq	$13, %rax
	movq	%rax, 872(%rsp)         # 8-byte Spill
	leaq	.L.str18103, %rax
	movq	%rax, 864(%rsp)         # 8-byte Spill
	leaq	.L.str1196, %rax
	movq	%rax, 856(%rsp)         # 8-byte Spill
	movabsq	$81, %rax
	movq	%rax, 848(%rsp)         # 8-byte Spill
	movabsq	$16, %rax
	movq	%rdi, 840(%rsp)         # 8-byte Spill
	movq	%r13, %rdi
	movq	%rax, 832(%rsp)         # 8-byte Spill
	movq	944(%rsp), %rax         # 8-byte Reload
	movq	%rsi, 824(%rsp)         # 8-byte Spill
	movq	%rax, %rsi
	vmovsd	%xmm0, 816(%rsp)        # 8-byte Spill
	movq	960(%rsp), %rax         # 8-byte Reload
	movq	%rdx, 808(%rsp)         # 8-byte Spill
	movq	%rax, %rdx
	movq	864(%rsp), %rax         # 8-byte Reload
	movq	%rcx, 800(%rsp)         # 8-byte Spill
	movq	%rax, %rcx
	movq	808(%rsp), %rax         # 8-byte Reload
	movq	%r8, 792(%rsp)          # 8-byte Spill
	movq	%rax, %r8
	movq	824(%rsp), %rax         # 8-byte Reload
	movq	%r9, 784(%rsp)          # 8-byte Spill
	movq	%rax, %r9
	movl	%r12d, 780(%rsp)        # 4-byte Spill
	movq	%r15, 768(%rsp)         # 8-byte Spill
	movl	%ebp, 764(%rsp)         # 4-byte Spill
	movq	%r13, 752(%rsp)         # 8-byte Spill
	vmovsd	%xmm1, 744(%rsp)        # 8-byte Spill
	movq	%r14, 736(%rsp)         # 8-byte Spill
	movq	%rbx, 728(%rsp)         # 8-byte Spill
	movq	%r10, 720(%rsp)         # 8-byte Spill
	movq	%r11, 712(%rsp)         # 8-byte Spill
	callq	trace_logger_log_double
	movq	848(%rsp), %rdi         # 8-byte Reload
	movq	728(%rsp), %rsi         # 8-byte Reload
	movq	736(%rsp), %rdx         # 8-byte Reload
	movq	888(%rsp), %rcx         # 8-byte Reload
	movq	832(%rsp), %r8          # 8-byte Reload
	movl	764(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	840(%rsp), %rdi         # 8-byte Reload
	movq	944(%rsp), %rsi         # 8-byte Reload
	vmovsd	1184(%rsp), %xmm0       # 8-byte Reload
	movq	960(%rsp), %rdx         # 8-byte Reload
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	808(%rsp), %r8          # 8-byte Reload
	movq	824(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	960(%rsp), %rdi         # 8-byte Reload
	movq	944(%rsp), %rsi         # 8-byte Reload
	vmovsd	816(%rsp), %xmm0        # 8-byte Reload
	movq	960(%rsp), %rdx         # 8-byte Reload
	movq	864(%rsp), %rcx         # 8-byte Reload
	movq	808(%rsp), %r8          # 8-byte Reload
	movq	824(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	816(%rsp), %xmm0        # 8-byte Reload
	vmovsd	1184(%rsp), %xmm1       # 8-byte Reload
	vdivsd	%xmm1, %xmm0, %xmm2
	movq	752(%rsp), %rdi         # 8-byte Reload
	movq	944(%rsp), %rsi         # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	960(%rsp), %rdx         # 8-byte Reload
	movq	888(%rsp), %rcx         # 8-byte Reload
	movq	808(%rsp), %r8          # 8-byte Reload
	movq	824(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 704(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
.Ltmp124:
	#DEBUG_VALUE: pythag:r <- [RSP+704]
	.loc	2 82 0                  # eispack.c:82:0
	movq	880(%rsp), %rdi         # 8-byte Reload
	movq	728(%rsp), %rsi         # 8-byte Reload
	movq	736(%rsp), %rdx         # 8-byte Reload
	movq	912(%rsp), %rcx         # 8-byte Reload
	movq	872(%rsp), %r8          # 8-byte Reload
	movl	764(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	840(%rsp), %rdi         # 8-byte Reload
	movq	944(%rsp), %rsi         # 8-byte Reload
	vmovsd	704(%rsp), %xmm0        # 8-byte Reload
	movq	960(%rsp), %rdx         # 8-byte Reload
	movq	888(%rsp), %rcx         # 8-byte Reload
	movq	808(%rsp), %r8          # 8-byte Reload
	movq	824(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	960(%rsp), %rdi         # 8-byte Reload
	movq	944(%rsp), %rsi         # 8-byte Reload
	vmovsd	704(%rsp), %xmm0        # 8-byte Reload
	movq	960(%rsp), %rdx         # 8-byte Reload
	movq	888(%rsp), %rcx         # 8-byte Reload
	movq	808(%rsp), %r8          # 8-byte Reload
	movq	824(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	704(%rsp), %xmm0        # 8-byte Reload
	vmulsd	%xmm0, %xmm0, %xmm1
	movq	752(%rsp), %rdi         # 8-byte Reload
	movq	944(%rsp), %rsi         # 8-byte Reload
	vmovaps	%xmm1, %xmm0
	movq	960(%rsp), %rdx         # 8-byte Reload
	movq	912(%rsp), %rcx         # 8-byte Reload
	movq	808(%rsp), %r8          # 8-byte Reload
	movq	824(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm1, 696(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
.Ltmp125:
	#DEBUG_VALUE: pythag:r <- [RSP+696]
	.loc	2 86 0                  # eispack.c:86:0
	movq	904(%rsp), %rdi         # 8-byte Reload
	movq	728(%rsp), %rsi         # 8-byte Reload
	movq	736(%rsp), %rdx         # 8-byte Reload
	movq	936(%rsp), %rcx         # 8-byte Reload
	movq	896(%rsp), %r8          # 8-byte Reload
	movl	764(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	840(%rsp), %rdi         # 8-byte Reload
	movq	944(%rsp), %rsi         # 8-byte Reload
	vmovsd	744(%rsp), %xmm0        # 8-byte Reload
	movq	808(%rsp), %rdx         # 8-byte Reload
	movq	928(%rsp), %rcx         # 8-byte Reload
	movq	808(%rsp), %r8          # 8-byte Reload
	movq	824(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	960(%rsp), %rdi         # 8-byte Reload
	movq	944(%rsp), %rsi         # 8-byte Reload
	vmovsd	696(%rsp), %xmm0        # 8-byte Reload
	movq	960(%rsp), %rdx         # 8-byte Reload
	movq	912(%rsp), %rcx         # 8-byte Reload
	movq	808(%rsp), %r8          # 8-byte Reload
	movq	824(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	696(%rsp), %xmm0        # 8-byte Reload
	vmovsd	744(%rsp), %xmm1        # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
	movq	752(%rsp), %rdi         # 8-byte Reload
	movq	944(%rsp), %rsi         # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	960(%rsp), %rdx         # 8-byte Reload
	movq	936(%rsp), %rcx         # 8-byte Reload
	movq	808(%rsp), %r8          # 8-byte Reload
	movq	824(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 688(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
.Ltmp126:
	#DEBUG_VALUE: pythag:t <- [RSP+688]
	.loc	2 88 0                  # eispack.c:88:0
	movq	712(%rsp), %rdi         # 8-byte Reload
	movq	728(%rsp), %rsi         # 8-byte Reload
	movq	736(%rsp), %rdx         # 8-byte Reload
	movq	800(%rsp), %rcx         # 8-byte Reload
	movq	920(%rsp), %r8          # 8-byte Reload
	movl	764(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	840(%rsp), %rdi         # 8-byte Reload
	movq	944(%rsp), %rsi         # 8-byte Reload
	vmovsd	744(%rsp), %xmm0        # 8-byte Reload
	movq	808(%rsp), %rdx         # 8-byte Reload
	movq	928(%rsp), %rcx         # 8-byte Reload
	movq	808(%rsp), %r8          # 8-byte Reload
	movq	824(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	960(%rsp), %rdi         # 8-byte Reload
	movq	944(%rsp), %rsi         # 8-byte Reload
	vmovsd	688(%rsp), %xmm0        # 8-byte Reload
	movq	960(%rsp), %rdx         # 8-byte Reload
	movq	936(%rsp), %rcx         # 8-byte Reload
	movq	808(%rsp), %r8          # 8-byte Reload
	movq	824(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	688(%rsp), %xmm0        # 8-byte Reload
	vmovsd	744(%rsp), %xmm1        # 8-byte Reload
	vucomisd	%xmm1, %xmm0
	sete	%al
	setnp	%cl
	andb	%al, %cl
	movb	%cl, %al
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	752(%rsp), %rdi         # 8-byte Reload
	movq	960(%rsp), %rsi         # 8-byte Reload
	movq	960(%rsp), %r8          # 8-byte Reload
	movb	%cl, 687(%rsp)          # 1-byte Spill
	movq	%r8, %rcx
	movq	800(%rsp), %r8          # 8-byte Reload
	movq	808(%rsp), %r9          # 8-byte Reload
	movq	824(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	712(%rsp), %rdi         # 8-byte Reload
	movq	728(%rsp), %rsi         # 8-byte Reload
	movq	736(%rsp), %rdx         # 8-byte Reload
	movq	768(%rsp), %rcx         # 8-byte Reload
	movq	840(%rsp), %r8          # 8-byte Reload
	movl	764(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	784(%rsp), %rdi         # 8-byte Reload
	movq	808(%rsp), %rsi         # 8-byte Reload
	movq	808(%rsp), %rdx         # 8-byte Reload
	movq	960(%rsp), %rcx         # 8-byte Reload
	movq	720(%rsp), %r8          # 8-byte Reload
	movq	808(%rsp), %r9          # 8-byte Reload
	movq	824(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	840(%rsp), %rdi         # 8-byte Reload
	movq	808(%rsp), %rsi         # 8-byte Reload
	movq	808(%rsp), %rdx         # 8-byte Reload
	movq	960(%rsp), %rcx         # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	808(%rsp), %r9          # 8-byte Reload
	movq	824(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	687(%rsp), %al          # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	960(%rsp), %rdi         # 8-byte Reload
	movq	960(%rsp), %rsi         # 8-byte Reload
	movq	960(%rsp), %rcx         # 8-byte Reload
	movq	800(%rsp), %r8          # 8-byte Reload
	movq	808(%rsp), %r9          # 8-byte Reload
	movq	824(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	687(%rsp), %al          # 1-byte Reload
	testb	$1, %al
	vmovsd	688(%rsp), %xmm0        # 8-byte Reload
	vmovsd	1184(%rsp), %xmm1       # 8-byte Reload
	vmovsd	696(%rsp), %xmm2        # 8-byte Reload
	vmovsd	1184(%rsp), %xmm3       # 8-byte Reload
	vmovsd	%xmm0, 672(%rsp)        # 8-byte Spill
	vmovsd	%xmm1, 664(%rsp)        # 8-byte Spill
	vmovsd	%xmm2, 656(%rsp)        # 8-byte Spill
	vmovsd	%xmm3, 1064(%rsp)       # 8-byte Spill
	jne	.LBB3_3
.Ltmp127:
.LBB3_2:                                # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	vmovsd	656(%rsp), %xmm0        # 8-byte Reload
	vmovsd	664(%rsp), %xmm1        # 8-byte Reload
	vmovsd	672(%rsp), %xmm2        # 8-byte Reload
	movabsq	$1, %rax
	leaq	.L.str37122, %rcx
	movabsq	$0, %rdx
	leaq	.L.str792, %rsi
	movabsq	$2, %rdi
	leaq	.L.str25110, %r8
	movabsq	$3, %r9
	leaq	.L.str17102, %r10
	movabsq	$88, %r11
	leaq	.L.str388, %rbx
	leaq	.L.str38123, %r14
	movl	$0, %ebp
	movl	$1, %r15d
	movabsq	$19134, %r12            # imm = 0x4ABE
	movabsq	$4, %r13
	vmovsd	.LCPI3_1, %xmm3
	movq	%rax, 648(%rsp)         # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 640(%rsp)         # 8-byte Spill
	leaq	.L.str27112, %rax
	movq	%rax, 632(%rsp)         # 8-byte Spill
	leaq	.L.str1499, %rax
	movq	%rax, 624(%rsp)         # 8-byte Spill
	movabsq	$47, %rax
	movq	%rax, 616(%rsp)         # 8-byte Spill
	leaq	.L.str31116, %rax
	movq	%rax, 608(%rsp)         # 8-byte Spill
	movabsq	$86, %rax
	movq	%rax, 600(%rsp)         # 8-byte Spill
	movabsq	$9, %rax
	movq	%rax, 592(%rsp)         # 8-byte Spill
	leaq	.L.str30115, %rax
	movq	%rax, 584(%rsp)         # 8-byte Spill
	leaq	.L.str36121, %rax
	movq	%rax, 576(%rsp)         # 8-byte Spill
	movabsq	$96, %rax
	movq	%rax, 568(%rsp)         # 8-byte Spill
	movabsq	$13, %rax
	movq	%rax, 560(%rsp)         # 8-byte Spill
	leaq	.L.str35120, %rax
	movq	%rax, 552(%rsp)         # 8-byte Spill
	leaq	.L.str32117, %rax
	movq	%rax, 544(%rsp)         # 8-byte Spill
	leaq	.L.str34119, %rax
	movq	%rax, 536(%rsp)         # 8-byte Spill
	movabsq	$16, %rax
	movq	%rax, 528(%rsp)         # 8-byte Spill
	leaq	.L.str29114, %rax
	movq	%rax, 520(%rsp)         # 8-byte Spill
	leaq	.L.str28113, %rax
	movq	%rax, 512(%rsp)         # 8-byte Spill
	movabsq	$95, %rax
	vmovsd	.LCPI3_2, %xmm4
	movq	%rax, 504(%rsp)         # 8-byte Spill
	leaq	.L.str33118, %rax
	movq	%rax, 496(%rsp)         # 8-byte Spill
	movabsq	$94, %rax
	vmovsd	.LCPI3_3, %xmm5
	movq	%rax, 488(%rsp)         # 8-byte Spill
	leaq	.L.str26111, %rax
	movq	%rax, 480(%rsp)         # 8-byte Spill
	movabsq	$93, %rax
	movq	%rax, 472(%rsp)         # 8-byte Spill
	leaq	.L.str21106, %rax
	movq	%rax, 464(%rsp)         # 8-byte Spill
	leaq	.L.str16101, %rax
	movq	%rax, 456(%rsp)         # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 448(%rsp)         # 8-byte Spill
	movabsq	$48, %rax
	movq	%rax, 440(%rsp)         # 8-byte Spill
	leaq	.L.str1196, %rax
	movq	%rax, 432(%rsp)         # 8-byte Spill
	leaq	.L.str22107, %rax
	.loc	2 93 0                  # eispack.c:93:0
	movq	%rax, 424(%rsp)         # 8-byte Spill
	movq	448(%rsp), %rax         # 8-byte Reload
	movq	%rdi, 416(%rsp)         # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 408(%rsp)         # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, 400(%rsp)         # 8-byte Spill
	movq	%r8, %rdx
	movq	480(%rsp), %rax         # 8-byte Reload
	movq	%rcx, 392(%rsp)         # 8-byte Spill
	movq	%rax, %rcx
	movq	440(%rsp), %rax         # 8-byte Reload
	movq	%r8, 384(%rsp)          # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 376(%rsp)          # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	vmovsd	%xmm0, 368(%rsp)        # 8-byte Spill
	vmovsd	%xmm1, 360(%rsp)        # 8-byte Spill
	vmovsd	%xmm2, 352(%rsp)        # 8-byte Spill
	movq	%r13, 344(%rsp)         # 8-byte Spill
	vmovsd	%xmm3, 336(%rsp)        # 8-byte Spill
	vmovsd	%xmm4, 328(%rsp)        # 8-byte Spill
	vmovsd	%xmm5, 320(%rsp)        # 8-byte Spill
	movq	%r12, 312(%rsp)         # 8-byte Spill
	movl	%r15d, 308(%rsp)        # 4-byte Spill
	movq	%r10, 296(%rsp)         # 8-byte Spill
	movq	%r11, 288(%rsp)         # 8-byte Spill
	movq	%rbx, 280(%rsp)         # 8-byte Spill
	movq	%r14, 272(%rsp)         # 8-byte Spill
	movl	%ebp, 268(%rsp)         # 4-byte Spill
	callq	trace_logger_log0
	movq	416(%rsp), %rdi         # 8-byte Reload
	movq	640(%rsp), %rsi         # 8-byte Reload
	movq	400(%rsp), %rdx         # 8-byte Reload
	movq	648(%rsp), %rcx         # 8-byte Reload
	movq	424(%rsp), %r8          # 8-byte Reload
	movq	648(%rsp), %r9          # 8-byte Reload
	movq	456(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	648(%rsp), %rdi         # 8-byte Reload
	movq	640(%rsp), %rsi         # 8-byte Reload
	movq	400(%rsp), %rdx         # 8-byte Reload
	movq	648(%rsp), %rcx         # 8-byte Reload
	movq	632(%rsp), %r8          # 8-byte Reload
	movq	648(%rsp), %r9          # 8-byte Reload
	movq	384(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	312(%rsp), %rdi         # 8-byte Reload
	movq	640(%rsp), %rsi         # 8-byte Reload
	vmovsd	352(%rsp), %xmm0        # 8-byte Reload
	movq	648(%rsp), %rdx         # 8-byte Reload
	movq	480(%rsp), %rcx         # 8-byte Reload
	movq	400(%rsp), %r8          # 8-byte Reload
	movq	384(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	448(%rsp), %rdi         # 8-byte Reload
	movq	280(%rsp), %rsi         # 8-byte Reload
	movq	384(%rsp), %rdx         # 8-byte Reload
	movq	512(%rsp), %rcx         # 8-byte Reload
	movq	440(%rsp), %r8          # 8-byte Reload
	movl	268(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	416(%rsp), %rdi         # 8-byte Reload
	movq	640(%rsp), %rsi         # 8-byte Reload
	movq	400(%rsp), %rdx         # 8-byte Reload
	movq	648(%rsp), %rcx         # 8-byte Reload
	movq	432(%rsp), %r8          # 8-byte Reload
	movq	648(%rsp), %r9          # 8-byte Reload
	movq	456(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	648(%rsp), %rdi         # 8-byte Reload
	movq	640(%rsp), %rsi         # 8-byte Reload
	movq	400(%rsp), %rdx         # 8-byte Reload
	movq	648(%rsp), %rcx         # 8-byte Reload
	movq	520(%rsp), %r8          # 8-byte Reload
	movq	648(%rsp), %r9          # 8-byte Reload
	movq	384(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	312(%rsp), %rdi         # 8-byte Reload
	movq	640(%rsp), %rsi         # 8-byte Reload
	vmovsd	360(%rsp), %xmm0        # 8-byte Reload
	movq	648(%rsp), %rdx         # 8-byte Reload
	movq	512(%rsp), %rcx         # 8-byte Reload
	movq	400(%rsp), %r8          # 8-byte Reload
	movq	384(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	448(%rsp), %rdi         # 8-byte Reload
	movq	280(%rsp), %rsi         # 8-byte Reload
	movq	384(%rsp), %rdx         # 8-byte Reload
	movq	584(%rsp), %rcx         # 8-byte Reload
	movq	440(%rsp), %r8          # 8-byte Reload
	movl	268(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	416(%rsp), %rdi         # 8-byte Reload
	movq	640(%rsp), %rsi         # 8-byte Reload
	movq	400(%rsp), %rdx         # 8-byte Reload
	movq	648(%rsp), %rcx         # 8-byte Reload
	movq	464(%rsp), %r8          # 8-byte Reload
	movq	648(%rsp), %r9          # 8-byte Reload
	movq	456(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	648(%rsp), %rdi         # 8-byte Reload
	movq	640(%rsp), %rsi         # 8-byte Reload
	movq	400(%rsp), %rdx         # 8-byte Reload
	movq	648(%rsp), %rcx         # 8-byte Reload
	movq	608(%rsp), %r8          # 8-byte Reload
	movq	648(%rsp), %r9          # 8-byte Reload
	movq	384(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	312(%rsp), %rdi         # 8-byte Reload
	movq	640(%rsp), %rsi         # 8-byte Reload
	vmovsd	368(%rsp), %xmm0        # 8-byte Reload
	movq	648(%rsp), %rdx         # 8-byte Reload
	movq	584(%rsp), %rcx         # 8-byte Reload
	movq	400(%rsp), %r8          # 8-byte Reload
	movq	384(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	472(%rsp), %rdi         # 8-byte Reload
	movq	280(%rsp), %rsi         # 8-byte Reload
	movq	384(%rsp), %rdx         # 8-byte Reload
	movq	544(%rsp), %rcx         # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movl	268(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	416(%rsp), %rdi         # 8-byte Reload
	movq	640(%rsp), %rsi         # 8-byte Reload
	vmovsd	352(%rsp), %xmm0        # 8-byte Reload
	movq	648(%rsp), %rdx         # 8-byte Reload
	movq	480(%rsp), %rcx         # 8-byte Reload
	movq	400(%rsp), %r8          # 8-byte Reload
	movq	408(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	648(%rsp), %rdi         # 8-byte Reload
	movq	640(%rsp), %rsi         # 8-byte Reload
	vmovsd	368(%rsp), %xmm0        # 8-byte Reload
	movq	648(%rsp), %rdx         # 8-byte Reload
	movq	584(%rsp), %rcx         # 8-byte Reload
	movq	400(%rsp), %r8          # 8-byte Reload
	movq	408(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	368(%rsp), %xmm0        # 8-byte Reload
	vmovsd	352(%rsp), %xmm1        # 8-byte Reload
	vdivsd	%xmm1, %xmm0, %xmm2
	movq	312(%rsp), %rdi         # 8-byte Reload
	movq	640(%rsp), %rsi         # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	648(%rsp), %rdx         # 8-byte Reload
	movq	544(%rsp), %rcx         # 8-byte Reload
	movq	400(%rsp), %r8          # 8-byte Reload
	movq	408(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 256(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
.Ltmp128:
	#DEBUG_VALUE: pythag:s <- [RSP+256]
	.loc	2 94 0                  # eispack.c:94:0
	movq	488(%rsp), %rdi         # 8-byte Reload
	movq	280(%rsp), %rsi         # 8-byte Reload
	movq	384(%rsp), %rdx         # 8-byte Reload
	movq	496(%rsp), %rcx         # 8-byte Reload
	movq	560(%rsp), %r8          # 8-byte Reload
	movl	268(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	416(%rsp), %rdi         # 8-byte Reload
	movq	640(%rsp), %rsi         # 8-byte Reload
	vmovsd	320(%rsp), %xmm0        # 8-byte Reload
	movq	400(%rsp), %rdx         # 8-byte Reload
	movq	624(%rsp), %rcx         # 8-byte Reload
	movq	400(%rsp), %r8          # 8-byte Reload
	movq	408(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	648(%rsp), %rdi         # 8-byte Reload
	movq	640(%rsp), %rsi         # 8-byte Reload
	vmovsd	256(%rsp), %xmm0        # 8-byte Reload
	movq	648(%rsp), %rdx         # 8-byte Reload
	movq	544(%rsp), %rcx         # 8-byte Reload
	movq	400(%rsp), %r8          # 8-byte Reload
	movq	408(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	256(%rsp), %xmm0        # 8-byte Reload
	vmovsd	320(%rsp), %xmm1        # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	312(%rsp), %rdi         # 8-byte Reload
	movq	640(%rsp), %rsi         # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	648(%rsp), %rdx         # 8-byte Reload
	movq	496(%rsp), %rcx         # 8-byte Reload
	movq	400(%rsp), %r8          # 8-byte Reload
	movq	408(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 248(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	488(%rsp), %rdi         # 8-byte Reload
	movq	280(%rsp), %rsi         # 8-byte Reload
	movq	384(%rsp), %rdx         # 8-byte Reload
	movq	536(%rsp), %rcx         # 8-byte Reload
	movq	592(%rsp), %r8          # 8-byte Reload
	movl	268(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	416(%rsp), %rdi         # 8-byte Reload
	movq	640(%rsp), %rsi         # 8-byte Reload
	vmovsd	328(%rsp), %xmm0        # 8-byte Reload
	movq	400(%rsp), %rdx         # 8-byte Reload
	movq	624(%rsp), %rcx         # 8-byte Reload
	movq	400(%rsp), %r8          # 8-byte Reload
	movq	408(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	648(%rsp), %rdi         # 8-byte Reload
	movq	640(%rsp), %rsi         # 8-byte Reload
	vmovsd	248(%rsp), %xmm0        # 8-byte Reload
	movq	648(%rsp), %rdx         # 8-byte Reload
	movq	496(%rsp), %rcx         # 8-byte Reload
	movq	400(%rsp), %r8          # 8-byte Reload
	movq	408(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	248(%rsp), %xmm0        # 8-byte Reload
	vmovsd	328(%rsp), %xmm1        # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
	movq	312(%rsp), %rdi         # 8-byte Reload
	movq	640(%rsp), %rsi         # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	648(%rsp), %rdx         # 8-byte Reload
	movq	536(%rsp), %rcx         # 8-byte Reload
	movq	400(%rsp), %r8          # 8-byte Reload
	movq	408(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 240(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
.Ltmp129:
	#DEBUG_VALUE: pythag:u <- [RSP+240]
	.loc	2 95 0                  # eispack.c:95:0
	movq	504(%rsp), %rdi         # 8-byte Reload
	movq	280(%rsp), %rsi         # 8-byte Reload
	movq	384(%rsp), %rdx         # 8-byte Reload
	movq	520(%rsp), %rcx         # 8-byte Reload
	movq	560(%rsp), %r8          # 8-byte Reload
	movl	268(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	416(%rsp), %rdi         # 8-byte Reload
	movq	640(%rsp), %rsi         # 8-byte Reload
	vmovsd	240(%rsp), %xmm0        # 8-byte Reload
	movq	648(%rsp), %rdx         # 8-byte Reload
	movq	536(%rsp), %rcx         # 8-byte Reload
	movq	400(%rsp), %r8          # 8-byte Reload
	movq	408(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	648(%rsp), %rdi         # 8-byte Reload
	movq	640(%rsp), %rsi         # 8-byte Reload
	vmovsd	360(%rsp), %xmm0        # 8-byte Reload
	movq	648(%rsp), %rdx         # 8-byte Reload
	movq	512(%rsp), %rcx         # 8-byte Reload
	movq	400(%rsp), %r8          # 8-byte Reload
	movq	408(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	360(%rsp), %xmm0        # 8-byte Reload
	vmovsd	240(%rsp), %xmm1        # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	312(%rsp), %rdi         # 8-byte Reload
	movq	640(%rsp), %rsi         # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	648(%rsp), %rdx         # 8-byte Reload
	movq	520(%rsp), %rcx         # 8-byte Reload
	movq	400(%rsp), %r8          # 8-byte Reload
	movq	408(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 232(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
.Ltmp130:
	#DEBUG_VALUE: pythag:p <- [RSP+232]
	.loc	2 96 0                  # eispack.c:96:0
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	280(%rsp), %rsi         # 8-byte Reload
	movq	384(%rsp), %rdx         # 8-byte Reload
	movq	552(%rsp), %rcx         # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movl	268(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	416(%rsp), %rdi         # 8-byte Reload
	movq	640(%rsp), %rsi         # 8-byte Reload
	vmovsd	240(%rsp), %xmm0        # 8-byte Reload
	movq	648(%rsp), %rdx         # 8-byte Reload
	movq	536(%rsp), %rcx         # 8-byte Reload
	movq	400(%rsp), %r8          # 8-byte Reload
	movq	408(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	648(%rsp), %rdi         # 8-byte Reload
	movq	640(%rsp), %rsi         # 8-byte Reload
	vmovsd	256(%rsp), %xmm0        # 8-byte Reload
	movq	648(%rsp), %rdx         # 8-byte Reload
	movq	544(%rsp), %rcx         # 8-byte Reload
	movq	400(%rsp), %r8          # 8-byte Reload
	movq	408(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	256(%rsp), %xmm0        # 8-byte Reload
	vmovsd	240(%rsp), %xmm1        # 8-byte Reload
	vdivsd	%xmm1, %xmm0, %xmm2
	movq	312(%rsp), %rdi         # 8-byte Reload
	movq	640(%rsp), %rsi         # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	648(%rsp), %rdx         # 8-byte Reload
	movq	552(%rsp), %rcx         # 8-byte Reload
	movq	400(%rsp), %r8          # 8-byte Reload
	movq	408(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 224(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	280(%rsp), %rsi         # 8-byte Reload
	movq	384(%rsp), %rdx         # 8-byte Reload
	movq	576(%rsp), %rcx         # 8-byte Reload
	movq	560(%rsp), %r8          # 8-byte Reload
	movl	268(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	416(%rsp), %rdi         # 8-byte Reload
	movq	640(%rsp), %rsi         # 8-byte Reload
	vmovsd	224(%rsp), %xmm0        # 8-byte Reload
	movq	648(%rsp), %rdx         # 8-byte Reload
	movq	552(%rsp), %rcx         # 8-byte Reload
	movq	400(%rsp), %r8          # 8-byte Reload
	movq	408(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	648(%rsp), %rdi         # 8-byte Reload
	movq	640(%rsp), %rsi         # 8-byte Reload
	vmovsd	224(%rsp), %xmm0        # 8-byte Reload
	movq	648(%rsp), %rdx         # 8-byte Reload
	movq	552(%rsp), %rcx         # 8-byte Reload
	movq	400(%rsp), %r8          # 8-byte Reload
	movq	408(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	224(%rsp), %xmm0        # 8-byte Reload
	vmulsd	%xmm0, %xmm0, %xmm1
	movq	312(%rsp), %rdi         # 8-byte Reload
	movq	640(%rsp), %rsi         # 8-byte Reload
	vmovaps	%xmm1, %xmm0
	movq	648(%rsp), %rdx         # 8-byte Reload
	movq	576(%rsp), %rcx         # 8-byte Reload
	movq	400(%rsp), %r8          # 8-byte Reload
	movq	408(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm1, 216(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	280(%rsp), %rsi         # 8-byte Reload
	movq	384(%rsp), %rdx         # 8-byte Reload
	movq	608(%rsp), %rcx         # 8-byte Reload
	movq	560(%rsp), %r8          # 8-byte Reload
	movl	268(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	416(%rsp), %rdi         # 8-byte Reload
	movq	640(%rsp), %rsi         # 8-byte Reload
	vmovsd	216(%rsp), %xmm0        # 8-byte Reload
	movq	648(%rsp), %rdx         # 8-byte Reload
	movq	576(%rsp), %rcx         # 8-byte Reload
	movq	400(%rsp), %r8          # 8-byte Reload
	movq	408(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	648(%rsp), %rdi         # 8-byte Reload
	movq	640(%rsp), %rsi         # 8-byte Reload
	vmovsd	368(%rsp), %xmm0        # 8-byte Reload
	movq	648(%rsp), %rdx         # 8-byte Reload
	movq	584(%rsp), %rcx         # 8-byte Reload
	movq	400(%rsp), %r8          # 8-byte Reload
	movq	408(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	368(%rsp), %xmm0        # 8-byte Reload
	vmovsd	216(%rsp), %xmm1        # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	312(%rsp), %rdi         # 8-byte Reload
	movq	640(%rsp), %rsi         # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	648(%rsp), %rdx         # 8-byte Reload
	movq	608(%rsp), %rcx         # 8-byte Reload
	movq	400(%rsp), %r8          # 8-byte Reload
	movq	408(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 208(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
.Ltmp131:
	#DEBUG_VALUE: pythag:r <- [RSP+208]
	.loc	2 86 0                  # eispack.c:86:0
	movq	600(%rsp), %rdi         # 8-byte Reload
	movq	280(%rsp), %rsi         # 8-byte Reload
	movq	384(%rsp), %rdx         # 8-byte Reload
	movq	632(%rsp), %rcx         # 8-byte Reload
	movq	592(%rsp), %r8          # 8-byte Reload
	movl	268(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	416(%rsp), %rdi         # 8-byte Reload
	movq	640(%rsp), %rsi         # 8-byte Reload
	vmovsd	336(%rsp), %xmm0        # 8-byte Reload
	movq	400(%rsp), %rdx         # 8-byte Reload
	movq	624(%rsp), %rcx         # 8-byte Reload
	movq	400(%rsp), %r8          # 8-byte Reload
	movq	408(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	648(%rsp), %rdi         # 8-byte Reload
	movq	640(%rsp), %rsi         # 8-byte Reload
	vmovsd	208(%rsp), %xmm0        # 8-byte Reload
	movq	648(%rsp), %rdx         # 8-byte Reload
	movq	608(%rsp), %rcx         # 8-byte Reload
	movq	400(%rsp), %r8          # 8-byte Reload
	movq	408(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	208(%rsp), %xmm0        # 8-byte Reload
	vmovsd	336(%rsp), %xmm1        # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
	movq	312(%rsp), %rdi         # 8-byte Reload
	movq	640(%rsp), %rsi         # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	648(%rsp), %rdx         # 8-byte Reload
	movq	632(%rsp), %rcx         # 8-byte Reload
	movq	400(%rsp), %r8          # 8-byte Reload
	movq	408(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 200(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
.Ltmp132:
	#DEBUG_VALUE: pythag:t <- [RSP+352]
	.loc	2 88 0                  # eispack.c:88:0
	movq	288(%rsp), %rdi         # 8-byte Reload
	movq	280(%rsp), %rsi         # 8-byte Reload
	movq	384(%rsp), %rdx         # 8-byte Reload
	movq	392(%rsp), %rcx         # 8-byte Reload
	movq	616(%rsp), %r8          # 8-byte Reload
	movl	268(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	416(%rsp), %rdi         # 8-byte Reload
	movq	640(%rsp), %rsi         # 8-byte Reload
	vmovsd	336(%rsp), %xmm0        # 8-byte Reload
	movq	400(%rsp), %rdx         # 8-byte Reload
	movq	624(%rsp), %rcx         # 8-byte Reload
	movq	400(%rsp), %r8          # 8-byte Reload
	movq	408(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	648(%rsp), %rdi         # 8-byte Reload
	movq	640(%rsp), %rsi         # 8-byte Reload
	vmovsd	200(%rsp), %xmm0        # 8-byte Reload
	movq	648(%rsp), %rdx         # 8-byte Reload
	movq	632(%rsp), %rcx         # 8-byte Reload
	movq	400(%rsp), %r8          # 8-byte Reload
	movq	408(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	200(%rsp), %xmm0        # 8-byte Reload
	vmovsd	336(%rsp), %xmm1        # 8-byte Reload
	vucomisd	%xmm1, %xmm0
	sete	%al
	setnp	%cl
	andb	%al, %cl
	movb	%cl, %al
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	312(%rsp), %rdi         # 8-byte Reload
	movq	648(%rsp), %rsi         # 8-byte Reload
	movq	648(%rsp), %r8          # 8-byte Reload
	movb	%cl, 199(%rsp)          # 1-byte Spill
	movq	%r8, %rcx
	movq	392(%rsp), %r8          # 8-byte Reload
	movq	400(%rsp), %r9          # 8-byte Reload
	movq	408(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	288(%rsp), %rdi         # 8-byte Reload
	movq	280(%rsp), %rsi         # 8-byte Reload
	movq	384(%rsp), %rdx         # 8-byte Reload
	movq	272(%rsp), %rcx         # 8-byte Reload
	movq	416(%rsp), %r8          # 8-byte Reload
	movl	268(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	376(%rsp), %rdi         # 8-byte Reload
	movq	400(%rsp), %rsi         # 8-byte Reload
	movq	400(%rsp), %rdx         # 8-byte Reload
	movq	648(%rsp), %rcx         # 8-byte Reload
	movq	296(%rsp), %r8          # 8-byte Reload
	movq	400(%rsp), %r9          # 8-byte Reload
	movq	408(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	416(%rsp), %rdi         # 8-byte Reload
	movq	400(%rsp), %rsi         # 8-byte Reload
	movq	400(%rsp), %rdx         # 8-byte Reload
	movq	648(%rsp), %rcx         # 8-byte Reload
	movq	384(%rsp), %r8          # 8-byte Reload
	movq	400(%rsp), %r9          # 8-byte Reload
	movq	408(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	199(%rsp), %al          # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	648(%rsp), %rdi         # 8-byte Reload
	movq	648(%rsp), %rsi         # 8-byte Reload
	movq	648(%rsp), %rcx         # 8-byte Reload
	movq	392(%rsp), %r8          # 8-byte Reload
	movq	400(%rsp), %r9          # 8-byte Reload
	movq	408(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	199(%rsp), %al          # 1-byte Reload
	testb	$1, %al
	vmovsd	200(%rsp), %xmm0        # 8-byte Reload
	vmovsd	232(%rsp), %xmm1        # 8-byte Reload
	vmovsd	208(%rsp), %xmm2        # 8-byte Reload
	vmovsd	232(%rsp), %xmm3        # 8-byte Reload
	vmovsd	%xmm0, 672(%rsp)        # 8-byte Spill
	vmovsd	%xmm1, 664(%rsp)        # 8-byte Spill
	vmovsd	%xmm2, 656(%rsp)        # 8-byte Spill
	vmovsd	%xmm3, 1064(%rsp)       # 8-byte Spill
	jne	.LBB3_3
	jmp	.LBB3_2
.Ltmp133:
.LBB3_3:                                # %.loopexit
	vmovsd	1064(%rsp), %xmm0       # 8-byte Reload
	movabsq	$1, %rax
	movabsq	$64, %rcx
	leaq	.L.str39124, %rdx
	movabsq	$0, %rsi
	leaq	.L.str792, %r9
	movabsq	$99, %rdi
	leaq	.L.str388, %r8
	leaq	.L.str17102, %r10
	leaq	.L.str40125, %r11
	movl	$0, %ebx
	movl	$1, %ebp
	movabsq	$19134, %r14            # imm = 0x4ABE
	leaq	.L.str489, %r15
	leaq	.L.str1196, %r12
	movabsq	$2, %r13
	movq	%rax, 184(%rsp)         # 8-byte Spill
	leaq	.L.str16101, %rax
	movq	%rax, 176(%rsp)         # 8-byte Spill
	movabsq	$3, %rax
	movq	%rax, 168(%rsp)         # 8-byte Spill
	leaq	.L.str29114, %rax
	movq	%rax, 160(%rsp)         # 8-byte Spill
	leaq	.L.str25110, %rax
	movq	%rax, 152(%rsp)         # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 144(%rsp)         # 8-byte Spill
	movabsq	$48, %rax
	.loc	2 99 0                  # eispack.c:99:0
	movq	%rax, 136(%rsp)         # 8-byte Spill
	movq	144(%rsp), %rax         # 8-byte Reload
	movq	%rdi, 128(%rsp)         # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 120(%rsp)         # 8-byte Spill
	movq	%r8, %rsi
	movq	%rdx, 112(%rsp)         # 8-byte Spill
	movq	%r10, %rdx
	movq	112(%rsp), %rax         # 8-byte Reload
	movq	%rcx, 104(%rsp)         # 8-byte Spill
	movq	%rax, %rcx
	movq	136(%rsp), %rax         # 8-byte Reload
	movq	%r8, 96(%rsp)           # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 88(%rsp)           # 8-byte Spill
	movl	%ebx, %r9d
	movl	$1, (%rsp)
	vmovsd	%xmm0, 80(%rsp)         # 8-byte Spill
	movq	%r14, 72(%rsp)          # 8-byte Spill
	movq	%r15, 64(%rsp)          # 8-byte Spill
	movq	%r12, 56(%rsp)          # 8-byte Spill
	movl	%ebx, 52(%rsp)          # 4-byte Spill
	movq	%r13, 40(%rsp)          # 8-byte Spill
	movl	%ebp, 36(%rsp)          # 4-byte Spill
	movq	%r10, 24(%rsp)          # 8-byte Spill
	movq	%r11, 16(%rsp)          # 8-byte Spill
	callq	trace_logger_log0
	movq	168(%rsp), %rdi         # 8-byte Reload
	movq	104(%rsp), %rsi         # 8-byte Reload
	movq	120(%rsp), %rdx         # 8-byte Reload
	movq	184(%rsp), %rcx         # 8-byte Reload
	movq	160(%rsp), %r8          # 8-byte Reload
	movq	184(%rsp), %r9          # 8-byte Reload
	movq	152(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	40(%rsp), %rdi          # 8-byte Reload
	movq	104(%rsp), %rsi         # 8-byte Reload
	movq	120(%rsp), %rdx         # 8-byte Reload
	movq	184(%rsp), %rcx         # 8-byte Reload
	movq	56(%rsp), %r8           # 8-byte Reload
	movq	184(%rsp), %r9          # 8-byte Reload
	movq	176(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	184(%rsp), %rdi         # 8-byte Reload
	movq	104(%rsp), %rsi         # 8-byte Reload
	movq	120(%rsp), %rdx         # 8-byte Reload
	movq	184(%rsp), %rcx         # 8-byte Reload
	movq	56(%rsp), %r8           # 8-byte Reload
	movq	184(%rsp), %r9          # 8-byte Reload
	movq	64(%rsp), %rax          # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	72(%rsp), %rdi          # 8-byte Reload
	movq	104(%rsp), %rsi         # 8-byte Reload
	vmovsd	80(%rsp), %xmm0         # 8-byte Reload
	movq	184(%rsp), %rdx         # 8-byte Reload
	movq	112(%rsp), %rcx         # 8-byte Reload
	movq	120(%rsp), %r8          # 8-byte Reload
	movq	64(%rsp), %r9           # 8-byte Reload
	callq	trace_logger_log_double
	movq	128(%rsp), %rdi         # 8-byte Reload
	movq	96(%rsp), %rsi          # 8-byte Reload
	movq	24(%rsp), %rdx          # 8-byte Reload
	movq	16(%rsp), %rcx          # 8-byte Reload
	movq	184(%rsp), %r8          # 8-byte Reload
	movl	52(%rsp), %r9d          # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	184(%rsp), %rdi         # 8-byte Reload
	movq	104(%rsp), %rsi         # 8-byte Reload
	vmovsd	80(%rsp), %xmm0         # 8-byte Reload
	movq	184(%rsp), %rdx         # 8-byte Reload
	movq	112(%rsp), %rcx         # 8-byte Reload
	movq	120(%rsp), %r8          # 8-byte Reload
	movq	88(%rsp), %r9           # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	80(%rsp), %xmm0         # 8-byte Reload
	addq	$1464, %rsp             # imm = 0x5B8
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
.Ltmp134:
.Ltmp135:
	.size	pythag, .Ltmp135-pythag
.Lfunc_end3:
	.cfi_endproc

	.globl	r8_max
	.align	16, 0x90
	.type	r8_max,@function
r8_max:                                 # @r8_max
	.cfi_startproc
.Lfunc_begin4:
	.loc	2 169 0                 # eispack.c:169:0
# BB#0:
	pushq	%rbp
.Ltmp143:
	.cfi_def_cfa_offset 16
	pushq	%r15
.Ltmp144:
	.cfi_def_cfa_offset 24
	pushq	%r14
.Ltmp145:
	.cfi_def_cfa_offset 32
	pushq	%r13
.Ltmp146:
	.cfi_def_cfa_offset 40
	pushq	%r12
.Ltmp147:
	.cfi_def_cfa_offset 48
	pushq	%rbx
.Ltmp148:
	.cfi_def_cfa_offset 56
	subq	$232, %rsp
.Ltmp149:
	.cfi_def_cfa_offset 288
.Ltmp150:
	.cfi_offset %rbx, -56
.Ltmp151:
	.cfi_offset %r12, -48
.Ltmp152:
	.cfi_offset %r13, -40
.Ltmp153:
	.cfi_offset %r14, -32
.Ltmp154:
	.cfi_offset %r15, -24
.Ltmp155:
	.cfi_offset %rbp, -16
	#DEBUG_VALUE: r8_max:y <- XMM1
	#DEBUG_VALUE: r8_max:x <- XMM0
	movabsq	$1, %rax
	movabsq	$64, %rcx
	leaq	.L.str43128, %rdx
	movabsq	$0, %rsi
	leaq	.L.str792, %rdi
	movabsq	$180, %r8
	leaq	.L.str1297, %r9
	leaq	.L.str489, %r10
	leaq	.L.str44129, %r11
	movl	$0, %ebx
	movl	$1, %ebp
	movabsq	$19134, %r14            # imm = 0x4ABE
	.loc	2 143 0 prologue_end    # eispack.c:143:0
.Ltmp156:
	movl	$.L.str41126, %r15d
	movl	%r15d, %r12d
	movl	$.L.str792, %r15d
	movl	%r15d, %r13d
	movl	$24601, %r15d           # imm = 0x6019
                                        # kill: R15<def> R15D<kill>
	movq	%rsi, 224(%rsp)         # 8-byte Spill
	movl	$64, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, 216(%rsp)         # 8-byte Spill
	movl	$1, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, 208(%rsp)         # 8-byte Spill
	xorl	%esi, %esi
	movq	%rax, 200(%rsp)         # 8-byte Spill
	movl	%esi, %eax
	movq	%rdi, 192(%rsp)         # 8-byte Spill
	movq	%r15, %rdi
	movq	%rax, 184(%rsp)         # 8-byte Spill
	movq	216(%rsp), %rax         # 8-byte Reload
	movl	%esi, 180(%rsp)         # 4-byte Spill
	movq	%rax, %rsi
	vmovsd	%xmm0, 168(%rsp)        # 8-byte Spill
.Ltmp157:
	#DEBUG_VALUE: r8_max:x <- [RSP+168]
	movq	208(%rsp), %rax         # 8-byte Reload
	movq	%rdx, 160(%rsp)         # 8-byte Spill
	movq	%rax, %rdx
	movq	%rcx, 152(%rsp)         # 8-byte Spill
	movq	%r12, %rcx
	movq	184(%rsp), %rax         # 8-byte Reload
	movq	%r8, 144(%rsp)          # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 136(%rsp)          # 8-byte Spill
	movq	%r13, %r9
	vmovsd	%xmm1, 128(%rsp)        # 8-byte Spill
.Ltmp158:
	#DEBUG_VALUE: r8_max:y <- [RSP+128]
	movq	%r12, 120(%rsp)         # 8-byte Spill
	movl	%ebp, 116(%rsp)         # 4-byte Spill
	movq	%r14, 104(%rsp)         # 8-byte Spill
	movq	%r15, 96(%rsp)          # 8-byte Spill
	movq	%r13, 88(%rsp)          # 8-byte Spill
	movl	%ebx, 84(%rsp)          # 4-byte Spill
	movq	%r11, 72(%rsp)          # 8-byte Spill
	movq	%r10, 64(%rsp)          # 8-byte Spill
	callq	trace_logger_log_double
.Ltmp159:
	movl	$.L.str42127, %ebx
	movl	%ebx, %eax
	movq	96(%rsp), %rdi          # 8-byte Reload
	movq	216(%rsp), %rsi         # 8-byte Reload
	vmovsd	128(%rsp), %xmm0        # 8-byte Reload
	movq	208(%rsp), %rdx         # 8-byte Reload
	movq	%rax, %rcx
	movq	184(%rsp), %r8          # 8-byte Reload
	movq	88(%rsp), %r9           # 8-byte Reload
	movq	%rax, 56(%rsp)          # 8-byte Spill
	callq	trace_logger_log_double
	.loc	2 172 0                 # eispack.c:172:0
.Ltmp160:
	movq	%rsp, %rax
	movl	$1, (%rax)
	movl	$.L.str1297, %ebx
	movl	%ebx, %eax
	movl	$.L.str489, %ebx
	movl	%ebx, %ecx
	movl	$.L.str590, %ebx
	movl	%ebx, %edx
	movl	$172, %ebx
	movl	%ebx, %edi
	movl	$47, %ebx
	movl	%ebx, %r8d
	movq	%rax, %rsi
	movq	%rdx, 48(%rsp)          # 8-byte Spill
	movq	%rcx, %rdx
	movq	48(%rsp), %r9           # 8-byte Reload
	movq	%rcx, 40(%rsp)          # 8-byte Spill
	movq	%r9, %rcx
	movl	180(%rsp), %r9d         # 4-byte Reload
	movq	%rax, 32(%rsp)          # 8-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %eax
	movq	%rax, %rdi
	movq	216(%rsp), %rsi         # 8-byte Reload
	vmovsd	168(%rsp), %xmm0        # 8-byte Reload
	movq	208(%rsp), %rdx         # 8-byte Reload
	movq	120(%rsp), %rcx         # 8-byte Reload
	movq	184(%rsp), %r8          # 8-byte Reload
	movq	88(%rsp), %r9           # 8-byte Reload
	movq	%rax, 24(%rsp)          # 8-byte Spill
	callq	trace_logger_log_double
	movq	208(%rsp), %rdi         # 8-byte Reload
	movq	216(%rsp), %rsi         # 8-byte Reload
	vmovsd	128(%rsp), %xmm0        # 8-byte Reload
	movq	208(%rsp), %rdx         # 8-byte Reload
	movq	56(%rsp), %rcx          # 8-byte Reload
	movq	184(%rsp), %r8          # 8-byte Reload
	movq	88(%rsp), %r9           # 8-byte Reload
	callq	trace_logger_log_double
.Ltmp161:
	.loc	2 143 0                 # eispack.c:143:0
	vmovsd	168(%rsp), %xmm0        # 8-byte Reload
	vmovsd	128(%rsp), %xmm1        # 8-byte Reload
	vucomisd	%xmm1, %xmm0
	.loc	2 172 0                 # eispack.c:172:0
.Ltmp162:
	seta	%al
	.loc	2 175 0                 # eispack.c:175:0
.Ltmp163:
	movzbl	%al, %ebx
	movl	%ebx, %ecx
	movq	%rsp, %rdx
	movq	$.L.str792, (%rdx)
	movl	$19134, %ebx            # imm = 0x4ABE
	movl	%ebx, %edi
	movq	208(%rsp), %rsi         # 8-byte Reload
	movq	%rcx, %rdx
	movq	208(%rsp), %r8          # 8-byte Reload
	movq	%rcx, 16(%rsp)          # 8-byte Spill
	movq	%r8, %rcx
	movq	48(%rsp), %r8           # 8-byte Reload
	movq	184(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_int
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str43128, %ebx
	movl	%ebx, %ecx
	movl	$175, %ebx
	movl	%ebx, %edi
	movl	$50, %ebx
	movl	%ebx, %r8d
	movq	32(%rsp), %rsi          # 8-byte Reload
	movq	40(%rsp), %rdx          # 8-byte Reload
	movl	180(%rsp), %r9d         # 4-byte Reload
	callq	trace_logger_log0
	movl	$3, %r9d
	movl	%r9d, %edi
	movq	216(%rsp), %rsi         # 8-byte Reload
	vmovsd	128(%rsp), %xmm0        # 8-byte Reload
	movq	208(%rsp), %rdx         # 8-byte Reload
	movq	56(%rsp), %rcx          # 8-byte Reload
	movq	184(%rsp), %r8          # 8-byte Reload
	movq	88(%rsp), %r9           # 8-byte Reload
	callq	trace_logger_log_double
	movq	24(%rsp), %rdi          # 8-byte Reload
	movq	216(%rsp), %rsi         # 8-byte Reload
	vmovsd	168(%rsp), %xmm0        # 8-byte Reload
	movq	208(%rsp), %rdx         # 8-byte Reload
	movq	120(%rsp), %rcx         # 8-byte Reload
	movq	184(%rsp), %r8          # 8-byte Reload
	movq	88(%rsp), %r9           # 8-byte Reload
	callq	trace_logger_log_double
	movq	%rsp, %rcx
	movq	$.L.str792, (%rcx)
	movq	208(%rsp), %rdi         # 8-byte Reload
	movq	208(%rsp), %rsi         # 8-byte Reload
	movq	16(%rsp), %rdx          # 8-byte Reload
	movq	208(%rsp), %rcx         # 8-byte Reload
	movq	48(%rsp), %r8           # 8-byte Reload
	movq	184(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_int
	vmovsd	168(%rsp), %xmm0        # 8-byte Reload
	vmovsd	128(%rsp), %xmm1        # 8-byte Reload
	vmaxsd	%xmm1, %xmm0, %xmm2
.Ltmp164:
	.loc	2 180 0                 # eispack.c:180:0
	movq	104(%rsp), %rdi         # 8-byte Reload
	movq	152(%rsp), %rsi         # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	200(%rsp), %rdx         # 8-byte Reload
	movq	160(%rsp), %rcx         # 8-byte Reload
	movq	224(%rsp), %r8          # 8-byte Reload
	movq	192(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 8(%rsp)          # 8-byte Spill
	callq	trace_logger_log_double
	movq	144(%rsp), %rdi         # 8-byte Reload
	movq	136(%rsp), %rsi         # 8-byte Reload
	movq	64(%rsp), %rdx          # 8-byte Reload
	movq	72(%rsp), %rcx          # 8-byte Reload
	movq	200(%rsp), %r8          # 8-byte Reload
	movl	84(%rsp), %r9d          # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	200(%rsp), %rdi         # 8-byte Reload
	movq	152(%rsp), %rsi         # 8-byte Reload
	vmovsd	8(%rsp), %xmm0          # 8-byte Reload
	movq	200(%rsp), %rdx         # 8-byte Reload
	movq	160(%rsp), %rcx         # 8-byte Reload
	movq	224(%rsp), %r8          # 8-byte Reload
	movq	192(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	8(%rsp), %xmm0          # 8-byte Reload
	addq	$232, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
.Ltmp165:
.Ltmp166:
	.size	r8_max, .Ltmp166-r8_max
.Lfunc_end4:
	.cfi_endproc

	.globl	r8_min
	.align	16, 0x90
	.type	r8_min,@function
r8_min:                                 # @r8_min
	.cfi_startproc
.Lfunc_begin5:
	.loc	2 210 0                 # eispack.c:210:0
# BB#0:
	pushq	%rbp
.Ltmp174:
	.cfi_def_cfa_offset 16
	pushq	%r15
.Ltmp175:
	.cfi_def_cfa_offset 24
	pushq	%r14
.Ltmp176:
	.cfi_def_cfa_offset 32
	pushq	%r13
.Ltmp177:
	.cfi_def_cfa_offset 40
	pushq	%r12
.Ltmp178:
	.cfi_def_cfa_offset 48
	pushq	%rbx
.Ltmp179:
	.cfi_def_cfa_offset 56
	subq	$232, %rsp
.Ltmp180:
	.cfi_def_cfa_offset 288
.Ltmp181:
	.cfi_offset %rbx, -56
.Ltmp182:
	.cfi_offset %r12, -48
.Ltmp183:
	.cfi_offset %r13, -40
.Ltmp184:
	.cfi_offset %r14, -32
.Ltmp185:
	.cfi_offset %r15, -24
.Ltmp186:
	.cfi_offset %rbp, -16
	#DEBUG_VALUE: r8_min:y <- XMM1
	#DEBUG_VALUE: r8_min:x <- XMM0
	movabsq	$1, %rax
	movabsq	$64, %rcx
	leaq	.L.str45130, %rdx
	movabsq	$0, %rsi
	leaq	.L.str792, %rdi
	movabsq	$221, %r8
	leaq	.L.str19104, %r9
	leaq	.L.str489, %r10
	leaq	.L.str44129, %r11
	movl	$0, %ebx
	movl	$1, %ebp
	movabsq	$19134, %r14            # imm = 0x4ABE
	.loc	2 184 0 prologue_end    # eispack.c:184:0
.Ltmp187:
	movl	$.L.str41126, %r15d
	movl	%r15d, %r12d
	movl	$.L.str792, %r15d
	movl	%r15d, %r13d
	movl	$24601, %r15d           # imm = 0x6019
                                        # kill: R15<def> R15D<kill>
	movq	%rsi, 224(%rsp)         # 8-byte Spill
	movl	$64, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, 216(%rsp)         # 8-byte Spill
	movl	$1, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, 208(%rsp)         # 8-byte Spill
	xorl	%esi, %esi
	movq	%rax, 200(%rsp)         # 8-byte Spill
	movl	%esi, %eax
	movq	%rdi, 192(%rsp)         # 8-byte Spill
	movq	%r15, %rdi
	movq	%rax, 184(%rsp)         # 8-byte Spill
	movq	216(%rsp), %rax         # 8-byte Reload
	movl	%esi, 180(%rsp)         # 4-byte Spill
	movq	%rax, %rsi
	vmovsd	%xmm0, 168(%rsp)        # 8-byte Spill
.Ltmp188:
	#DEBUG_VALUE: r8_min:x <- [RSP+168]
	movq	208(%rsp), %rax         # 8-byte Reload
	movq	%rdx, 160(%rsp)         # 8-byte Spill
	movq	%rax, %rdx
	movq	%rcx, 152(%rsp)         # 8-byte Spill
	movq	%r12, %rcx
	movq	184(%rsp), %rax         # 8-byte Reload
	movq	%r8, 144(%rsp)          # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 136(%rsp)          # 8-byte Spill
	movq	%r13, %r9
	vmovsd	%xmm1, 128(%rsp)        # 8-byte Spill
.Ltmp189:
	#DEBUG_VALUE: r8_min:y <- [RSP+128]
	movq	%r12, 120(%rsp)         # 8-byte Spill
	movl	%ebp, 116(%rsp)         # 4-byte Spill
	movq	%r14, 104(%rsp)         # 8-byte Spill
	movq	%r15, 96(%rsp)          # 8-byte Spill
	movq	%r13, 88(%rsp)          # 8-byte Spill
	movl	%ebx, 84(%rsp)          # 4-byte Spill
	movq	%r11, 72(%rsp)          # 8-byte Spill
	movq	%r10, 64(%rsp)          # 8-byte Spill
	callq	trace_logger_log_double
.Ltmp190:
	movl	$.L.str42127, %ebx
	movl	%ebx, %eax
	movq	96(%rsp), %rdi          # 8-byte Reload
	movq	216(%rsp), %rsi         # 8-byte Reload
	vmovsd	128(%rsp), %xmm0        # 8-byte Reload
	movq	208(%rsp), %rdx         # 8-byte Reload
	movq	%rax, %rcx
	movq	184(%rsp), %r8          # 8-byte Reload
	movq	88(%rsp), %r9           # 8-byte Reload
	movq	%rax, 56(%rsp)          # 8-byte Spill
	callq	trace_logger_log_double
	.loc	2 213 0                 # eispack.c:213:0
.Ltmp191:
	movq	%rsp, %rax
	movl	$1, (%rax)
	movl	$.L.str19104, %ebx
	movl	%ebx, %eax
	movl	$.L.str489, %ebx
	movl	%ebx, %ecx
	movl	$.L.str590, %ebx
	movl	%ebx, %edx
	movl	$213, %ebx
	movl	%ebx, %edi
	movl	$47, %ebx
	movl	%ebx, %r8d
	movq	%rax, %rsi
	movq	%rdx, 48(%rsp)          # 8-byte Spill
	movq	%rcx, %rdx
	movq	48(%rsp), %r9           # 8-byte Reload
	movq	%rcx, 40(%rsp)          # 8-byte Spill
	movq	%r9, %rcx
	movl	180(%rsp), %r9d         # 4-byte Reload
	movq	%rax, 32(%rsp)          # 8-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %eax
	movq	%rax, %rdi
	movq	216(%rsp), %rsi         # 8-byte Reload
	vmovsd	168(%rsp), %xmm0        # 8-byte Reload
	movq	208(%rsp), %rdx         # 8-byte Reload
	movq	120(%rsp), %rcx         # 8-byte Reload
	movq	184(%rsp), %r8          # 8-byte Reload
	movq	88(%rsp), %r9           # 8-byte Reload
	movq	%rax, 24(%rsp)          # 8-byte Spill
	callq	trace_logger_log_double
	movq	208(%rsp), %rdi         # 8-byte Reload
	movq	216(%rsp), %rsi         # 8-byte Reload
	vmovsd	128(%rsp), %xmm0        # 8-byte Reload
	movq	208(%rsp), %rdx         # 8-byte Reload
	movq	56(%rsp), %rcx          # 8-byte Reload
	movq	184(%rsp), %r8          # 8-byte Reload
	movq	88(%rsp), %r9           # 8-byte Reload
	callq	trace_logger_log_double
.Ltmp192:
	.loc	2 184 0                 # eispack.c:184:0
	vmovsd	168(%rsp), %xmm0        # 8-byte Reload
	vmovsd	128(%rsp), %xmm1        # 8-byte Reload
	vucomisd	%xmm1, %xmm0
	.loc	2 213 0                 # eispack.c:213:0
.Ltmp193:
	seta	%al
	.loc	2 216 0                 # eispack.c:216:0
.Ltmp194:
	movzbl	%al, %ebx
	movl	%ebx, %ecx
	movq	%rsp, %rdx
	movq	$.L.str792, (%rdx)
	movl	$19134, %ebx            # imm = 0x4ABE
	movl	%ebx, %edi
	movq	208(%rsp), %rsi         # 8-byte Reload
	movq	%rcx, %rdx
	movq	208(%rsp), %r8          # 8-byte Reload
	movq	%rcx, 16(%rsp)          # 8-byte Spill
	movq	%r8, %rcx
	movq	48(%rsp), %r8           # 8-byte Reload
	movq	184(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_int
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str45130, %ebx
	movl	%ebx, %ecx
	movl	$216, %ebx
	movl	%ebx, %edi
	movl	$50, %ebx
	movl	%ebx, %r8d
	movq	32(%rsp), %rsi          # 8-byte Reload
	movq	40(%rsp), %rdx          # 8-byte Reload
	movl	180(%rsp), %r9d         # 4-byte Reload
	callq	trace_logger_log0
	movl	$3, %r9d
	movl	%r9d, %edi
	movq	216(%rsp), %rsi         # 8-byte Reload
	vmovsd	168(%rsp), %xmm0        # 8-byte Reload
	movq	208(%rsp), %rdx         # 8-byte Reload
	movq	120(%rsp), %rcx         # 8-byte Reload
	movq	184(%rsp), %r8          # 8-byte Reload
	movq	88(%rsp), %r9           # 8-byte Reload
	callq	trace_logger_log_double
	movq	24(%rsp), %rdi          # 8-byte Reload
	movq	216(%rsp), %rsi         # 8-byte Reload
	vmovsd	128(%rsp), %xmm0        # 8-byte Reload
	movq	208(%rsp), %rdx         # 8-byte Reload
	movq	56(%rsp), %rcx          # 8-byte Reload
	movq	184(%rsp), %r8          # 8-byte Reload
	movq	88(%rsp), %r9           # 8-byte Reload
	callq	trace_logger_log_double
	movq	%rsp, %rcx
	movq	$.L.str792, (%rcx)
	movq	208(%rsp), %rdi         # 8-byte Reload
	movq	208(%rsp), %rsi         # 8-byte Reload
	movq	16(%rsp), %rdx          # 8-byte Reload
	movq	208(%rsp), %rcx         # 8-byte Reload
	movq	48(%rsp), %r8           # 8-byte Reload
	movq	184(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_int
	vmovsd	128(%rsp), %xmm0        # 8-byte Reload
	vmovsd	168(%rsp), %xmm1        # 8-byte Reload
	vminsd	%xmm1, %xmm0, %xmm2
.Ltmp195:
	.loc	2 221 0                 # eispack.c:221:0
	movq	104(%rsp), %rdi         # 8-byte Reload
	movq	152(%rsp), %rsi         # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	200(%rsp), %rdx         # 8-byte Reload
	movq	160(%rsp), %rcx         # 8-byte Reload
	movq	224(%rsp), %r8          # 8-byte Reload
	movq	192(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 8(%rsp)          # 8-byte Spill
	callq	trace_logger_log_double
	movq	144(%rsp), %rdi         # 8-byte Reload
	movq	136(%rsp), %rsi         # 8-byte Reload
	movq	64(%rsp), %rdx          # 8-byte Reload
	movq	72(%rsp), %rcx          # 8-byte Reload
	movq	200(%rsp), %r8          # 8-byte Reload
	movl	84(%rsp), %r9d          # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	200(%rsp), %rdi         # 8-byte Reload
	movq	152(%rsp), %rsi         # 8-byte Reload
	vmovsd	8(%rsp), %xmm0          # 8-byte Reload
	movq	200(%rsp), %rdx         # 8-byte Reload
	movq	160(%rsp), %rcx         # 8-byte Reload
	movq	224(%rsp), %r8          # 8-byte Reload
	movq	192(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	8(%rsp), %xmm0          # 8-byte Reload
	addq	$232, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
.Ltmp196:
.Ltmp197:
	.size	r8_min, .Ltmp197-r8_min
.Lfunc_end5:
	.cfi_endproc

	.section	.rodata.cst8,"aM",@progbits,8
	.align	8
.LCPI6_0:
	.quad	4372995238176751616     # double 2.2204460492503131E-16
	.text
	.globl	r8_epsilon
	.align	16, 0x90
	.type	r8_epsilon,@function
r8_epsilon:                             # @r8_epsilon
	.cfi_startproc
.Lfunc_begin6:
	.loc	2 135 0                 # eispack.c:135:0
# BB#0:
	pushq	%rbp
.Ltmp201:
	.cfi_def_cfa_offset 16
	pushq	%rbx
.Ltmp202:
	.cfi_def_cfa_offset 24
	subq	$72, %rsp
.Ltmp203:
	.cfi_def_cfa_offset 96
.Ltmp204:
	.cfi_offset %rbx, -24
.Ltmp205:
	.cfi_offset %rbp, -16
	vmovsd	.LCPI6_0, %xmm0
	movabsq	$1, %rax
	movabsq	$64, %rsi
	movabsq	$0, %rcx
	leaq	.L.str1499, %rdx
	leaq	.L.str792, %r9
	movabsq	$138, %rdi
	leaq	.L.str46131, %r8
	leaq	.L.str489, %r10
	leaq	.L.str47132, %r11
	movl	$0, %ebx
	movl	$1, %ebp
.Ltmp206:
	#DEBUG_VALUE: r8_epsilon:value <- 2.220446e-16
	.loc	2 138 0 prologue_end    # eispack.c:138:0
	movq	%rsi, 64(%rsp)          # 8-byte Spill
	movq	%r8, %rsi
	movq	%rdx, 56(%rsp)          # 8-byte Spill
	movq	%r10, %rdx
	movq	%rcx, 48(%rsp)          # 8-byte Spill
	movq	%r11, %rcx
	movq	%rax, %r8
	movq	%r9, 40(%rsp)           # 8-byte Spill
	movl	%ebx, %r9d
	movl	$1, (%rsp)
	vmovsd	%xmm0, 32(%rsp)         # 8-byte Spill
	movq	%rax, 24(%rsp)          # 8-byte Spill
	movl	%ebp, 20(%rsp)          # 4-byte Spill
	callq	trace_logger_log0
	movq	24(%rsp), %rdi          # 8-byte Reload
	movq	64(%rsp), %rsi          # 8-byte Reload
	vmovsd	32(%rsp), %xmm0         # 8-byte Reload
	movq	48(%rsp), %rdx          # 8-byte Reload
	movq	56(%rsp), %rcx          # 8-byte Reload
	movq	48(%rsp), %r8           # 8-byte Reload
	movq	40(%rsp), %r9           # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	32(%rsp), %xmm0         # 8-byte Reload
	addq	$72, %rsp
	popq	%rbx
	popq	%rbp
	ret
.Ltmp207:
.Ltmp208:
	.size	r8_epsilon, .Ltmp208-r8_epsilon
.Lfunc_end6:
	.cfi_endproc

	.section	.rodata.cst8,"aM",@progbits,8
	.align	8
.LCPI7_0:
	.quad	-4616189618054758400    # double -1
.LCPI7_1:
	.quad	4607182418800017408     # double 1
	.text
	.globl	r8_sign
	.align	16, 0x90
	.type	r8_sign,@function
r8_sign:                                # @r8_sign
	.cfi_startproc
.Lfunc_begin7:
	.loc	2 251 0                 # eispack.c:251:0
# BB#0:
	pushq	%rbp
.Ltmp216:
	.cfi_def_cfa_offset 16
	pushq	%r15
.Ltmp217:
	.cfi_def_cfa_offset 24
	pushq	%r14
.Ltmp218:
	.cfi_def_cfa_offset 32
	pushq	%r13
.Ltmp219:
	.cfi_def_cfa_offset 40
	pushq	%r12
.Ltmp220:
	.cfi_def_cfa_offset 48
	pushq	%rbx
.Ltmp221:
	.cfi_def_cfa_offset 56
	subq	$248, %rsp
.Ltmp222:
	.cfi_def_cfa_offset 304
.Ltmp223:
	.cfi_offset %rbx, -56
.Ltmp224:
	.cfi_offset %r12, -48
.Ltmp225:
	.cfi_offset %r13, -40
.Ltmp226:
	.cfi_offset %r14, -32
.Ltmp227:
	.cfi_offset %r15, -24
.Ltmp228:
	.cfi_offset %rbp, -16
	#DEBUG_VALUE: r8_sign:x <- XMM0
	movabsq	$1, %rax
	movabsq	$64, %rcx
	leaq	.L.str49134, %rdx
	movabsq	$0, %rsi
	leaq	.L.str792, %rdi
	movabsq	$262, %r8               # imm = 0x106
	leaq	.L.str48133, %r9
	leaq	.L.str489, %r10
	leaq	.L.str47132, %r11
	movl	$0, %ebx
	movl	$1, %ebp
	movabsq	$19134, %r14            # imm = 0x4ABE
	.loc	2 225 0 prologue_end    # eispack.c:225:0
.Ltmp229:
	movl	$.L.str41126, %r15d
	movl	%r15d, %r12d
	movl	$.L.str792, %r15d
	movl	%r15d, %r13d
	movl	$24601, %r15d           # imm = 0x6019
                                        # kill: R15<def> R15D<kill>
	movq	%rsi, 240(%rsp)         # 8-byte Spill
	movl	$64, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, 232(%rsp)         # 8-byte Spill
	movl	$1, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, 224(%rsp)         # 8-byte Spill
	xorl	%esi, %esi
	movq	%rax, 216(%rsp)         # 8-byte Spill
	movl	%esi, %eax
	movq	%rdi, 208(%rsp)         # 8-byte Spill
	movq	%r15, %rdi
	movq	232(%rsp), %r15         # 8-byte Reload
	movl	%esi, 204(%rsp)         # 4-byte Spill
	movq	%r15, %rsi
	vmovsd	%xmm0, 192(%rsp)        # 8-byte Spill
.Ltmp230:
	#DEBUG_VALUE: r8_sign:x <- [RSP+192]
	movq	224(%rsp), %r15         # 8-byte Reload
	movq	%rdx, 184(%rsp)         # 8-byte Spill
	movq	%r15, %rdx
	movq	%rcx, 176(%rsp)         # 8-byte Spill
	movq	%r12, %rcx
	movq	%r8, 168(%rsp)          # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 160(%rsp)          # 8-byte Spill
	movq	%r13, %r9
	movq	%r12, 152(%rsp)         # 8-byte Spill
	movq	%rax, 144(%rsp)         # 8-byte Spill
	movl	%ebp, 140(%rsp)         # 4-byte Spill
	movq	%r14, 128(%rsp)         # 8-byte Spill
	movq	%r13, 120(%rsp)         # 8-byte Spill
	movl	%ebx, 116(%rsp)         # 4-byte Spill
	movq	%r11, 104(%rsp)         # 8-byte Spill
	movq	%r10, 96(%rsp)          # 8-byte Spill
	callq	trace_logger_log_double
.Ltmp231:
	.loc	2 254 0                 # eispack.c:254:0
	movq	%rsp, %rax
	movl	$1, (%rax)
	movl	$.L.str48133, %ebx
	movl	%ebx, %eax
	movl	$.L.str489, %ebx
	movl	%ebx, %ecx
	movl	$.L.str590, %ebx
	movl	%ebx, %edx
	movl	$254, %ebx
	movl	%ebx, %edi
	movl	$47, %ebx
	movl	%ebx, %r8d
	movq	%rax, %rsi
	movq	%rdx, 88(%rsp)          # 8-byte Spill
	movq	%rcx, %rdx
	movq	88(%rsp), %r9           # 8-byte Reload
	movq	%rcx, 80(%rsp)          # 8-byte Spill
	movq	%r9, %rcx
	movl	204(%rsp), %r9d         # 4-byte Reload
	movq	%rax, 72(%rsp)          # 8-byte Spill
	callq	trace_logger_log0
	movl	$.L.str1499, %r9d
	movl	%r9d, %eax
	movl	$2, %r9d
	movl	%r9d, %ecx
	vxorps	%xmm0, %xmm0, %xmm0
	movq	%rcx, %rdi
	movq	232(%rsp), %rsi         # 8-byte Reload
	vmovsd	%xmm0, 64(%rsp)         # 8-byte Spill
	movq	144(%rsp), %rdx         # 8-byte Reload
	movq	%rcx, 56(%rsp)          # 8-byte Spill
	movq	%rax, %rcx
	movq	144(%rsp), %r8          # 8-byte Reload
	movq	120(%rsp), %r9          # 8-byte Reload
	movq	%rax, 48(%rsp)          # 8-byte Spill
	callq	trace_logger_log_double
	movq	224(%rsp), %rdi         # 8-byte Reload
	movq	232(%rsp), %rsi         # 8-byte Reload
	vmovsd	192(%rsp), %xmm0        # 8-byte Reload
	movq	224(%rsp), %rdx         # 8-byte Reload
	movq	152(%rsp), %rcx         # 8-byte Reload
	movq	144(%rsp), %r8          # 8-byte Reload
	movq	120(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	64(%rsp), %xmm0         # 8-byte Reload
	vmovsd	192(%rsp), %xmm1        # 8-byte Reload
	vucomisd	%xmm1, %xmm0
	seta	%al
	.loc	2 257 0                 # eispack.c:257:0
.Ltmp232:
	movzbl	%al, %ebx
	movl	%ebx, %ecx
	movq	%rsp, %rdx
	movq	$.L.str792, (%rdx)
	vmovsd	.LCPI7_0(%rip), %xmm2
	vmovsd	.LCPI7_1(%rip), %xmm3
	vmovaps	%xmm2, %xmm4
	movq	%rcx, 40(%rsp)          # 8-byte Spill
	vmovsd	%xmm2, 32(%rsp)         # 8-byte Spill
	vmovsd	%xmm3, 24(%rsp)         # 8-byte Spill
	vmovsd	%xmm4, 16(%rsp)         # 8-byte Spill
	ja	.LBB7_2
# BB#1:
	vmovsd	24(%rsp), %xmm0         # 8-byte Reload
	vmovsd	%xmm0, 16(%rsp)         # 8-byte Spill
.LBB7_2:
	vmovsd	16(%rsp), %xmm0         # 8-byte Reload
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movq	224(%rsp), %rsi         # 8-byte Reload
	movq	40(%rsp), %rdx          # 8-byte Reload
	movq	224(%rsp), %rcx         # 8-byte Reload
	movq	88(%rsp), %r8           # 8-byte Reload
	movq	144(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm0, 8(%rsp)          # 8-byte Spill
	callq	trace_logger_log_int
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str49134, %eax
	movl	%eax, %ecx
	movl	$257, %eax              # imm = 0x101
	movl	%eax, %edi
	movl	$50, %eax
	movl	%eax, %r8d
	movq	72(%rsp), %rsi          # 8-byte Reload
	movq	80(%rsp), %rdx          # 8-byte Reload
	movl	204(%rsp), %r9d         # 4-byte Reload
	callq	trace_logger_log0
	movl	$3, %eax
	movl	%eax, %edi
	movq	232(%rsp), %rsi         # 8-byte Reload
	vmovsd	24(%rsp), %xmm0         # 8-byte Reload
	movq	144(%rsp), %rdx         # 8-byte Reload
	movq	48(%rsp), %rcx          # 8-byte Reload
	movq	144(%rsp), %r8          # 8-byte Reload
	movq	120(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	56(%rsp), %rdi          # 8-byte Reload
	movq	232(%rsp), %rsi         # 8-byte Reload
	vmovsd	32(%rsp), %xmm0         # 8-byte Reload
	movq	144(%rsp), %rdx         # 8-byte Reload
	movq	48(%rsp), %rcx          # 8-byte Reload
	movq	144(%rsp), %r8          # 8-byte Reload
	movq	120(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	%rsp, %rcx
	movq	$.L.str792, (%rcx)
	movq	224(%rsp), %rdi         # 8-byte Reload
	movq	224(%rsp), %rsi         # 8-byte Reload
	movq	40(%rsp), %rdx          # 8-byte Reload
	movq	224(%rsp), %rcx         # 8-byte Reload
	movq	88(%rsp), %r8           # 8-byte Reload
	movq	144(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_int
.Ltmp233:
	.loc	2 262 0                 # eispack.c:262:0
	movq	128(%rsp), %rdi         # 8-byte Reload
	movq	176(%rsp), %rsi         # 8-byte Reload
	vmovsd	8(%rsp), %xmm0          # 8-byte Reload
	movq	216(%rsp), %rdx         # 8-byte Reload
	movq	184(%rsp), %rcx         # 8-byte Reload
	movq	240(%rsp), %r8          # 8-byte Reload
	movq	208(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	168(%rsp), %rdi         # 8-byte Reload
	movq	160(%rsp), %rsi         # 8-byte Reload
	movq	96(%rsp), %rdx          # 8-byte Reload
	movq	104(%rsp), %rcx         # 8-byte Reload
	movq	216(%rsp), %r8          # 8-byte Reload
	movl	116(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	216(%rsp), %rdi         # 8-byte Reload
	movq	176(%rsp), %rsi         # 8-byte Reload
	vmovsd	8(%rsp), %xmm0          # 8-byte Reload
	movq	216(%rsp), %rdx         # 8-byte Reload
	movq	184(%rsp), %rcx         # 8-byte Reload
	movq	240(%rsp), %r8          # 8-byte Reload
	movq	208(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	8(%rsp), %xmm0          # 8-byte Reload
	addq	$248, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
.Ltmp234:
.Ltmp235:
	.size	r8_sign, .Ltmp235-r8_sign
.Lfunc_end7:
	.cfi_endproc

	.globl	rs
	.align	16, 0x90
	.type	rs,@function
rs:                                     # @rs
	.cfi_startproc
.Lfunc_begin8:
	.loc	2 331 0                 # eispack.c:331:0
# BB#0:
	pushq	%rbp
.Ltmp243:
	.cfi_def_cfa_offset 16
	pushq	%r15
.Ltmp244:
	.cfi_def_cfa_offset 24
	pushq	%r14
.Ltmp245:
	.cfi_def_cfa_offset 32
	pushq	%r13
.Ltmp246:
	.cfi_def_cfa_offset 40
	pushq	%r12
.Ltmp247:
	.cfi_def_cfa_offset 48
	pushq	%rbx
.Ltmp248:
	.cfi_def_cfa_offset 56
	subq	$2008, %rsp             # imm = 0x7D8
.Ltmp249:
	.cfi_def_cfa_offset 2064
.Ltmp250:
	.cfi_offset %rbx, -56
.Ltmp251:
	.cfi_offset %r12, -48
.Ltmp252:
	.cfi_offset %r13, -40
.Ltmp253:
	.cfi_offset %r14, -32
.Ltmp254:
	.cfi_offset %r15, -24
.Ltmp255:
	.cfi_offset %rbp, -16
	movb	%cl, %al
	movabsq	$1, %r9
	movabsq	$64, %r10
	leaq	.L.str994, %r11
	movabsq	$0, %rbx
	leaq	.L.str792, %r14
	movabsq	$2, %r15
	leaq	malloc, %r12
	leaq	.L.str52137, %r13
	movabsq	$336, %rbp              # imm = 0x150
	leaq	.L.str50135, %rcx
	movb	%al, 2007(%rsp)         # 1-byte Spill
	leaq	.L.str489, %rax
	movq	%rax, 1992(%rsp)        # 8-byte Spill
	leaq	.L.str1196, %rax
	movq	%rax, 1984(%rsp)        # 8-byte Spill
	movabsq	$49, %rax
	movq	%rsi, 1976(%rsp)        # 8-byte Spill
	movl	$0, %esi
	movl	%esi, 1972(%rsp)        # 4-byte Spill
	movl	$1, %esi
	movq	%rax, 1960(%rsp)        # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 1952(%rsp)        # 8-byte Spill
	leaq	.L.str590, %rax
	movq	%rax, 1944(%rsp)        # 8-byte Spill
	movabsq	$3, %rax
	movq	%rax, 1936(%rsp)        # 8-byte Spill
	leaq	.L.str1499, %rax
	movq	%rax, 1928(%rsp)        # 8-byte Spill
	movabsq	$20, %rax
	movq	%rax, 1920(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 1912(%rsp)        # 8-byte Spill
	leaq	.L.str51136, %rax
	movq	%rax, 1904(%rsp)        # 8-byte Spill
	movabsq	$35, %rax
	movq	%rax, 1896(%rsp)        # 8-byte Spill
	movabsq	$24601, %rax            # imm = 0x6019
	movq	%rax, 1888(%rsp)        # 8-byte Spill
	leaq	.L.str73158, %rax
	movq	%rax, 1880(%rsp)        # 8-byte Spill
	leaq	.L.str56141, %rax
	movq	%rax, 1872(%rsp)        # 8-byte Spill
	leaq	.L.str60145, %rax
	movq	%rax, 1864(%rsp)        # 8-byte Spill
	leaq	.L.str893, %rax
	.loc	2 267 0 prologue_end    # eispack.c:267:0
.Ltmp256:
	movl	%esi, 1860(%rsp)        # 4-byte Spill
	movl	%edi, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rax, 1848(%rsp)        # 8-byte Spill
	movq	1888(%rsp), %rax        # 8-byte Reload
	movl	%edi, 1844(%rsp)        # 4-byte Spill
	movq	%rax, %rdi
	movq	1912(%rsp), %rax        # 8-byte Reload
	movq	%rsi, 1832(%rsp)        # 8-byte Spill
	movq	%rax, %rsi
	movq	1832(%rsp), %rax        # 8-byte Reload
	movq	%rdx, 1824(%rsp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	%rcx, 1816(%rsp)        # 8-byte Spill
	movq	%r9, %rcx
	movq	1904(%rsp), %rax        # 8-byte Reload
	movq	%r8, 1808(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 1800(%rsp)         # 8-byte Spill
	movq	%rbx, %r9
	movq	%r14, (%rsp)
	movq	%r12, 1792(%rsp)        # 8-byte Spill
	movq	%r15, 1784(%rsp)        # 8-byte Spill
	movq	%r13, 1776(%rsp)        # 8-byte Spill
	movq	%rbp, 1768(%rsp)        # 8-byte Spill
	movq	%r14, 1760(%rsp)        # 8-byte Spill
	movq	%r10, 1752(%rsp)        # 8-byte Spill
	movq	%r11, 1744(%rsp)        # 8-byte Spill
	movq	%rbx, 1736(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	1888(%rsp), %rdi        # 8-byte Reload
	movq	1752(%rsp), %rsi        # 8-byte Reload
	movq	1976(%rsp), %rdx        # 8-byte Reload
	movq	1800(%rsp), %rcx        # 8-byte Reload
	movq	1848(%rsp), %r8         # 8-byte Reload
	movq	1736(%rsp), %r9         # 8-byte Reload
	movq	1760(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1888(%rsp), %rdi        # 8-byte Reload
	movq	1752(%rsp), %rsi        # 8-byte Reload
	movq	1824(%rsp), %rdx        # 8-byte Reload
	movq	1800(%rsp), %rcx        # 8-byte Reload
	movq	1864(%rsp), %r8         # 8-byte Reload
	movq	1736(%rsp), %r9         # 8-byte Reload
	movq	1760(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movb	2007(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, %edx
	movq	1888(%rsp), %rdi        # 8-byte Reload
	movq	1800(%rsp), %rsi        # 8-byte Reload
	movq	1800(%rsp), %rcx        # 8-byte Reload
	movq	1872(%rsp), %r8         # 8-byte Reload
	movq	1736(%rsp), %r9         # 8-byte Reload
	movq	1760(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1888(%rsp), %rdi        # 8-byte Reload
	movq	1752(%rsp), %rsi        # 8-byte Reload
	movq	1808(%rsp), %rdx        # 8-byte Reload
	movq	1800(%rsp), %rcx        # 8-byte Reload
	movq	1880(%rsp), %r8         # 8-byte Reload
	movq	1736(%rsp), %r9         # 8-byte Reload
	movq	1760(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	#DEBUG_VALUE: rs:n <- [RSP+1844]
	#DEBUG_VALUE: rs:a <- [RSP+1976]
	#DEBUG_VALUE: rs:w <- [RSP+1824]
	#DEBUG_VALUE: rs:matz <- [RSP+2007]
	#DEBUG_VALUE: rs:z <- [RSP+1808]
	.loc	2 336 0                 # eispack.c:336:0
	movq	1768(%rsp), %rdi        # 8-byte Reload
	movq	1816(%rsp), %rsi        # 8-byte Reload
	movq	1992(%rsp), %rdx        # 8-byte Reload
	movq	1944(%rsp), %rcx        # 8-byte Reload
	movq	1896(%rsp), %r8         # 8-byte Reload
	movl	1972(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	1844(%rsp), %eax        # 4-byte Reload
	movl	%eax, %r9d
	movl	%r9d, %edx
	movq	1800(%rsp), %rdi        # 8-byte Reload
	movq	1912(%rsp), %rsi        # 8-byte Reload
	movq	1800(%rsp), %rcx        # 8-byte Reload
	movq	1904(%rsp), %r8         # 8-byte Reload
	movq	1736(%rsp), %r9         # 8-byte Reload
	movq	1760(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	1844(%rsp), %eax        # 4-byte Reload
	movslq	%eax, %rcx
	movq	1952(%rsp), %rdi        # 8-byte Reload
	movq	1752(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	1800(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 1728(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	1944(%rsp), %r8         # 8-byte Reload
	movq	1736(%rsp), %r9         # 8-byte Reload
	movq	1760(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1768(%rsp), %rdi        # 8-byte Reload
	movq	1816(%rsp), %rsi        # 8-byte Reload
	movq	1992(%rsp), %rdx        # 8-byte Reload
	movq	1744(%rsp), %rcx        # 8-byte Reload
	movq	1920(%rsp), %r8         # 8-byte Reload
	movl	1972(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1784(%rsp), %rdi        # 8-byte Reload
	movq	1752(%rsp), %rsi        # 8-byte Reload
	movq	1936(%rsp), %rdx        # 8-byte Reload
	movq	1736(%rsp), %rcx        # 8-byte Reload
	movq	1928(%rsp), %r8         # 8-byte Reload
	movq	1736(%rsp), %r9         # 8-byte Reload
	movq	1760(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1800(%rsp), %rdi        # 8-byte Reload
	movq	1752(%rsp), %rsi        # 8-byte Reload
	movq	1728(%rsp), %rdx        # 8-byte Reload
	movq	1800(%rsp), %rcx        # 8-byte Reload
	movq	1944(%rsp), %r8         # 8-byte Reload
	movq	1736(%rsp), %r9         # 8-byte Reload
	movq	1760(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1728(%rsp), %rcx        # 8-byte Reload
	shlq	$3, %rcx
	movq	1952(%rsp), %rdi        # 8-byte Reload
	movq	1752(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	1800(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 1720(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	1744(%rsp), %r8         # 8-byte Reload
	movq	1736(%rsp), %r9         # 8-byte Reload
	movq	1760(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1768(%rsp), %rdi        # 8-byte Reload
	movq	1816(%rsp), %rsi        # 8-byte Reload
	movq	1992(%rsp), %rdx        # 8-byte Reload
	movq	1984(%rsp), %rcx        # 8-byte Reload
	movq	1960(%rsp), %r8         # 8-byte Reload
	movl	1972(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1784(%rsp), %rdi        # 8-byte Reload
	movq	1752(%rsp), %rsi        # 8-byte Reload
	movq	1792(%rsp), %rdx        # 8-byte Reload
	movq	1800(%rsp), %rcx        # 8-byte Reload
	movq	1776(%rsp), %r8         # 8-byte Reload
	movq	1736(%rsp), %r9         # 8-byte Reload
	movq	1760(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1800(%rsp), %rdi        # 8-byte Reload
	movq	1752(%rsp), %rsi        # 8-byte Reload
	movq	1720(%rsp), %rdx        # 8-byte Reload
	movq	1800(%rsp), %rcx        # 8-byte Reload
	movq	1744(%rsp), %r8         # 8-byte Reload
	movq	1736(%rsp), %r9         # 8-byte Reload
	movq	1760(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1720(%rsp), %rdi        # 8-byte Reload
	callq	malloc
.Ltmp257:
	movabsq	$1, %rcx
	leaq	.L.str56141, %r8
	movabsq	$0, %rdx
	leaq	.L.str792, %rsi
	movabsq	$2, %rdi
	leaq	.L.str55140, %r9
	movabsq	$3, %r10
	leaq	.L.str54139, %r11
	movabsq	$338, %rbx              # imm = 0x152
	leaq	.L.str50135, %r14
	leaq	.L.str489, %r15
	leaq	.L.str53138, %r12
	movl	$0, %ebp
	movl	$1, %r13d
	movq	%rax, 1712(%rsp)        # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 1704(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 1696(%rsp)        # 8-byte Spill
	leaq	.L.str1196, %rax
	movq	%rax, 1688(%rsp)        # 8-byte Spill
	movq	1704(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 1680(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	1696(%rsp), %rax        # 8-byte Reload
	movq	%rsi, 1672(%rsp)        # 8-byte Spill
	movq	%rax, %rsi
	movq	1712(%rsp), %rax        # 8-byte Reload
	movq	%rdx, 1664(%rsp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	%rcx, 1656(%rsp)        # 8-byte Spill
	movq	1688(%rsp), %rax        # 8-byte Reload
	movq	%r8, 1648(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	1664(%rsp), %rax        # 8-byte Reload
	movq	%r9, 1640(%rsp)         # 8-byte Spill
	movq	%rax, %r9
	movq	1672(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	movq	%r15, 1632(%rsp)        # 8-byte Spill
	movq	%r14, 1624(%rsp)        # 8-byte Spill
	movq	%r12, 1616(%rsp)        # 8-byte Spill
	movl	%ebp, 1612(%rsp)        # 4-byte Spill
	movl	%r13d, 1608(%rsp)       # 4-byte Spill
	movq	%rbx, 1600(%rsp)        # 8-byte Spill
	movq	%r10, 1592(%rsp)        # 8-byte Spill
	movq	%r11, 1584(%rsp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	.loc	2 338 0                 # eispack.c:338:0
.Ltmp258:
	movq	1600(%rsp), %rdi        # 8-byte Reload
	movq	1624(%rsp), %rsi        # 8-byte Reload
	movq	1632(%rsp), %rdx        # 8-byte Reload
	movq	1616(%rsp), %rcx        # 8-byte Reload
	movq	1680(%rsp), %r8         # 8-byte Reload
	movl	1612(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1592(%rsp), %rdi        # 8-byte Reload
	movq	1664(%rsp), %rsi        # 8-byte Reload
	movq	1664(%rsp), %rdx        # 8-byte Reload
	movq	1656(%rsp), %rcx        # 8-byte Reload
	movq	1584(%rsp), %r8         # 8-byte Reload
	movq	1664(%rsp), %r9         # 8-byte Reload
	movq	1672(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1680(%rsp), %rdi        # 8-byte Reload
	movq	1664(%rsp), %rsi        # 8-byte Reload
	movq	1664(%rsp), %rdx        # 8-byte Reload
	movq	1656(%rsp), %rcx        # 8-byte Reload
	movq	1640(%rsp), %r8         # 8-byte Reload
	movq	1664(%rsp), %r9         # 8-byte Reload
	movq	1672(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movb	2007(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	1656(%rsp), %rdi        # 8-byte Reload
	movq	1656(%rsp), %rsi        # 8-byte Reload
	movq	1656(%rsp), %rcx        # 8-byte Reload
	movq	1648(%rsp), %r8         # 8-byte Reload
	movq	1664(%rsp), %r9         # 8-byte Reload
	movq	1672(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	2007(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB8_3
.Ltmp259:
# BB#1:
	movabsq	$1, %rax
	movabsq	$64, %rcx
	leaq	.L.str994, %r8
	movabsq	$0, %rdx
	leaq	.L.str792, %rsi
	movabsq	$2, %rdi
	leaq	malloc, %r9
	leaq	.L.str52137, %r10
	movabsq	$340, %r11              # imm = 0x154
	leaq	.L.str50135, %rbx
	leaq	.L.str55140, %r14
	leaq	.L.str18103, %r15
	movabsq	$49, %r12
	movl	$0, %ebp
	movl	$1, %r13d
	movq	%rax, 1576(%rsp)        # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 1568(%rsp)        # 8-byte Spill
	leaq	.L.str57142, %rax
	movq	%rax, 1560(%rsp)        # 8-byte Spill
	leaq	.L.str1196, %rax
	movq	%rax, 1552(%rsp)        # 8-byte Spill
	movabsq	$336, %rax              # imm = 0x150
	movq	%rax, 1544(%rsp)        # 8-byte Spill
	movabsq	$44, %rax
	.loc	2 336 0                 # eispack.c:336:0
	movq	%rax, 1536(%rsp)        # 8-byte Spill
	movq	1544(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 1528(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 1520(%rsp)        # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, 1512(%rsp)        # 8-byte Spill
	movq	%r14, %rdx
	movq	1560(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 1504(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	1536(%rsp), %rax        # 8-byte Reload
	movq	%r8, 1496(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 1488(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r15, 1480(%rsp)        # 8-byte Spill
	movq	%r14, 1472(%rsp)        # 8-byte Spill
	movq	%r12, 1464(%rsp)        # 8-byte Spill
	movl	%ebp, 1460(%rsp)        # 4-byte Spill
	movl	%r13d, 1456(%rsp)       # 4-byte Spill
	movq	%rbx, 1448(%rsp)        # 8-byte Spill
	movq	%r10, 1440(%rsp)        # 8-byte Spill
	movq	%r11, 1432(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	1576(%rsp), %rdi        # 8-byte Reload
	movq	1504(%rsp), %rsi        # 8-byte Reload
	movq	1712(%rsp), %rdx        # 8-byte Reload
	movq	1576(%rsp), %rcx        # 8-byte Reload
	movq	1552(%rsp), %r8         # 8-byte Reload
	movq	1512(%rsp), %r9         # 8-byte Reload
	movq	1520(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1712(%rsp), %rax        # 8-byte Reload
	.loc	2 340 0                 # eispack.c:340:0
.Ltmp260:
	movq	1568(%rsp), %rdi        # 8-byte Reload
	movq	1504(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	1576(%rsp), %rcx        # 8-byte Reload
	movq	1560(%rsp), %r8         # 8-byte Reload
	movq	1512(%rsp), %r9         # 8-byte Reload
	movq	1520(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 1424(%rsp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movq	1432(%rsp), %rdi        # 8-byte Reload
	movq	1448(%rsp), %rsi        # 8-byte Reload
	movq	1472(%rsp), %rdx        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1464(%rsp), %r8         # 8-byte Reload
	movl	1460(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1528(%rsp), %rdi        # 8-byte Reload
	movq	1504(%rsp), %rsi        # 8-byte Reload
	movq	1488(%rsp), %rdx        # 8-byte Reload
	movq	1576(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1512(%rsp), %r9         # 8-byte Reload
	movq	1520(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1576(%rsp), %rdi        # 8-byte Reload
	movq	1504(%rsp), %rsi        # 8-byte Reload
	movq	1720(%rsp), %rdx        # 8-byte Reload
	movq	1576(%rsp), %rcx        # 8-byte Reload
	movq	1496(%rsp), %r8         # 8-byte Reload
	movq	1512(%rsp), %r9         # 8-byte Reload
	movq	1520(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1720(%rsp), %rdi        # 8-byte Reload
	callq	malloc
	movabsq	$5, %rdi
	movabsq	$64, %rcx
	movabsq	$1, %rdx
	leaq	.L.str20105, %rsi
	movabsq	$0, %r8
	leaq	.L.str792, %r9
	movabsq	$4, %r10
	leaq	.L.str57142, %r11
	movabsq	$3, %rbx
	leaq	.L.str60145, %r14
	movabsq	$2, %r15
	leaq	.L.str893, %r12
	movabsq	$32, %r13
	leaq	.L.str51136, %rbp
	movq	%rax, 1416(%rsp)        # 8-byte Spill
	movabsq	$6, %rax
	movq	%rax, 1408(%rsp)        # 8-byte Spill
	leaq	tred1, %rax
	movq	%rax, 1400(%rsp)        # 8-byte Spill
	leaq	.L.str59144, %rax
	movq	%rax, 1392(%rsp)        # 8-byte Spill
	movabsq	$342, %rax              # imm = 0x156
	movq	%rax, 1384(%rsp)        # 8-byte Spill
	leaq	.L.str50135, %rax
	movq	%rax, 1376(%rsp)        # 8-byte Spill
	leaq	.L.str55140, %rax
	movq	%rax, 1368(%rsp)        # 8-byte Spill
	leaq	.L.str58143, %rax
	movq	%rax, 1360(%rsp)        # 8-byte Spill
	movabsq	$49, %rax
	movq	%rsi, 1352(%rsp)        # 8-byte Spill
	movl	$0, %esi
	movl	%esi, 1348(%rsp)        # 4-byte Spill
	movl	$1, %esi
	movq	%rax, 1336(%rsp)        # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 1328(%rsp)        # 8-byte Spill
	leaq	.L.str18103, %rax
	movq	%rax, 1320(%rsp)        # 8-byte Spill
	movabsq	$340, %rax              # imm = 0x154
	movq	%rax, 1312(%rsp)        # 8-byte Spill
	movabsq	$44, %rax
	movq	%rax, 1304(%rsp)        # 8-byte Spill
	movq	1328(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 1296(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movl	%esi, 1292(%rsp)        # 4-byte Spill
	movq	%rcx, %rsi
	movq	1416(%rsp), %rax        # 8-byte Reload
	movq	%rdx, 1280(%rsp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	1280(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 1272(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	1320(%rsp), %rax        # 8-byte Reload
	movq	%r8, 1264(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	1264(%rsp), %rax        # 8-byte Reload
	movq	%r9, 1256(%rsp)         # 8-byte Spill
	movq	%rax, %r9
	movq	1256(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	movq	%rbp, 1248(%rsp)        # 8-byte Spill
	movq	%r15, 1240(%rsp)        # 8-byte Spill
	movq	%r12, 1232(%rsp)        # 8-byte Spill
	movq	%r13, 1224(%rsp)        # 8-byte Spill
	movq	%r14, 1216(%rsp)        # 8-byte Spill
	movq	%rbx, 1208(%rsp)        # 8-byte Spill
	movq	%r10, 1200(%rsp)        # 8-byte Spill
	movq	%r11, 1192(%rsp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movq	1312(%rsp), %rdi        # 8-byte Reload
	movq	1376(%rsp), %rsi        # 8-byte Reload
	movq	1368(%rsp), %rdx        # 8-byte Reload
	movq	1352(%rsp), %rcx        # 8-byte Reload
	movq	1304(%rsp), %r8         # 8-byte Reload
	movl	1348(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1280(%rsp), %rdi        # 8-byte Reload
	movq	1272(%rsp), %rsi        # 8-byte Reload
	movq	1416(%rsp), %rdx        # 8-byte Reload
	movq	1280(%rsp), %rcx        # 8-byte Reload
	movq	1320(%rsp), %r8         # 8-byte Reload
	movq	1264(%rsp), %r9         # 8-byte Reload
	movq	1256(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1416(%rsp), %rax        # 8-byte Reload
	movq	1328(%rsp), %rdi        # 8-byte Reload
	movq	1272(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	1280(%rsp), %rcx        # 8-byte Reload
	movq	1352(%rsp), %r8         # 8-byte Reload
	movq	1264(%rsp), %r9         # 8-byte Reload
	movq	1256(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 1184(%rsp)        # 8-byte Spill
	callq	trace_logger_log_ptr
.Ltmp261:
	#DEBUG_VALUE: rs:fv2 <- [RSP+1184]
	.loc	2 342 0                 # eispack.c:342:0
	movq	1384(%rsp), %rdi        # 8-byte Reload
	movq	1376(%rsp), %rsi        # 8-byte Reload
	movq	1368(%rsp), %rdx        # 8-byte Reload
	movq	1360(%rsp), %rcx        # 8-byte Reload
	movq	1336(%rsp), %r8         # 8-byte Reload
	movl	1348(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1408(%rsp), %rdi        # 8-byte Reload
	movq	1272(%rsp), %rsi        # 8-byte Reload
	movq	1400(%rsp), %rdx        # 8-byte Reload
	movq	1280(%rsp), %rcx        # 8-byte Reload
	movq	1392(%rsp), %r8         # 8-byte Reload
	movq	1264(%rsp), %r9         # 8-byte Reload
	movq	1256(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	1844(%rsp), %esi        # 4-byte Reload
	movl	%esi, %esi
	movl	%esi, %edx
	movq	1280(%rsp), %rdi        # 8-byte Reload
	movq	1224(%rsp), %rsi        # 8-byte Reload
	movq	1280(%rsp), %rcx        # 8-byte Reload
	movq	1248(%rsp), %r8         # 8-byte Reload
	movq	1264(%rsp), %r9         # 8-byte Reload
	movq	1256(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1240(%rsp), %rdi        # 8-byte Reload
	movq	1272(%rsp), %rsi        # 8-byte Reload
	movq	1976(%rsp), %rdx        # 8-byte Reload
	movq	1280(%rsp), %rcx        # 8-byte Reload
	movq	1232(%rsp), %r8         # 8-byte Reload
	movq	1264(%rsp), %r9         # 8-byte Reload
	movq	1256(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1208(%rsp), %rdi        # 8-byte Reload
	movq	1272(%rsp), %rsi        # 8-byte Reload
	movq	1824(%rsp), %rdx        # 8-byte Reload
	movq	1280(%rsp), %rcx        # 8-byte Reload
	movq	1216(%rsp), %r8         # 8-byte Reload
	movq	1264(%rsp), %r9         # 8-byte Reload
	movq	1256(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1200(%rsp), %rdi        # 8-byte Reload
	movq	1272(%rsp), %rsi        # 8-byte Reload
	movq	1424(%rsp), %rdx        # 8-byte Reload
	movq	1280(%rsp), %rcx        # 8-byte Reload
	movq	1192(%rsp), %r8         # 8-byte Reload
	movq	1264(%rsp), %r9         # 8-byte Reload
	movq	1256(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1296(%rsp), %rdi        # 8-byte Reload
	movq	1272(%rsp), %rsi        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1280(%rsp), %rcx        # 8-byte Reload
	movq	1352(%rsp), %r8         # 8-byte Reload
	movq	1264(%rsp), %r9         # 8-byte Reload
	movq	1256(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	1844(%rsp), %edi        # 4-byte Reload
	movq	1976(%rsp), %rsi        # 8-byte Reload
	movq	1824(%rsp), %rdx        # 8-byte Reload
	movq	1424(%rsp), %rcx        # 8-byte Reload
	movq	1184(%rsp), %r8         # 8-byte Reload
	callq	tred1
.Ltmp262:
	movabsq	$3, %rdi
	movabsq	$64, %rax
	movabsq	$1, %rcx
	leaq	.L.str20105, %r8
	movabsq	$0, %rdx
	leaq	.L.str792, %rsi
	movabsq	$2, %r9
	leaq	.L.str60145, %r10
	movabsq	$32, %r11
	leaq	.L.str51136, %rbx
	movabsq	$4, %r14
	leaq	tqlrat, %r15
	leaq	.L.str61146, %r12
	movabsq	$344, %r13              # imm = 0x158
	leaq	.L.str50135, %rbp
	movq	%rax, 1176(%rsp)        # 8-byte Spill
	leaq	.L.str55140, %rax
	movq	%rax, 1168(%rsp)        # 8-byte Spill
	leaq	.L.str21106, %rax
	movq	%rax, 1160(%rsp)        # 8-byte Spill
	movabsq	$49, %rax
	movq	%rsi, 1152(%rsp)        # 8-byte Spill
	movl	$0, %esi
	movl	%esi, 1148(%rsp)        # 4-byte Spill
	movl	$1, %esi
	.loc	2 344 0                 # eispack.c:344:0
	movq	%rdi, 1136(%rsp)        # 8-byte Spill
	movq	%r13, %rdi
	movl	%esi, 1132(%rsp)        # 4-byte Spill
	movq	%rbp, %rsi
	movq	1168(%rsp), %r13        # 8-byte Reload
	movq	%rdx, 1120(%rsp)        # 8-byte Spill
	movq	%r13, %rdx
	movq	1160(%rsp), %rbp        # 8-byte Reload
	movq	%rcx, 1112(%rsp)        # 8-byte Spill
	movq	%rbp, %rcx
	movq	%r8, 1104(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movl	1148(%rsp), %ebp        # 4-byte Reload
	movq	%r9, 1096(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r12, 1088(%rsp)        # 8-byte Spill
	movq	%r14, 1080(%rsp)        # 8-byte Spill
	movq	%rbx, 1072(%rsp)        # 8-byte Spill
	movq	%r15, 1064(%rsp)        # 8-byte Spill
	movq	%r11, 1056(%rsp)        # 8-byte Spill
	movq	%r10, 1048(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	1080(%rsp), %rdi        # 8-byte Reload
	movq	1176(%rsp), %rsi        # 8-byte Reload
	movq	1064(%rsp), %rdx        # 8-byte Reload
	movq	1112(%rsp), %rcx        # 8-byte Reload
	movq	1088(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1152(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	1844(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %esi
	movl	%esi, %edx
	movq	1112(%rsp), %rdi        # 8-byte Reload
	movq	1056(%rsp), %rsi        # 8-byte Reload
	movq	1112(%rsp), %rcx        # 8-byte Reload
	movq	1072(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1152(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1096(%rsp), %rdi        # 8-byte Reload
	movq	1176(%rsp), %rsi        # 8-byte Reload
	movq	1824(%rsp), %rdx        # 8-byte Reload
	movq	1112(%rsp), %rcx        # 8-byte Reload
	movq	1048(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1152(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	1176(%rsp), %rsi        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1112(%rsp), %rcx        # 8-byte Reload
	movq	1104(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1152(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	1844(%rsp), %edi        # 4-byte Reload
	movq	1824(%rsp), %rsi        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	callq	tqlrat
	movabsq	$1, %rcx
	movabsq	$64, %rdx
	leaq	.L.str18103, %r8
	movabsq	$0, %rsi
	leaq	.L.str792, %r9
	movabsq	$2, %r10
	leaq	free, %r11
	leaq	.L.str63148, %rbx
	movabsq	$348, %rdi              # imm = 0x15C
	leaq	.L.str50135, %r14
	leaq	.L.str55140, %r15
	leaq	.L.str62147, %r12
	movabsq	$49, %r13
	movl	$0, %ebp
	movl	%eax, 1044(%rsp)        # 4-byte Spill
	movl	$1, %eax
	movq	%rcx, 1032(%rsp)        # 8-byte Spill
	movabsq	$19134, %rcx            # imm = 0x4ABE
	movq	%rcx, 1024(%rsp)        # 8-byte Spill
	leaq	.L.str22107, %rcx
	movq	%rcx, 1016(%rsp)        # 8-byte Spill
	movabsq	$32, %rcx
	movq	%rcx, 1008(%rsp)        # 8-byte Spill
	leaq	.L.str21106, %rcx
	movq	%rcx, 1000(%rsp)        # 8-byte Spill
	leaq	.L.str1499, %rcx
	movq	%rcx, 992(%rsp)         # 8-byte Spill
	movabsq	$346, %rcx              # imm = 0x15A
	movq	%rcx, 984(%rsp)         # 8-byte Spill
	movabsq	$46, %rcx
	movl	%eax, 980(%rsp)         # 4-byte Spill
	movl	1044(%rsp), %eax        # 4-byte Reload
	movl	%eax, %eax
                                        # kill: RAX<def> EAX<kill>
	movq	%rax, 968(%rsp)         # 8-byte Spill
	movq	1024(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 960(%rsp)         # 8-byte Spill
	movq	%rax, %rdi
	movq	1008(%rsp), %rax        # 8-byte Reload
	movq	%rsi, 952(%rsp)         # 8-byte Spill
	movq	%rax, %rsi
	movq	968(%rsp), %rax         # 8-byte Reload
	movq	%rdx, 944(%rsp)         # 8-byte Spill
	movq	%rax, %rdx
	movq	1032(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 936(%rsp)         # 8-byte Spill
	movq	%rax, %rcx
	movq	1000(%rsp), %rax        # 8-byte Reload
	movq	%r8, 928(%rsp)          # 8-byte Spill
	movq	%rax, %r8
	movq	952(%rsp), %rax         # 8-byte Reload
	movq	%r9, 920(%rsp)          # 8-byte Spill
	movq	%rax, %r9
	movq	920(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%ebp, 916(%rsp)         # 4-byte Spill
	movq	%r15, 904(%rsp)         # 8-byte Spill
	movq	%r12, 896(%rsp)         # 8-byte Spill
	movq	%r14, 888(%rsp)         # 8-byte Spill
	movq	%r13, 880(%rsp)         # 8-byte Spill
	movq	%r10, 872(%rsp)         # 8-byte Spill
	movq	%r11, 864(%rsp)         # 8-byte Spill
	movq	%rbx, 856(%rsp)         # 8-byte Spill
	callq	trace_logger_log_int
.Ltmp263:
	#DEBUG_VALUE: rs:ierr <- [RSP+1044]
	.loc	2 346 0                 # eispack.c:346:0
	movq	984(%rsp), %rdi         # 8-byte Reload
	movq	888(%rsp), %rsi         # 8-byte Reload
	movq	904(%rsp), %rdx         # 8-byte Reload
	movq	1016(%rsp), %rcx        # 8-byte Reload
	movq	936(%rsp), %r8          # 8-byte Reload
	movl	916(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	872(%rsp), %rdi         # 8-byte Reload
	movq	1008(%rsp), %rsi        # 8-byte Reload
	movq	952(%rsp), %rdx         # 8-byte Reload
	movq	952(%rsp), %rcx         # 8-byte Reload
	movq	992(%rsp), %r8          # 8-byte Reload
	movq	952(%rsp), %r9          # 8-byte Reload
	movq	920(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	1044(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %esi
	movl	%esi, %edx
	movq	1032(%rsp), %rdi        # 8-byte Reload
	movq	1008(%rsp), %rsi        # 8-byte Reload
	movq	1032(%rsp), %rcx        # 8-byte Reload
	movq	1000(%rsp), %r8         # 8-byte Reload
	movq	952(%rsp), %r9          # 8-byte Reload
	movq	920(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	1044(%rsp), %ebp        # 4-byte Reload
	cmpl	$0, %ebp
	sete	%al
	.loc	2 348 0                 # eispack.c:348:0
.Ltmp264:
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	1024(%rsp), %rdi        # 8-byte Reload
	movq	1032(%rsp), %rsi        # 8-byte Reload
	movq	1032(%rsp), %rcx        # 8-byte Reload
	movq	1016(%rsp), %r8         # 8-byte Reload
	movq	952(%rsp), %r9          # 8-byte Reload
	movq	920(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 855(%rsp)          # 1-byte Spill
	callq	trace_logger_log_int
	movq	960(%rsp), %rdi         # 8-byte Reload
	movq	888(%rsp), %rsi         # 8-byte Reload
	movq	904(%rsp), %rdx         # 8-byte Reload
	movq	896(%rsp), %rcx         # 8-byte Reload
	movq	880(%rsp), %r8          # 8-byte Reload
	movl	916(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	872(%rsp), %rdi         # 8-byte Reload
	movq	944(%rsp), %rsi         # 8-byte Reload
	movq	864(%rsp), %rdx         # 8-byte Reload
	movq	1032(%rsp), %rcx        # 8-byte Reload
	movq	856(%rsp), %r8          # 8-byte Reload
	movq	952(%rsp), %r9          # 8-byte Reload
	movq	920(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1032(%rsp), %rdi        # 8-byte Reload
	movq	944(%rsp), %rsi         # 8-byte Reload
	movq	1416(%rsp), %rdx        # 8-byte Reload
	movq	1032(%rsp), %rcx        # 8-byte Reload
	movq	928(%rsp), %r8          # 8-byte Reload
	movq	952(%rsp), %r9          # 8-byte Reload
	movq	920(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1416(%rsp), %rdi        # 8-byte Reload
	callq	free
.Ltmp265:
	movabsq	$1, %rcx
	leaq	.L.str22107, %r8
	movabsq	$0, %rdx
	leaq	.L.str792, %rsi
	movabsq	$2, %rdi
	leaq	.L.str65150, %r9
	movabsq	$3, %r10
	leaq	.L.str54139, %r11
	movabsq	$346, %rbx              # imm = 0x15A
	leaq	.L.str50135, %r14
	leaq	.L.str55140, %r15
	leaq	.L.str64149, %r12
	movl	$0, %ebp
	movl	$1, %eax
.Ltmp266:
	.loc	2 346 0                 # eispack.c:346:0
	movq	%rdi, 840(%rsp)         # 8-byte Spill
	movq	%rbx, %rdi
	movq	%rsi, 832(%rsp)         # 8-byte Spill
	movq	%r14, %rsi
	movq	%rdx, 824(%rsp)         # 8-byte Spill
	movq	%r15, %rdx
	movq	%rcx, 816(%rsp)         # 8-byte Spill
	movq	%r12, %rcx
	movq	840(%rsp), %rbx         # 8-byte Reload
	movq	%r8, 808(%rsp)          # 8-byte Spill
	movq	%rbx, %r8
	movq	%r9, 800(%rsp)          # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r10, 792(%rsp)         # 8-byte Spill
	movl	%eax, 788(%rsp)         # 4-byte Spill
	movq	%r11, 776(%rsp)         # 8-byte Spill
	callq	trace_logger_log0
	movq	792(%rsp), %rdi         # 8-byte Reload
	movq	824(%rsp), %rsi         # 8-byte Reload
	movq	824(%rsp), %rdx         # 8-byte Reload
	movq	816(%rsp), %rcx         # 8-byte Reload
	movq	776(%rsp), %r8          # 8-byte Reload
	movq	824(%rsp), %r9          # 8-byte Reload
	movq	832(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	840(%rsp), %rdi         # 8-byte Reload
	movq	824(%rsp), %rsi         # 8-byte Reload
	movq	824(%rsp), %rdx         # 8-byte Reload
	movq	816(%rsp), %rcx         # 8-byte Reload
	movq	800(%rsp), %r8          # 8-byte Reload
	movq	824(%rsp), %r9          # 8-byte Reload
	movq	832(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	855(%rsp), %al          # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	816(%rsp), %rdi         # 8-byte Reload
	movq	816(%rsp), %rsi         # 8-byte Reload
	movq	816(%rsp), %rcx         # 8-byte Reload
	movq	808(%rsp), %r8          # 8-byte Reload
	movq	824(%rsp), %r9          # 8-byte Reload
	movq	832(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	855(%rsp), %al          # 1-byte Reload
	testb	$1, %al
	jne	.LBB8_3
# BB#2:
	movabsq	$1, %rax
	movabsq	$64, %rcx
	leaq	.L.str85, %rdx
	movabsq	$0, %rsi
	leaq	.L.str1499, %r8
	leaq	.L.str792, %rdi
	movabsq	$2, %r9
	leaq	printf, %r10
	leaq	.L.str66151, %r11
	movabsq	$350, %rbx              # imm = 0x15E
	leaq	.L.str50135, %r14
	leaq	.L.str65150, %r15
	leaq	.L.str26111, %r12
	movabsq	$49, %r13
	movl	$0, %ebp
	movq	%rsi, 768(%rsp)         # 8-byte Spill
	movl	$1, %esi
	.loc	2 350 0                 # eispack.c:350:0
.Ltmp267:
	movq	%rdi, 760(%rsp)         # 8-byte Spill
	movq	%rbx, %rdi
	movl	%esi, 756(%rsp)         # 4-byte Spill
	movq	%r14, %rsi
	movq	%rdx, 744(%rsp)         # 8-byte Spill
	movq	%r15, %rdx
	movq	%rcx, 736(%rsp)         # 8-byte Spill
	movq	%r12, %rcx
	movq	%r8, 728(%rsp)          # 8-byte Spill
	movq	%r13, %r8
	movq	%r9, 720(%rsp)          # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%rax, 712(%rsp)         # 8-byte Spill
	movq	%r10, 704(%rsp)         # 8-byte Spill
	movq	%r11, 696(%rsp)         # 8-byte Spill
	callq	trace_logger_log0
	movq	720(%rsp), %rdi         # 8-byte Reload
	movq	736(%rsp), %rsi         # 8-byte Reload
	movq	704(%rsp), %rdx         # 8-byte Reload
	movq	712(%rsp), %rcx         # 8-byte Reload
	movq	696(%rsp), %r8          # 8-byte Reload
	movq	768(%rsp), %r9          # 8-byte Reload
	movq	760(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	712(%rsp), %rdi         # 8-byte Reload
	movq	736(%rsp), %rsi         # 8-byte Reload
	movq	744(%rsp), %rdx         # 8-byte Reload
	movq	768(%rsp), %rcx         # 8-byte Reload
	movq	728(%rsp), %r8          # 8-byte Reload
	movq	768(%rsp), %r9          # 8-byte Reload
	movq	760(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$.L.str85, %ebp
	movl	%ebp, %edi
	xorl	%ebp, %ebp
	movb	%bpl, %al
	callq	printf
	movabsq	$1, %rcx
	movabsq	$64, %rdx
	leaq	.L.str186, %rsi
	movabsq	$0, %rdi
	leaq	.L.str1499, %r8
	leaq	.L.str792, %r9
	movabsq	$2, %r10
	leaq	printf, %r11
	leaq	.L.str66151, %rbx
	movabsq	$351, %r14              # imm = 0x15F
	leaq	.L.str50135, %r15
	leaq	.L.str65150, %r12
	leaq	.L.str32117, %r13
	movabsq	$49, %rbp
	movl	%eax, 692(%rsp)         # 4-byte Spill
	movl	$0, %eax
	movl	%eax, 688(%rsp)         # 4-byte Spill
	movl	$1, %eax
	movq	%rcx, 680(%rsp)         # 8-byte Spill
	movabsq	$19134, %rcx            # imm = 0x4ABE
	movq	%rcx, 672(%rsp)         # 8-byte Spill
	movabsq	$32, %rcx
	movq	%rcx, 664(%rsp)         # 8-byte Spill
	leaq	.L.str26111, %rcx
	.loc	2 351 0                 # eispack.c:351:0
	movl	%eax, 660(%rsp)         # 4-byte Spill
	movl	692(%rsp), %eax         # 4-byte Reload
	movl	%eax, %eax
                                        # kill: RAX<def> EAX<kill>
	movq	%rax, 648(%rsp)         # 8-byte Spill
	movq	672(%rsp), %rax         # 8-byte Reload
	movq	%rdi, 640(%rsp)         # 8-byte Spill
	movq	%rax, %rdi
	movq	664(%rsp), %rax         # 8-byte Reload
	movq	%rsi, 632(%rsp)         # 8-byte Spill
	movq	%rax, %rsi
	movq	648(%rsp), %rax         # 8-byte Reload
	movq	%rdx, 624(%rsp)         # 8-byte Spill
	movq	%rax, %rdx
	movq	680(%rsp), %rax         # 8-byte Reload
	movq	%rcx, 616(%rsp)         # 8-byte Spill
	movq	%rax, %rcx
	movq	616(%rsp), %rax         # 8-byte Reload
	movq	%r8, 608(%rsp)          # 8-byte Spill
	movq	%rax, %r8
	movq	640(%rsp), %rax         # 8-byte Reload
	movq	%r9, 600(%rsp)          # 8-byte Spill
	movq	%rax, %r9
	movq	600(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	movq	%rbp, 592(%rsp)         # 8-byte Spill
	movq	%r15, 584(%rsp)         # 8-byte Spill
	movq	%r12, 576(%rsp)         # 8-byte Spill
	movq	%r13, 568(%rsp)         # 8-byte Spill
	movq	%r14, 560(%rsp)         # 8-byte Spill
	movq	%rbx, 552(%rsp)         # 8-byte Spill
	movq	%r10, 544(%rsp)         # 8-byte Spill
	movq	%r11, 536(%rsp)         # 8-byte Spill
	callq	trace_logger_log_int
	movq	560(%rsp), %rdi         # 8-byte Reload
	movq	584(%rsp), %rsi         # 8-byte Reload
	movq	576(%rsp), %rdx         # 8-byte Reload
	movq	568(%rsp), %rcx         # 8-byte Reload
	movq	592(%rsp), %r8          # 8-byte Reload
	movl	688(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	544(%rsp), %rdi         # 8-byte Reload
	movq	624(%rsp), %rsi         # 8-byte Reload
	movq	536(%rsp), %rdx         # 8-byte Reload
	movq	680(%rsp), %rcx         # 8-byte Reload
	movq	552(%rsp), %r8          # 8-byte Reload
	movq	640(%rsp), %r9          # 8-byte Reload
	movq	600(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	680(%rsp), %rdi         # 8-byte Reload
	movq	624(%rsp), %rsi         # 8-byte Reload
	movq	632(%rsp), %rdx         # 8-byte Reload
	movq	640(%rsp), %rcx         # 8-byte Reload
	movq	608(%rsp), %r8          # 8-byte Reload
	movq	640(%rsp), %r9          # 8-byte Reload
	movq	600(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$.L.str186, %esi
	movl	%esi, %edi
	xorl	%esi, %esi
	movb	%sil, %al
	callq	printf
	movabsq	$1, %rcx
	movabsq	$64, %rdx
	leaq	.L.str287, %rdi
	movabsq	$0, %r8
	leaq	.L.str1499, %r9
	leaq	.L.str792, %r10
	movabsq	$2, %r11
	leaq	printf, %rbx
	leaq	.L.str66151, %r14
	movabsq	$352, %r15              # imm = 0x160
	leaq	.L.str50135, %rsi
	leaq	.L.str65150, %r12
	leaq	.L.str33118, %r13
	movabsq	$49, %rbp
	movl	%eax, 532(%rsp)         # 4-byte Spill
	movl	$0, %eax
	movl	%eax, 528(%rsp)         # 4-byte Spill
	movl	$1, %eax
	movq	%rcx, 520(%rsp)         # 8-byte Spill
	movabsq	$19134, %rcx            # imm = 0x4ABE
	movq	%rcx, 512(%rsp)         # 8-byte Spill
	movabsq	$32, %rcx
	movq	%rcx, 504(%rsp)         # 8-byte Spill
	leaq	.L.str32117, %rcx
	.loc	2 352 0                 # eispack.c:352:0
	movl	%eax, 500(%rsp)         # 4-byte Spill
	movl	532(%rsp), %eax         # 4-byte Reload
	movl	%eax, %eax
                                        # kill: RAX<def> EAX<kill>
	movq	%rax, 488(%rsp)         # 8-byte Spill
	movq	512(%rsp), %rax         # 8-byte Reload
	movq	%rdi, 480(%rsp)         # 8-byte Spill
	movq	%rax, %rdi
	movq	504(%rsp), %rax         # 8-byte Reload
	movq	%rsi, 472(%rsp)         # 8-byte Spill
	movq	%rax, %rsi
	movq	488(%rsp), %rax         # 8-byte Reload
	movq	%rdx, 464(%rsp)         # 8-byte Spill
	movq	%rax, %rdx
	movq	520(%rsp), %rax         # 8-byte Reload
	movq	%rcx, 456(%rsp)         # 8-byte Spill
	movq	%rax, %rcx
	movq	456(%rsp), %rax         # 8-byte Reload
	movq	%r8, 448(%rsp)          # 8-byte Spill
	movq	%rax, %r8
	movq	448(%rsp), %rax         # 8-byte Reload
	movq	%r9, 440(%rsp)          # 8-byte Spill
	movq	%rax, %r9
	movq	%r10, (%rsp)
	movq	%rbp, 432(%rsp)         # 8-byte Spill
	movq	%r13, 424(%rsp)         # 8-byte Spill
	movq	%r12, 416(%rsp)         # 8-byte Spill
	movq	%r15, 408(%rsp)         # 8-byte Spill
	movq	%r14, 400(%rsp)         # 8-byte Spill
	movq	%r10, 392(%rsp)         # 8-byte Spill
	movq	%r11, 384(%rsp)         # 8-byte Spill
	movq	%rbx, 376(%rsp)         # 8-byte Spill
	callq	trace_logger_log_int
	movq	408(%rsp), %rdi         # 8-byte Reload
	movq	472(%rsp), %rsi         # 8-byte Reload
	movq	416(%rsp), %rdx         # 8-byte Reload
	movq	424(%rsp), %rcx         # 8-byte Reload
	movq	432(%rsp), %r8          # 8-byte Reload
	movl	528(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	384(%rsp), %rdi         # 8-byte Reload
	movq	464(%rsp), %rsi         # 8-byte Reload
	movq	376(%rsp), %rdx         # 8-byte Reload
	movq	520(%rsp), %rcx         # 8-byte Reload
	movq	400(%rsp), %r8          # 8-byte Reload
	movq	448(%rsp), %r9          # 8-byte Reload
	movq	392(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	520(%rsp), %rdi         # 8-byte Reload
	movq	464(%rsp), %rsi         # 8-byte Reload
	movq	480(%rsp), %rdx         # 8-byte Reload
	movq	448(%rsp), %rcx         # 8-byte Reload
	movq	440(%rsp), %r8          # 8-byte Reload
	movq	448(%rsp), %r9          # 8-byte Reload
	movq	392(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$.L.str287, %esi
	movl	%esi, %edi
	xorl	%esi, %esi
	movb	%sil, %al
	callq	printf
	movabsq	$1, %rcx
	movabsq	$0, %rdx
	leaq	.L.str68153, %r8
	leaq	.L.str792, %rdi
	movabsq	$353, %r9               # imm = 0x161
	leaq	.L.str50135, %rsi
	leaq	.L.str65150, %r10
	leaq	.L.str67152, %r11
	movabsq	$2, %rbx
	movl	$0, %ebp
	movl	$1, %r14d
	movabsq	$19134, %r15            # imm = 0x4ABE
	movabsq	$32, %r12
	leaq	.L.str33118, %r13
	.loc	2 353 0                 # eispack.c:353:0
	movl	%eax, %eax
                                        # kill: RAX<def> EAX<kill>
	movq	%rdi, 368(%rsp)         # 8-byte Spill
	movq	%r15, %rdi
	movq	%rsi, 360(%rsp)         # 8-byte Spill
	movq	%r12, %rsi
	movq	%rdx, 352(%rsp)         # 8-byte Spill
	movq	%rax, %rdx
	movq	%rcx, 344(%rsp)         # 8-byte Spill
	movq	%r8, 336(%rsp)          # 8-byte Spill
	movq	%r13, %r8
	movq	352(%rsp), %rax         # 8-byte Reload
	movq	%r9, 328(%rsp)          # 8-byte Spill
	movq	%rax, %r9
	movq	368(%rsp), %r15         # 8-byte Reload
	movq	%r15, (%rsp)
	movq	%r10, 320(%rsp)         # 8-byte Spill
	movq	%r11, 312(%rsp)         # 8-byte Spill
	movq	%rbx, 304(%rsp)         # 8-byte Spill
	movl	%r14d, 300(%rsp)        # 4-byte Spill
	movl	%ebp, 296(%rsp)         # 4-byte Spill
	callq	trace_logger_log_int
	movq	328(%rsp), %rdi         # 8-byte Reload
	movq	360(%rsp), %rsi         # 8-byte Reload
	movq	320(%rsp), %rdx         # 8-byte Reload
	movq	312(%rsp), %rcx         # 8-byte Reload
	movq	304(%rsp), %r8          # 8-byte Reload
	movl	296(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	344(%rsp), %rdi         # 8-byte Reload
	movq	352(%rsp), %rsi         # 8-byte Reload
	movq	352(%rsp), %rdx         # 8-byte Reload
	movq	344(%rsp), %rcx         # 8-byte Reload
	movq	336(%rsp), %r8          # 8-byte Reload
	movq	352(%rsp), %r9          # 8-byte Reload
	movq	368(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	1044(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, 292(%rsp)         # 4-byte Spill
	jmp	.LBB8_4
.Ltmp268:
.LBB8_3:
	movabsq	$1, %rax
	movabsq	$64, %rcx
	leaq	.L.str1196, %r8
	movabsq	$0, %rdx
	leaq	.L.str792, %rsi
	movabsq	$2, %rdi
	leaq	free, %r9
	leaq	.L.str63148, %r10
	movabsq	$358, %r11              # imm = 0x166
	leaq	.L.str50135, %rbx
	leaq	.L.str54139, %r14
	leaq	.L.str69154, %r15
	movabsq	$49, %r12
	movl	$0, %ebp
	movl	$1, %r13d
	.loc	2 358 0                 # eispack.c:358:0
	movq	%rdi, 280(%rsp)         # 8-byte Spill
	movq	%r11, %rdi
	movq	%rsi, 272(%rsp)         # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, 264(%rsp)         # 8-byte Spill
	movq	%r14, %rdx
	movq	%rcx, 256(%rsp)         # 8-byte Spill
	movq	%r15, %rcx
	movq	%r8, 248(%rsp)          # 8-byte Spill
	movq	%r12, %r8
	movq	%r9, 240(%rsp)          # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%rax, 232(%rsp)         # 8-byte Spill
	movq	%r10, 224(%rsp)         # 8-byte Spill
	movl	%r13d, 220(%rsp)        # 4-byte Spill
	callq	trace_logger_log0
	movq	280(%rsp), %rdi         # 8-byte Reload
	movq	256(%rsp), %rsi         # 8-byte Reload
	movq	240(%rsp), %rdx         # 8-byte Reload
	movq	232(%rsp), %rcx         # 8-byte Reload
	movq	224(%rsp), %r8          # 8-byte Reload
	movq	264(%rsp), %r9          # 8-byte Reload
	movq	272(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	232(%rsp), %rdi         # 8-byte Reload
	movq	256(%rsp), %rsi         # 8-byte Reload
	movq	1712(%rsp), %rdx        # 8-byte Reload
	movq	232(%rsp), %rcx         # 8-byte Reload
	movq	248(%rsp), %r8          # 8-byte Reload
	movq	264(%rsp), %r9          # 8-byte Reload
	movq	272(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1712(%rsp), %rdi        # 8-byte Reload
	callq	free
	movl	$0, %ebp
	movabsq	$1, %rax
	movabsq	$0, %rcx
	leaq	.L.str68153, %r8
	leaq	.L.str792, %rdx
	movabsq	$360, %rdi              # imm = 0x168
	leaq	.L.str50135, %rsi
	leaq	.L.str54139, %r9
	leaq	.L.str70155, %r10
	movabsq	$2, %r11
	movl	$1, %r13d
	.loc	2 360 0                 # eispack.c:360:0
	movq	%rdx, 208(%rsp)         # 8-byte Spill
	movq	%r9, %rdx
	movq	%rcx, 200(%rsp)         # 8-byte Spill
	movq	%r10, %rcx
	movq	%r8, 192(%rsp)          # 8-byte Spill
	movq	%r11, %r8
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movl	%ebp, 188(%rsp)         # 4-byte Spill
	movq	%rax, 176(%rsp)         # 8-byte Spill
	movl	%r13d, 172(%rsp)        # 4-byte Spill
	callq	trace_logger_log0
	movq	176(%rsp), %rdi         # 8-byte Reload
	movq	200(%rsp), %rsi         # 8-byte Reload
	movq	200(%rsp), %rdx         # 8-byte Reload
	movq	176(%rsp), %rcx         # 8-byte Reload
	movq	192(%rsp), %r8          # 8-byte Reload
	movq	200(%rsp), %r9          # 8-byte Reload
	movq	208(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	188(%rsp), %ebp         # 4-byte Reload
	movl	%ebp, 292(%rsp)         # 4-byte Spill
.LBB8_4:
	movl	292(%rsp), %eax         # 4-byte Reload
	movabsq	$1, %rcx
	movabsq	$32, %rdx
	leaq	.L.str71156, %rsi
	movabsq	$0, %rdi
	leaq	.L.str792, %r8
	movabsq	$361, %r9               # imm = 0x169
	leaq	.L.str50135, %r10
	leaq	.L.str68153, %r11
	leaq	.L.str72157, %rbx
	movl	$0, %ebp
	movl	$1, %r14d
	movabsq	$19134, %r15            # imm = 0x4ABE
	leaq	.L.str54139, %r12
	leaq	.L.str1499, %r13
	movq	%rcx, 160(%rsp)         # 8-byte Spill
	movabsq	$2, %rcx
	movq	%rcx, 152(%rsp)         # 8-byte Spill
	leaq	.L.str21106, %rcx
	movq	%rcx, 144(%rsp)         # 8-byte Spill
	leaq	.L.str65150, %rcx
	movq	%rcx, 136(%rsp)         # 8-byte Spill
	movabsq	$-1, %rcx
	movq	%rcx, 128(%rsp)         # 8-byte Spill
	movabsq	$48, %rcx
	.loc	2 361 0                 # eispack.c:361:0
	movq	%rcx, 120(%rsp)         # 8-byte Spill
	movq	128(%rsp), %rcx         # 8-byte Reload
	movq	%rdi, 112(%rsp)         # 8-byte Spill
	movq	%rcx, %rdi
	movq	%rsi, 104(%rsp)         # 8-byte Spill
	movq	%r10, %rsi
	movq	%rdx, 96(%rsp)          # 8-byte Spill
	movq	%r11, %rdx
	movq	104(%rsp), %rcx         # 8-byte Reload
	movq	%r8, 88(%rsp)           # 8-byte Spill
	movq	120(%rsp), %r8          # 8-byte Reload
	movq	%r9, 80(%rsp)           # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movl	%eax, 76(%rsp)          # 4-byte Spill
	movl	%r14d, 72(%rsp)         # 4-byte Spill
	movq	%r15, 64(%rsp)          # 8-byte Spill
	movq	%r12, 56(%rsp)          # 8-byte Spill
	movq	%r13, 48(%rsp)          # 8-byte Spill
	movl	%ebp, 44(%rsp)          # 4-byte Spill
	movq	%rbx, 32(%rsp)          # 8-byte Spill
	movq	%r10, 24(%rsp)          # 8-byte Spill
	movq	%r11, 16(%rsp)          # 8-byte Spill
	callq	trace_logger_log0
	movq	152(%rsp), %rdi         # 8-byte Reload
	movq	96(%rsp), %rsi          # 8-byte Reload
	movq	112(%rsp), %rdx         # 8-byte Reload
	movq	160(%rsp), %rcx         # 8-byte Reload
	movq	144(%rsp), %r8          # 8-byte Reload
	movq	160(%rsp), %r9          # 8-byte Reload
	movq	136(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	160(%rsp), %rdi         # 8-byte Reload
	movq	96(%rsp), %rsi          # 8-byte Reload
	movq	112(%rsp), %rdx         # 8-byte Reload
	movq	112(%rsp), %rcx         # 8-byte Reload
	movq	48(%rsp), %r8           # 8-byte Reload
	movq	160(%rsp), %r9          # 8-byte Reload
	movq	56(%rsp), %r10          # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	76(%rsp), %eax          # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	64(%rsp), %rdi          # 8-byte Reload
	movq	96(%rsp), %rsi          # 8-byte Reload
	movq	160(%rsp), %rcx         # 8-byte Reload
	movq	104(%rsp), %r8          # 8-byte Reload
	movq	112(%rsp), %r9          # 8-byte Reload
	movq	56(%rsp), %r10          # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	80(%rsp), %rdi          # 8-byte Reload
	movq	24(%rsp), %rsi          # 8-byte Reload
	movq	16(%rsp), %rdx          # 8-byte Reload
	movq	32(%rsp), %rcx          # 8-byte Reload
	movq	160(%rsp), %r8          # 8-byte Reload
	movl	44(%rsp), %r9d          # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	76(%rsp), %eax          # 4-byte Reload
	movl	%eax, %r9d
	movl	%r9d, %edx
	movq	160(%rsp), %rdi         # 8-byte Reload
	movq	96(%rsp), %rsi          # 8-byte Reload
	movq	160(%rsp), %rcx         # 8-byte Reload
	movq	104(%rsp), %r8          # 8-byte Reload
	movq	112(%rsp), %r9          # 8-byte Reload
	movq	88(%rsp), %r10          # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	76(%rsp), %eax          # 4-byte Reload
	addq	$2008, %rsp             # imm = 0x7D8
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
.Ltmp269:
.Ltmp270:
	.size	rs, .Ltmp270-rs
.Lfunc_end8:
	.cfi_endproc

	.section	.rodata.cst16,"aM",@progbits,16
	.align	16
.LCPI9_0:
	.quad	9223372036854775807     # double nan
	.quad	9223372036854775807     # double nan
	.section	.rodata.cst8,"aM",@progbits,8
	.align	8
.LCPI9_1:
	.quad	-9223372036854775808    # double -0
	.text
	.globl	tred1
	.align	16, 0x90
	.type	tred1,@function
tred1:                                  # @tred1
	.cfi_startproc
.Lfunc_begin9:
	.loc	2 765 0                 # eispack.c:765:0
# BB#0:
	pushq	%rbp
.Ltmp278:
	.cfi_def_cfa_offset 16
	pushq	%r15
.Ltmp279:
	.cfi_def_cfa_offset 24
	pushq	%r14
.Ltmp280:
	.cfi_def_cfa_offset 32
	pushq	%r13
.Ltmp281:
	.cfi_def_cfa_offset 40
	pushq	%r12
.Ltmp282:
	.cfi_def_cfa_offset 48
	pushq	%rbx
.Ltmp283:
	.cfi_def_cfa_offset 56
	subq	$11128, %rsp            # imm = 0x2B78
.Ltmp284:
	.cfi_def_cfa_offset 11184
.Ltmp285:
	.cfi_offset %rbx, -56
.Ltmp286:
	.cfi_offset %r12, -48
.Ltmp287:
	.cfi_offset %r13, -40
.Ltmp288:
	.cfi_offset %r14, -32
.Ltmp289:
	.cfi_offset %r15, -24
.Ltmp290:
	.cfi_offset %rbp, -16
	movabsq	$1, %rax
	leaq	.L.str590, %r9
	movabsq	$0, %r10
	leaq	.L.str792, %r11
	movabsq	$2, %rbx
	leaq	.L.str75160, %r14
	movabsq	$3, %r15
	leaq	.L.str74159, %r12
	movabsq	$776, %r13              # imm = 0x308
	leaq	.L.str59144, %rbp
	movq	%rax, 11120(%rsp)       # 8-byte Spill
	leaq	.L.str489, %rax
	movq	%rax, 11112(%rsp)       # 8-byte Spill
	leaq	.L.str53138, %rax
	movq	%rsi, 11104(%rsp)       # 8-byte Spill
	movl	$0, %esi
	movl	%esi, 11100(%rsp)       # 4-byte Spill
	movl	$1, %esi
	movq	%rax, 11088(%rsp)       # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 11080(%rsp)       # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 11072(%rsp)       # 8-byte Spill
	leaq	.L.str51136, %rax
	movq	%rax, 11064(%rsp)       # 8-byte Spill
	leaq	.L.str1499, %rax
	movq	%rax, 11056(%rsp)       # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 11048(%rsp)       # 8-byte Spill
	movabsq	$24601, %rax            # imm = 0x6019
	movq	%rax, 11040(%rsp)       # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 11032(%rsp)       # 8-byte Spill
	leaq	.L.str163, %rax
	movq	%rax, 11024(%rsp)       # 8-byte Spill
	leaq	.L.str160, %rax
	movq	%rax, 11016(%rsp)       # 8-byte Spill
	leaq	.L.str85170, %rax
	movq	%rax, 11008(%rsp)       # 8-byte Spill
	leaq	.L.str893, %rax
	.loc	2 697 0 prologue_end    # eispack.c:697:0
.Ltmp291:
	movl	%esi, 11004(%rsp)       # 4-byte Spill
	movl	%edi, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rax, 10992(%rsp)       # 8-byte Spill
	movq	11040(%rsp), %rax       # 8-byte Reload
	movl	%edi, 10988(%rsp)       # 4-byte Spill
	movq	%rax, %rdi
	movq	11072(%rsp), %rax       # 8-byte Reload
	movq	%rsi, 10976(%rsp)       # 8-byte Spill
	movq	%rax, %rsi
	movq	10976(%rsp), %rax       # 8-byte Reload
	movq	%rdx, 10968(%rsp)       # 8-byte Spill
	movq	%rax, %rdx
	movq	11120(%rsp), %rax       # 8-byte Reload
	movq	%rcx, 10960(%rsp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	11064(%rsp), %rax       # 8-byte Reload
	movq	%r8, 10952(%rsp)        # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 10944(%rsp)        # 8-byte Spill
	movq	%r10, %r9
	movq	%r11, (%rsp)
	movq	%r15, 10936(%rsp)       # 8-byte Spill
	movq	%r12, 10928(%rsp)       # 8-byte Spill
	movq	%rbp, 10920(%rsp)       # 8-byte Spill
	movq	%r13, 10912(%rsp)       # 8-byte Spill
	movq	%r14, 10904(%rsp)       # 8-byte Spill
	movq	%rbx, 10896(%rsp)       # 8-byte Spill
	movq	%r10, 10888(%rsp)       # 8-byte Spill
	movq	%r11, 10880(%rsp)       # 8-byte Spill
	callq	trace_logger_log_int
	movq	11040(%rsp), %rdi       # 8-byte Reload
	movq	11032(%rsp), %rsi       # 8-byte Reload
	movq	11104(%rsp), %rdx       # 8-byte Reload
	movq	11120(%rsp), %rcx       # 8-byte Reload
	movq	10992(%rsp), %r8        # 8-byte Reload
	movq	10888(%rsp), %r9        # 8-byte Reload
	movq	10880(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	11040(%rsp), %rdi       # 8-byte Reload
	movq	11032(%rsp), %rsi       # 8-byte Reload
	movq	10968(%rsp), %rdx       # 8-byte Reload
	movq	11120(%rsp), %rcx       # 8-byte Reload
	movq	11008(%rsp), %r8        # 8-byte Reload
	movq	10888(%rsp), %r9        # 8-byte Reload
	movq	10880(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	11040(%rsp), %rdi       # 8-byte Reload
	movq	11032(%rsp), %rsi       # 8-byte Reload
	movq	10960(%rsp), %rdx       # 8-byte Reload
	movq	11120(%rsp), %rcx       # 8-byte Reload
	movq	11016(%rsp), %r8        # 8-byte Reload
	movq	10888(%rsp), %r9        # 8-byte Reload
	movq	10880(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	11040(%rsp), %rdi       # 8-byte Reload
	movq	11032(%rsp), %rsi       # 8-byte Reload
	movq	10952(%rsp), %rdx       # 8-byte Reload
	movq	11120(%rsp), %rcx       # 8-byte Reload
	movq	11024(%rsp), %r8        # 8-byte Reload
	movq	10888(%rsp), %r9        # 8-byte Reload
	movq	10880(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	#DEBUG_VALUE: tred1:n <- [RSP+10988]
	#DEBUG_VALUE: tred1:a <- [RSP+11104]
	#DEBUG_VALUE: tred1:d <- [RSP+10968]
	#DEBUG_VALUE: tred1:e <- [RSP+10960]
	#DEBUG_VALUE: tred1:e2 <- [RSP+10952]
.Ltmp292:
	#DEBUG_VALUE: tred1:j <- 0
	.loc	2 776 0                 # eispack.c:776:0
	movq	10912(%rsp), %rdi       # 8-byte Reload
	movq	10920(%rsp), %rsi       # 8-byte Reload
	movq	11112(%rsp), %rdx       # 8-byte Reload
	movq	10944(%rsp), %rcx       # 8-byte Reload
	movq	11048(%rsp), %r8        # 8-byte Reload
	movl	11100(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	10896(%rsp), %rdi       # 8-byte Reload
	movq	11072(%rsp), %rsi       # 8-byte Reload
	movq	10888(%rsp), %rdx       # 8-byte Reload
	movq	10888(%rsp), %rcx       # 8-byte Reload
	movq	11056(%rsp), %r8        # 8-byte Reload
	movq	10888(%rsp), %r9        # 8-byte Reload
	movq	10880(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	10988(%rsp), %esi       # 4-byte Reload
	movl	%esi, %esi
	movl	%esi, %edx
	movq	11120(%rsp), %rdi       # 8-byte Reload
	movq	11072(%rsp), %rsi       # 8-byte Reload
	movq	11120(%rsp), %rcx       # 8-byte Reload
	movq	11064(%rsp), %r8        # 8-byte Reload
	movq	10888(%rsp), %r9        # 8-byte Reload
	movq	10880(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	10988(%rsp), %esi       # 4-byte Reload
	cmpl	$0, %esi
	setg	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	11080(%rsp), %rdi       # 8-byte Reload
	movq	11120(%rsp), %rsi       # 8-byte Reload
	movq	11120(%rsp), %rcx       # 8-byte Reload
	movq	10944(%rsp), %r8        # 8-byte Reload
	movq	10888(%rsp), %r9        # 8-byte Reload
	movq	10880(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 10879(%rsp)        # 1-byte Spill
	callq	trace_logger_log_int
	movq	10912(%rsp), %rdi       # 8-byte Reload
	movq	10920(%rsp), %rsi       # 8-byte Reload
	movq	11112(%rsp), %rdx       # 8-byte Reload
	movq	11088(%rsp), %rcx       # 8-byte Reload
	movq	10896(%rsp), %r8        # 8-byte Reload
	movl	11100(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	10936(%rsp), %rdi       # 8-byte Reload
	movq	10888(%rsp), %rsi       # 8-byte Reload
	movq	10888(%rsp), %rdx       # 8-byte Reload
	movq	11120(%rsp), %rcx       # 8-byte Reload
	movq	10928(%rsp), %r8        # 8-byte Reload
	movq	10888(%rsp), %r9        # 8-byte Reload
	movq	10880(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	10896(%rsp), %rdi       # 8-byte Reload
	movq	10888(%rsp), %rsi       # 8-byte Reload
	movq	10888(%rsp), %rdx       # 8-byte Reload
	movq	11120(%rsp), %rcx       # 8-byte Reload
	movq	10904(%rsp), %r8        # 8-byte Reload
	movq	10888(%rsp), %r9        # 8-byte Reload
	movq	10880(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	10879(%rsp), %al        # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, %edx
	movq	11120(%rsp), %rdi       # 8-byte Reload
	movq	11120(%rsp), %rsi       # 8-byte Reload
	movq	11120(%rsp), %rcx       # 8-byte Reload
	movq	10944(%rsp), %r8        # 8-byte Reload
	movq	10888(%rsp), %r9        # 8-byte Reload
	movq	10880(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	10879(%rsp), %al        # 1-byte Reload
	testb	$1, %al
	jne	.LBB9_1
	jmp	.LBB9_36
.Ltmp293:
.LBB9_1:                                # %.lr.ph58
	movabsq	$0, %rax
	movabsq	$1, %rcx
	leaq	.L.str77162, %r8
	leaq	.L.str792, %rdx
	movabsq	$776, %rdi              # imm = 0x308
	leaq	.L.str59144, %rsi
	leaq	.L.str74159, %r9
	leaq	.L.str76161, %r10
	movabsq	$2, %r11
	movl	$0, %ebx
	movl	$1, %ebp
	movabsq	$19134, %r14            # imm = 0x4ABE
	movabsq	$32, %r15
	leaq	.L.str994, %r12
	leaq	.L.str51136, %r13
	movq	%rax, 10864(%rsp)       # 8-byte Spill
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
	movq	%rax, 10856(%rsp)       # 8-byte Spill
	leaq	.L.str1499, %rax
	movq	%rax, 10848(%rsp)       # 8-byte Spill
	movabsq	$778, %rax              # imm = 0x30A
	movq	%rax, 10840(%rsp)       # 8-byte Spill
	movabsq	$8, %rax
	.loc	2 778 0                 # eispack.c:778:0
.Ltmp294:
	movq	%rax, 10832(%rsp)       # 8-byte Spill
	movq	10840(%rsp), %rax       # 8-byte Reload
	movq	%rdi, 10824(%rsp)       # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 10816(%rsp)       # 8-byte Spill
	movq	%rdx, 10808(%rsp)       # 8-byte Spill
	movq	%r9, %rdx
	movq	%rcx, 10800(%rsp)       # 8-byte Spill
	movq	%r12, %rcx
	movq	10832(%rsp), %rax       # 8-byte Reload
	movq	%r8, 10792(%rsp)        # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 10784(%rsp)        # 8-byte Spill
	movl	%ebx, %r9d
	movl	$1, (%rsp)
	movq	%r14, 10776(%rsp)       # 8-byte Spill
	movl	%ebp, 10772(%rsp)       # 4-byte Spill
	movq	%r15, 10760(%rsp)       # 8-byte Spill
	movq	%r13, 10752(%rsp)       # 8-byte Spill
	movq	%r12, 10744(%rsp)       # 8-byte Spill
	movl	%ebx, 10740(%rsp)       # 4-byte Spill
	movq	%r10, 10728(%rsp)       # 8-byte Spill
	movq	%r11, 10720(%rsp)       # 8-byte Spill
	callq	trace_logger_log0
	movq	10720(%rsp), %rdi       # 8-byte Reload
	movq	10760(%rsp), %rsi       # 8-byte Reload
	movq	10856(%rsp), %rdx       # 8-byte Reload
	movq	10864(%rsp), %rcx       # 8-byte Reload
	movq	10848(%rsp), %r8        # 8-byte Reload
	movq	10864(%rsp), %r9        # 8-byte Reload
	movq	10808(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	10988(%rsp), %ebx       # 4-byte Reload
	movl	%ebx, %ebp
	movl	%ebp, %edx
	movq	10800(%rsp), %rdi       # 8-byte Reload
	movq	10760(%rsp), %rsi       # 8-byte Reload
	movq	10800(%rsp), %rcx       # 8-byte Reload
	movq	10752(%rsp), %r8        # 8-byte Reload
	movq	10864(%rsp), %r9        # 8-byte Reload
	movq	10808(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	10988(%rsp), %ebx       # 4-byte Reload
	addl	$4294967295, %ebx       # imm = 0xFFFFFFFF
.Ltmp295:
	.loc	2 776 0                 # eispack.c:776:0
	movl	%ebx, %ebp
	movl	%ebp, %edx
	movq	10776(%rsp), %rdi       # 8-byte Reload
	movq	10760(%rsp), %rsi       # 8-byte Reload
	movq	10800(%rsp), %rcx       # 8-byte Reload
	movq	10744(%rsp), %r8        # 8-byte Reload
	movq	10864(%rsp), %r9        # 8-byte Reload
	movq	10808(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%ebx, 10716(%rsp)       # 4-byte Spill
	callq	trace_logger_log_int
	movq	10824(%rsp), %rdi       # 8-byte Reload
	movq	10816(%rsp), %rsi       # 8-byte Reload
	movq	10784(%rsp), %rdx       # 8-byte Reload
	movq	10728(%rsp), %rcx       # 8-byte Reload
	movq	10720(%rsp), %r8        # 8-byte Reload
	movl	10740(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	10800(%rsp), %rdi       # 8-byte Reload
	movq	10864(%rsp), %rsi       # 8-byte Reload
	movq	10864(%rsp), %rdx       # 8-byte Reload
	movq	10800(%rsp), %rcx       # 8-byte Reload
	movq	10792(%rsp), %r8        # 8-byte Reload
	movq	10864(%rsp), %r9        # 8-byte Reload
	movq	10808(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	10864(%rsp), %rax       # 8-byte Reload
	movq	%rax, 10704(%rsp)       # 8-byte Spill
	jmp	.LBB9_4
.Ltmp296:
.LBB9_2:                                # %.preheader53
	movabsq	$1, %rax
	leaq	.L.str1196, %rcx
	movabsq	$0, %rdx
	leaq	.L.str792, %rsi
	movabsq	$2, %rdi
	leaq	.L.str75160, %r8
	movabsq	$3, %r9
	leaq	.L.str80165, %r10
	movabsq	$781, %r11              # imm = 0x30D
	leaq	.L.str59144, %rbx
	leaq	.L.str78163, %r14
	leaq	.L.str79164, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 10696(%rsp)       # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 10688(%rsp)       # 8-byte Spill
	leaq	.L.str51136, %rax
	movq	%rax, 10680(%rsp)       # 8-byte Spill
	leaq	.L.str1499, %rax
	movq	%rax, 10672(%rsp)       # 8-byte Spill
	movabsq	$46, %rax
	.loc	2 781 0                 # eispack.c:781:0
.Ltmp297:
	movq	%rdi, 10664(%rsp)       # 8-byte Spill
	movq	%r11, %rdi
	movq	%rsi, 10656(%rsp)       # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, 10648(%rsp)       # 8-byte Spill
	movq	%r14, %rdx
	movq	%rcx, 10640(%rsp)       # 8-byte Spill
	movq	%r8, 10632(%rsp)        # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 10624(%rsp)        # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r14, 10616(%rsp)       # 8-byte Spill
	movq	%r15, 10608(%rsp)       # 8-byte Spill
	movl	%ebp, 10604(%rsp)       # 4-byte Spill
	movl	%r12d, 10600(%rsp)      # 4-byte Spill
	movq	%r13, 10592(%rsp)       # 8-byte Spill
	movq	%rbx, 10584(%rsp)       # 8-byte Spill
	movq	%r11, 10576(%rsp)       # 8-byte Spill
	movq	%r10, 10568(%rsp)       # 8-byte Spill
	callq	trace_logger_log0
	movq	10664(%rsp), %rdi       # 8-byte Reload
	movq	10688(%rsp), %rsi       # 8-byte Reload
	movq	10648(%rsp), %rdx       # 8-byte Reload
	movq	10648(%rsp), %rcx       # 8-byte Reload
	movq	10672(%rsp), %r8        # 8-byte Reload
	movq	10648(%rsp), %r9        # 8-byte Reload
	movq	10656(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	10988(%rsp), %ebp       # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	10696(%rsp), %rdi       # 8-byte Reload
	movq	10688(%rsp), %rsi       # 8-byte Reload
	movq	10696(%rsp), %rcx       # 8-byte Reload
	movq	10680(%rsp), %r8        # 8-byte Reload
	movq	10648(%rsp), %r9        # 8-byte Reload
	movq	10656(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	10988(%rsp), %ebp       # 4-byte Reload
	cmpl	$0, %ebp
	setg	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %r12d
	movl	%r12d, %edx
	movq	10592(%rsp), %rdi       # 8-byte Reload
	movq	10696(%rsp), %rsi       # 8-byte Reload
	movq	10696(%rsp), %rcx       # 8-byte Reload
	movq	10640(%rsp), %r8        # 8-byte Reload
	movq	10648(%rsp), %r9        # 8-byte Reload
	movq	10656(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 10567(%rsp)        # 1-byte Spill
	callq	trace_logger_log_int
	movq	10576(%rsp), %rdi       # 8-byte Reload
	movq	10584(%rsp), %rsi       # 8-byte Reload
	movq	10616(%rsp), %rdx       # 8-byte Reload
	movq	10608(%rsp), %rcx       # 8-byte Reload
	movq	10664(%rsp), %r8        # 8-byte Reload
	movl	10604(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	10624(%rsp), %rdi       # 8-byte Reload
	movq	10648(%rsp), %rsi       # 8-byte Reload
	movq	10648(%rsp), %rdx       # 8-byte Reload
	movq	10696(%rsp), %rcx       # 8-byte Reload
	movq	10568(%rsp), %r8        # 8-byte Reload
	movq	10648(%rsp), %r9        # 8-byte Reload
	movq	10656(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	10664(%rsp), %rdi       # 8-byte Reload
	movq	10648(%rsp), %rsi       # 8-byte Reload
	movq	10648(%rsp), %rdx       # 8-byte Reload
	movq	10696(%rsp), %rcx       # 8-byte Reload
	movq	10632(%rsp), %r8        # 8-byte Reload
	movq	10648(%rsp), %r9        # 8-byte Reload
	movq	10656(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	10567(%rsp), %al        # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	10696(%rsp), %rdi       # 8-byte Reload
	movq	10696(%rsp), %rsi       # 8-byte Reload
	movq	10696(%rsp), %rcx       # 8-byte Reload
	movq	10640(%rsp), %r8        # 8-byte Reload
	movq	10648(%rsp), %r9        # 8-byte Reload
	movq	10656(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	10567(%rsp), %al        # 1-byte Reload
	testb	$1, %al
	jne	.LBB9_3
	jmp	.LBB9_36
.LBB9_3:                                # %.lr.ph55
	movabsq	$0, %rax
	movabsq	$1, %rcx
	leaq	.L.str82167, %r8
	leaq	.L.str792, %rdx
	movabsq	$781, %rdi              # imm = 0x30D
	leaq	.L.str59144, %rsi
	leaq	.L.str80165, %r9
	leaq	.L.str81166, %r10
	movabsq	$2, %r11
	movl	$0, %ebx
	movl	$1, %ebp
	movabsq	$19134, %r14            # imm = 0x4ABE
	movabsq	$32, %r15
	leaq	.L.str1398, %r12
	leaq	.L.str51136, %r13
	movq	%rax, 10552(%rsp)       # 8-byte Spill
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
	movq	%rax, 10544(%rsp)       # 8-byte Spill
	leaq	.L.str1499, %rax
	movq	%rax, 10536(%rsp)       # 8-byte Spill
	movabsq	$783, %rax              # imm = 0x30F
	movq	%rax, 10528(%rsp)       # 8-byte Spill
	movabsq	$8, %rax
	.loc	2 783 0                 # eispack.c:783:0
.Ltmp298:
	movq	%rax, 10520(%rsp)       # 8-byte Spill
	movq	10528(%rsp), %rax       # 8-byte Reload
	movq	%rdi, 10512(%rsp)       # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 10504(%rsp)       # 8-byte Spill
	movq	%rdx, 10496(%rsp)       # 8-byte Spill
	movq	%r9, %rdx
	movq	%rcx, 10488(%rsp)       # 8-byte Spill
	movq	%r12, %rcx
	movq	10520(%rsp), %rax       # 8-byte Reload
	movq	%r8, 10480(%rsp)        # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 10472(%rsp)        # 8-byte Spill
	movl	%ebx, %r9d
	movl	$1, (%rsp)
	movq	%r14, 10464(%rsp)       # 8-byte Spill
	movl	%ebp, 10460(%rsp)       # 4-byte Spill
	movq	%r15, 10448(%rsp)       # 8-byte Spill
	movq	%r13, 10440(%rsp)       # 8-byte Spill
	movq	%r12, 10432(%rsp)       # 8-byte Spill
	movl	%ebx, 10428(%rsp)       # 4-byte Spill
	movq	%r10, 10416(%rsp)       # 8-byte Spill
	movq	%r11, 10408(%rsp)       # 8-byte Spill
	callq	trace_logger_log0
	movq	10408(%rsp), %rdi       # 8-byte Reload
	movq	10448(%rsp), %rsi       # 8-byte Reload
	movq	10544(%rsp), %rdx       # 8-byte Reload
	movq	10552(%rsp), %rcx       # 8-byte Reload
	movq	10536(%rsp), %r8        # 8-byte Reload
	movq	10552(%rsp), %r9        # 8-byte Reload
	movq	10496(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	10988(%rsp), %ebx       # 4-byte Reload
	movl	%ebx, %ebp
	movl	%ebp, %edx
	movq	10488(%rsp), %rdi       # 8-byte Reload
	movq	10448(%rsp), %rsi       # 8-byte Reload
	movq	10488(%rsp), %rcx       # 8-byte Reload
	movq	10440(%rsp), %r8        # 8-byte Reload
	movq	10552(%rsp), %r9        # 8-byte Reload
	movq	10496(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	10988(%rsp), %ebx       # 4-byte Reload
	addl	$4294967295, %ebx       # imm = 0xFFFFFFFF
.Ltmp299:
	.loc	2 781 0                 # eispack.c:781:0
	movl	%ebx, %ebp
	movl	%ebp, %edx
	movq	10464(%rsp), %rdi       # 8-byte Reload
	movq	10448(%rsp), %rsi       # 8-byte Reload
	movq	10488(%rsp), %rcx       # 8-byte Reload
	movq	10432(%rsp), %r8        # 8-byte Reload
	movq	10552(%rsp), %r9        # 8-byte Reload
	movq	10496(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%ebx, 10404(%rsp)       # 4-byte Spill
	callq	trace_logger_log_int
	movq	10512(%rsp), %rdi       # 8-byte Reload
	movq	10504(%rsp), %rsi       # 8-byte Reload
	movq	10472(%rsp), %rdx       # 8-byte Reload
	movq	10416(%rsp), %rcx       # 8-byte Reload
	movq	10408(%rsp), %r8        # 8-byte Reload
	movl	10428(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	10488(%rsp), %rdi       # 8-byte Reload
	movq	10552(%rsp), %rsi       # 8-byte Reload
	movq	10552(%rsp), %rdx       # 8-byte Reload
	movq	10488(%rsp), %rcx       # 8-byte Reload
	movq	10480(%rsp), %r8        # 8-byte Reload
	movq	10552(%rsp), %r9        # 8-byte Reload
	movq	10496(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	10552(%rsp), %rax       # 8-byte Reload
	movq	%rax, 10392(%rsp)       # 8-byte Spill
	jmp	.LBB9_7
.Ltmp300:
.LBB9_4:                                # =>This Inner Loop Header: Depth=1
	movq	10704(%rsp), %rax       # 8-byte Reload
	movabsq	$1, %rcx
	leaq	.L.str88, %rdx
	movabsq	$0, %rsi
	leaq	.L.str792, %rdi
	movabsq	$2, %r8
	leaq	.L.str77162, %r9
	movabsq	$3, %r10
	leaq	.L.str78163, %r11
	movabsq	$776, %rbx              # imm = 0x308
	leaq	.L.str59144, %r14
	leaq	.L.str89, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 10384(%rsp)       # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 10376(%rsp)       # 8-byte Spill
	leaq	.L.str87, %rax
	movq	%rax, 10368(%rsp)       # 8-byte Spill
	leaq	.L.str51136, %rax
	movq	%rax, 10360(%rsp)       # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 10352(%rsp)       # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 10344(%rsp)       # 8-byte Spill
	leaq	.L.str84169, %rax
	movq	%rax, 10336(%rsp)       # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, 10328(%rsp)       # 8-byte Spill
	leaq	.L.str83168, %rax
	movq	%rax, 10320(%rsp)       # 8-byte Spill
	leaq	.L.str1499, %rax
	movq	%rax, 10312(%rsp)       # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, 10304(%rsp)       # 8-byte Spill
	leaq	.L.str26111, %rax
	movq	%rax, 10296(%rsp)       # 8-byte Spill
	leaq	.L.str32117, %rax
	movq	%rax, 10288(%rsp)       # 8-byte Spill
	movabsq	$778, %rax              # imm = 0x30A
	movq	%rax, 10280(%rsp)       # 8-byte Spill
	leaq	.L.str86, %rax
	movq	%rax, 10272(%rsp)       # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, 10264(%rsp)       # 8-byte Spill
	leaq	.L.str85170, %rax
	movq	%rax, 10256(%rsp)       # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 10248(%rsp)       # 8-byte Spill
	leaq	.L.str23108, %rax
	movq	%rax, 10240(%rsp)       # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, 10232(%rsp)       # 8-byte Spill
	leaq	.L.str893, %rax
	movq	%rax, 10224(%rsp)       # 8-byte Spill
	leaq	.L.str22107, %rax
	movq	%rax, 10216(%rsp)       # 8-byte Spill
	leaq	.L.str21106, %rax
	movq	%rax, 10208(%rsp)       # 8-byte Spill
	movabsq	$35, %rax
	movq	%rax, 10200(%rsp)       # 8-byte Spill
	leaq	.L.str994, %rax
	movq	%rax, 10192(%rsp)       # 8-byte Spill
	leaq	.L.str20105, %rax
	movq	%rax, 10184(%rsp)       # 8-byte Spill
	leaq	.L.str18103, %rax
	movq	%rax, 10176(%rsp)       # 8-byte Spill
	movabsq	$12, %rax
	movq	%rax, 10168(%rsp)       # 8-byte Spill
	leaq	.L.str74159, %rax
	movq	%rax, 10160(%rsp)       # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 10152(%rsp)       # 8-byte Spill
	movabsq	$48, %rax
	.loc	2 778 0                 # eispack.c:778:0
.Ltmp301:
	movq	%rax, 10144(%rsp)       # 8-byte Spill
	movq	10152(%rsp), %rax       # 8-byte Reload
	movq	%rdi, 10136(%rsp)       # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 10128(%rsp)       # 8-byte Spill
	movq	%r14, %rsi
	movq	%rdx, 10120(%rsp)       # 8-byte Spill
	movq	%r9, %rdx
	movq	10320(%rsp), %rax       # 8-byte Reload
	movq	%rcx, 10112(%rsp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	10144(%rsp), %rax       # 8-byte Reload
	movq	%r8, 10104(%rsp)        # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 10096(%rsp)        # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r15, 10088(%rsp)       # 8-byte Spill
	movl	%ebp, 10084(%rsp)       # 4-byte Spill
	movl	%r12d, 10080(%rsp)      # 4-byte Spill
	movq	%r13, 10072(%rsp)       # 8-byte Spill
	movq	%r14, 10064(%rsp)       # 8-byte Spill
	movq	%rbx, 10056(%rsp)       # 8-byte Spill
	movq	%r10, 10048(%rsp)       # 8-byte Spill
	movq	%r11, 10040(%rsp)       # 8-byte Spill
	callq	trace_logger_log0
	movq	10104(%rsp), %rdi       # 8-byte Reload
	movq	10344(%rsp), %rsi       # 8-byte Reload
	movq	10128(%rsp), %rdx       # 8-byte Reload
	movq	10112(%rsp), %rcx       # 8-byte Reload
	movq	10336(%rsp), %r8        # 8-byte Reload
	movq	10112(%rsp), %r9        # 8-byte Reload
	movq	10096(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	10112(%rsp), %rdi       # 8-byte Reload
	movq	10344(%rsp), %rsi       # 8-byte Reload
	movq	10128(%rsp), %rdx       # 8-byte Reload
	movq	10128(%rsp), %rcx       # 8-byte Reload
	movq	10312(%rsp), %r8        # 8-byte Reload
	movq	10112(%rsp), %r9        # 8-byte Reload
	movq	10160(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	10072(%rsp), %rdi       # 8-byte Reload
	movq	10344(%rsp), %rsi       # 8-byte Reload
	movq	10384(%rsp), %rdx       # 8-byte Reload
	movq	10112(%rsp), %rcx       # 8-byte Reload
	movq	10320(%rsp), %r8        # 8-byte Reload
	movq	10128(%rsp), %r9        # 8-byte Reload
	movq	10160(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	10280(%rsp), %rdi       # 8-byte Reload
	movq	10064(%rsp), %rsi       # 8-byte Reload
	movq	10096(%rsp), %rdx       # 8-byte Reload
	movq	10176(%rsp), %rcx       # 8-byte Reload
	movq	10328(%rsp), %r8        # 8-byte Reload
	movl	10084(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	10112(%rsp), %rdi       # 8-byte Reload
	movq	10344(%rsp), %rsi       # 8-byte Reload
	movq	10384(%rsp), %rdx       # 8-byte Reload
	movq	10112(%rsp), %rcx       # 8-byte Reload
	movq	10320(%rsp), %r8        # 8-byte Reload
	movq	10128(%rsp), %r9        # 8-byte Reload
	movq	10136(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	10384(%rsp), %rax       # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	10072(%rsp), %rdi       # 8-byte Reload
	movq	10376(%rsp), %rsi       # 8-byte Reload
	movq	10112(%rsp), %rcx       # 8-byte Reload
	movq	10176(%rsp), %r8        # 8-byte Reload
	movq	10128(%rsp), %r9        # 8-byte Reload
	movq	10136(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 10036(%rsp)       # 4-byte Spill
	callq	trace_logger_log_int
	movq	10280(%rsp), %rdi       # 8-byte Reload
	movq	10064(%rsp), %rsi       # 8-byte Reload
	movq	10096(%rsp), %rdx       # 8-byte Reload
	movq	10184(%rsp), %rcx       # 8-byte Reload
	movq	10168(%rsp), %r8        # 8-byte Reload
	movl	10084(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	10988(%rsp), %r9d       # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	10104(%rsp), %rdi       # 8-byte Reload
	movq	10376(%rsp), %rsi       # 8-byte Reload
	movq	10112(%rsp), %rcx       # 8-byte Reload
	movq	10360(%rsp), %r8        # 8-byte Reload
	movq	10128(%rsp), %r9        # 8-byte Reload
	movq	10136(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	10036(%rsp), %ebp       # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	10112(%rsp), %rdi       # 8-byte Reload
	movq	10376(%rsp), %rsi       # 8-byte Reload
	movq	10112(%rsp), %rcx       # 8-byte Reload
	movq	10176(%rsp), %r8        # 8-byte Reload
	movq	10128(%rsp), %r9        # 8-byte Reload
	movq	10136(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	10036(%rsp), %ebp       # 4-byte Reload
	movl	10988(%rsp), %r12d      # 4-byte Reload
	imull	%r12d, %ebp
	movl	%ebp, %esi
	movl	%esi, %edx
	movq	10072(%rsp), %rdi       # 8-byte Reload
	movq	10376(%rsp), %rsi       # 8-byte Reload
	movq	10112(%rsp), %rcx       # 8-byte Reload
	movq	10184(%rsp), %r8        # 8-byte Reload
	movq	10128(%rsp), %r9        # 8-byte Reload
	movq	10136(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%ebp, 10032(%rsp)       # 4-byte Spill
	callq	trace_logger_log_int
	movq	10280(%rsp), %rdi       # 8-byte Reload
	movq	10064(%rsp), %rsi       # 8-byte Reload
	movq	10096(%rsp), %rdx       # 8-byte Reload
	movq	10208(%rsp), %rcx       # 8-byte Reload
	movq	10304(%rsp), %r8        # 8-byte Reload
	movl	10084(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	10032(%rsp), %r9d       # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	10104(%rsp), %rdi       # 8-byte Reload
	movq	10376(%rsp), %rsi       # 8-byte Reload
	movq	10112(%rsp), %rcx       # 8-byte Reload
	movq	10184(%rsp), %r8        # 8-byte Reload
	movq	10128(%rsp), %r9        # 8-byte Reload
	movq	10136(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	10716(%rsp), %ebp       # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	10112(%rsp), %rdi       # 8-byte Reload
	movq	10376(%rsp), %rsi       # 8-byte Reload
	movq	10112(%rsp), %rcx       # 8-byte Reload
	movq	10192(%rsp), %r8        # 8-byte Reload
	movq	10128(%rsp), %r9        # 8-byte Reload
	movq	10136(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	10716(%rsp), %ebp       # 4-byte Reload
	movl	10032(%rsp), %r12d      # 4-byte Reload
	addl	%r12d, %ebp
	movl	%ebp, %esi
	movl	%esi, %edx
	movq	10072(%rsp), %rdi       # 8-byte Reload
	movq	10376(%rsp), %rsi       # 8-byte Reload
	movq	10112(%rsp), %rcx       # 8-byte Reload
	movq	10208(%rsp), %r8        # 8-byte Reload
	movq	10128(%rsp), %r9        # 8-byte Reload
	movq	10136(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%ebp, 10028(%rsp)       # 4-byte Spill
	callq	trace_logger_log_int
	movq	10280(%rsp), %rdi       # 8-byte Reload
	movq	10064(%rsp), %rsi       # 8-byte Reload
	movq	10096(%rsp), %rdx       # 8-byte Reload
	movq	10216(%rsp), %rcx       # 8-byte Reload
	movq	10200(%rsp), %r8        # 8-byte Reload
	movl	10084(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	10028(%rsp), %r9d       # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	10112(%rsp), %rdi       # 8-byte Reload
	movq	10376(%rsp), %rsi       # 8-byte Reload
	movq	10112(%rsp), %rcx       # 8-byte Reload
	movq	10208(%rsp), %r8        # 8-byte Reload
	movq	10128(%rsp), %r9        # 8-byte Reload
	movq	10136(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	10028(%rsp), %ebp       # 4-byte Reload
	movslq	%ebp, %rax
	movq	10072(%rsp), %rdi       # 8-byte Reload
	movq	10344(%rsp), %rsi       # 8-byte Reload
	movq	%rax, %rdx
	movq	10112(%rsp), %rcx       # 8-byte Reload
	movq	10216(%rsp), %r8        # 8-byte Reload
	movq	10128(%rsp), %r9        # 8-byte Reload
	movq	10136(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 10016(%rsp)       # 8-byte Spill
	callq	trace_logger_log_int
	movq	10280(%rsp), %rdi       # 8-byte Reload
	movq	10064(%rsp), %rsi       # 8-byte Reload
	movq	10096(%rsp), %rdx       # 8-byte Reload
	movq	10240(%rsp), %rcx       # 8-byte Reload
	movq	10248(%rsp), %r8        # 8-byte Reload
	movl	10084(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	10104(%rsp), %rdi       # 8-byte Reload
	movq	10344(%rsp), %rsi       # 8-byte Reload
	movq	10016(%rsp), %rdx       # 8-byte Reload
	movq	10112(%rsp), %rcx       # 8-byte Reload
	movq	10216(%rsp), %r8        # 8-byte Reload
	movq	10128(%rsp), %r9        # 8-byte Reload
	movq	10136(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	10112(%rsp), %rdi       # 8-byte Reload
	movq	10344(%rsp), %rsi       # 8-byte Reload
	movq	11104(%rsp), %rdx       # 8-byte Reload
	movq	10112(%rsp), %rcx       # 8-byte Reload
	movq	10224(%rsp), %r8        # 8-byte Reload
	movq	10128(%rsp), %r9        # 8-byte Reload
	movq	10136(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	10016(%rsp), %rax       # 8-byte Reload
	shlq	$3, %rax
	movq	11104(%rsp), %rcx       # 8-byte Reload
	addq	%rax, %rcx
	movq	10072(%rsp), %rdi       # 8-byte Reload
	movq	10344(%rsp), %rsi       # 8-byte Reload
	movq	%rcx, %rdx
	movq	10112(%rsp), %rax       # 8-byte Reload
	movq	%rcx, 10008(%rsp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	10240(%rsp), %r8        # 8-byte Reload
	movq	10128(%rsp), %r9        # 8-byte Reload
	movq	10136(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	10280(%rsp), %rdi       # 8-byte Reload
	movq	10064(%rsp), %rsi       # 8-byte Reload
	movq	10096(%rsp), %rdx       # 8-byte Reload
	movq	10296(%rsp), %rcx       # 8-byte Reload
	movq	10232(%rsp), %r8        # 8-byte Reload
	movl	10084(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	10112(%rsp), %rdi       # 8-byte Reload
	movq	10344(%rsp), %rsi       # 8-byte Reload
	movq	10008(%rsp), %rdx       # 8-byte Reload
	movq	10112(%rsp), %rcx       # 8-byte Reload
	movq	10240(%rsp), %r8        # 8-byte Reload
	movq	10128(%rsp), %r9        # 8-byte Reload
	movq	10136(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	11104(%rsp), %rax       # 8-byte Reload
	movq	10016(%rsp), %rcx       # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
	movq	10072(%rsp), %rdi       # 8-byte Reload
	movq	10344(%rsp), %rsi       # 8-byte Reload
	vmovsd	%xmm0, 10000(%rsp)      # 8-byte Spill
	movq	10112(%rsp), %rdx       # 8-byte Reload
	movq	10296(%rsp), %rcx       # 8-byte Reload
	movq	10128(%rsp), %r8        # 8-byte Reload
	movq	10136(%rsp), %r9        # 8-byte Reload
	callq	trace_logger_log_double
	movq	10280(%rsp), %rdi       # 8-byte Reload
	movq	10064(%rsp), %rsi       # 8-byte Reload
	movq	10096(%rsp), %rdx       # 8-byte Reload
	movq	10288(%rsp), %rcx       # 8-byte Reload
	movq	10248(%rsp), %r8        # 8-byte Reload
	movl	10084(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	10104(%rsp), %rdi       # 8-byte Reload
	movq	10344(%rsp), %rsi       # 8-byte Reload
	movq	10384(%rsp), %rdx       # 8-byte Reload
	movq	10112(%rsp), %rcx       # 8-byte Reload
	movq	10320(%rsp), %r8        # 8-byte Reload
	movq	10128(%rsp), %r9        # 8-byte Reload
	movq	10136(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	10112(%rsp), %rdi       # 8-byte Reload
	movq	10344(%rsp), %rsi       # 8-byte Reload
	movq	10968(%rsp), %rdx       # 8-byte Reload
	movq	10112(%rsp), %rcx       # 8-byte Reload
	movq	10256(%rsp), %r8        # 8-byte Reload
	movq	10128(%rsp), %r9        # 8-byte Reload
	movq	10136(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	10384(%rsp), %rax       # 8-byte Reload
	shlq	$3, %rax
	movq	10968(%rsp), %rcx       # 8-byte Reload
	addq	%rax, %rcx
	movq	10072(%rsp), %rdi       # 8-byte Reload
	movq	10344(%rsp), %rsi       # 8-byte Reload
	movq	%rcx, %rdx
	movq	10112(%rsp), %rax       # 8-byte Reload
	movq	%rcx, 9992(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	10288(%rsp), %r8        # 8-byte Reload
	movq	10128(%rsp), %r9        # 8-byte Reload
	movq	10136(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	10280(%rsp), %rdi       # 8-byte Reload
	movq	10064(%rsp), %rsi       # 8-byte Reload
	movq	10096(%rsp), %rdx       # 8-byte Reload
	movq	10272(%rsp), %rcx       # 8-byte Reload
	movq	10264(%rsp), %r8        # 8-byte Reload
	movl	10084(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	10104(%rsp), %rdi       # 8-byte Reload
	movq	10344(%rsp), %rsi       # 8-byte Reload
	movq	9992(%rsp), %rdx        # 8-byte Reload
	movq	10112(%rsp), %rcx       # 8-byte Reload
	movq	10288(%rsp), %r8        # 8-byte Reload
	movq	10128(%rsp), %r9        # 8-byte Reload
	movq	10136(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	10112(%rsp), %rdi       # 8-byte Reload
	movq	10344(%rsp), %rsi       # 8-byte Reload
	vmovsd	10000(%rsp), %xmm0      # 8-byte Reload
	movq	10112(%rsp), %rdx       # 8-byte Reload
	movq	10296(%rsp), %rcx       # 8-byte Reload
	movq	10128(%rsp), %r8        # 8-byte Reload
	movq	10136(%rsp), %r9        # 8-byte Reload
	callq	trace_logger_log_double
	movq	10968(%rsp), %rax       # 8-byte Reload
	movq	10384(%rsp), %rcx       # 8-byte Reload
	vmovsd	10000(%rsp), %xmm0      # 8-byte Reload
	vmovsd	%xmm0, (%rax,%rcx,8)
.Ltmp302:
	.loc	2 776 0                 # eispack.c:776:0
	movq	10056(%rsp), %rdi       # 8-byte Reload
	movq	10064(%rsp), %rsi       # 8-byte Reload
	movq	10096(%rsp), %rdx       # 8-byte Reload
	movq	10336(%rsp), %rcx       # 8-byte Reload
	movq	10304(%rsp), %r8        # 8-byte Reload
	movl	10084(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	10104(%rsp), %rdi       # 8-byte Reload
	movq	10344(%rsp), %rsi       # 8-byte Reload
	movq	10112(%rsp), %rdx       # 8-byte Reload
	movq	10128(%rsp), %rcx       # 8-byte Reload
	movq	10312(%rsp), %r8        # 8-byte Reload
	movq	10128(%rsp), %r9        # 8-byte Reload
	movq	10136(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	10112(%rsp), %rdi       # 8-byte Reload
	movq	10344(%rsp), %rsi       # 8-byte Reload
	movq	10384(%rsp), %rdx       # 8-byte Reload
	movq	10112(%rsp), %rcx       # 8-byte Reload
	movq	10320(%rsp), %r8        # 8-byte Reload
	movq	10128(%rsp), %r9        # 8-byte Reload
	movq	10136(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	10384(%rsp), %rax       # 8-byte Reload
	addq	$1, %rax
	movq	10072(%rsp), %rdi       # 8-byte Reload
	movq	10344(%rsp), %rsi       # 8-byte Reload
	movq	%rax, %rdx
	movq	10112(%rsp), %rcx       # 8-byte Reload
	movq	10336(%rsp), %r8        # 8-byte Reload
	movq	10128(%rsp), %r9        # 8-byte Reload
	movq	10136(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 9984(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	10056(%rsp), %rdi       # 8-byte Reload
	movq	10064(%rsp), %rsi       # 8-byte Reload
	movq	10096(%rsp), %rdx       # 8-byte Reload
	movq	10368(%rsp), %rcx       # 8-byte Reload
	movq	10328(%rsp), %r8        # 8-byte Reload
	movl	10084(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	10112(%rsp), %rdi       # 8-byte Reload
	movq	10344(%rsp), %rsi       # 8-byte Reload
	movq	9984(%rsp), %rdx        # 8-byte Reload
	movq	10112(%rsp), %rcx       # 8-byte Reload
	movq	10336(%rsp), %r8        # 8-byte Reload
	movq	10128(%rsp), %r9        # 8-byte Reload
	movq	10136(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	9984(%rsp), %rax        # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	10072(%rsp), %rdi       # 8-byte Reload
	movq	10376(%rsp), %rsi       # 8-byte Reload
	movq	10112(%rsp), %rcx       # 8-byte Reload
	movq	10368(%rsp), %r8        # 8-byte Reload
	movq	10128(%rsp), %r9        # 8-byte Reload
	movq	10136(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 9980(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	10056(%rsp), %rdi       # 8-byte Reload
	movq	10064(%rsp), %rsi       # 8-byte Reload
	movq	10096(%rsp), %rdx       # 8-byte Reload
	movq	10120(%rsp), %rcx       # 8-byte Reload
	movq	10352(%rsp), %r8        # 8-byte Reload
	movl	10084(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	10988(%rsp), %r9d       # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	10104(%rsp), %rdi       # 8-byte Reload
	movq	10376(%rsp), %rsi       # 8-byte Reload
	movq	10112(%rsp), %rcx       # 8-byte Reload
	movq	10360(%rsp), %r8        # 8-byte Reload
	movq	10128(%rsp), %r9        # 8-byte Reload
	movq	10136(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	9980(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	10112(%rsp), %rdi       # 8-byte Reload
	movq	10376(%rsp), %rsi       # 8-byte Reload
	movq	10112(%rsp), %rcx       # 8-byte Reload
	movq	10368(%rsp), %r8        # 8-byte Reload
	movq	10128(%rsp), %r9        # 8-byte Reload
	movq	10136(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	9980(%rsp), %ebp        # 4-byte Reload
	movl	10988(%rsp), %r12d      # 4-byte Reload
	cmpl	%r12d, %ebp
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	10072(%rsp), %rdi       # 8-byte Reload
	movq	10112(%rsp), %rsi       # 8-byte Reload
	movq	10112(%rsp), %rcx       # 8-byte Reload
	movq	10120(%rsp), %r8        # 8-byte Reload
	movq	10128(%rsp), %r9        # 8-byte Reload
	movq	10136(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 9979(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	10056(%rsp), %rdi       # 8-byte Reload
	movq	10064(%rsp), %rsi       # 8-byte Reload
	movq	10096(%rsp), %rdx       # 8-byte Reload
	movq	10088(%rsp), %rcx       # 8-byte Reload
	movq	10104(%rsp), %r8        # 8-byte Reload
	movl	10084(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	10048(%rsp), %rdi       # 8-byte Reload
	movq	10128(%rsp), %rsi       # 8-byte Reload
	movq	10128(%rsp), %rdx       # 8-byte Reload
	movq	10112(%rsp), %rcx       # 8-byte Reload
	movq	10040(%rsp), %r8        # 8-byte Reload
	movq	10128(%rsp), %r9        # 8-byte Reload
	movq	10136(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	10104(%rsp), %rdi       # 8-byte Reload
	movq	10128(%rsp), %rsi       # 8-byte Reload
	movq	10128(%rsp), %rdx       # 8-byte Reload
	movq	10112(%rsp), %rcx       # 8-byte Reload
	movq	10096(%rsp), %r8        # 8-byte Reload
	movq	10128(%rsp), %r9        # 8-byte Reload
	movq	10136(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	9979(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	10112(%rsp), %rdi       # 8-byte Reload
	movq	10112(%rsp), %rsi       # 8-byte Reload
	movq	10112(%rsp), %rcx       # 8-byte Reload
	movq	10120(%rsp), %r8        # 8-byte Reload
	movq	10128(%rsp), %r9        # 8-byte Reload
	movq	10136(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	9979(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	movq	9984(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 10704(%rsp)       # 8-byte Spill
	jne	.LBB9_2
	jmp	.LBB9_4
.Ltmp303:
.LBB9_5:                                # %.preheader47
	movabsq	$1, %rax
	leaq	.L.str33118, %rcx
	movabsq	$0, %rdx
	leaq	.L.str792, %rsi
	movabsq	$2, %rdi
	leaq	.L.str75160, %r8
	movabsq	$3, %r9
	leaq	.L.str92, %r10
	movabsq	$786, %r11              # imm = 0x312
	leaq	.L.str59144, %rbx
	leaq	.L.str90, %r14
	leaq	.L.str91, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 9968(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 9960(%rsp)        # 8-byte Spill
	leaq	.L.str51136, %rax
	movq	%rax, 9952(%rsp)        # 8-byte Spill
	leaq	.L.str1499, %rax
	movq	%rax, 9944(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	.loc	2 786 0                 # eispack.c:786:0
.Ltmp304:
	movq	%rdi, 9936(%rsp)        # 8-byte Spill
	movq	%r11, %rdi
	movq	%rsi, 9928(%rsp)        # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, 9920(%rsp)        # 8-byte Spill
	movq	%r14, %rdx
	movq	%rcx, 9912(%rsp)        # 8-byte Spill
	movq	%r8, 9904(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 9896(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r14, 9888(%rsp)        # 8-byte Spill
	movq	%r15, 9880(%rsp)        # 8-byte Spill
	movl	%ebp, 9876(%rsp)        # 4-byte Spill
	movl	%r12d, 9872(%rsp)       # 4-byte Spill
	movq	%r13, 9864(%rsp)        # 8-byte Spill
	movq	%rbx, 9856(%rsp)        # 8-byte Spill
	movq	%r11, 9848(%rsp)        # 8-byte Spill
	movq	%r10, 9840(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	9936(%rsp), %rdi        # 8-byte Reload
	movq	9960(%rsp), %rsi        # 8-byte Reload
	movq	9920(%rsp), %rdx        # 8-byte Reload
	movq	9920(%rsp), %rcx        # 8-byte Reload
	movq	9944(%rsp), %r8         # 8-byte Reload
	movq	9920(%rsp), %r9         # 8-byte Reload
	movq	9928(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	10988(%rsp), %ebp       # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	9968(%rsp), %rdi        # 8-byte Reload
	movq	9960(%rsp), %rsi        # 8-byte Reload
	movq	9968(%rsp), %rcx        # 8-byte Reload
	movq	9952(%rsp), %r8         # 8-byte Reload
	movq	9920(%rsp), %r9         # 8-byte Reload
	movq	9928(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	10988(%rsp), %ebp       # 4-byte Reload
	cmpl	$0, %ebp
	setg	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %r12d
	movl	%r12d, %edx
	movq	9864(%rsp), %rdi        # 8-byte Reload
	movq	9968(%rsp), %rsi        # 8-byte Reload
	movq	9968(%rsp), %rcx        # 8-byte Reload
	movq	9912(%rsp), %r8         # 8-byte Reload
	movq	9920(%rsp), %r9         # 8-byte Reload
	movq	9928(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 9839(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	9848(%rsp), %rdi        # 8-byte Reload
	movq	9856(%rsp), %rsi        # 8-byte Reload
	movq	9888(%rsp), %rdx        # 8-byte Reload
	movq	9880(%rsp), %rcx        # 8-byte Reload
	movq	9936(%rsp), %r8         # 8-byte Reload
	movl	9876(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	9896(%rsp), %rdi        # 8-byte Reload
	movq	9920(%rsp), %rsi        # 8-byte Reload
	movq	9920(%rsp), %rdx        # 8-byte Reload
	movq	9968(%rsp), %rcx        # 8-byte Reload
	movq	9840(%rsp), %r8         # 8-byte Reload
	movq	9920(%rsp), %r9         # 8-byte Reload
	movq	9928(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	9936(%rsp), %rdi        # 8-byte Reload
	movq	9920(%rsp), %rsi        # 8-byte Reload
	movq	9920(%rsp), %rdx        # 8-byte Reload
	movq	9968(%rsp), %rcx        # 8-byte Reload
	movq	9904(%rsp), %r8         # 8-byte Reload
	movq	9920(%rsp), %r9         # 8-byte Reload
	movq	9928(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	9839(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	9968(%rsp), %rdi        # 8-byte Reload
	movq	9968(%rsp), %rsi        # 8-byte Reload
	movq	9968(%rsp), %rcx        # 8-byte Reload
	movq	9912(%rsp), %r8         # 8-byte Reload
	movq	9920(%rsp), %r9         # 8-byte Reload
	movq	9928(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	9839(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB9_6
	jmp	.LBB9_36
.LBB9_6:                                # %.lr.ph51
	movabsq	$1, %rax
	movabsq	$0, %rcx
	leaq	.L.str94, %r8
	leaq	.L.str792, %rdx
	movabsq	$786, %rdi              # imm = 0x312
	leaq	.L.str59144, %rsi
	leaq	.L.str92, %r9
	leaq	.L.str93, %r10
	movabsq	$2, %r11
	movl	$0, %ebx
	movl	$1, %ebp
	movabsq	$19134, %r14            # imm = 0x4ABE
	movabsq	$64, %r15
	leaq	.L.str34119, %r12
	movabsq	$32, %r13
	movq	%rax, 9824(%rsp)        # 8-byte Spill
	leaq	.L.str51136, %rax
	movq	%rax, 9816(%rsp)        # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 9808(%rsp)        # 8-byte Spill
	movabsq	$35, %rax
	movq	%rax, 9800(%rsp)        # 8-byte Spill
	movq	9808(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 9792(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 9784(%rsp)        # 8-byte Spill
	movq	%rdx, 9776(%rsp)        # 8-byte Spill
	movq	%r9, %rdx
	movq	%rcx, 9768(%rsp)        # 8-byte Spill
	movq	%r12, %rcx
	movq	9800(%rsp), %rax        # 8-byte Reload
	movq	%r8, 9760(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 9752(%rsp)         # 8-byte Spill
	movl	%ebx, %r9d
	movl	$1, (%rsp)
	movq	%r14, 9744(%rsp)        # 8-byte Spill
	movl	%ebp, 9740(%rsp)        # 4-byte Spill
	movq	%r15, 9728(%rsp)        # 8-byte Spill
	movq	%r13, 9720(%rsp)        # 8-byte Spill
	movq	%r12, 9712(%rsp)        # 8-byte Spill
	movl	%ebx, 9708(%rsp)        # 4-byte Spill
	movq	%r10, 9696(%rsp)        # 8-byte Spill
	movq	%r11, 9688(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movl	10988(%rsp), %r9d       # 4-byte Reload
	movl	%r9d, %ebx
	movl	%ebx, %edx
	movq	9824(%rsp), %rdi        # 8-byte Reload
	movq	9720(%rsp), %rsi        # 8-byte Reload
	movq	9824(%rsp), %rcx        # 8-byte Reload
	movq	9816(%rsp), %r8         # 8-byte Reload
	movq	9768(%rsp), %r9         # 8-byte Reload
	movq	9776(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	10988(%rsp), %ebx       # 4-byte Reload
	movslq	%ebx, %rax
	movq	9744(%rsp), %rdi        # 8-byte Reload
	movq	9728(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	9824(%rsp), %rcx        # 8-byte Reload
	movq	9712(%rsp), %r8         # 8-byte Reload
	movq	9768(%rsp), %r9         # 8-byte Reload
	movq	9776(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 9680(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	9792(%rsp), %rdi        # 8-byte Reload
	movq	9784(%rsp), %rsi        # 8-byte Reload
	movq	9752(%rsp), %rdx        # 8-byte Reload
	movq	9696(%rsp), %rcx        # 8-byte Reload
	movq	9688(%rsp), %r8         # 8-byte Reload
	movl	9708(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	9824(%rsp), %rdi        # 8-byte Reload
	movq	9768(%rsp), %rsi        # 8-byte Reload
	movq	9768(%rsp), %rdx        # 8-byte Reload
	movq	9824(%rsp), %rcx        # 8-byte Reload
	movq	9760(%rsp), %r8         # 8-byte Reload
	movq	9768(%rsp), %r9         # 8-byte Reload
	movq	9776(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	9680(%rsp), %rax        # 8-byte Reload
	movl	10988(%rsp), %ebx       # 4-byte Reload
	movl	10988(%rsp), %ebp       # 4-byte Reload
	movq	%rax, 9672(%rsp)        # 8-byte Spill
	movl	%ebx, 9668(%rsp)        # 4-byte Spill
	movl	%ebp, 9664(%rsp)        # 4-byte Spill
	jmp	.LBB9_8
.Ltmp305:
.LBB9_7:                                # =>This Inner Loop Header: Depth=1
	movq	10392(%rsp), %rax       # 8-byte Reload
	movabsq	$1, %rcx
	leaq	.L.str104, %rdx
	movabsq	$0, %rsi
	leaq	.L.str792, %rdi
	movabsq	$2, %r8
	leaq	.L.str82167, %r9
	movabsq	$3, %r10
	leaq	.L.str90, %r11
	movabsq	$781, %rbx              # imm = 0x30D
	leaq	.L.str59144, %r14
	leaq	.L.str105, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 9656(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 9648(%rsp)        # 8-byte Spill
	leaq	.L.str103, %rax
	movq	%rax, 9640(%rsp)        # 8-byte Spill
	leaq	.L.str51136, %rax
	movq	%rax, 9632(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 9624(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 9616(%rsp)        # 8-byte Spill
	leaq	.L.str96, %rax
	movq	%rax, 9608(%rsp)        # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, 9600(%rsp)        # 8-byte Spill
	leaq	.L.str95, %rax
	movq	%rax, 9592(%rsp)        # 8-byte Spill
	leaq	.L.str1499, %rax
	movq	%rax, 9584(%rsp)        # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, 9576(%rsp)        # 8-byte Spill
	leaq	.L.str98, %rax
	movq	%rax, 9568(%rsp)        # 8-byte Spill
	leaq	.L.str101, %rax
	movq	%rax, 9560(%rsp)        # 8-byte Spill
	movabsq	$783, %rax              # imm = 0x30F
	movq	%rax, 9552(%rsp)        # 8-byte Spill
	leaq	.L.str102, %rax
	movq	%rax, 9544(%rsp)        # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, 9536(%rsp)        # 8-byte Spill
	leaq	.L.str893, %rax
	movq	%rax, 9528(%rsp)        # 8-byte Spill
	leaq	.L.str100, %rax
	movq	%rax, 9520(%rsp)        # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 9512(%rsp)        # 8-byte Spill
	leaq	.L.str99, %rax
	movq	%rax, 9504(%rsp)        # 8-byte Spill
	movabsq	$35, %rax
	movq	%rax, 9496(%rsp)        # 8-byte Spill
	leaq	.L.str1398, %rax
	movq	%rax, 9488(%rsp)        # 8-byte Spill
	leaq	.L.str36121, %rax
	movq	%rax, 9480(%rsp)        # 8-byte Spill
	leaq	.L.str97, %rax
	movq	%rax, 9472(%rsp)        # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, 9464(%rsp)        # 8-byte Spill
	leaq	.L.str37122, %rax
	movq	%rax, 9456(%rsp)        # 8-byte Spill
	leaq	.L.str27112, %rax
	movq	%rax, 9448(%rsp)        # 8-byte Spill
	leaq	.L.str31116, %rax
	movq	%rax, 9440(%rsp)        # 8-byte Spill
	leaq	.L.str35120, %rax
	movq	%rax, 9432(%rsp)        # 8-byte Spill
	movabsq	$12, %rax
	movq	%rax, 9424(%rsp)        # 8-byte Spill
	leaq	.L.str80165, %rax
	movq	%rax, 9416(%rsp)        # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 9408(%rsp)        # 8-byte Spill
	movabsq	$48, %rax
	.loc	2 783 0                 # eispack.c:783:0
.Ltmp306:
	movq	%rax, 9400(%rsp)        # 8-byte Spill
	movq	9408(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 9392(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 9384(%rsp)        # 8-byte Spill
	movq	%r14, %rsi
	movq	%rdx, 9376(%rsp)        # 8-byte Spill
	movq	%r9, %rdx
	movq	9592(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 9368(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	9400(%rsp), %rax        # 8-byte Reload
	movq	%r8, 9360(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 9352(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r15, 9344(%rsp)        # 8-byte Spill
	movl	%ebp, 9340(%rsp)        # 4-byte Spill
	movl	%r12d, 9336(%rsp)       # 4-byte Spill
	movq	%r13, 9328(%rsp)        # 8-byte Spill
	movq	%r14, 9320(%rsp)        # 8-byte Spill
	movq	%rbx, 9312(%rsp)        # 8-byte Spill
	movq	%r10, 9304(%rsp)        # 8-byte Spill
	movq	%r11, 9296(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	9360(%rsp), %rdi        # 8-byte Reload
	movq	9616(%rsp), %rsi        # 8-byte Reload
	movq	9384(%rsp), %rdx        # 8-byte Reload
	movq	9368(%rsp), %rcx        # 8-byte Reload
	movq	9608(%rsp), %r8         # 8-byte Reload
	movq	9368(%rsp), %r9         # 8-byte Reload
	movq	9352(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	9368(%rsp), %rdi        # 8-byte Reload
	movq	9616(%rsp), %rsi        # 8-byte Reload
	movq	9384(%rsp), %rdx        # 8-byte Reload
	movq	9384(%rsp), %rcx        # 8-byte Reload
	movq	9584(%rsp), %r8         # 8-byte Reload
	movq	9368(%rsp), %r9         # 8-byte Reload
	movq	9416(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	9328(%rsp), %rdi        # 8-byte Reload
	movq	9616(%rsp), %rsi        # 8-byte Reload
	movq	9656(%rsp), %rdx        # 8-byte Reload
	movq	9368(%rsp), %rcx        # 8-byte Reload
	movq	9592(%rsp), %r8         # 8-byte Reload
	movq	9384(%rsp), %r9         # 8-byte Reload
	movq	9416(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	9552(%rsp), %rdi        # 8-byte Reload
	movq	9320(%rsp), %rsi        # 8-byte Reload
	movq	9352(%rsp), %rdx        # 8-byte Reload
	movq	9432(%rsp), %rcx        # 8-byte Reload
	movq	9600(%rsp), %r8         # 8-byte Reload
	movl	9340(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	9368(%rsp), %rdi        # 8-byte Reload
	movq	9616(%rsp), %rsi        # 8-byte Reload
	movq	9656(%rsp), %rdx        # 8-byte Reload
	movq	9368(%rsp), %rcx        # 8-byte Reload
	movq	9592(%rsp), %r8         # 8-byte Reload
	movq	9384(%rsp), %r9         # 8-byte Reload
	movq	9392(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	9656(%rsp), %rax        # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	9328(%rsp), %rdi        # 8-byte Reload
	movq	9648(%rsp), %rsi        # 8-byte Reload
	movq	9368(%rsp), %rcx        # 8-byte Reload
	movq	9432(%rsp), %r8         # 8-byte Reload
	movq	9384(%rsp), %r9         # 8-byte Reload
	movq	9392(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 9292(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	9552(%rsp), %rdi        # 8-byte Reload
	movq	9320(%rsp), %rsi        # 8-byte Reload
	movq	9352(%rsp), %rdx        # 8-byte Reload
	movq	9480(%rsp), %rcx        # 8-byte Reload
	movq	9424(%rsp), %r8         # 8-byte Reload
	movl	9340(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	10988(%rsp), %r9d       # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	9360(%rsp), %rdi        # 8-byte Reload
	movq	9648(%rsp), %rsi        # 8-byte Reload
	movq	9368(%rsp), %rcx        # 8-byte Reload
	movq	9632(%rsp), %r8         # 8-byte Reload
	movq	9384(%rsp), %r9         # 8-byte Reload
	movq	9392(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	9292(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	9368(%rsp), %rdi        # 8-byte Reload
	movq	9648(%rsp), %rsi        # 8-byte Reload
	movq	9368(%rsp), %rcx        # 8-byte Reload
	movq	9432(%rsp), %r8         # 8-byte Reload
	movq	9384(%rsp), %r9         # 8-byte Reload
	movq	9392(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	9292(%rsp), %ebp        # 4-byte Reload
	movl	10988(%rsp), %r12d      # 4-byte Reload
	imull	%r12d, %ebp
	movl	%ebp, %esi
	movl	%esi, %edx
	movq	9328(%rsp), %rdi        # 8-byte Reload
	movq	9648(%rsp), %rsi        # 8-byte Reload
	movq	9368(%rsp), %rcx        # 8-byte Reload
	movq	9480(%rsp), %r8         # 8-byte Reload
	movq	9384(%rsp), %r9         # 8-byte Reload
	movq	9392(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%ebp, 9288(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	9552(%rsp), %rdi        # 8-byte Reload
	movq	9320(%rsp), %rsi        # 8-byte Reload
	movq	9352(%rsp), %rdx        # 8-byte Reload
	movq	9440(%rsp), %rcx        # 8-byte Reload
	movq	9600(%rsp), %r8         # 8-byte Reload
	movl	9340(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	9368(%rsp), %rdi        # 8-byte Reload
	movq	9616(%rsp), %rsi        # 8-byte Reload
	movq	9656(%rsp), %rdx        # 8-byte Reload
	movq	9368(%rsp), %rcx        # 8-byte Reload
	movq	9592(%rsp), %r8         # 8-byte Reload
	movq	9384(%rsp), %r9         # 8-byte Reload
	movq	9392(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	9656(%rsp), %rax        # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	9328(%rsp), %rdi        # 8-byte Reload
	movq	9648(%rsp), %rsi        # 8-byte Reload
	movq	9368(%rsp), %rcx        # 8-byte Reload
	movq	9440(%rsp), %r8         # 8-byte Reload
	movq	9384(%rsp), %r9         # 8-byte Reload
	movq	9392(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 9284(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	9552(%rsp), %rdi        # 8-byte Reload
	movq	9320(%rsp), %rsi        # 8-byte Reload
	movq	9352(%rsp), %rdx        # 8-byte Reload
	movq	9448(%rsp), %rcx        # 8-byte Reload
	movq	9576(%rsp), %r8         # 8-byte Reload
	movl	9340(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	9284(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	9360(%rsp), %rdi        # 8-byte Reload
	movq	9648(%rsp), %rsi        # 8-byte Reload
	movq	9368(%rsp), %rcx        # 8-byte Reload
	movq	9440(%rsp), %r8         # 8-byte Reload
	movq	9384(%rsp), %r9         # 8-byte Reload
	movq	9392(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	9288(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	9368(%rsp), %rdi        # 8-byte Reload
	movq	9648(%rsp), %rsi        # 8-byte Reload
	movq	9368(%rsp), %rcx        # 8-byte Reload
	movq	9480(%rsp), %r8         # 8-byte Reload
	movq	9384(%rsp), %r9         # 8-byte Reload
	movq	9392(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	9288(%rsp), %ebp        # 4-byte Reload
	movl	9284(%rsp), %r12d       # 4-byte Reload
	addl	%r12d, %ebp
	movl	%ebp, %esi
	movl	%esi, %edx
	movq	9328(%rsp), %rdi        # 8-byte Reload
	movq	9648(%rsp), %rsi        # 8-byte Reload
	movq	9368(%rsp), %rcx        # 8-byte Reload
	movq	9448(%rsp), %r8         # 8-byte Reload
	movq	9384(%rsp), %r9         # 8-byte Reload
	movq	9392(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%ebp, 9280(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	9552(%rsp), %rdi        # 8-byte Reload
	movq	9320(%rsp), %rsi        # 8-byte Reload
	movq	9352(%rsp), %rdx        # 8-byte Reload
	movq	9456(%rsp), %rcx        # 8-byte Reload
	movq	9496(%rsp), %r8         # 8-byte Reload
	movl	9340(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	9280(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	9368(%rsp), %rdi        # 8-byte Reload
	movq	9648(%rsp), %rsi        # 8-byte Reload
	movq	9368(%rsp), %rcx        # 8-byte Reload
	movq	9448(%rsp), %r8         # 8-byte Reload
	movq	9384(%rsp), %r9         # 8-byte Reload
	movq	9392(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	9280(%rsp), %ebp        # 4-byte Reload
	movslq	%ebp, %rax
	movq	9328(%rsp), %rdi        # 8-byte Reload
	movq	9616(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	9368(%rsp), %rcx        # 8-byte Reload
	movq	9456(%rsp), %r8         # 8-byte Reload
	movq	9384(%rsp), %r9         # 8-byte Reload
	movq	9392(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 9272(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	9552(%rsp), %rdi        # 8-byte Reload
	movq	9320(%rsp), %rsi        # 8-byte Reload
	movq	9352(%rsp), %rdx        # 8-byte Reload
	movq	9472(%rsp), %rcx        # 8-byte Reload
	movq	9512(%rsp), %r8         # 8-byte Reload
	movl	9340(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	9360(%rsp), %rdi        # 8-byte Reload
	movq	9616(%rsp), %rsi        # 8-byte Reload
	movq	9272(%rsp), %rdx        # 8-byte Reload
	movq	9368(%rsp), %rcx        # 8-byte Reload
	movq	9456(%rsp), %r8         # 8-byte Reload
	movq	9384(%rsp), %r9         # 8-byte Reload
	movq	9392(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	9368(%rsp), %rdi        # 8-byte Reload
	movq	9616(%rsp), %rsi        # 8-byte Reload
	movq	11104(%rsp), %rdx       # 8-byte Reload
	movq	9368(%rsp), %rcx        # 8-byte Reload
	movq	9528(%rsp), %r8         # 8-byte Reload
	movq	9384(%rsp), %r9         # 8-byte Reload
	movq	9392(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	9272(%rsp), %rax        # 8-byte Reload
	shlq	$3, %rax
	movq	11104(%rsp), %rcx       # 8-byte Reload
	addq	%rax, %rcx
	movq	9328(%rsp), %rdi        # 8-byte Reload
	movq	9616(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	9368(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 9264(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	9472(%rsp), %r8         # 8-byte Reload
	movq	9384(%rsp), %r9         # 8-byte Reload
	movq	9392(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	9552(%rsp), %rdi        # 8-byte Reload
	movq	9320(%rsp), %rsi        # 8-byte Reload
	movq	9352(%rsp), %rdx        # 8-byte Reload
	movq	9568(%rsp), %rcx        # 8-byte Reload
	movq	9464(%rsp), %r8         # 8-byte Reload
	movl	9340(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	9368(%rsp), %rdi        # 8-byte Reload
	movq	9616(%rsp), %rsi        # 8-byte Reload
	movq	9264(%rsp), %rdx        # 8-byte Reload
	movq	9368(%rsp), %rcx        # 8-byte Reload
	movq	9472(%rsp), %r8         # 8-byte Reload
	movq	9384(%rsp), %r9         # 8-byte Reload
	movq	9392(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	11104(%rsp), %rax       # 8-byte Reload
	movq	9272(%rsp), %rcx        # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
	movq	9328(%rsp), %rdi        # 8-byte Reload
	movq	9616(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 9256(%rsp)       # 8-byte Spill
	movq	9368(%rsp), %rdx        # 8-byte Reload
	movq	9568(%rsp), %rcx        # 8-byte Reload
	movq	9384(%rsp), %r8         # 8-byte Reload
	movq	9392(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	9552(%rsp), %rdi        # 8-byte Reload
	movq	9320(%rsp), %rsi        # 8-byte Reload
	movq	9352(%rsp), %rdx        # 8-byte Reload
	movq	9504(%rsp), %rcx        # 8-byte Reload
	movq	9576(%rsp), %r8         # 8-byte Reload
	movl	9340(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	9288(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	9360(%rsp), %rdi        # 8-byte Reload
	movq	9648(%rsp), %rsi        # 8-byte Reload
	movq	9368(%rsp), %rcx        # 8-byte Reload
	movq	9480(%rsp), %r8         # 8-byte Reload
	movq	9384(%rsp), %r9         # 8-byte Reload
	movq	9392(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	10404(%rsp), %ebp       # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	9368(%rsp), %rdi        # 8-byte Reload
	movq	9648(%rsp), %rsi        # 8-byte Reload
	movq	9368(%rsp), %rcx        # 8-byte Reload
	movq	9488(%rsp), %r8         # 8-byte Reload
	movq	9384(%rsp), %r9         # 8-byte Reload
	movq	9392(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	10404(%rsp), %ebp       # 4-byte Reload
	movl	9288(%rsp), %r12d       # 4-byte Reload
	addl	%r12d, %ebp
	movl	%ebp, %esi
	movl	%esi, %edx
	movq	9328(%rsp), %rdi        # 8-byte Reload
	movq	9648(%rsp), %rsi        # 8-byte Reload
	movq	9368(%rsp), %rcx        # 8-byte Reload
	movq	9504(%rsp), %r8         # 8-byte Reload
	movq	9384(%rsp), %r9         # 8-byte Reload
	movq	9392(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%ebp, 9252(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	9552(%rsp), %rdi        # 8-byte Reload
	movq	9320(%rsp), %rsi        # 8-byte Reload
	movq	9352(%rsp), %rdx        # 8-byte Reload
	movq	9520(%rsp), %rcx        # 8-byte Reload
	movq	9496(%rsp), %r8         # 8-byte Reload
	movl	9340(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	9252(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	9368(%rsp), %rdi        # 8-byte Reload
	movq	9648(%rsp), %rsi        # 8-byte Reload
	movq	9368(%rsp), %rcx        # 8-byte Reload
	movq	9504(%rsp), %r8         # 8-byte Reload
	movq	9384(%rsp), %r9         # 8-byte Reload
	movq	9392(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	9252(%rsp), %ebp        # 4-byte Reload
	movslq	%ebp, %rax
	movq	9328(%rsp), %rdi        # 8-byte Reload
	movq	9616(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	9368(%rsp), %rcx        # 8-byte Reload
	movq	9520(%rsp), %r8         # 8-byte Reload
	movq	9384(%rsp), %r9         # 8-byte Reload
	movq	9392(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 9240(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	9552(%rsp), %rdi        # 8-byte Reload
	movq	9320(%rsp), %rsi        # 8-byte Reload
	movq	9352(%rsp), %rdx        # 8-byte Reload
	movq	9560(%rsp), %rcx        # 8-byte Reload
	movq	9512(%rsp), %r8         # 8-byte Reload
	movl	9340(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	9360(%rsp), %rdi        # 8-byte Reload
	movq	9616(%rsp), %rsi        # 8-byte Reload
	movq	9240(%rsp), %rdx        # 8-byte Reload
	movq	9368(%rsp), %rcx        # 8-byte Reload
	movq	9520(%rsp), %r8         # 8-byte Reload
	movq	9384(%rsp), %r9         # 8-byte Reload
	movq	9392(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	9368(%rsp), %rdi        # 8-byte Reload
	movq	9616(%rsp), %rsi        # 8-byte Reload
	movq	11104(%rsp), %rdx       # 8-byte Reload
	movq	9368(%rsp), %rcx        # 8-byte Reload
	movq	9528(%rsp), %r8         # 8-byte Reload
	movq	9384(%rsp), %r9         # 8-byte Reload
	movq	9392(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	9240(%rsp), %rax        # 8-byte Reload
	shlq	$3, %rax
	movq	11104(%rsp), %rcx       # 8-byte Reload
	addq	%rax, %rcx
	movq	9328(%rsp), %rdi        # 8-byte Reload
	movq	9616(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	9368(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 9232(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	9560(%rsp), %r8         # 8-byte Reload
	movq	9384(%rsp), %r9         # 8-byte Reload
	movq	9392(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	9552(%rsp), %rdi        # 8-byte Reload
	movq	9320(%rsp), %rsi        # 8-byte Reload
	movq	9352(%rsp), %rdx        # 8-byte Reload
	movq	9544(%rsp), %rcx        # 8-byte Reload
	movq	9536(%rsp), %r8         # 8-byte Reload
	movl	9340(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	9360(%rsp), %rdi        # 8-byte Reload
	movq	9616(%rsp), %rsi        # 8-byte Reload
	movq	9232(%rsp), %rdx        # 8-byte Reload
	movq	9368(%rsp), %rcx        # 8-byte Reload
	movq	9560(%rsp), %r8         # 8-byte Reload
	movq	9384(%rsp), %r9         # 8-byte Reload
	movq	9392(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	9368(%rsp), %rdi        # 8-byte Reload
	movq	9616(%rsp), %rsi        # 8-byte Reload
	vmovsd	9256(%rsp), %xmm0       # 8-byte Reload
	movq	9368(%rsp), %rdx        # 8-byte Reload
	movq	9568(%rsp), %rcx        # 8-byte Reload
	movq	9384(%rsp), %r8         # 8-byte Reload
	movq	9392(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	11104(%rsp), %rax       # 8-byte Reload
	movq	9240(%rsp), %rcx        # 8-byte Reload
	vmovsd	9256(%rsp), %xmm0       # 8-byte Reload
	vmovsd	%xmm0, (%rax,%rcx,8)
.Ltmp307:
	.loc	2 781 0                 # eispack.c:781:0
	movq	9312(%rsp), %rdi        # 8-byte Reload
	movq	9320(%rsp), %rsi        # 8-byte Reload
	movq	9352(%rsp), %rdx        # 8-byte Reload
	movq	9608(%rsp), %rcx        # 8-byte Reload
	movq	9576(%rsp), %r8         # 8-byte Reload
	movl	9340(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	9360(%rsp), %rdi        # 8-byte Reload
	movq	9616(%rsp), %rsi        # 8-byte Reload
	movq	9368(%rsp), %rdx        # 8-byte Reload
	movq	9384(%rsp), %rcx        # 8-byte Reload
	movq	9584(%rsp), %r8         # 8-byte Reload
	movq	9384(%rsp), %r9         # 8-byte Reload
	movq	9392(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	9368(%rsp), %rdi        # 8-byte Reload
	movq	9616(%rsp), %rsi        # 8-byte Reload
	movq	9656(%rsp), %rdx        # 8-byte Reload
	movq	9368(%rsp), %rcx        # 8-byte Reload
	movq	9592(%rsp), %r8         # 8-byte Reload
	movq	9384(%rsp), %r9         # 8-byte Reload
	movq	9392(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	9656(%rsp), %rax        # 8-byte Reload
	addq	$1, %rax
	movq	9328(%rsp), %rdi        # 8-byte Reload
	movq	9616(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	9368(%rsp), %rcx        # 8-byte Reload
	movq	9608(%rsp), %r8         # 8-byte Reload
	movq	9384(%rsp), %r9         # 8-byte Reload
	movq	9392(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 9224(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	9312(%rsp), %rdi        # 8-byte Reload
	movq	9320(%rsp), %rsi        # 8-byte Reload
	movq	9352(%rsp), %rdx        # 8-byte Reload
	movq	9640(%rsp), %rcx        # 8-byte Reload
	movq	9600(%rsp), %r8         # 8-byte Reload
	movl	9340(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	9368(%rsp), %rdi        # 8-byte Reload
	movq	9616(%rsp), %rsi        # 8-byte Reload
	movq	9224(%rsp), %rdx        # 8-byte Reload
	movq	9368(%rsp), %rcx        # 8-byte Reload
	movq	9608(%rsp), %r8         # 8-byte Reload
	movq	9384(%rsp), %r9         # 8-byte Reload
	movq	9392(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	9224(%rsp), %rax        # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	9328(%rsp), %rdi        # 8-byte Reload
	movq	9648(%rsp), %rsi        # 8-byte Reload
	movq	9368(%rsp), %rcx        # 8-byte Reload
	movq	9640(%rsp), %r8         # 8-byte Reload
	movq	9384(%rsp), %r9         # 8-byte Reload
	movq	9392(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 9220(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	9312(%rsp), %rdi        # 8-byte Reload
	movq	9320(%rsp), %rsi        # 8-byte Reload
	movq	9352(%rsp), %rdx        # 8-byte Reload
	movq	9376(%rsp), %rcx        # 8-byte Reload
	movq	9624(%rsp), %r8         # 8-byte Reload
	movl	9340(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	10988(%rsp), %r9d       # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	9360(%rsp), %rdi        # 8-byte Reload
	movq	9648(%rsp), %rsi        # 8-byte Reload
	movq	9368(%rsp), %rcx        # 8-byte Reload
	movq	9632(%rsp), %r8         # 8-byte Reload
	movq	9384(%rsp), %r9         # 8-byte Reload
	movq	9392(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	9220(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	9368(%rsp), %rdi        # 8-byte Reload
	movq	9648(%rsp), %rsi        # 8-byte Reload
	movq	9368(%rsp), %rcx        # 8-byte Reload
	movq	9640(%rsp), %r8         # 8-byte Reload
	movq	9384(%rsp), %r9         # 8-byte Reload
	movq	9392(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	9220(%rsp), %ebp        # 4-byte Reload
	movl	10988(%rsp), %r12d      # 4-byte Reload
	cmpl	%r12d, %ebp
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	9328(%rsp), %rdi        # 8-byte Reload
	movq	9368(%rsp), %rsi        # 8-byte Reload
	movq	9368(%rsp), %rcx        # 8-byte Reload
	movq	9376(%rsp), %r8         # 8-byte Reload
	movq	9384(%rsp), %r9         # 8-byte Reload
	movq	9392(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 9219(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	9312(%rsp), %rdi        # 8-byte Reload
	movq	9320(%rsp), %rsi        # 8-byte Reload
	movq	9352(%rsp), %rdx        # 8-byte Reload
	movq	9344(%rsp), %rcx        # 8-byte Reload
	movq	9360(%rsp), %r8         # 8-byte Reload
	movl	9340(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	9304(%rsp), %rdi        # 8-byte Reload
	movq	9384(%rsp), %rsi        # 8-byte Reload
	movq	9384(%rsp), %rdx        # 8-byte Reload
	movq	9368(%rsp), %rcx        # 8-byte Reload
	movq	9296(%rsp), %r8         # 8-byte Reload
	movq	9384(%rsp), %r9         # 8-byte Reload
	movq	9392(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	9360(%rsp), %rdi        # 8-byte Reload
	movq	9384(%rsp), %rsi        # 8-byte Reload
	movq	9384(%rsp), %rdx        # 8-byte Reload
	movq	9368(%rsp), %rcx        # 8-byte Reload
	movq	9352(%rsp), %r8         # 8-byte Reload
	movq	9384(%rsp), %r9         # 8-byte Reload
	movq	9392(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	9219(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	9368(%rsp), %rdi        # 8-byte Reload
	movq	9368(%rsp), %rsi        # 8-byte Reload
	movq	9368(%rsp), %rcx        # 8-byte Reload
	movq	9376(%rsp), %r8         # 8-byte Reload
	movq	9384(%rsp), %r9         # 8-byte Reload
	movq	9392(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	9219(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	movq	9224(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 10392(%rsp)       # 8-byte Spill
	jne	.LBB9_5
	jmp	.LBB9_7
.Ltmp308:
.LBB9_8:                                # =>This Loop Header: Depth=1
                                        #     Child Loop BB9_9 Depth 2
                                        #     Child Loop BB9_13 Depth 2
                                        #     Child Loop BB9_16 Depth 2
                                        #     Child Loop BB9_18 Depth 2
                                        #     Child Loop BB9_20 Depth 2
                                        #     Child Loop BB9_22 Depth 2
                                        #       Child Loop BB9_24 Depth 3
                                        #     Child Loop BB9_27 Depth 2
                                        #     Child Loop BB9_29 Depth 2
                                        #     Child Loop BB9_31 Depth 2
                                        #       Child Loop BB9_32 Depth 3
                                        #     Child Loop BB9_35 Depth 2
	movl	9664(%rsp), %eax        # 4-byte Reload
	movl	9668(%rsp), %ecx        # 4-byte Reload
	movq	9672(%rsp), %rdx        # 8-byte Reload
	movabsq	$0, %rsi
	vxorps	%xmm0, %xmm0, %xmm0
	movabsq	$1, %rdi
	leaq	.L.str114, %r8
	leaq	.L.str792, %r9
	movabsq	$2, %r10
	leaq	.L.str117, %r11
	movabsq	$3, %rbx
	leaq	.L.str116, %r14
	movabsq	$794, %r15              # imm = 0x31A
	leaq	.L.str59144, %r12
	leaq	.L.str94, %r13
	leaq	.L.str115, %rbp
	movl	%eax, 9212(%rsp)        # 4-byte Spill
	movl	$0, %eax
	movl	%eax, 9208(%rsp)        # 4-byte Spill
	movl	$1, %eax
	movq	%rdx, 9200(%rsp)        # 8-byte Spill
	movabsq	$19134, %rdx            # imm = 0x4ABE
	movq	%rdx, 9192(%rsp)        # 8-byte Spill
	movabsq	$32, %rdx
	movq	%rdx, 9184(%rsp)        # 8-byte Spill
	leaq	.L.str113, %rdx
	movq	%rdx, 9176(%rsp)        # 8-byte Spill
	leaq	.L.str1499, %rdx
	movq	%rdx, 9168(%rsp)        # 8-byte Spill
	movabsq	$46, %rdx
	movq	%rdx, 9160(%rsp)        # 8-byte Spill
	leaq	.L.str111, %rdx
	movq	%rdx, 9152(%rsp)        # 8-byte Spill
	movabsq	$4294967294, %rdx       # imm = 0xFFFFFFFE
	movq	%rdx, 9144(%rsp)        # 8-byte Spill
	movabsq	$788, %rdx              # imm = 0x314
	movq	%rdx, 9136(%rsp)        # 8-byte Spill
	movabsq	$8, %rdx
	movq	%rdx, 9128(%rsp)        # 8-byte Spill
	leaq	.L.str112, %rdx
	movq	%rdx, 9120(%rsp)        # 8-byte Spill
	movabsq	$4294967295, %rdx       # imm = 0xFFFFFFFF
	movq	%rdx, 9112(%rsp)        # 8-byte Spill
	movabsq	$786, %rdx              # imm = 0x312
	movq	%rdx, 9104(%rsp)        # 8-byte Spill
	movabsq	$64, %rdx
	movq	%rdx, 9096(%rsp)        # 8-byte Spill
	leaq	.L.str107, %rdx
	movq	%rdx, 9088(%rsp)        # 8-byte Spill
	leaq	.L.str106, %rdx
	movq	%rdx, 9080(%rsp)        # 8-byte Spill
	movabsq	$-1, %rdx
	movq	%rdx, 9072(%rsp)        # 8-byte Spill
	leaq	.L.str110, %rdx
	movq	%rdx, 9064(%rsp)        # 8-byte Spill
	leaq	.L.str109, %rdx
	movq	%rdx, 9056(%rsp)        # 8-byte Spill
	leaq	.L.str92, %rdx
	movq	%rdx, 9048(%rsp)        # 8-byte Spill
	leaq	.L.str51136, %rdx
	movq	%rdx, 9040(%rsp)        # 8-byte Spill
	leaq	.L.str108, %rdx
	movq	%rdx, 9032(%rsp)        # 8-byte Spill
	movabsq	$48, %rdx
	movq	%rdx, 9024(%rsp)        # 8-byte Spill
	leaq	.L.str34119, %rdx
	.loc	2 786 0                 # eispack.c:786:0
.Ltmp309:
	movq	%rdx, 9016(%rsp)        # 8-byte Spill
	movq	9072(%rsp), %rdx        # 8-byte Reload
	movq	%rdi, 9008(%rsp)        # 8-byte Spill
	movq	%rdx, %rdi
	movq	%rsi, 9000(%rsp)        # 8-byte Spill
	movq	%r12, %rsi
	movq	%r13, %rdx
	movq	%r8, 8992(%rsp)         # 8-byte Spill
	movq	9080(%rsp), %r8         # 8-byte Reload
	movl	%ecx, 8988(%rsp)        # 4-byte Spill
	movq	%r8, %rcx
	movq	9024(%rsp), %r8         # 8-byte Reload
	movl	%eax, 8984(%rsp)        # 4-byte Spill
	movl	9208(%rsp), %eax        # 4-byte Reload
	movq	%r9, 8976(%rsp)         # 8-byte Spill
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movq	%r15, 8968(%rsp)        # 8-byte Spill
	movq	%r12, 8960(%rsp)        # 8-byte Spill
	movq	%r13, 8952(%rsp)        # 8-byte Spill
	vmovsd	%xmm0, 8944(%rsp)       # 8-byte Spill
	movq	%rbp, 8936(%rsp)        # 8-byte Spill
	movq	%r14, 8928(%rsp)        # 8-byte Spill
	movq	%rbx, 8920(%rsp)        # 8-byte Spill
	movq	%r10, 8912(%rsp)        # 8-byte Spill
	movq	%r11, 8904(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	8912(%rsp), %rdi        # 8-byte Reload
	movq	9096(%rsp), %rsi        # 8-byte Reload
	movq	9000(%rsp), %rdx        # 8-byte Reload
	movq	9008(%rsp), %rcx        # 8-byte Reload
	movq	9088(%rsp), %r8         # 8-byte Reload
	movq	9008(%rsp), %r9         # 8-byte Reload
	movq	9032(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	9008(%rsp), %rdi        # 8-byte Reload
	movq	9096(%rsp), %rsi        # 8-byte Reload
	movq	9000(%rsp), %rdx        # 8-byte Reload
	movq	9008(%rsp), %rcx        # 8-byte Reload
	movq	9016(%rsp), %r8         # 8-byte Reload
	movq	9008(%rsp), %r9         # 8-byte Reload
	movq	9048(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	9192(%rsp), %rdi        # 8-byte Reload
	movq	9096(%rsp), %rsi        # 8-byte Reload
	movq	9200(%rsp), %rdx        # 8-byte Reload
	movq	9008(%rsp), %rcx        # 8-byte Reload
	movq	9080(%rsp), %r8         # 8-byte Reload
	movq	9000(%rsp), %r9         # 8-byte Reload
	movq	9048(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	9072(%rsp), %rdi        # 8-byte Reload
	movq	8960(%rsp), %rsi        # 8-byte Reload
	movq	8952(%rsp), %rdx        # 8-byte Reload
	movq	9056(%rsp), %rcx        # 8-byte Reload
	movq	9024(%rsp), %r8         # 8-byte Reload
	movl	9208(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	8912(%rsp), %rdi        # 8-byte Reload
	movq	9184(%rsp), %rsi        # 8-byte Reload
	movq	9000(%rsp), %rdx        # 8-byte Reload
	movq	9008(%rsp), %rcx        # 8-byte Reload
	movq	9064(%rsp), %r8         # 8-byte Reload
	movq	9008(%rsp), %r9         # 8-byte Reload
	movq	9032(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	10988(%rsp), %eax       # 4-byte Reload
	movl	%eax, %eax
	movl	%eax, %edx
	movq	9008(%rsp), %rdi        # 8-byte Reload
	movq	9184(%rsp), %rsi        # 8-byte Reload
	movq	9008(%rsp), %rcx        # 8-byte Reload
	movq	9040(%rsp), %r8         # 8-byte Reload
	movq	9008(%rsp), %r9         # 8-byte Reload
	movq	9048(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	8988(%rsp), %eax        # 4-byte Reload
	movl	%eax, %eax
	movl	%eax, %edx
	movq	9192(%rsp), %rdi        # 8-byte Reload
	movq	9184(%rsp), %rsi        # 8-byte Reload
	movq	9008(%rsp), %rcx        # 8-byte Reload
	movq	9056(%rsp), %r8         # 8-byte Reload
	movq	9000(%rsp), %r9         # 8-byte Reload
	movq	9048(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	9072(%rsp), %rdi        # 8-byte Reload
	movq	8960(%rsp), %rsi        # 8-byte Reload
	movq	8952(%rsp), %rdx        # 8-byte Reload
	movq	9152(%rsp), %rcx        # 8-byte Reload
	movq	9024(%rsp), %r8         # 8-byte Reload
	movl	9208(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	8912(%rsp), %rdi        # 8-byte Reload
	movq	9184(%rsp), %rsi        # 8-byte Reload
	movq	9000(%rsp), %rdx        # 8-byte Reload
	movq	9008(%rsp), %rcx        # 8-byte Reload
	movq	9120(%rsp), %r8         # 8-byte Reload
	movq	9008(%rsp), %r9         # 8-byte Reload
	movq	9032(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	10988(%rsp), %eax       # 4-byte Reload
	movl	%eax, %eax
	movl	%eax, %edx
	movq	9008(%rsp), %rdi        # 8-byte Reload
	movq	9184(%rsp), %rsi        # 8-byte Reload
	movq	9008(%rsp), %rcx        # 8-byte Reload
	movq	9040(%rsp), %r8         # 8-byte Reload
	movq	9008(%rsp), %r9         # 8-byte Reload
	movq	9048(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	9212(%rsp), %eax        # 4-byte Reload
	movl	%eax, %eax
	movl	%eax, %edx
	movq	9192(%rsp), %rdi        # 8-byte Reload
	movq	9184(%rsp), %rsi        # 8-byte Reload
	movq	9008(%rsp), %rcx        # 8-byte Reload
	movq	9152(%rsp), %r8         # 8-byte Reload
	movq	9000(%rsp), %r9         # 8-byte Reload
	movq	9048(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	9104(%rsp), %rdi        # 8-byte Reload
	movq	8960(%rsp), %rsi        # 8-byte Reload
	movq	8952(%rsp), %rdx        # 8-byte Reload
	movq	9064(%rsp), %rcx        # 8-byte Reload
	movq	9128(%rsp), %r8         # 8-byte Reload
	movl	9208(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	8912(%rsp), %rdi        # 8-byte Reload
	movq	9184(%rsp), %rsi        # 8-byte Reload
	movq	9112(%rsp), %rdx        # 8-byte Reload
	movq	9000(%rsp), %rcx        # 8-byte Reload
	movq	9168(%rsp), %r8         # 8-byte Reload
	movq	9000(%rsp), %r9         # 8-byte Reload
	movq	8976(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	8988(%rsp), %eax        # 4-byte Reload
	movl	%eax, %eax
	movl	%eax, %edx
	movq	9008(%rsp), %rdi        # 8-byte Reload
	movq	9184(%rsp), %rsi        # 8-byte Reload
	movq	9008(%rsp), %rcx        # 8-byte Reload
	movq	9056(%rsp), %r8         # 8-byte Reload
	movq	9000(%rsp), %r9         # 8-byte Reload
	movq	8976(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	8988(%rsp), %eax        # 4-byte Reload
	addl	$4294967295, %eax       # imm = 0xFFFFFFFF
	movl	%eax, %esi
	movl	%esi, %edx
	movq	9192(%rsp), %rdi        # 8-byte Reload
	movq	9184(%rsp), %rsi        # 8-byte Reload
	movq	9008(%rsp), %rcx        # 8-byte Reload
	movq	9064(%rsp), %r8         # 8-byte Reload
	movq	9000(%rsp), %r9         # 8-byte Reload
	movq	8976(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, 8900(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	9104(%rsp), %rdi        # 8-byte Reload
	movq	8960(%rsp), %rsi        # 8-byte Reload
	movq	8952(%rsp), %rdx        # 8-byte Reload
	movq	9088(%rsp), %rcx        # 8-byte Reload
	movq	9128(%rsp), %r8         # 8-byte Reload
	movl	9208(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	8912(%rsp), %rdi        # 8-byte Reload
	movq	9096(%rsp), %rsi        # 8-byte Reload
	movq	9072(%rsp), %rdx        # 8-byte Reload
	movq	9000(%rsp), %rcx        # 8-byte Reload
	movq	9168(%rsp), %r8         # 8-byte Reload
	movq	9000(%rsp), %r9         # 8-byte Reload
	movq	8976(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	9008(%rsp), %rdi        # 8-byte Reload
	movq	9096(%rsp), %rsi        # 8-byte Reload
	movq	9200(%rsp), %rdx        # 8-byte Reload
	movq	9008(%rsp), %rcx        # 8-byte Reload
	movq	9080(%rsp), %r8         # 8-byte Reload
	movq	9000(%rsp), %r9         # 8-byte Reload
	movq	8976(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	9200(%rsp), %rcx        # 8-byte Reload
	addq	$-1, %rcx
	movq	9192(%rsp), %rdi        # 8-byte Reload
	movq	9096(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	9008(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 8888(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	9088(%rsp), %r8         # 8-byte Reload
	movq	9000(%rsp), %r9         # 8-byte Reload
	movq	8976(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	9104(%rsp), %rdi        # 8-byte Reload
	movq	8960(%rsp), %rsi        # 8-byte Reload
	movq	8952(%rsp), %rdx        # 8-byte Reload
	movq	9120(%rsp), %rcx        # 8-byte Reload
	movq	9128(%rsp), %r8         # 8-byte Reload
	movl	9208(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	8912(%rsp), %rdi        # 8-byte Reload
	movq	9184(%rsp), %rsi        # 8-byte Reload
	movq	9112(%rsp), %rdx        # 8-byte Reload
	movq	9000(%rsp), %rcx        # 8-byte Reload
	movq	9168(%rsp), %r8         # 8-byte Reload
	movq	9000(%rsp), %r9         # 8-byte Reload
	movq	8976(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	9212(%rsp), %eax        # 4-byte Reload
	movl	%eax, %eax
	movl	%eax, %edx
	movq	9008(%rsp), %rdi        # 8-byte Reload
	movq	9184(%rsp), %rsi        # 8-byte Reload
	movq	9008(%rsp), %rcx        # 8-byte Reload
	movq	9152(%rsp), %r8         # 8-byte Reload
	movq	9000(%rsp), %r9         # 8-byte Reload
	movq	8976(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	9212(%rsp), %eax        # 4-byte Reload
	addl	$4294967295, %eax       # imm = 0xFFFFFFFF
	.loc	2 788 0                 # eispack.c:788:0
.Ltmp310:
	movl	%eax, %esi
	movl	%esi, %edx
	movq	9192(%rsp), %rdi        # 8-byte Reload
	movq	9184(%rsp), %rsi        # 8-byte Reload
	movq	9008(%rsp), %rcx        # 8-byte Reload
	movq	9120(%rsp), %r8         # 8-byte Reload
	movq	9000(%rsp), %r9         # 8-byte Reload
	movq	8976(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, 8884(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	9136(%rsp), %rdi        # 8-byte Reload
	movq	8960(%rsp), %rsi        # 8-byte Reload
	movq	8952(%rsp), %rdx        # 8-byte Reload
	movq	9176(%rsp), %rcx        # 8-byte Reload
	movq	9128(%rsp), %r8         # 8-byte Reload
	movl	9208(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	8912(%rsp), %rdi        # 8-byte Reload
	movq	9184(%rsp), %rsi        # 8-byte Reload
	movq	9144(%rsp), %rdx        # 8-byte Reload
	movq	9000(%rsp), %rcx        # 8-byte Reload
	movq	9168(%rsp), %r8         # 8-byte Reload
	movq	9000(%rsp), %r9         # 8-byte Reload
	movq	8976(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	9212(%rsp), %eax        # 4-byte Reload
	movl	%eax, %eax
	movl	%eax, %edx
	movq	9008(%rsp), %rdi        # 8-byte Reload
	movq	9184(%rsp), %rsi        # 8-byte Reload
	movq	9008(%rsp), %rcx        # 8-byte Reload
	movq	9152(%rsp), %r8         # 8-byte Reload
	movq	9000(%rsp), %r9         # 8-byte Reload
	movq	8976(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	9212(%rsp), %eax        # 4-byte Reload
	addl	$4294967294, %eax       # imm = 0xFFFFFFFE
	movl	%eax, %esi
	movl	%esi, %edx
	movq	9192(%rsp), %rdi        # 8-byte Reload
	movq	9184(%rsp), %rsi        # 8-byte Reload
	movq	9008(%rsp), %rcx        # 8-byte Reload
	movq	9176(%rsp), %r8         # 8-byte Reload
	movq	9000(%rsp), %r9         # 8-byte Reload
	movq	8976(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, 8880(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
.Ltmp311:
	#DEBUG_VALUE: tred1:l <- [RSP+8880]
	#DEBUG_VALUE: tred1:h <- 0.000000e+00
	#DEBUG_VALUE: tred1:scale <- 0.000000e+00
	#DEBUG_VALUE: tred1:k <- 0
	.loc	2 794 0                 # eispack.c:794:0
	movq	8968(%rsp), %rdi        # 8-byte Reload
	movq	8960(%rsp), %rsi        # 8-byte Reload
	movq	8952(%rsp), %rdx        # 8-byte Reload
	movq	8992(%rsp), %rcx        # 8-byte Reload
	movq	9160(%rsp), %r8         # 8-byte Reload
	movl	9208(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	8912(%rsp), %rdi        # 8-byte Reload
	movq	9184(%rsp), %rsi        # 8-byte Reload
	movq	9000(%rsp), %rdx        # 8-byte Reload
	movq	9000(%rsp), %rcx        # 8-byte Reload
	movq	9168(%rsp), %r8         # 8-byte Reload
	movq	9000(%rsp), %r9         # 8-byte Reload
	movq	8976(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	8880(%rsp), %eax        # 4-byte Reload
	movl	%eax, %eax
	movl	%eax, %edx
	movq	9008(%rsp), %rdi        # 8-byte Reload
	movq	9184(%rsp), %rsi        # 8-byte Reload
	movq	9008(%rsp), %rcx        # 8-byte Reload
	movq	9176(%rsp), %r8         # 8-byte Reload
	movq	9000(%rsp), %r9         # 8-byte Reload
	movq	8976(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	8880(%rsp), %eax        # 4-byte Reload
	cmpl	$0, %eax
	setl	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	9192(%rsp), %rdi        # 8-byte Reload
	movq	9008(%rsp), %rsi        # 8-byte Reload
	movq	9008(%rsp), %rcx        # 8-byte Reload
	movq	8992(%rsp), %r8         # 8-byte Reload
	movq	9000(%rsp), %r9         # 8-byte Reload
	movq	8976(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 8879(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	8968(%rsp), %rdi        # 8-byte Reload
	movq	8960(%rsp), %rsi        # 8-byte Reload
	movq	8952(%rsp), %rdx        # 8-byte Reload
	movq	8936(%rsp), %rcx        # 8-byte Reload
	movq	8912(%rsp), %r8         # 8-byte Reload
	movl	9208(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	8920(%rsp), %rdi        # 8-byte Reload
	movq	9000(%rsp), %rsi        # 8-byte Reload
	movq	9000(%rsp), %rdx        # 8-byte Reload
	movq	9008(%rsp), %rcx        # 8-byte Reload
	movq	8928(%rsp), %r8         # 8-byte Reload
	movq	9000(%rsp), %r9         # 8-byte Reload
	movq	8976(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	8912(%rsp), %rdi        # 8-byte Reload
	movq	9000(%rsp), %rsi        # 8-byte Reload
	movq	9000(%rsp), %rdx        # 8-byte Reload
	movq	9008(%rsp), %rcx        # 8-byte Reload
	movq	8904(%rsp), %r8         # 8-byte Reload
	movq	9000(%rsp), %r9         # 8-byte Reload
	movq	8976(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	8879(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, %edx
	movq	9008(%rsp), %rdi        # 8-byte Reload
	movq	9008(%rsp), %rsi        # 8-byte Reload
	movq	9008(%rsp), %rcx        # 8-byte Reload
	movq	8992(%rsp), %r8         # 8-byte Reload
	movq	9000(%rsp), %r9         # 8-byte Reload
	movq	8976(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	8879(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	movq	9000(%rsp), %rcx        # 8-byte Reload
	vmovsd	8944(%rsp), %xmm0       # 8-byte Reload
	movq	%rcx, 8864(%rsp)        # 8-byte Spill
	vmovsd	%xmm0, 8856(%rsp)       # 8-byte Spill
	jne	.LBB9_14
.Ltmp312:
.LBB9_9:                                # %.lr.ph
                                        #   Parent Loop BB9_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vmovsd	8856(%rsp), %xmm0       # 8-byte Reload
	movq	8864(%rsp), %rax        # 8-byte Reload
	movabsq	$1, %rcx
	leaq	.L.str126, %rdx
	movabsq	$0, %rsi
	leaq	.L.str792, %rdi
	movabsq	$2, %r8
	leaq	.L.str117, %r9
	movabsq	$3, %r10
	leaq	.L.str128, %r11
	movabsq	$794, %rbx              # imm = 0x31A
	leaq	.L.str59144, %r14
	leaq	.L.str127, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 8848(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 8840(%rsp)        # 8-byte Spill
	leaq	.L.str125, %rax
	movq	%rax, 8832(%rsp)        # 8-byte Spill
	leaq	.L.str110, %rax
	movq	%rax, 8824(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 8816(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 8808(%rsp)        # 8-byte Spill
	leaq	.L.str119, %rax
	movq	%rax, 8800(%rsp)        # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, 8792(%rsp)        # 8-byte Spill
	leaq	.L.str118, %rax
	movq	%rax, 8784(%rsp)        # 8-byte Spill
	leaq	.L.str1499, %rax
	movq	%rax, 8776(%rsp)        # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, 8768(%rsp)        # 8-byte Spill
	leaq	.L.str121, %rax
	movq	%rax, 8760(%rsp)        # 8-byte Spill
	leaq	.L.str120, %rax
	movq	%rax, 8752(%rsp)        # 8-byte Spill
	leaq	.L.str124, %rax
	movq	%rax, 8744(%rsp)        # 8-byte Spill
	movabsq	$796, %rax              # imm = 0x31C
	movq	%rax, 8736(%rsp)        # 8-byte Spill
	movabsq	$9, %rax
	movq	%rax, 8728(%rsp)        # 8-byte Spill
	leaq	.L.str123, %rax
	movq	%rax, 8720(%rsp)        # 8-byte Spill
	leaq	fabs, %rax
	movq	%rax, 8712(%rsp)        # 8-byte Spill
	leaq	.L.str691, %rax
	movq	%rax, 8704(%rsp)        # 8-byte Spill
	movabsq	$49, %rax
	movq	%rax, 8696(%rsp)        # 8-byte Spill
	leaq	.L.str122, %rax
	movq	%rax, 8688(%rsp)        # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, 8680(%rsp)        # 8-byte Spill
	leaq	.L.str85170, %rax
	movq	%rax, 8672(%rsp)        # 8-byte Spill
	movabsq	$29, %rax
	vxorps	%xmm1, %xmm1, %xmm1
	movq	%rax, 8664(%rsp)        # 8-byte Spill
	leaq	.L.str94, %rax
	movq	%rax, 8656(%rsp)        # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 8648(%rsp)        # 8-byte Spill
	movabsq	$48, %rax
	.loc	2 796 0                 # eispack.c:796:0
.Ltmp313:
	movq	%rax, 8640(%rsp)        # 8-byte Spill
	movq	8648(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 8632(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 8624(%rsp)        # 8-byte Spill
	movq	%r14, %rsi
	movq	%rdx, 8616(%rsp)        # 8-byte Spill
	movq	%r9, %rdx
	movq	8784(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 8608(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	8640(%rsp), %rax        # 8-byte Reload
	movq	%r8, 8600(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 8592(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	vmovsd	%xmm0, 8584(%rsp)       # 8-byte Spill
	movl	%ebp, 8580(%rsp)        # 4-byte Spill
	movl	%r12d, 8576(%rsp)       # 4-byte Spill
	movq	%r13, 8568(%rsp)        # 8-byte Spill
	vmovsd	%xmm1, 8560(%rsp)       # 8-byte Spill
	movq	%r15, 8552(%rsp)        # 8-byte Spill
	movq	%r14, 8544(%rsp)        # 8-byte Spill
	movq	%r10, 8536(%rsp)        # 8-byte Spill
	movq	%r11, 8528(%rsp)        # 8-byte Spill
	movq	%rbx, 8520(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	8600(%rsp), %rdi        # 8-byte Reload
	movq	8808(%rsp), %rsi        # 8-byte Reload
	movq	8624(%rsp), %rdx        # 8-byte Reload
	movq	8624(%rsp), %rcx        # 8-byte Reload
	movq	8776(%rsp), %r8         # 8-byte Reload
	movq	8608(%rsp), %r9         # 8-byte Reload
	movq	8656(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	8608(%rsp), %rdi        # 8-byte Reload
	movq	8808(%rsp), %rsi        # 8-byte Reload
	movq	8624(%rsp), %rdx        # 8-byte Reload
	movq	8608(%rsp), %rcx        # 8-byte Reload
	movq	8800(%rsp), %r8         # 8-byte Reload
	movq	8608(%rsp), %r9         # 8-byte Reload
	movq	8592(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	8568(%rsp), %rdi        # 8-byte Reload
	movq	8808(%rsp), %rsi        # 8-byte Reload
	movq	8848(%rsp), %rdx        # 8-byte Reload
	movq	8608(%rsp), %rcx        # 8-byte Reload
	movq	8784(%rsp), %r8         # 8-byte Reload
	movq	8624(%rsp), %r9         # 8-byte Reload
	movq	8592(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	8648(%rsp), %rdi        # 8-byte Reload
	movq	8544(%rsp), %rsi        # 8-byte Reload
	movq	8592(%rsp), %rdx        # 8-byte Reload
	movq	8752(%rsp), %rcx        # 8-byte Reload
	movq	8640(%rsp), %r8         # 8-byte Reload
	movl	8580(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	8600(%rsp), %rdi        # 8-byte Reload
	movq	8808(%rsp), %rsi        # 8-byte Reload
	vmovsd	8560(%rsp), %xmm0       # 8-byte Reload
	movq	8624(%rsp), %rdx        # 8-byte Reload
	movq	8776(%rsp), %rcx        # 8-byte Reload
	movq	8608(%rsp), %r8         # 8-byte Reload
	movq	8656(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	8608(%rsp), %rdi        # 8-byte Reload
	movq	8808(%rsp), %rsi        # 8-byte Reload
	movq	8624(%rsp), %rdx        # 8-byte Reload
	movq	8608(%rsp), %rcx        # 8-byte Reload
	movq	8760(%rsp), %r8         # 8-byte Reload
	movq	8608(%rsp), %r9         # 8-byte Reload
	movq	8592(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	8568(%rsp), %rdi        # 8-byte Reload
	movq	8808(%rsp), %rsi        # 8-byte Reload
	vmovsd	8584(%rsp), %xmm0       # 8-byte Reload
	movq	8608(%rsp), %rdx        # 8-byte Reload
	movq	8752(%rsp), %rcx        # 8-byte Reload
	movq	8624(%rsp), %r8         # 8-byte Reload
	movq	8592(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	8736(%rsp), %rdi        # 8-byte Reload
	movq	8544(%rsp), %rsi        # 8-byte Reload
	movq	8592(%rsp), %rdx        # 8-byte Reload
	movq	8688(%rsp), %rcx        # 8-byte Reload
	movq	8664(%rsp), %r8         # 8-byte Reload
	movl	8580(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	8600(%rsp), %rdi        # 8-byte Reload
	movq	8808(%rsp), %rsi        # 8-byte Reload
	movq	8848(%rsp), %rdx        # 8-byte Reload
	movq	8608(%rsp), %rcx        # 8-byte Reload
	movq	8784(%rsp), %r8         # 8-byte Reload
	movq	8624(%rsp), %r9         # 8-byte Reload
	movq	8632(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	8608(%rsp), %rdi        # 8-byte Reload
	movq	8808(%rsp), %rsi        # 8-byte Reload
	movq	10968(%rsp), %rdx       # 8-byte Reload
	movq	8608(%rsp), %rcx        # 8-byte Reload
	movq	8672(%rsp), %r8         # 8-byte Reload
	movq	8624(%rsp), %r9         # 8-byte Reload
	movq	8632(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	8848(%rsp), %rax        # 8-byte Reload
	shlq	$3, %rax
	movq	10968(%rsp), %rcx       # 8-byte Reload
	addq	%rax, %rcx
	movq	8568(%rsp), %rdi        # 8-byte Reload
	movq	8808(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	8608(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 8512(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	8688(%rsp), %r8         # 8-byte Reload
	movq	8624(%rsp), %r9         # 8-byte Reload
	movq	8632(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	8736(%rsp), %rdi        # 8-byte Reload
	movq	8544(%rsp), %rsi        # 8-byte Reload
	movq	8592(%rsp), %rdx        # 8-byte Reload
	movq	8720(%rsp), %rcx        # 8-byte Reload
	movq	8680(%rsp), %r8         # 8-byte Reload
	movl	8580(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	8608(%rsp), %rdi        # 8-byte Reload
	movq	8808(%rsp), %rsi        # 8-byte Reload
	movq	8512(%rsp), %rdx        # 8-byte Reload
	movq	8608(%rsp), %rcx        # 8-byte Reload
	movq	8688(%rsp), %r8         # 8-byte Reload
	movq	8624(%rsp), %r9         # 8-byte Reload
	movq	8632(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	10968(%rsp), %rax       # 8-byte Reload
	movq	8848(%rsp), %rcx        # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
	movq	8568(%rsp), %rdi        # 8-byte Reload
	movq	8808(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 8504(%rsp)       # 8-byte Spill
	movq	8608(%rsp), %rdx        # 8-byte Reload
	movq	8720(%rsp), %rcx        # 8-byte Reload
	movq	8624(%rsp), %r8         # 8-byte Reload
	movq	8632(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	8736(%rsp), %rdi        # 8-byte Reload
	movq	8544(%rsp), %rsi        # 8-byte Reload
	movq	8592(%rsp), %rdx        # 8-byte Reload
	movq	8744(%rsp), %rcx        # 8-byte Reload
	movq	8696(%rsp), %r8         # 8-byte Reload
	movl	8580(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	8600(%rsp), %rdi        # 8-byte Reload
	movq	8808(%rsp), %rsi        # 8-byte Reload
	movq	8712(%rsp), %rdx        # 8-byte Reload
	movq	8608(%rsp), %rcx        # 8-byte Reload
	movq	8704(%rsp), %r8         # 8-byte Reload
	movq	8624(%rsp), %r9         # 8-byte Reload
	movq	8632(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	8608(%rsp), %rdi        # 8-byte Reload
	movq	8808(%rsp), %rsi        # 8-byte Reload
	vmovsd	8504(%rsp), %xmm0       # 8-byte Reload
	movq	8608(%rsp), %rdx        # 8-byte Reload
	movq	8720(%rsp), %rcx        # 8-byte Reload
	movq	8624(%rsp), %r8         # 8-byte Reload
	movq	8632(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	.LCPI9_0(%rip), %xmm0
	vmovsd	8504(%rsp), %xmm1       # 8-byte Reload
	vandpd	%xmm0, %xmm1, %xmm0
	movq	8568(%rsp), %rdi        # 8-byte Reload
	movq	8808(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 8496(%rsp)       # 8-byte Spill
	movq	8608(%rsp), %rdx        # 8-byte Reload
	movq	8744(%rsp), %rcx        # 8-byte Reload
	movq	8624(%rsp), %r8         # 8-byte Reload
	movq	8632(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	8736(%rsp), %rdi        # 8-byte Reload
	movq	8544(%rsp), %rsi        # 8-byte Reload
	movq	8592(%rsp), %rdx        # 8-byte Reload
	movq	8760(%rsp), %rcx        # 8-byte Reload
	movq	8728(%rsp), %r8         # 8-byte Reload
	movl	8580(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	8600(%rsp), %rdi        # 8-byte Reload
	movq	8808(%rsp), %rsi        # 8-byte Reload
	vmovsd	8496(%rsp), %xmm0       # 8-byte Reload
	movq	8608(%rsp), %rdx        # 8-byte Reload
	movq	8744(%rsp), %rcx        # 8-byte Reload
	movq	8624(%rsp), %r8         # 8-byte Reload
	movq	8632(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	8608(%rsp), %rdi        # 8-byte Reload
	movq	8808(%rsp), %rsi        # 8-byte Reload
	vmovsd	8584(%rsp), %xmm0       # 8-byte Reload
	movq	8608(%rsp), %rdx        # 8-byte Reload
	movq	8752(%rsp), %rcx        # 8-byte Reload
	movq	8624(%rsp), %r8         # 8-byte Reload
	movq	8632(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	8584(%rsp), %xmm0       # 8-byte Reload
	vmovsd	8496(%rsp), %xmm1       # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
	movq	8568(%rsp), %rdi        # 8-byte Reload
	movq	8808(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	8608(%rsp), %rdx        # 8-byte Reload
	movq	8760(%rsp), %rcx        # 8-byte Reload
	movq	8624(%rsp), %r8         # 8-byte Reload
	movq	8632(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 8488(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
.Ltmp314:
	#DEBUG_VALUE: tred1:scale <- [RSP+8488]
	.loc	2 794 0                 # eispack.c:794:0
	movq	8520(%rsp), %rdi        # 8-byte Reload
	movq	8544(%rsp), %rsi        # 8-byte Reload
	movq	8592(%rsp), %rdx        # 8-byte Reload
	movq	8800(%rsp), %rcx        # 8-byte Reload
	movq	8768(%rsp), %r8         # 8-byte Reload
	movl	8580(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	8600(%rsp), %rdi        # 8-byte Reload
	movq	8808(%rsp), %rsi        # 8-byte Reload
	movq	8608(%rsp), %rdx        # 8-byte Reload
	movq	8624(%rsp), %rcx        # 8-byte Reload
	movq	8776(%rsp), %r8         # 8-byte Reload
	movq	8624(%rsp), %r9         # 8-byte Reload
	movq	8632(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	8608(%rsp), %rdi        # 8-byte Reload
	movq	8808(%rsp), %rsi        # 8-byte Reload
	movq	8848(%rsp), %rdx        # 8-byte Reload
	movq	8608(%rsp), %rcx        # 8-byte Reload
	movq	8784(%rsp), %r8         # 8-byte Reload
	movq	8624(%rsp), %r9         # 8-byte Reload
	movq	8632(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	8848(%rsp), %rax        # 8-byte Reload
	addq	$1, %rax
	movq	8568(%rsp), %rdi        # 8-byte Reload
	movq	8808(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	8608(%rsp), %rcx        # 8-byte Reload
	movq	8800(%rsp), %r8         # 8-byte Reload
	movq	8624(%rsp), %r9         # 8-byte Reload
	movq	8632(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 8480(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	8520(%rsp), %rdi        # 8-byte Reload
	movq	8544(%rsp), %rsi        # 8-byte Reload
	movq	8592(%rsp), %rdx        # 8-byte Reload
	movq	8832(%rsp), %rcx        # 8-byte Reload
	movq	8792(%rsp), %r8         # 8-byte Reload
	movl	8580(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	8608(%rsp), %rdi        # 8-byte Reload
	movq	8808(%rsp), %rsi        # 8-byte Reload
	movq	8480(%rsp), %rdx        # 8-byte Reload
	movq	8608(%rsp), %rcx        # 8-byte Reload
	movq	8800(%rsp), %r8         # 8-byte Reload
	movq	8624(%rsp), %r9         # 8-byte Reload
	movq	8632(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	8480(%rsp), %rax        # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	8568(%rsp), %rdi        # 8-byte Reload
	movq	8840(%rsp), %rsi        # 8-byte Reload
	movq	8608(%rsp), %rcx        # 8-byte Reload
	movq	8832(%rsp), %r8         # 8-byte Reload
	movq	8624(%rsp), %r9         # 8-byte Reload
	movq	8632(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 8476(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	8520(%rsp), %rdi        # 8-byte Reload
	movq	8544(%rsp), %rsi        # 8-byte Reload
	movq	8592(%rsp), %rdx        # 8-byte Reload
	movq	8616(%rsp), %rcx        # 8-byte Reload
	movq	8816(%rsp), %r8         # 8-byte Reload
	movl	8580(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	8900(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	8600(%rsp), %rdi        # 8-byte Reload
	movq	8840(%rsp), %rsi        # 8-byte Reload
	movq	8608(%rsp), %rcx        # 8-byte Reload
	movq	8824(%rsp), %r8         # 8-byte Reload
	movq	8624(%rsp), %r9         # 8-byte Reload
	movq	8632(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	8476(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	8608(%rsp), %rdi        # 8-byte Reload
	movq	8840(%rsp), %rsi        # 8-byte Reload
	movq	8608(%rsp), %rcx        # 8-byte Reload
	movq	8832(%rsp), %r8         # 8-byte Reload
	movq	8624(%rsp), %r9         # 8-byte Reload
	movq	8632(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	8476(%rsp), %ebp        # 4-byte Reload
	movl	8900(%rsp), %r12d       # 4-byte Reload
	cmpl	%r12d, %ebp
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	8568(%rsp), %rdi        # 8-byte Reload
	movq	8608(%rsp), %rsi        # 8-byte Reload
	movq	8608(%rsp), %rcx        # 8-byte Reload
	movq	8616(%rsp), %r8         # 8-byte Reload
	movq	8624(%rsp), %r9         # 8-byte Reload
	movq	8632(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 8475(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	8520(%rsp), %rdi        # 8-byte Reload
	movq	8544(%rsp), %rsi        # 8-byte Reload
	movq	8592(%rsp), %rdx        # 8-byte Reload
	movq	8552(%rsp), %rcx        # 8-byte Reload
	movq	8600(%rsp), %r8         # 8-byte Reload
	movl	8580(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	8536(%rsp), %rdi        # 8-byte Reload
	movq	8624(%rsp), %rsi        # 8-byte Reload
	movq	8624(%rsp), %rdx        # 8-byte Reload
	movq	8608(%rsp), %rcx        # 8-byte Reload
	movq	8528(%rsp), %r8         # 8-byte Reload
	movq	8624(%rsp), %r9         # 8-byte Reload
	movq	8632(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	8600(%rsp), %rdi        # 8-byte Reload
	movq	8624(%rsp), %rsi        # 8-byte Reload
	movq	8624(%rsp), %rdx        # 8-byte Reload
	movq	8608(%rsp), %rcx        # 8-byte Reload
	movq	8592(%rsp), %r8         # 8-byte Reload
	movq	8624(%rsp), %r9         # 8-byte Reload
	movq	8632(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	8475(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	8608(%rsp), %rdi        # 8-byte Reload
	movq	8608(%rsp), %rsi        # 8-byte Reload
	movq	8608(%rsp), %rcx        # 8-byte Reload
	movq	8616(%rsp), %r8         # 8-byte Reload
	movq	8624(%rsp), %r9         # 8-byte Reload
	movq	8632(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	8475(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	movq	8480(%rsp), %rcx        # 8-byte Reload
	vmovsd	8488(%rsp), %xmm0       # 8-byte Reload
	movq	%rcx, 8864(%rsp)        # 8-byte Spill
	vmovsd	%xmm0, 8856(%rsp)       # 8-byte Spill
	jne	.LBB9_10
	jmp	.LBB9_9
.Ltmp315:
.LBB9_10:                               # %._crit_edge
                                        #   in Loop: Header=BB9_8 Depth=1
	movabsq	$1, %rax
	leaq	.L.str129, %rcx
	movabsq	$0, %rdx
	leaq	.L.str792, %rsi
	movabsq	$2, %rdi
	leaq	.L.str133, %r8
	movabsq	$3, %r9
	leaq	.L.str132, %r10
	movabsq	$799, %r11              # imm = 0x31F
	leaq	.L.str59144, %rbx
	leaq	.L.str128, %r14
	leaq	.L.str131, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 8464(%rsp)        # 8-byte Spill
	leaq	.L.str130, %rax
	movq	%rax, 8456(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 8448(%rsp)        # 8-byte Spill
	leaq	.L.str113, %rax
	movq	%rax, 8440(%rsp)        # 8-byte Spill
	leaq	.L.str1499, %rax
	movq	%rax, 8432(%rsp)        # 8-byte Spill
	movabsq	$801, %rax              # imm = 0x321
	movq	%rax, 8424(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	vxorps	%xmm0, %xmm0, %xmm0
	movq	%rax, 8416(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 8408(%rsp)        # 8-byte Spill
	leaq	.L.str121, %rax
	movq	%rax, 8400(%rsp)        # 8-byte Spill
	movabsq	$47, %rax
	.loc	2 799 0                 # eispack.c:799:0
.Ltmp316:
	movq	%rdi, 8392(%rsp)        # 8-byte Spill
	movq	%r11, %rdi
	movq	%rsi, 8384(%rsp)        # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, 8376(%rsp)        # 8-byte Spill
	movq	%r14, %rdx
	movq	%rcx, 8368(%rsp)        # 8-byte Spill
	movq	%r8, 8360(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 8352(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r15, 8344(%rsp)        # 8-byte Spill
	movl	%ebp, 8340(%rsp)        # 4-byte Spill
	movl	%r12d, 8336(%rsp)       # 4-byte Spill
	movq	%r13, 8328(%rsp)        # 8-byte Spill
	vmovsd	%xmm0, 8320(%rsp)       # 8-byte Spill
	movq	%r14, 8312(%rsp)        # 8-byte Spill
	movq	%rbx, 8304(%rsp)        # 8-byte Spill
	movq	%r10, 8296(%rsp)        # 8-byte Spill
	movq	%r11, 8288(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	8392(%rsp), %rdi        # 8-byte Reload
	movq	8408(%rsp), %rsi        # 8-byte Reload
	vmovsd	8320(%rsp), %xmm0       # 8-byte Reload
	movq	8376(%rsp), %rdx        # 8-byte Reload
	movq	8432(%rsp), %rcx        # 8-byte Reload
	movq	8376(%rsp), %r8         # 8-byte Reload
	movq	8384(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	8464(%rsp), %rdi        # 8-byte Reload
	movq	8408(%rsp), %rsi        # 8-byte Reload
	vmovsd	8488(%rsp), %xmm0       # 8-byte Reload
	movq	8464(%rsp), %rdx        # 8-byte Reload
	movq	8400(%rsp), %rcx        # 8-byte Reload
	movq	8376(%rsp), %r8         # 8-byte Reload
	movq	8384(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	8488(%rsp), %xmm0       # 8-byte Reload
	vmovsd	8320(%rsp), %xmm1       # 8-byte Reload
	vucomisd	%xmm1, %xmm0
	sete	%al
	setnp	%cl
	andb	%al, %cl
	.loc	2 801 0                 # eispack.c:801:0
.Ltmp317:
	movb	%cl, %al
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	8328(%rsp), %rdi        # 8-byte Reload
	movq	8464(%rsp), %rsi        # 8-byte Reload
	movq	8464(%rsp), %r8         # 8-byte Reload
	movb	%cl, 8287(%rsp)         # 1-byte Spill
	movq	%r8, %rcx
	movq	8368(%rsp), %r8         # 8-byte Reload
	movq	8376(%rsp), %r9         # 8-byte Reload
	movq	8384(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	8424(%rsp), %rdi        # 8-byte Reload
	movq	8304(%rsp), %rsi        # 8-byte Reload
	movq	8312(%rsp), %rdx        # 8-byte Reload
	movq	8456(%rsp), %rcx        # 8-byte Reload
	movq	8416(%rsp), %r8         # 8-byte Reload
	movl	8340(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	8392(%rsp), %rdi        # 8-byte Reload
	movq	8448(%rsp), %rsi        # 8-byte Reload
	movq	8376(%rsp), %rdx        # 8-byte Reload
	movq	8376(%rsp), %rcx        # 8-byte Reload
	movq	8432(%rsp), %r8         # 8-byte Reload
	movq	8376(%rsp), %r9         # 8-byte Reload
	movq	8384(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	8880(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	8464(%rsp), %rdi        # 8-byte Reload
	movq	8448(%rsp), %rsi        # 8-byte Reload
	movq	8464(%rsp), %rcx        # 8-byte Reload
	movq	8440(%rsp), %r8         # 8-byte Reload
	movq	8376(%rsp), %r9         # 8-byte Reload
	movq	8384(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	8880(%rsp), %ebp        # 4-byte Reload
	cmpl	$0, %ebp
	setl	%al
.Ltmp318:
	.loc	2 799 0                 # eispack.c:799:0
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %r12d
	movl	%r12d, %edx
	movq	8328(%rsp), %rdi        # 8-byte Reload
	movq	8464(%rsp), %rsi        # 8-byte Reload
	movq	8464(%rsp), %rcx        # 8-byte Reload
	movq	8456(%rsp), %r8         # 8-byte Reload
	movq	8376(%rsp), %r9         # 8-byte Reload
	movq	8384(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 8286(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	8288(%rsp), %rdi        # 8-byte Reload
	movq	8304(%rsp), %rsi        # 8-byte Reload
	movq	8312(%rsp), %rdx        # 8-byte Reload
	movq	8344(%rsp), %rcx        # 8-byte Reload
	movq	8392(%rsp), %r8         # 8-byte Reload
	movl	8340(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	8352(%rsp), %rdi        # 8-byte Reload
	movq	8376(%rsp), %rsi        # 8-byte Reload
	movq	8376(%rsp), %rdx        # 8-byte Reload
	movq	8464(%rsp), %rcx        # 8-byte Reload
	movq	8296(%rsp), %r8         # 8-byte Reload
	movq	8376(%rsp), %r9         # 8-byte Reload
	movq	8384(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	8392(%rsp), %rdi        # 8-byte Reload
	movq	8376(%rsp), %rsi        # 8-byte Reload
	movq	8376(%rsp), %rdx        # 8-byte Reload
	movq	8464(%rsp), %rcx        # 8-byte Reload
	movq	8360(%rsp), %r8         # 8-byte Reload
	movq	8376(%rsp), %r9         # 8-byte Reload
	movq	8384(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	8287(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	8464(%rsp), %rdi        # 8-byte Reload
	movq	8464(%rsp), %rsi        # 8-byte Reload
	movq	8464(%rsp), %rcx        # 8-byte Reload
	movq	8368(%rsp), %r8         # 8-byte Reload
	movq	8376(%rsp), %r9         # 8-byte Reload
	movq	8384(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	8287(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB9_11
	jmp	.LBB9_12
.LBB9_11:                               # %.preheader43
                                        #   in Loop: Header=BB9_8 Depth=1
	movabsq	$0, %rax
	movabsq	$1, %rcx
	leaq	.L.str130, %r8
	leaq	.L.str792, %rdx
	movabsq	$2, %rsi
	leaq	.L.str135, %rdi
	movabsq	$3, %r9
	leaq	.L.str116, %r10
	movabsq	$801, %r11              # imm = 0x321
	leaq	.L.str59144, %rbx
	leaq	.L.str132, %r14
	leaq	.L.str134, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	.loc	2 801 0                 # eispack.c:801:0
.Ltmp319:
	movq	%rdi, 8272(%rsp)        # 8-byte Spill
	movq	%r11, %rdi
	movq	%rsi, 8264(%rsp)        # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, 8256(%rsp)        # 8-byte Spill
	movq	%r14, %rdx
	movq	%rcx, 8248(%rsp)        # 8-byte Spill
	movq	%r15, %rcx
	movq	8264(%rsp), %r11        # 8-byte Reload
	movq	%r8, 8240(%rsp)         # 8-byte Spill
	movq	%r11, %r8
	movq	%r9, 8232(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%rax, 8224(%rsp)        # 8-byte Spill
	movq	%r10, 8216(%rsp)        # 8-byte Spill
	movl	%r12d, 8212(%rsp)       # 4-byte Spill
	callq	trace_logger_log0
	movq	8232(%rsp), %rdi        # 8-byte Reload
	movq	8224(%rsp), %rsi        # 8-byte Reload
	movq	8224(%rsp), %rdx        # 8-byte Reload
	movq	8248(%rsp), %rcx        # 8-byte Reload
	movq	8216(%rsp), %r8         # 8-byte Reload
	movq	8224(%rsp), %r9         # 8-byte Reload
	movq	8256(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	8264(%rsp), %rdi        # 8-byte Reload
	movq	8224(%rsp), %rsi        # 8-byte Reload
	movq	8224(%rsp), %rdx        # 8-byte Reload
	movq	8248(%rsp), %rcx        # 8-byte Reload
	movq	8272(%rsp), %r8         # 8-byte Reload
	movq	8224(%rsp), %r9         # 8-byte Reload
	movq	8256(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movb	8286(%rsp), %r13b       # 1-byte Reload
	andb	$1, %r13b
	movzbl	%r13b, %ebp
	movl	%ebp, %edx
	movq	8248(%rsp), %rdi        # 8-byte Reload
	movq	8248(%rsp), %rsi        # 8-byte Reload
	movq	8248(%rsp), %rcx        # 8-byte Reload
	movq	8240(%rsp), %r8         # 8-byte Reload
	movq	8224(%rsp), %r9         # 8-byte Reload
	movq	8256(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movb	8286(%rsp), %r13b       # 1-byte Reload
	testb	$1, %r13b
	movq	8224(%rsp), %rax        # 8-byte Reload
	movq	%rax, 8200(%rsp)        # 8-byte Spill
	jne	.LBB9_14
	jmp	.LBB9_13
.Ltmp320:
.LBB9_12:                               # %.preheader
                                        #   in Loop: Header=BB9_8 Depth=1
	vxorps	%xmm0, %xmm0, %xmm0
	movabsq	$0, %rax
	movabsq	$1, %rcx
	leaq	.L.str130, %r8
	leaq	.L.str792, %rdx
	movabsq	$2, %rsi
	leaq	.L.str138, %rdi
	movabsq	$3, %r9
	leaq	.L.str137, %r10
	movabsq	$813, %r11              # imm = 0x32D
	leaq	.L.str59144, %rbx
	leaq	.L.str133, %r14
	leaq	.L.str136, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	.loc	2 813 0                 # eispack.c:813:0
.Ltmp321:
	movq	%rdi, 8192(%rsp)        # 8-byte Spill
	movq	%r11, %rdi
	movq	%rsi, 8184(%rsp)        # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, 8176(%rsp)        # 8-byte Spill
	movq	%r14, %rdx
	movq	%rcx, 8168(%rsp)        # 8-byte Spill
	movq	%r15, %rcx
	movq	8184(%rsp), %r11        # 8-byte Reload
	movq	%r8, 8160(%rsp)         # 8-byte Spill
	movq	%r11, %r8
	movq	%r9, 8152(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	vmovsd	%xmm0, 8144(%rsp)       # 8-byte Spill
	movq	%rax, 8136(%rsp)        # 8-byte Spill
	movq	%r10, 8128(%rsp)        # 8-byte Spill
	movl	%r12d, 8124(%rsp)       # 4-byte Spill
	callq	trace_logger_log0
	movq	8152(%rsp), %rdi        # 8-byte Reload
	movq	8136(%rsp), %rsi        # 8-byte Reload
	movq	8136(%rsp), %rdx        # 8-byte Reload
	movq	8168(%rsp), %rcx        # 8-byte Reload
	movq	8128(%rsp), %r8         # 8-byte Reload
	movq	8136(%rsp), %r9         # 8-byte Reload
	movq	8176(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	8184(%rsp), %rdi        # 8-byte Reload
	movq	8136(%rsp), %rsi        # 8-byte Reload
	movq	8136(%rsp), %rdx        # 8-byte Reload
	movq	8168(%rsp), %rcx        # 8-byte Reload
	movq	8192(%rsp), %r8         # 8-byte Reload
	movq	8136(%rsp), %r9         # 8-byte Reload
	movq	8176(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movb	8286(%rsp), %r13b       # 1-byte Reload
	andb	$1, %r13b
	movzbl	%r13b, %ebp
	movl	%ebp, %edx
	movq	8168(%rsp), %rdi        # 8-byte Reload
	movq	8168(%rsp), %rsi        # 8-byte Reload
	movq	8168(%rsp), %rcx        # 8-byte Reload
	movq	8160(%rsp), %r8         # 8-byte Reload
	movq	8136(%rsp), %r9         # 8-byte Reload
	movq	8176(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movb	8286(%rsp), %r13b       # 1-byte Reload
	testb	$1, %r13b
	movq	8136(%rsp), %rax        # 8-byte Reload
	vmovsd	8144(%rsp), %xmm0       # 8-byte Reload
	movq	%rax, 8112(%rsp)        # 8-byte Spill
	vmovsd	%xmm0, 8104(%rsp)       # 8-byte Spill
	jne	.LBB9_19
	jmp	.LBB9_16
.Ltmp322:
.LBB9_13:                               # %.lr.ph45
                                        #   Parent Loop BB9_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	8200(%rsp), %rax        # 8-byte Reload
	movabsq	$1, %rcx
	leaq	.L.str157, %rdx
	movabsq	$0, %rsi
	leaq	.L.str792, %rdi
	movabsq	$2, %r8
	leaq	.L.str135, %r9
	movabsq	$3, %r10
	leaq	.L.str116, %r11
	movabsq	$801, %rbx              # imm = 0x321
	leaq	.L.str59144, %r14
	leaq	.L.str158, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 8096(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 8088(%rsp)        # 8-byte Spill
	leaq	.L.str156, %rax
	movq	%rax, 8080(%rsp)        # 8-byte Spill
	leaq	.L.str110, %rax
	movq	%rax, 8072(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 8064(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 8056(%rsp)        # 8-byte Spill
	leaq	.L.str140, %rax
	movq	%rax, 8048(%rsp)        # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, 8040(%rsp)        # 8-byte Spill
	leaq	.L.str139, %rax
	movq	%rax, 8032(%rsp)        # 8-byte Spill
	leaq	.L.str1499, %rax
	movq	%rax, 8024(%rsp)        # 8-byte Spill
	movabsq	$8, %rax
	vxorps	%xmm0, %xmm0, %xmm0
	movq	%rax, 8016(%rsp)        # 8-byte Spill
	leaq	.L.str152, %rax
	movq	%rax, 8008(%rsp)        # 8-byte Spill
	movabsq	$805, %rax              # imm = 0x325
	movq	%rax, 8000(%rsp)        # 8-byte Spill
	leaq	.L.str155, %rax
	movq	%rax, 7992(%rsp)        # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, 7984(%rsp)        # 8-byte Spill
	leaq	.L.str153, %rax
	movq	%rax, 7976(%rsp)        # 8-byte Spill
	leaq	.L.str145, %rax
	movq	%rax, 7968(%rsp)        # 8-byte Spill
	movabsq	$804, %rax              # imm = 0x324
	movq	%rax, 7960(%rsp)        # 8-byte Spill
	leaq	.L.str154, %rax
	movq	%rax, 7952(%rsp)        # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, 7944(%rsp)        # 8-byte Spill
	leaq	.L.str893, %rax
	movq	%rax, 7936(%rsp)        # 8-byte Spill
	leaq	.L.str151, %rax
	movq	%rax, 7928(%rsp)        # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 7920(%rsp)        # 8-byte Spill
	leaq	.L.str150, %rax
	movq	%rax, 7912(%rsp)        # 8-byte Spill
	movabsq	$35, %rax
	movq	%rax, 7904(%rsp)        # 8-byte Spill
	leaq	.L.str142, %rax
	movq	%rax, 7896(%rsp)        # 8-byte Spill
	leaq	.L.str149, %rax
	movq	%rax, 7888(%rsp)        # 8-byte Spill
	leaq	.L.str107, %rax
	movq	%rax, 7880(%rsp)        # 8-byte Spill
	leaq	.L.str146, %rax
	movq	%rax, 7872(%rsp)        # 8-byte Spill
	leaq	.L.str147, %rax
	movq	%rax, 7864(%rsp)        # 8-byte Spill
	movabsq	$803, %rax              # imm = 0x323
	movq	%rax, 7856(%rsp)        # 8-byte Spill
	leaq	.L.str148, %rax
	movq	%rax, 7848(%rsp)        # 8-byte Spill
	leaq	.L.str85170, %rax
	movq	%rax, 7840(%rsp)        # 8-byte Spill
	leaq	.L.str144, %rax
	movq	%rax, 7832(%rsp)        # 8-byte Spill
	leaq	.L.str143, %rax
	movq	%rax, 7824(%rsp)        # 8-byte Spill
	leaq	.L.str113, %rax
	movq	%rax, 7816(%rsp)        # 8-byte Spill
	leaq	.L.str141, %rax
	movq	%rax, 7808(%rsp)        # 8-byte Spill
	leaq	.L.str51136, %rax
	movq	%rax, 7800(%rsp)        # 8-byte Spill
	movabsq	$12, %rax
	movq	%rax, 7792(%rsp)        # 8-byte Spill
	leaq	.L.str132, %rax
	movq	%rax, 7784(%rsp)        # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 7776(%rsp)        # 8-byte Spill
	movabsq	$48, %rax
	.loc	2 803 0                 # eispack.c:803:0
.Ltmp323:
	movq	%rax, 7768(%rsp)        # 8-byte Spill
	movq	7776(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 7760(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 7752(%rsp)        # 8-byte Spill
	movq	%r14, %rsi
	movq	%rdx, 7744(%rsp)        # 8-byte Spill
	movq	%r9, %rdx
	movq	8032(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 7736(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	7768(%rsp), %rax        # 8-byte Reload
	movq	%r8, 7728(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 7720(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movl	%ebp, 7716(%rsp)        # 4-byte Spill
	movl	%r12d, 7712(%rsp)       # 4-byte Spill
	movq	%r13, 7704(%rsp)        # 8-byte Spill
	vmovsd	%xmm0, 7696(%rsp)       # 8-byte Spill
	movq	%r15, 7688(%rsp)        # 8-byte Spill
	movq	%r14, 7680(%rsp)        # 8-byte Spill
	movq	%r10, 7672(%rsp)        # 8-byte Spill
	movq	%r11, 7664(%rsp)        # 8-byte Spill
	movq	%rbx, 7656(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	7728(%rsp), %rdi        # 8-byte Reload
	movq	8056(%rsp), %rsi        # 8-byte Reload
	movq	7752(%rsp), %rdx        # 8-byte Reload
	movq	7752(%rsp), %rcx        # 8-byte Reload
	movq	8024(%rsp), %r8         # 8-byte Reload
	movq	7736(%rsp), %r9         # 8-byte Reload
	movq	7784(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	7736(%rsp), %rdi        # 8-byte Reload
	movq	8056(%rsp), %rsi        # 8-byte Reload
	movq	7752(%rsp), %rdx        # 8-byte Reload
	movq	7736(%rsp), %rcx        # 8-byte Reload
	movq	8048(%rsp), %r8         # 8-byte Reload
	movq	7736(%rsp), %r9         # 8-byte Reload
	movq	7720(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	7704(%rsp), %rdi        # 8-byte Reload
	movq	8056(%rsp), %rsi        # 8-byte Reload
	movq	8096(%rsp), %rdx        # 8-byte Reload
	movq	7736(%rsp), %rcx        # 8-byte Reload
	movq	8032(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7720(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	7856(%rsp), %rdi        # 8-byte Reload
	movq	7680(%rsp), %rsi        # 8-byte Reload
	movq	7720(%rsp), %rdx        # 8-byte Reload
	movq	7808(%rsp), %rcx        # 8-byte Reload
	movq	8040(%rsp), %r8         # 8-byte Reload
	movl	7716(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	7736(%rsp), %rdi        # 8-byte Reload
	movq	8056(%rsp), %rsi        # 8-byte Reload
	movq	8096(%rsp), %rdx        # 8-byte Reload
	movq	7736(%rsp), %rcx        # 8-byte Reload
	movq	8032(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7760(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	8096(%rsp), %rax        # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	7704(%rsp), %rdi        # 8-byte Reload
	movq	8088(%rsp), %rsi        # 8-byte Reload
	movq	7736(%rsp), %rcx        # 8-byte Reload
	movq	7808(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7760(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 7652(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	7856(%rsp), %rdi        # 8-byte Reload
	movq	7680(%rsp), %rsi        # 8-byte Reload
	movq	7720(%rsp), %rdx        # 8-byte Reload
	movq	7896(%rsp), %rcx        # 8-byte Reload
	movq	7792(%rsp), %r8         # 8-byte Reload
	movl	7716(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	10988(%rsp), %r9d       # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	7728(%rsp), %rdi        # 8-byte Reload
	movq	8088(%rsp), %rsi        # 8-byte Reload
	movq	7736(%rsp), %rcx        # 8-byte Reload
	movq	7800(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7760(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	7652(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	7736(%rsp), %rdi        # 8-byte Reload
	movq	8088(%rsp), %rsi        # 8-byte Reload
	movq	7736(%rsp), %rcx        # 8-byte Reload
	movq	7808(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7760(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	7652(%rsp), %ebp        # 4-byte Reload
	movl	10988(%rsp), %r12d      # 4-byte Reload
	imull	%r12d, %ebp
	movl	%ebp, %esi
	movl	%esi, %edx
	movq	7704(%rsp), %rdi        # 8-byte Reload
	movq	8088(%rsp), %rsi        # 8-byte Reload
	movq	7736(%rsp), %rcx        # 8-byte Reload
	movq	7896(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7760(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%ebp, 7648(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	7856(%rsp), %rdi        # 8-byte Reload
	movq	7680(%rsp), %rsi        # 8-byte Reload
	movq	7720(%rsp), %rdx        # 8-byte Reload
	movq	7824(%rsp), %rcx        # 8-byte Reload
	movq	8016(%rsp), %r8         # 8-byte Reload
	movl	7716(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	8880(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	7728(%rsp), %rdi        # 8-byte Reload
	movq	8088(%rsp), %rsi        # 8-byte Reload
	movq	7736(%rsp), %rcx        # 8-byte Reload
	movq	7816(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7760(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	7648(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	7736(%rsp), %rdi        # 8-byte Reload
	movq	8088(%rsp), %rsi        # 8-byte Reload
	movq	7736(%rsp), %rcx        # 8-byte Reload
	movq	7896(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7760(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	7648(%rsp), %ebp        # 4-byte Reload
	movl	8880(%rsp), %r12d       # 4-byte Reload
	addl	%r12d, %ebp
	movl	%ebp, %esi
	movl	%esi, %edx
	movq	7704(%rsp), %rdi        # 8-byte Reload
	movq	8088(%rsp), %rsi        # 8-byte Reload
	movq	7736(%rsp), %rcx        # 8-byte Reload
	movq	7824(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7760(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%ebp, 7644(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	7856(%rsp), %rdi        # 8-byte Reload
	movq	7680(%rsp), %rsi        # 8-byte Reload
	movq	7720(%rsp), %rdx        # 8-byte Reload
	movq	7832(%rsp), %rcx        # 8-byte Reload
	movq	7904(%rsp), %r8         # 8-byte Reload
	movl	7716(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	7644(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	7736(%rsp), %rdi        # 8-byte Reload
	movq	8088(%rsp), %rsi        # 8-byte Reload
	movq	7736(%rsp), %rcx        # 8-byte Reload
	movq	7824(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7760(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	7644(%rsp), %ebp        # 4-byte Reload
	movslq	%ebp, %rax
	movq	7704(%rsp), %rdi        # 8-byte Reload
	movq	8056(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	7736(%rsp), %rcx        # 8-byte Reload
	movq	7832(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7760(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 7632(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	7856(%rsp), %rdi        # 8-byte Reload
	movq	7680(%rsp), %rsi        # 8-byte Reload
	movq	7720(%rsp), %rdx        # 8-byte Reload
	movq	7968(%rsp), %rcx        # 8-byte Reload
	movq	7920(%rsp), %r8         # 8-byte Reload
	movl	7716(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	7728(%rsp), %rdi        # 8-byte Reload
	movq	8056(%rsp), %rsi        # 8-byte Reload
	movq	7632(%rsp), %rdx        # 8-byte Reload
	movq	7736(%rsp), %rcx        # 8-byte Reload
	movq	7832(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7760(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	7736(%rsp), %rdi        # 8-byte Reload
	movq	8056(%rsp), %rsi        # 8-byte Reload
	movq	11104(%rsp), %rdx       # 8-byte Reload
	movq	7736(%rsp), %rcx        # 8-byte Reload
	movq	7936(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7760(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	7632(%rsp), %rax        # 8-byte Reload
	shlq	$3, %rax
	movq	11104(%rsp), %rcx       # 8-byte Reload
	addq	%rax, %rcx
	movq	7704(%rsp), %rdi        # 8-byte Reload
	movq	8056(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	7736(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 7624(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	7968(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7760(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	7856(%rsp), %rdi        # 8-byte Reload
	movq	7680(%rsp), %rsi        # 8-byte Reload
	movq	7720(%rsp), %rdx        # 8-byte Reload
	movq	7872(%rsp), %rcx        # 8-byte Reload
	movq	7944(%rsp), %r8         # 8-byte Reload
	movl	7716(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	7736(%rsp), %rdi        # 8-byte Reload
	movq	8056(%rsp), %rsi        # 8-byte Reload
	movq	7624(%rsp), %rdx        # 8-byte Reload
	movq	7736(%rsp), %rcx        # 8-byte Reload
	movq	7968(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7760(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	11104(%rsp), %rax       # 8-byte Reload
	movq	7632(%rsp), %rcx        # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
	movq	7704(%rsp), %rdi        # 8-byte Reload
	movq	8056(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 7616(%rsp)       # 8-byte Spill
	movq	7736(%rsp), %rdx        # 8-byte Reload
	movq	7872(%rsp), %rcx        # 8-byte Reload
	movq	7752(%rsp), %r8         # 8-byte Reload
	movq	7760(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	7856(%rsp), %rdi        # 8-byte Reload
	movq	7680(%rsp), %rsi        # 8-byte Reload
	movq	7720(%rsp), %rdx        # 8-byte Reload
	movq	7864(%rsp), %rcx        # 8-byte Reload
	movq	7920(%rsp), %r8         # 8-byte Reload
	movl	7716(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	7728(%rsp), %rdi        # 8-byte Reload
	movq	8056(%rsp), %rsi        # 8-byte Reload
	movq	8096(%rsp), %rdx        # 8-byte Reload
	movq	7736(%rsp), %rcx        # 8-byte Reload
	movq	8032(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7760(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	7736(%rsp), %rdi        # 8-byte Reload
	movq	8056(%rsp), %rsi        # 8-byte Reload
	movq	10968(%rsp), %rdx       # 8-byte Reload
	movq	7736(%rsp), %rcx        # 8-byte Reload
	movq	7840(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7760(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	8096(%rsp), %rax        # 8-byte Reload
	shlq	$3, %rax
	movq	10968(%rsp), %rcx       # 8-byte Reload
	addq	%rax, %rcx
	movq	7704(%rsp), %rdi        # 8-byte Reload
	movq	8056(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	7736(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 7608(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	7864(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7760(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	7856(%rsp), %rdi        # 8-byte Reload
	movq	7680(%rsp), %rsi        # 8-byte Reload
	movq	7720(%rsp), %rdx        # 8-byte Reload
	movq	7848(%rsp), %rcx        # 8-byte Reload
	movq	7984(%rsp), %r8         # 8-byte Reload
	movl	7716(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	7728(%rsp), %rdi        # 8-byte Reload
	movq	8056(%rsp), %rsi        # 8-byte Reload
	movq	7608(%rsp), %rdx        # 8-byte Reload
	movq	7736(%rsp), %rcx        # 8-byte Reload
	movq	7864(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7760(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	7736(%rsp), %rdi        # 8-byte Reload
	movq	8056(%rsp), %rsi        # 8-byte Reload
	vmovsd	7616(%rsp), %xmm0       # 8-byte Reload
	movq	7736(%rsp), %rdx        # 8-byte Reload
	movq	7872(%rsp), %rcx        # 8-byte Reload
	movq	7752(%rsp), %r8         # 8-byte Reload
	movq	7760(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	10968(%rsp), %rax       # 8-byte Reload
	movq	8096(%rsp), %rcx        # 8-byte Reload
	vmovsd	7616(%rsp), %xmm0       # 8-byte Reload
	vmovsd	%xmm0, (%rax,%rcx,8)
	.loc	2 804 0                 # eispack.c:804:0
	movq	7960(%rsp), %rdi        # 8-byte Reload
	movq	7680(%rsp), %rsi        # 8-byte Reload
	movq	7720(%rsp), %rdx        # 8-byte Reload
	movq	7888(%rsp), %rcx        # 8-byte Reload
	movq	8040(%rsp), %r8         # 8-byte Reload
	movl	7716(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	7736(%rsp), %rdi        # 8-byte Reload
	movq	8056(%rsp), %rsi        # 8-byte Reload
	movq	8888(%rsp), %rdx        # 8-byte Reload
	movq	7736(%rsp), %rcx        # 8-byte Reload
	movq	7880(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7760(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	8888(%rsp), %rax        # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	7704(%rsp), %rdi        # 8-byte Reload
	movq	8088(%rsp), %rsi        # 8-byte Reload
	movq	7736(%rsp), %rcx        # 8-byte Reload
	movq	7888(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7760(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 7604(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	7960(%rsp), %rdi        # 8-byte Reload
	movq	7680(%rsp), %rsi        # 8-byte Reload
	movq	7720(%rsp), %rdx        # 8-byte Reload
	movq	7912(%rsp), %rcx        # 8-byte Reload
	movq	8016(%rsp), %r8         # 8-byte Reload
	movl	7716(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	7604(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	7728(%rsp), %rdi        # 8-byte Reload
	movq	8088(%rsp), %rsi        # 8-byte Reload
	movq	7736(%rsp), %rcx        # 8-byte Reload
	movq	7888(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7760(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	7648(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	7736(%rsp), %rdi        # 8-byte Reload
	movq	8088(%rsp), %rsi        # 8-byte Reload
	movq	7736(%rsp), %rcx        # 8-byte Reload
	movq	7896(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7760(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	7648(%rsp), %ebp        # 4-byte Reload
	movl	7604(%rsp), %r12d       # 4-byte Reload
	addl	%r12d, %ebp
	movl	%ebp, %esi
	movl	%esi, %edx
	movq	7704(%rsp), %rdi        # 8-byte Reload
	movq	8088(%rsp), %rsi        # 8-byte Reload
	movq	7736(%rsp), %rcx        # 8-byte Reload
	movq	7912(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7760(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%ebp, 7600(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	7960(%rsp), %rdi        # 8-byte Reload
	movq	7680(%rsp), %rsi        # 8-byte Reload
	movq	7720(%rsp), %rdx        # 8-byte Reload
	movq	7928(%rsp), %rcx        # 8-byte Reload
	movq	7904(%rsp), %r8         # 8-byte Reload
	movl	7716(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	7600(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	7736(%rsp), %rdi        # 8-byte Reload
	movq	8088(%rsp), %rsi        # 8-byte Reload
	movq	7736(%rsp), %rcx        # 8-byte Reload
	movq	7912(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7760(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	7600(%rsp), %ebp        # 4-byte Reload
	movslq	%ebp, %rax
	movq	7704(%rsp), %rdi        # 8-byte Reload
	movq	8056(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	7736(%rsp), %rcx        # 8-byte Reload
	movq	7928(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7760(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 7592(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	7960(%rsp), %rdi        # 8-byte Reload
	movq	7680(%rsp), %rsi        # 8-byte Reload
	movq	7720(%rsp), %rdx        # 8-byte Reload
	movq	8008(%rsp), %rcx        # 8-byte Reload
	movq	7920(%rsp), %r8         # 8-byte Reload
	movl	7716(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	7728(%rsp), %rdi        # 8-byte Reload
	movq	8056(%rsp), %rsi        # 8-byte Reload
	movq	7592(%rsp), %rdx        # 8-byte Reload
	movq	7736(%rsp), %rcx        # 8-byte Reload
	movq	7928(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7760(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	7736(%rsp), %rdi        # 8-byte Reload
	movq	8056(%rsp), %rsi        # 8-byte Reload
	movq	11104(%rsp), %rdx       # 8-byte Reload
	movq	7736(%rsp), %rcx        # 8-byte Reload
	movq	7936(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7760(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	7592(%rsp), %rax        # 8-byte Reload
	shlq	$3, %rax
	movq	11104(%rsp), %rcx       # 8-byte Reload
	addq	%rax, %rcx
	movq	7704(%rsp), %rdi        # 8-byte Reload
	movq	8056(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	7736(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 7584(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	8008(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7760(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	7960(%rsp), %rdi        # 8-byte Reload
	movq	7680(%rsp), %rsi        # 8-byte Reload
	movq	7720(%rsp), %rdx        # 8-byte Reload
	movq	7976(%rsp), %rcx        # 8-byte Reload
	movq	7944(%rsp), %r8         # 8-byte Reload
	movl	7716(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	7736(%rsp), %rdi        # 8-byte Reload
	movq	8056(%rsp), %rsi        # 8-byte Reload
	movq	7584(%rsp), %rdx        # 8-byte Reload
	movq	7736(%rsp), %rcx        # 8-byte Reload
	movq	8008(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7760(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	11104(%rsp), %rax       # 8-byte Reload
	movq	7592(%rsp), %rcx        # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
	movq	7704(%rsp), %rdi        # 8-byte Reload
	movq	8056(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 7576(%rsp)       # 8-byte Spill
	movq	7736(%rsp), %rdx        # 8-byte Reload
	movq	7976(%rsp), %rcx        # 8-byte Reload
	movq	7752(%rsp), %r8         # 8-byte Reload
	movq	7760(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	7960(%rsp), %rdi        # 8-byte Reload
	movq	7680(%rsp), %rsi        # 8-byte Reload
	movq	7720(%rsp), %rdx        # 8-byte Reload
	movq	7952(%rsp), %rcx        # 8-byte Reload
	movq	7984(%rsp), %r8         # 8-byte Reload
	movl	7716(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	7728(%rsp), %rdi        # 8-byte Reload
	movq	8056(%rsp), %rsi        # 8-byte Reload
	movq	7624(%rsp), %rdx        # 8-byte Reload
	movq	7736(%rsp), %rcx        # 8-byte Reload
	movq	7968(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7760(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	7736(%rsp), %rdi        # 8-byte Reload
	movq	8056(%rsp), %rsi        # 8-byte Reload
	vmovsd	7576(%rsp), %xmm0       # 8-byte Reload
	movq	7736(%rsp), %rdx        # 8-byte Reload
	movq	7976(%rsp), %rcx        # 8-byte Reload
	movq	7752(%rsp), %r8         # 8-byte Reload
	movq	7760(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	11104(%rsp), %rax       # 8-byte Reload
	movq	7632(%rsp), %rcx        # 8-byte Reload
	vmovsd	7576(%rsp), %xmm0       # 8-byte Reload
	vmovsd	%xmm0, (%rax,%rcx,8)
	.loc	2 805 0                 # eispack.c:805:0
	movq	8000(%rsp), %rdi        # 8-byte Reload
	movq	7680(%rsp), %rsi        # 8-byte Reload
	movq	7720(%rsp), %rdx        # 8-byte Reload
	movq	7992(%rsp), %rcx        # 8-byte Reload
	movq	7984(%rsp), %r8         # 8-byte Reload
	movl	7716(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	7728(%rsp), %rdi        # 8-byte Reload
	movq	8056(%rsp), %rsi        # 8-byte Reload
	movq	7584(%rsp), %rdx        # 8-byte Reload
	movq	7736(%rsp), %rcx        # 8-byte Reload
	movq	8008(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7760(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	7736(%rsp), %rdi        # 8-byte Reload
	movq	8056(%rsp), %rsi        # 8-byte Reload
	vmovsd	7696(%rsp), %xmm0       # 8-byte Reload
	movq	7752(%rsp), %rdx        # 8-byte Reload
	movq	8024(%rsp), %rcx        # 8-byte Reload
	movq	7752(%rsp), %r8         # 8-byte Reload
	movq	7760(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	11104(%rsp), %rax       # 8-byte Reload
	movq	7592(%rsp), %rcx        # 8-byte Reload
	vmovsd	7696(%rsp), %xmm0       # 8-byte Reload
	vmovsd	%xmm0, (%rax,%rcx,8)
.Ltmp324:
	.loc	2 801 0                 # eispack.c:801:0
	movq	7656(%rsp), %rdi        # 8-byte Reload
	movq	7680(%rsp), %rsi        # 8-byte Reload
	movq	7720(%rsp), %rdx        # 8-byte Reload
	movq	8048(%rsp), %rcx        # 8-byte Reload
	movq	8016(%rsp), %r8         # 8-byte Reload
	movl	7716(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	7728(%rsp), %rdi        # 8-byte Reload
	movq	8056(%rsp), %rsi        # 8-byte Reload
	movq	7736(%rsp), %rdx        # 8-byte Reload
	movq	7752(%rsp), %rcx        # 8-byte Reload
	movq	8024(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7760(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	7736(%rsp), %rdi        # 8-byte Reload
	movq	8056(%rsp), %rsi        # 8-byte Reload
	movq	8096(%rsp), %rdx        # 8-byte Reload
	movq	7736(%rsp), %rcx        # 8-byte Reload
	movq	8032(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7760(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	8096(%rsp), %rax        # 8-byte Reload
	addq	$1, %rax
	movq	7704(%rsp), %rdi        # 8-byte Reload
	movq	8056(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	7736(%rsp), %rcx        # 8-byte Reload
	movq	8048(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7760(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 7568(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	7656(%rsp), %rdi        # 8-byte Reload
	movq	7680(%rsp), %rsi        # 8-byte Reload
	movq	7720(%rsp), %rdx        # 8-byte Reload
	movq	8080(%rsp), %rcx        # 8-byte Reload
	movq	8040(%rsp), %r8         # 8-byte Reload
	movl	7716(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	7736(%rsp), %rdi        # 8-byte Reload
	movq	8056(%rsp), %rsi        # 8-byte Reload
	movq	7568(%rsp), %rdx        # 8-byte Reload
	movq	7736(%rsp), %rcx        # 8-byte Reload
	movq	8048(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7760(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	7568(%rsp), %rax        # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	7704(%rsp), %rdi        # 8-byte Reload
	movq	8088(%rsp), %rsi        # 8-byte Reload
	movq	7736(%rsp), %rcx        # 8-byte Reload
	movq	8080(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7760(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 7564(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	7656(%rsp), %rdi        # 8-byte Reload
	movq	7680(%rsp), %rsi        # 8-byte Reload
	movq	7720(%rsp), %rdx        # 8-byte Reload
	movq	7744(%rsp), %rcx        # 8-byte Reload
	movq	8064(%rsp), %r8         # 8-byte Reload
	movl	7716(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	8900(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	7728(%rsp), %rdi        # 8-byte Reload
	movq	8088(%rsp), %rsi        # 8-byte Reload
	movq	7736(%rsp), %rcx        # 8-byte Reload
	movq	8072(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7760(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	7564(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	7736(%rsp), %rdi        # 8-byte Reload
	movq	8088(%rsp), %rsi        # 8-byte Reload
	movq	7736(%rsp), %rcx        # 8-byte Reload
	movq	8080(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7760(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	7564(%rsp), %ebp        # 4-byte Reload
	movl	8900(%rsp), %r12d       # 4-byte Reload
	cmpl	%r12d, %ebp
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	7704(%rsp), %rdi        # 8-byte Reload
	movq	7736(%rsp), %rsi        # 8-byte Reload
	movq	7736(%rsp), %rcx        # 8-byte Reload
	movq	7744(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7760(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 7563(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	7656(%rsp), %rdi        # 8-byte Reload
	movq	7680(%rsp), %rsi        # 8-byte Reload
	movq	7720(%rsp), %rdx        # 8-byte Reload
	movq	7688(%rsp), %rcx        # 8-byte Reload
	movq	7728(%rsp), %r8         # 8-byte Reload
	movl	7716(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	7672(%rsp), %rdi        # 8-byte Reload
	movq	7752(%rsp), %rsi        # 8-byte Reload
	movq	7752(%rsp), %rdx        # 8-byte Reload
	movq	7736(%rsp), %rcx        # 8-byte Reload
	movq	7664(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7760(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	7728(%rsp), %rdi        # 8-byte Reload
	movq	7752(%rsp), %rsi        # 8-byte Reload
	movq	7752(%rsp), %rdx        # 8-byte Reload
	movq	7736(%rsp), %rcx        # 8-byte Reload
	movq	7720(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7760(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	7563(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	7736(%rsp), %rdi        # 8-byte Reload
	movq	7736(%rsp), %rsi        # 8-byte Reload
	movq	7736(%rsp), %rcx        # 8-byte Reload
	movq	7744(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7760(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	7563(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	movq	7568(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 8200(%rsp)        # 8-byte Spill
	jne	.LBB9_14
	jmp	.LBB9_13
.Ltmp325:
.LBB9_14:                               # %._crit_edge46
                                        #   in Loop: Header=BB9_8 Depth=1
	movabsq	$1, %rax
	movabsq	$0, %rcx
	leaq	.L.str108, %r8
	leaq	.L.str792, %rdx
	movabsq	$810, %rdi              # imm = 0x32A
	leaq	.L.str59144, %rsi
	leaq	.L.str116, %r9
	leaq	.L.str165, %r10
	movabsq	$2, %r11
	movl	$0, %ebx
	movl	$1, %ebp
	vxorps	%xmm0, %xmm0, %xmm0
	movabsq	$64, %r14
	leaq	.L.str1499, %r15
	leaq	.L.str162, %r12
	movabsq	$809, %r13              # imm = 0x329
	movq	%rax, 7552(%rsp)        # 8-byte Spill
	leaq	.L.str164, %rax
	movq	%rax, 7544(%rsp)        # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, 7536(%rsp)        # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 7528(%rsp)        # 8-byte Spill
	leaq	.L.str163, %rax
	movq	%rax, 7520(%rsp)        # 8-byte Spill
	leaq	.L.str107, %rax
	movq	%rax, 7512(%rsp)        # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 7504(%rsp)        # 8-byte Spill
	leaq	.L.str159, %rax
	movq	%rax, 7496(%rsp)        # 8-byte Spill
	movabsq	$808, %rax              # imm = 0x328
	movq	%rax, 7488(%rsp)        # 8-byte Spill
	leaq	.L.str161, %rax
	movq	%rax, 7480(%rsp)        # 8-byte Spill
	leaq	.L.str160, %rax
	.loc	2 808 0                 # eispack.c:808:0
	movq	%rax, 7472(%rsp)        # 8-byte Spill
	movq	7488(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 7464(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 7456(%rsp)        # 8-byte Spill
	movq	%rdx, 7448(%rsp)        # 8-byte Spill
	movq	%r9, %rdx
	movq	7496(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 7440(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	7504(%rsp), %rax        # 8-byte Reload
	movq	%r8, 7432(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 7424(%rsp)         # 8-byte Spill
	movl	%ebx, %r9d
	movl	$1, (%rsp)
	movq	%r14, 7416(%rsp)        # 8-byte Spill
	vmovsd	%xmm0, 7408(%rsp)       # 8-byte Spill
	movq	%r15, 7400(%rsp)        # 8-byte Spill
	movq	%r13, 7392(%rsp)        # 8-byte Spill
	movq	%r12, 7384(%rsp)        # 8-byte Spill
	movl	%ebp, 7380(%rsp)        # 4-byte Spill
	movq	%r10, 7368(%rsp)        # 8-byte Spill
	movq	%r11, 7360(%rsp)        # 8-byte Spill
	movl	%ebx, 7356(%rsp)        # 4-byte Spill
	callq	trace_logger_log0
	movq	7360(%rsp), %rdi        # 8-byte Reload
	movq	7416(%rsp), %rsi        # 8-byte Reload
	movq	8888(%rsp), %rdx        # 8-byte Reload
	movq	7552(%rsp), %rcx        # 8-byte Reload
	movq	7512(%rsp), %r8         # 8-byte Reload
	movq	7440(%rsp), %r9         # 8-byte Reload
	movq	7448(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	7552(%rsp), %rdi        # 8-byte Reload
	movq	7416(%rsp), %rsi        # 8-byte Reload
	movq	10960(%rsp), %rdx       # 8-byte Reload
	movq	7552(%rsp), %rcx        # 8-byte Reload
	movq	7472(%rsp), %r8         # 8-byte Reload
	movq	7440(%rsp), %r9         # 8-byte Reload
	movq	7448(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	8888(%rsp), %rax        # 8-byte Reload
	shlq	$3, %rax
	movq	10960(%rsp), %rcx       # 8-byte Reload
	addq	%rax, %rcx
	movq	7528(%rsp), %rdi        # 8-byte Reload
	movq	7416(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	7552(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 7344(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	7496(%rsp), %r8         # 8-byte Reload
	movq	7440(%rsp), %r9         # 8-byte Reload
	movq	7448(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	7488(%rsp), %rdi        # 8-byte Reload
	movq	7456(%rsp), %rsi        # 8-byte Reload
	movq	7424(%rsp), %rdx        # 8-byte Reload
	movq	7480(%rsp), %rcx        # 8-byte Reload
	movq	7536(%rsp), %r8         # 8-byte Reload
	movl	7356(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	7360(%rsp), %rdi        # 8-byte Reload
	movq	7416(%rsp), %rsi        # 8-byte Reload
	movq	7344(%rsp), %rdx        # 8-byte Reload
	movq	7552(%rsp), %rcx        # 8-byte Reload
	movq	7496(%rsp), %r8         # 8-byte Reload
	movq	7440(%rsp), %r9         # 8-byte Reload
	movq	7448(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	7552(%rsp), %rdi        # 8-byte Reload
	movq	7416(%rsp), %rsi        # 8-byte Reload
	vmovsd	7408(%rsp), %xmm0       # 8-byte Reload
	movq	7440(%rsp), %rdx        # 8-byte Reload
	movq	7400(%rsp), %rcx        # 8-byte Reload
	movq	7440(%rsp), %r8         # 8-byte Reload
	movq	7448(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	10960(%rsp), %rax       # 8-byte Reload
	movq	8888(%rsp), %rcx        # 8-byte Reload
	vmovsd	7408(%rsp), %xmm0       # 8-byte Reload
	vmovsd	%xmm0, (%rax,%rcx,8)
	.loc	2 809 0                 # eispack.c:809:0
	movq	7392(%rsp), %rdi        # 8-byte Reload
	movq	7456(%rsp), %rsi        # 8-byte Reload
	movq	7424(%rsp), %rdx        # 8-byte Reload
	movq	7384(%rsp), %rcx        # 8-byte Reload
	movq	7504(%rsp), %r8         # 8-byte Reload
	movl	7356(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	7360(%rsp), %rdi        # 8-byte Reload
	movq	7416(%rsp), %rsi        # 8-byte Reload
	movq	8888(%rsp), %rdx        # 8-byte Reload
	movq	7552(%rsp), %rcx        # 8-byte Reload
	movq	7512(%rsp), %r8         # 8-byte Reload
	movq	7440(%rsp), %r9         # 8-byte Reload
	movq	7448(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	7552(%rsp), %rdi        # 8-byte Reload
	movq	7416(%rsp), %rsi        # 8-byte Reload
	movq	10952(%rsp), %rdx       # 8-byte Reload
	movq	7552(%rsp), %rcx        # 8-byte Reload
	movq	7520(%rsp), %r8         # 8-byte Reload
	movq	7440(%rsp), %r9         # 8-byte Reload
	movq	7448(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	8888(%rsp), %rax        # 8-byte Reload
	shlq	$3, %rax
	movq	10952(%rsp), %rcx       # 8-byte Reload
	addq	%rax, %rcx
	movq	7528(%rsp), %rdi        # 8-byte Reload
	movq	7416(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	7552(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 7336(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	7384(%rsp), %r8         # 8-byte Reload
	movq	7440(%rsp), %r9         # 8-byte Reload
	movq	7448(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	7392(%rsp), %rdi        # 8-byte Reload
	movq	7456(%rsp), %rsi        # 8-byte Reload
	movq	7424(%rsp), %rdx        # 8-byte Reload
	movq	7544(%rsp), %rcx        # 8-byte Reload
	movq	7536(%rsp), %r8         # 8-byte Reload
	movl	7356(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	7360(%rsp), %rdi        # 8-byte Reload
	movq	7416(%rsp), %rsi        # 8-byte Reload
	movq	7336(%rsp), %rdx        # 8-byte Reload
	movq	7552(%rsp), %rcx        # 8-byte Reload
	movq	7384(%rsp), %r8         # 8-byte Reload
	movq	7440(%rsp), %r9         # 8-byte Reload
	movq	7448(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	7552(%rsp), %rdi        # 8-byte Reload
	movq	7416(%rsp), %rsi        # 8-byte Reload
	vmovsd	7408(%rsp), %xmm0       # 8-byte Reload
	movq	7440(%rsp), %rdx        # 8-byte Reload
	movq	7400(%rsp), %rcx        # 8-byte Reload
	movq	7440(%rsp), %r8         # 8-byte Reload
	movq	7448(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	10952(%rsp), %rax       # 8-byte Reload
	movq	8888(%rsp), %rcx        # 8-byte Reload
	vmovsd	7408(%rsp), %xmm0       # 8-byte Reload
	vmovsd	%xmm0, (%rax,%rcx,8)
	.loc	2 810 0                 # eispack.c:810:0
	movq	7464(%rsp), %rdi        # 8-byte Reload
	movq	7456(%rsp), %rsi        # 8-byte Reload
	movq	7424(%rsp), %rdx        # 8-byte Reload
	movq	7368(%rsp), %rcx        # 8-byte Reload
	movq	7360(%rsp), %r8         # 8-byte Reload
	movl	7356(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	7552(%rsp), %rdi        # 8-byte Reload
	movq	7440(%rsp), %rsi        # 8-byte Reload
	movq	7440(%rsp), %rdx        # 8-byte Reload
	movq	7552(%rsp), %rcx        # 8-byte Reload
	movq	7432(%rsp), %r8         # 8-byte Reload
	movq	7440(%rsp), %r9         # 8-byte Reload
	movq	7448(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
.Ltmp326:
.LBB9_15:                               # %.backedge
                                        #   in Loop: Header=BB9_8 Depth=1
	movabsq	$1, %rax
	leaq	.L.str167, %rcx
	movabsq	$0, %rdx
	leaq	.L.str792, %rsi
	movabsq	$2, %rdi
	leaq	.L.str75160, %r8
	movabsq	$3, %r9
	leaq	.L.str94, %r10
	movabsq	$786, %r11              # imm = 0x312
	leaq	.L.str59144, %rbx
	leaq	.L.str108, %r14
	leaq	.L.str168, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 7328(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 7320(%rsp)        # 8-byte Spill
	leaq	.L.str166, %rax
	movq	%rax, 7312(%rsp)        # 8-byte Spill
	leaq	.L.str1499, %rax
	movq	%rax, 7304(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 7296(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 7288(%rsp)        # 8-byte Spill
	leaq	.L.str107, %rax
	movq	%rax, 7280(%rsp)        # 8-byte Spill
	movabsq	$33, %rax
	.loc	2 786 0                 # eispack.c:786:0
	movq	%rdi, 7272(%rsp)        # 8-byte Spill
	movq	%r11, %rdi
	movq	%rsi, 7264(%rsp)        # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, 7256(%rsp)        # 8-byte Spill
	movq	%r14, %rdx
	movq	%rax, 7248(%rsp)        # 8-byte Spill
	movq	7312(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 7240(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	7248(%rsp), %rax        # 8-byte Reload
	movq	%r8, 7232(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 7224(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r15, 7216(%rsp)        # 8-byte Spill
	movl	%ebp, 7212(%rsp)        # 4-byte Spill
	movl	%r12d, 7208(%rsp)       # 4-byte Spill
	movq	%r13, 7200(%rsp)        # 8-byte Spill
	movq	%r14, 7192(%rsp)        # 8-byte Spill
	movq	%rbx, 7184(%rsp)        # 8-byte Spill
	movq	%r10, 7176(%rsp)        # 8-byte Spill
	movq	%r11, 7168(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	7328(%rsp), %rdi        # 8-byte Reload
	movq	7288(%rsp), %rsi        # 8-byte Reload
	movq	8888(%rsp), %rdx        # 8-byte Reload
	movq	7328(%rsp), %rcx        # 8-byte Reload
	movq	7280(%rsp), %r8         # 8-byte Reload
	movq	7256(%rsp), %r9         # 8-byte Reload
	movq	7264(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	8888(%rsp), %rax        # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	7200(%rsp), %rdi        # 8-byte Reload
	movq	7320(%rsp), %rsi        # 8-byte Reload
	movq	7328(%rsp), %rcx        # 8-byte Reload
	movq	7312(%rsp), %r8         # 8-byte Reload
	movq	7256(%rsp), %r9         # 8-byte Reload
	movq	7264(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 7164(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	7168(%rsp), %rdi        # 8-byte Reload
	movq	7184(%rsp), %rsi        # 8-byte Reload
	movq	7192(%rsp), %rdx        # 8-byte Reload
	movq	7240(%rsp), %rcx        # 8-byte Reload
	movq	7296(%rsp), %r8         # 8-byte Reload
	movl	7212(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	7272(%rsp), %rdi        # 8-byte Reload
	movq	7320(%rsp), %rsi        # 8-byte Reload
	movq	7256(%rsp), %rdx        # 8-byte Reload
	movq	7256(%rsp), %rcx        # 8-byte Reload
	movq	7304(%rsp), %r8         # 8-byte Reload
	movq	7256(%rsp), %r9         # 8-byte Reload
	movq	7264(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	7164(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	7328(%rsp), %rdi        # 8-byte Reload
	movq	7320(%rsp), %rsi        # 8-byte Reload
	movq	7328(%rsp), %rcx        # 8-byte Reload
	movq	7312(%rsp), %r8         # 8-byte Reload
	movq	7256(%rsp), %r9         # 8-byte Reload
	movq	7264(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	7164(%rsp), %ebp        # 4-byte Reload
	cmpl	$0, %ebp
	setg	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %r12d
	movl	%r12d, %edx
	movq	7200(%rsp), %rdi        # 8-byte Reload
	movq	7328(%rsp), %rsi        # 8-byte Reload
	movq	7328(%rsp), %rcx        # 8-byte Reload
	movq	7240(%rsp), %r8         # 8-byte Reload
	movq	7256(%rsp), %r9         # 8-byte Reload
	movq	7264(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 7163(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	7168(%rsp), %rdi        # 8-byte Reload
	movq	7184(%rsp), %rsi        # 8-byte Reload
	movq	7192(%rsp), %rdx        # 8-byte Reload
	movq	7216(%rsp), %rcx        # 8-byte Reload
	movq	7272(%rsp), %r8         # 8-byte Reload
	movl	7212(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	7224(%rsp), %rdi        # 8-byte Reload
	movq	7256(%rsp), %rsi        # 8-byte Reload
	movq	7256(%rsp), %rdx        # 8-byte Reload
	movq	7328(%rsp), %rcx        # 8-byte Reload
	movq	7176(%rsp), %r8         # 8-byte Reload
	movq	7256(%rsp), %r9         # 8-byte Reload
	movq	7264(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	7272(%rsp), %rdi        # 8-byte Reload
	movq	7256(%rsp), %rsi        # 8-byte Reload
	movq	7256(%rsp), %rdx        # 8-byte Reload
	movq	7328(%rsp), %rcx        # 8-byte Reload
	movq	7232(%rsp), %r8         # 8-byte Reload
	movq	7256(%rsp), %r9         # 8-byte Reload
	movq	7264(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	7163(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	7328(%rsp), %rdi        # 8-byte Reload
	movq	7328(%rsp), %rsi        # 8-byte Reload
	movq	7328(%rsp), %rcx        # 8-byte Reload
	movq	7240(%rsp), %r8         # 8-byte Reload
	movq	7256(%rsp), %r9         # 8-byte Reload
	movq	7264(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	7163(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	movq	8888(%rsp), %rcx        # 8-byte Reload
	movl	8900(%rsp), %ebp        # 4-byte Reload
	movl	8884(%rsp), %r12d       # 4-byte Reload
	movq	%rcx, 9672(%rsp)        # 8-byte Spill
	movl	%ebp, 9668(%rsp)        # 4-byte Spill
	movl	%r12d, 9664(%rsp)       # 4-byte Spill
	jne	.LBB9_8
	jmp	.LBB9_36
.LBB9_16:                               # %.lr.ph4
                                        #   Parent Loop BB9_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	8112(%rsp), %rax        # 8-byte Reload
	movabsq	$1, %rcx
	leaq	.L.str176, %rdx
	movabsq	$0, %rsi
	leaq	.L.str792, %rdi
	movabsq	$2, %r8
	leaq	.L.str138, %r9
	movabsq	$3, %r10
	leaq	.L.str178, %r11
	movabsq	$813, %rbx              # imm = 0x32D
	leaq	.L.str59144, %r14
	leaq	.L.str177, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 7152(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 7144(%rsp)        # 8-byte Spill
	leaq	.L.str175, %rax
	movq	%rax, 7136(%rsp)        # 8-byte Spill
	leaq	.L.str110, %rax
	movq	%rax, 7128(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 7120(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 7112(%rsp)        # 8-byte Spill
	leaq	.L.str170, %rax
	movq	%rax, 7104(%rsp)        # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, 7096(%rsp)        # 8-byte Spill
	leaq	.L.str169, %rax
	movq	%rax, 7088(%rsp)        # 8-byte Spill
	leaq	.L.str1499, %rax
	movq	%rax, 7080(%rsp)        # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, 7072(%rsp)        # 8-byte Spill
	leaq	.L.str173, %rax
	movq	%rax, 7064(%rsp)        # 8-byte Spill
	leaq	.L.str171, %rax
	movq	%rax, 7056(%rsp)        # 8-byte Spill
	movabsq	$815, %rax              # imm = 0x32F
	movq	%rax, 7048(%rsp)        # 8-byte Spill
	leaq	.L.str174, %rax
	movq	%rax, 7040(%rsp)        # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, 7032(%rsp)        # 8-byte Spill
	leaq	.L.str172, %rax
	movq	%rax, 7024(%rsp)        # 8-byte Spill
	leaq	.L.str121, %rax
	movq	%rax, 7016(%rsp)        # 8-byte Spill
	movabsq	$16, %rax
	movq	%rax, 7008(%rsp)        # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, 7000(%rsp)        # 8-byte Spill
	leaq	.L.str85170, %rax
	movq	%rax, 6992(%rsp)        # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 6984(%rsp)        # 8-byte Spill
	leaq	.L.str133, %rax
	movq	%rax, 6976(%rsp)        # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 6968(%rsp)        # 8-byte Spill
	movabsq	$48, %rax
	.loc	2 815 0                 # eispack.c:815:0
.Ltmp327:
	movq	%rax, 6960(%rsp)        # 8-byte Spill
	movq	6968(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 6952(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 6944(%rsp)        # 8-byte Spill
	movq	%r14, %rsi
	movq	%rdx, 6936(%rsp)        # 8-byte Spill
	movq	%r9, %rdx
	movq	7088(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 6928(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	6960(%rsp), %rax        # 8-byte Reload
	movq	%r8, 6920(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 6912(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r15, 6904(%rsp)        # 8-byte Spill
	movl	%ebp, 6900(%rsp)        # 4-byte Spill
	movl	%r12d, 6896(%rsp)       # 4-byte Spill
	movq	%r13, 6888(%rsp)        # 8-byte Spill
	movq	%r14, 6880(%rsp)        # 8-byte Spill
	movq	%rbx, 6872(%rsp)        # 8-byte Spill
	movq	%r10, 6864(%rsp)        # 8-byte Spill
	movq	%r11, 6856(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	6920(%rsp), %rdi        # 8-byte Reload
	movq	7112(%rsp), %rsi        # 8-byte Reload
	movq	6944(%rsp), %rdx        # 8-byte Reload
	movq	6944(%rsp), %rcx        # 8-byte Reload
	movq	7080(%rsp), %r8         # 8-byte Reload
	movq	6928(%rsp), %r9         # 8-byte Reload
	movq	6976(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	6928(%rsp), %rdi        # 8-byte Reload
	movq	7112(%rsp), %rsi        # 8-byte Reload
	movq	6944(%rsp), %rdx        # 8-byte Reload
	movq	6928(%rsp), %rcx        # 8-byte Reload
	movq	7104(%rsp), %r8         # 8-byte Reload
	movq	6928(%rsp), %r9         # 8-byte Reload
	movq	6912(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	6888(%rsp), %rdi        # 8-byte Reload
	movq	7112(%rsp), %rsi        # 8-byte Reload
	movq	7152(%rsp), %rdx        # 8-byte Reload
	movq	6928(%rsp), %rcx        # 8-byte Reload
	movq	7088(%rsp), %r8         # 8-byte Reload
	movq	6944(%rsp), %r9         # 8-byte Reload
	movq	6912(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	7048(%rsp), %rdi        # 8-byte Reload
	movq	6880(%rsp), %rsi        # 8-byte Reload
	movq	6912(%rsp), %rdx        # 8-byte Reload
	movq	7056(%rsp), %rcx        # 8-byte Reload
	movq	6984(%rsp), %r8         # 8-byte Reload
	movl	6900(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	6920(%rsp), %rdi        # 8-byte Reload
	movq	7112(%rsp), %rsi        # 8-byte Reload
	movq	7152(%rsp), %rdx        # 8-byte Reload
	movq	6928(%rsp), %rcx        # 8-byte Reload
	movq	7088(%rsp), %r8         # 8-byte Reload
	movq	6944(%rsp), %r9         # 8-byte Reload
	movq	6952(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	6928(%rsp), %rdi        # 8-byte Reload
	movq	7112(%rsp), %rsi        # 8-byte Reload
	movq	10968(%rsp), %rdx       # 8-byte Reload
	movq	6928(%rsp), %rcx        # 8-byte Reload
	movq	6992(%rsp), %r8         # 8-byte Reload
	movq	6944(%rsp), %r9         # 8-byte Reload
	movq	6952(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	7152(%rsp), %rax        # 8-byte Reload
	shlq	$3, %rax
	movq	10968(%rsp), %rcx       # 8-byte Reload
	addq	%rax, %rcx
	movq	6888(%rsp), %rdi        # 8-byte Reload
	movq	7112(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	6928(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 6848(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	7056(%rsp), %r8         # 8-byte Reload
	movq	6944(%rsp), %r9         # 8-byte Reload
	movq	6952(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	7048(%rsp), %rdi        # 8-byte Reload
	movq	6880(%rsp), %rsi        # 8-byte Reload
	movq	6912(%rsp), %rdx        # 8-byte Reload
	movq	7024(%rsp), %rcx        # 8-byte Reload
	movq	7000(%rsp), %r8         # 8-byte Reload
	movl	6900(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	6928(%rsp), %rdi        # 8-byte Reload
	movq	7112(%rsp), %rsi        # 8-byte Reload
	movq	6848(%rsp), %rdx        # 8-byte Reload
	movq	6928(%rsp), %rcx        # 8-byte Reload
	movq	7056(%rsp), %r8         # 8-byte Reload
	movq	6944(%rsp), %r9         # 8-byte Reload
	movq	6952(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	10968(%rsp), %rax       # 8-byte Reload
	movq	7152(%rsp), %rcx        # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
	movq	6888(%rsp), %rdi        # 8-byte Reload
	movq	7112(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 6840(%rsp)       # 8-byte Spill
	movq	6928(%rsp), %rdx        # 8-byte Reload
	movq	7024(%rsp), %rcx        # 8-byte Reload
	movq	6944(%rsp), %r8         # 8-byte Reload
	movq	6952(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	7048(%rsp), %rdi        # 8-byte Reload
	movq	6880(%rsp), %rsi        # 8-byte Reload
	movq	6912(%rsp), %rdx        # 8-byte Reload
	movq	7064(%rsp), %rcx        # 8-byte Reload
	movq	7008(%rsp), %r8         # 8-byte Reload
	movl	6900(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	6920(%rsp), %rdi        # 8-byte Reload
	movq	7112(%rsp), %rsi        # 8-byte Reload
	vmovsd	8488(%rsp), %xmm0       # 8-byte Reload
	movq	6928(%rsp), %rdx        # 8-byte Reload
	movq	7016(%rsp), %rcx        # 8-byte Reload
	movq	6944(%rsp), %r8         # 8-byte Reload
	movq	6952(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	6928(%rsp), %rdi        # 8-byte Reload
	movq	7112(%rsp), %rsi        # 8-byte Reload
	vmovsd	6840(%rsp), %xmm0       # 8-byte Reload
	movq	6928(%rsp), %rdx        # 8-byte Reload
	movq	7024(%rsp), %rcx        # 8-byte Reload
	movq	6944(%rsp), %r8         # 8-byte Reload
	movq	6952(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	6840(%rsp), %xmm0       # 8-byte Reload
	vmovsd	8488(%rsp), %xmm1       # 8-byte Reload
	vdivsd	%xmm1, %xmm0, %xmm2
	movq	6888(%rsp), %rdi        # 8-byte Reload
	movq	7112(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	6928(%rsp), %rdx        # 8-byte Reload
	movq	7064(%rsp), %rcx        # 8-byte Reload
	movq	6944(%rsp), %r8         # 8-byte Reload
	movq	6952(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 6832(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	7048(%rsp), %rdi        # 8-byte Reload
	movq	6880(%rsp), %rsi        # 8-byte Reload
	movq	6912(%rsp), %rdx        # 8-byte Reload
	movq	7040(%rsp), %rcx        # 8-byte Reload
	movq	7032(%rsp), %r8         # 8-byte Reload
	movl	6900(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	6920(%rsp), %rdi        # 8-byte Reload
	movq	7112(%rsp), %rsi        # 8-byte Reload
	movq	6848(%rsp), %rdx        # 8-byte Reload
	movq	6928(%rsp), %rcx        # 8-byte Reload
	movq	7056(%rsp), %r8         # 8-byte Reload
	movq	6944(%rsp), %r9         # 8-byte Reload
	movq	6952(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	6928(%rsp), %rdi        # 8-byte Reload
	movq	7112(%rsp), %rsi        # 8-byte Reload
	vmovsd	6832(%rsp), %xmm0       # 8-byte Reload
	movq	6928(%rsp), %rdx        # 8-byte Reload
	movq	7064(%rsp), %rcx        # 8-byte Reload
	movq	6944(%rsp), %r8         # 8-byte Reload
	movq	6952(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	10968(%rsp), %rax       # 8-byte Reload
	movq	7152(%rsp), %rcx        # 8-byte Reload
	vmovsd	6832(%rsp), %xmm0       # 8-byte Reload
	vmovsd	%xmm0, (%rax,%rcx,8)
.Ltmp328:
	.loc	2 813 0                 # eispack.c:813:0
	movq	6872(%rsp), %rdi        # 8-byte Reload
	movq	6880(%rsp), %rsi        # 8-byte Reload
	movq	6912(%rsp), %rdx        # 8-byte Reload
	movq	7104(%rsp), %rcx        # 8-byte Reload
	movq	7072(%rsp), %r8         # 8-byte Reload
	movl	6900(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	6920(%rsp), %rdi        # 8-byte Reload
	movq	7112(%rsp), %rsi        # 8-byte Reload
	movq	6928(%rsp), %rdx        # 8-byte Reload
	movq	6944(%rsp), %rcx        # 8-byte Reload
	movq	7080(%rsp), %r8         # 8-byte Reload
	movq	6944(%rsp), %r9         # 8-byte Reload
	movq	6952(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	6928(%rsp), %rdi        # 8-byte Reload
	movq	7112(%rsp), %rsi        # 8-byte Reload
	movq	7152(%rsp), %rdx        # 8-byte Reload
	movq	6928(%rsp), %rcx        # 8-byte Reload
	movq	7088(%rsp), %r8         # 8-byte Reload
	movq	6944(%rsp), %r9         # 8-byte Reload
	movq	6952(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	7152(%rsp), %rax        # 8-byte Reload
	addq	$1, %rax
	movq	6888(%rsp), %rdi        # 8-byte Reload
	movq	7112(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	6928(%rsp), %rcx        # 8-byte Reload
	movq	7104(%rsp), %r8         # 8-byte Reload
	movq	6944(%rsp), %r9         # 8-byte Reload
	movq	6952(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 6824(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	6872(%rsp), %rdi        # 8-byte Reload
	movq	6880(%rsp), %rsi        # 8-byte Reload
	movq	6912(%rsp), %rdx        # 8-byte Reload
	movq	7136(%rsp), %rcx        # 8-byte Reload
	movq	7096(%rsp), %r8         # 8-byte Reload
	movl	6900(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	6928(%rsp), %rdi        # 8-byte Reload
	movq	7112(%rsp), %rsi        # 8-byte Reload
	movq	6824(%rsp), %rdx        # 8-byte Reload
	movq	6928(%rsp), %rcx        # 8-byte Reload
	movq	7104(%rsp), %r8         # 8-byte Reload
	movq	6944(%rsp), %r9         # 8-byte Reload
	movq	6952(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	6824(%rsp), %rax        # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	6888(%rsp), %rdi        # 8-byte Reload
	movq	7144(%rsp), %rsi        # 8-byte Reload
	movq	6928(%rsp), %rcx        # 8-byte Reload
	movq	7136(%rsp), %r8         # 8-byte Reload
	movq	6944(%rsp), %r9         # 8-byte Reload
	movq	6952(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 6820(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	6872(%rsp), %rdi        # 8-byte Reload
	movq	6880(%rsp), %rsi        # 8-byte Reload
	movq	6912(%rsp), %rdx        # 8-byte Reload
	movq	6936(%rsp), %rcx        # 8-byte Reload
	movq	7120(%rsp), %r8         # 8-byte Reload
	movl	6900(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	8900(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	6920(%rsp), %rdi        # 8-byte Reload
	movq	7144(%rsp), %rsi        # 8-byte Reload
	movq	6928(%rsp), %rcx        # 8-byte Reload
	movq	7128(%rsp), %r8         # 8-byte Reload
	movq	6944(%rsp), %r9         # 8-byte Reload
	movq	6952(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	6820(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	6928(%rsp), %rdi        # 8-byte Reload
	movq	7144(%rsp), %rsi        # 8-byte Reload
	movq	6928(%rsp), %rcx        # 8-byte Reload
	movq	7136(%rsp), %r8         # 8-byte Reload
	movq	6944(%rsp), %r9         # 8-byte Reload
	movq	6952(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	6820(%rsp), %ebp        # 4-byte Reload
	movl	8900(%rsp), %r12d       # 4-byte Reload
	cmpl	%r12d, %ebp
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	6888(%rsp), %rdi        # 8-byte Reload
	movq	6928(%rsp), %rsi        # 8-byte Reload
	movq	6928(%rsp), %rcx        # 8-byte Reload
	movq	6936(%rsp), %r8         # 8-byte Reload
	movq	6944(%rsp), %r9         # 8-byte Reload
	movq	6952(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 6819(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	6872(%rsp), %rdi        # 8-byte Reload
	movq	6880(%rsp), %rsi        # 8-byte Reload
	movq	6912(%rsp), %rdx        # 8-byte Reload
	movq	6904(%rsp), %rcx        # 8-byte Reload
	movq	6920(%rsp), %r8         # 8-byte Reload
	movl	6900(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	6864(%rsp), %rdi        # 8-byte Reload
	movq	6944(%rsp), %rsi        # 8-byte Reload
	movq	6944(%rsp), %rdx        # 8-byte Reload
	movq	6928(%rsp), %rcx        # 8-byte Reload
	movq	6856(%rsp), %r8         # 8-byte Reload
	movq	6944(%rsp), %r9         # 8-byte Reload
	movq	6952(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	6920(%rsp), %rdi        # 8-byte Reload
	movq	6944(%rsp), %rsi        # 8-byte Reload
	movq	6944(%rsp), %rdx        # 8-byte Reload
	movq	6928(%rsp), %rcx        # 8-byte Reload
	movq	6912(%rsp), %r8         # 8-byte Reload
	movq	6944(%rsp), %r9         # 8-byte Reload
	movq	6952(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	6819(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	6928(%rsp), %rdi        # 8-byte Reload
	movq	6928(%rsp), %rsi        # 8-byte Reload
	movq	6928(%rsp), %rcx        # 8-byte Reload
	movq	6936(%rsp), %r8         # 8-byte Reload
	movq	6944(%rsp), %r9         # 8-byte Reload
	movq	6952(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	6819(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	movq	6824(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 8112(%rsp)        # 8-byte Spill
	jne	.LBB9_17
	jmp	.LBB9_16
.Ltmp329:
.LBB9_17:                               # %.loopexit
                                        #   in Loop: Header=BB9_8 Depth=1
	vxorps	%xmm0, %xmm0, %xmm0
	movabsq	$0, %rax
	movabsq	$1, %rcx
	leaq	.L.str179, %rdx
	leaq	.L.str792, %rsi
	movabsq	$2, %rdi
	leaq	.L.str181, %r8
	movabsq	$3, %r9
	leaq	.L.str137, %r10
	movabsq	$818, %r11              # imm = 0x332
	leaq	.L.str59144, %rbx
	leaq	.L.str178, %r14
	leaq	.L.str180, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 6808(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 6800(%rsp)        # 8-byte Spill
	leaq	.L.str113, %rax
	movq	%rax, 6792(%rsp)        # 8-byte Spill
	leaq	.L.str1499, %rax
	movq	%rax, 6784(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	.loc	2 818 0                 # eispack.c:818:0
.Ltmp330:
	movq	%rdi, 6776(%rsp)        # 8-byte Spill
	movq	%r11, %rdi
	movq	%rsi, 6768(%rsp)        # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, 6760(%rsp)        # 8-byte Spill
	movq	%r14, %rdx
	movq	%rax, 6752(%rsp)        # 8-byte Spill
	movq	6760(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 6744(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	6752(%rsp), %rax        # 8-byte Reload
	movq	%r8, 6736(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 6728(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	vmovsd	%xmm0, 6720(%rsp)       # 8-byte Spill
	movq	%r15, 6712(%rsp)        # 8-byte Spill
	movl	%ebp, 6708(%rsp)        # 4-byte Spill
	movl	%r12d, 6704(%rsp)       # 4-byte Spill
	movq	%r13, 6696(%rsp)        # 8-byte Spill
	movq	%r14, 6688(%rsp)        # 8-byte Spill
	movq	%rbx, 6680(%rsp)        # 8-byte Spill
	movq	%r10, 6672(%rsp)        # 8-byte Spill
	movq	%r11, 6664(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	6776(%rsp), %rdi        # 8-byte Reload
	movq	6800(%rsp), %rsi        # 8-byte Reload
	movq	6808(%rsp), %rdx        # 8-byte Reload
	movq	6808(%rsp), %rcx        # 8-byte Reload
	movq	6784(%rsp), %r8         # 8-byte Reload
	movq	6808(%rsp), %r9         # 8-byte Reload
	movq	6768(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	8880(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	6744(%rsp), %rdi        # 8-byte Reload
	movq	6800(%rsp), %rsi        # 8-byte Reload
	movq	6744(%rsp), %rcx        # 8-byte Reload
	movq	6792(%rsp), %r8         # 8-byte Reload
	movq	6808(%rsp), %r9         # 8-byte Reload
	movq	6768(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	8880(%rsp), %ebp        # 4-byte Reload
	cmpl	$0, %ebp
	setl	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %r12d
	movl	%r12d, %edx
	movq	6696(%rsp), %rdi        # 8-byte Reload
	movq	6744(%rsp), %rsi        # 8-byte Reload
	movq	6744(%rsp), %rcx        # 8-byte Reload
	movq	6760(%rsp), %r8         # 8-byte Reload
	movq	6808(%rsp), %r9         # 8-byte Reload
	movq	6768(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 6663(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	6664(%rsp), %rdi        # 8-byte Reload
	movq	6680(%rsp), %rsi        # 8-byte Reload
	movq	6688(%rsp), %rdx        # 8-byte Reload
	movq	6712(%rsp), %rcx        # 8-byte Reload
	movq	6776(%rsp), %r8         # 8-byte Reload
	movl	6708(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	6728(%rsp), %rdi        # 8-byte Reload
	movq	6808(%rsp), %rsi        # 8-byte Reload
	movq	6808(%rsp), %rdx        # 8-byte Reload
	movq	6744(%rsp), %rcx        # 8-byte Reload
	movq	6672(%rsp), %r8         # 8-byte Reload
	movq	6808(%rsp), %r9         # 8-byte Reload
	movq	6768(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	6776(%rsp), %rdi        # 8-byte Reload
	movq	6808(%rsp), %rsi        # 8-byte Reload
	movq	6808(%rsp), %rdx        # 8-byte Reload
	movq	6744(%rsp), %rcx        # 8-byte Reload
	movq	6736(%rsp), %r8         # 8-byte Reload
	movq	6808(%rsp), %r9         # 8-byte Reload
	movq	6768(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	6663(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	6744(%rsp), %rdi        # 8-byte Reload
	movq	6744(%rsp), %rsi        # 8-byte Reload
	movq	6744(%rsp), %rcx        # 8-byte Reload
	movq	6760(%rsp), %r8         # 8-byte Reload
	movq	6808(%rsp), %r9         # 8-byte Reload
	movq	6768(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	6663(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	movq	6808(%rsp), %rcx        # 8-byte Reload
	vmovsd	6720(%rsp), %xmm0       # 8-byte Reload
	vmovsd	6720(%rsp), %xmm1       # 8-byte Reload
	movq	%rcx, 6648(%rsp)        # 8-byte Spill
	vmovsd	%xmm0, 6640(%rsp)       # 8-byte Spill
	vmovsd	%xmm1, 8104(%rsp)       # 8-byte Spill
	jne	.LBB9_19
.LBB9_18:                               # %.lr.ph7
                                        #   Parent Loop BB9_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vmovsd	6640(%rsp), %xmm0       # 8-byte Reload
	movq	6648(%rsp), %rax        # 8-byte Reload
	movabsq	$1, %rcx
	leaq	.L.str190, %rdx
	movabsq	$0, %rsi
	leaq	.L.str792, %rdi
	movabsq	$2, %r8
	leaq	.L.str181, %r9
	movabsq	$3, %r10
	leaq	.L.str137, %r11
	movabsq	$818, %rbx              # imm = 0x332
	leaq	.L.str59144, %r14
	leaq	.L.str191, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 6632(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 6624(%rsp)        # 8-byte Spill
	leaq	.L.str189, %rax
	movq	%rax, 6616(%rsp)        # 8-byte Spill
	leaq	.L.str110, %rax
	movq	%rax, 6608(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 6600(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 6592(%rsp)        # 8-byte Spill
	leaq	.L.str183, %rax
	movq	%rax, 6584(%rsp)        # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, 6576(%rsp)        # 8-byte Spill
	leaq	.L.str182, %rax
	movq	%rax, 6568(%rsp)        # 8-byte Spill
	leaq	.L.str1499, %rax
	movq	%rax, 6560(%rsp)        # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, 6552(%rsp)        # 8-byte Spill
	leaq	.L.str185, %rax
	movq	%rax, 6544(%rsp)        # 8-byte Spill
	leaq	.L.str184, %rax
	movq	%rax, 6536(%rsp)        # 8-byte Spill
	leaq	.L.str188, %rax
	movq	%rax, 6528(%rsp)        # 8-byte Spill
	movabsq	$820, %rax              # imm = 0x334
	movq	%rax, 6520(%rsp)        # 8-byte Spill
	movabsq	$9, %rax
	movq	%rax, 6512(%rsp)        # 8-byte Spill
	leaq	.L.str187, %rax
	movq	%rax, 6504(%rsp)        # 8-byte Spill
	movabsq	$13, %rax
	movq	%rax, 6496(%rsp)        # 8-byte Spill
	leaq	.L.str186171, %rax
	movq	%rax, 6488(%rsp)        # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, 6480(%rsp)        # 8-byte Spill
	leaq	.L.str85170, %rax
	movq	%rax, 6472(%rsp)        # 8-byte Spill
	movabsq	$29, %rax
	vxorps	%xmm1, %xmm1, %xmm1
	movq	%rax, 6464(%rsp)        # 8-byte Spill
	leaq	.L.str178, %rax
	movq	%rax, 6456(%rsp)        # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 6448(%rsp)        # 8-byte Spill
	movabsq	$48, %rax
	.loc	2 820 0                 # eispack.c:820:0
.Ltmp331:
	movq	%rax, 6440(%rsp)        # 8-byte Spill
	movq	6448(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 6432(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 6424(%rsp)        # 8-byte Spill
	movq	%r14, %rsi
	movq	%rdx, 6416(%rsp)        # 8-byte Spill
	movq	%r9, %rdx
	movq	6568(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 6408(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	6440(%rsp), %rax        # 8-byte Reload
	movq	%r8, 6400(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 6392(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	vmovsd	%xmm0, 6384(%rsp)       # 8-byte Spill
	movl	%ebp, 6380(%rsp)        # 4-byte Spill
	movl	%r12d, 6376(%rsp)       # 4-byte Spill
	movq	%r13, 6368(%rsp)        # 8-byte Spill
	vmovsd	%xmm1, 6360(%rsp)       # 8-byte Spill
	movq	%r15, 6352(%rsp)        # 8-byte Spill
	movq	%r14, 6344(%rsp)        # 8-byte Spill
	movq	%r10, 6336(%rsp)        # 8-byte Spill
	movq	%r11, 6328(%rsp)        # 8-byte Spill
	movq	%rbx, 6320(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	6400(%rsp), %rdi        # 8-byte Reload
	movq	6592(%rsp), %rsi        # 8-byte Reload
	movq	6424(%rsp), %rdx        # 8-byte Reload
	movq	6424(%rsp), %rcx        # 8-byte Reload
	movq	6560(%rsp), %r8         # 8-byte Reload
	movq	6408(%rsp), %r9         # 8-byte Reload
	movq	6456(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	6408(%rsp), %rdi        # 8-byte Reload
	movq	6592(%rsp), %rsi        # 8-byte Reload
	movq	6424(%rsp), %rdx        # 8-byte Reload
	movq	6408(%rsp), %rcx        # 8-byte Reload
	movq	6584(%rsp), %r8         # 8-byte Reload
	movq	6408(%rsp), %r9         # 8-byte Reload
	movq	6392(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	6368(%rsp), %rdi        # 8-byte Reload
	movq	6592(%rsp), %rsi        # 8-byte Reload
	movq	6632(%rsp), %rdx        # 8-byte Reload
	movq	6408(%rsp), %rcx        # 8-byte Reload
	movq	6568(%rsp), %r8         # 8-byte Reload
	movq	6424(%rsp), %r9         # 8-byte Reload
	movq	6392(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	6448(%rsp), %rdi        # 8-byte Reload
	movq	6344(%rsp), %rsi        # 8-byte Reload
	movq	6392(%rsp), %rdx        # 8-byte Reload
	movq	6536(%rsp), %rcx        # 8-byte Reload
	movq	6440(%rsp), %r8         # 8-byte Reload
	movl	6380(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	6400(%rsp), %rdi        # 8-byte Reload
	movq	6592(%rsp), %rsi        # 8-byte Reload
	vmovsd	6360(%rsp), %xmm0       # 8-byte Reload
	movq	6424(%rsp), %rdx        # 8-byte Reload
	movq	6560(%rsp), %rcx        # 8-byte Reload
	movq	6408(%rsp), %r8         # 8-byte Reload
	movq	6456(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	6408(%rsp), %rdi        # 8-byte Reload
	movq	6592(%rsp), %rsi        # 8-byte Reload
	movq	6424(%rsp), %rdx        # 8-byte Reload
	movq	6408(%rsp), %rcx        # 8-byte Reload
	movq	6544(%rsp), %r8         # 8-byte Reload
	movq	6408(%rsp), %r9         # 8-byte Reload
	movq	6392(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	6368(%rsp), %rdi        # 8-byte Reload
	movq	6592(%rsp), %rsi        # 8-byte Reload
	vmovsd	6384(%rsp), %xmm0       # 8-byte Reload
	movq	6408(%rsp), %rdx        # 8-byte Reload
	movq	6536(%rsp), %rcx        # 8-byte Reload
	movq	6424(%rsp), %r8         # 8-byte Reload
	movq	6392(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	6520(%rsp), %rdi        # 8-byte Reload
	movq	6344(%rsp), %rsi        # 8-byte Reload
	movq	6392(%rsp), %rdx        # 8-byte Reload
	movq	6488(%rsp), %rcx        # 8-byte Reload
	movq	6464(%rsp), %r8         # 8-byte Reload
	movl	6380(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	6400(%rsp), %rdi        # 8-byte Reload
	movq	6592(%rsp), %rsi        # 8-byte Reload
	movq	6632(%rsp), %rdx        # 8-byte Reload
	movq	6408(%rsp), %rcx        # 8-byte Reload
	movq	6568(%rsp), %r8         # 8-byte Reload
	movq	6424(%rsp), %r9         # 8-byte Reload
	movq	6432(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	6408(%rsp), %rdi        # 8-byte Reload
	movq	6592(%rsp), %rsi        # 8-byte Reload
	movq	10968(%rsp), %rdx       # 8-byte Reload
	movq	6408(%rsp), %rcx        # 8-byte Reload
	movq	6472(%rsp), %r8         # 8-byte Reload
	movq	6424(%rsp), %r9         # 8-byte Reload
	movq	6432(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	6632(%rsp), %rax        # 8-byte Reload
	shlq	$3, %rax
	movq	10968(%rsp), %rcx       # 8-byte Reload
	addq	%rax, %rcx
	movq	6368(%rsp), %rdi        # 8-byte Reload
	movq	6592(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	6408(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 6312(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	6488(%rsp), %r8         # 8-byte Reload
	movq	6424(%rsp), %r9         # 8-byte Reload
	movq	6432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	6520(%rsp), %rdi        # 8-byte Reload
	movq	6344(%rsp), %rsi        # 8-byte Reload
	movq	6392(%rsp), %rdx        # 8-byte Reload
	movq	6504(%rsp), %rcx        # 8-byte Reload
	movq	6480(%rsp), %r8         # 8-byte Reload
	movl	6380(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	6408(%rsp), %rdi        # 8-byte Reload
	movq	6592(%rsp), %rsi        # 8-byte Reload
	movq	6312(%rsp), %rdx        # 8-byte Reload
	movq	6408(%rsp), %rcx        # 8-byte Reload
	movq	6488(%rsp), %r8         # 8-byte Reload
	movq	6424(%rsp), %r9         # 8-byte Reload
	movq	6432(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	10968(%rsp), %rax       # 8-byte Reload
	movq	6632(%rsp), %rcx        # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
	movq	6368(%rsp), %rdi        # 8-byte Reload
	movq	6592(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 6304(%rsp)       # 8-byte Spill
	movq	6408(%rsp), %rdx        # 8-byte Reload
	movq	6504(%rsp), %rcx        # 8-byte Reload
	movq	6424(%rsp), %r8         # 8-byte Reload
	movq	6432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	6520(%rsp), %rdi        # 8-byte Reload
	movq	6344(%rsp), %rsi        # 8-byte Reload
	movq	6392(%rsp), %rdx        # 8-byte Reload
	movq	6528(%rsp), %rcx        # 8-byte Reload
	movq	6496(%rsp), %r8         # 8-byte Reload
	movl	6380(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	6400(%rsp), %rdi        # 8-byte Reload
	movq	6592(%rsp), %rsi        # 8-byte Reload
	vmovsd	6304(%rsp), %xmm0       # 8-byte Reload
	movq	6408(%rsp), %rdx        # 8-byte Reload
	movq	6504(%rsp), %rcx        # 8-byte Reload
	movq	6424(%rsp), %r8         # 8-byte Reload
	movq	6432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	6408(%rsp), %rdi        # 8-byte Reload
	movq	6592(%rsp), %rsi        # 8-byte Reload
	vmovsd	6304(%rsp), %xmm0       # 8-byte Reload
	movq	6408(%rsp), %rdx        # 8-byte Reload
	movq	6504(%rsp), %rcx        # 8-byte Reload
	movq	6424(%rsp), %r8         # 8-byte Reload
	movq	6432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	6304(%rsp), %xmm0       # 8-byte Reload
	vmulsd	%xmm0, %xmm0, %xmm1
	movq	6368(%rsp), %rdi        # 8-byte Reload
	movq	6592(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm1, %xmm0
	movq	6408(%rsp), %rdx        # 8-byte Reload
	movq	6528(%rsp), %rcx        # 8-byte Reload
	movq	6424(%rsp), %r8         # 8-byte Reload
	movq	6432(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm1, 6296(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	6520(%rsp), %rdi        # 8-byte Reload
	movq	6344(%rsp), %rsi        # 8-byte Reload
	movq	6392(%rsp), %rdx        # 8-byte Reload
	movq	6544(%rsp), %rcx        # 8-byte Reload
	movq	6512(%rsp), %r8         # 8-byte Reload
	movl	6380(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	6400(%rsp), %rdi        # 8-byte Reload
	movq	6592(%rsp), %rsi        # 8-byte Reload
	vmovsd	6296(%rsp), %xmm0       # 8-byte Reload
	movq	6408(%rsp), %rdx        # 8-byte Reload
	movq	6528(%rsp), %rcx        # 8-byte Reload
	movq	6424(%rsp), %r8         # 8-byte Reload
	movq	6432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	6408(%rsp), %rdi        # 8-byte Reload
	movq	6592(%rsp), %rsi        # 8-byte Reload
	vmovsd	6384(%rsp), %xmm0       # 8-byte Reload
	movq	6408(%rsp), %rdx        # 8-byte Reload
	movq	6536(%rsp), %rcx        # 8-byte Reload
	movq	6424(%rsp), %r8         # 8-byte Reload
	movq	6432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	6384(%rsp), %xmm0       # 8-byte Reload
	vmovsd	6296(%rsp), %xmm1       # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
	movq	6368(%rsp), %rdi        # 8-byte Reload
	movq	6592(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	6408(%rsp), %rdx        # 8-byte Reload
	movq	6544(%rsp), %rcx        # 8-byte Reload
	movq	6424(%rsp), %r8         # 8-byte Reload
	movq	6432(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 6288(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
.Ltmp332:
	#DEBUG_VALUE: tred1:h <- [RSP+6288]
	.loc	2 818 0                 # eispack.c:818:0
	movq	6320(%rsp), %rdi        # 8-byte Reload
	movq	6344(%rsp), %rsi        # 8-byte Reload
	movq	6392(%rsp), %rdx        # 8-byte Reload
	movq	6584(%rsp), %rcx        # 8-byte Reload
	movq	6552(%rsp), %r8         # 8-byte Reload
	movl	6380(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	6400(%rsp), %rdi        # 8-byte Reload
	movq	6592(%rsp), %rsi        # 8-byte Reload
	movq	6408(%rsp), %rdx        # 8-byte Reload
	movq	6424(%rsp), %rcx        # 8-byte Reload
	movq	6560(%rsp), %r8         # 8-byte Reload
	movq	6424(%rsp), %r9         # 8-byte Reload
	movq	6432(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	6408(%rsp), %rdi        # 8-byte Reload
	movq	6592(%rsp), %rsi        # 8-byte Reload
	movq	6632(%rsp), %rdx        # 8-byte Reload
	movq	6408(%rsp), %rcx        # 8-byte Reload
	movq	6568(%rsp), %r8         # 8-byte Reload
	movq	6424(%rsp), %r9         # 8-byte Reload
	movq	6432(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	6632(%rsp), %rax        # 8-byte Reload
	addq	$1, %rax
	movq	6368(%rsp), %rdi        # 8-byte Reload
	movq	6592(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	6408(%rsp), %rcx        # 8-byte Reload
	movq	6584(%rsp), %r8         # 8-byte Reload
	movq	6424(%rsp), %r9         # 8-byte Reload
	movq	6432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 6280(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	6320(%rsp), %rdi        # 8-byte Reload
	movq	6344(%rsp), %rsi        # 8-byte Reload
	movq	6392(%rsp), %rdx        # 8-byte Reload
	movq	6616(%rsp), %rcx        # 8-byte Reload
	movq	6576(%rsp), %r8         # 8-byte Reload
	movl	6380(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	6408(%rsp), %rdi        # 8-byte Reload
	movq	6592(%rsp), %rsi        # 8-byte Reload
	movq	6280(%rsp), %rdx        # 8-byte Reload
	movq	6408(%rsp), %rcx        # 8-byte Reload
	movq	6584(%rsp), %r8         # 8-byte Reload
	movq	6424(%rsp), %r9         # 8-byte Reload
	movq	6432(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	6280(%rsp), %rax        # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	6368(%rsp), %rdi        # 8-byte Reload
	movq	6624(%rsp), %rsi        # 8-byte Reload
	movq	6408(%rsp), %rcx        # 8-byte Reload
	movq	6616(%rsp), %r8         # 8-byte Reload
	movq	6424(%rsp), %r9         # 8-byte Reload
	movq	6432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 6276(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	6320(%rsp), %rdi        # 8-byte Reload
	movq	6344(%rsp), %rsi        # 8-byte Reload
	movq	6392(%rsp), %rdx        # 8-byte Reload
	movq	6416(%rsp), %rcx        # 8-byte Reload
	movq	6600(%rsp), %r8         # 8-byte Reload
	movl	6380(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	8900(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	6400(%rsp), %rdi        # 8-byte Reload
	movq	6624(%rsp), %rsi        # 8-byte Reload
	movq	6408(%rsp), %rcx        # 8-byte Reload
	movq	6608(%rsp), %r8         # 8-byte Reload
	movq	6424(%rsp), %r9         # 8-byte Reload
	movq	6432(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	6276(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	6408(%rsp), %rdi        # 8-byte Reload
	movq	6624(%rsp), %rsi        # 8-byte Reload
	movq	6408(%rsp), %rcx        # 8-byte Reload
	movq	6616(%rsp), %r8         # 8-byte Reload
	movq	6424(%rsp), %r9         # 8-byte Reload
	movq	6432(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	6276(%rsp), %ebp        # 4-byte Reload
	movl	8900(%rsp), %r12d       # 4-byte Reload
	cmpl	%r12d, %ebp
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	6368(%rsp), %rdi        # 8-byte Reload
	movq	6408(%rsp), %rsi        # 8-byte Reload
	movq	6408(%rsp), %rcx        # 8-byte Reload
	movq	6416(%rsp), %r8         # 8-byte Reload
	movq	6424(%rsp), %r9         # 8-byte Reload
	movq	6432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 6275(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	6320(%rsp), %rdi        # 8-byte Reload
	movq	6344(%rsp), %rsi        # 8-byte Reload
	movq	6392(%rsp), %rdx        # 8-byte Reload
	movq	6352(%rsp), %rcx        # 8-byte Reload
	movq	6400(%rsp), %r8         # 8-byte Reload
	movl	6380(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	6336(%rsp), %rdi        # 8-byte Reload
	movq	6424(%rsp), %rsi        # 8-byte Reload
	movq	6424(%rsp), %rdx        # 8-byte Reload
	movq	6408(%rsp), %rcx        # 8-byte Reload
	movq	6328(%rsp), %r8         # 8-byte Reload
	movq	6424(%rsp), %r9         # 8-byte Reload
	movq	6432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	6400(%rsp), %rdi        # 8-byte Reload
	movq	6424(%rsp), %rsi        # 8-byte Reload
	movq	6424(%rsp), %rdx        # 8-byte Reload
	movq	6408(%rsp), %rcx        # 8-byte Reload
	movq	6392(%rsp), %r8         # 8-byte Reload
	movq	6424(%rsp), %r9         # 8-byte Reload
	movq	6432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	6275(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	6408(%rsp), %rdi        # 8-byte Reload
	movq	6408(%rsp), %rsi        # 8-byte Reload
	movq	6408(%rsp), %rcx        # 8-byte Reload
	movq	6416(%rsp), %r8         # 8-byte Reload
	movq	6424(%rsp), %r9         # 8-byte Reload
	movq	6432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	6275(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	movq	6280(%rsp), %rcx        # 8-byte Reload
	vmovsd	6288(%rsp), %xmm0       # 8-byte Reload
	vmovsd	6288(%rsp), %xmm1       # 8-byte Reload
	movq	%rcx, 6648(%rsp)        # 8-byte Spill
	vmovsd	%xmm0, 6640(%rsp)       # 8-byte Spill
	vmovsd	%xmm1, 8104(%rsp)       # 8-byte Spill
	jne	.LBB9_19
	jmp	.LBB9_18
.Ltmp333:
.LBB9_19:                               # %._crit_edge8
                                        #   in Loop: Header=BB9_8 Depth=1
	vmovsd	8104(%rsp), %xmm0       # 8-byte Reload
	movabsq	$1, %rax
	movabsq	$64, %rcx
	leaq	.L.str199, %rdx
	movabsq	$0, %rsi
	leaq	.L.str792, %rdi
	movabsq	$2, %r8
	leaq	r8_sign, %r9
	leaq	.L.str48133, %r10
	movabsq	$825, %r11              # imm = 0x339
	leaq	.L.str59144, %rbx
	leaq	.L.str137, %r14
	leaq	.L.str202, %r15
	movabsq	$49, %r12
	movl	$0, %ebp
	movl	$1, %r13d
	movq	%rax, 6264(%rsp)        # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 6256(%rsp)        # 8-byte Spill
	leaq	.L.str200, %rax
	movq	%rax, 6248(%rsp)        # 8-byte Spill
	leaq	.L.str192, %rax
	movq	%rax, 6240(%rsp)        # 8-byte Spill
	leaq	sqrt, %rax
	movq	%rax, 6232(%rsp)        # 8-byte Spill
	leaq	.L.str201, %rax
	movq	%rax, 6224(%rsp)        # 8-byte Spill
	leaq	.L.str198, %rax
	movq	%rax, 6216(%rsp)        # 8-byte Spill
	movabsq	$824, %rax              # imm = 0x338
	movq	%rax, 6208(%rsp)        # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, 6200(%rsp)        # 8-byte Spill
	leaq	.L.str85170, %rax
	movq	%rax, 6192(%rsp)        # 8-byte Spill
	leaq	.L.str197, %rax
	movq	%rax, 6184(%rsp)        # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 6176(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 6168(%rsp)        # 8-byte Spill
	leaq	.L.str113, %rax
	movq	%rax, 6160(%rsp)        # 8-byte Spill
	movabsq	$35, %rax
	movq	%rax, 6152(%rsp)        # 8-byte Spill
	leaq	.L.str194, %rax
	movq	%rax, 6144(%rsp)        # 8-byte Spill
	leaq	.L.str195, %rax
	movq	%rax, 6136(%rsp)        # 8-byte Spill
	movabsq	$823, %rax              # imm = 0x337
	movq	%rax, 6128(%rsp)        # 8-byte Spill
	leaq	.L.str196, %rax
	movq	%rax, 6120(%rsp)        # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, 6112(%rsp)        # 8-byte Spill
	leaq	.L.str163, %rax
	movq	%rax, 6104(%rsp)        # 8-byte Spill
	leaq	.L.str107, %rax
	movq	%rax, 6096(%rsp)        # 8-byte Spill
	leaq	.L.str121, %rax
	movq	%rax, 6088(%rsp)        # 8-byte Spill
	leaq	.L.str193, %rax
	movq	%rax, 6080(%rsp)        # 8-byte Spill
	movabsq	$13, %rax
	movq	%rax, 6072(%rsp)        # 8-byte Spill
	leaq	.L.str178, %rax
	vxorps	%xmm1, %xmm1, %xmm1
	movq	%rax, 6064(%rsp)        # 8-byte Spill
	leaq	.L.str1499, %rax
	movq	%rax, 6056(%rsp)        # 8-byte Spill
	leaq	.L.str185, %rax
	movq	%rax, 6048(%rsp)        # 8-byte Spill
	leaq	.L.str181, %rax
	movq	%rax, 6040(%rsp)        # 8-byte Spill
	movabsq	$3, %rax
	movq	%rax, 6032(%rsp)        # 8-byte Spill
	leaq	.L.str133, %rax
	movq	%rax, 6024(%rsp)        # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 6016(%rsp)        # 8-byte Spill
	movabsq	$48, %rax
	.loc	2 823 0                 # eispack.c:823:0
	movq	%rax, 6008(%rsp)        # 8-byte Spill
	movq	6016(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 6000(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 5992(%rsp)        # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, 5984(%rsp)        # 8-byte Spill
	movq	%r14, %rdx
	movq	6240(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 5976(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	6008(%rsp), %rax        # 8-byte Reload
	movq	%r8, 5968(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 5960(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	vmovsd	%xmm0, 5952(%rsp)       # 8-byte Spill
	movq	%r12, 5944(%rsp)        # 8-byte Spill
	movl	%ebp, 5940(%rsp)        # 4-byte Spill
	movl	%r13d, 5936(%rsp)       # 4-byte Spill
	vmovsd	%xmm1, 5928(%rsp)       # 8-byte Spill
	movq	%r15, 5920(%rsp)        # 8-byte Spill
	movq	%r14, 5912(%rsp)        # 8-byte Spill
	movq	%r10, 5904(%rsp)        # 8-byte Spill
	movq	%r11, 5896(%rsp)        # 8-byte Spill
	movq	%rbx, 5888(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	6032(%rsp), %rdi        # 8-byte Reload
	movq	5976(%rsp), %rsi        # 8-byte Reload
	vmovsd	5928(%rsp), %xmm0       # 8-byte Reload
	movq	5992(%rsp), %rdx        # 8-byte Reload
	movq	6056(%rsp), %rcx        # 8-byte Reload
	movq	6264(%rsp), %r8         # 8-byte Reload
	movq	6024(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	5968(%rsp), %rdi        # 8-byte Reload
	movq	5976(%rsp), %rsi        # 8-byte Reload
	movq	5992(%rsp), %rdx        # 8-byte Reload
	movq	6264(%rsp), %rcx        # 8-byte Reload
	movq	6048(%rsp), %r8         # 8-byte Reload
	movq	6264(%rsp), %r9         # 8-byte Reload
	movq	6040(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	6264(%rsp), %rdi        # 8-byte Reload
	movq	5976(%rsp), %rsi        # 8-byte Reload
	vmovsd	5928(%rsp), %xmm0       # 8-byte Reload
	movq	5992(%rsp), %rdx        # 8-byte Reload
	movq	6056(%rsp), %rcx        # 8-byte Reload
	movq	6264(%rsp), %r8         # 8-byte Reload
	movq	6064(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	6256(%rsp), %rdi        # 8-byte Reload
	movq	5976(%rsp), %rsi        # 8-byte Reload
	vmovsd	5952(%rsp), %xmm0       # 8-byte Reload
	movq	6264(%rsp), %rdx        # 8-byte Reload
	movq	6240(%rsp), %rcx        # 8-byte Reload
	movq	5992(%rsp), %r8         # 8-byte Reload
	movq	6064(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	6128(%rsp), %rdi        # 8-byte Reload
	movq	5888(%rsp), %rsi        # 8-byte Reload
	movq	5912(%rsp), %rdx        # 8-byte Reload
	movq	6080(%rsp), %rcx        # 8-byte Reload
	movq	6072(%rsp), %r8         # 8-byte Reload
	movl	5940(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	5968(%rsp), %rdi        # 8-byte Reload
	movq	5976(%rsp), %rsi        # 8-byte Reload
	vmovsd	5952(%rsp), %xmm0       # 8-byte Reload
	movq	6264(%rsp), %rdx        # 8-byte Reload
	movq	6240(%rsp), %rcx        # 8-byte Reload
	movq	5992(%rsp), %r8         # 8-byte Reload
	movq	6000(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	6264(%rsp), %rdi        # 8-byte Reload
	movq	5976(%rsp), %rsi        # 8-byte Reload
	vmovsd	8488(%rsp), %xmm0       # 8-byte Reload
	movq	6264(%rsp), %rdx        # 8-byte Reload
	movq	6088(%rsp), %rcx        # 8-byte Reload
	movq	5992(%rsp), %r8         # 8-byte Reload
	movq	6000(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	8488(%rsp), %xmm0       # 8-byte Reload
	vmovsd	5952(%rsp), %xmm1       # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	6256(%rsp), %rdi        # 8-byte Reload
	movq	5976(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	6264(%rsp), %rdx        # 8-byte Reload
	movq	6080(%rsp), %rcx        # 8-byte Reload
	movq	5992(%rsp), %r8         # 8-byte Reload
	movq	6000(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 5880(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	6128(%rsp), %rdi        # 8-byte Reload
	movq	5888(%rsp), %rsi        # 8-byte Reload
	movq	5912(%rsp), %rdx        # 8-byte Reload
	movq	6144(%rsp), %rcx        # 8-byte Reload
	movq	6072(%rsp), %r8         # 8-byte Reload
	movl	5940(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	5968(%rsp), %rdi        # 8-byte Reload
	movq	5976(%rsp), %rsi        # 8-byte Reload
	vmovsd	5880(%rsp), %xmm0       # 8-byte Reload
	movq	6264(%rsp), %rdx        # 8-byte Reload
	movq	6080(%rsp), %rcx        # 8-byte Reload
	movq	5992(%rsp), %r8         # 8-byte Reload
	movq	6000(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	6264(%rsp), %rdi        # 8-byte Reload
	movq	5976(%rsp), %rsi        # 8-byte Reload
	vmovsd	8488(%rsp), %xmm0       # 8-byte Reload
	movq	6264(%rsp), %rdx        # 8-byte Reload
	movq	6088(%rsp), %rcx        # 8-byte Reload
	movq	5992(%rsp), %r8         # 8-byte Reload
	movq	6000(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	8488(%rsp), %xmm0       # 8-byte Reload
	vmovsd	5880(%rsp), %xmm1       # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	6256(%rsp), %rdi        # 8-byte Reload
	movq	5976(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	6264(%rsp), %rdx        # 8-byte Reload
	movq	6144(%rsp), %rcx        # 8-byte Reload
	movq	5992(%rsp), %r8         # 8-byte Reload
	movq	6000(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 5872(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	6128(%rsp), %rdi        # 8-byte Reload
	movq	5888(%rsp), %rsi        # 8-byte Reload
	movq	5912(%rsp), %rdx        # 8-byte Reload
	movq	6136(%rsp), %rcx        # 8-byte Reload
	movq	6176(%rsp), %r8         # 8-byte Reload
	movl	5940(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	5968(%rsp), %rdi        # 8-byte Reload
	movq	5976(%rsp), %rsi        # 8-byte Reload
	movq	8888(%rsp), %rdx        # 8-byte Reload
	movq	6264(%rsp), %rcx        # 8-byte Reload
	movq	6096(%rsp), %r8         # 8-byte Reload
	movq	5992(%rsp), %r9         # 8-byte Reload
	movq	6000(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	6264(%rsp), %rdi        # 8-byte Reload
	movq	5976(%rsp), %rsi        # 8-byte Reload
	movq	10952(%rsp), %rdx       # 8-byte Reload
	movq	6264(%rsp), %rcx        # 8-byte Reload
	movq	6104(%rsp), %r8         # 8-byte Reload
	movq	5992(%rsp), %r9         # 8-byte Reload
	movq	6000(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	8888(%rsp), %rax        # 8-byte Reload
	shlq	$3, %rax
	movq	10952(%rsp), %rcx       # 8-byte Reload
	addq	%rax, %rcx
	movq	6256(%rsp), %rdi        # 8-byte Reload
	movq	5976(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	6264(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 5864(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	6136(%rsp), %r8         # 8-byte Reload
	movq	5992(%rsp), %r9         # 8-byte Reload
	movq	6000(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	6128(%rsp), %rdi        # 8-byte Reload
	movq	5888(%rsp), %rsi        # 8-byte Reload
	movq	5912(%rsp), %rdx        # 8-byte Reload
	movq	6120(%rsp), %rcx        # 8-byte Reload
	movq	6112(%rsp), %r8         # 8-byte Reload
	movl	5940(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	5968(%rsp), %rdi        # 8-byte Reload
	movq	5976(%rsp), %rsi        # 8-byte Reload
	movq	5864(%rsp), %rdx        # 8-byte Reload
	movq	6264(%rsp), %rcx        # 8-byte Reload
	movq	6136(%rsp), %r8         # 8-byte Reload
	movq	5992(%rsp), %r9         # 8-byte Reload
	movq	6000(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	6264(%rsp), %rdi        # 8-byte Reload
	movq	5976(%rsp), %rsi        # 8-byte Reload
	vmovsd	5872(%rsp), %xmm0       # 8-byte Reload
	movq	6264(%rsp), %rdx        # 8-byte Reload
	movq	6144(%rsp), %rcx        # 8-byte Reload
	movq	5992(%rsp), %r8         # 8-byte Reload
	movq	6000(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	10952(%rsp), %rax       # 8-byte Reload
	movq	8888(%rsp), %rcx        # 8-byte Reload
	vmovsd	5872(%rsp), %xmm0       # 8-byte Reload
	vmovsd	%xmm0, (%rax,%rcx,8)
	.loc	2 824 0                 # eispack.c:824:0
	movq	6208(%rsp), %rdi        # 8-byte Reload
	movq	5888(%rsp), %rsi        # 8-byte Reload
	movq	5912(%rsp), %rdx        # 8-byte Reload
	movq	6184(%rsp), %rcx        # 8-byte Reload
	movq	6152(%rsp), %r8         # 8-byte Reload
	movl	5940(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	8880(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	6264(%rsp), %rdi        # 8-byte Reload
	movq	6168(%rsp), %rsi        # 8-byte Reload
	movq	6264(%rsp), %rcx        # 8-byte Reload
	movq	6160(%rsp), %r8         # 8-byte Reload
	movq	5992(%rsp), %r9         # 8-byte Reload
	movq	6000(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	8880(%rsp), %ebp        # 4-byte Reload
	movslq	%ebp, %rax
	movq	6256(%rsp), %rdi        # 8-byte Reload
	movq	5976(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	6264(%rsp), %rcx        # 8-byte Reload
	movq	6184(%rsp), %r8         # 8-byte Reload
	movq	5992(%rsp), %r9         # 8-byte Reload
	movq	6000(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 5856(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	6208(%rsp), %rdi        # 8-byte Reload
	movq	5888(%rsp), %rsi        # 8-byte Reload
	movq	5912(%rsp), %rdx        # 8-byte Reload
	movq	6216(%rsp), %rcx        # 8-byte Reload
	movq	6176(%rsp), %r8         # 8-byte Reload
	movl	5940(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	5968(%rsp), %rdi        # 8-byte Reload
	movq	5976(%rsp), %rsi        # 8-byte Reload
	movq	5856(%rsp), %rdx        # 8-byte Reload
	movq	6264(%rsp), %rcx        # 8-byte Reload
	movq	6184(%rsp), %r8         # 8-byte Reload
	movq	5992(%rsp), %r9         # 8-byte Reload
	movq	6000(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	6264(%rsp), %rdi        # 8-byte Reload
	movq	5976(%rsp), %rsi        # 8-byte Reload
	movq	10968(%rsp), %rdx       # 8-byte Reload
	movq	6264(%rsp), %rcx        # 8-byte Reload
	movq	6192(%rsp), %r8         # 8-byte Reload
	movq	5992(%rsp), %r9         # 8-byte Reload
	movq	6000(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	5856(%rsp), %rax        # 8-byte Reload
	shlq	$3, %rax
	movq	10968(%rsp), %rcx       # 8-byte Reload
	addq	%rax, %rcx
	movq	6256(%rsp), %rdi        # 8-byte Reload
	movq	5976(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	6264(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 5848(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	6216(%rsp), %r8         # 8-byte Reload
	movq	5992(%rsp), %r9         # 8-byte Reload
	movq	6000(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	6208(%rsp), %rdi        # 8-byte Reload
	movq	5888(%rsp), %rsi        # 8-byte Reload
	movq	5912(%rsp), %rdx        # 8-byte Reload
	movq	5984(%rsp), %rcx        # 8-byte Reload
	movq	6200(%rsp), %r8         # 8-byte Reload
	movl	5940(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	6264(%rsp), %rdi        # 8-byte Reload
	movq	5976(%rsp), %rsi        # 8-byte Reload
	movq	5848(%rsp), %rdx        # 8-byte Reload
	movq	6264(%rsp), %rcx        # 8-byte Reload
	movq	6216(%rsp), %r8         # 8-byte Reload
	movq	5992(%rsp), %r9         # 8-byte Reload
	movq	6000(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	10968(%rsp), %rax       # 8-byte Reload
	movq	5856(%rsp), %rcx        # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
	movq	6256(%rsp), %rdi        # 8-byte Reload
	movq	5976(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 5840(%rsp)       # 8-byte Spill
	movq	6264(%rsp), %rdx        # 8-byte Reload
	movq	5984(%rsp), %rcx        # 8-byte Reload
	movq	5992(%rsp), %r8         # 8-byte Reload
	movq	6000(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
.Ltmp334:
	#DEBUG_VALUE: tred1:f <- [RSP+5840]
	.loc	2 825 0                 # eispack.c:825:0
	movq	5896(%rsp), %rdi        # 8-byte Reload
	movq	5888(%rsp), %rsi        # 8-byte Reload
	movq	5912(%rsp), %rdx        # 8-byte Reload
	movq	6248(%rsp), %rcx        # 8-byte Reload
	movq	5944(%rsp), %r8         # 8-byte Reload
	movl	5940(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	5968(%rsp), %rdi        # 8-byte Reload
	movq	5976(%rsp), %rsi        # 8-byte Reload
	movq	6232(%rsp), %rdx        # 8-byte Reload
	movq	6264(%rsp), %rcx        # 8-byte Reload
	movq	6224(%rsp), %r8         # 8-byte Reload
	movq	5992(%rsp), %r9         # 8-byte Reload
	movq	6000(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	6264(%rsp), %rdi        # 8-byte Reload
	movq	5976(%rsp), %rsi        # 8-byte Reload
	vmovsd	5952(%rsp), %xmm0       # 8-byte Reload
	movq	6264(%rsp), %rdx        # 8-byte Reload
	movq	6240(%rsp), %rcx        # 8-byte Reload
	movq	5992(%rsp), %r8         # 8-byte Reload
	movq	6000(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	5952(%rsp), %xmm0       # 8-byte Reload
	callq	sqrt
.Ltmp335:
	movq	6256(%rsp), %rdi        # 8-byte Reload
	movq	5976(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 5832(%rsp)       # 8-byte Spill
	movq	6264(%rsp), %rdx        # 8-byte Reload
	movq	6248(%rsp), %rcx        # 8-byte Reload
	movq	5992(%rsp), %r8         # 8-byte Reload
	movq	6000(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	5896(%rsp), %rdi        # 8-byte Reload
	movq	5888(%rsp), %rsi        # 8-byte Reload
	movq	5912(%rsp), %rdx        # 8-byte Reload
	movq	5920(%rsp), %rcx        # 8-byte Reload
	movq	5944(%rsp), %r8         # 8-byte Reload
	movl	5940(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	5968(%rsp), %rdi        # 8-byte Reload
	movq	5976(%rsp), %rsi        # 8-byte Reload
	movq	5960(%rsp), %rdx        # 8-byte Reload
	movq	6264(%rsp), %rcx        # 8-byte Reload
	movq	5904(%rsp), %r8         # 8-byte Reload
	movq	5992(%rsp), %r9         # 8-byte Reload
	movq	6000(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	6264(%rsp), %rdi        # 8-byte Reload
	movq	5976(%rsp), %rsi        # 8-byte Reload
	vmovsd	5840(%rsp), %xmm0       # 8-byte Reload
	movq	6264(%rsp), %rdx        # 8-byte Reload
	movq	5984(%rsp), %rcx        # 8-byte Reload
	movq	5992(%rsp), %r8         # 8-byte Reload
	movq	6000(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	5840(%rsp), %xmm0       # 8-byte Reload
	callq	r8_sign
	movabsq	$0, %rax
	movabsq	$1, %rcx
	leaq	.L.str212, %rdx
	leaq	.L.str792, %rsi
	movabsq	$2, %rdi
	leaq	.L.str108, %r8
	movabsq	$3, %r9
	leaq	.L.str214, %r10
	movabsq	$830, %r11              # imm = 0x33E
	leaq	.L.str59144, %rbx
	leaq	.L.str137, %r14
	leaq	.L.str213, %r15
	movl	$0, %ebp
	movl	$1, %r13d
	movabsq	$19134, %r12            # imm = 0x4ABE
	movq	%rax, 5824(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 5816(%rsp)        # 8-byte Spill
	leaq	.L.str113, %rax
	movq	%rax, 5808(%rsp)        # 8-byte Spill
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
	movq	%rax, 5800(%rsp)        # 8-byte Spill
	leaq	.L.str1499, %rax
	movq	%rax, 5792(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 5784(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 5776(%rsp)        # 8-byte Spill
	leaq	.L.str210, %rax
	movq	%rax, 5768(%rsp)        # 8-byte Spill
	leaq	.L.str198, %rax
	movq	%rax, 5760(%rsp)        # 8-byte Spill
	movabsq	$828, %rax              # imm = 0x33C
	movq	%rax, 5752(%rsp)        # 8-byte Spill
	leaq	.L.str211, %rax
	movq	%rax, 5744(%rsp)        # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, 5736(%rsp)        # 8-byte Spill
	leaq	.L.str199, %rax
	movq	%rax, 5728(%rsp)        # 8-byte Spill
	leaq	.L.str203, %rax
	movq	%rax, 5720(%rsp)        # 8-byte Spill
	movabsq	$9, %rax
	movq	%rax, 5712(%rsp)        # 8-byte Spill
	leaq	.L.str209, %rax
	movq	%rax, 5704(%rsp)        # 8-byte Spill
	leaq	.L.str192, %rax
	movq	%rax, 5696(%rsp)        # 8-byte Spill
	leaq	.L.str208, %rax
	movq	%rax, 5688(%rsp)        # 8-byte Spill
	movabsq	$827, %rax              # imm = 0x33B
	movq	%rax, 5680(%rsp)        # 8-byte Spill
	movabsq	$11, %rax
	movq	%rax, 5672(%rsp)        # 8-byte Spill
	leaq	.L.str204, %rax
	movq	%rax, 5664(%rsp)        # 8-byte Spill
	movabsq	$13, %rax
	movq	%rax, 5656(%rsp)        # 8-byte Spill
	leaq	.L.str205, %rax
	movq	%rax, 5648(%rsp)        # 8-byte Spill
	leaq	.L.str206, %rax
	movq	%rax, 5640(%rsp)        # 8-byte Spill
	movabsq	$826, %rax              # imm = 0x33A
	movq	%rax, 5632(%rsp)        # 8-byte Spill
	leaq	.L.str207, %rax
	movq	%rax, 5624(%rsp)        # 8-byte Spill
	leaq	.L.str160, %rax
	movq	%rax, 5616(%rsp)        # 8-byte Spill
	leaq	.L.str107, %rax
	movq	%rax, 5608(%rsp)        # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 5600(%rsp)        # 8-byte Spill
	leaq	.L.str121, %rax
	vmovsd	.LCPI9_1, %xmm1
	movq	%rax, 5592(%rsp)        # 8-byte Spill
	movabsq	$825, %rax              # imm = 0x339
	movq	%rax, 5584(%rsp)        # 8-byte Spill
	leaq	.L.str200, %rax
	movq	%rax, 5576(%rsp)        # 8-byte Spill
	leaq	.L.str202, %rax
	movq	%rdi, 5568(%rsp)        # 8-byte Spill
	movq	%r12, %rdi
	movq	%rax, 5560(%rsp)        # 8-byte Spill
	movq	5776(%rsp), %rax        # 8-byte Reload
	movq	%rsi, 5552(%rsp)        # 8-byte Spill
	movq	%rax, %rsi
	vmovsd	%xmm0, 5544(%rsp)       # 8-byte Spill
	movq	%rdx, 5536(%rsp)        # 8-byte Spill
	movq	%rcx, %rdx
	movq	5560(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 5528(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	5824(%rsp), %rax        # 8-byte Reload
	movq	%r8, 5520(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	5552(%rsp), %rax        # 8-byte Reload
	movq	%r9, 5512(%rsp)         # 8-byte Spill
	movq	%rax, %r9
	movl	%r13d, 5508(%rsp)       # 4-byte Spill
	movq	%r15, 5496(%rsp)        # 8-byte Spill
	movl	%ebp, 5492(%rsp)        # 4-byte Spill
	movq	%r12, 5480(%rsp)        # 8-byte Spill
	vmovsd	%xmm1, 5472(%rsp)       # 8-byte Spill
	movq	%r14, 5464(%rsp)        # 8-byte Spill
	movq	%rbx, 5456(%rsp)        # 8-byte Spill
	movq	%r10, 5448(%rsp)        # 8-byte Spill
	movq	%r11, 5440(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	5584(%rsp), %rdi        # 8-byte Reload
	movq	5456(%rsp), %rsi        # 8-byte Reload
	movq	5464(%rsp), %rdx        # 8-byte Reload
	movq	5720(%rsp), %rcx        # 8-byte Reload
	movq	5656(%rsp), %r8         # 8-byte Reload
	movl	5492(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	5568(%rsp), %rdi        # 8-byte Reload
	movq	5776(%rsp), %rsi        # 8-byte Reload
	vmovsd	5544(%rsp), %xmm0       # 8-byte Reload
	movq	5528(%rsp), %rdx        # 8-byte Reload
	movq	5560(%rsp), %rcx        # 8-byte Reload
	movq	5824(%rsp), %r8         # 8-byte Reload
	movq	5552(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	5528(%rsp), %rdi        # 8-byte Reload
	movq	5776(%rsp), %rsi        # 8-byte Reload
	vmovsd	5832(%rsp), %xmm0       # 8-byte Reload
	movq	5528(%rsp), %rdx        # 8-byte Reload
	movq	5576(%rsp), %rcx        # 8-byte Reload
	movq	5824(%rsp), %r8         # 8-byte Reload
	movq	5552(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	5832(%rsp), %xmm0       # 8-byte Reload
	vmovsd	5544(%rsp), %xmm1       # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	5480(%rsp), %rdi        # 8-byte Reload
	movq	5776(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	5528(%rsp), %rdx        # 8-byte Reload
	movq	5720(%rsp), %rcx        # 8-byte Reload
	movq	5824(%rsp), %r8         # 8-byte Reload
	movq	5552(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 5432(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	5584(%rsp), %rdi        # 8-byte Reload
	movq	5456(%rsp), %rsi        # 8-byte Reload
	movq	5464(%rsp), %rdx        # 8-byte Reload
	movq	5664(%rsp), %rcx        # 8-byte Reload
	movq	5672(%rsp), %r8         # 8-byte Reload
	movl	5492(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	5568(%rsp), %rdi        # 8-byte Reload
	movq	5776(%rsp), %rsi        # 8-byte Reload
	vmovsd	5432(%rsp), %xmm0       # 8-byte Reload
	movq	5528(%rsp), %rdx        # 8-byte Reload
	movq	5720(%rsp), %rcx        # 8-byte Reload
	movq	5824(%rsp), %r8         # 8-byte Reload
	movq	5552(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	5528(%rsp), %rdi        # 8-byte Reload
	movq	5776(%rsp), %rsi        # 8-byte Reload
	vmovsd	5472(%rsp), %xmm0       # 8-byte Reload
	movq	5824(%rsp), %rdx        # 8-byte Reload
	movq	5792(%rsp), %rcx        # 8-byte Reload
	movq	5824(%rsp), %r8         # 8-byte Reload
	movq	5552(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	5432(%rsp), %xmm0       # 8-byte Reload
	vmovq	%xmm0, %rax
	movabsq	$-9223372036854775808, %rcx # imm = 0x8000000000000000
	xorq	%rcx, %rax
	vmovq	%rax, %xmm1
	movq	5480(%rsp), %rdi        # 8-byte Reload
	movq	5776(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm1, %xmm0
	movq	5528(%rsp), %rdx        # 8-byte Reload
	movq	5664(%rsp), %rcx        # 8-byte Reload
	movq	5824(%rsp), %r8         # 8-byte Reload
	movq	5552(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm1, 5424(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
.Ltmp336:
	#DEBUG_VALUE: tred1:g <- [RSP+5424]
	.loc	2 826 0                 # eispack.c:826:0
	movq	5632(%rsp), %rdi        # 8-byte Reload
	movq	5456(%rsp), %rsi        # 8-byte Reload
	movq	5464(%rsp), %rdx        # 8-byte Reload
	movq	5648(%rsp), %rcx        # 8-byte Reload
	movq	5656(%rsp), %r8         # 8-byte Reload
	movl	5492(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	5568(%rsp), %rdi        # 8-byte Reload
	movq	5776(%rsp), %rsi        # 8-byte Reload
	vmovsd	5424(%rsp), %xmm0       # 8-byte Reload
	movq	5528(%rsp), %rdx        # 8-byte Reload
	movq	5664(%rsp), %rcx        # 8-byte Reload
	movq	5824(%rsp), %r8         # 8-byte Reload
	movq	5552(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	5528(%rsp), %rdi        # 8-byte Reload
	movq	5776(%rsp), %rsi        # 8-byte Reload
	vmovsd	8488(%rsp), %xmm0       # 8-byte Reload
	movq	5528(%rsp), %rdx        # 8-byte Reload
	movq	5592(%rsp), %rcx        # 8-byte Reload
	movq	5824(%rsp), %r8         # 8-byte Reload
	movq	5552(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	8488(%rsp), %xmm0       # 8-byte Reload
	vmovsd	5424(%rsp), %xmm1       # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	5480(%rsp), %rdi        # 8-byte Reload
	movq	5776(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	5528(%rsp), %rdx        # 8-byte Reload
	movq	5648(%rsp), %rcx        # 8-byte Reload
	movq	5824(%rsp), %r8         # 8-byte Reload
	movq	5552(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 5416(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	5632(%rsp), %rdi        # 8-byte Reload
	movq	5456(%rsp), %rsi        # 8-byte Reload
	movq	5464(%rsp), %rdx        # 8-byte Reload
	movq	5640(%rsp), %rcx        # 8-byte Reload
	movq	5600(%rsp), %r8         # 8-byte Reload
	movl	5492(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	5568(%rsp), %rdi        # 8-byte Reload
	movq	5776(%rsp), %rsi        # 8-byte Reload
	movq	8888(%rsp), %rdx        # 8-byte Reload
	movq	5528(%rsp), %rcx        # 8-byte Reload
	movq	5608(%rsp), %r8         # 8-byte Reload
	movq	5824(%rsp), %r9         # 8-byte Reload
	movq	5552(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	5528(%rsp), %rdi        # 8-byte Reload
	movq	5776(%rsp), %rsi        # 8-byte Reload
	movq	10960(%rsp), %rdx       # 8-byte Reload
	movq	5528(%rsp), %rcx        # 8-byte Reload
	movq	5616(%rsp), %r8         # 8-byte Reload
	movq	5824(%rsp), %r9         # 8-byte Reload
	movq	5552(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	8888(%rsp), %rax        # 8-byte Reload
	shlq	$3, %rax
	movq	10960(%rsp), %rcx       # 8-byte Reload
	addq	%rax, %rcx
	movq	5480(%rsp), %rdi        # 8-byte Reload
	movq	5776(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	5528(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 5408(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	5640(%rsp), %r8         # 8-byte Reload
	movq	5824(%rsp), %r9         # 8-byte Reload
	movq	5552(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	5632(%rsp), %rdi        # 8-byte Reload
	movq	5456(%rsp), %rsi        # 8-byte Reload
	movq	5464(%rsp), %rdx        # 8-byte Reload
	movq	5624(%rsp), %rcx        # 8-byte Reload
	movq	5736(%rsp), %r8         # 8-byte Reload
	movl	5492(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	5568(%rsp), %rdi        # 8-byte Reload
	movq	5776(%rsp), %rsi        # 8-byte Reload
	movq	5408(%rsp), %rdx        # 8-byte Reload
	movq	5528(%rsp), %rcx        # 8-byte Reload
	movq	5640(%rsp), %r8         # 8-byte Reload
	movq	5824(%rsp), %r9         # 8-byte Reload
	movq	5552(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	5528(%rsp), %rdi        # 8-byte Reload
	movq	5776(%rsp), %rsi        # 8-byte Reload
	vmovsd	5416(%rsp), %xmm0       # 8-byte Reload
	movq	5528(%rsp), %rdx        # 8-byte Reload
	movq	5648(%rsp), %rcx        # 8-byte Reload
	movq	5824(%rsp), %r8         # 8-byte Reload
	movq	5552(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	10960(%rsp), %rax       # 8-byte Reload
	movq	8888(%rsp), %rcx        # 8-byte Reload
	vmovsd	5416(%rsp), %xmm0       # 8-byte Reload
	vmovsd	%xmm0, (%rax,%rcx,8)
	.loc	2 827 0                 # eispack.c:827:0
	movq	5680(%rsp), %rdi        # 8-byte Reload
	movq	5456(%rsp), %rsi        # 8-byte Reload
	movq	5464(%rsp), %rdx        # 8-byte Reload
	movq	5688(%rsp), %rcx        # 8-byte Reload
	movq	5656(%rsp), %r8         # 8-byte Reload
	movl	5492(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	5568(%rsp), %rdi        # 8-byte Reload
	movq	5776(%rsp), %rsi        # 8-byte Reload
	vmovsd	5424(%rsp), %xmm0       # 8-byte Reload
	movq	5528(%rsp), %rdx        # 8-byte Reload
	movq	5664(%rsp), %rcx        # 8-byte Reload
	movq	5824(%rsp), %r8         # 8-byte Reload
	movq	5552(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	5528(%rsp), %rdi        # 8-byte Reload
	movq	5776(%rsp), %rsi        # 8-byte Reload
	vmovsd	5840(%rsp), %xmm0       # 8-byte Reload
	movq	5528(%rsp), %rdx        # 8-byte Reload
	movq	5728(%rsp), %rcx        # 8-byte Reload
	movq	5824(%rsp), %r8         # 8-byte Reload
	movq	5552(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	5840(%rsp), %xmm0       # 8-byte Reload
	vmovsd	5424(%rsp), %xmm1       # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	5480(%rsp), %rdi        # 8-byte Reload
	movq	5776(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	5528(%rsp), %rdx        # 8-byte Reload
	movq	5688(%rsp), %rcx        # 8-byte Reload
	movq	5824(%rsp), %r8         # 8-byte Reload
	movq	5552(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 5400(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	5680(%rsp), %rdi        # 8-byte Reload
	movq	5456(%rsp), %rsi        # 8-byte Reload
	movq	5464(%rsp), %rdx        # 8-byte Reload
	movq	5704(%rsp), %rcx        # 8-byte Reload
	movq	5672(%rsp), %r8         # 8-byte Reload
	movl	5492(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	5568(%rsp), %rdi        # 8-byte Reload
	movq	5776(%rsp), %rsi        # 8-byte Reload
	vmovsd	5400(%rsp), %xmm0       # 8-byte Reload
	movq	5528(%rsp), %rdx        # 8-byte Reload
	movq	5688(%rsp), %rcx        # 8-byte Reload
	movq	5824(%rsp), %r8         # 8-byte Reload
	movq	5552(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	5528(%rsp), %rdi        # 8-byte Reload
	movq	5776(%rsp), %rsi        # 8-byte Reload
	vmovsd	5952(%rsp), %xmm0       # 8-byte Reload
	movq	5528(%rsp), %rdx        # 8-byte Reload
	movq	5696(%rsp), %rcx        # 8-byte Reload
	movq	5824(%rsp), %r8         # 8-byte Reload
	movq	5552(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	5952(%rsp), %xmm0       # 8-byte Reload
	vmovsd	5400(%rsp), %xmm1       # 8-byte Reload
	vsubsd	%xmm1, %xmm0, %xmm2
	movq	5480(%rsp), %rdi        # 8-byte Reload
	movq	5776(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	5528(%rsp), %rdx        # 8-byte Reload
	movq	5704(%rsp), %rcx        # 8-byte Reload
	movq	5824(%rsp), %r8         # 8-byte Reload
	movq	5552(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 5392(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
.Ltmp337:
	#DEBUG_VALUE: tred1:h <- [RSP+5392]
	.loc	2 828 0                 # eispack.c:828:0
	movq	5752(%rsp), %rdi        # 8-byte Reload
	movq	5456(%rsp), %rsi        # 8-byte Reload
	movq	5464(%rsp), %rdx        # 8-byte Reload
	movq	5768(%rsp), %rcx        # 8-byte Reload
	movq	5712(%rsp), %r8         # 8-byte Reload
	movl	5492(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	5568(%rsp), %rdi        # 8-byte Reload
	movq	5776(%rsp), %rsi        # 8-byte Reload
	vmovsd	5432(%rsp), %xmm0       # 8-byte Reload
	movq	5528(%rsp), %rdx        # 8-byte Reload
	movq	5720(%rsp), %rcx        # 8-byte Reload
	movq	5824(%rsp), %r8         # 8-byte Reload
	movq	5552(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	5528(%rsp), %rdi        # 8-byte Reload
	movq	5776(%rsp), %rsi        # 8-byte Reload
	vmovsd	5840(%rsp), %xmm0       # 8-byte Reload
	movq	5528(%rsp), %rdx        # 8-byte Reload
	movq	5728(%rsp), %rcx        # 8-byte Reload
	movq	5824(%rsp), %r8         # 8-byte Reload
	movq	5552(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	5840(%rsp), %xmm0       # 8-byte Reload
	vmovsd	5432(%rsp), %xmm1       # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
	movq	5480(%rsp), %rdi        # 8-byte Reload
	movq	5776(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	5528(%rsp), %rdx        # 8-byte Reload
	movq	5768(%rsp), %rcx        # 8-byte Reload
	movq	5824(%rsp), %r8         # 8-byte Reload
	movq	5552(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 5384(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	5752(%rsp), %rdi        # 8-byte Reload
	movq	5456(%rsp), %rsi        # 8-byte Reload
	movq	5464(%rsp), %rdx        # 8-byte Reload
	movq	5744(%rsp), %rcx        # 8-byte Reload
	movq	5736(%rsp), %r8         # 8-byte Reload
	movl	5492(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	5568(%rsp), %rdi        # 8-byte Reload
	movq	5776(%rsp), %rsi        # 8-byte Reload
	movq	5848(%rsp), %rdx        # 8-byte Reload
	movq	5528(%rsp), %rcx        # 8-byte Reload
	movq	5760(%rsp), %r8         # 8-byte Reload
	movq	5824(%rsp), %r9         # 8-byte Reload
	movq	5552(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	5528(%rsp), %rdi        # 8-byte Reload
	movq	5776(%rsp), %rsi        # 8-byte Reload
	vmovsd	5384(%rsp), %xmm0       # 8-byte Reload
	movq	5528(%rsp), %rdx        # 8-byte Reload
	movq	5768(%rsp), %rcx        # 8-byte Reload
	movq	5824(%rsp), %r8         # 8-byte Reload
	movq	5552(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	10968(%rsp), %rax       # 8-byte Reload
	movq	5856(%rsp), %rcx        # 8-byte Reload
	vmovsd	5384(%rsp), %xmm0       # 8-byte Reload
	vmovsd	%xmm0, (%rax,%rcx,8)
	.loc	2 830 0                 # eispack.c:830:0
.Ltmp338:
	movq	5440(%rsp), %rdi        # 8-byte Reload
	movq	5456(%rsp), %rsi        # 8-byte Reload
	movq	5464(%rsp), %rdx        # 8-byte Reload
	movq	5536(%rsp), %rcx        # 8-byte Reload
	movq	5784(%rsp), %r8         # 8-byte Reload
	movl	5492(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	5568(%rsp), %rdi        # 8-byte Reload
	movq	5816(%rsp), %rsi        # 8-byte Reload
	movq	5800(%rsp), %rdx        # 8-byte Reload
	movq	5824(%rsp), %rcx        # 8-byte Reload
	movq	5792(%rsp), %r8         # 8-byte Reload
	movq	5824(%rsp), %r9         # 8-byte Reload
	movq	5552(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	8880(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r13d
	movl	%r13d, %edx
	movq	5528(%rsp), %rdi        # 8-byte Reload
	movq	5816(%rsp), %rsi        # 8-byte Reload
	movq	5528(%rsp), %rcx        # 8-byte Reload
	movq	5808(%rsp), %r8         # 8-byte Reload
	movq	5824(%rsp), %r9         # 8-byte Reload
	movq	5552(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	8880(%rsp), %ebp        # 4-byte Reload
	cmpl	$-1, %ebp
	setg	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %r13d
	movl	%r13d, %edx
	movq	5480(%rsp), %rdi        # 8-byte Reload
	movq	5528(%rsp), %rsi        # 8-byte Reload
	movq	5528(%rsp), %rcx        # 8-byte Reload
	movq	5536(%rsp), %r8         # 8-byte Reload
	movq	5824(%rsp), %r9         # 8-byte Reload
	movq	5552(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 5383(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	5440(%rsp), %rdi        # 8-byte Reload
	movq	5456(%rsp), %rsi        # 8-byte Reload
	movq	5464(%rsp), %rdx        # 8-byte Reload
	movq	5496(%rsp), %rcx        # 8-byte Reload
	movq	5568(%rsp), %r8         # 8-byte Reload
	movl	5492(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	5512(%rsp), %rdi        # 8-byte Reload
	movq	5824(%rsp), %rsi        # 8-byte Reload
	movq	5824(%rsp), %rdx        # 8-byte Reload
	movq	5528(%rsp), %rcx        # 8-byte Reload
	movq	5448(%rsp), %r8         # 8-byte Reload
	movq	5824(%rsp), %r9         # 8-byte Reload
	movq	5552(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	5568(%rsp), %rdi        # 8-byte Reload
	movq	5824(%rsp), %rsi        # 8-byte Reload
	movq	5824(%rsp), %rdx        # 8-byte Reload
	movq	5528(%rsp), %rcx        # 8-byte Reload
	movq	5520(%rsp), %r8         # 8-byte Reload
	movq	5824(%rsp), %r9         # 8-byte Reload
	movq	5552(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	5383(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	5528(%rsp), %rdi        # 8-byte Reload
	movq	5528(%rsp), %rsi        # 8-byte Reload
	movq	5528(%rsp), %rcx        # 8-byte Reload
	movq	5536(%rsp), %r8         # 8-byte Reload
	movq	5824(%rsp), %r9         # 8-byte Reload
	movq	5552(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	5383(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	movq	5824(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 5368(%rsp)        # 8-byte Spill
	jne	.LBB9_20
	jmp	.LBB9_15
.Ltmp339:
.LBB9_20:                               # %.lr.ph13
                                        #   Parent Loop BB9_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	5368(%rsp), %rax        # 8-byte Reload
	movabsq	$1, %rcx
	leaq	.L.str220, %rdx
	movabsq	$0, %rsi
	leaq	.L.str792, %rdi
	movabsq	$2, %r8
	leaq	.L.str214, %r9
	movabsq	$3, %r10
	leaq	.L.str222, %r11
	movabsq	$835, %rbx              # imm = 0x343
	leaq	.L.str59144, %r14
	leaq	.L.str221, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 5360(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 5352(%rsp)        # 8-byte Spill
	leaq	.L.str219, %rax
	movq	%rax, 5344(%rsp)        # 8-byte Spill
	leaq	.L.str110, %rax
	movq	%rax, 5336(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 5328(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 5320(%rsp)        # 8-byte Spill
	leaq	.L.str216, %rax
	movq	%rax, 5312(%rsp)        # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, 5304(%rsp)        # 8-byte Spill
	leaq	.L.str215, %rax
	movq	%rax, 5296(%rsp)        # 8-byte Spill
	leaq	.L.str1499, %rax
	movq	%rax, 5288(%rsp)        # 8-byte Spill
	movabsq	$8, %rax
	vxorps	%xmm0, %xmm0, %xmm0
	movq	%rax, 5280(%rsp)        # 8-byte Spill
	leaq	.L.str217, %rax
	movq	%rax, 5272(%rsp)        # 8-byte Spill
	movabsq	$837, %rax              # imm = 0x345
	movq	%rax, 5264(%rsp)        # 8-byte Spill
	leaq	.L.str218, %rax
	movq	%rax, 5256(%rsp)        # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, 5248(%rsp)        # 8-byte Spill
	leaq	.L.str160, %rax
	movq	%rax, 5240(%rsp)        # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 5232(%rsp)        # 8-byte Spill
	leaq	.L.str137, %rax
	movq	%rax, 5224(%rsp)        # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 5216(%rsp)        # 8-byte Spill
	movabsq	$48, %rax
	.loc	2 837 0                 # eispack.c:837:0
.Ltmp340:
	movq	%rax, 5208(%rsp)        # 8-byte Spill
	movq	5216(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 5200(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 5192(%rsp)        # 8-byte Spill
	movq	%r14, %rsi
	movq	%rdx, 5184(%rsp)        # 8-byte Spill
	movq	%r9, %rdx
	movq	5296(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 5176(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	5208(%rsp), %rax        # 8-byte Reload
	movq	%r8, 5168(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 5160(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movl	%ebp, 5156(%rsp)        # 4-byte Spill
	movl	%r12d, 5152(%rsp)       # 4-byte Spill
	movq	%r13, 5144(%rsp)        # 8-byte Spill
	vmovsd	%xmm0, 5136(%rsp)       # 8-byte Spill
	movq	%r15, 5128(%rsp)        # 8-byte Spill
	movq	%r14, 5120(%rsp)        # 8-byte Spill
	movq	%r10, 5112(%rsp)        # 8-byte Spill
	movq	%r11, 5104(%rsp)        # 8-byte Spill
	movq	%rbx, 5096(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	5168(%rsp), %rdi        # 8-byte Reload
	movq	5320(%rsp), %rsi        # 8-byte Reload
	movq	5192(%rsp), %rdx        # 8-byte Reload
	movq	5192(%rsp), %rcx        # 8-byte Reload
	movq	5288(%rsp), %r8         # 8-byte Reload
	movq	5176(%rsp), %r9         # 8-byte Reload
	movq	5224(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	5176(%rsp), %rdi        # 8-byte Reload
	movq	5320(%rsp), %rsi        # 8-byte Reload
	movq	5192(%rsp), %rdx        # 8-byte Reload
	movq	5176(%rsp), %rcx        # 8-byte Reload
	movq	5312(%rsp), %r8         # 8-byte Reload
	movq	5176(%rsp), %r9         # 8-byte Reload
	movq	5160(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	5144(%rsp), %rdi        # 8-byte Reload
	movq	5320(%rsp), %rsi        # 8-byte Reload
	movq	5360(%rsp), %rdx        # 8-byte Reload
	movq	5176(%rsp), %rcx        # 8-byte Reload
	movq	5296(%rsp), %r8         # 8-byte Reload
	movq	5192(%rsp), %r9         # 8-byte Reload
	movq	5160(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	5264(%rsp), %rdi        # 8-byte Reload
	movq	5120(%rsp), %rsi        # 8-byte Reload
	movq	5160(%rsp), %rdx        # 8-byte Reload
	movq	5272(%rsp), %rcx        # 8-byte Reload
	movq	5232(%rsp), %r8         # 8-byte Reload
	movl	5156(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	5168(%rsp), %rdi        # 8-byte Reload
	movq	5320(%rsp), %rsi        # 8-byte Reload
	movq	5360(%rsp), %rdx        # 8-byte Reload
	movq	5176(%rsp), %rcx        # 8-byte Reload
	movq	5296(%rsp), %r8         # 8-byte Reload
	movq	5192(%rsp), %r9         # 8-byte Reload
	movq	5200(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	5176(%rsp), %rdi        # 8-byte Reload
	movq	5320(%rsp), %rsi        # 8-byte Reload
	movq	10960(%rsp), %rdx       # 8-byte Reload
	movq	5176(%rsp), %rcx        # 8-byte Reload
	movq	5240(%rsp), %r8         # 8-byte Reload
	movq	5192(%rsp), %r9         # 8-byte Reload
	movq	5200(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	5360(%rsp), %rax        # 8-byte Reload
	shlq	$3, %rax
	movq	10960(%rsp), %rcx       # 8-byte Reload
	addq	%rax, %rcx
	movq	5144(%rsp), %rdi        # 8-byte Reload
	movq	5320(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	5176(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 5088(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	5272(%rsp), %r8         # 8-byte Reload
	movq	5192(%rsp), %r9         # 8-byte Reload
	movq	5200(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	5264(%rsp), %rdi        # 8-byte Reload
	movq	5120(%rsp), %rsi        # 8-byte Reload
	movq	5160(%rsp), %rdx        # 8-byte Reload
	movq	5256(%rsp), %rcx        # 8-byte Reload
	movq	5248(%rsp), %r8         # 8-byte Reload
	movl	5156(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	5168(%rsp), %rdi        # 8-byte Reload
	movq	5320(%rsp), %rsi        # 8-byte Reload
	movq	5088(%rsp), %rdx        # 8-byte Reload
	movq	5176(%rsp), %rcx        # 8-byte Reload
	movq	5272(%rsp), %r8         # 8-byte Reload
	movq	5192(%rsp), %r9         # 8-byte Reload
	movq	5200(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	5176(%rsp), %rdi        # 8-byte Reload
	movq	5320(%rsp), %rsi        # 8-byte Reload
	vmovsd	5136(%rsp), %xmm0       # 8-byte Reload
	movq	5192(%rsp), %rdx        # 8-byte Reload
	movq	5288(%rsp), %rcx        # 8-byte Reload
	movq	5192(%rsp), %r8         # 8-byte Reload
	movq	5200(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	10960(%rsp), %rax       # 8-byte Reload
	movq	5360(%rsp), %rcx        # 8-byte Reload
	vmovsd	5136(%rsp), %xmm0       # 8-byte Reload
	vmovsd	%xmm0, (%rax,%rcx,8)
.Ltmp341:
	.loc	2 835 0                 # eispack.c:835:0
	movq	5096(%rsp), %rdi        # 8-byte Reload
	movq	5120(%rsp), %rsi        # 8-byte Reload
	movq	5160(%rsp), %rdx        # 8-byte Reload
	movq	5312(%rsp), %rcx        # 8-byte Reload
	movq	5280(%rsp), %r8         # 8-byte Reload
	movl	5156(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	5168(%rsp), %rdi        # 8-byte Reload
	movq	5320(%rsp), %rsi        # 8-byte Reload
	movq	5176(%rsp), %rdx        # 8-byte Reload
	movq	5192(%rsp), %rcx        # 8-byte Reload
	movq	5288(%rsp), %r8         # 8-byte Reload
	movq	5192(%rsp), %r9         # 8-byte Reload
	movq	5200(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	5176(%rsp), %rdi        # 8-byte Reload
	movq	5320(%rsp), %rsi        # 8-byte Reload
	movq	5360(%rsp), %rdx        # 8-byte Reload
	movq	5176(%rsp), %rcx        # 8-byte Reload
	movq	5296(%rsp), %r8         # 8-byte Reload
	movq	5192(%rsp), %r9         # 8-byte Reload
	movq	5200(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	5360(%rsp), %rax        # 8-byte Reload
	addq	$1, %rax
	movq	5144(%rsp), %rdi        # 8-byte Reload
	movq	5320(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	5176(%rsp), %rcx        # 8-byte Reload
	movq	5312(%rsp), %r8         # 8-byte Reload
	movq	5192(%rsp), %r9         # 8-byte Reload
	movq	5200(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 5080(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	5096(%rsp), %rdi        # 8-byte Reload
	movq	5120(%rsp), %rsi        # 8-byte Reload
	movq	5160(%rsp), %rdx        # 8-byte Reload
	movq	5344(%rsp), %rcx        # 8-byte Reload
	movq	5304(%rsp), %r8         # 8-byte Reload
	movl	5156(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	5176(%rsp), %rdi        # 8-byte Reload
	movq	5320(%rsp), %rsi        # 8-byte Reload
	movq	5080(%rsp), %rdx        # 8-byte Reload
	movq	5176(%rsp), %rcx        # 8-byte Reload
	movq	5312(%rsp), %r8         # 8-byte Reload
	movq	5192(%rsp), %r9         # 8-byte Reload
	movq	5200(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	5080(%rsp), %rax        # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	5144(%rsp), %rdi        # 8-byte Reload
	movq	5352(%rsp), %rsi        # 8-byte Reload
	movq	5176(%rsp), %rcx        # 8-byte Reload
	movq	5344(%rsp), %r8         # 8-byte Reload
	movq	5192(%rsp), %r9         # 8-byte Reload
	movq	5200(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 5076(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	5096(%rsp), %rdi        # 8-byte Reload
	movq	5120(%rsp), %rsi        # 8-byte Reload
	movq	5160(%rsp), %rdx        # 8-byte Reload
	movq	5184(%rsp), %rcx        # 8-byte Reload
	movq	5328(%rsp), %r8         # 8-byte Reload
	movl	5156(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	8900(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	5168(%rsp), %rdi        # 8-byte Reload
	movq	5352(%rsp), %rsi        # 8-byte Reload
	movq	5176(%rsp), %rcx        # 8-byte Reload
	movq	5336(%rsp), %r8         # 8-byte Reload
	movq	5192(%rsp), %r9         # 8-byte Reload
	movq	5200(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	5076(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	5176(%rsp), %rdi        # 8-byte Reload
	movq	5352(%rsp), %rsi        # 8-byte Reload
	movq	5176(%rsp), %rcx        # 8-byte Reload
	movq	5344(%rsp), %r8         # 8-byte Reload
	movq	5192(%rsp), %r9         # 8-byte Reload
	movq	5200(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	5076(%rsp), %ebp        # 4-byte Reload
	movl	8900(%rsp), %r12d       # 4-byte Reload
	cmpl	%r12d, %ebp
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	5144(%rsp), %rdi        # 8-byte Reload
	movq	5176(%rsp), %rsi        # 8-byte Reload
	movq	5176(%rsp), %rcx        # 8-byte Reload
	movq	5184(%rsp), %r8         # 8-byte Reload
	movq	5192(%rsp), %r9         # 8-byte Reload
	movq	5200(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 5075(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	5096(%rsp), %rdi        # 8-byte Reload
	movq	5120(%rsp), %rsi        # 8-byte Reload
	movq	5160(%rsp), %rdx        # 8-byte Reload
	movq	5128(%rsp), %rcx        # 8-byte Reload
	movq	5168(%rsp), %r8         # 8-byte Reload
	movl	5156(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	5112(%rsp), %rdi        # 8-byte Reload
	movq	5192(%rsp), %rsi        # 8-byte Reload
	movq	5192(%rsp), %rdx        # 8-byte Reload
	movq	5176(%rsp), %rcx        # 8-byte Reload
	movq	5104(%rsp), %r8         # 8-byte Reload
	movq	5192(%rsp), %r9         # 8-byte Reload
	movq	5200(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	5168(%rsp), %rdi        # 8-byte Reload
	movq	5192(%rsp), %rsi        # 8-byte Reload
	movq	5192(%rsp), %rdx        # 8-byte Reload
	movq	5176(%rsp), %rcx        # 8-byte Reload
	movq	5160(%rsp), %r8         # 8-byte Reload
	movq	5192(%rsp), %r9         # 8-byte Reload
	movq	5200(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	5075(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	5176(%rsp), %rdi        # 8-byte Reload
	movq	5176(%rsp), %rsi        # 8-byte Reload
	movq	5176(%rsp), %rcx        # 8-byte Reload
	movq	5184(%rsp), %r8         # 8-byte Reload
	movq	5192(%rsp), %r9         # 8-byte Reload
	movq	5200(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	5075(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	movq	5080(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 5368(%rsp)        # 8-byte Spill
	jne	.LBB9_21
	jmp	.LBB9_20
.Ltmp342:
.LBB9_21:                               # %.loopexit11
                                        #   in Loop: Header=BB9_8 Depth=1
	movabsq	$0, %rax
	movabsq	$1, %rcx
	leaq	.L.str223, %rdx
	leaq	.L.str792, %rsi
	movabsq	$2, %rdi
	leaq	.L.str225, %r8
	movabsq	$3, %r9
	leaq	.L.str108, %r10
	movabsq	$840, %r11              # imm = 0x348
	leaq	.L.str59144, %rbx
	leaq	.L.str222, %r14
	leaq	.L.str224, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 5064(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 5056(%rsp)        # 8-byte Spill
	leaq	.L.str113, %rax
	movq	%rax, 5048(%rsp)        # 8-byte Spill
	leaq	.L.str1499, %rax
	movq	%rax, 5040(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	.loc	2 840 0                 # eispack.c:840:0
.Ltmp343:
	movq	%rdi, 5032(%rsp)        # 8-byte Spill
	movq	%r11, %rdi
	movq	%rsi, 5024(%rsp)        # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, 5016(%rsp)        # 8-byte Spill
	movq	%r14, %rdx
	movq	%rax, 5008(%rsp)        # 8-byte Spill
	movq	5016(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 5000(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	5008(%rsp), %rax        # 8-byte Reload
	movq	%r8, 4992(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 4984(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r15, 4976(%rsp)        # 8-byte Spill
	movl	%ebp, 4972(%rsp)        # 4-byte Spill
	movl	%r12d, 4968(%rsp)       # 4-byte Spill
	movq	%r13, 4960(%rsp)        # 8-byte Spill
	movq	%r14, 4952(%rsp)        # 8-byte Spill
	movq	%rbx, 4944(%rsp)        # 8-byte Spill
	movq	%r10, 4936(%rsp)        # 8-byte Spill
	movq	%r11, 4928(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	5032(%rsp), %rdi        # 8-byte Reload
	movq	5056(%rsp), %rsi        # 8-byte Reload
	movq	5064(%rsp), %rdx        # 8-byte Reload
	movq	5064(%rsp), %rcx        # 8-byte Reload
	movq	5040(%rsp), %r8         # 8-byte Reload
	movq	5064(%rsp), %r9         # 8-byte Reload
	movq	5024(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	8880(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	5000(%rsp), %rdi        # 8-byte Reload
	movq	5056(%rsp), %rsi        # 8-byte Reload
	movq	5000(%rsp), %rcx        # 8-byte Reload
	movq	5048(%rsp), %r8         # 8-byte Reload
	movq	5064(%rsp), %r9         # 8-byte Reload
	movq	5024(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	8880(%rsp), %ebp        # 4-byte Reload
	cmpl	$0, %ebp
	setl	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %r12d
	movl	%r12d, %edx
	movq	4960(%rsp), %rdi        # 8-byte Reload
	movq	5000(%rsp), %rsi        # 8-byte Reload
	movq	5000(%rsp), %rcx        # 8-byte Reload
	movq	5016(%rsp), %r8         # 8-byte Reload
	movq	5064(%rsp), %r9         # 8-byte Reload
	movq	5024(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 4927(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	4928(%rsp), %rdi        # 8-byte Reload
	movq	4944(%rsp), %rsi        # 8-byte Reload
	movq	4952(%rsp), %rdx        # 8-byte Reload
	movq	4976(%rsp), %rcx        # 8-byte Reload
	movq	5032(%rsp), %r8         # 8-byte Reload
	movl	4972(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	4984(%rsp), %rdi        # 8-byte Reload
	movq	5064(%rsp), %rsi        # 8-byte Reload
	movq	5064(%rsp), %rdx        # 8-byte Reload
	movq	5000(%rsp), %rcx        # 8-byte Reload
	movq	4936(%rsp), %r8         # 8-byte Reload
	movq	5064(%rsp), %r9         # 8-byte Reload
	movq	5024(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	5032(%rsp), %rdi        # 8-byte Reload
	movq	5064(%rsp), %rsi        # 8-byte Reload
	movq	5064(%rsp), %rdx        # 8-byte Reload
	movq	5000(%rsp), %rcx        # 8-byte Reload
	movq	4992(%rsp), %r8         # 8-byte Reload
	movq	5064(%rsp), %r9         # 8-byte Reload
	movq	5024(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	4927(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	5000(%rsp), %rdi        # 8-byte Reload
	movq	5000(%rsp), %rsi        # 8-byte Reload
	movq	5000(%rsp), %rcx        # 8-byte Reload
	movq	5016(%rsp), %r8         # 8-byte Reload
	movq	5064(%rsp), %r9         # 8-byte Reload
	movq	5024(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	4927(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	movq	5064(%rsp), %rcx        # 8-byte Reload
	movq	5000(%rsp), %rdx        # 8-byte Reload
	movq	%rcx, 4912(%rsp)        # 8-byte Spill
	movq	%rdx, 4904(%rsp)        # 8-byte Spill
	jne	.LBB9_15
.LBB9_22:                               # %.lr.ph22
                                        #   Parent Loop BB9_8 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB9_24 Depth 3
	movq	4904(%rsp), %rax        # 8-byte Reload
	movq	4912(%rsp), %rcx        # 8-byte Reload
	movabsq	$1, %rdx
	leaq	.L.str245, %rsi
	movabsq	$0, %rdi
	leaq	.L.str792, %r8
	movabsq	$2, %r9
	leaq	.L.str228, %r10
	movabsq	$3, %r11
	leaq	.L.str247, %rbx
	movabsq	$845, %r14              # imm = 0x34D
	leaq	.L.str59144, %r15
	leaq	.L.str225, %r12
	leaq	.L.str246, %r13
	movl	$0, %ebp
	movq	%rsi, 4896(%rsp)        # 8-byte Spill
	movl	$1, %esi
	movq	%rax, 4888(%rsp)        # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 4880(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 4872(%rsp)        # 8-byte Spill
	leaq	.L.str244, %rax
	movq	%rax, 4864(%rsp)        # 8-byte Spill
	leaq	.L.str113, %rax
	movq	%rax, 4856(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 4848(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 4840(%rsp)        # 8-byte Spill
	leaq	.L.str226, %rax
	movq	%rax, 4832(%rsp)        # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, 4824(%rsp)        # 8-byte Spill
	leaq	.L.str227, %rax
	movq	%rax, 4816(%rsp)        # 8-byte Spill
	leaq	.L.str1499, %rax
	movq	%rax, 4808(%rsp)        # 8-byte Spill
	movabsq	$840, %rax              # imm = 0x348
	movq	%rax, 4800(%rsp)        # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, 4792(%rsp)        # 8-byte Spill
	leaq	.L.str243, %rax
	movq	%rax, 4784(%rsp)        # 8-byte Spill
	leaq	.L.str234, %rax
	movq	%rax, 4776(%rsp)        # 8-byte Spill
	leaq	.L.str242, %rax
	movq	%rax, 4768(%rsp)        # 8-byte Spill
	movabsq	$843, %rax              # imm = 0x34B
	movq	%rax, 4760(%rsp)        # 8-byte Spill
	movabsq	$9, %rax
	movq	%rax, 4752(%rsp)        # 8-byte Spill
	leaq	.L.str232, %rax
	movq	%rax, 4744(%rsp)        # 8-byte Spill
	leaq	.L.str241, %rax
	movq	%rax, 4736(%rsp)        # 8-byte Spill
	movabsq	$13, %rax
	movq	%rax, 4728(%rsp)        # 8-byte Spill
	leaq	.L.str240, %rax
	movq	%rax, 4720(%rsp)        # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, 4712(%rsp)        # 8-byte Spill
	leaq	.L.str893, %rax
	movq	%rax, 4704(%rsp)        # 8-byte Spill
	leaq	.L.str239, %rax
	movq	%rax, 4696(%rsp)        # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 4688(%rsp)        # 8-byte Spill
	leaq	.L.str238, %rax
	movq	%rax, 4680(%rsp)        # 8-byte Spill
	movabsq	$35, %rax
	movq	%rax, 4672(%rsp)        # 8-byte Spill
	leaq	.L.str236, %rax
	movq	%rax, 4664(%rsp)        # 8-byte Spill
	leaq	.L.str237, %rax
	movq	%rax, 4656(%rsp)        # 8-byte Spill
	leaq	.L.str235, %rax
	movq	%rax, 4648(%rsp)        # 8-byte Spill
	leaq	.L.str51136, %rax
	movq	%rax, 4640(%rsp)        # 8-byte Spill
	movabsq	$12, %rax
	movq	%rax, 4632(%rsp)        # 8-byte Spill
	leaq	.L.str233, %rax
	movq	%rax, 4624(%rsp)        # 8-byte Spill
	leaq	.L.str160, %rax
	movq	%rax, 4616(%rsp)        # 8-byte Spill
	leaq	.L.str231, %rax
	movq	%rax, 4608(%rsp)        # 8-byte Spill
	movabsq	$842, %rax              # imm = 0x34A
	movq	%rax, 4600(%rsp)        # 8-byte Spill
	leaq	.L.str85170, %rax
	movq	%rax, 4592(%rsp)        # 8-byte Spill
	leaq	.L.str229, %rax
	movq	%rax, 4584(%rsp)        # 8-byte Spill
	leaq	.L.str230, %rax
	movq	%rax, 4576(%rsp)        # 8-byte Spill
	leaq	.L.str222, %rax
	movq	%rax, 4568(%rsp)        # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 4560(%rsp)        # 8-byte Spill
	movabsq	$48, %rax
	.loc	2 842 0                 # eispack.c:842:0
.Ltmp344:
	movq	%rax, 4552(%rsp)        # 8-byte Spill
	movq	4560(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 4544(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movl	%esi, 4540(%rsp)        # 4-byte Spill
	movq	%r15, %rsi
	movq	%rdx, 4528(%rsp)        # 8-byte Spill
	movq	%r12, %rdx
	movq	4832(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 4520(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	4552(%rsp), %rax        # 8-byte Reload
	movq	%r8, 4512(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 4504(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r15, 4496(%rsp)        # 8-byte Spill
	movq	%r12, 4488(%rsp)        # 8-byte Spill
	movq	%r13, 4480(%rsp)        # 8-byte Spill
	movl	%ebp, 4476(%rsp)        # 4-byte Spill
	movq	%r14, 4464(%rsp)        # 8-byte Spill
	movq	%rbx, 4456(%rsp)        # 8-byte Spill
	movq	%r10, 4448(%rsp)        # 8-byte Spill
	movq	%r11, 4440(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	4504(%rsp), %rdi        # 8-byte Reload
	movq	4840(%rsp), %rsi        # 8-byte Reload
	movq	4544(%rsp), %rdx        # 8-byte Reload
	movq	4544(%rsp), %rcx        # 8-byte Reload
	movq	4808(%rsp), %r8         # 8-byte Reload
	movq	4528(%rsp), %r9         # 8-byte Reload
	movq	4568(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	4528(%rsp), %rdi        # 8-byte Reload
	movq	4840(%rsp), %rsi        # 8-byte Reload
	movq	4544(%rsp), %rdx        # 8-byte Reload
	movq	4528(%rsp), %rcx        # 8-byte Reload
	movq	4816(%rsp), %r8         # 8-byte Reload
	movq	4528(%rsp), %r9         # 8-byte Reload
	movq	4448(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	4880(%rsp), %rdi        # 8-byte Reload
	movq	4840(%rsp), %rsi        # 8-byte Reload
	movq	4520(%rsp), %rdx        # 8-byte Reload
	movq	4528(%rsp), %rcx        # 8-byte Reload
	movq	4832(%rsp), %r8         # 8-byte Reload
	movq	4544(%rsp), %r9         # 8-byte Reload
	movq	4448(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	4560(%rsp), %rdi        # 8-byte Reload
	movq	4496(%rsp), %rsi        # 8-byte Reload
	movq	4488(%rsp), %rdx        # 8-byte Reload
	movq	4584(%rsp), %rcx        # 8-byte Reload
	movq	4552(%rsp), %r8         # 8-byte Reload
	movl	4476(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	4504(%rsp), %rdi        # 8-byte Reload
	movq	4840(%rsp), %rsi        # 8-byte Reload
	movq	4528(%rsp), %rdx        # 8-byte Reload
	movq	4544(%rsp), %rcx        # 8-byte Reload
	movq	4808(%rsp), %r8         # 8-byte Reload
	movq	4528(%rsp), %r9         # 8-byte Reload
	movq	4568(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	4528(%rsp), %rdi        # 8-byte Reload
	movq	4840(%rsp), %rsi        # 8-byte Reload
	movq	4544(%rsp), %rdx        # 8-byte Reload
	movq	4528(%rsp), %rcx        # 8-byte Reload
	movq	4576(%rsp), %r8         # 8-byte Reload
	movq	4528(%rsp), %r9         # 8-byte Reload
	movq	4448(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	4880(%rsp), %rdi        # 8-byte Reload
	movq	4840(%rsp), %rsi        # 8-byte Reload
	movq	4888(%rsp), %rdx        # 8-byte Reload
	movq	4528(%rsp), %rcx        # 8-byte Reload
	movq	4584(%rsp), %r8         # 8-byte Reload
	movq	4544(%rsp), %r9         # 8-byte Reload
	movq	4448(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	4600(%rsp), %rdi        # 8-byte Reload
	movq	4496(%rsp), %rsi        # 8-byte Reload
	movq	4488(%rsp), %rdx        # 8-byte Reload
	movq	4608(%rsp), %rcx        # 8-byte Reload
	movq	4688(%rsp), %r8         # 8-byte Reload
	movl	4476(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	4504(%rsp), %rdi        # 8-byte Reload
	movq	4840(%rsp), %rsi        # 8-byte Reload
	movq	4520(%rsp), %rdx        # 8-byte Reload
	movq	4528(%rsp), %rcx        # 8-byte Reload
	movq	4832(%rsp), %r8         # 8-byte Reload
	movq	4544(%rsp), %r9         # 8-byte Reload
	movq	4512(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	4528(%rsp), %rdi        # 8-byte Reload
	movq	4840(%rsp), %rsi        # 8-byte Reload
	movq	10968(%rsp), %rdx       # 8-byte Reload
	movq	4528(%rsp), %rcx        # 8-byte Reload
	movq	4592(%rsp), %r8         # 8-byte Reload
	movq	4544(%rsp), %r9         # 8-byte Reload
	movq	4512(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	4520(%rsp), %rax        # 8-byte Reload
	shlq	$3, %rax
	movq	10968(%rsp), %rcx       # 8-byte Reload
	addq	%rax, %rcx
	movq	4880(%rsp), %rdi        # 8-byte Reload
	movq	4840(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	4528(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 4432(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	4608(%rsp), %r8         # 8-byte Reload
	movq	4544(%rsp), %r9         # 8-byte Reload
	movq	4512(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	4600(%rsp), %rdi        # 8-byte Reload
	movq	4496(%rsp), %rsi        # 8-byte Reload
	movq	4488(%rsp), %rdx        # 8-byte Reload
	movq	4744(%rsp), %rcx        # 8-byte Reload
	movq	4712(%rsp), %r8         # 8-byte Reload
	movl	4476(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	4528(%rsp), %rdi        # 8-byte Reload
	movq	4840(%rsp), %rsi        # 8-byte Reload
	movq	4432(%rsp), %rdx        # 8-byte Reload
	movq	4528(%rsp), %rcx        # 8-byte Reload
	movq	4608(%rsp), %r8         # 8-byte Reload
	movq	4544(%rsp), %r9         # 8-byte Reload
	movq	4512(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	10968(%rsp), %rax       # 8-byte Reload
	movq	4520(%rsp), %rcx        # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
	movq	4880(%rsp), %rdi        # 8-byte Reload
	movq	4840(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 4424(%rsp)       # 8-byte Spill
	movq	4528(%rsp), %rdx        # 8-byte Reload
	movq	4744(%rsp), %rcx        # 8-byte Reload
	movq	4544(%rsp), %r8         # 8-byte Reload
	movq	4512(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
.Ltmp345:
	#DEBUG_VALUE: tred1:f <- [RSP+4424]
	.loc	2 843 0                 # eispack.c:843:0
	movq	4760(%rsp), %rdi        # 8-byte Reload
	movq	4496(%rsp), %rsi        # 8-byte Reload
	movq	4488(%rsp), %rdx        # 8-byte Reload
	movq	4624(%rsp), %rcx        # 8-byte Reload
	movq	4688(%rsp), %r8         # 8-byte Reload
	movl	4476(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	4504(%rsp), %rdi        # 8-byte Reload
	movq	4840(%rsp), %rsi        # 8-byte Reload
	movq	4520(%rsp), %rdx        # 8-byte Reload
	movq	4528(%rsp), %rcx        # 8-byte Reload
	movq	4832(%rsp), %r8         # 8-byte Reload
	movq	4544(%rsp), %r9         # 8-byte Reload
	movq	4512(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	4528(%rsp), %rdi        # 8-byte Reload
	movq	4840(%rsp), %rsi        # 8-byte Reload
	movq	10960(%rsp), %rdx       # 8-byte Reload
	movq	4528(%rsp), %rcx        # 8-byte Reload
	movq	4616(%rsp), %r8         # 8-byte Reload
	movq	4544(%rsp), %r9         # 8-byte Reload
	movq	4512(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	4520(%rsp), %rax        # 8-byte Reload
	shlq	$3, %rax
	movq	10960(%rsp), %rcx       # 8-byte Reload
	addq	%rax, %rcx
	movq	4880(%rsp), %rdi        # 8-byte Reload
	movq	4840(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	4528(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 4416(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	4624(%rsp), %r8         # 8-byte Reload
	movq	4544(%rsp), %r9         # 8-byte Reload
	movq	4512(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	4760(%rsp), %rdi        # 8-byte Reload
	movq	4496(%rsp), %rsi        # 8-byte Reload
	movq	4488(%rsp), %rdx        # 8-byte Reload
	movq	4776(%rsp), %rcx        # 8-byte Reload
	movq	4712(%rsp), %r8         # 8-byte Reload
	movl	4476(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	4528(%rsp), %rdi        # 8-byte Reload
	movq	4840(%rsp), %rsi        # 8-byte Reload
	movq	4416(%rsp), %rdx        # 8-byte Reload
	movq	4528(%rsp), %rcx        # 8-byte Reload
	movq	4624(%rsp), %r8         # 8-byte Reload
	movq	4544(%rsp), %r9         # 8-byte Reload
	movq	4512(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	10960(%rsp), %rax       # 8-byte Reload
	movq	4520(%rsp), %rcx        # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
	movq	4880(%rsp), %rdi        # 8-byte Reload
	movq	4840(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 4408(%rsp)       # 8-byte Spill
	movq	4528(%rsp), %rdx        # 8-byte Reload
	movq	4776(%rsp), %rcx        # 8-byte Reload
	movq	4544(%rsp), %r8         # 8-byte Reload
	movq	4512(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	4760(%rsp), %rdi        # 8-byte Reload
	movq	4496(%rsp), %rsi        # 8-byte Reload
	movq	4488(%rsp), %rdx        # 8-byte Reload
	movq	4648(%rsp), %rcx        # 8-byte Reload
	movq	4824(%rsp), %r8         # 8-byte Reload
	movl	4476(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	4528(%rsp), %rdi        # 8-byte Reload
	movq	4840(%rsp), %rsi        # 8-byte Reload
	movq	4520(%rsp), %rdx        # 8-byte Reload
	movq	4528(%rsp), %rcx        # 8-byte Reload
	movq	4832(%rsp), %r8         # 8-byte Reload
	movq	4544(%rsp), %r9         # 8-byte Reload
	movq	4512(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	4520(%rsp), %rax        # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %esi
	movl	%esi, %edx
	movq	4880(%rsp), %rdi        # 8-byte Reload
	movq	4872(%rsp), %rsi        # 8-byte Reload
	movq	4528(%rsp), %rcx        # 8-byte Reload
	movq	4648(%rsp), %r8         # 8-byte Reload
	movq	4544(%rsp), %r9         # 8-byte Reload
	movq	4512(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 4404(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	4760(%rsp), %rdi        # 8-byte Reload
	movq	4496(%rsp), %rsi        # 8-byte Reload
	movq	4488(%rsp), %rdx        # 8-byte Reload
	movq	4664(%rsp), %rcx        # 8-byte Reload
	movq	4632(%rsp), %r8         # 8-byte Reload
	movl	4476(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	10988(%rsp), %r9d       # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	4504(%rsp), %rdi        # 8-byte Reload
	movq	4872(%rsp), %rsi        # 8-byte Reload
	movq	4528(%rsp), %rcx        # 8-byte Reload
	movq	4640(%rsp), %r8         # 8-byte Reload
	movq	4544(%rsp), %r9         # 8-byte Reload
	movq	4512(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	4404(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %esi
	movl	%esi, %edx
	movq	4528(%rsp), %rdi        # 8-byte Reload
	movq	4872(%rsp), %rsi        # 8-byte Reload
	movq	4528(%rsp), %rcx        # 8-byte Reload
	movq	4648(%rsp), %r8         # 8-byte Reload
	movq	4544(%rsp), %r9         # 8-byte Reload
	movq	4512(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	4404(%rsp), %ebp        # 4-byte Reload
	movl	10988(%rsp), %esi       # 4-byte Reload
	imull	%esi, %ebp
	movl	%ebp, %esi
	movl	%esi, %edx
	movq	4880(%rsp), %rdi        # 8-byte Reload
	movq	4872(%rsp), %rsi        # 8-byte Reload
	movq	4528(%rsp), %rcx        # 8-byte Reload
	movq	4664(%rsp), %r8         # 8-byte Reload
	movq	4544(%rsp), %r9         # 8-byte Reload
	movq	4512(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%ebp, 4400(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	4760(%rsp), %rdi        # 8-byte Reload
	movq	4496(%rsp), %rsi        # 8-byte Reload
	movq	4488(%rsp), %rdx        # 8-byte Reload
	movq	4656(%rsp), %rcx        # 8-byte Reload
	movq	4824(%rsp), %r8         # 8-byte Reload
	movl	4476(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	4528(%rsp), %rdi        # 8-byte Reload
	movq	4840(%rsp), %rsi        # 8-byte Reload
	movq	4520(%rsp), %rdx        # 8-byte Reload
	movq	4528(%rsp), %rcx        # 8-byte Reload
	movq	4832(%rsp), %r8         # 8-byte Reload
	movq	4544(%rsp), %r9         # 8-byte Reload
	movq	4512(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	4520(%rsp), %rax        # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %esi
	movl	%esi, %edx
	movq	4880(%rsp), %rdi        # 8-byte Reload
	movq	4872(%rsp), %rsi        # 8-byte Reload
	movq	4528(%rsp), %rcx        # 8-byte Reload
	movq	4656(%rsp), %r8         # 8-byte Reload
	movq	4544(%rsp), %r9         # 8-byte Reload
	movq	4512(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 4396(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	4760(%rsp), %rdi        # 8-byte Reload
	movq	4496(%rsp), %rsi        # 8-byte Reload
	movq	4488(%rsp), %rdx        # 8-byte Reload
	movq	4680(%rsp), %rcx        # 8-byte Reload
	movq	4792(%rsp), %r8         # 8-byte Reload
	movl	4476(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	4396(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	4504(%rsp), %rdi        # 8-byte Reload
	movq	4872(%rsp), %rsi        # 8-byte Reload
	movq	4528(%rsp), %rcx        # 8-byte Reload
	movq	4656(%rsp), %r8         # 8-byte Reload
	movq	4544(%rsp), %r9         # 8-byte Reload
	movq	4512(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	4400(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %esi
	movl	%esi, %edx
	movq	4528(%rsp), %rdi        # 8-byte Reload
	movq	4872(%rsp), %rsi        # 8-byte Reload
	movq	4528(%rsp), %rcx        # 8-byte Reload
	movq	4664(%rsp), %r8         # 8-byte Reload
	movq	4544(%rsp), %r9         # 8-byte Reload
	movq	4512(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	4400(%rsp), %ebp        # 4-byte Reload
	movl	4396(%rsp), %esi        # 4-byte Reload
	addl	%esi, %ebp
	movl	%ebp, %esi
	movl	%esi, %edx
	movq	4880(%rsp), %rdi        # 8-byte Reload
	movq	4872(%rsp), %rsi        # 8-byte Reload
	movq	4528(%rsp), %rcx        # 8-byte Reload
	movq	4680(%rsp), %r8         # 8-byte Reload
	movq	4544(%rsp), %r9         # 8-byte Reload
	movq	4512(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%ebp, 4392(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	4760(%rsp), %rdi        # 8-byte Reload
	movq	4496(%rsp), %rsi        # 8-byte Reload
	movq	4488(%rsp), %rdx        # 8-byte Reload
	movq	4696(%rsp), %rcx        # 8-byte Reload
	movq	4672(%rsp), %r8         # 8-byte Reload
	movl	4476(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	4392(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	4528(%rsp), %rdi        # 8-byte Reload
	movq	4872(%rsp), %rsi        # 8-byte Reload
	movq	4528(%rsp), %rcx        # 8-byte Reload
	movq	4680(%rsp), %r8         # 8-byte Reload
	movq	4544(%rsp), %r9         # 8-byte Reload
	movq	4512(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	4392(%rsp), %ebp        # 4-byte Reload
	movslq	%ebp, %rax
	movq	4880(%rsp), %rdi        # 8-byte Reload
	movq	4840(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	4528(%rsp), %rcx        # 8-byte Reload
	movq	4696(%rsp), %r8         # 8-byte Reload
	movq	4544(%rsp), %r9         # 8-byte Reload
	movq	4512(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 4384(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	4760(%rsp), %rdi        # 8-byte Reload
	movq	4496(%rsp), %rsi        # 8-byte Reload
	movq	4488(%rsp), %rdx        # 8-byte Reload
	movq	4720(%rsp), %rcx        # 8-byte Reload
	movq	4688(%rsp), %r8         # 8-byte Reload
	movl	4476(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	4504(%rsp), %rdi        # 8-byte Reload
	movq	4840(%rsp), %rsi        # 8-byte Reload
	movq	4384(%rsp), %rdx        # 8-byte Reload
	movq	4528(%rsp), %rcx        # 8-byte Reload
	movq	4696(%rsp), %r8         # 8-byte Reload
	movq	4544(%rsp), %r9         # 8-byte Reload
	movq	4512(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	4528(%rsp), %rdi        # 8-byte Reload
	movq	4840(%rsp), %rsi        # 8-byte Reload
	movq	11104(%rsp), %rdx       # 8-byte Reload
	movq	4528(%rsp), %rcx        # 8-byte Reload
	movq	4704(%rsp), %r8         # 8-byte Reload
	movq	4544(%rsp), %r9         # 8-byte Reload
	movq	4512(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	4384(%rsp), %rax        # 8-byte Reload
	shlq	$3, %rax
	movq	11104(%rsp), %rcx       # 8-byte Reload
	addq	%rax, %rcx
	movq	4880(%rsp), %rdi        # 8-byte Reload
	movq	4840(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	4528(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 4376(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	4720(%rsp), %r8         # 8-byte Reload
	movq	4544(%rsp), %r9         # 8-byte Reload
	movq	4512(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	4760(%rsp), %rdi        # 8-byte Reload
	movq	4496(%rsp), %rsi        # 8-byte Reload
	movq	4488(%rsp), %rdx        # 8-byte Reload
	movq	4736(%rsp), %rcx        # 8-byte Reload
	movq	4712(%rsp), %r8         # 8-byte Reload
	movl	4476(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	4528(%rsp), %rdi        # 8-byte Reload
	movq	4840(%rsp), %rsi        # 8-byte Reload
	movq	4376(%rsp), %rdx        # 8-byte Reload
	movq	4528(%rsp), %rcx        # 8-byte Reload
	movq	4720(%rsp), %r8         # 8-byte Reload
	movq	4544(%rsp), %r9         # 8-byte Reload
	movq	4512(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	11104(%rsp), %rax       # 8-byte Reload
	movq	4384(%rsp), %rcx        # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
	movq	4880(%rsp), %rdi        # 8-byte Reload
	movq	4840(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 4368(%rsp)       # 8-byte Spill
	movq	4528(%rsp), %rdx        # 8-byte Reload
	movq	4736(%rsp), %rcx        # 8-byte Reload
	movq	4544(%rsp), %r8         # 8-byte Reload
	movq	4512(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	4760(%rsp), %rdi        # 8-byte Reload
	movq	4496(%rsp), %rsi        # 8-byte Reload
	movq	4488(%rsp), %rdx        # 8-byte Reload
	movq	4768(%rsp), %rcx        # 8-byte Reload
	movq	4728(%rsp), %r8         # 8-byte Reload
	movl	4476(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	4504(%rsp), %rdi        # 8-byte Reload
	movq	4840(%rsp), %rsi        # 8-byte Reload
	vmovsd	4368(%rsp), %xmm0       # 8-byte Reload
	movq	4528(%rsp), %rdx        # 8-byte Reload
	movq	4736(%rsp), %rcx        # 8-byte Reload
	movq	4544(%rsp), %r8         # 8-byte Reload
	movq	4512(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	4528(%rsp), %rdi        # 8-byte Reload
	movq	4840(%rsp), %rsi        # 8-byte Reload
	vmovsd	4424(%rsp), %xmm0       # 8-byte Reload
	movq	4528(%rsp), %rdx        # 8-byte Reload
	movq	4744(%rsp), %rcx        # 8-byte Reload
	movq	4544(%rsp), %r8         # 8-byte Reload
	movq	4512(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	4424(%rsp), %xmm0       # 8-byte Reload
	vmovsd	4368(%rsp), %xmm1       # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	4880(%rsp), %rdi        # 8-byte Reload
	movq	4840(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	4528(%rsp), %rdx        # 8-byte Reload
	movq	4768(%rsp), %rcx        # 8-byte Reload
	movq	4544(%rsp), %r8         # 8-byte Reload
	movq	4512(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 4360(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	4760(%rsp), %rdi        # 8-byte Reload
	movq	4496(%rsp), %rsi        # 8-byte Reload
	movq	4488(%rsp), %rdx        # 8-byte Reload
	movq	4784(%rsp), %rcx        # 8-byte Reload
	movq	4752(%rsp), %r8         # 8-byte Reload
	movl	4476(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	4504(%rsp), %rdi        # 8-byte Reload
	movq	4840(%rsp), %rsi        # 8-byte Reload
	vmovsd	4360(%rsp), %xmm0       # 8-byte Reload
	movq	4528(%rsp), %rdx        # 8-byte Reload
	movq	4768(%rsp), %rcx        # 8-byte Reload
	movq	4544(%rsp), %r8         # 8-byte Reload
	movq	4512(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	4528(%rsp), %rdi        # 8-byte Reload
	movq	4840(%rsp), %rsi        # 8-byte Reload
	vmovsd	4408(%rsp), %xmm0       # 8-byte Reload
	movq	4528(%rsp), %rdx        # 8-byte Reload
	movq	4776(%rsp), %rcx        # 8-byte Reload
	movq	4544(%rsp), %r8         # 8-byte Reload
	movq	4512(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	4408(%rsp), %xmm0       # 8-byte Reload
	vmovsd	4360(%rsp), %xmm1       # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
	movq	4880(%rsp), %rdi        # 8-byte Reload
	movq	4840(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	4528(%rsp), %rdx        # 8-byte Reload
	movq	4784(%rsp), %rcx        # 8-byte Reload
	movq	4544(%rsp), %r8         # 8-byte Reload
	movq	4512(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 4352(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
.Ltmp346:
	#DEBUG_VALUE: tred1:g <- [RSP+4352]
	.loc	2 840 0                 # eispack.c:840:0
	movq	4800(%rsp), %rdi        # 8-byte Reload
	movq	4496(%rsp), %rsi        # 8-byte Reload
	movq	4488(%rsp), %rdx        # 8-byte Reload
	movq	4816(%rsp), %rcx        # 8-byte Reload
	movq	4792(%rsp), %r8         # 8-byte Reload
	movl	4476(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	4504(%rsp), %rdi        # 8-byte Reload
	movq	4840(%rsp), %rsi        # 8-byte Reload
	movq	4528(%rsp), %rdx        # 8-byte Reload
	movq	4544(%rsp), %rcx        # 8-byte Reload
	movq	4808(%rsp), %r8         # 8-byte Reload
	movq	4544(%rsp), %r9         # 8-byte Reload
	movq	4512(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	4528(%rsp), %rdi        # 8-byte Reload
	movq	4840(%rsp), %rsi        # 8-byte Reload
	movq	4520(%rsp), %rdx        # 8-byte Reload
	movq	4528(%rsp), %rcx        # 8-byte Reload
	movq	4832(%rsp), %r8         # 8-byte Reload
	movq	4544(%rsp), %r9         # 8-byte Reload
	movq	4512(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	4520(%rsp), %rax        # 8-byte Reload
	addq	$1, %rax
	.loc	2 845 0                 # eispack.c:845:0
.Ltmp347:
	movq	4880(%rsp), %rdi        # 8-byte Reload
	movq	4840(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	4528(%rsp), %rcx        # 8-byte Reload
	movq	4816(%rsp), %r8         # 8-byte Reload
	movq	4544(%rsp), %r9         # 8-byte Reload
	movq	4512(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 4344(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	4464(%rsp), %rdi        # 8-byte Reload
	movq	4496(%rsp), %rsi        # 8-byte Reload
	movq	4488(%rsp), %rdx        # 8-byte Reload
	movq	4864(%rsp), %rcx        # 8-byte Reload
	movq	4824(%rsp), %r8         # 8-byte Reload
	movl	4476(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	4528(%rsp), %rdi        # 8-byte Reload
	movq	4840(%rsp), %rsi        # 8-byte Reload
	movq	4520(%rsp), %rdx        # 8-byte Reload
	movq	4528(%rsp), %rcx        # 8-byte Reload
	movq	4832(%rsp), %r8         # 8-byte Reload
	movq	4544(%rsp), %r9         # 8-byte Reload
	movq	4512(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	4520(%rsp), %rax        # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %esi
	movl	%esi, %edx
	movq	4880(%rsp), %rdi        # 8-byte Reload
	movq	4872(%rsp), %rsi        # 8-byte Reload
	movq	4528(%rsp), %rcx        # 8-byte Reload
	movq	4864(%rsp), %r8         # 8-byte Reload
	movq	4544(%rsp), %r9         # 8-byte Reload
	movq	4512(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 4340(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	4464(%rsp), %rdi        # 8-byte Reload
	movq	4496(%rsp), %rsi        # 8-byte Reload
	movq	4488(%rsp), %rdx        # 8-byte Reload
	movq	4896(%rsp), %rcx        # 8-byte Reload
	movq	4848(%rsp), %r8         # 8-byte Reload
	movl	4476(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	8880(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	4504(%rsp), %rdi        # 8-byte Reload
	movq	4872(%rsp), %rsi        # 8-byte Reload
	movq	4528(%rsp), %rcx        # 8-byte Reload
	movq	4856(%rsp), %r8         # 8-byte Reload
	movq	4544(%rsp), %r9         # 8-byte Reload
	movq	4512(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	4340(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %esi
	movl	%esi, %edx
	movq	4528(%rsp), %rdi        # 8-byte Reload
	movq	4872(%rsp), %rsi        # 8-byte Reload
	movq	4528(%rsp), %rcx        # 8-byte Reload
	movq	4864(%rsp), %r8         # 8-byte Reload
	movq	4544(%rsp), %r9         # 8-byte Reload
	movq	4512(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	4340(%rsp), %ebp        # 4-byte Reload
	movl	8880(%rsp), %esi        # 4-byte Reload
	cmpl	%esi, %ebp
	setl	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	4880(%rsp), %rdi        # 8-byte Reload
	movq	4528(%rsp), %rsi        # 8-byte Reload
	movq	4528(%rsp), %rcx        # 8-byte Reload
	movq	4896(%rsp), %r8         # 8-byte Reload
	movq	4544(%rsp), %r9         # 8-byte Reload
	movq	4512(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 4339(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	4464(%rsp), %rdi        # 8-byte Reload
	movq	4496(%rsp), %rsi        # 8-byte Reload
	movq	4488(%rsp), %rdx        # 8-byte Reload
	movq	4480(%rsp), %rcx        # 8-byte Reload
	movq	4504(%rsp), %r8         # 8-byte Reload
	movl	4476(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	4440(%rsp), %rdi        # 8-byte Reload
	movq	4544(%rsp), %rsi        # 8-byte Reload
	movq	4544(%rsp), %rdx        # 8-byte Reload
	movq	4528(%rsp), %rcx        # 8-byte Reload
	movq	4456(%rsp), %r8         # 8-byte Reload
	movq	4544(%rsp), %r9         # 8-byte Reload
	movq	4512(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	4504(%rsp), %rdi        # 8-byte Reload
	movq	4544(%rsp), %rsi        # 8-byte Reload
	movq	4544(%rsp), %rdx        # 8-byte Reload
	movq	4528(%rsp), %rcx        # 8-byte Reload
	movq	4448(%rsp), %r8         # 8-byte Reload
	movq	4544(%rsp), %r9         # 8-byte Reload
	movq	4512(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	4339(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	4528(%rsp), %rdi        # 8-byte Reload
	movq	4528(%rsp), %rsi        # 8-byte Reload
	movq	4528(%rsp), %rcx        # 8-byte Reload
	movq	4896(%rsp), %r8         # 8-byte Reload
	movq	4544(%rsp), %r9         # 8-byte Reload
	movq	4512(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	4339(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	vmovsd	4352(%rsp), %xmm0       # 8-byte Reload
	vmovsd	%xmm0, 4328(%rsp)       # 8-byte Spill
	jne	.LBB9_23
	jmp	.LBB9_25
.Ltmp348:
.LBB9_23:                               # %.lr.ph17
                                        #   in Loop: Header=BB9_22 Depth=2
	movabsq	$1, %rax
	movabsq	$0, %rcx
	leaq	.L.str250, %r8
	leaq	.L.str792, %rdx
	movabsq	$845, %rsi              # imm = 0x34D
	leaq	.L.str59144, %rdi
	leaq	.L.str247, %r9
	leaq	.L.str249, %r10
	movabsq	$2, %r11
	movl	$0, %ebx
	movl	$1, %ebp
	movabsq	$19134, %r14            # imm = 0x4ABE
	movabsq	$64, %r15
	leaq	.L.str248, %r12
	movabsq	$32, %r13
	movq	%rax, 4320(%rsp)        # 8-byte Spill
	leaq	.L.str236, %rax
	movq	%rax, 4312(%rsp)        # 8-byte Spill
	movabsq	$35, %rax
	movq	%rdi, 4304(%rsp)        # 8-byte Spill
	movq	%rsi, %rdi
	movq	%rax, 4296(%rsp)        # 8-byte Spill
	movq	4304(%rsp), %rax        # 8-byte Reload
	movq	%rsi, 4288(%rsp)        # 8-byte Spill
	movq	%rax, %rsi
	movq	%rdx, 4280(%rsp)        # 8-byte Spill
	movq	%r9, %rdx
	movq	%rcx, 4272(%rsp)        # 8-byte Spill
	movq	%r12, %rcx
	movq	4296(%rsp), %rax        # 8-byte Reload
	movq	%r8, 4264(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 4256(%rsp)         # 8-byte Spill
	movl	%ebx, %r9d
	movl	$1, (%rsp)
	movq	%r14, 4248(%rsp)        # 8-byte Spill
	movl	%ebp, 4244(%rsp)        # 4-byte Spill
	movq	%r15, 4232(%rsp)        # 8-byte Spill
	movq	%r12, 4224(%rsp)        # 8-byte Spill
	movq	%r13, 4216(%rsp)        # 8-byte Spill
	movl	%ebx, 4212(%rsp)        # 4-byte Spill
	movq	%r10, 4200(%rsp)        # 8-byte Spill
	movq	%r11, 4192(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movl	4400(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebx
	movl	%ebx, %edx
	movq	4320(%rsp), %rdi        # 8-byte Reload
	movq	4216(%rsp), %rsi        # 8-byte Reload
	movq	4320(%rsp), %rcx        # 8-byte Reload
	movq	4312(%rsp), %r8         # 8-byte Reload
	movq	4272(%rsp), %r9         # 8-byte Reload
	movq	4280(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	4400(%rsp), %ebx        # 4-byte Reload
	movslq	%ebx, %rax
	movq	4248(%rsp), %rdi        # 8-byte Reload
	movq	4232(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	4320(%rsp), %rcx        # 8-byte Reload
	movq	4224(%rsp), %r8         # 8-byte Reload
	movq	4272(%rsp), %r9         # 8-byte Reload
	movq	4280(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 4184(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	4288(%rsp), %rdi        # 8-byte Reload
	movq	4304(%rsp), %rsi        # 8-byte Reload
	movq	4256(%rsp), %rdx        # 8-byte Reload
	movq	4200(%rsp), %rcx        # 8-byte Reload
	movq	4192(%rsp), %r8         # 8-byte Reload
	movl	4212(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	4320(%rsp), %rdi        # 8-byte Reload
	movq	4272(%rsp), %rsi        # 8-byte Reload
	movq	4272(%rsp), %rdx        # 8-byte Reload
	movq	4320(%rsp), %rcx        # 8-byte Reload
	movq	4264(%rsp), %r8         # 8-byte Reload
	movq	4272(%rsp), %r9         # 8-byte Reload
	movq	4280(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	4888(%rsp), %rax        # 8-byte Reload
	vmovsd	4352(%rsp), %xmm0       # 8-byte Reload
	movq	%rax, 4176(%rsp)        # 8-byte Spill
	vmovsd	%xmm0, 4168(%rsp)       # 8-byte Spill
.LBB9_24:                               #   Parent Loop BB9_8 Depth=1
                                        #     Parent Loop BB9_22 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	vmovsd	4168(%rsp), %xmm0       # 8-byte Reload
	movq	4176(%rsp), %rax        # 8-byte Reload
	movabsq	$1, %rcx
	leaq	.L.str267, %rdx
	movabsq	$0, %rsi
	leaq	.L.str792, %rdi
	movabsq	$2, %r8
	leaq	.L.str250, %r9
	movabsq	$3, %r10
	leaq	.L.str228, %r11
	movabsq	$845, %rbx              # imm = 0x34D
	leaq	.L.str59144, %r14
	leaq	.L.str268, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 4160(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 4152(%rsp)        # 8-byte Spill
	leaq	.L.str266, %rax
	movq	%rax, 4144(%rsp)        # 8-byte Spill
	leaq	.L.str110, %rax
	movq	%rax, 4136(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 4128(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 4120(%rsp)        # 8-byte Spill
	leaq	.L.str252, %rax
	movq	%rax, 4112(%rsp)        # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, 4104(%rsp)        # 8-byte Spill
	leaq	.L.str251, %rax
	movq	%rax, 4096(%rsp)        # 8-byte Spill
	leaq	.L.str1499, %rax
	movq	%rax, 4088(%rsp)        # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, 4080(%rsp)        # 8-byte Spill
	leaq	.L.str264, %rax
	movq	%rax, 4072(%rsp)        # 8-byte Spill
	leaq	.L.str261, %rax
	movq	%rax, 4064(%rsp)        # 8-byte Spill
	movabsq	$848, %rax              # imm = 0x350
	movq	%rax, 4056(%rsp)        # 8-byte Spill
	leaq	.L.str265, %rax
	movq	%rax, 4048(%rsp)        # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, 4040(%rsp)        # 8-byte Spill
	leaq	.L.str263, %rax
	movq	%rax, 4032(%rsp)        # 8-byte Spill
	leaq	.L.str262, %rax
	movq	%rax, 4024(%rsp)        # 8-byte Spill
	movabsq	$9, %rax
	movq	%rax, 4016(%rsp)        # 8-byte Spill
	leaq	.L.str232, %rax
	movq	%rax, 4008(%rsp)        # 8-byte Spill
	leaq	.L.str257, %rax
	movq	%rax, 4000(%rsp)        # 8-byte Spill
	movabsq	$13, %rax
	movq	%rax, 3992(%rsp)        # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, 3984(%rsp)        # 8-byte Spill
	leaq	.L.str160, %rax
	movq	%rax, 3976(%rsp)        # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 3968(%rsp)        # 8-byte Spill
	leaq	.L.str254, %rax
	movq	%rax, 3960(%rsp)        # 8-byte Spill
	leaq	.L.str253, %rax
	movq	%rax, 3952(%rsp)        # 8-byte Spill
	leaq	.L.str260, %rax
	movq	%rax, 3944(%rsp)        # 8-byte Spill
	movabsq	$847, %rax              # imm = 0x34F
	movq	%rax, 3936(%rsp)        # 8-byte Spill
	leaq	.L.str259, %rax
	movq	%rax, 3928(%rsp)        # 8-byte Spill
	leaq	.L.str258, %rax
	movq	%rax, 3920(%rsp)        # 8-byte Spill
	leaq	.L.str85170, %rax
	movq	%rax, 3912(%rsp)        # 8-byte Spill
	leaq	.L.str256, %rax
	movq	%rax, 3904(%rsp)        # 8-byte Spill
	leaq	.L.str893, %rax
	movq	%rax, 3896(%rsp)        # 8-byte Spill
	leaq	.L.str255, %rax
	movq	%rax, 3888(%rsp)        # 8-byte Spill
	leaq	.L.str248, %rax
	movq	%rax, 3880(%rsp)        # 8-byte Spill
	leaq	.L.str243, %rax
	movq	%rax, 3872(%rsp)        # 8-byte Spill
	leaq	.L.str247, %rax
	movq	%rax, 3864(%rsp)        # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 3856(%rsp)        # 8-byte Spill
	movabsq	$48, %rax
	movq	%rax, 3848(%rsp)        # 8-byte Spill
	leaq	.L.str229, %rax
	.loc	2 847 0                 # eispack.c:847:0
.Ltmp349:
	movq	%rax, 3840(%rsp)        # 8-byte Spill
	movq	3856(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 3832(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 3824(%rsp)        # 8-byte Spill
	movq	%r14, %rsi
	movq	%rdx, 3816(%rsp)        # 8-byte Spill
	movq	%r9, %rdx
	movq	4096(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 3808(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	3848(%rsp), %rax        # 8-byte Reload
	movq	%r8, 3800(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 3792(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	vmovsd	%xmm0, 3784(%rsp)       # 8-byte Spill
	movq	%r15, 3776(%rsp)        # 8-byte Spill
	movl	%ebp, 3772(%rsp)        # 4-byte Spill
	movl	%r12d, 3768(%rsp)       # 4-byte Spill
	movq	%r13, 3760(%rsp)        # 8-byte Spill
	movq	%r14, 3752(%rsp)        # 8-byte Spill
	movq	%rbx, 3744(%rsp)        # 8-byte Spill
	movq	%r10, 3736(%rsp)        # 8-byte Spill
	movq	%r11, 3728(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	3800(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	movq	3824(%rsp), %rdx        # 8-byte Reload
	movq	3808(%rsp), %rcx        # 8-byte Reload
	movq	3840(%rsp), %r8         # 8-byte Reload
	movq	3808(%rsp), %r9         # 8-byte Reload
	movq	3864(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3808(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	movq	3824(%rsp), %rdx        # 8-byte Reload
	movq	3808(%rsp), %rcx        # 8-byte Reload
	movq	4112(%rsp), %r8         # 8-byte Reload
	movq	3808(%rsp), %r9         # 8-byte Reload
	movq	3792(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3760(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	movq	4160(%rsp), %rdx        # 8-byte Reload
	movq	3808(%rsp), %rcx        # 8-byte Reload
	movq	4096(%rsp), %r8         # 8-byte Reload
	movq	3824(%rsp), %r9         # 8-byte Reload
	movq	3792(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3856(%rsp), %rdi        # 8-byte Reload
	movq	3752(%rsp), %rsi        # 8-byte Reload
	movq	3792(%rsp), %rdx        # 8-byte Reload
	movq	3952(%rsp), %rcx        # 8-byte Reload
	movq	3848(%rsp), %r8         # 8-byte Reload
	movl	3772(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3800(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	movq	3824(%rsp), %rdx        # 8-byte Reload
	movq	3808(%rsp), %rcx        # 8-byte Reload
	movq	3872(%rsp), %r8         # 8-byte Reload
	movq	3808(%rsp), %r9         # 8-byte Reload
	movq	3864(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3808(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	movq	3824(%rsp), %rdx        # 8-byte Reload
	movq	3808(%rsp), %rcx        # 8-byte Reload
	movq	3960(%rsp), %r8         # 8-byte Reload
	movq	3808(%rsp), %r9         # 8-byte Reload
	movq	3792(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3760(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	vmovsd	3784(%rsp), %xmm0       # 8-byte Reload
	movq	3808(%rsp), %rdx        # 8-byte Reload
	movq	3952(%rsp), %rcx        # 8-byte Reload
	movq	3824(%rsp), %r8         # 8-byte Reload
	movq	3792(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	3936(%rsp), %rdi        # 8-byte Reload
	movq	3752(%rsp), %rsi        # 8-byte Reload
	movq	3792(%rsp), %rdx        # 8-byte Reload
	movq	3888(%rsp), %rcx        # 8-byte Reload
	movq	4080(%rsp), %r8         # 8-byte Reload
	movl	3772(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3800(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	movq	4184(%rsp), %rdx        # 8-byte Reload
	movq	3808(%rsp), %rcx        # 8-byte Reload
	movq	3880(%rsp), %r8         # 8-byte Reload
	movq	3824(%rsp), %r9         # 8-byte Reload
	movq	3832(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3808(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	movq	4160(%rsp), %rdx        # 8-byte Reload
	movq	3808(%rsp), %rcx        # 8-byte Reload
	movq	4096(%rsp), %r8         # 8-byte Reload
	movq	3824(%rsp), %r9         # 8-byte Reload
	movq	3832(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	4160(%rsp), %rax        # 8-byte Reload
	movq	4184(%rsp), %rcx        # 8-byte Reload
	addq	%rcx, %rax
	movq	3760(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	3808(%rsp), %rcx        # 8-byte Reload
	movq	3888(%rsp), %r8         # 8-byte Reload
	movq	3824(%rsp), %r9         # 8-byte Reload
	movq	3832(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 3720(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	3936(%rsp), %rdi        # 8-byte Reload
	movq	3752(%rsp), %rsi        # 8-byte Reload
	movq	3792(%rsp), %rdx        # 8-byte Reload
	movq	3904(%rsp), %rcx        # 8-byte Reload
	movq	3968(%rsp), %r8         # 8-byte Reload
	movl	3772(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3800(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	movq	3720(%rsp), %rdx        # 8-byte Reload
	movq	3808(%rsp), %rcx        # 8-byte Reload
	movq	3888(%rsp), %r8         # 8-byte Reload
	movq	3824(%rsp), %r9         # 8-byte Reload
	movq	3832(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3808(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	movq	11104(%rsp), %rdx       # 8-byte Reload
	movq	3808(%rsp), %rcx        # 8-byte Reload
	movq	3896(%rsp), %r8         # 8-byte Reload
	movq	3824(%rsp), %r9         # 8-byte Reload
	movq	3832(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	3720(%rsp), %rax        # 8-byte Reload
	shlq	$3, %rax
	movq	11104(%rsp), %rcx       # 8-byte Reload
	addq	%rax, %rcx
	movq	3760(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	3808(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 3712(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	3904(%rsp), %r8         # 8-byte Reload
	movq	3824(%rsp), %r9         # 8-byte Reload
	movq	3832(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	3936(%rsp), %rdi        # 8-byte Reload
	movq	3752(%rsp), %rsi        # 8-byte Reload
	movq	3792(%rsp), %rdx        # 8-byte Reload
	movq	4000(%rsp), %rcx        # 8-byte Reload
	movq	3984(%rsp), %r8         # 8-byte Reload
	movl	3772(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3808(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	movq	3712(%rsp), %rdx        # 8-byte Reload
	movq	3808(%rsp), %rcx        # 8-byte Reload
	movq	3904(%rsp), %r8         # 8-byte Reload
	movq	3824(%rsp), %r9         # 8-byte Reload
	movq	3832(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	11104(%rsp), %rax       # 8-byte Reload
	movq	3720(%rsp), %rcx        # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
	movq	3760(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 3704(%rsp)       # 8-byte Spill
	movq	3808(%rsp), %rdx        # 8-byte Reload
	movq	4000(%rsp), %rcx        # 8-byte Reload
	movq	3824(%rsp), %r8         # 8-byte Reload
	movq	3832(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	3936(%rsp), %rdi        # 8-byte Reload
	movq	3752(%rsp), %rsi        # 8-byte Reload
	movq	3792(%rsp), %rdx        # 8-byte Reload
	movq	3920(%rsp), %rcx        # 8-byte Reload
	movq	3968(%rsp), %r8         # 8-byte Reload
	movl	3772(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3800(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	movq	4160(%rsp), %rdx        # 8-byte Reload
	movq	3808(%rsp), %rcx        # 8-byte Reload
	movq	4096(%rsp), %r8         # 8-byte Reload
	movq	3824(%rsp), %r9         # 8-byte Reload
	movq	3832(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3808(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	movq	10968(%rsp), %rdx       # 8-byte Reload
	movq	3808(%rsp), %rcx        # 8-byte Reload
	movq	3912(%rsp), %r8         # 8-byte Reload
	movq	3824(%rsp), %r9         # 8-byte Reload
	movq	3832(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	4160(%rsp), %rax        # 8-byte Reload
	shlq	$3, %rax
	movq	10968(%rsp), %rcx       # 8-byte Reload
	addq	%rax, %rcx
	movq	3760(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	3808(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 3696(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	3920(%rsp), %r8         # 8-byte Reload
	movq	3824(%rsp), %r9         # 8-byte Reload
	movq	3832(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	3936(%rsp), %rdi        # 8-byte Reload
	movq	3752(%rsp), %rsi        # 8-byte Reload
	movq	3792(%rsp), %rdx        # 8-byte Reload
	movq	3928(%rsp), %rcx        # 8-byte Reload
	movq	3984(%rsp), %r8         # 8-byte Reload
	movl	3772(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3808(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	movq	3696(%rsp), %rdx        # 8-byte Reload
	movq	3808(%rsp), %rcx        # 8-byte Reload
	movq	3920(%rsp), %r8         # 8-byte Reload
	movq	3824(%rsp), %r9         # 8-byte Reload
	movq	3832(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	10968(%rsp), %rax       # 8-byte Reload
	movq	4160(%rsp), %rcx        # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
	movq	3760(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 3688(%rsp)       # 8-byte Spill
	movq	3808(%rsp), %rdx        # 8-byte Reload
	movq	3928(%rsp), %rcx        # 8-byte Reload
	movq	3824(%rsp), %r8         # 8-byte Reload
	movq	3832(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	3936(%rsp), %rdi        # 8-byte Reload
	movq	3752(%rsp), %rsi        # 8-byte Reload
	movq	3792(%rsp), %rdx        # 8-byte Reload
	movq	3944(%rsp), %rcx        # 8-byte Reload
	movq	3992(%rsp), %r8         # 8-byte Reload
	movl	3772(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3800(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	vmovsd	3688(%rsp), %xmm0       # 8-byte Reload
	movq	3808(%rsp), %rdx        # 8-byte Reload
	movq	3928(%rsp), %rcx        # 8-byte Reload
	movq	3824(%rsp), %r8         # 8-byte Reload
	movq	3832(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	3808(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	vmovsd	3704(%rsp), %xmm0       # 8-byte Reload
	movq	3808(%rsp), %rdx        # 8-byte Reload
	movq	4000(%rsp), %rcx        # 8-byte Reload
	movq	3824(%rsp), %r8         # 8-byte Reload
	movq	3832(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	3704(%rsp), %xmm0       # 8-byte Reload
	vmovsd	3688(%rsp), %xmm1       # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	3760(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	3808(%rsp), %rdx        # 8-byte Reload
	movq	3944(%rsp), %rcx        # 8-byte Reload
	movq	3824(%rsp), %r8         # 8-byte Reload
	movq	3832(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 3680(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	3936(%rsp), %rdi        # 8-byte Reload
	movq	3752(%rsp), %rsi        # 8-byte Reload
	movq	3792(%rsp), %rdx        # 8-byte Reload
	movq	3960(%rsp), %rcx        # 8-byte Reload
	movq	4016(%rsp), %r8         # 8-byte Reload
	movl	3772(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3800(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	vmovsd	3680(%rsp), %xmm0       # 8-byte Reload
	movq	3808(%rsp), %rdx        # 8-byte Reload
	movq	3944(%rsp), %rcx        # 8-byte Reload
	movq	3824(%rsp), %r8         # 8-byte Reload
	movq	3832(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	3808(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	vmovsd	3784(%rsp), %xmm0       # 8-byte Reload
	movq	3808(%rsp), %rdx        # 8-byte Reload
	movq	3952(%rsp), %rcx        # 8-byte Reload
	movq	3824(%rsp), %r8         # 8-byte Reload
	movq	3832(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	3784(%rsp), %xmm0       # 8-byte Reload
	vmovsd	3680(%rsp), %xmm1       # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
	movq	3760(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	3808(%rsp), %rdx        # 8-byte Reload
	movq	3960(%rsp), %rcx        # 8-byte Reload
	movq	3824(%rsp), %r8         # 8-byte Reload
	movq	3832(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 3672(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
.Ltmp350:
	#DEBUG_VALUE: tred1:g <- [RSP+3672]
	.loc	2 848 0                 # eispack.c:848:0
	movq	4056(%rsp), %rdi        # 8-byte Reload
	movq	3752(%rsp), %rsi        # 8-byte Reload
	movq	3792(%rsp), %rdx        # 8-byte Reload
	movq	4064(%rsp), %rcx        # 8-byte Reload
	movq	3968(%rsp), %r8         # 8-byte Reload
	movl	3772(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3800(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	movq	4160(%rsp), %rdx        # 8-byte Reload
	movq	3808(%rsp), %rcx        # 8-byte Reload
	movq	4096(%rsp), %r8         # 8-byte Reload
	movq	3824(%rsp), %r9         # 8-byte Reload
	movq	3832(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3808(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	movq	10960(%rsp), %rdx       # 8-byte Reload
	movq	3808(%rsp), %rcx        # 8-byte Reload
	movq	3976(%rsp), %r8         # 8-byte Reload
	movq	3824(%rsp), %r9         # 8-byte Reload
	movq	3832(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	4160(%rsp), %rax        # 8-byte Reload
	shlq	$3, %rax
	movq	10960(%rsp), %rcx       # 8-byte Reload
	addq	%rax, %rcx
	movq	3760(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	3808(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 3664(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	4064(%rsp), %r8         # 8-byte Reload
	movq	3824(%rsp), %r9         # 8-byte Reload
	movq	3832(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	4056(%rsp), %rdi        # 8-byte Reload
	movq	3752(%rsp), %rsi        # 8-byte Reload
	movq	3792(%rsp), %rdx        # 8-byte Reload
	movq	4024(%rsp), %rcx        # 8-byte Reload
	movq	3984(%rsp), %r8         # 8-byte Reload
	movl	3772(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3808(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	movq	3664(%rsp), %rdx        # 8-byte Reload
	movq	3808(%rsp), %rcx        # 8-byte Reload
	movq	4064(%rsp), %r8         # 8-byte Reload
	movq	3824(%rsp), %r9         # 8-byte Reload
	movq	3832(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	10960(%rsp), %rax       # 8-byte Reload
	movq	4160(%rsp), %rcx        # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
	movq	3760(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 3656(%rsp)       # 8-byte Spill
	movq	3808(%rsp), %rdx        # 8-byte Reload
	movq	4024(%rsp), %rcx        # 8-byte Reload
	movq	3824(%rsp), %r8         # 8-byte Reload
	movq	3832(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	4056(%rsp), %rdi        # 8-byte Reload
	movq	3752(%rsp), %rsi        # 8-byte Reload
	movq	3792(%rsp), %rdx        # 8-byte Reload
	movq	4032(%rsp), %rcx        # 8-byte Reload
	movq	3992(%rsp), %r8         # 8-byte Reload
	movl	3772(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3800(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	vmovsd	3704(%rsp), %xmm0       # 8-byte Reload
	movq	3808(%rsp), %rdx        # 8-byte Reload
	movq	4000(%rsp), %rcx        # 8-byte Reload
	movq	3824(%rsp), %r8         # 8-byte Reload
	movq	3832(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	3808(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	vmovsd	4424(%rsp), %xmm0       # 8-byte Reload
	movq	3808(%rsp), %rdx        # 8-byte Reload
	movq	4008(%rsp), %rcx        # 8-byte Reload
	movq	3824(%rsp), %r8         # 8-byte Reload
	movq	3832(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	4424(%rsp), %xmm0       # 8-byte Reload
	vmovsd	3704(%rsp), %xmm1       # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	3760(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	3808(%rsp), %rdx        # 8-byte Reload
	movq	4032(%rsp), %rcx        # 8-byte Reload
	movq	3824(%rsp), %r8         # 8-byte Reload
	movq	3832(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 3648(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	4056(%rsp), %rdi        # 8-byte Reload
	movq	3752(%rsp), %rsi        # 8-byte Reload
	movq	3792(%rsp), %rdx        # 8-byte Reload
	movq	4072(%rsp), %rcx        # 8-byte Reload
	movq	4016(%rsp), %r8         # 8-byte Reload
	movl	3772(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3800(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	vmovsd	3656(%rsp), %xmm0       # 8-byte Reload
	movq	3808(%rsp), %rdx        # 8-byte Reload
	movq	4024(%rsp), %rcx        # 8-byte Reload
	movq	3824(%rsp), %r8         # 8-byte Reload
	movq	3832(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	3808(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	vmovsd	3648(%rsp), %xmm0       # 8-byte Reload
	movq	3808(%rsp), %rdx        # 8-byte Reload
	movq	4032(%rsp), %rcx        # 8-byte Reload
	movq	3824(%rsp), %r8         # 8-byte Reload
	movq	3832(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	3648(%rsp), %xmm0       # 8-byte Reload
	vmovsd	3656(%rsp), %xmm1       # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
	movq	3760(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	3808(%rsp), %rdx        # 8-byte Reload
	movq	4072(%rsp), %rcx        # 8-byte Reload
	movq	3824(%rsp), %r8         # 8-byte Reload
	movq	3832(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 3640(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	4056(%rsp), %rdi        # 8-byte Reload
	movq	3752(%rsp), %rsi        # 8-byte Reload
	movq	3792(%rsp), %rdx        # 8-byte Reload
	movq	4048(%rsp), %rcx        # 8-byte Reload
	movq	4040(%rsp), %r8         # 8-byte Reload
	movl	3772(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3800(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	movq	3664(%rsp), %rdx        # 8-byte Reload
	movq	3808(%rsp), %rcx        # 8-byte Reload
	movq	4064(%rsp), %r8         # 8-byte Reload
	movq	3824(%rsp), %r9         # 8-byte Reload
	movq	3832(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	3808(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	vmovsd	3640(%rsp), %xmm0       # 8-byte Reload
	movq	3808(%rsp), %rdx        # 8-byte Reload
	movq	4072(%rsp), %rcx        # 8-byte Reload
	movq	3824(%rsp), %r8         # 8-byte Reload
	movq	3832(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	10960(%rsp), %rax       # 8-byte Reload
	movq	4160(%rsp), %rcx        # 8-byte Reload
	vmovsd	3640(%rsp), %xmm0       # 8-byte Reload
	vmovsd	%xmm0, (%rax,%rcx,8)
.Ltmp351:
	.loc	2 845 0                 # eispack.c:845:0
	movq	3744(%rsp), %rdi        # 8-byte Reload
	movq	3752(%rsp), %rsi        # 8-byte Reload
	movq	3792(%rsp), %rdx        # 8-byte Reload
	movq	4112(%rsp), %rcx        # 8-byte Reload
	movq	4080(%rsp), %r8         # 8-byte Reload
	movl	3772(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3800(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	movq	3808(%rsp), %rdx        # 8-byte Reload
	movq	3824(%rsp), %rcx        # 8-byte Reload
	movq	4088(%rsp), %r8         # 8-byte Reload
	movq	3824(%rsp), %r9         # 8-byte Reload
	movq	3832(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3808(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	movq	4160(%rsp), %rdx        # 8-byte Reload
	movq	3808(%rsp), %rcx        # 8-byte Reload
	movq	4096(%rsp), %r8         # 8-byte Reload
	movq	3824(%rsp), %r9         # 8-byte Reload
	movq	3832(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	4160(%rsp), %rax        # 8-byte Reload
	addq	$1, %rax
	movq	3760(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	3808(%rsp), %rcx        # 8-byte Reload
	movq	4112(%rsp), %r8         # 8-byte Reload
	movq	3824(%rsp), %r9         # 8-byte Reload
	movq	3832(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 3632(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	3744(%rsp), %rdi        # 8-byte Reload
	movq	3752(%rsp), %rsi        # 8-byte Reload
	movq	3792(%rsp), %rdx        # 8-byte Reload
	movq	4144(%rsp), %rcx        # 8-byte Reload
	movq	4104(%rsp), %r8         # 8-byte Reload
	movl	3772(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3808(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	movq	3632(%rsp), %rdx        # 8-byte Reload
	movq	3808(%rsp), %rcx        # 8-byte Reload
	movq	4112(%rsp), %r8         # 8-byte Reload
	movq	3824(%rsp), %r9         # 8-byte Reload
	movq	3832(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3632(%rsp), %rax        # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	3760(%rsp), %rdi        # 8-byte Reload
	movq	4152(%rsp), %rsi        # 8-byte Reload
	movq	3808(%rsp), %rcx        # 8-byte Reload
	movq	4144(%rsp), %r8         # 8-byte Reload
	movq	3824(%rsp), %r9         # 8-byte Reload
	movq	3832(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 3628(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	3744(%rsp), %rdi        # 8-byte Reload
	movq	3752(%rsp), %rsi        # 8-byte Reload
	movq	3792(%rsp), %rdx        # 8-byte Reload
	movq	3816(%rsp), %rcx        # 8-byte Reload
	movq	4128(%rsp), %r8         # 8-byte Reload
	movl	3772(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	8900(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	3800(%rsp), %rdi        # 8-byte Reload
	movq	4152(%rsp), %rsi        # 8-byte Reload
	movq	3808(%rsp), %rcx        # 8-byte Reload
	movq	4136(%rsp), %r8         # 8-byte Reload
	movq	3824(%rsp), %r9         # 8-byte Reload
	movq	3832(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	3628(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	3808(%rsp), %rdi        # 8-byte Reload
	movq	4152(%rsp), %rsi        # 8-byte Reload
	movq	3808(%rsp), %rcx        # 8-byte Reload
	movq	4144(%rsp), %r8         # 8-byte Reload
	movq	3824(%rsp), %r9         # 8-byte Reload
	movq	3832(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	3628(%rsp), %ebp        # 4-byte Reload
	movl	8900(%rsp), %r12d       # 4-byte Reload
	cmpl	%r12d, %ebp
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	3760(%rsp), %rdi        # 8-byte Reload
	movq	3808(%rsp), %rsi        # 8-byte Reload
	movq	3808(%rsp), %rcx        # 8-byte Reload
	movq	3816(%rsp), %r8         # 8-byte Reload
	movq	3824(%rsp), %r9         # 8-byte Reload
	movq	3832(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 3627(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	3744(%rsp), %rdi        # 8-byte Reload
	movq	3752(%rsp), %rsi        # 8-byte Reload
	movq	3792(%rsp), %rdx        # 8-byte Reload
	movq	3776(%rsp), %rcx        # 8-byte Reload
	movq	3800(%rsp), %r8         # 8-byte Reload
	movl	3772(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3736(%rsp), %rdi        # 8-byte Reload
	movq	3824(%rsp), %rsi        # 8-byte Reload
	movq	3824(%rsp), %rdx        # 8-byte Reload
	movq	3808(%rsp), %rcx        # 8-byte Reload
	movq	3728(%rsp), %r8         # 8-byte Reload
	movq	3824(%rsp), %r9         # 8-byte Reload
	movq	3832(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	3800(%rsp), %rdi        # 8-byte Reload
	movq	3824(%rsp), %rsi        # 8-byte Reload
	movq	3824(%rsp), %rdx        # 8-byte Reload
	movq	3808(%rsp), %rcx        # 8-byte Reload
	movq	3792(%rsp), %r8         # 8-byte Reload
	movq	3824(%rsp), %r9         # 8-byte Reload
	movq	3832(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	3627(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	3808(%rsp), %rdi        # 8-byte Reload
	movq	3808(%rsp), %rsi        # 8-byte Reload
	movq	3808(%rsp), %rcx        # 8-byte Reload
	movq	3816(%rsp), %r8         # 8-byte Reload
	movq	3824(%rsp), %r9         # 8-byte Reload
	movq	3832(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	3627(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	movq	3632(%rsp), %rcx        # 8-byte Reload
	vmovsd	3672(%rsp), %xmm0       # 8-byte Reload
	vmovsd	3672(%rsp), %xmm1       # 8-byte Reload
	movq	%rcx, 4176(%rsp)        # 8-byte Spill
	vmovsd	%xmm0, 4168(%rsp)       # 8-byte Spill
	vmovsd	%xmm1, 4328(%rsp)       # 8-byte Spill
	jne	.LBB9_25
	jmp	.LBB9_24
.Ltmp352:
.LBB9_25:                               # %._crit_edge18
                                        #   in Loop: Header=BB9_22 Depth=2
	vmovsd	4328(%rsp), %xmm0       # 8-byte Reload
	movabsq	$1, %rax
	leaq	.L.str272, %rcx
	movabsq	$0, %rdx
	leaq	.L.str792, %rsi
	movabsq	$2, %rdi
	leaq	.L.str225, %r8
	movabsq	$3, %r9
	leaq	.L.str274, %r10
	movabsq	$840, %r11              # imm = 0x348
	leaq	.L.str59144, %rbx
	leaq	.L.str228, %r14
	leaq	.L.str273, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 3616(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 3608(%rsp)        # 8-byte Spill
	leaq	.L.str271, %rax
	movq	%rax, 3600(%rsp)        # 8-byte Spill
	leaq	.L.str110, %rax
	movq	%rax, 3592(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 3584(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 3576(%rsp)        # 8-byte Spill
	leaq	.L.str227, %rax
	movq	%rax, 3568(%rsp)        # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, 3560(%rsp)        # 8-byte Spill
	leaq	.L.str230, %rax
	movq	%rax, 3552(%rsp)        # 8-byte Spill
	leaq	.L.str229, %rax
	movq	%rax, 3544(%rsp)        # 8-byte Spill
	leaq	.L.str1499, %rax
	movq	%rax, 3536(%rsp)        # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, 3528(%rsp)        # 8-byte Spill
	leaq	.L.str269, %rax
	movq	%rax, 3520(%rsp)        # 8-byte Spill
	leaq	.L.str233, %rax
	movq	%rax, 3512(%rsp)        # 8-byte Spill
	movabsq	$850, %rax              # imm = 0x352
	movq	%rax, 3504(%rsp)        # 8-byte Spill
	leaq	.L.str270, %rax
	movq	%rax, 3496(%rsp)        # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, 3488(%rsp)        # 8-byte Spill
	leaq	.L.str243, %rax
	movq	%rax, 3480(%rsp)        # 8-byte Spill
	leaq	.L.str254, %rax
	movq	%rax, 3472(%rsp)        # 8-byte Spill
	leaq	.L.str250, %rax
	movq	%rax, 3464(%rsp)        # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 3456(%rsp)        # 8-byte Spill
	movabsq	$48, %rax
	.loc	2 850 0                 # eispack.c:850:0
	movq	%rax, 3448(%rsp)        # 8-byte Spill
	movq	3456(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 3440(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 3432(%rsp)        # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, 3424(%rsp)        # 8-byte Spill
	movq	%r14, %rdx
	movq	3520(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 3416(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	3448(%rsp), %rax        # 8-byte Reload
	movq	%r8, 3408(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 3400(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	vmovsd	%xmm0, 3392(%rsp)       # 8-byte Spill
	movq	%r15, 3384(%rsp)        # 8-byte Spill
	movl	%ebp, 3380(%rsp)        # 4-byte Spill
	movl	%r12d, 3376(%rsp)       # 4-byte Spill
	movq	%r13, 3368(%rsp)        # 8-byte Spill
	movq	%r14, 3360(%rsp)        # 8-byte Spill
	movq	%rbx, 3352(%rsp)        # 8-byte Spill
	movq	%r10, 3344(%rsp)        # 8-byte Spill
	movq	%r11, 3336(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	3440(%rsp), %rdi        # 8-byte Reload
	movq	3576(%rsp), %rsi        # 8-byte Reload
	movq	3424(%rsp), %rdx        # 8-byte Reload
	movq	3616(%rsp), %rcx        # 8-byte Reload
	movq	3472(%rsp), %r8         # 8-byte Reload
	movq	3616(%rsp), %r9         # 8-byte Reload
	movq	3464(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3616(%rsp), %rdi        # 8-byte Reload
	movq	3576(%rsp), %rsi        # 8-byte Reload
	movq	3424(%rsp), %rdx        # 8-byte Reload
	movq	3616(%rsp), %rcx        # 8-byte Reload
	movq	3480(%rsp), %r8         # 8-byte Reload
	movq	3616(%rsp), %r9         # 8-byte Reload
	movq	3408(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3368(%rsp), %rdi        # 8-byte Reload
	movq	3576(%rsp), %rsi        # 8-byte Reload
	vmovsd	3392(%rsp), %xmm0       # 8-byte Reload
	movq	3616(%rsp), %rdx        # 8-byte Reload
	movq	3520(%rsp), %rcx        # 8-byte Reload
	movq	3424(%rsp), %r8         # 8-byte Reload
	movq	3408(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	3504(%rsp), %rdi        # 8-byte Reload
	movq	3352(%rsp), %rsi        # 8-byte Reload
	movq	3360(%rsp), %rdx        # 8-byte Reload
	movq	3496(%rsp), %rcx        # 8-byte Reload
	movq	3488(%rsp), %r8         # 8-byte Reload
	movl	3380(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3440(%rsp), %rdi        # 8-byte Reload
	movq	3576(%rsp), %rsi        # 8-byte Reload
	movq	4416(%rsp), %rdx        # 8-byte Reload
	movq	3616(%rsp), %rcx        # 8-byte Reload
	movq	3512(%rsp), %r8         # 8-byte Reload
	movq	3424(%rsp), %r9         # 8-byte Reload
	movq	3432(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	3616(%rsp), %rdi        # 8-byte Reload
	movq	3576(%rsp), %rsi        # 8-byte Reload
	vmovsd	3392(%rsp), %xmm0       # 8-byte Reload
	movq	3616(%rsp), %rdx        # 8-byte Reload
	movq	3520(%rsp), %rcx        # 8-byte Reload
	movq	3424(%rsp), %r8         # 8-byte Reload
	movq	3432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	4416(%rsp), %rax        # 8-byte Reload
	vmovsd	3392(%rsp), %xmm0       # 8-byte Reload
	vmovsd	%xmm0, (%rax)
.Ltmp353:
	.loc	2 840 0                 # eispack.c:840:0
	movq	3336(%rsp), %rdi        # 8-byte Reload
	movq	3352(%rsp), %rsi        # 8-byte Reload
	movq	3360(%rsp), %rdx        # 8-byte Reload
	movq	3552(%rsp), %rcx        # 8-byte Reload
	movq	3528(%rsp), %r8         # 8-byte Reload
	movl	3380(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3440(%rsp), %rdi        # 8-byte Reload
	movq	3576(%rsp), %rsi        # 8-byte Reload
	movq	3616(%rsp), %rdx        # 8-byte Reload
	movq	3424(%rsp), %rcx        # 8-byte Reload
	movq	3536(%rsp), %r8         # 8-byte Reload
	movq	3424(%rsp), %r9         # 8-byte Reload
	movq	3432(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3616(%rsp), %rdi        # 8-byte Reload
	movq	3576(%rsp), %rsi        # 8-byte Reload
	movq	4888(%rsp), %rdx        # 8-byte Reload
	movq	3616(%rsp), %rcx        # 8-byte Reload
	movq	3544(%rsp), %r8         # 8-byte Reload
	movq	3424(%rsp), %r9         # 8-byte Reload
	movq	3432(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	4888(%rsp), %rax        # 8-byte Reload
	addq	$1, %rax
	movq	3368(%rsp), %rdi        # 8-byte Reload
	movq	3576(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	3616(%rsp), %rcx        # 8-byte Reload
	movq	3552(%rsp), %r8         # 8-byte Reload
	movq	3424(%rsp), %r9         # 8-byte Reload
	movq	3432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 3328(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	3336(%rsp), %rdi        # 8-byte Reload
	movq	3352(%rsp), %rsi        # 8-byte Reload
	movq	3360(%rsp), %rdx        # 8-byte Reload
	movq	3600(%rsp), %rcx        # 8-byte Reload
	movq	3560(%rsp), %r8         # 8-byte Reload
	movl	3380(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3616(%rsp), %rdi        # 8-byte Reload
	movq	3576(%rsp), %rsi        # 8-byte Reload
	movq	4344(%rsp), %rdx        # 8-byte Reload
	movq	3616(%rsp), %rcx        # 8-byte Reload
	movq	3568(%rsp), %r8         # 8-byte Reload
	movq	3424(%rsp), %r9         # 8-byte Reload
	movq	3432(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	4344(%rsp), %rax        # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	3368(%rsp), %rdi        # 8-byte Reload
	movq	3608(%rsp), %rsi        # 8-byte Reload
	movq	3616(%rsp), %rcx        # 8-byte Reload
	movq	3600(%rsp), %r8         # 8-byte Reload
	movq	3424(%rsp), %r9         # 8-byte Reload
	movq	3432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 3324(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	3336(%rsp), %rdi        # 8-byte Reload
	movq	3352(%rsp), %rsi        # 8-byte Reload
	movq	3360(%rsp), %rdx        # 8-byte Reload
	movq	3416(%rsp), %rcx        # 8-byte Reload
	movq	3584(%rsp), %r8         # 8-byte Reload
	movl	3380(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	8900(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	3440(%rsp), %rdi        # 8-byte Reload
	movq	3608(%rsp), %rsi        # 8-byte Reload
	movq	3616(%rsp), %rcx        # 8-byte Reload
	movq	3592(%rsp), %r8         # 8-byte Reload
	movq	3424(%rsp), %r9         # 8-byte Reload
	movq	3432(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	3324(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	3616(%rsp), %rdi        # 8-byte Reload
	movq	3608(%rsp), %rsi        # 8-byte Reload
	movq	3616(%rsp), %rcx        # 8-byte Reload
	movq	3600(%rsp), %r8         # 8-byte Reload
	movq	3424(%rsp), %r9         # 8-byte Reload
	movq	3432(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	3324(%rsp), %ebp        # 4-byte Reload
	movl	8900(%rsp), %r12d       # 4-byte Reload
	cmpl	%r12d, %ebp
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	3368(%rsp), %rdi        # 8-byte Reload
	movq	3616(%rsp), %rsi        # 8-byte Reload
	movq	3616(%rsp), %rcx        # 8-byte Reload
	movq	3416(%rsp), %r8         # 8-byte Reload
	movq	3424(%rsp), %r9         # 8-byte Reload
	movq	3432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 3323(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	3336(%rsp), %rdi        # 8-byte Reload
	movq	3352(%rsp), %rsi        # 8-byte Reload
	movq	3360(%rsp), %rdx        # 8-byte Reload
	movq	3384(%rsp), %rcx        # 8-byte Reload
	movq	3440(%rsp), %r8         # 8-byte Reload
	movl	3380(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3400(%rsp), %rdi        # 8-byte Reload
	movq	3424(%rsp), %rsi        # 8-byte Reload
	movq	3424(%rsp), %rdx        # 8-byte Reload
	movq	3616(%rsp), %rcx        # 8-byte Reload
	movq	3344(%rsp), %r8         # 8-byte Reload
	movq	3424(%rsp), %r9         # 8-byte Reload
	movq	3432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	3440(%rsp), %rdi        # 8-byte Reload
	movq	3424(%rsp), %rsi        # 8-byte Reload
	movq	3424(%rsp), %rdx        # 8-byte Reload
	movq	3616(%rsp), %rcx        # 8-byte Reload
	movq	3408(%rsp), %r8         # 8-byte Reload
	movq	3424(%rsp), %r9         # 8-byte Reload
	movq	3432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	3323(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	3616(%rsp), %rdi        # 8-byte Reload
	movq	3616(%rsp), %rsi        # 8-byte Reload
	movq	3616(%rsp), %rcx        # 8-byte Reload
	movq	3416(%rsp), %r8         # 8-byte Reload
	movq	3424(%rsp), %r9         # 8-byte Reload
	movq	3432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	3323(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	movq	4344(%rsp), %rcx        # 8-byte Reload
	movq	3328(%rsp), %rdx        # 8-byte Reload
	movq	%rcx, 4912(%rsp)        # 8-byte Spill
	movq	%rdx, 4904(%rsp)        # 8-byte Spill
	jne	.LBB9_26
	jmp	.LBB9_22
.Ltmp354:
.LBB9_26:                               # %.loopexit20
                                        #   in Loop: Header=BB9_8 Depth=1
	movabsq	$0, %rax
	vxorps	%xmm0, %xmm0, %xmm0
	movabsq	$1, %rcx
	leaq	.L.str275, %rdx
	leaq	.L.str792, %rsi
	movabsq	$2, %rdi
	leaq	.L.str277, %r8
	movabsq	$3, %r9
	leaq	.L.str108, %r10
	movabsq	$856, %r11              # imm = 0x358
	leaq	.L.str59144, %rbx
	leaq	.L.str274, %r14
	leaq	.L.str276, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 3312(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 3304(%rsp)        # 8-byte Spill
	leaq	.L.str113, %rax
	movq	%rax, 3296(%rsp)        # 8-byte Spill
	leaq	.L.str1499, %rax
	movq	%rax, 3288(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	.loc	2 856 0                 # eispack.c:856:0
.Ltmp355:
	movq	%rdi, 3280(%rsp)        # 8-byte Spill
	movq	%r11, %rdi
	movq	%rsi, 3272(%rsp)        # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, 3264(%rsp)        # 8-byte Spill
	movq	%r14, %rdx
	movq	%rax, 3256(%rsp)        # 8-byte Spill
	movq	3264(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 3248(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	3256(%rsp), %rax        # 8-byte Reload
	movq	%r8, 3240(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 3232(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	vmovsd	%xmm0, 3224(%rsp)       # 8-byte Spill
	movq	%r15, 3216(%rsp)        # 8-byte Spill
	movl	%ebp, 3212(%rsp)        # 4-byte Spill
	movl	%r12d, 3208(%rsp)       # 4-byte Spill
	movq	%r13, 3200(%rsp)        # 8-byte Spill
	movq	%r14, 3192(%rsp)        # 8-byte Spill
	movq	%rbx, 3184(%rsp)        # 8-byte Spill
	movq	%r10, 3176(%rsp)        # 8-byte Spill
	movq	%r11, 3168(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	3280(%rsp), %rdi        # 8-byte Reload
	movq	3304(%rsp), %rsi        # 8-byte Reload
	movq	3312(%rsp), %rdx        # 8-byte Reload
	movq	3312(%rsp), %rcx        # 8-byte Reload
	movq	3288(%rsp), %r8         # 8-byte Reload
	movq	3312(%rsp), %r9         # 8-byte Reload
	movq	3272(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	8880(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	3248(%rsp), %rdi        # 8-byte Reload
	movq	3304(%rsp), %rsi        # 8-byte Reload
	movq	3248(%rsp), %rcx        # 8-byte Reload
	movq	3296(%rsp), %r8         # 8-byte Reload
	movq	3312(%rsp), %r9         # 8-byte Reload
	movq	3272(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	8880(%rsp), %ebp        # 4-byte Reload
	cmpl	$0, %ebp
	setl	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %r12d
	movl	%r12d, %edx
	movq	3200(%rsp), %rdi        # 8-byte Reload
	movq	3248(%rsp), %rsi        # 8-byte Reload
	movq	3248(%rsp), %rcx        # 8-byte Reload
	movq	3264(%rsp), %r8         # 8-byte Reload
	movq	3312(%rsp), %r9         # 8-byte Reload
	movq	3272(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 3167(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	3168(%rsp), %rdi        # 8-byte Reload
	movq	3184(%rsp), %rsi        # 8-byte Reload
	movq	3192(%rsp), %rdx        # 8-byte Reload
	movq	3216(%rsp), %rcx        # 8-byte Reload
	movq	3280(%rsp), %r8         # 8-byte Reload
	movl	3212(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3232(%rsp), %rdi        # 8-byte Reload
	movq	3312(%rsp), %rsi        # 8-byte Reload
	movq	3312(%rsp), %rdx        # 8-byte Reload
	movq	3248(%rsp), %rcx        # 8-byte Reload
	movq	3176(%rsp), %r8         # 8-byte Reload
	movq	3312(%rsp), %r9         # 8-byte Reload
	movq	3272(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	3280(%rsp), %rdi        # 8-byte Reload
	movq	3312(%rsp), %rsi        # 8-byte Reload
	movq	3312(%rsp), %rdx        # 8-byte Reload
	movq	3248(%rsp), %rcx        # 8-byte Reload
	movq	3240(%rsp), %r8         # 8-byte Reload
	movq	3312(%rsp), %r9         # 8-byte Reload
	movq	3272(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	3167(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	3248(%rsp), %rdi        # 8-byte Reload
	movq	3248(%rsp), %rsi        # 8-byte Reload
	movq	3248(%rsp), %rcx        # 8-byte Reload
	movq	3264(%rsp), %r8         # 8-byte Reload
	movq	3312(%rsp), %r9         # 8-byte Reload
	movq	3272(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	3167(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	movq	3312(%rsp), %rcx        # 8-byte Reload
	vmovsd	3224(%rsp), %xmm0       # 8-byte Reload
	movq	%rcx, 3152(%rsp)        # 8-byte Spill
	vmovsd	%xmm0, 3144(%rsp)       # 8-byte Spill
	jne	.LBB9_15
.LBB9_27:                               # %.lr.ph25
                                        #   Parent Loop BB9_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vmovsd	3144(%rsp), %xmm0       # 8-byte Reload
	movq	3152(%rsp), %rax        # 8-byte Reload
	movabsq	$1, %rcx
	leaq	.L.str290, %rdx
	movabsq	$0, %rsi
	leaq	.L.str792, %rdi
	movabsq	$2, %r8
	leaq	.L.str277, %r9
	movabsq	$3, %r10
	leaq	.L.str292, %r11
	movabsq	$856, %rbx              # imm = 0x358
	leaq	.L.str59144, %r14
	leaq	.L.str291, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 3136(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 3128(%rsp)        # 8-byte Spill
	leaq	.L.str289, %rax
	movq	%rax, 3120(%rsp)        # 8-byte Spill
	leaq	.L.str110, %rax
	movq	%rax, 3112(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 3104(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 3096(%rsp)        # 8-byte Spill
	leaq	.L.str279, %rax
	movq	%rax, 3088(%rsp)        # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, 3080(%rsp)        # 8-byte Spill
	leaq	.L.str278, %rax
	movq	%rax, 3072(%rsp)        # 8-byte Spill
	leaq	.L.str1499, %rax
	movq	%rax, 3064(%rsp)        # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, 3056(%rsp)        # 8-byte Spill
	leaq	.L.str281, %rax
	movq	%rax, 3048(%rsp)        # 8-byte Spill
	leaq	.L.str280, %rax
	movq	%rax, 3040(%rsp)        # 8-byte Spill
	leaq	.L.str288, %rax
	movq	%rax, 3032(%rsp)        # 8-byte Spill
	movabsq	$859, %rax              # imm = 0x35B
	movq	%rax, 3024(%rsp)        # 8-byte Spill
	movabsq	$9, %rax
	movq	%rax, 3016(%rsp)        # 8-byte Spill
	leaq	.L.str284, %rax
	movq	%rax, 3008(%rsp)        # 8-byte Spill
	leaq	.L.str287172, %rax
	movq	%rax, 3000(%rsp)        # 8-byte Spill
	movabsq	$13, %rax
	movq	%rax, 2992(%rsp)        # 8-byte Spill
	leaq	.L.str286, %rax
	movq	%rax, 2984(%rsp)        # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, 2976(%rsp)        # 8-byte Spill
	leaq	.L.str85170, %rax
	movq	%rax, 2968(%rsp)        # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 2960(%rsp)        # 8-byte Spill
	leaq	.L.str282, %rax
	movq	%rax, 2952(%rsp)        # 8-byte Spill
	movabsq	$858, %rax              # imm = 0x35A
	movq	%rax, 2944(%rsp)        # 8-byte Spill
	leaq	.L.str285, %rax
	movq	%rax, 2936(%rsp)        # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, 2928(%rsp)        # 8-byte Spill
	leaq	.L.str283, %rax
	movq	%rax, 2920(%rsp)        # 8-byte Spill
	leaq	.L.str209, %rax
	movq	%rax, 2912(%rsp)        # 8-byte Spill
	movabsq	$16, %rax
	movq	%rax, 2904(%rsp)        # 8-byte Spill
	leaq	.L.str160, %rax
	vxorps	%xmm1, %xmm1, %xmm1
	movq	%rax, 2896(%rsp)        # 8-byte Spill
	leaq	.L.str274, %rax
	movq	%rax, 2888(%rsp)        # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 2880(%rsp)        # 8-byte Spill
	movabsq	$48, %rax
	.loc	2 858 0                 # eispack.c:858:0
.Ltmp356:
	movq	%rax, 2872(%rsp)        # 8-byte Spill
	movq	2880(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 2864(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 2856(%rsp)        # 8-byte Spill
	movq	%r14, %rsi
	movq	%rdx, 2848(%rsp)        # 8-byte Spill
	movq	%r9, %rdx
	movq	3072(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 2840(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	2872(%rsp), %rax        # 8-byte Reload
	movq	%r8, 2832(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 2824(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	vmovsd	%xmm0, 2816(%rsp)       # 8-byte Spill
	movl	%ebp, 2812(%rsp)        # 4-byte Spill
	movl	%r12d, 2808(%rsp)       # 4-byte Spill
	movq	%r13, 2800(%rsp)        # 8-byte Spill
	vmovsd	%xmm1, 2792(%rsp)       # 8-byte Spill
	movq	%r15, 2784(%rsp)        # 8-byte Spill
	movq	%r14, 2776(%rsp)        # 8-byte Spill
	movq	%r10, 2768(%rsp)        # 8-byte Spill
	movq	%r11, 2760(%rsp)        # 8-byte Spill
	movq	%rbx, 2752(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	2832(%rsp), %rdi        # 8-byte Reload
	movq	3096(%rsp), %rsi        # 8-byte Reload
	movq	2856(%rsp), %rdx        # 8-byte Reload
	movq	2856(%rsp), %rcx        # 8-byte Reload
	movq	3064(%rsp), %r8         # 8-byte Reload
	movq	2840(%rsp), %r9         # 8-byte Reload
	movq	2888(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2840(%rsp), %rdi        # 8-byte Reload
	movq	3096(%rsp), %rsi        # 8-byte Reload
	movq	2856(%rsp), %rdx        # 8-byte Reload
	movq	2840(%rsp), %rcx        # 8-byte Reload
	movq	3088(%rsp), %r8         # 8-byte Reload
	movq	2840(%rsp), %r9         # 8-byte Reload
	movq	2824(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2800(%rsp), %rdi        # 8-byte Reload
	movq	3096(%rsp), %rsi        # 8-byte Reload
	movq	3136(%rsp), %rdx        # 8-byte Reload
	movq	2840(%rsp), %rcx        # 8-byte Reload
	movq	3072(%rsp), %r8         # 8-byte Reload
	movq	2856(%rsp), %r9         # 8-byte Reload
	movq	2824(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2880(%rsp), %rdi        # 8-byte Reload
	movq	2776(%rsp), %rsi        # 8-byte Reload
	movq	2824(%rsp), %rdx        # 8-byte Reload
	movq	3040(%rsp), %rcx        # 8-byte Reload
	movq	2872(%rsp), %r8         # 8-byte Reload
	movl	2812(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2832(%rsp), %rdi        # 8-byte Reload
	movq	3096(%rsp), %rsi        # 8-byte Reload
	vmovsd	2792(%rsp), %xmm0       # 8-byte Reload
	movq	2856(%rsp), %rdx        # 8-byte Reload
	movq	3064(%rsp), %rcx        # 8-byte Reload
	movq	2840(%rsp), %r8         # 8-byte Reload
	movq	2888(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	2840(%rsp), %rdi        # 8-byte Reload
	movq	3096(%rsp), %rsi        # 8-byte Reload
	movq	2856(%rsp), %rdx        # 8-byte Reload
	movq	2840(%rsp), %rcx        # 8-byte Reload
	movq	3048(%rsp), %r8         # 8-byte Reload
	movq	2840(%rsp), %r9         # 8-byte Reload
	movq	2824(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2800(%rsp), %rdi        # 8-byte Reload
	movq	3096(%rsp), %rsi        # 8-byte Reload
	vmovsd	2816(%rsp), %xmm0       # 8-byte Reload
	movq	2840(%rsp), %rdx        # 8-byte Reload
	movq	3040(%rsp), %rcx        # 8-byte Reload
	movq	2856(%rsp), %r8         # 8-byte Reload
	movq	2824(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	2944(%rsp), %rdi        # 8-byte Reload
	movq	2776(%rsp), %rsi        # 8-byte Reload
	movq	2824(%rsp), %rdx        # 8-byte Reload
	movq	2952(%rsp), %rcx        # 8-byte Reload
	movq	2960(%rsp), %r8         # 8-byte Reload
	movl	2812(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2832(%rsp), %rdi        # 8-byte Reload
	movq	3096(%rsp), %rsi        # 8-byte Reload
	movq	3136(%rsp), %rdx        # 8-byte Reload
	movq	2840(%rsp), %rcx        # 8-byte Reload
	movq	3072(%rsp), %r8         # 8-byte Reload
	movq	2856(%rsp), %r9         # 8-byte Reload
	movq	2864(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2840(%rsp), %rdi        # 8-byte Reload
	movq	3096(%rsp), %rsi        # 8-byte Reload
	movq	10960(%rsp), %rdx       # 8-byte Reload
	movq	2840(%rsp), %rcx        # 8-byte Reload
	movq	2896(%rsp), %r8         # 8-byte Reload
	movq	2856(%rsp), %r9         # 8-byte Reload
	movq	2864(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	3136(%rsp), %rax        # 8-byte Reload
	shlq	$3, %rax
	movq	10960(%rsp), %rcx       # 8-byte Reload
	addq	%rax, %rcx
	movq	2800(%rsp), %rdi        # 8-byte Reload
	movq	3096(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	2840(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 2744(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	2952(%rsp), %r8         # 8-byte Reload
	movq	2856(%rsp), %r9         # 8-byte Reload
	movq	2864(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2944(%rsp), %rdi        # 8-byte Reload
	movq	2776(%rsp), %rsi        # 8-byte Reload
	movq	2824(%rsp), %rdx        # 8-byte Reload
	movq	2920(%rsp), %rcx        # 8-byte Reload
	movq	2976(%rsp), %r8         # 8-byte Reload
	movl	2812(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2840(%rsp), %rdi        # 8-byte Reload
	movq	3096(%rsp), %rsi        # 8-byte Reload
	movq	2744(%rsp), %rdx        # 8-byte Reload
	movq	2840(%rsp), %rcx        # 8-byte Reload
	movq	2952(%rsp), %r8         # 8-byte Reload
	movq	2856(%rsp), %r9         # 8-byte Reload
	movq	2864(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	10960(%rsp), %rax       # 8-byte Reload
	movq	3136(%rsp), %rcx        # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
	movq	2800(%rsp), %rdi        # 8-byte Reload
	movq	3096(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 2736(%rsp)       # 8-byte Spill
	movq	2840(%rsp), %rdx        # 8-byte Reload
	movq	2920(%rsp), %rcx        # 8-byte Reload
	movq	2856(%rsp), %r8         # 8-byte Reload
	movq	2864(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	2944(%rsp), %rdi        # 8-byte Reload
	movq	2776(%rsp), %rsi        # 8-byte Reload
	movq	2824(%rsp), %rdx        # 8-byte Reload
	movq	3008(%rsp), %rcx        # 8-byte Reload
	movq	2904(%rsp), %r8         # 8-byte Reload
	movl	2812(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2832(%rsp), %rdi        # 8-byte Reload
	movq	3096(%rsp), %rsi        # 8-byte Reload
	vmovsd	5392(%rsp), %xmm0       # 8-byte Reload
	movq	2840(%rsp), %rdx        # 8-byte Reload
	movq	2912(%rsp), %rcx        # 8-byte Reload
	movq	2856(%rsp), %r8         # 8-byte Reload
	movq	2864(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	2840(%rsp), %rdi        # 8-byte Reload
	movq	3096(%rsp), %rsi        # 8-byte Reload
	vmovsd	2736(%rsp), %xmm0       # 8-byte Reload
	movq	2840(%rsp), %rdx        # 8-byte Reload
	movq	2920(%rsp), %rcx        # 8-byte Reload
	movq	2856(%rsp), %r8         # 8-byte Reload
	movq	2864(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	2736(%rsp), %xmm0       # 8-byte Reload
	vmovsd	5392(%rsp), %xmm1       # 8-byte Reload
	vdivsd	%xmm1, %xmm0, %xmm2
	movq	2800(%rsp), %rdi        # 8-byte Reload
	movq	3096(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	2840(%rsp), %rdx        # 8-byte Reload
	movq	3008(%rsp), %rcx        # 8-byte Reload
	movq	2856(%rsp), %r8         # 8-byte Reload
	movq	2864(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 2728(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	2944(%rsp), %rdi        # 8-byte Reload
	movq	2776(%rsp), %rsi        # 8-byte Reload
	movq	2824(%rsp), %rdx        # 8-byte Reload
	movq	2936(%rsp), %rcx        # 8-byte Reload
	movq	2928(%rsp), %r8         # 8-byte Reload
	movl	2812(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2832(%rsp), %rdi        # 8-byte Reload
	movq	3096(%rsp), %rsi        # 8-byte Reload
	movq	2744(%rsp), %rdx        # 8-byte Reload
	movq	2840(%rsp), %rcx        # 8-byte Reload
	movq	2952(%rsp), %r8         # 8-byte Reload
	movq	2856(%rsp), %r9         # 8-byte Reload
	movq	2864(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2840(%rsp), %rdi        # 8-byte Reload
	movq	3096(%rsp), %rsi        # 8-byte Reload
	vmovsd	2728(%rsp), %xmm0       # 8-byte Reload
	movq	2840(%rsp), %rdx        # 8-byte Reload
	movq	3008(%rsp), %rcx        # 8-byte Reload
	movq	2856(%rsp), %r8         # 8-byte Reload
	movq	2864(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	10960(%rsp), %rax       # 8-byte Reload
	movq	3136(%rsp), %rcx        # 8-byte Reload
	vmovsd	2728(%rsp), %xmm0       # 8-byte Reload
	vmovsd	%xmm0, (%rax,%rcx,8)
	.loc	2 859 0                 # eispack.c:859:0
	movq	3024(%rsp), %rdi        # 8-byte Reload
	movq	2776(%rsp), %rsi        # 8-byte Reload
	movq	2824(%rsp), %rdx        # 8-byte Reload
	movq	2984(%rsp), %rcx        # 8-byte Reload
	movq	2960(%rsp), %r8         # 8-byte Reload
	movl	2812(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2832(%rsp), %rdi        # 8-byte Reload
	movq	3096(%rsp), %rsi        # 8-byte Reload
	movq	3136(%rsp), %rdx        # 8-byte Reload
	movq	2840(%rsp), %rcx        # 8-byte Reload
	movq	3072(%rsp), %r8         # 8-byte Reload
	movq	2856(%rsp), %r9         # 8-byte Reload
	movq	2864(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2840(%rsp), %rdi        # 8-byte Reload
	movq	3096(%rsp), %rsi        # 8-byte Reload
	movq	10968(%rsp), %rdx       # 8-byte Reload
	movq	2840(%rsp), %rcx        # 8-byte Reload
	movq	2968(%rsp), %r8         # 8-byte Reload
	movq	2856(%rsp), %r9         # 8-byte Reload
	movq	2864(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	3136(%rsp), %rax        # 8-byte Reload
	shlq	$3, %rax
	movq	10968(%rsp), %rcx       # 8-byte Reload
	addq	%rax, %rcx
	movq	2800(%rsp), %rdi        # 8-byte Reload
	movq	3096(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	2840(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 2720(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	2984(%rsp), %r8         # 8-byte Reload
	movq	2856(%rsp), %r9         # 8-byte Reload
	movq	2864(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	3024(%rsp), %rdi        # 8-byte Reload
	movq	2776(%rsp), %rsi        # 8-byte Reload
	movq	2824(%rsp), %rdx        # 8-byte Reload
	movq	3000(%rsp), %rcx        # 8-byte Reload
	movq	2976(%rsp), %r8         # 8-byte Reload
	movl	2812(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2840(%rsp), %rdi        # 8-byte Reload
	movq	3096(%rsp), %rsi        # 8-byte Reload
	movq	2720(%rsp), %rdx        # 8-byte Reload
	movq	2840(%rsp), %rcx        # 8-byte Reload
	movq	2984(%rsp), %r8         # 8-byte Reload
	movq	2856(%rsp), %r9         # 8-byte Reload
	movq	2864(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	10968(%rsp), %rax       # 8-byte Reload
	movq	3136(%rsp), %rcx        # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
	movq	2800(%rsp), %rdi        # 8-byte Reload
	movq	3096(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 2712(%rsp)       # 8-byte Spill
	movq	2840(%rsp), %rdx        # 8-byte Reload
	movq	3000(%rsp), %rcx        # 8-byte Reload
	movq	2856(%rsp), %r8         # 8-byte Reload
	movq	2864(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	3024(%rsp), %rdi        # 8-byte Reload
	movq	2776(%rsp), %rsi        # 8-byte Reload
	movq	2824(%rsp), %rdx        # 8-byte Reload
	movq	3032(%rsp), %rcx        # 8-byte Reload
	movq	2992(%rsp), %r8         # 8-byte Reload
	movl	2812(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2832(%rsp), %rdi        # 8-byte Reload
	movq	3096(%rsp), %rsi        # 8-byte Reload
	vmovsd	2712(%rsp), %xmm0       # 8-byte Reload
	movq	2840(%rsp), %rdx        # 8-byte Reload
	movq	3000(%rsp), %rcx        # 8-byte Reload
	movq	2856(%rsp), %r8         # 8-byte Reload
	movq	2864(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	2840(%rsp), %rdi        # 8-byte Reload
	movq	3096(%rsp), %rsi        # 8-byte Reload
	vmovsd	2728(%rsp), %xmm0       # 8-byte Reload
	movq	2840(%rsp), %rdx        # 8-byte Reload
	movq	3008(%rsp), %rcx        # 8-byte Reload
	movq	2856(%rsp), %r8         # 8-byte Reload
	movq	2864(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	2728(%rsp), %xmm0       # 8-byte Reload
	vmovsd	2712(%rsp), %xmm1       # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	2800(%rsp), %rdi        # 8-byte Reload
	movq	3096(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	2840(%rsp), %rdx        # 8-byte Reload
	movq	3032(%rsp), %rcx        # 8-byte Reload
	movq	2856(%rsp), %r8         # 8-byte Reload
	movq	2864(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 2704(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	3024(%rsp), %rdi        # 8-byte Reload
	movq	2776(%rsp), %rsi        # 8-byte Reload
	movq	2824(%rsp), %rdx        # 8-byte Reload
	movq	3048(%rsp), %rcx        # 8-byte Reload
	movq	3016(%rsp), %r8         # 8-byte Reload
	movl	2812(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2832(%rsp), %rdi        # 8-byte Reload
	movq	3096(%rsp), %rsi        # 8-byte Reload
	vmovsd	2704(%rsp), %xmm0       # 8-byte Reload
	movq	2840(%rsp), %rdx        # 8-byte Reload
	movq	3032(%rsp), %rcx        # 8-byte Reload
	movq	2856(%rsp), %r8         # 8-byte Reload
	movq	2864(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	2840(%rsp), %rdi        # 8-byte Reload
	movq	3096(%rsp), %rsi        # 8-byte Reload
	vmovsd	2816(%rsp), %xmm0       # 8-byte Reload
	movq	2840(%rsp), %rdx        # 8-byte Reload
	movq	3040(%rsp), %rcx        # 8-byte Reload
	movq	2856(%rsp), %r8         # 8-byte Reload
	movq	2864(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	2816(%rsp), %xmm0       # 8-byte Reload
	vmovsd	2704(%rsp), %xmm1       # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
	movq	2800(%rsp), %rdi        # 8-byte Reload
	movq	3096(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	2840(%rsp), %rdx        # 8-byte Reload
	movq	3048(%rsp), %rcx        # 8-byte Reload
	movq	2856(%rsp), %r8         # 8-byte Reload
	movq	2864(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 2696(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
.Ltmp357:
	#DEBUG_VALUE: tred1:f <- [RSP+2696]
	.loc	2 856 0                 # eispack.c:856:0
	movq	2752(%rsp), %rdi        # 8-byte Reload
	movq	2776(%rsp), %rsi        # 8-byte Reload
	movq	2824(%rsp), %rdx        # 8-byte Reload
	movq	3088(%rsp), %rcx        # 8-byte Reload
	movq	3056(%rsp), %r8         # 8-byte Reload
	movl	2812(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2832(%rsp), %rdi        # 8-byte Reload
	movq	3096(%rsp), %rsi        # 8-byte Reload
	movq	2840(%rsp), %rdx        # 8-byte Reload
	movq	2856(%rsp), %rcx        # 8-byte Reload
	movq	3064(%rsp), %r8         # 8-byte Reload
	movq	2856(%rsp), %r9         # 8-byte Reload
	movq	2864(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2840(%rsp), %rdi        # 8-byte Reload
	movq	3096(%rsp), %rsi        # 8-byte Reload
	movq	3136(%rsp), %rdx        # 8-byte Reload
	movq	2840(%rsp), %rcx        # 8-byte Reload
	movq	3072(%rsp), %r8         # 8-byte Reload
	movq	2856(%rsp), %r9         # 8-byte Reload
	movq	2864(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3136(%rsp), %rax        # 8-byte Reload
	addq	$1, %rax
	movq	2800(%rsp), %rdi        # 8-byte Reload
	movq	3096(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	2840(%rsp), %rcx        # 8-byte Reload
	movq	3088(%rsp), %r8         # 8-byte Reload
	movq	2856(%rsp), %r9         # 8-byte Reload
	movq	2864(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 2688(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	2752(%rsp), %rdi        # 8-byte Reload
	movq	2776(%rsp), %rsi        # 8-byte Reload
	movq	2824(%rsp), %rdx        # 8-byte Reload
	movq	3120(%rsp), %rcx        # 8-byte Reload
	movq	3080(%rsp), %r8         # 8-byte Reload
	movl	2812(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2840(%rsp), %rdi        # 8-byte Reload
	movq	3096(%rsp), %rsi        # 8-byte Reload
	movq	2688(%rsp), %rdx        # 8-byte Reload
	movq	2840(%rsp), %rcx        # 8-byte Reload
	movq	3088(%rsp), %r8         # 8-byte Reload
	movq	2856(%rsp), %r9         # 8-byte Reload
	movq	2864(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2688(%rsp), %rax        # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	2800(%rsp), %rdi        # 8-byte Reload
	movq	3128(%rsp), %rsi        # 8-byte Reload
	movq	2840(%rsp), %rcx        # 8-byte Reload
	movq	3120(%rsp), %r8         # 8-byte Reload
	movq	2856(%rsp), %r9         # 8-byte Reload
	movq	2864(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 2684(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	2752(%rsp), %rdi        # 8-byte Reload
	movq	2776(%rsp), %rsi        # 8-byte Reload
	movq	2824(%rsp), %rdx        # 8-byte Reload
	movq	2848(%rsp), %rcx        # 8-byte Reload
	movq	3104(%rsp), %r8         # 8-byte Reload
	movl	2812(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	8900(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	2832(%rsp), %rdi        # 8-byte Reload
	movq	3128(%rsp), %rsi        # 8-byte Reload
	movq	2840(%rsp), %rcx        # 8-byte Reload
	movq	3112(%rsp), %r8         # 8-byte Reload
	movq	2856(%rsp), %r9         # 8-byte Reload
	movq	2864(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	2684(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	2840(%rsp), %rdi        # 8-byte Reload
	movq	3128(%rsp), %rsi        # 8-byte Reload
	movq	2840(%rsp), %rcx        # 8-byte Reload
	movq	3120(%rsp), %r8         # 8-byte Reload
	movq	2856(%rsp), %r9         # 8-byte Reload
	movq	2864(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	2684(%rsp), %ebp        # 4-byte Reload
	movl	8900(%rsp), %r12d       # 4-byte Reload
	cmpl	%r12d, %ebp
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	2800(%rsp), %rdi        # 8-byte Reload
	movq	2840(%rsp), %rsi        # 8-byte Reload
	movq	2840(%rsp), %rcx        # 8-byte Reload
	movq	2848(%rsp), %r8         # 8-byte Reload
	movq	2856(%rsp), %r9         # 8-byte Reload
	movq	2864(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 2683(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	2752(%rsp), %rdi        # 8-byte Reload
	movq	2776(%rsp), %rsi        # 8-byte Reload
	movq	2824(%rsp), %rdx        # 8-byte Reload
	movq	2784(%rsp), %rcx        # 8-byte Reload
	movq	2832(%rsp), %r8         # 8-byte Reload
	movl	2812(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2768(%rsp), %rdi        # 8-byte Reload
	movq	2856(%rsp), %rsi        # 8-byte Reload
	movq	2856(%rsp), %rdx        # 8-byte Reload
	movq	2840(%rsp), %rcx        # 8-byte Reload
	movq	2760(%rsp), %r8         # 8-byte Reload
	movq	2856(%rsp), %r9         # 8-byte Reload
	movq	2864(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	2832(%rsp), %rdi        # 8-byte Reload
	movq	2856(%rsp), %rsi        # 8-byte Reload
	movq	2856(%rsp), %rdx        # 8-byte Reload
	movq	2840(%rsp), %rcx        # 8-byte Reload
	movq	2824(%rsp), %r8         # 8-byte Reload
	movq	2856(%rsp), %r9         # 8-byte Reload
	movq	2864(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	2683(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	2840(%rsp), %rdi        # 8-byte Reload
	movq	2840(%rsp), %rsi        # 8-byte Reload
	movq	2840(%rsp), %rcx        # 8-byte Reload
	movq	2848(%rsp), %r8         # 8-byte Reload
	movq	2856(%rsp), %r9         # 8-byte Reload
	movq	2864(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	2683(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	movq	2688(%rsp), %rcx        # 8-byte Reload
	vmovsd	2696(%rsp), %xmm0       # 8-byte Reload
	movq	%rcx, 3152(%rsp)        # 8-byte Spill
	vmovsd	%xmm0, 3144(%rsp)       # 8-byte Spill
	jne	.LBB9_28
	jmp	.LBB9_27
.Ltmp358:
.LBB9_28:                               # %._crit_edge26
                                        #   in Loop: Header=BB9_8 Depth=1
	movabsq	$0, %rax
	movabsq	$1, %rcx
	leaq	.L.str295, %rdx
	leaq	.L.str792, %rsi
	movabsq	$2, %rdi
	leaq	.L.str297, %r8
	movabsq	$3, %r9
	leaq	.L.str108, %r10
	movabsq	$866, %r11              # imm = 0x362
	leaq	.L.str59144, %rbx
	leaq	.L.str292, %r14
	leaq	.L.str296, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 2672(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 2664(%rsp)        # 8-byte Spill
	leaq	.L.str113, %rax
	movq	%rax, 2656(%rsp)        # 8-byte Spill
	leaq	.L.str1499, %rax
	movq	%rax, 2648(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 2640(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 2632(%rsp)        # 8-byte Spill
	leaq	.L.str294, %rax
	movq	%rax, 2624(%rsp)        # 8-byte Spill
	leaq	.L.str281, %rax
	movq	%rax, 2616(%rsp)        # 8-byte Spill
	leaq	.L.str293, %rax
	movq	%rax, 2608(%rsp)        # 8-byte Spill
	movabsq	$862, %rax              # imm = 0x35E
	movq	%rax, 2600(%rsp)        # 8-byte Spill
	movabsq	$16, %rax
	movq	%rax, 2592(%rsp)        # 8-byte Spill
	leaq	.L.str209, %rax
	movq	%rax, 2584(%rsp)        # 8-byte Spill
	movabsq	$9, %rax
	.loc	2 862 0                 # eispack.c:862:0
	movq	%rax, 2576(%rsp)        # 8-byte Spill
	movq	2600(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 2568(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 2560(%rsp)        # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, 2552(%rsp)        # 8-byte Spill
	movq	%r14, %rdx
	movq	2608(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 2544(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	2576(%rsp), %rax        # 8-byte Reload
	movq	%r8, 2536(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 2528(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r15, 2520(%rsp)        # 8-byte Spill
	movl	%ebp, 2516(%rsp)        # 4-byte Spill
	movl	%r12d, 2512(%rsp)       # 4-byte Spill
	movq	%r13, 2504(%rsp)        # 8-byte Spill
	movq	%r14, 2496(%rsp)        # 8-byte Spill
	movq	%rbx, 2488(%rsp)        # 8-byte Spill
	movq	%r10, 2480(%rsp)        # 8-byte Spill
	movq	%r11, 2472(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	2568(%rsp), %rdi        # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	vmovsd	5392(%rsp), %xmm0       # 8-byte Reload
	movq	2544(%rsp), %rdx        # 8-byte Reload
	movq	2584(%rsp), %rcx        # 8-byte Reload
	movq	2672(%rsp), %r8         # 8-byte Reload
	movq	2560(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	2544(%rsp), %rdi        # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	vmovsd	5392(%rsp), %xmm0       # 8-byte Reload
	movq	2544(%rsp), %rdx        # 8-byte Reload
	movq	2584(%rsp), %rcx        # 8-byte Reload
	movq	2672(%rsp), %r8         # 8-byte Reload
	movq	2560(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	5392(%rsp), %xmm0       # 8-byte Reload
	vaddsd	%xmm0, %xmm0, %xmm1
	movq	2504(%rsp), %rdi        # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm1, %xmm0
	movq	2544(%rsp), %rdx        # 8-byte Reload
	movq	2608(%rsp), %rcx        # 8-byte Reload
	movq	2672(%rsp), %r8         # 8-byte Reload
	movq	2560(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm1, 2464(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	2600(%rsp), %rdi        # 8-byte Reload
	movq	2488(%rsp), %rsi        # 8-byte Reload
	movq	2496(%rsp), %rdx        # 8-byte Reload
	movq	2624(%rsp), %rcx        # 8-byte Reload
	movq	2592(%rsp), %r8         # 8-byte Reload
	movl	2516(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2568(%rsp), %rdi        # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	vmovsd	2464(%rsp), %xmm0       # 8-byte Reload
	movq	2544(%rsp), %rdx        # 8-byte Reload
	movq	2608(%rsp), %rcx        # 8-byte Reload
	movq	2672(%rsp), %r8         # 8-byte Reload
	movq	2560(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	2544(%rsp), %rdi        # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	vmovsd	2696(%rsp), %xmm0       # 8-byte Reload
	movq	2544(%rsp), %rdx        # 8-byte Reload
	movq	2616(%rsp), %rcx        # 8-byte Reload
	movq	2672(%rsp), %r8         # 8-byte Reload
	movq	2560(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	2696(%rsp), %xmm0       # 8-byte Reload
	vmovsd	2464(%rsp), %xmm1       # 8-byte Reload
	vdivsd	%xmm1, %xmm0, %xmm2
	movq	2504(%rsp), %rdi        # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	2544(%rsp), %rdx        # 8-byte Reload
	movq	2624(%rsp), %rcx        # 8-byte Reload
	movq	2672(%rsp), %r8         # 8-byte Reload
	movq	2560(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 2456(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
.Ltmp359:
	#DEBUG_VALUE: tred1:h <- [RSP+2456]
	#DEBUG_VALUE: tred1:j <- 0
	.loc	2 866 0                 # eispack.c:866:0
	movq	2472(%rsp), %rdi        # 8-byte Reload
	movq	2488(%rsp), %rsi        # 8-byte Reload
	movq	2496(%rsp), %rdx        # 8-byte Reload
	movq	2552(%rsp), %rcx        # 8-byte Reload
	movq	2640(%rsp), %r8         # 8-byte Reload
	movl	2516(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2568(%rsp), %rdi        # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	2672(%rsp), %rdx        # 8-byte Reload
	movq	2672(%rsp), %rcx        # 8-byte Reload
	movq	2648(%rsp), %r8         # 8-byte Reload
	movq	2672(%rsp), %r9         # 8-byte Reload
	movq	2560(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	8880(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	2544(%rsp), %rdi        # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	2544(%rsp), %rcx        # 8-byte Reload
	movq	2656(%rsp), %r8         # 8-byte Reload
	movq	2672(%rsp), %r9         # 8-byte Reload
	movq	2560(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	8880(%rsp), %ebp        # 4-byte Reload
	cmpl	$0, %ebp
	setl	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %r12d
	movl	%r12d, %edx
	movq	2504(%rsp), %rdi        # 8-byte Reload
	movq	2544(%rsp), %rsi        # 8-byte Reload
	movq	2544(%rsp), %rcx        # 8-byte Reload
	movq	2552(%rsp), %r8         # 8-byte Reload
	movq	2672(%rsp), %r9         # 8-byte Reload
	movq	2560(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 2455(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	2472(%rsp), %rdi        # 8-byte Reload
	movq	2488(%rsp), %rsi        # 8-byte Reload
	movq	2496(%rsp), %rdx        # 8-byte Reload
	movq	2520(%rsp), %rcx        # 8-byte Reload
	movq	2568(%rsp), %r8         # 8-byte Reload
	movl	2516(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2528(%rsp), %rdi        # 8-byte Reload
	movq	2672(%rsp), %rsi        # 8-byte Reload
	movq	2672(%rsp), %rdx        # 8-byte Reload
	movq	2544(%rsp), %rcx        # 8-byte Reload
	movq	2480(%rsp), %r8         # 8-byte Reload
	movq	2672(%rsp), %r9         # 8-byte Reload
	movq	2560(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	2568(%rsp), %rdi        # 8-byte Reload
	movq	2672(%rsp), %rsi        # 8-byte Reload
	movq	2672(%rsp), %rdx        # 8-byte Reload
	movq	2544(%rsp), %rcx        # 8-byte Reload
	movq	2536(%rsp), %r8         # 8-byte Reload
	movq	2672(%rsp), %r9         # 8-byte Reload
	movq	2560(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	2455(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	2544(%rsp), %rdi        # 8-byte Reload
	movq	2544(%rsp), %rsi        # 8-byte Reload
	movq	2544(%rsp), %rcx        # 8-byte Reload
	movq	2552(%rsp), %r8         # 8-byte Reload
	movq	2672(%rsp), %r9         # 8-byte Reload
	movq	2560(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	2455(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	movq	2672(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 2440(%rsp)        # 8-byte Spill
	jne	.LBB9_15
.Ltmp360:
.LBB9_29:                               # %.lr.ph31
                                        #   Parent Loop BB9_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	2440(%rsp), %rax        # 8-byte Reload
	movabsq	$1, %rcx
	leaq	.L.str308, %rdx
	movabsq	$0, %rsi
	leaq	.L.str792, %rdi
	movabsq	$2, %r8
	leaq	.L.str297, %r9
	movabsq	$3, %r10
	leaq	.L.str310, %r11
	movabsq	$866, %rbx              # imm = 0x362
	leaq	.L.str59144, %r14
	leaq	.L.str309, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 2432(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 2424(%rsp)        # 8-byte Spill
	leaq	.L.str307, %rax
	movq	%rax, 2416(%rsp)        # 8-byte Spill
	leaq	.L.str110, %rax
	movq	%rax, 2408(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 2400(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 2392(%rsp)        # 8-byte Spill
	leaq	.L.str299, %rax
	movq	%rax, 2384(%rsp)        # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, 2376(%rsp)        # 8-byte Spill
	leaq	.L.str298, %rax
	movq	%rax, 2368(%rsp)        # 8-byte Spill
	leaq	.L.str1499, %rax
	movq	%rax, 2360(%rsp)        # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, 2352(%rsp)        # 8-byte Spill
	leaq	.L.str305, %rax
	movq	%rax, 2344(%rsp)        # 8-byte Spill
	leaq	.L.str300, %rax
	movq	%rax, 2336(%rsp)        # 8-byte Spill
	movabsq	$868, %rax              # imm = 0x364
	movq	%rax, 2328(%rsp)        # 8-byte Spill
	leaq	.L.str306, %rax
	movq	%rax, 2320(%rsp)        # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, 2312(%rsp)        # 8-byte Spill
	leaq	.L.str301, %rax
	movq	%rax, 2304(%rsp)        # 8-byte Spill
	leaq	.L.str304, %rax
	movq	%rax, 2296(%rsp)        # 8-byte Spill
	movabsq	$11, %rax
	movq	%rax, 2288(%rsp)        # 8-byte Spill
	leaq	.L.str294, %rax
	movq	%rax, 2280(%rsp)        # 8-byte Spill
	leaq	.L.str303, %rax
	movq	%rax, 2272(%rsp)        # 8-byte Spill
	movabsq	$13, %rax
	movq	%rax, 2264(%rsp)        # 8-byte Spill
	leaq	.L.str302, %rax
	movq	%rax, 2256(%rsp)        # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, 2248(%rsp)        # 8-byte Spill
	leaq	.L.str85170, %rax
	movq	%rax, 2240(%rsp)        # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 2232(%rsp)        # 8-byte Spill
	leaq	.L.str160, %rax
	movq	%rax, 2224(%rsp)        # 8-byte Spill
	leaq	.L.str292, %rax
	movq	%rax, 2216(%rsp)        # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 2208(%rsp)        # 8-byte Spill
	movabsq	$48, %rax
	.loc	2 868 0                 # eispack.c:868:0
.Ltmp361:
	movq	%rax, 2200(%rsp)        # 8-byte Spill
	movq	2208(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 2192(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 2184(%rsp)        # 8-byte Spill
	movq	%r14, %rsi
	movq	%rdx, 2176(%rsp)        # 8-byte Spill
	movq	%r9, %rdx
	movq	2368(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 2168(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	2200(%rsp), %rax        # 8-byte Reload
	movq	%r8, 2160(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 2152(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r15, 2144(%rsp)        # 8-byte Spill
	movl	%ebp, 2140(%rsp)        # 4-byte Spill
	movl	%r12d, 2136(%rsp)       # 4-byte Spill
	movq	%r13, 2128(%rsp)        # 8-byte Spill
	movq	%r14, 2120(%rsp)        # 8-byte Spill
	movq	%rbx, 2112(%rsp)        # 8-byte Spill
	movq	%r10, 2104(%rsp)        # 8-byte Spill
	movq	%r11, 2096(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	2160(%rsp), %rdi        # 8-byte Reload
	movq	2392(%rsp), %rsi        # 8-byte Reload
	movq	2184(%rsp), %rdx        # 8-byte Reload
	movq	2184(%rsp), %rcx        # 8-byte Reload
	movq	2360(%rsp), %r8         # 8-byte Reload
	movq	2168(%rsp), %r9         # 8-byte Reload
	movq	2216(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2168(%rsp), %rdi        # 8-byte Reload
	movq	2392(%rsp), %rsi        # 8-byte Reload
	movq	2184(%rsp), %rdx        # 8-byte Reload
	movq	2168(%rsp), %rcx        # 8-byte Reload
	movq	2384(%rsp), %r8         # 8-byte Reload
	movq	2168(%rsp), %r9         # 8-byte Reload
	movq	2152(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2128(%rsp), %rdi        # 8-byte Reload
	movq	2392(%rsp), %rsi        # 8-byte Reload
	movq	2432(%rsp), %rdx        # 8-byte Reload
	movq	2168(%rsp), %rcx        # 8-byte Reload
	movq	2368(%rsp), %r8         # 8-byte Reload
	movq	2184(%rsp), %r9         # 8-byte Reload
	movq	2152(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2328(%rsp), %rdi        # 8-byte Reload
	movq	2120(%rsp), %rsi        # 8-byte Reload
	movq	2152(%rsp), %rdx        # 8-byte Reload
	movq	2336(%rsp), %rcx        # 8-byte Reload
	movq	2232(%rsp), %r8         # 8-byte Reload
	movl	2140(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2160(%rsp), %rdi        # 8-byte Reload
	movq	2392(%rsp), %rsi        # 8-byte Reload
	movq	2432(%rsp), %rdx        # 8-byte Reload
	movq	2168(%rsp), %rcx        # 8-byte Reload
	movq	2368(%rsp), %r8         # 8-byte Reload
	movq	2184(%rsp), %r9         # 8-byte Reload
	movq	2192(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2168(%rsp), %rdi        # 8-byte Reload
	movq	2392(%rsp), %rsi        # 8-byte Reload
	movq	10960(%rsp), %rdx       # 8-byte Reload
	movq	2168(%rsp), %rcx        # 8-byte Reload
	movq	2224(%rsp), %r8         # 8-byte Reload
	movq	2184(%rsp), %r9         # 8-byte Reload
	movq	2192(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2432(%rsp), %rax        # 8-byte Reload
	shlq	$3, %rax
	movq	10960(%rsp), %rcx       # 8-byte Reload
	addq	%rax, %rcx
	movq	2128(%rsp), %rdi        # 8-byte Reload
	movq	2392(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	2168(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 2088(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	2336(%rsp), %r8         # 8-byte Reload
	movq	2184(%rsp), %r9         # 8-byte Reload
	movq	2192(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2328(%rsp), %rdi        # 8-byte Reload
	movq	2120(%rsp), %rsi        # 8-byte Reload
	movq	2152(%rsp), %rdx        # 8-byte Reload
	movq	2304(%rsp), %rcx        # 8-byte Reload
	movq	2248(%rsp), %r8         # 8-byte Reload
	movl	2140(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2168(%rsp), %rdi        # 8-byte Reload
	movq	2392(%rsp), %rsi        # 8-byte Reload
	movq	2088(%rsp), %rdx        # 8-byte Reload
	movq	2168(%rsp), %rcx        # 8-byte Reload
	movq	2336(%rsp), %r8         # 8-byte Reload
	movq	2184(%rsp), %r9         # 8-byte Reload
	movq	2192(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	10960(%rsp), %rax       # 8-byte Reload
	movq	2432(%rsp), %rcx        # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
	movq	2128(%rsp), %rdi        # 8-byte Reload
	movq	2392(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 2080(%rsp)       # 8-byte Spill
	movq	2168(%rsp), %rdx        # 8-byte Reload
	movq	2304(%rsp), %rcx        # 8-byte Reload
	movq	2184(%rsp), %r8         # 8-byte Reload
	movq	2192(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	2328(%rsp), %rdi        # 8-byte Reload
	movq	2120(%rsp), %rsi        # 8-byte Reload
	movq	2152(%rsp), %rdx        # 8-byte Reload
	movq	2256(%rsp), %rcx        # 8-byte Reload
	movq	2232(%rsp), %r8         # 8-byte Reload
	movl	2140(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2160(%rsp), %rdi        # 8-byte Reload
	movq	2392(%rsp), %rsi        # 8-byte Reload
	movq	2432(%rsp), %rdx        # 8-byte Reload
	movq	2168(%rsp), %rcx        # 8-byte Reload
	movq	2368(%rsp), %r8         # 8-byte Reload
	movq	2184(%rsp), %r9         # 8-byte Reload
	movq	2192(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2168(%rsp), %rdi        # 8-byte Reload
	movq	2392(%rsp), %rsi        # 8-byte Reload
	movq	10968(%rsp), %rdx       # 8-byte Reload
	movq	2168(%rsp), %rcx        # 8-byte Reload
	movq	2240(%rsp), %r8         # 8-byte Reload
	movq	2184(%rsp), %r9         # 8-byte Reload
	movq	2192(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2432(%rsp), %rax        # 8-byte Reload
	shlq	$3, %rax
	movq	10968(%rsp), %rcx       # 8-byte Reload
	addq	%rax, %rcx
	movq	2128(%rsp), %rdi        # 8-byte Reload
	movq	2392(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	2168(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 2072(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	2256(%rsp), %r8         # 8-byte Reload
	movq	2184(%rsp), %r9         # 8-byte Reload
	movq	2192(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2328(%rsp), %rdi        # 8-byte Reload
	movq	2120(%rsp), %rsi        # 8-byte Reload
	movq	2152(%rsp), %rdx        # 8-byte Reload
	movq	2272(%rsp), %rcx        # 8-byte Reload
	movq	2248(%rsp), %r8         # 8-byte Reload
	movl	2140(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2168(%rsp), %rdi        # 8-byte Reload
	movq	2392(%rsp), %rsi        # 8-byte Reload
	movq	2072(%rsp), %rdx        # 8-byte Reload
	movq	2168(%rsp), %rcx        # 8-byte Reload
	movq	2256(%rsp), %r8         # 8-byte Reload
	movq	2184(%rsp), %r9         # 8-byte Reload
	movq	2192(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	10968(%rsp), %rax       # 8-byte Reload
	movq	2432(%rsp), %rcx        # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
	movq	2128(%rsp), %rdi        # 8-byte Reload
	movq	2392(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 2064(%rsp)       # 8-byte Spill
	movq	2168(%rsp), %rdx        # 8-byte Reload
	movq	2272(%rsp), %rcx        # 8-byte Reload
	movq	2184(%rsp), %r8         # 8-byte Reload
	movq	2192(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	2328(%rsp), %rdi        # 8-byte Reload
	movq	2120(%rsp), %rsi        # 8-byte Reload
	movq	2152(%rsp), %rdx        # 8-byte Reload
	movq	2296(%rsp), %rcx        # 8-byte Reload
	movq	2264(%rsp), %r8         # 8-byte Reload
	movl	2140(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2160(%rsp), %rdi        # 8-byte Reload
	movq	2392(%rsp), %rsi        # 8-byte Reload
	vmovsd	2064(%rsp), %xmm0       # 8-byte Reload
	movq	2168(%rsp), %rdx        # 8-byte Reload
	movq	2272(%rsp), %rcx        # 8-byte Reload
	movq	2184(%rsp), %r8         # 8-byte Reload
	movq	2192(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	2168(%rsp), %rdi        # 8-byte Reload
	movq	2392(%rsp), %rsi        # 8-byte Reload
	vmovsd	2456(%rsp), %xmm0       # 8-byte Reload
	movq	2168(%rsp), %rdx        # 8-byte Reload
	movq	2280(%rsp), %rcx        # 8-byte Reload
	movq	2184(%rsp), %r8         # 8-byte Reload
	movq	2192(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	2456(%rsp), %xmm0       # 8-byte Reload
	vmovsd	2064(%rsp), %xmm1       # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	2128(%rsp), %rdi        # 8-byte Reload
	movq	2392(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	2168(%rsp), %rdx        # 8-byte Reload
	movq	2296(%rsp), %rcx        # 8-byte Reload
	movq	2184(%rsp), %r8         # 8-byte Reload
	movq	2192(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 2056(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	2328(%rsp), %rdi        # 8-byte Reload
	movq	2120(%rsp), %rsi        # 8-byte Reload
	movq	2152(%rsp), %rdx        # 8-byte Reload
	movq	2344(%rsp), %rcx        # 8-byte Reload
	movq	2288(%rsp), %r8         # 8-byte Reload
	movl	2140(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2160(%rsp), %rdi        # 8-byte Reload
	movq	2392(%rsp), %rsi        # 8-byte Reload
	vmovsd	2056(%rsp), %xmm0       # 8-byte Reload
	movq	2168(%rsp), %rdx        # 8-byte Reload
	movq	2296(%rsp), %rcx        # 8-byte Reload
	movq	2184(%rsp), %r8         # 8-byte Reload
	movq	2192(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	2168(%rsp), %rdi        # 8-byte Reload
	movq	2392(%rsp), %rsi        # 8-byte Reload
	vmovsd	2080(%rsp), %xmm0       # 8-byte Reload
	movq	2168(%rsp), %rdx        # 8-byte Reload
	movq	2304(%rsp), %rcx        # 8-byte Reload
	movq	2184(%rsp), %r8         # 8-byte Reload
	movq	2192(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	2080(%rsp), %xmm0       # 8-byte Reload
	vmovsd	2056(%rsp), %xmm1       # 8-byte Reload
	vsubsd	%xmm1, %xmm0, %xmm2
	movq	2128(%rsp), %rdi        # 8-byte Reload
	movq	2392(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	2168(%rsp), %rdx        # 8-byte Reload
	movq	2344(%rsp), %rcx        # 8-byte Reload
	movq	2184(%rsp), %r8         # 8-byte Reload
	movq	2192(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 2048(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	2328(%rsp), %rdi        # 8-byte Reload
	movq	2120(%rsp), %rsi        # 8-byte Reload
	movq	2152(%rsp), %rdx        # 8-byte Reload
	movq	2320(%rsp), %rcx        # 8-byte Reload
	movq	2312(%rsp), %r8         # 8-byte Reload
	movl	2140(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2160(%rsp), %rdi        # 8-byte Reload
	movq	2392(%rsp), %rsi        # 8-byte Reload
	movq	2088(%rsp), %rdx        # 8-byte Reload
	movq	2168(%rsp), %rcx        # 8-byte Reload
	movq	2336(%rsp), %r8         # 8-byte Reload
	movq	2184(%rsp), %r9         # 8-byte Reload
	movq	2192(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2168(%rsp), %rdi        # 8-byte Reload
	movq	2392(%rsp), %rsi        # 8-byte Reload
	vmovsd	2048(%rsp), %xmm0       # 8-byte Reload
	movq	2168(%rsp), %rdx        # 8-byte Reload
	movq	2344(%rsp), %rcx        # 8-byte Reload
	movq	2184(%rsp), %r8         # 8-byte Reload
	movq	2192(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	10960(%rsp), %rax       # 8-byte Reload
	movq	2432(%rsp), %rcx        # 8-byte Reload
	vmovsd	2048(%rsp), %xmm0       # 8-byte Reload
	vmovsd	%xmm0, (%rax,%rcx,8)
.Ltmp362:
	.loc	2 866 0                 # eispack.c:866:0
	movq	2112(%rsp), %rdi        # 8-byte Reload
	movq	2120(%rsp), %rsi        # 8-byte Reload
	movq	2152(%rsp), %rdx        # 8-byte Reload
	movq	2384(%rsp), %rcx        # 8-byte Reload
	movq	2352(%rsp), %r8         # 8-byte Reload
	movl	2140(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2160(%rsp), %rdi        # 8-byte Reload
	movq	2392(%rsp), %rsi        # 8-byte Reload
	movq	2168(%rsp), %rdx        # 8-byte Reload
	movq	2184(%rsp), %rcx        # 8-byte Reload
	movq	2360(%rsp), %r8         # 8-byte Reload
	movq	2184(%rsp), %r9         # 8-byte Reload
	movq	2192(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2168(%rsp), %rdi        # 8-byte Reload
	movq	2392(%rsp), %rsi        # 8-byte Reload
	movq	2432(%rsp), %rdx        # 8-byte Reload
	movq	2168(%rsp), %rcx        # 8-byte Reload
	movq	2368(%rsp), %r8         # 8-byte Reload
	movq	2184(%rsp), %r9         # 8-byte Reload
	movq	2192(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2432(%rsp), %rax        # 8-byte Reload
	addq	$1, %rax
	movq	2128(%rsp), %rdi        # 8-byte Reload
	movq	2392(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	2168(%rsp), %rcx        # 8-byte Reload
	movq	2384(%rsp), %r8         # 8-byte Reload
	movq	2184(%rsp), %r9         # 8-byte Reload
	movq	2192(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 2040(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	2112(%rsp), %rdi        # 8-byte Reload
	movq	2120(%rsp), %rsi        # 8-byte Reload
	movq	2152(%rsp), %rdx        # 8-byte Reload
	movq	2416(%rsp), %rcx        # 8-byte Reload
	movq	2376(%rsp), %r8         # 8-byte Reload
	movl	2140(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2168(%rsp), %rdi        # 8-byte Reload
	movq	2392(%rsp), %rsi        # 8-byte Reload
	movq	2040(%rsp), %rdx        # 8-byte Reload
	movq	2168(%rsp), %rcx        # 8-byte Reload
	movq	2384(%rsp), %r8         # 8-byte Reload
	movq	2184(%rsp), %r9         # 8-byte Reload
	movq	2192(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2040(%rsp), %rax        # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	2128(%rsp), %rdi        # 8-byte Reload
	movq	2424(%rsp), %rsi        # 8-byte Reload
	movq	2168(%rsp), %rcx        # 8-byte Reload
	movq	2416(%rsp), %r8         # 8-byte Reload
	movq	2184(%rsp), %r9         # 8-byte Reload
	movq	2192(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 2036(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	2112(%rsp), %rdi        # 8-byte Reload
	movq	2120(%rsp), %rsi        # 8-byte Reload
	movq	2152(%rsp), %rdx        # 8-byte Reload
	movq	2176(%rsp), %rcx        # 8-byte Reload
	movq	2400(%rsp), %r8         # 8-byte Reload
	movl	2140(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	8900(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	2160(%rsp), %rdi        # 8-byte Reload
	movq	2424(%rsp), %rsi        # 8-byte Reload
	movq	2168(%rsp), %rcx        # 8-byte Reload
	movq	2408(%rsp), %r8         # 8-byte Reload
	movq	2184(%rsp), %r9         # 8-byte Reload
	movq	2192(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	2036(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	2168(%rsp), %rdi        # 8-byte Reload
	movq	2424(%rsp), %rsi        # 8-byte Reload
	movq	2168(%rsp), %rcx        # 8-byte Reload
	movq	2416(%rsp), %r8         # 8-byte Reload
	movq	2184(%rsp), %r9         # 8-byte Reload
	movq	2192(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	2036(%rsp), %ebp        # 4-byte Reload
	movl	8900(%rsp), %r12d       # 4-byte Reload
	cmpl	%r12d, %ebp
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	2128(%rsp), %rdi        # 8-byte Reload
	movq	2168(%rsp), %rsi        # 8-byte Reload
	movq	2168(%rsp), %rcx        # 8-byte Reload
	movq	2176(%rsp), %r8         # 8-byte Reload
	movq	2184(%rsp), %r9         # 8-byte Reload
	movq	2192(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 2035(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	2112(%rsp), %rdi        # 8-byte Reload
	movq	2120(%rsp), %rsi        # 8-byte Reload
	movq	2152(%rsp), %rdx        # 8-byte Reload
	movq	2144(%rsp), %rcx        # 8-byte Reload
	movq	2160(%rsp), %r8         # 8-byte Reload
	movl	2140(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2104(%rsp), %rdi        # 8-byte Reload
	movq	2184(%rsp), %rsi        # 8-byte Reload
	movq	2184(%rsp), %rdx        # 8-byte Reload
	movq	2168(%rsp), %rcx        # 8-byte Reload
	movq	2096(%rsp), %r8         # 8-byte Reload
	movq	2184(%rsp), %r9         # 8-byte Reload
	movq	2192(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	2160(%rsp), %rdi        # 8-byte Reload
	movq	2184(%rsp), %rsi        # 8-byte Reload
	movq	2184(%rsp), %rdx        # 8-byte Reload
	movq	2168(%rsp), %rcx        # 8-byte Reload
	movq	2152(%rsp), %r8         # 8-byte Reload
	movq	2184(%rsp), %r9         # 8-byte Reload
	movq	2192(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	2035(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	2168(%rsp), %rdi        # 8-byte Reload
	movq	2168(%rsp), %rsi        # 8-byte Reload
	movq	2168(%rsp), %rcx        # 8-byte Reload
	movq	2176(%rsp), %r8         # 8-byte Reload
	movq	2184(%rsp), %r9         # 8-byte Reload
	movq	2192(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	2035(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	movq	2040(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 2440(%rsp)        # 8-byte Spill
	jne	.LBB9_30
	jmp	.LBB9_29
.Ltmp363:
.LBB9_30:                               # %.loopexit28
                                        #   in Loop: Header=BB9_8 Depth=1
	movabsq	$0, %rax
	movabsq	$1, %rcx
	leaq	.L.str311, %rdx
	leaq	.L.str792, %rsi
	movabsq	$2, %rdi
	leaq	.L.str313, %r8
	movabsq	$3, %r9
	leaq	.L.str108, %r10
	movabsq	$873, %r11              # imm = 0x369
	leaq	.L.str59144, %rbx
	leaq	.L.str310, %r14
	leaq	.L.str312, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 2024(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 2016(%rsp)        # 8-byte Spill
	leaq	.L.str113, %rax
	movq	%rax, 2008(%rsp)        # 8-byte Spill
	leaq	.L.str1499, %rax
	movq	%rax, 2000(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	.loc	2 873 0                 # eispack.c:873:0
.Ltmp364:
	movq	%rdi, 1992(%rsp)        # 8-byte Spill
	movq	%r11, %rdi
	movq	%rsi, 1984(%rsp)        # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, 1976(%rsp)        # 8-byte Spill
	movq	%r14, %rdx
	movq	%rax, 1968(%rsp)        # 8-byte Spill
	movq	1976(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 1960(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	1968(%rsp), %rax        # 8-byte Reload
	movq	%r8, 1952(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 1944(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r15, 1936(%rsp)        # 8-byte Spill
	movl	%ebp, 1932(%rsp)        # 4-byte Spill
	movl	%r12d, 1928(%rsp)       # 4-byte Spill
	movq	%r13, 1920(%rsp)        # 8-byte Spill
	movq	%r14, 1912(%rsp)        # 8-byte Spill
	movq	%rbx, 1904(%rsp)        # 8-byte Spill
	movq	%r10, 1896(%rsp)        # 8-byte Spill
	movq	%r11, 1888(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	1992(%rsp), %rdi        # 8-byte Reload
	movq	2016(%rsp), %rsi        # 8-byte Reload
	movq	2024(%rsp), %rdx        # 8-byte Reload
	movq	2024(%rsp), %rcx        # 8-byte Reload
	movq	2000(%rsp), %r8         # 8-byte Reload
	movq	2024(%rsp), %r9         # 8-byte Reload
	movq	1984(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	8880(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	1960(%rsp), %rdi        # 8-byte Reload
	movq	2016(%rsp), %rsi        # 8-byte Reload
	movq	1960(%rsp), %rcx        # 8-byte Reload
	movq	2008(%rsp), %r8         # 8-byte Reload
	movq	2024(%rsp), %r9         # 8-byte Reload
	movq	1984(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	8880(%rsp), %ebp        # 4-byte Reload
	cmpl	$0, %ebp
	setl	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %r12d
	movl	%r12d, %edx
	movq	1920(%rsp), %rdi        # 8-byte Reload
	movq	1960(%rsp), %rsi        # 8-byte Reload
	movq	1960(%rsp), %rcx        # 8-byte Reload
	movq	1976(%rsp), %r8         # 8-byte Reload
	movq	2024(%rsp), %r9         # 8-byte Reload
	movq	1984(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 1887(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	1888(%rsp), %rdi        # 8-byte Reload
	movq	1904(%rsp), %rsi        # 8-byte Reload
	movq	1912(%rsp), %rdx        # 8-byte Reload
	movq	1936(%rsp), %rcx        # 8-byte Reload
	movq	1992(%rsp), %r8         # 8-byte Reload
	movl	1932(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1944(%rsp), %rdi        # 8-byte Reload
	movq	2024(%rsp), %rsi        # 8-byte Reload
	movq	2024(%rsp), %rdx        # 8-byte Reload
	movq	1960(%rsp), %rcx        # 8-byte Reload
	movq	1896(%rsp), %r8         # 8-byte Reload
	movq	2024(%rsp), %r9         # 8-byte Reload
	movq	1984(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1992(%rsp), %rdi        # 8-byte Reload
	movq	2024(%rsp), %rsi        # 8-byte Reload
	movq	2024(%rsp), %rdx        # 8-byte Reload
	movq	1960(%rsp), %rcx        # 8-byte Reload
	movq	1952(%rsp), %r8         # 8-byte Reload
	movq	2024(%rsp), %r9         # 8-byte Reload
	movq	1984(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	1887(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	1960(%rsp), %rdi        # 8-byte Reload
	movq	1960(%rsp), %rsi        # 8-byte Reload
	movq	1960(%rsp), %rcx        # 8-byte Reload
	movq	1976(%rsp), %r8         # 8-byte Reload
	movq	2024(%rsp), %r9         # 8-byte Reload
	movq	1984(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	1887(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	movq	2024(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 1872(%rsp)        # 8-byte Spill
	jne	.LBB9_15
.LBB9_31:                               # %.lr.ph34
                                        #   Parent Loop BB9_8 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB9_32 Depth 3
	movq	1872(%rsp), %rax        # 8-byte Reload
	movabsq	$1, %rcx
	movabsq	$0, %rdx
	leaq	.L.str325, %r8
	leaq	.L.str792, %rsi
	movabsq	$877, %rdi              # imm = 0x36D
	leaq	.L.str59144, %r9
	leaq	.L.str313, %r10
	leaq	.L.str324, %r11
	movabsq	$2, %rbx
	movl	$0, %ebp
	movl	$1, %r14d
	movabsq	$19134, %r15            # imm = 0x4ABE
	movabsq	$64, %r12
	leaq	.L.str323, %r13
	movq	%rax, 1864(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 1856(%rsp)        # 8-byte Spill
	leaq	.L.str322, %rax
	movq	%rax, 1848(%rsp)        # 8-byte Spill
	movabsq	$35, %rax
	movq	%rax, 1840(%rsp)        # 8-byte Spill
	leaq	.L.str321, %rax
	movq	%rax, 1832(%rsp)        # 8-byte Spill
	leaq	.L.str51136, %rax
	movq	%rax, 1824(%rsp)        # 8-byte Spill
	movabsq	$879, %rax              # imm = 0x36F
	movq	%rax, 1816(%rsp)        # 8-byte Spill
	movabsq	$12, %rax
	movq	%rax, 1808(%rsp)        # 8-byte Spill
	leaq	.L.str314, %rax
	movq	%rax, 1800(%rsp)        # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, 1792(%rsp)        # 8-byte Spill
	leaq	.L.str320, %rax
	movq	%rax, 1784(%rsp)        # 8-byte Spill
	leaq	.L.str319, %rax
	movq	%rax, 1776(%rsp)        # 8-byte Spill
	movabsq	$876, %rax              # imm = 0x36C
	movq	%rax, 1768(%rsp)        # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, 1760(%rsp)        # 8-byte Spill
	leaq	.L.str160, %rax
	movq	%rax, 1752(%rsp)        # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 1744(%rsp)        # 8-byte Spill
	leaq	.L.str318, %rax
	movq	%rax, 1736(%rsp)        # 8-byte Spill
	leaq	.L.str317, %rax
	movq	%rax, 1728(%rsp)        # 8-byte Spill
	movabsq	$875, %rax              # imm = 0x36B
	movq	%rax, 1720(%rsp)        # 8-byte Spill
	leaq	.L.str85170, %rax
	movq	%rax, 1712(%rsp)        # 8-byte Spill
	leaq	.L.str316, %rax
	movq	%rax, 1704(%rsp)        # 8-byte Spill
	leaq	.L.str315, %rax
	movq	%rax, 1696(%rsp)        # 8-byte Spill
	leaq	.L.str1499, %rax
	movq	%rax, 1688(%rsp)        # 8-byte Spill
	leaq	.L.str310, %rax
	movq	%rax, 1680(%rsp)        # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 1672(%rsp)        # 8-byte Spill
	movabsq	$48, %rax
	.loc	2 875 0                 # eispack.c:875:0
.Ltmp365:
	movq	%rax, 1664(%rsp)        # 8-byte Spill
	movq	1672(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 1656(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 1648(%rsp)        # 8-byte Spill
	movq	%r9, %rsi
	movq	%rdx, 1640(%rsp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	1800(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 1632(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	1664(%rsp), %rax        # 8-byte Reload
	movq	%r8, 1624(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 1616(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movl	%r14d, 1612(%rsp)       # 4-byte Spill
	movq	%r15, 1600(%rsp)        # 8-byte Spill
	movl	%ebp, 1596(%rsp)        # 4-byte Spill
	movq	%r12, 1584(%rsp)        # 8-byte Spill
	movq	%r13, 1576(%rsp)        # 8-byte Spill
	movq	%rbx, 1568(%rsp)        # 8-byte Spill
	movq	%r10, 1560(%rsp)        # 8-byte Spill
	movq	%r11, 1552(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	1568(%rsp), %rdi        # 8-byte Reload
	movq	1584(%rsp), %rsi        # 8-byte Reload
	movq	1640(%rsp), %rdx        # 8-byte Reload
	movq	1640(%rsp), %rcx        # 8-byte Reload
	movq	1688(%rsp), %r8         # 8-byte Reload
	movq	1632(%rsp), %r9         # 8-byte Reload
	movq	1680(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1632(%rsp), %rdi        # 8-byte Reload
	movq	1584(%rsp), %rsi        # 8-byte Reload
	movq	1640(%rsp), %rdx        # 8-byte Reload
	movq	1632(%rsp), %rcx        # 8-byte Reload
	movq	1696(%rsp), %r8         # 8-byte Reload
	movq	1632(%rsp), %r9         # 8-byte Reload
	movq	1704(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1600(%rsp), %rdi        # 8-byte Reload
	movq	1584(%rsp), %rsi        # 8-byte Reload
	movq	1864(%rsp), %rdx        # 8-byte Reload
	movq	1632(%rsp), %rcx        # 8-byte Reload
	movq	1800(%rsp), %r8         # 8-byte Reload
	movq	1640(%rsp), %r9         # 8-byte Reload
	movq	1704(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1720(%rsp), %rdi        # 8-byte Reload
	movq	1616(%rsp), %rsi        # 8-byte Reload
	movq	1560(%rsp), %rdx        # 8-byte Reload
	movq	1728(%rsp), %rcx        # 8-byte Reload
	movq	1744(%rsp), %r8         # 8-byte Reload
	movl	1596(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1568(%rsp), %rdi        # 8-byte Reload
	movq	1584(%rsp), %rsi        # 8-byte Reload
	movq	1864(%rsp), %rdx        # 8-byte Reload
	movq	1632(%rsp), %rcx        # 8-byte Reload
	movq	1800(%rsp), %r8         # 8-byte Reload
	movq	1640(%rsp), %r9         # 8-byte Reload
	movq	1648(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1632(%rsp), %rdi        # 8-byte Reload
	movq	1584(%rsp), %rsi        # 8-byte Reload
	movq	10968(%rsp), %rdx       # 8-byte Reload
	movq	1632(%rsp), %rcx        # 8-byte Reload
	movq	1712(%rsp), %r8         # 8-byte Reload
	movq	1640(%rsp), %r9         # 8-byte Reload
	movq	1648(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1864(%rsp), %rax        # 8-byte Reload
	shlq	$3, %rax
	movq	10968(%rsp), %rcx       # 8-byte Reload
	addq	%rax, %rcx
	movq	1600(%rsp), %rdi        # 8-byte Reload
	movq	1584(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	1632(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 1544(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	1728(%rsp), %r8         # 8-byte Reload
	movq	1640(%rsp), %r9         # 8-byte Reload
	movq	1648(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1720(%rsp), %rdi        # 8-byte Reload
	movq	1616(%rsp), %rsi        # 8-byte Reload
	movq	1560(%rsp), %rdx        # 8-byte Reload
	movq	1736(%rsp), %rcx        # 8-byte Reload
	movq	1760(%rsp), %r8         # 8-byte Reload
	movl	1596(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1632(%rsp), %rdi        # 8-byte Reload
	movq	1584(%rsp), %rsi        # 8-byte Reload
	movq	1544(%rsp), %rdx        # 8-byte Reload
	movq	1632(%rsp), %rcx        # 8-byte Reload
	movq	1728(%rsp), %r8         # 8-byte Reload
	movq	1640(%rsp), %r9         # 8-byte Reload
	movq	1648(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	10968(%rsp), %rax       # 8-byte Reload
	movq	1864(%rsp), %rcx        # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
	movq	1600(%rsp), %rdi        # 8-byte Reload
	movq	1584(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 1536(%rsp)       # 8-byte Spill
	movq	1632(%rsp), %rdx        # 8-byte Reload
	movq	1736(%rsp), %rcx        # 8-byte Reload
	movq	1640(%rsp), %r8         # 8-byte Reload
	movq	1648(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
.Ltmp366:
	#DEBUG_VALUE: tred1:f <- [RSP+1536]
	.loc	2 876 0                 # eispack.c:876:0
	movq	1768(%rsp), %rdi        # 8-byte Reload
	movq	1616(%rsp), %rsi        # 8-byte Reload
	movq	1560(%rsp), %rdx        # 8-byte Reload
	movq	1776(%rsp), %rcx        # 8-byte Reload
	movq	1744(%rsp), %r8         # 8-byte Reload
	movl	1596(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1568(%rsp), %rdi        # 8-byte Reload
	movq	1584(%rsp), %rsi        # 8-byte Reload
	movq	1864(%rsp), %rdx        # 8-byte Reload
	movq	1632(%rsp), %rcx        # 8-byte Reload
	movq	1800(%rsp), %r8         # 8-byte Reload
	movq	1640(%rsp), %r9         # 8-byte Reload
	movq	1648(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1632(%rsp), %rdi        # 8-byte Reload
	movq	1584(%rsp), %rsi        # 8-byte Reload
	movq	10960(%rsp), %rdx       # 8-byte Reload
	movq	1632(%rsp), %rcx        # 8-byte Reload
	movq	1752(%rsp), %r8         # 8-byte Reload
	movq	1640(%rsp), %r9         # 8-byte Reload
	movq	1648(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1864(%rsp), %rax        # 8-byte Reload
	shlq	$3, %rax
	movq	10960(%rsp), %rcx       # 8-byte Reload
	addq	%rax, %rcx
	movq	1600(%rsp), %rdi        # 8-byte Reload
	movq	1584(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	1632(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 1528(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	1776(%rsp), %r8         # 8-byte Reload
	movq	1640(%rsp), %r9         # 8-byte Reload
	movq	1648(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1768(%rsp), %rdi        # 8-byte Reload
	movq	1616(%rsp), %rsi        # 8-byte Reload
	movq	1560(%rsp), %rdx        # 8-byte Reload
	movq	1784(%rsp), %rcx        # 8-byte Reload
	movq	1760(%rsp), %r8         # 8-byte Reload
	movl	1596(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1632(%rsp), %rdi        # 8-byte Reload
	movq	1584(%rsp), %rsi        # 8-byte Reload
	movq	1528(%rsp), %rdx        # 8-byte Reload
	movq	1632(%rsp), %rcx        # 8-byte Reload
	movq	1776(%rsp), %r8         # 8-byte Reload
	movq	1640(%rsp), %r9         # 8-byte Reload
	movq	1648(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	10960(%rsp), %rax       # 8-byte Reload
	movq	1864(%rsp), %rcx        # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
	movq	1600(%rsp), %rdi        # 8-byte Reload
	movq	1584(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 1520(%rsp)       # 8-byte Spill
	movq	1632(%rsp), %rdx        # 8-byte Reload
	movq	1784(%rsp), %rcx        # 8-byte Reload
	movq	1640(%rsp), %r8         # 8-byte Reload
	movq	1648(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
.Ltmp367:
	#DEBUG_VALUE: tred1:g <- [RSP+1520]
	.loc	2 879 0                 # eispack.c:879:0
	movq	1816(%rsp), %rdi        # 8-byte Reload
	movq	1616(%rsp), %rsi        # 8-byte Reload
	movq	1560(%rsp), %rdx        # 8-byte Reload
	movq	1832(%rsp), %rcx        # 8-byte Reload
	movq	1792(%rsp), %r8         # 8-byte Reload
	movl	1596(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1632(%rsp), %rdi        # 8-byte Reload
	movq	1584(%rsp), %rsi        # 8-byte Reload
	movq	1864(%rsp), %rdx        # 8-byte Reload
	movq	1632(%rsp), %rcx        # 8-byte Reload
	movq	1800(%rsp), %r8         # 8-byte Reload
	movq	1640(%rsp), %r9         # 8-byte Reload
	movq	1648(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1864(%rsp), %rax        # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %r14d
	movl	%r14d, %edx
	movq	1600(%rsp), %rdi        # 8-byte Reload
	movq	1856(%rsp), %rsi        # 8-byte Reload
	movq	1632(%rsp), %rcx        # 8-byte Reload
	movq	1832(%rsp), %r8         # 8-byte Reload
	movq	1640(%rsp), %r9         # 8-byte Reload
	movq	1648(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 1516(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	1816(%rsp), %rdi        # 8-byte Reload
	movq	1616(%rsp), %rsi        # 8-byte Reload
	movq	1560(%rsp), %rdx        # 8-byte Reload
	movq	1848(%rsp), %rcx        # 8-byte Reload
	movq	1808(%rsp), %r8         # 8-byte Reload
	movl	1596(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	10988(%rsp), %r9d       # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	1568(%rsp), %rdi        # 8-byte Reload
	movq	1856(%rsp), %rsi        # 8-byte Reload
	movq	1632(%rsp), %rcx        # 8-byte Reload
	movq	1824(%rsp), %r8         # 8-byte Reload
	movq	1640(%rsp), %r9         # 8-byte Reload
	movq	1648(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	1516(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r14d
	movl	%r14d, %edx
	movq	1632(%rsp), %rdi        # 8-byte Reload
	movq	1856(%rsp), %rsi        # 8-byte Reload
	movq	1632(%rsp), %rcx        # 8-byte Reload
	movq	1832(%rsp), %r8         # 8-byte Reload
	movq	1640(%rsp), %r9         # 8-byte Reload
	movq	1648(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	1516(%rsp), %ebp        # 4-byte Reload
	movl	10988(%rsp), %r14d      # 4-byte Reload
	imull	%r14d, %ebp
.Ltmp368:
	.loc	2 877 0                 # eispack.c:877:0
	movl	%ebp, %esi
	movl	%esi, %edx
	movq	1600(%rsp), %rdi        # 8-byte Reload
	movq	1856(%rsp), %rsi        # 8-byte Reload
	movq	1632(%rsp), %rcx        # 8-byte Reload
	movq	1848(%rsp), %r8         # 8-byte Reload
	movq	1640(%rsp), %r9         # 8-byte Reload
	movq	1648(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%ebp, 1512(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	1656(%rsp), %rdi        # 8-byte Reload
	movq	1616(%rsp), %rsi        # 8-byte Reload
	movq	1560(%rsp), %rdx        # 8-byte Reload
	movq	1576(%rsp), %rcx        # 8-byte Reload
	movq	1840(%rsp), %r8         # 8-byte Reload
	movl	1596(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	1512(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	1632(%rsp), %rdi        # 8-byte Reload
	movq	1856(%rsp), %rsi        # 8-byte Reload
	movq	1632(%rsp), %rcx        # 8-byte Reload
	movq	1848(%rsp), %r8         # 8-byte Reload
	movq	1640(%rsp), %r9         # 8-byte Reload
	movq	1648(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	1512(%rsp), %ebp        # 4-byte Reload
	movslq	%ebp, %rax
	movq	1600(%rsp), %rdi        # 8-byte Reload
	movq	1584(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	1632(%rsp), %rcx        # 8-byte Reload
	movq	1576(%rsp), %r8         # 8-byte Reload
	movq	1640(%rsp), %r9         # 8-byte Reload
	movq	1648(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 1504(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	1656(%rsp), %rdi        # 8-byte Reload
	movq	1616(%rsp), %rsi        # 8-byte Reload
	movq	1560(%rsp), %rdx        # 8-byte Reload
	movq	1552(%rsp), %rcx        # 8-byte Reload
	movq	1568(%rsp), %r8         # 8-byte Reload
	movl	1596(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1632(%rsp), %rdi        # 8-byte Reload
	movq	1640(%rsp), %rsi        # 8-byte Reload
	movq	1640(%rsp), %rdx        # 8-byte Reload
	movq	1632(%rsp), %rcx        # 8-byte Reload
	movq	1624(%rsp), %r8         # 8-byte Reload
	movq	1640(%rsp), %r9         # 8-byte Reload
	movq	1648(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1864(%rsp), %rax        # 8-byte Reload
	movq	%rax, 1496(%rsp)        # 8-byte Spill
.Ltmp369:
.LBB9_32:                               #   Parent Loop BB9_8 Depth=1
                                        #     Parent Loop BB9_31 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movq	1496(%rsp), %rax        # 8-byte Reload
	movabsq	$1, %rcx
	leaq	.L.str341, %rdx
	movabsq	$0, %rsi
	leaq	.L.str792, %rdi
	movabsq	$2, %r8
	leaq	.L.str325, %r9
	movabsq	$3, %r10
	leaq	.L.str316, %r11
	movabsq	$877, %rbx              # imm = 0x36D
	leaq	.L.str59144, %r14
	leaq	.L.str342, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 1488(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 1480(%rsp)        # 8-byte Spill
	leaq	.L.str340, %rax
	movq	%rax, 1472(%rsp)        # 8-byte Spill
	leaq	.L.str110, %rax
	movq	%rax, 1464(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 1456(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 1448(%rsp)        # 8-byte Spill
	leaq	.L.str327, %rax
	movq	%rax, 1440(%rsp)        # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, 1432(%rsp)        # 8-byte Spill
	leaq	.L.str326, %rax
	movq	%rax, 1424(%rsp)        # 8-byte Spill
	leaq	.L.str1499, %rax
	movq	%rax, 1416(%rsp)        # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, 1408(%rsp)        # 8-byte Spill
	leaq	.L.str338, %rax
	movq	%rax, 1400(%rsp)        # 8-byte Spill
	leaq	.L.str329, %rax
	movq	%rax, 1392(%rsp)        # 8-byte Spill
	movabsq	$879, %rax              # imm = 0x36F
	movq	%rax, 1384(%rsp)        # 8-byte Spill
	leaq	.L.str339, %rax
	movq	%rax, 1376(%rsp)        # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, 1368(%rsp)        # 8-byte Spill
	leaq	.L.str334, %rax
	movq	%rax, 1360(%rsp)        # 8-byte Spill
	leaq	.L.str337, %rax
	movq	%rax, 1352(%rsp)        # 8-byte Spill
	movabsq	$11, %rax
	movq	%rax, 1344(%rsp)        # 8-byte Spill
	leaq	.L.str320, %rax
	movq	%rax, 1336(%rsp)        # 8-byte Spill
	leaq	.L.str336, %rax
	movq	%rax, 1328(%rsp)        # 8-byte Spill
	movabsq	$13, %rax
	movq	%rax, 1320(%rsp)        # 8-byte Spill
	leaq	.L.str335, %rax
	movq	%rax, 1312(%rsp)        # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, 1304(%rsp)        # 8-byte Spill
	leaq	.L.str85170, %rax
	movq	%rax, 1296(%rsp)        # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 1288(%rsp)        # 8-byte Spill
	leaq	.L.str330, %rax
	movq	%rax, 1280(%rsp)        # 8-byte Spill
	leaq	.L.str333, %rax
	movq	%rax, 1272(%rsp)        # 8-byte Spill
	leaq	.L.str318, %rax
	movq	%rax, 1264(%rsp)        # 8-byte Spill
	leaq	.L.str332, %rax
	movq	%rax, 1256(%rsp)        # 8-byte Spill
	leaq	.L.str331, %rax
	movq	%rax, 1248(%rsp)        # 8-byte Spill
	leaq	.L.str160, %rax
	movq	%rax, 1240(%rsp)        # 8-byte Spill
	leaq	.L.str893, %rax
	movq	%rax, 1232(%rsp)        # 8-byte Spill
	leaq	.L.str328, %rax
	movq	%rax, 1224(%rsp)        # 8-byte Spill
	leaq	.L.str323, %rax
	movq	%rax, 1216(%rsp)        # 8-byte Spill
	leaq	.L.str314, %rax
	movq	%rax, 1208(%rsp)        # 8-byte Spill
	leaq	.L.str313, %rax
	movq	%rax, 1200(%rsp)        # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 1192(%rsp)        # 8-byte Spill
	movabsq	$48, %rax
	.loc	2 879 0                 # eispack.c:879:0
.Ltmp370:
	movq	%rax, 1184(%rsp)        # 8-byte Spill
	movq	1192(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 1176(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 1168(%rsp)        # 8-byte Spill
	movq	%r14, %rsi
	movq	%rdx, 1160(%rsp)        # 8-byte Spill
	movq	%r9, %rdx
	movq	1424(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 1152(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	1184(%rsp), %rax        # 8-byte Reload
	movq	%r8, 1144(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 1136(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r15, 1128(%rsp)        # 8-byte Spill
	movl	%ebp, 1124(%rsp)        # 4-byte Spill
	movl	%r12d, 1120(%rsp)       # 4-byte Spill
	movq	%r13, 1112(%rsp)        # 8-byte Spill
	movq	%r14, 1104(%rsp)        # 8-byte Spill
	movq	%rbx, 1096(%rsp)        # 8-byte Spill
	movq	%r10, 1088(%rsp)        # 8-byte Spill
	movq	%r11, 1080(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	1144(%rsp), %rdi        # 8-byte Reload
	movq	1448(%rsp), %rsi        # 8-byte Reload
	movq	1168(%rsp), %rdx        # 8-byte Reload
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1208(%rsp), %r8         # 8-byte Reload
	movq	1152(%rsp), %r9         # 8-byte Reload
	movq	1200(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1152(%rsp), %rdi        # 8-byte Reload
	movq	1448(%rsp), %rsi        # 8-byte Reload
	movq	1168(%rsp), %rdx        # 8-byte Reload
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1152(%rsp), %r9         # 8-byte Reload
	movq	1136(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1112(%rsp), %rdi        # 8-byte Reload
	movq	1448(%rsp), %rsi        # 8-byte Reload
	movq	1488(%rsp), %rdx        # 8-byte Reload
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1424(%rsp), %r8         # 8-byte Reload
	movq	1168(%rsp), %r9         # 8-byte Reload
	movq	1136(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1384(%rsp), %rdi        # 8-byte Reload
	movq	1104(%rsp), %rsi        # 8-byte Reload
	movq	1136(%rsp), %rdx        # 8-byte Reload
	movq	1224(%rsp), %rcx        # 8-byte Reload
	movq	1408(%rsp), %r8         # 8-byte Reload
	movl	1124(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1144(%rsp), %rdi        # 8-byte Reload
	movq	1448(%rsp), %rsi        # 8-byte Reload
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1216(%rsp), %r8         # 8-byte Reload
	movq	1168(%rsp), %r9         # 8-byte Reload
	movq	1176(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1152(%rsp), %rdi        # 8-byte Reload
	movq	1448(%rsp), %rsi        # 8-byte Reload
	movq	1488(%rsp), %rdx        # 8-byte Reload
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1424(%rsp), %r8         # 8-byte Reload
	movq	1168(%rsp), %r9         # 8-byte Reload
	movq	1176(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1488(%rsp), %rax        # 8-byte Reload
	movq	1504(%rsp), %rcx        # 8-byte Reload
	addq	%rcx, %rax
	movq	1112(%rsp), %rdi        # 8-byte Reload
	movq	1448(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1224(%rsp), %r8         # 8-byte Reload
	movq	1168(%rsp), %r9         # 8-byte Reload
	movq	1176(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 1072(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	1384(%rsp), %rdi        # 8-byte Reload
	movq	1104(%rsp), %rsi        # 8-byte Reload
	movq	1136(%rsp), %rdx        # 8-byte Reload
	movq	1392(%rsp), %rcx        # 8-byte Reload
	movq	1288(%rsp), %r8         # 8-byte Reload
	movl	1124(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1144(%rsp), %rdi        # 8-byte Reload
	movq	1448(%rsp), %rsi        # 8-byte Reload
	movq	1072(%rsp), %rdx        # 8-byte Reload
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1224(%rsp), %r8         # 8-byte Reload
	movq	1168(%rsp), %r9         # 8-byte Reload
	movq	1176(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1152(%rsp), %rdi        # 8-byte Reload
	movq	1448(%rsp), %rsi        # 8-byte Reload
	movq	11104(%rsp), %rdx       # 8-byte Reload
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1232(%rsp), %r8         # 8-byte Reload
	movq	1168(%rsp), %r9         # 8-byte Reload
	movq	1176(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1072(%rsp), %rax        # 8-byte Reload
	shlq	$3, %rax
	movq	11104(%rsp), %rcx       # 8-byte Reload
	addq	%rax, %rcx
	movq	1112(%rsp), %rdi        # 8-byte Reload
	movq	1448(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	1152(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 1064(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	1392(%rsp), %r8         # 8-byte Reload
	movq	1168(%rsp), %r9         # 8-byte Reload
	movq	1176(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1384(%rsp), %rdi        # 8-byte Reload
	movq	1104(%rsp), %rsi        # 8-byte Reload
	movq	1136(%rsp), %rdx        # 8-byte Reload
	movq	1280(%rsp), %rcx        # 8-byte Reload
	movq	1304(%rsp), %r8         # 8-byte Reload
	movl	1124(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1152(%rsp), %rdi        # 8-byte Reload
	movq	1448(%rsp), %rsi        # 8-byte Reload
	movq	1064(%rsp), %rdx        # 8-byte Reload
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1392(%rsp), %r8         # 8-byte Reload
	movq	1168(%rsp), %r9         # 8-byte Reload
	movq	1176(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	11104(%rsp), %rax       # 8-byte Reload
	movq	1072(%rsp), %rcx        # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
	movq	1112(%rsp), %rdi        # 8-byte Reload
	movq	1448(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 1056(%rsp)       # 8-byte Spill
	movq	1152(%rsp), %rdx        # 8-byte Reload
	movq	1280(%rsp), %rcx        # 8-byte Reload
	movq	1168(%rsp), %r8         # 8-byte Reload
	movq	1176(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1384(%rsp), %rdi        # 8-byte Reload
	movq	1104(%rsp), %rsi        # 8-byte Reload
	movq	1136(%rsp), %rdx        # 8-byte Reload
	movq	1248(%rsp), %rcx        # 8-byte Reload
	movq	1288(%rsp), %r8         # 8-byte Reload
	movl	1124(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1144(%rsp), %rdi        # 8-byte Reload
	movq	1448(%rsp), %rsi        # 8-byte Reload
	movq	1488(%rsp), %rdx        # 8-byte Reload
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1424(%rsp), %r8         # 8-byte Reload
	movq	1168(%rsp), %r9         # 8-byte Reload
	movq	1176(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1152(%rsp), %rdi        # 8-byte Reload
	movq	1448(%rsp), %rsi        # 8-byte Reload
	movq	10960(%rsp), %rdx       # 8-byte Reload
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1240(%rsp), %r8         # 8-byte Reload
	movq	1168(%rsp), %r9         # 8-byte Reload
	movq	1176(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1488(%rsp), %rax        # 8-byte Reload
	shlq	$3, %rax
	movq	10960(%rsp), %rcx       # 8-byte Reload
	addq	%rax, %rcx
	movq	1112(%rsp), %rdi        # 8-byte Reload
	movq	1448(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	1152(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 1048(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	1248(%rsp), %r8         # 8-byte Reload
	movq	1168(%rsp), %r9         # 8-byte Reload
	movq	1176(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1384(%rsp), %rdi        # 8-byte Reload
	movq	1104(%rsp), %rsi        # 8-byte Reload
	movq	1136(%rsp), %rdx        # 8-byte Reload
	movq	1256(%rsp), %rcx        # 8-byte Reload
	movq	1304(%rsp), %r8         # 8-byte Reload
	movl	1124(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1152(%rsp), %rdi        # 8-byte Reload
	movq	1448(%rsp), %rsi        # 8-byte Reload
	movq	1048(%rsp), %rdx        # 8-byte Reload
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1248(%rsp), %r8         # 8-byte Reload
	movq	1168(%rsp), %r9         # 8-byte Reload
	movq	1176(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	10960(%rsp), %rax       # 8-byte Reload
	movq	1488(%rsp), %rcx        # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
	movq	1112(%rsp), %rdi        # 8-byte Reload
	movq	1448(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 1040(%rsp)       # 8-byte Spill
	movq	1152(%rsp), %rdx        # 8-byte Reload
	movq	1256(%rsp), %rcx        # 8-byte Reload
	movq	1168(%rsp), %r8         # 8-byte Reload
	movq	1176(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1384(%rsp), %rdi        # 8-byte Reload
	movq	1104(%rsp), %rsi        # 8-byte Reload
	movq	1136(%rsp), %rdx        # 8-byte Reload
	movq	1272(%rsp), %rcx        # 8-byte Reload
	movq	1320(%rsp), %r8         # 8-byte Reload
	movl	1124(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1144(%rsp), %rdi        # 8-byte Reload
	movq	1448(%rsp), %rsi        # 8-byte Reload
	vmovsd	1040(%rsp), %xmm0       # 8-byte Reload
	movq	1152(%rsp), %rdx        # 8-byte Reload
	movq	1256(%rsp), %rcx        # 8-byte Reload
	movq	1168(%rsp), %r8         # 8-byte Reload
	movq	1176(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1152(%rsp), %rdi        # 8-byte Reload
	movq	1448(%rsp), %rsi        # 8-byte Reload
	vmovsd	1536(%rsp), %xmm0       # 8-byte Reload
	movq	1152(%rsp), %rdx        # 8-byte Reload
	movq	1264(%rsp), %rcx        # 8-byte Reload
	movq	1168(%rsp), %r8         # 8-byte Reload
	movq	1176(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	1536(%rsp), %xmm0       # 8-byte Reload
	vmovsd	1040(%rsp), %xmm1       # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	1112(%rsp), %rdi        # 8-byte Reload
	movq	1448(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1152(%rsp), %rdx        # 8-byte Reload
	movq	1272(%rsp), %rcx        # 8-byte Reload
	movq	1168(%rsp), %r8         # 8-byte Reload
	movq	1176(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 1032(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	1384(%rsp), %rdi        # 8-byte Reload
	movq	1104(%rsp), %rsi        # 8-byte Reload
	movq	1136(%rsp), %rdx        # 8-byte Reload
	movq	1360(%rsp), %rcx        # 8-byte Reload
	movq	1344(%rsp), %r8         # 8-byte Reload
	movl	1124(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1144(%rsp), %rdi        # 8-byte Reload
	movq	1448(%rsp), %rsi        # 8-byte Reload
	vmovsd	1032(%rsp), %xmm0       # 8-byte Reload
	movq	1152(%rsp), %rdx        # 8-byte Reload
	movq	1272(%rsp), %rcx        # 8-byte Reload
	movq	1168(%rsp), %r8         # 8-byte Reload
	movq	1176(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1152(%rsp), %rdi        # 8-byte Reload
	movq	1448(%rsp), %rsi        # 8-byte Reload
	vmovsd	1056(%rsp), %xmm0       # 8-byte Reload
	movq	1152(%rsp), %rdx        # 8-byte Reload
	movq	1280(%rsp), %rcx        # 8-byte Reload
	movq	1168(%rsp), %r8         # 8-byte Reload
	movq	1176(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	1056(%rsp), %xmm0       # 8-byte Reload
	vmovsd	1032(%rsp), %xmm1       # 8-byte Reload
	vsubsd	%xmm1, %xmm0, %xmm2
	movq	1112(%rsp), %rdi        # 8-byte Reload
	movq	1448(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1152(%rsp), %rdx        # 8-byte Reload
	movq	1360(%rsp), %rcx        # 8-byte Reload
	movq	1168(%rsp), %r8         # 8-byte Reload
	movq	1176(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 1024(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	1384(%rsp), %rdi        # 8-byte Reload
	movq	1104(%rsp), %rsi        # 8-byte Reload
	movq	1136(%rsp), %rdx        # 8-byte Reload
	movq	1312(%rsp), %rcx        # 8-byte Reload
	movq	1288(%rsp), %r8         # 8-byte Reload
	movl	1124(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1144(%rsp), %rdi        # 8-byte Reload
	movq	1448(%rsp), %rsi        # 8-byte Reload
	movq	1488(%rsp), %rdx        # 8-byte Reload
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1424(%rsp), %r8         # 8-byte Reload
	movq	1168(%rsp), %r9         # 8-byte Reload
	movq	1176(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1152(%rsp), %rdi        # 8-byte Reload
	movq	1448(%rsp), %rsi        # 8-byte Reload
	movq	10968(%rsp), %rdx       # 8-byte Reload
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1296(%rsp), %r8         # 8-byte Reload
	movq	1168(%rsp), %r9         # 8-byte Reload
	movq	1176(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1488(%rsp), %rax        # 8-byte Reload
	shlq	$3, %rax
	movq	10968(%rsp), %rcx       # 8-byte Reload
	addq	%rax, %rcx
	movq	1112(%rsp), %rdi        # 8-byte Reload
	movq	1448(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	1152(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 1016(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	1312(%rsp), %r8         # 8-byte Reload
	movq	1168(%rsp), %r9         # 8-byte Reload
	movq	1176(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1384(%rsp), %rdi        # 8-byte Reload
	movq	1104(%rsp), %rsi        # 8-byte Reload
	movq	1136(%rsp), %rdx        # 8-byte Reload
	movq	1328(%rsp), %rcx        # 8-byte Reload
	movq	1304(%rsp), %r8         # 8-byte Reload
	movl	1124(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1152(%rsp), %rdi        # 8-byte Reload
	movq	1448(%rsp), %rsi        # 8-byte Reload
	movq	1016(%rsp), %rdx        # 8-byte Reload
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1312(%rsp), %r8         # 8-byte Reload
	movq	1168(%rsp), %r9         # 8-byte Reload
	movq	1176(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	10968(%rsp), %rax       # 8-byte Reload
	movq	1488(%rsp), %rcx        # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
	movq	1112(%rsp), %rdi        # 8-byte Reload
	movq	1448(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 1008(%rsp)       # 8-byte Spill
	movq	1152(%rsp), %rdx        # 8-byte Reload
	movq	1328(%rsp), %rcx        # 8-byte Reload
	movq	1168(%rsp), %r8         # 8-byte Reload
	movq	1176(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1384(%rsp), %rdi        # 8-byte Reload
	movq	1104(%rsp), %rsi        # 8-byte Reload
	movq	1136(%rsp), %rdx        # 8-byte Reload
	movq	1352(%rsp), %rcx        # 8-byte Reload
	movq	1320(%rsp), %r8         # 8-byte Reload
	movl	1124(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1144(%rsp), %rdi        # 8-byte Reload
	movq	1448(%rsp), %rsi        # 8-byte Reload
	vmovsd	1008(%rsp), %xmm0       # 8-byte Reload
	movq	1152(%rsp), %rdx        # 8-byte Reload
	movq	1328(%rsp), %rcx        # 8-byte Reload
	movq	1168(%rsp), %r8         # 8-byte Reload
	movq	1176(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1152(%rsp), %rdi        # 8-byte Reload
	movq	1448(%rsp), %rsi        # 8-byte Reload
	vmovsd	1520(%rsp), %xmm0       # 8-byte Reload
	movq	1152(%rsp), %rdx        # 8-byte Reload
	movq	1336(%rsp), %rcx        # 8-byte Reload
	movq	1168(%rsp), %r8         # 8-byte Reload
	movq	1176(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	1520(%rsp), %xmm0       # 8-byte Reload
	vmovsd	1008(%rsp), %xmm1       # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	1112(%rsp), %rdi        # 8-byte Reload
	movq	1448(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1152(%rsp), %rdx        # 8-byte Reload
	movq	1352(%rsp), %rcx        # 8-byte Reload
	movq	1168(%rsp), %r8         # 8-byte Reload
	movq	1176(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 1000(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	1384(%rsp), %rdi        # 8-byte Reload
	movq	1104(%rsp), %rsi        # 8-byte Reload
	movq	1136(%rsp), %rdx        # 8-byte Reload
	movq	1400(%rsp), %rcx        # 8-byte Reload
	movq	1344(%rsp), %r8         # 8-byte Reload
	movl	1124(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1144(%rsp), %rdi        # 8-byte Reload
	movq	1448(%rsp), %rsi        # 8-byte Reload
	vmovsd	1000(%rsp), %xmm0       # 8-byte Reload
	movq	1152(%rsp), %rdx        # 8-byte Reload
	movq	1352(%rsp), %rcx        # 8-byte Reload
	movq	1168(%rsp), %r8         # 8-byte Reload
	movq	1176(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1152(%rsp), %rdi        # 8-byte Reload
	movq	1448(%rsp), %rsi        # 8-byte Reload
	vmovsd	1024(%rsp), %xmm0       # 8-byte Reload
	movq	1152(%rsp), %rdx        # 8-byte Reload
	movq	1360(%rsp), %rcx        # 8-byte Reload
	movq	1168(%rsp), %r8         # 8-byte Reload
	movq	1176(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	1024(%rsp), %xmm0       # 8-byte Reload
	vmovsd	1000(%rsp), %xmm1       # 8-byte Reload
	vsubsd	%xmm1, %xmm0, %xmm2
	movq	1112(%rsp), %rdi        # 8-byte Reload
	movq	1448(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1152(%rsp), %rdx        # 8-byte Reload
	movq	1400(%rsp), %rcx        # 8-byte Reload
	movq	1168(%rsp), %r8         # 8-byte Reload
	movq	1176(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 992(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	1384(%rsp), %rdi        # 8-byte Reload
	movq	1104(%rsp), %rsi        # 8-byte Reload
	movq	1136(%rsp), %rdx        # 8-byte Reload
	movq	1376(%rsp), %rcx        # 8-byte Reload
	movq	1368(%rsp), %r8         # 8-byte Reload
	movl	1124(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1144(%rsp), %rdi        # 8-byte Reload
	movq	1448(%rsp), %rsi        # 8-byte Reload
	movq	1064(%rsp), %rdx        # 8-byte Reload
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1392(%rsp), %r8         # 8-byte Reload
	movq	1168(%rsp), %r9         # 8-byte Reload
	movq	1176(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1152(%rsp), %rdi        # 8-byte Reload
	movq	1448(%rsp), %rsi        # 8-byte Reload
	vmovsd	992(%rsp), %xmm0        # 8-byte Reload
	movq	1152(%rsp), %rdx        # 8-byte Reload
	movq	1400(%rsp), %rcx        # 8-byte Reload
	movq	1168(%rsp), %r8         # 8-byte Reload
	movq	1176(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	11104(%rsp), %rax       # 8-byte Reload
	movq	1072(%rsp), %rcx        # 8-byte Reload
	vmovsd	992(%rsp), %xmm0        # 8-byte Reload
	vmovsd	%xmm0, (%rax,%rcx,8)
.Ltmp371:
	.loc	2 877 0                 # eispack.c:877:0
	movq	1096(%rsp), %rdi        # 8-byte Reload
	movq	1104(%rsp), %rsi        # 8-byte Reload
	movq	1136(%rsp), %rdx        # 8-byte Reload
	movq	1440(%rsp), %rcx        # 8-byte Reload
	movq	1408(%rsp), %r8         # 8-byte Reload
	movl	1124(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1144(%rsp), %rdi        # 8-byte Reload
	movq	1448(%rsp), %rsi        # 8-byte Reload
	movq	1152(%rsp), %rdx        # 8-byte Reload
	movq	1168(%rsp), %rcx        # 8-byte Reload
	movq	1416(%rsp), %r8         # 8-byte Reload
	movq	1168(%rsp), %r9         # 8-byte Reload
	movq	1176(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1152(%rsp), %rdi        # 8-byte Reload
	movq	1448(%rsp), %rsi        # 8-byte Reload
	movq	1488(%rsp), %rdx        # 8-byte Reload
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1424(%rsp), %r8         # 8-byte Reload
	movq	1168(%rsp), %r9         # 8-byte Reload
	movq	1176(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1488(%rsp), %rax        # 8-byte Reload
	addq	$1, %rax
	movq	1112(%rsp), %rdi        # 8-byte Reload
	movq	1448(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1168(%rsp), %r9         # 8-byte Reload
	movq	1176(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 984(%rsp)         # 8-byte Spill
	callq	trace_logger_log_int
	movq	1096(%rsp), %rdi        # 8-byte Reload
	movq	1104(%rsp), %rsi        # 8-byte Reload
	movq	1136(%rsp), %rdx        # 8-byte Reload
	movq	1472(%rsp), %rcx        # 8-byte Reload
	movq	1432(%rsp), %r8         # 8-byte Reload
	movl	1124(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1152(%rsp), %rdi        # 8-byte Reload
	movq	1448(%rsp), %rsi        # 8-byte Reload
	movq	984(%rsp), %rdx         # 8-byte Reload
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1168(%rsp), %r9         # 8-byte Reload
	movq	1176(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	984(%rsp), %rax         # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	1112(%rsp), %rdi        # 8-byte Reload
	movq	1480(%rsp), %rsi        # 8-byte Reload
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1472(%rsp), %r8         # 8-byte Reload
	movq	1168(%rsp), %r9         # 8-byte Reload
	movq	1176(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 980(%rsp)         # 4-byte Spill
	callq	trace_logger_log_int
	movq	1096(%rsp), %rdi        # 8-byte Reload
	movq	1104(%rsp), %rsi        # 8-byte Reload
	movq	1136(%rsp), %rdx        # 8-byte Reload
	movq	1160(%rsp), %rcx        # 8-byte Reload
	movq	1456(%rsp), %r8         # 8-byte Reload
	movl	1124(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	8900(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	1144(%rsp), %rdi        # 8-byte Reload
	movq	1480(%rsp), %rsi        # 8-byte Reload
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1464(%rsp), %r8         # 8-byte Reload
	movq	1168(%rsp), %r9         # 8-byte Reload
	movq	1176(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	980(%rsp), %ebp         # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	1152(%rsp), %rdi        # 8-byte Reload
	movq	1480(%rsp), %rsi        # 8-byte Reload
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1472(%rsp), %r8         # 8-byte Reload
	movq	1168(%rsp), %r9         # 8-byte Reload
	movq	1176(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	980(%rsp), %ebp         # 4-byte Reload
	movl	8900(%rsp), %r12d       # 4-byte Reload
	cmpl	%r12d, %ebp
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	1112(%rsp), %rdi        # 8-byte Reload
	movq	1152(%rsp), %rsi        # 8-byte Reload
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1160(%rsp), %r8         # 8-byte Reload
	movq	1168(%rsp), %r9         # 8-byte Reload
	movq	1176(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 979(%rsp)          # 1-byte Spill
	callq	trace_logger_log_int
	movq	1096(%rsp), %rdi        # 8-byte Reload
	movq	1104(%rsp), %rsi        # 8-byte Reload
	movq	1136(%rsp), %rdx        # 8-byte Reload
	movq	1128(%rsp), %rcx        # 8-byte Reload
	movq	1144(%rsp), %r8         # 8-byte Reload
	movl	1124(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1088(%rsp), %rdi        # 8-byte Reload
	movq	1168(%rsp), %rsi        # 8-byte Reload
	movq	1168(%rsp), %rdx        # 8-byte Reload
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1080(%rsp), %r8         # 8-byte Reload
	movq	1168(%rsp), %r9         # 8-byte Reload
	movq	1176(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1144(%rsp), %rdi        # 8-byte Reload
	movq	1168(%rsp), %rsi        # 8-byte Reload
	movq	1168(%rsp), %rdx        # 8-byte Reload
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1136(%rsp), %r8         # 8-byte Reload
	movq	1168(%rsp), %r9         # 8-byte Reload
	movq	1176(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	979(%rsp), %al          # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	1152(%rsp), %rdi        # 8-byte Reload
	movq	1152(%rsp), %rsi        # 8-byte Reload
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1160(%rsp), %r8         # 8-byte Reload
	movq	1168(%rsp), %r9         # 8-byte Reload
	movq	1176(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	979(%rsp), %al          # 1-byte Reload
	testb	$1, %al
	movq	984(%rsp), %rcx         # 8-byte Reload
	movq	%rcx, 1496(%rsp)        # 8-byte Spill
	jne	.LBB9_33
	jmp	.LBB9_32
.Ltmp372:
.LBB9_33:                               # %._crit_edge35
                                        #   in Loop: Header=BB9_31 Depth=2
	movabsq	$1, %rax
	leaq	.L.str344, %rcx
	movabsq	$0, %rdx
	leaq	.L.str792, %rsi
	movabsq	$2, %rdi
	leaq	.L.str313, %r8
	movabsq	$3, %r9
	leaq	.L.str346, %r10
	movabsq	$873, %r11              # imm = 0x369
	leaq	.L.str59144, %rbx
	leaq	.L.str316, %r14
	leaq	.L.str345, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 968(%rsp)         # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 960(%rsp)         # 8-byte Spill
	leaq	.L.str343, %rax
	movq	%rax, 952(%rsp)         # 8-byte Spill
	leaq	.L.str110, %rax
	movq	%rax, 944(%rsp)         # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 936(%rsp)         # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 928(%rsp)         # 8-byte Spill
	leaq	.L.str315, %rax
	movq	%rax, 920(%rsp)         # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, 912(%rsp)         # 8-byte Spill
	leaq	.L.str314, %rax
	movq	%rax, 904(%rsp)         # 8-byte Spill
	leaq	.L.str1499, %rax
	movq	%rax, 896(%rsp)         # 8-byte Spill
	movabsq	$8, %rax
	.loc	2 873 0                 # eispack.c:873:0
	movq	%rdi, 888(%rsp)         # 8-byte Spill
	movq	%r11, %rdi
	movq	%rsi, 880(%rsp)         # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, 872(%rsp)         # 8-byte Spill
	movq	%r14, %rdx
	movq	%rax, 864(%rsp)         # 8-byte Spill
	movq	920(%rsp), %rax         # 8-byte Reload
	movq	%rcx, 856(%rsp)         # 8-byte Spill
	movq	%rax, %rcx
	movq	864(%rsp), %rax         # 8-byte Reload
	movq	%r8, 848(%rsp)          # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 840(%rsp)          # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r15, 832(%rsp)         # 8-byte Spill
	movl	%ebp, 828(%rsp)         # 4-byte Spill
	movl	%r12d, 824(%rsp)        # 4-byte Spill
	movq	%r13, 816(%rsp)         # 8-byte Spill
	movq	%r14, 808(%rsp)         # 8-byte Spill
	movq	%rbx, 800(%rsp)         # 8-byte Spill
	movq	%r10, 792(%rsp)         # 8-byte Spill
	movq	%r11, 784(%rsp)         # 8-byte Spill
	callq	trace_logger_log0
	movq	888(%rsp), %rdi         # 8-byte Reload
	movq	928(%rsp), %rsi         # 8-byte Reload
	movq	968(%rsp), %rdx         # 8-byte Reload
	movq	872(%rsp), %rcx         # 8-byte Reload
	movq	896(%rsp), %r8          # 8-byte Reload
	movq	872(%rsp), %r9          # 8-byte Reload
	movq	880(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	968(%rsp), %rdi         # 8-byte Reload
	movq	928(%rsp), %rsi         # 8-byte Reload
	movq	1864(%rsp), %rdx        # 8-byte Reload
	movq	968(%rsp), %rcx         # 8-byte Reload
	movq	904(%rsp), %r8          # 8-byte Reload
	movq	872(%rsp), %r9          # 8-byte Reload
	movq	880(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1864(%rsp), %rax        # 8-byte Reload
	addq	$1, %rax
	movq	816(%rsp), %rdi         # 8-byte Reload
	movq	928(%rsp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	movq	968(%rsp), %rcx         # 8-byte Reload
	movq	920(%rsp), %r8          # 8-byte Reload
	movq	872(%rsp), %r9          # 8-byte Reload
	movq	880(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 776(%rsp)         # 8-byte Spill
	callq	trace_logger_log_int
	movq	784(%rsp), %rdi         # 8-byte Reload
	movq	800(%rsp), %rsi         # 8-byte Reload
	movq	808(%rsp), %rdx         # 8-byte Reload
	movq	952(%rsp), %rcx         # 8-byte Reload
	movq	912(%rsp), %r8          # 8-byte Reload
	movl	828(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	968(%rsp), %rdi         # 8-byte Reload
	movq	928(%rsp), %rsi         # 8-byte Reload
	movq	776(%rsp), %rdx         # 8-byte Reload
	movq	968(%rsp), %rcx         # 8-byte Reload
	movq	920(%rsp), %r8          # 8-byte Reload
	movq	872(%rsp), %r9          # 8-byte Reload
	movq	880(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	776(%rsp), %rax         # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	816(%rsp), %rdi         # 8-byte Reload
	movq	960(%rsp), %rsi         # 8-byte Reload
	movq	968(%rsp), %rcx         # 8-byte Reload
	movq	952(%rsp), %r8          # 8-byte Reload
	movq	872(%rsp), %r9          # 8-byte Reload
	movq	880(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 772(%rsp)         # 4-byte Spill
	callq	trace_logger_log_int
	movq	784(%rsp), %rdi         # 8-byte Reload
	movq	800(%rsp), %rsi         # 8-byte Reload
	movq	808(%rsp), %rdx         # 8-byte Reload
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	936(%rsp), %r8          # 8-byte Reload
	movl	828(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	8900(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	888(%rsp), %rdi         # 8-byte Reload
	movq	960(%rsp), %rsi         # 8-byte Reload
	movq	968(%rsp), %rcx         # 8-byte Reload
	movq	944(%rsp), %r8          # 8-byte Reload
	movq	872(%rsp), %r9          # 8-byte Reload
	movq	880(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	772(%rsp), %ebp         # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	968(%rsp), %rdi         # 8-byte Reload
	movq	960(%rsp), %rsi         # 8-byte Reload
	movq	968(%rsp), %rcx         # 8-byte Reload
	movq	952(%rsp), %r8          # 8-byte Reload
	movq	872(%rsp), %r9          # 8-byte Reload
	movq	880(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	772(%rsp), %ebp         # 4-byte Reload
	movl	8900(%rsp), %r12d       # 4-byte Reload
	cmpl	%r12d, %ebp
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	816(%rsp), %rdi         # 8-byte Reload
	movq	968(%rsp), %rsi         # 8-byte Reload
	movq	968(%rsp), %rcx         # 8-byte Reload
	movq	856(%rsp), %r8          # 8-byte Reload
	movq	872(%rsp), %r9          # 8-byte Reload
	movq	880(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 771(%rsp)          # 1-byte Spill
	callq	trace_logger_log_int
	movq	784(%rsp), %rdi         # 8-byte Reload
	movq	800(%rsp), %rsi         # 8-byte Reload
	movq	808(%rsp), %rdx         # 8-byte Reload
	movq	832(%rsp), %rcx         # 8-byte Reload
	movq	888(%rsp), %r8          # 8-byte Reload
	movl	828(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	840(%rsp), %rdi         # 8-byte Reload
	movq	872(%rsp), %rsi         # 8-byte Reload
	movq	872(%rsp), %rdx         # 8-byte Reload
	movq	968(%rsp), %rcx         # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	872(%rsp), %r9          # 8-byte Reload
	movq	880(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	888(%rsp), %rdi         # 8-byte Reload
	movq	872(%rsp), %rsi         # 8-byte Reload
	movq	872(%rsp), %rdx         # 8-byte Reload
	movq	968(%rsp), %rcx         # 8-byte Reload
	movq	848(%rsp), %r8          # 8-byte Reload
	movq	872(%rsp), %r9          # 8-byte Reload
	movq	880(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	771(%rsp), %al          # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	968(%rsp), %rdi         # 8-byte Reload
	movq	968(%rsp), %rsi         # 8-byte Reload
	movq	968(%rsp), %rcx         # 8-byte Reload
	movq	856(%rsp), %r8          # 8-byte Reload
	movq	872(%rsp), %r9          # 8-byte Reload
	movq	880(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	771(%rsp), %al          # 1-byte Reload
	testb	$1, %al
	movq	776(%rsp), %rcx         # 8-byte Reload
	movq	%rcx, 1872(%rsp)        # 8-byte Spill
	jne	.LBB9_34
	jmp	.LBB9_31
.Ltmp373:
.LBB9_34:                               # %.preheader39
                                        #   in Loop: Header=BB9_8 Depth=1
	movabsq	$0, %rax
	movabsq	$1, %rcx
	leaq	.L.str347, %rdx
	leaq	.L.str792, %rsi
	movabsq	$2, %rdi
	leaq	.L.str349, %r8
	movabsq	$3, %r9
	leaq	.L.str108, %r10
	movabsq	$884, %r11              # imm = 0x374
	leaq	.L.str59144, %rbx
	leaq	.L.str346, %r14
	leaq	.L.str348, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 760(%rsp)         # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 752(%rsp)         # 8-byte Spill
	leaq	.L.str113, %rax
	movq	%rax, 744(%rsp)         # 8-byte Spill
	leaq	.L.str1499, %rax
	movq	%rax, 736(%rsp)         # 8-byte Spill
	movabsq	$46, %rax
	.loc	2 884 0                 # eispack.c:884:0
.Ltmp374:
	movq	%rdi, 728(%rsp)         # 8-byte Spill
	movq	%r11, %rdi
	movq	%rsi, 720(%rsp)         # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, 712(%rsp)         # 8-byte Spill
	movq	%r14, %rdx
	movq	%rax, 704(%rsp)         # 8-byte Spill
	movq	712(%rsp), %rax         # 8-byte Reload
	movq	%rcx, 696(%rsp)         # 8-byte Spill
	movq	%rax, %rcx
	movq	704(%rsp), %rax         # 8-byte Reload
	movq	%r8, 688(%rsp)          # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 680(%rsp)          # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r15, 672(%rsp)         # 8-byte Spill
	movl	%ebp, 668(%rsp)         # 4-byte Spill
	movl	%r12d, 664(%rsp)        # 4-byte Spill
	movq	%r13, 656(%rsp)         # 8-byte Spill
	movq	%r14, 648(%rsp)         # 8-byte Spill
	movq	%rbx, 640(%rsp)         # 8-byte Spill
	movq	%r10, 632(%rsp)         # 8-byte Spill
	movq	%r11, 624(%rsp)         # 8-byte Spill
	callq	trace_logger_log0
	movq	728(%rsp), %rdi         # 8-byte Reload
	movq	752(%rsp), %rsi         # 8-byte Reload
	movq	760(%rsp), %rdx         # 8-byte Reload
	movq	760(%rsp), %rcx         # 8-byte Reload
	movq	736(%rsp), %r8          # 8-byte Reload
	movq	760(%rsp), %r9          # 8-byte Reload
	movq	720(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	8880(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	696(%rsp), %rdi         # 8-byte Reload
	movq	752(%rsp), %rsi         # 8-byte Reload
	movq	696(%rsp), %rcx         # 8-byte Reload
	movq	744(%rsp), %r8          # 8-byte Reload
	movq	760(%rsp), %r9          # 8-byte Reload
	movq	720(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	8880(%rsp), %ebp        # 4-byte Reload
	cmpl	$0, %ebp
	setl	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %r12d
	movl	%r12d, %edx
	movq	656(%rsp), %rdi         # 8-byte Reload
	movq	696(%rsp), %rsi         # 8-byte Reload
	movq	696(%rsp), %rcx         # 8-byte Reload
	movq	712(%rsp), %r8          # 8-byte Reload
	movq	760(%rsp), %r9          # 8-byte Reload
	movq	720(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 623(%rsp)          # 1-byte Spill
	callq	trace_logger_log_int
	movq	624(%rsp), %rdi         # 8-byte Reload
	movq	640(%rsp), %rsi         # 8-byte Reload
	movq	648(%rsp), %rdx         # 8-byte Reload
	movq	672(%rsp), %rcx         # 8-byte Reload
	movq	728(%rsp), %r8          # 8-byte Reload
	movl	668(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	680(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	760(%rsp), %rdx         # 8-byte Reload
	movq	696(%rsp), %rcx         # 8-byte Reload
	movq	632(%rsp), %r8          # 8-byte Reload
	movq	760(%rsp), %r9          # 8-byte Reload
	movq	720(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	728(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	760(%rsp), %rdx         # 8-byte Reload
	movq	696(%rsp), %rcx         # 8-byte Reload
	movq	688(%rsp), %r8          # 8-byte Reload
	movq	760(%rsp), %r9          # 8-byte Reload
	movq	720(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	623(%rsp), %al          # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	696(%rsp), %rdi         # 8-byte Reload
	movq	696(%rsp), %rsi         # 8-byte Reload
	movq	696(%rsp), %rcx         # 8-byte Reload
	movq	712(%rsp), %r8          # 8-byte Reload
	movq	760(%rsp), %r9          # 8-byte Reload
	movq	720(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	623(%rsp), %al          # 1-byte Reload
	testb	$1, %al
	movq	760(%rsp), %rcx         # 8-byte Reload
	movq	%rcx, 608(%rsp)         # 8-byte Spill
	jne	.LBB9_15
.LBB9_35:                               # %.lr.ph42
                                        #   Parent Loop BB9_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	608(%rsp), %rax         # 8-byte Reload
	movabsq	$1, %rcx
	leaq	.L.str370, %rdx
	movabsq	$0, %rsi
	leaq	.L.str792, %rdi
	movabsq	$2, %r8
	leaq	.L.str349, %r9
	movabsq	$3, %r10
	leaq	.L.str108, %r11
	movabsq	$884, %rbx              # imm = 0x374
	leaq	.L.str59144, %r14
	leaq	.L.str371, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 600(%rsp)         # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 592(%rsp)         # 8-byte Spill
	leaq	.L.str369, %rax
	movq	%rax, 584(%rsp)         # 8-byte Spill
	leaq	.L.str110, %rax
	movq	%rax, 576(%rsp)         # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 568(%rsp)         # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 560(%rsp)         # 8-byte Spill
	leaq	.L.str351, %rax
	movq	%rax, 552(%rsp)         # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, 544(%rsp)         # 8-byte Spill
	leaq	.L.str350, %rax
	movq	%rax, 536(%rsp)         # 8-byte Spill
	leaq	.L.str1499, %rax
	movq	%rax, 528(%rsp)         # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, 520(%rsp)         # 8-byte Spill
	leaq	.L.str367, %rax
	movq	%rax, 512(%rsp)         # 8-byte Spill
	leaq	.L.str364, %rax
	movq	%rax, 504(%rsp)         # 8-byte Spill
	movabsq	$889, %rax              # imm = 0x379
	movq	%rax, 496(%rsp)         # 8-byte Spill
	leaq	.L.str368, %rax
	movq	%rax, 488(%rsp)         # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, 480(%rsp)         # 8-byte Spill
	leaq	.L.str121, %rax
	movq	%rax, 472(%rsp)         # 8-byte Spill
	leaq	.L.str353, %rax
	movq	%rax, 464(%rsp)         # 8-byte Spill
	movabsq	$13, %rax
	movq	%rax, 456(%rsp)         # 8-byte Spill
	leaq	.L.str365, %rax
	movq	%rax, 448(%rsp)         # 8-byte Spill
	leaq	.L.str358, %rax
	movq	%rax, 440(%rsp)         # 8-byte Spill
	movabsq	$888, %rax              # imm = 0x378
	movq	%rax, 432(%rsp)         # 8-byte Spill
	leaq	.L.str366, %rax
	movq	%rax, 424(%rsp)         # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, 416(%rsp)         # 8-byte Spill
	leaq	.L.str893, %rax
	movq	%rax, 408(%rsp)         # 8-byte Spill
	leaq	.L.str363, %rax
	movq	%rax, 400(%rsp)         # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 392(%rsp)         # 8-byte Spill
	leaq	.L.str362, %rax
	movq	%rax, 384(%rsp)         # 8-byte Spill
	movabsq	$35, %rax
	movq	%rax, 376(%rsp)         # 8-byte Spill
	leaq	.L.str355, %rax
	movq	%rax, 368(%rsp)         # 8-byte Spill
	leaq	.L.str361, %rax
	movq	%rax, 360(%rsp)         # 8-byte Spill
	leaq	.L.str107, %rax
	movq	%rax, 352(%rsp)         # 8-byte Spill
	leaq	.L.str359, %rax
	movq	%rax, 344(%rsp)         # 8-byte Spill
	leaq	.L.str352, %rax
	movq	%rax, 336(%rsp)         # 8-byte Spill
	movabsq	$887, %rax              # imm = 0x377
	movq	%rax, 328(%rsp)         # 8-byte Spill
	leaq	.L.str360, %rax
	movq	%rax, 320(%rsp)         # 8-byte Spill
	leaq	.L.str357, %rax
	movq	%rax, 312(%rsp)         # 8-byte Spill
	leaq	.L.str356, %rax
	movq	%rax, 304(%rsp)         # 8-byte Spill
	leaq	.L.str113, %rax
	movq	%rax, 296(%rsp)         # 8-byte Spill
	leaq	.L.str354, %rax
	movq	%rax, 288(%rsp)         # 8-byte Spill
	leaq	.L.str51136, %rax
	movq	%rax, 280(%rsp)         # 8-byte Spill
	movabsq	$12, %rax
	movq	%rax, 272(%rsp)         # 8-byte Spill
	movabsq	$886, %rax              # imm = 0x376
	movq	%rax, 264(%rsp)         # 8-byte Spill
	leaq	.L.str85170, %rax
	movq	%rax, 256(%rsp)         # 8-byte Spill
	leaq	.L.str346, %rax
	movq	%rax, 248(%rsp)         # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 240(%rsp)         # 8-byte Spill
	movabsq	$48, %rax
	.loc	2 886 0                 # eispack.c:886:0
.Ltmp375:
	movq	%rax, 232(%rsp)         # 8-byte Spill
	movq	240(%rsp), %rax         # 8-byte Reload
	movq	%rdi, 224(%rsp)         # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 216(%rsp)         # 8-byte Spill
	movq	%r14, %rsi
	movq	%rdx, 208(%rsp)         # 8-byte Spill
	movq	%r9, %rdx
	movq	536(%rsp), %rax         # 8-byte Reload
	movq	%rcx, 200(%rsp)         # 8-byte Spill
	movq	%rax, %rcx
	movq	232(%rsp), %rax         # 8-byte Reload
	movq	%r8, 192(%rsp)          # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 184(%rsp)          # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r15, 176(%rsp)         # 8-byte Spill
	movl	%ebp, 172(%rsp)         # 4-byte Spill
	movl	%r12d, 168(%rsp)        # 4-byte Spill
	movq	%r13, 160(%rsp)         # 8-byte Spill
	movq	%r14, 152(%rsp)         # 8-byte Spill
	movq	%rbx, 144(%rsp)         # 8-byte Spill
	movq	%r10, 136(%rsp)         # 8-byte Spill
	movq	%r11, 128(%rsp)         # 8-byte Spill
	callq	trace_logger_log0
	movq	192(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	movq	216(%rsp), %rdx         # 8-byte Reload
	movq	216(%rsp), %rcx         # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	200(%rsp), %r9          # 8-byte Reload
	movq	248(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	200(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	movq	216(%rsp), %rdx         # 8-byte Reload
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	552(%rsp), %r8          # 8-byte Reload
	movq	200(%rsp), %r9          # 8-byte Reload
	movq	184(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	160(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	movq	600(%rsp), %rdx         # 8-byte Reload
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	536(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	184(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	264(%rsp), %rdi         # 8-byte Reload
	movq	152(%rsp), %rsi         # 8-byte Reload
	movq	184(%rsp), %rdx         # 8-byte Reload
	movq	336(%rsp), %rcx         # 8-byte Reload
	movq	392(%rsp), %r8          # 8-byte Reload
	movl	172(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	192(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	movq	600(%rsp), %rdx         # 8-byte Reload
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	536(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	200(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	movq	10968(%rsp), %rdx       # 8-byte Reload
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	256(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	600(%rsp), %rax         # 8-byte Reload
	shlq	$3, %rax
	movq	10968(%rsp), %rcx       # 8-byte Reload
	addq	%rax, %rcx
	movq	160(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	movq	%rcx, %rdx
	movq	200(%rsp), %rax         # 8-byte Reload
	movq	%rcx, 120(%rsp)         # 8-byte Spill
	movq	%rax, %rcx
	movq	336(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	264(%rsp), %rdi         # 8-byte Reload
	movq	152(%rsp), %rsi         # 8-byte Reload
	movq	184(%rsp), %rdx         # 8-byte Reload
	movq	464(%rsp), %rcx         # 8-byte Reload
	movq	416(%rsp), %r8          # 8-byte Reload
	movl	172(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	200(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	movq	120(%rsp), %rdx         # 8-byte Reload
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	336(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	10968(%rsp), %rax       # 8-byte Reload
	movq	600(%rsp), %rcx         # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
	movq	160(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	vmovsd	%xmm0, 112(%rsp)        # 8-byte Spill
	movq	200(%rsp), %rdx         # 8-byte Reload
	movq	464(%rsp), %rcx         # 8-byte Reload
	movq	216(%rsp), %r8          # 8-byte Reload
	movq	224(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
.Ltmp376:
	#DEBUG_VALUE: tred1:f <- [RSP+112]
	.loc	2 887 0                 # eispack.c:887:0
	movq	328(%rsp), %rdi         # 8-byte Reload
	movq	152(%rsp), %rsi         # 8-byte Reload
	movq	184(%rsp), %rdx         # 8-byte Reload
	movq	288(%rsp), %rcx         # 8-byte Reload
	movq	544(%rsp), %r8          # 8-byte Reload
	movl	172(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	200(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	movq	600(%rsp), %rdx         # 8-byte Reload
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	536(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	600(%rsp), %rax         # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	160(%rsp), %rdi         # 8-byte Reload
	movq	592(%rsp), %rsi         # 8-byte Reload
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	288(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 108(%rsp)         # 4-byte Spill
	callq	trace_logger_log_int
	movq	328(%rsp), %rdi         # 8-byte Reload
	movq	152(%rsp), %rsi         # 8-byte Reload
	movq	184(%rsp), %rdx         # 8-byte Reload
	movq	368(%rsp), %rcx         # 8-byte Reload
	movq	272(%rsp), %r8          # 8-byte Reload
	movl	172(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	10988(%rsp), %r9d       # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	192(%rsp), %rdi         # 8-byte Reload
	movq	592(%rsp), %rsi         # 8-byte Reload
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	280(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	108(%rsp), %ebp         # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	200(%rsp), %rdi         # 8-byte Reload
	movq	592(%rsp), %rsi         # 8-byte Reload
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	288(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	108(%rsp), %ebp         # 4-byte Reload
	movl	10988(%rsp), %r12d      # 4-byte Reload
	imull	%r12d, %ebp
	movl	%ebp, %esi
	movl	%esi, %edx
	movq	160(%rsp), %rdi         # 8-byte Reload
	movq	592(%rsp), %rsi         # 8-byte Reload
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	368(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%ebp, 104(%rsp)         # 4-byte Spill
	callq	trace_logger_log_int
	movq	328(%rsp), %rdi         # 8-byte Reload
	movq	152(%rsp), %rsi         # 8-byte Reload
	movq	184(%rsp), %rdx         # 8-byte Reload
	movq	304(%rsp), %rcx         # 8-byte Reload
	movq	520(%rsp), %r8          # 8-byte Reload
	movl	172(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	8880(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	192(%rsp), %rdi         # 8-byte Reload
	movq	592(%rsp), %rsi         # 8-byte Reload
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	296(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	104(%rsp), %ebp         # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	200(%rsp), %rdi         # 8-byte Reload
	movq	592(%rsp), %rsi         # 8-byte Reload
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	368(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	104(%rsp), %ebp         # 4-byte Reload
	movl	8880(%rsp), %r12d       # 4-byte Reload
	addl	%r12d, %ebp
	movl	%ebp, %esi
	movl	%esi, %edx
	movq	160(%rsp), %rdi         # 8-byte Reload
	movq	592(%rsp), %rsi         # 8-byte Reload
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	304(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%ebp, 100(%rsp)         # 4-byte Spill
	callq	trace_logger_log_int
	movq	328(%rsp), %rdi         # 8-byte Reload
	movq	152(%rsp), %rsi         # 8-byte Reload
	movq	184(%rsp), %rdx         # 8-byte Reload
	movq	312(%rsp), %rcx         # 8-byte Reload
	movq	376(%rsp), %r8          # 8-byte Reload
	movl	172(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	100(%rsp), %r9d         # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	200(%rsp), %rdi         # 8-byte Reload
	movq	592(%rsp), %rsi         # 8-byte Reload
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	304(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	100(%rsp), %ebp         # 4-byte Reload
	movslq	%ebp, %rax
	movq	160(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	312(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 88(%rsp)          # 8-byte Spill
	callq	trace_logger_log_int
	movq	328(%rsp), %rdi         # 8-byte Reload
	movq	152(%rsp), %rsi         # 8-byte Reload
	movq	184(%rsp), %rdx         # 8-byte Reload
	movq	440(%rsp), %rcx         # 8-byte Reload
	movq	392(%rsp), %r8          # 8-byte Reload
	movl	172(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	192(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	movq	88(%rsp), %rdx          # 8-byte Reload
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	312(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	200(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	movq	11104(%rsp), %rdx       # 8-byte Reload
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	408(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	88(%rsp), %rax          # 8-byte Reload
	shlq	$3, %rax
	movq	11104(%rsp), %rcx       # 8-byte Reload
	addq	%rax, %rcx
	movq	160(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	movq	%rcx, %rdx
	movq	200(%rsp), %rax         # 8-byte Reload
	movq	%rcx, 80(%rsp)          # 8-byte Spill
	movq	%rax, %rcx
	movq	440(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	328(%rsp), %rdi         # 8-byte Reload
	movq	152(%rsp), %rsi         # 8-byte Reload
	movq	184(%rsp), %rdx         # 8-byte Reload
	movq	344(%rsp), %rcx         # 8-byte Reload
	movq	416(%rsp), %r8          # 8-byte Reload
	movl	172(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	200(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	movq	80(%rsp), %rdx          # 8-byte Reload
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	440(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	11104(%rsp), %rax       # 8-byte Reload
	movq	88(%rsp), %rcx          # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
	movq	160(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	vmovsd	%xmm0, 72(%rsp)         # 8-byte Spill
	movq	200(%rsp), %rdx         # 8-byte Reload
	movq	344(%rsp), %rcx         # 8-byte Reload
	movq	216(%rsp), %r8          # 8-byte Reload
	movq	224(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	328(%rsp), %rdi         # 8-byte Reload
	movq	152(%rsp), %rsi         # 8-byte Reload
	movq	184(%rsp), %rdx         # 8-byte Reload
	movq	320(%rsp), %rcx         # 8-byte Reload
	movq	480(%rsp), %r8          # 8-byte Reload
	movl	172(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	192(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	movq	120(%rsp), %rdx         # 8-byte Reload
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	336(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	200(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	vmovsd	72(%rsp), %xmm0         # 8-byte Reload
	movq	200(%rsp), %rdx         # 8-byte Reload
	movq	344(%rsp), %rcx         # 8-byte Reload
	movq	216(%rsp), %r8          # 8-byte Reload
	movq	224(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	10968(%rsp), %rax       # 8-byte Reload
	movq	600(%rsp), %rcx         # 8-byte Reload
	vmovsd	72(%rsp), %xmm0         # 8-byte Reload
	vmovsd	%xmm0, (%rax,%rcx,8)
	.loc	2 888 0                 # eispack.c:888:0
	movq	432(%rsp), %rdi         # 8-byte Reload
	movq	152(%rsp), %rsi         # 8-byte Reload
	movq	184(%rsp), %rdx         # 8-byte Reload
	movq	360(%rsp), %rcx         # 8-byte Reload
	movq	544(%rsp), %r8          # 8-byte Reload
	movl	172(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	200(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	movq	8888(%rsp), %rdx        # 8-byte Reload
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	352(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	8888(%rsp), %rax        # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	160(%rsp), %rdi         # 8-byte Reload
	movq	592(%rsp), %rsi         # 8-byte Reload
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	360(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 68(%rsp)          # 4-byte Spill
	callq	trace_logger_log_int
	movq	432(%rsp), %rdi         # 8-byte Reload
	movq	152(%rsp), %rsi         # 8-byte Reload
	movq	184(%rsp), %rdx         # 8-byte Reload
	movq	384(%rsp), %rcx         # 8-byte Reload
	movq	520(%rsp), %r8          # 8-byte Reload
	movl	172(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	68(%rsp), %r9d          # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	192(%rsp), %rdi         # 8-byte Reload
	movq	592(%rsp), %rsi         # 8-byte Reload
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	360(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	104(%rsp), %ebp         # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	200(%rsp), %rdi         # 8-byte Reload
	movq	592(%rsp), %rsi         # 8-byte Reload
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	368(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	104(%rsp), %ebp         # 4-byte Reload
	movl	68(%rsp), %r12d         # 4-byte Reload
	addl	%r12d, %ebp
	movl	%ebp, %esi
	movl	%esi, %edx
	movq	160(%rsp), %rdi         # 8-byte Reload
	movq	592(%rsp), %rsi         # 8-byte Reload
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	384(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%ebp, 64(%rsp)          # 4-byte Spill
	callq	trace_logger_log_int
	movq	432(%rsp), %rdi         # 8-byte Reload
	movq	152(%rsp), %rsi         # 8-byte Reload
	movq	184(%rsp), %rdx         # 8-byte Reload
	movq	400(%rsp), %rcx         # 8-byte Reload
	movq	376(%rsp), %r8          # 8-byte Reload
	movl	172(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	64(%rsp), %r9d          # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	200(%rsp), %rdi         # 8-byte Reload
	movq	592(%rsp), %rsi         # 8-byte Reload
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	384(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	64(%rsp), %ebp          # 4-byte Reload
	movslq	%ebp, %rax
	movq	160(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	400(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 56(%rsp)          # 8-byte Spill
	callq	trace_logger_log_int
	movq	432(%rsp), %rdi         # 8-byte Reload
	movq	152(%rsp), %rsi         # 8-byte Reload
	movq	184(%rsp), %rdx         # 8-byte Reload
	movq	504(%rsp), %rcx         # 8-byte Reload
	movq	392(%rsp), %r8          # 8-byte Reload
	movl	172(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	192(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	movq	56(%rsp), %rdx          # 8-byte Reload
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	400(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	200(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	movq	11104(%rsp), %rdx       # 8-byte Reload
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	408(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	56(%rsp), %rax          # 8-byte Reload
	shlq	$3, %rax
	movq	11104(%rsp), %rcx       # 8-byte Reload
	addq	%rax, %rcx
	movq	160(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	movq	%rcx, %rdx
	movq	200(%rsp), %rax         # 8-byte Reload
	movq	%rcx, 48(%rsp)          # 8-byte Spill
	movq	%rax, %rcx
	movq	504(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	432(%rsp), %rdi         # 8-byte Reload
	movq	152(%rsp), %rsi         # 8-byte Reload
	movq	184(%rsp), %rdx         # 8-byte Reload
	movq	448(%rsp), %rcx         # 8-byte Reload
	movq	416(%rsp), %r8          # 8-byte Reload
	movl	172(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	200(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	movq	48(%rsp), %rdx          # 8-byte Reload
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	504(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	11104(%rsp), %rax       # 8-byte Reload
	movq	56(%rsp), %rcx          # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
	movq	160(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	vmovsd	%xmm0, 40(%rsp)         # 8-byte Spill
	movq	200(%rsp), %rdx         # 8-byte Reload
	movq	448(%rsp), %rcx         # 8-byte Reload
	movq	216(%rsp), %r8          # 8-byte Reload
	movq	224(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	432(%rsp), %rdi         # 8-byte Reload
	movq	152(%rsp), %rsi         # 8-byte Reload
	movq	184(%rsp), %rdx         # 8-byte Reload
	movq	424(%rsp), %rcx         # 8-byte Reload
	movq	480(%rsp), %r8          # 8-byte Reload
	movl	172(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	192(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	movq	80(%rsp), %rdx          # 8-byte Reload
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	440(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	200(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	vmovsd	40(%rsp), %xmm0         # 8-byte Reload
	movq	200(%rsp), %rdx         # 8-byte Reload
	movq	448(%rsp), %rcx         # 8-byte Reload
	movq	216(%rsp), %r8          # 8-byte Reload
	movq	224(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	11104(%rsp), %rax       # 8-byte Reload
	movq	88(%rsp), %rcx          # 8-byte Reload
	vmovsd	40(%rsp), %xmm0         # 8-byte Reload
	vmovsd	%xmm0, (%rax,%rcx,8)
	.loc	2 889 0                 # eispack.c:889:0
	movq	496(%rsp), %rdi         # 8-byte Reload
	movq	152(%rsp), %rsi         # 8-byte Reload
	movq	184(%rsp), %rdx         # 8-byte Reload
	movq	512(%rsp), %rcx         # 8-byte Reload
	movq	456(%rsp), %r8          # 8-byte Reload
	movl	172(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	192(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	vmovsd	112(%rsp), %xmm0        # 8-byte Reload
	movq	200(%rsp), %rdx         # 8-byte Reload
	movq	464(%rsp), %rcx         # 8-byte Reload
	movq	216(%rsp), %r8          # 8-byte Reload
	movq	224(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	200(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	vmovsd	8488(%rsp), %xmm0       # 8-byte Reload
	movq	200(%rsp), %rdx         # 8-byte Reload
	movq	472(%rsp), %rcx         # 8-byte Reload
	movq	216(%rsp), %r8          # 8-byte Reload
	movq	224(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	8488(%rsp), %xmm0       # 8-byte Reload
	vmovsd	112(%rsp), %xmm1        # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	160(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	200(%rsp), %rdx         # 8-byte Reload
	movq	512(%rsp), %rcx         # 8-byte Reload
	movq	216(%rsp), %r8          # 8-byte Reload
	movq	224(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 32(%rsp)         # 8-byte Spill
	callq	trace_logger_log_double
	movq	496(%rsp), %rdi         # 8-byte Reload
	movq	152(%rsp), %rsi         # 8-byte Reload
	movq	184(%rsp), %rdx         # 8-byte Reload
	movq	488(%rsp), %rcx         # 8-byte Reload
	movq	480(%rsp), %r8          # 8-byte Reload
	movl	172(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	192(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	movq	48(%rsp), %rdx          # 8-byte Reload
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	504(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	200(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	vmovsd	32(%rsp), %xmm0         # 8-byte Reload
	movq	200(%rsp), %rdx         # 8-byte Reload
	movq	512(%rsp), %rcx         # 8-byte Reload
	movq	216(%rsp), %r8          # 8-byte Reload
	movq	224(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	11104(%rsp), %rax       # 8-byte Reload
	movq	56(%rsp), %rcx          # 8-byte Reload
	vmovsd	32(%rsp), %xmm0         # 8-byte Reload
	vmovsd	%xmm0, (%rax,%rcx,8)
.Ltmp377:
	.loc	2 884 0                 # eispack.c:884:0
	movq	144(%rsp), %rdi         # 8-byte Reload
	movq	152(%rsp), %rsi         # 8-byte Reload
	movq	184(%rsp), %rdx         # 8-byte Reload
	movq	552(%rsp), %rcx         # 8-byte Reload
	movq	520(%rsp), %r8          # 8-byte Reload
	movl	172(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	192(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	movq	200(%rsp), %rdx         # 8-byte Reload
	movq	216(%rsp), %rcx         # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	200(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	movq	600(%rsp), %rdx         # 8-byte Reload
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	536(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	600(%rsp), %rax         # 8-byte Reload
	addq	$1, %rax
	movq	160(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	552(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 24(%rsp)          # 8-byte Spill
	callq	trace_logger_log_int
	movq	144(%rsp), %rdi         # 8-byte Reload
	movq	152(%rsp), %rsi         # 8-byte Reload
	movq	184(%rsp), %rdx         # 8-byte Reload
	movq	584(%rsp), %rcx         # 8-byte Reload
	movq	544(%rsp), %r8          # 8-byte Reload
	movl	172(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	200(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	movq	24(%rsp), %rdx          # 8-byte Reload
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	552(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	24(%rsp), %rax          # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	160(%rsp), %rdi         # 8-byte Reload
	movq	592(%rsp), %rsi         # 8-byte Reload
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	584(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 20(%rsp)          # 4-byte Spill
	callq	trace_logger_log_int
	movq	144(%rsp), %rdi         # 8-byte Reload
	movq	152(%rsp), %rsi         # 8-byte Reload
	movq	184(%rsp), %rdx         # 8-byte Reload
	movq	208(%rsp), %rcx         # 8-byte Reload
	movq	568(%rsp), %r8          # 8-byte Reload
	movl	172(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	8900(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	192(%rsp), %rdi         # 8-byte Reload
	movq	592(%rsp), %rsi         # 8-byte Reload
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	576(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	20(%rsp), %ebp          # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	200(%rsp), %rdi         # 8-byte Reload
	movq	592(%rsp), %rsi         # 8-byte Reload
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	584(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	20(%rsp), %ebp          # 4-byte Reload
	movl	8900(%rsp), %r12d       # 4-byte Reload
	cmpl	%r12d, %ebp
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	160(%rsp), %rdi         # 8-byte Reload
	movq	200(%rsp), %rsi         # 8-byte Reload
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	208(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 19(%rsp)           # 1-byte Spill
	callq	trace_logger_log_int
	movq	144(%rsp), %rdi         # 8-byte Reload
	movq	152(%rsp), %rsi         # 8-byte Reload
	movq	184(%rsp), %rdx         # 8-byte Reload
	movq	176(%rsp), %rcx         # 8-byte Reload
	movq	192(%rsp), %r8          # 8-byte Reload
	movl	172(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	136(%rsp), %rdi         # 8-byte Reload
	movq	216(%rsp), %rsi         # 8-byte Reload
	movq	216(%rsp), %rdx         # 8-byte Reload
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	128(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	192(%rsp), %rdi         # 8-byte Reload
	movq	216(%rsp), %rsi         # 8-byte Reload
	movq	216(%rsp), %rdx         # 8-byte Reload
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	184(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	19(%rsp), %al           # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	200(%rsp), %rdi         # 8-byte Reload
	movq	200(%rsp), %rsi         # 8-byte Reload
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	208(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	19(%rsp), %al           # 1-byte Reload
	testb	$1, %al
	movq	24(%rsp), %rcx          # 8-byte Reload
	movq	%rcx, 608(%rsp)         # 8-byte Spill
	jne	.LBB9_15
	jmp	.LBB9_35
.Ltmp378:
.LBB9_36:                               # %._crit_edge52
	movabsq	$892, %rdi              # imm = 0x37C
	leaq	.L.str59144, %rsi
	leaq	.L.str75160, %rdx
	leaq	.L.str372, %rcx
	movabsq	$1, %r8
	movl	$0, %r9d
	movl	$1, %eax
	.loc	2 892 0                 # eispack.c:892:0
	movl	$1, (%rsp)
	movl	%eax, 12(%rsp)          # 4-byte Spill
	callq	trace_logger_log0
	addq	$11128, %rsp            # imm = 0x2B78
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
.Ltmp379:
.Ltmp380:
	.size	tred1, .Ltmp380-tred1
.Lfunc_end9:
	.cfi_endproc

	.section	.rodata.cst16,"aM",@progbits,16
	.align	16
.LCPI10_0:
	.quad	9223372036854775807     # double nan
	.quad	9223372036854775807     # double nan
	.section	.rodata.cst8,"aM",@progbits,8
	.align	8
.LCPI10_1:
	.quad	4372995238176751616     # double 2.2204460492503131E-16
.LCPI10_2:
	.quad	4607182418800017408     # double 1
.LCPI10_3:
	.quad	4611686018427387904     # double 2
	.text
	.globl	tqlrat
	.align	16, 0x90
	.type	tqlrat,@function
tqlrat:                                 # @tqlrat
	.cfi_startproc
.Lfunc_begin10:
	.loc	2 431 0                 # eispack.c:431:0
# BB#0:
	pushq	%rbp
.Ltmp388:
	.cfi_def_cfa_offset 16
	pushq	%r15
.Ltmp389:
	.cfi_def_cfa_offset 24
	pushq	%r14
.Ltmp390:
	.cfi_def_cfa_offset 32
	pushq	%r13
.Ltmp391:
	.cfi_def_cfa_offset 40
	pushq	%r12
.Ltmp392:
	.cfi_def_cfa_offset 48
	pushq	%rbx
.Ltmp393:
	.cfi_def_cfa_offset 56
	subq	$9336, %rsp             # imm = 0x2478
.Ltmp394:
	.cfi_def_cfa_offset 9392
.Ltmp395:
	.cfi_offset %rbx, -56
.Ltmp396:
	.cfi_offset %r12, -48
.Ltmp397:
	.cfi_offset %r13, -40
.Ltmp398:
	.cfi_offset %r14, -32
.Ltmp399:
	.cfi_offset %r15, -24
.Ltmp400:
	.cfi_offset %rbp, -16
	movl	$0, %eax
	movabsq	$1, %rcx
	leaq	.L.str590, %r8
	movabsq	$0, %r9
	leaq	.L.str792, %r10
	movabsq	$2, %r11
	leaq	.L.str375, %rbx
	movabsq	$3, %r14
	leaq	.L.str374, %r15
	movabsq	$452, %r12              # imm = 0x1C4
	leaq	.L.str61146, %r13
	leaq	.L.str489, %rbp
	movq	%rcx, 9328(%rsp)        # 8-byte Spill
	leaq	.L.str373, %rcx
	movl	%eax, 9324(%rsp)        # 4-byte Spill
	movl	$1, %eax
	movq	%rcx, 9312(%rsp)        # 8-byte Spill
	movabsq	$19134, %rcx            # imm = 0x4ABE
	movq	%rcx, 9304(%rsp)        # 8-byte Spill
	movabsq	$32, %rcx
	movq	%rcx, 9296(%rsp)        # 8-byte Spill
	leaq	.L.str51136, %rcx
	movq	%rcx, 9288(%rsp)        # 8-byte Spill
	leaq	.L.str1499, %rcx
	movq	%rcx, 9280(%rsp)        # 8-byte Spill
	movabsq	$46, %rcx
	movq	%rcx, 9272(%rsp)        # 8-byte Spill
	movabsq	$24601, %rcx            # imm = 0x6019
	movq	%rcx, 9264(%rsp)        # 8-byte Spill
	movabsq	$64, %rcx
	movq	%rcx, 9256(%rsp)        # 8-byte Spill
	leaq	.L.str163, %rcx
	movq	%rcx, 9248(%rsp)        # 8-byte Spill
	leaq	.L.str85170, %rcx
	.loc	2 364 0 prologue_end    # eispack.c:364:0
.Ltmp401:
	movl	%eax, 9244(%rsp)        # 4-byte Spill
	movl	%edi, %eax
                                        # kill: RAX<def> EAX<kill>
	movq	%rax, 9232(%rsp)        # 8-byte Spill
	movq	9264(%rsp), %rax        # 8-byte Reload
	movl	%edi, 9228(%rsp)        # 4-byte Spill
	movq	%rax, %rdi
	movq	9296(%rsp), %rax        # 8-byte Reload
	movq	%rsi, 9216(%rsp)        # 8-byte Spill
	movq	%rax, %rsi
	movq	9232(%rsp), %rax        # 8-byte Reload
	movq	%rdx, 9208(%rsp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	9328(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 9200(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	9288(%rsp), %rax        # 8-byte Reload
	movq	%r8, 9192(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 9184(%rsp)         # 8-byte Spill
	movq	%r10, (%rsp)
	movq	%r13, 9176(%rsp)        # 8-byte Spill
	movq	%r12, 9168(%rsp)        # 8-byte Spill
	movq	%rbp, 9160(%rsp)        # 8-byte Spill
	movq	%r15, 9152(%rsp)        # 8-byte Spill
	movq	%r14, 9144(%rsp)        # 8-byte Spill
	movq	%rbx, 9136(%rsp)        # 8-byte Spill
	movq	%r10, 9128(%rsp)        # 8-byte Spill
	movq	%r11, 9120(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	9264(%rsp), %rdi        # 8-byte Reload
	movq	9256(%rsp), %rsi        # 8-byte Reload
	movq	9216(%rsp), %rdx        # 8-byte Reload
	movq	9328(%rsp), %rcx        # 8-byte Reload
	movq	9200(%rsp), %r8         # 8-byte Reload
	movq	9184(%rsp), %r9         # 8-byte Reload
	movq	9128(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	9264(%rsp), %rdi        # 8-byte Reload
	movq	9256(%rsp), %rsi        # 8-byte Reload
	movq	9208(%rsp), %rdx        # 8-byte Reload
	movq	9328(%rsp), %rcx        # 8-byte Reload
	movq	9248(%rsp), %r8         # 8-byte Reload
	movq	9184(%rsp), %r9         # 8-byte Reload
	movq	9128(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	#DEBUG_VALUE: tqlrat:n <- [RSP+9228]
	#DEBUG_VALUE: tqlrat:d <- [RSP+9216]
	#DEBUG_VALUE: tqlrat:e2 <- [RSP+9208]
.Ltmp402:
	#DEBUG_VALUE: tqlrat:ierr <- 0
	.loc	2 452 0                 # eispack.c:452:0
	movq	9168(%rsp), %rdi        # 8-byte Reload
	movq	9176(%rsp), %rsi        # 8-byte Reload
	movq	9160(%rsp), %rdx        # 8-byte Reload
	movq	9192(%rsp), %rcx        # 8-byte Reload
	movq	9272(%rsp), %r8         # 8-byte Reload
	movl	9324(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	9120(%rsp), %rdi        # 8-byte Reload
	movq	9296(%rsp), %rsi        # 8-byte Reload
	movq	9328(%rsp), %rdx        # 8-byte Reload
	movq	9184(%rsp), %rcx        # 8-byte Reload
	movq	9280(%rsp), %r8         # 8-byte Reload
	movq	9184(%rsp), %r9         # 8-byte Reload
	movq	9128(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	9228(%rsp), %esi        # 4-byte Reload
	movl	%esi, %esi
	movl	%esi, %edx
	movq	9328(%rsp), %rdi        # 8-byte Reload
	movq	9296(%rsp), %rsi        # 8-byte Reload
	movq	9328(%rsp), %rcx        # 8-byte Reload
	movq	9288(%rsp), %r8         # 8-byte Reload
	movq	9184(%rsp), %r9         # 8-byte Reload
	movq	9128(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	9228(%rsp), %esi        # 4-byte Reload
	cmpl	$1, %esi
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	9304(%rsp), %rdi        # 8-byte Reload
	movq	9328(%rsp), %rsi        # 8-byte Reload
	movq	9328(%rsp), %rcx        # 8-byte Reload
	movq	9192(%rsp), %r8         # 8-byte Reload
	movq	9184(%rsp), %r9         # 8-byte Reload
	movq	9128(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 9119(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	9168(%rsp), %rdi        # 8-byte Reload
	movq	9176(%rsp), %rsi        # 8-byte Reload
	movq	9160(%rsp), %rdx        # 8-byte Reload
	movq	9312(%rsp), %rcx        # 8-byte Reload
	movq	9120(%rsp), %r8         # 8-byte Reload
	movl	9324(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	9144(%rsp), %rdi        # 8-byte Reload
	movq	9184(%rsp), %rsi        # 8-byte Reload
	movq	9184(%rsp), %rdx        # 8-byte Reload
	movq	9328(%rsp), %rcx        # 8-byte Reload
	movq	9152(%rsp), %r8         # 8-byte Reload
	movq	9184(%rsp), %r9         # 8-byte Reload
	movq	9128(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	9120(%rsp), %rdi        # 8-byte Reload
	movq	9184(%rsp), %rsi        # 8-byte Reload
	movq	9184(%rsp), %rdx        # 8-byte Reload
	movq	9328(%rsp), %rcx        # 8-byte Reload
	movq	9136(%rsp), %r8         # 8-byte Reload
	movq	9184(%rsp), %r9         # 8-byte Reload
	movq	9128(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	9119(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, %edx
	movq	9328(%rsp), %rdi        # 8-byte Reload
	movq	9328(%rsp), %rsi        # 8-byte Reload
	movq	9328(%rsp), %rcx        # 8-byte Reload
	movq	9192(%rsp), %r8         # 8-byte Reload
	movq	9184(%rsp), %r9         # 8-byte Reload
	movq	9128(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	9119(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	movl	9324(%rsp), %eax        # 4-byte Reload
	movl	%eax, 9112(%rsp)        # 4-byte Spill
	jne	.LBB10_28
.Ltmp403:
# BB#1:                                 # %.preheader34
	movabsq	$1, %rax
	leaq	.L.str994, %rcx
	movabsq	$0, %rdx
	leaq	.L.str792, %rsi
	movabsq	$2, %rdi
	leaq	.L.str378, %r8
	movabsq	$3, %r9
	leaq	.L.str377, %r10
	movabsq	$457, %r11              # imm = 0x1C9
	leaq	.L.str61146, %rbx
	leaq	.L.str375, %r14
	leaq	.L.str376, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 9104(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 9096(%rsp)        # 8-byte Spill
	leaq	.L.str51136, %rax
	movq	%rax, 9088(%rsp)        # 8-byte Spill
	leaq	.L.str1499, %rax
	movq	%rax, 9080(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	.loc	2 457 0                 # eispack.c:457:0
.Ltmp404:
	movq	%rdi, 9072(%rsp)        # 8-byte Spill
	movq	%r11, %rdi
	movq	%rsi, 9064(%rsp)        # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, 9056(%rsp)        # 8-byte Spill
	movq	%r14, %rdx
	movq	%rcx, 9048(%rsp)        # 8-byte Spill
	movq	%r8, 9040(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 9032(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r14, 9024(%rsp)        # 8-byte Spill
	movq	%r15, 9016(%rsp)        # 8-byte Spill
	movl	%ebp, 9012(%rsp)        # 4-byte Spill
	movl	%r12d, 9008(%rsp)       # 4-byte Spill
	movq	%r13, 9000(%rsp)        # 8-byte Spill
	movq	%rbx, 8992(%rsp)        # 8-byte Spill
	movq	%r11, 8984(%rsp)        # 8-byte Spill
	movq	%r10, 8976(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	9072(%rsp), %rdi        # 8-byte Reload
	movq	9096(%rsp), %rsi        # 8-byte Reload
	movq	9104(%rsp), %rdx        # 8-byte Reload
	movq	9056(%rsp), %rcx        # 8-byte Reload
	movq	9080(%rsp), %r8         # 8-byte Reload
	movq	9056(%rsp), %r9         # 8-byte Reload
	movq	9064(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	9228(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	9104(%rsp), %rdi        # 8-byte Reload
	movq	9096(%rsp), %rsi        # 8-byte Reload
	movq	9104(%rsp), %rcx        # 8-byte Reload
	movq	9088(%rsp), %r8         # 8-byte Reload
	movq	9056(%rsp), %r9         # 8-byte Reload
	movq	9064(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	9228(%rsp), %ebp        # 4-byte Reload
	cmpl	$1, %ebp
	setg	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %r12d
	movl	%r12d, %edx
	movq	9000(%rsp), %rdi        # 8-byte Reload
	movq	9104(%rsp), %rsi        # 8-byte Reload
	movq	9104(%rsp), %rcx        # 8-byte Reload
	movq	9048(%rsp), %r8         # 8-byte Reload
	movq	9056(%rsp), %r9         # 8-byte Reload
	movq	9064(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 8975(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	8984(%rsp), %rdi        # 8-byte Reload
	movq	8992(%rsp), %rsi        # 8-byte Reload
	movq	9024(%rsp), %rdx        # 8-byte Reload
	movq	9016(%rsp), %rcx        # 8-byte Reload
	movq	9072(%rsp), %r8         # 8-byte Reload
	movl	9012(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	9032(%rsp), %rdi        # 8-byte Reload
	movq	9056(%rsp), %rsi        # 8-byte Reload
	movq	9056(%rsp), %rdx        # 8-byte Reload
	movq	9104(%rsp), %rcx        # 8-byte Reload
	movq	8976(%rsp), %r8         # 8-byte Reload
	movq	9056(%rsp), %r9         # 8-byte Reload
	movq	9064(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	9072(%rsp), %rdi        # 8-byte Reload
	movq	9056(%rsp), %rsi        # 8-byte Reload
	movq	9056(%rsp), %rdx        # 8-byte Reload
	movq	9104(%rsp), %rcx        # 8-byte Reload
	movq	9040(%rsp), %r8         # 8-byte Reload
	movq	9056(%rsp), %r9         # 8-byte Reload
	movq	9064(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	8975(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	9104(%rsp), %rdi        # 8-byte Reload
	movq	9104(%rsp), %rsi        # 8-byte Reload
	movq	9104(%rsp), %rcx        # 8-byte Reload
	movq	9048(%rsp), %r8         # 8-byte Reload
	movq	9056(%rsp), %r9         # 8-byte Reload
	movq	9064(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	8975(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	movq	9104(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 8960(%rsp)        # 8-byte Spill
	jne	.LBB10_3
.Ltmp405:
# BB#2:                                 # %._crit_edge37.thread
	movl	$0, %eax
	movabsq	$1, %rcx
	movabsq	$0, %rdx
	leaq	.L.str374, %r8
	leaq	.L.str792, %rsi
	movabsq	$466, %rdi              # imm = 0x1D2
	leaq	.L.str61146, %r9
	leaq	.L.str378, %r10
	leaq	.L.str380, %r11
	movabsq	$2, %rbx
	movl	$1, %ebp
	vxorps	%xmm0, %xmm0, %xmm0
	movabsq	$64, %r14
	leaq	.L.str1499, %r15
	leaq	.L.str57142, %r12
	movabsq	$464, %r13              # imm = 0x1D0
	movq	%rcx, 8952(%rsp)        # 8-byte Spill
	leaq	.L.str379, %rcx
	movq	%rcx, 8944(%rsp)        # 8-byte Spill
	movabsq	$28, %rcx
	movq	%rcx, 8936(%rsp)        # 8-byte Spill
	movabsq	$19134, %rcx            # imm = 0x4ABE
	movq	%rcx, 8928(%rsp)        # 8-byte Spill
	leaq	.L.str163, %rcx
	movq	%rcx, 8920(%rsp)        # 8-byte Spill
	leaq	.L.str1398, %rcx
	movq	%rcx, 8912(%rsp)        # 8-byte Spill
	movabsq	$29, %rcx
	movq	%rcx, 8904(%rsp)        # 8-byte Spill
	movabsq	$32, %rcx
	movq	%rcx, 8896(%rsp)        # 8-byte Spill
	leaq	.L.str1196, %rcx
	movq	%rcx, 8888(%rsp)        # 8-byte Spill
	movabsq	$35, %rcx
	movq	%rcx, 8880(%rsp)        # 8-byte Spill
	leaq	.L.str51136, %rcx
	movq	%rcx, 8872(%rsp)        # 8-byte Spill
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	movq	%rcx, 8864(%rsp)        # 8-byte Spill
	movabsq	$8, %rcx
.Ltmp406:
	#DEBUG_VALUE: tqlrat:f <- 0.000000e+00
	#DEBUG_VALUE: tqlrat:t <- 0.000000e+00
	.loc	2 464 0                 # eispack.c:464:0
	movq	%rdi, 8856(%rsp)        # 8-byte Spill
	movq	%r13, %rdi
	movq	%rsi, 8848(%rsp)        # 8-byte Spill
	movq	%r9, %rsi
	movq	%rdx, 8840(%rsp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	%rcx, 8832(%rsp)        # 8-byte Spill
	movq	8888(%rsp), %rcx        # 8-byte Reload
	movq	%r8, 8824(%rsp)         # 8-byte Spill
	movq	8832(%rsp), %r8         # 8-byte Reload
	movq	%r9, 8816(%rsp)         # 8-byte Spill
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movl	%eax, 8812(%rsp)        # 4-byte Spill
	movq	%r14, 8800(%rsp)        # 8-byte Spill
	movq	%r15, 8792(%rsp)        # 8-byte Spill
	vmovsd	%xmm0, 8784(%rsp)       # 8-byte Spill
	movq	%r12, 8776(%rsp)        # 8-byte Spill
	movq	%r13, 8768(%rsp)        # 8-byte Spill
	movl	%ebp, 8764(%rsp)        # 4-byte Spill
	movq	%r10, 8752(%rsp)        # 8-byte Spill
	movq	%r11, 8744(%rsp)        # 8-byte Spill
	movq	%rbx, 8736(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	8736(%rsp), %rdi        # 8-byte Reload
	movq	8896(%rsp), %rsi        # 8-byte Reload
	movq	8864(%rsp), %rdx        # 8-byte Reload
	movq	8840(%rsp), %rcx        # 8-byte Reload
	movq	8792(%rsp), %r8         # 8-byte Reload
	movq	8840(%rsp), %r9         # 8-byte Reload
	movq	8848(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	9228(%rsp), %eax        # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	8952(%rsp), %rdi        # 8-byte Reload
	movq	8896(%rsp), %rsi        # 8-byte Reload
	movq	8952(%rsp), %rcx        # 8-byte Reload
	movq	8872(%rsp), %r8         # 8-byte Reload
	movq	8840(%rsp), %r9         # 8-byte Reload
	movq	8848(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	9228(%rsp), %eax        # 4-byte Reload
	addl	$4294967295, %eax       # imm = 0xFFFFFFFF
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	8928(%rsp), %rdi        # 8-byte Reload
	movq	8896(%rsp), %rsi        # 8-byte Reload
	movq	8952(%rsp), %rcx        # 8-byte Reload
	movq	8888(%rsp), %r8         # 8-byte Reload
	movq	8840(%rsp), %r9         # 8-byte Reload
	movq	8848(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, 8732(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	8768(%rsp), %rdi        # 8-byte Reload
	movq	8816(%rsp), %rsi        # 8-byte Reload
	movq	8752(%rsp), %rdx        # 8-byte Reload
	movq	8912(%rsp), %rcx        # 8-byte Reload
	movq	8880(%rsp), %r8         # 8-byte Reload
	movl	8812(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	8732(%rsp), %eax        # 4-byte Reload
	movl	%eax, %r9d
	movl	%r9d, %edx
	movq	8952(%rsp), %rdi        # 8-byte Reload
	movq	8896(%rsp), %rsi        # 8-byte Reload
	movq	8952(%rsp), %rcx        # 8-byte Reload
	movq	8888(%rsp), %r8         # 8-byte Reload
	movq	8840(%rsp), %r9         # 8-byte Reload
	movq	8848(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	8732(%rsp), %eax        # 4-byte Reload
	movslq	%eax, %rcx
	movq	8928(%rsp), %rdi        # 8-byte Reload
	movq	8800(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	8952(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 8720(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	8912(%rsp), %r8         # 8-byte Reload
	movq	8840(%rsp), %r9         # 8-byte Reload
	movq	8848(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	8768(%rsp), %rdi        # 8-byte Reload
	movq	8816(%rsp), %rsi        # 8-byte Reload
	movq	8752(%rsp), %rdx        # 8-byte Reload
	movq	8776(%rsp), %rcx        # 8-byte Reload
	movq	8904(%rsp), %r8         # 8-byte Reload
	movl	8812(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	8736(%rsp), %rdi        # 8-byte Reload
	movq	8800(%rsp), %rsi        # 8-byte Reload
	movq	8720(%rsp), %rdx        # 8-byte Reload
	movq	8952(%rsp), %rcx        # 8-byte Reload
	movq	8912(%rsp), %r8         # 8-byte Reload
	movq	8840(%rsp), %r9         # 8-byte Reload
	movq	8848(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	8952(%rsp), %rdi        # 8-byte Reload
	movq	8800(%rsp), %rsi        # 8-byte Reload
	movq	9208(%rsp), %rdx        # 8-byte Reload
	movq	8952(%rsp), %rcx        # 8-byte Reload
	movq	8920(%rsp), %r8         # 8-byte Reload
	movq	8840(%rsp), %r9         # 8-byte Reload
	movq	8848(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	8720(%rsp), %rcx        # 8-byte Reload
	shlq	$3, %rcx
	movq	9208(%rsp), %rdx        # 8-byte Reload
	addq	%rcx, %rdx
	movq	8928(%rsp), %rdi        # 8-byte Reload
	movq	8800(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 8712(%rsp)        # 8-byte Spill
	movq	8952(%rsp), %rcx        # 8-byte Reload
	movq	8776(%rsp), %r8         # 8-byte Reload
	movq	8840(%rsp), %r9         # 8-byte Reload
	movq	8848(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	8768(%rsp), %rdi        # 8-byte Reload
	movq	8816(%rsp), %rsi        # 8-byte Reload
	movq	8752(%rsp), %rdx        # 8-byte Reload
	movq	8944(%rsp), %rcx        # 8-byte Reload
	movq	8936(%rsp), %r8         # 8-byte Reload
	movl	8812(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	8736(%rsp), %rdi        # 8-byte Reload
	movq	8800(%rsp), %rsi        # 8-byte Reload
	movq	8712(%rsp), %rdx        # 8-byte Reload
	movq	8952(%rsp), %rcx        # 8-byte Reload
	movq	8776(%rsp), %r8         # 8-byte Reload
	movq	8840(%rsp), %r9         # 8-byte Reload
	movq	8848(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	8952(%rsp), %rdi        # 8-byte Reload
	movq	8800(%rsp), %rsi        # 8-byte Reload
	vmovsd	8784(%rsp), %xmm0       # 8-byte Reload
	movq	8840(%rsp), %rdx        # 8-byte Reload
	movq	8792(%rsp), %rcx        # 8-byte Reload
	movq	8840(%rsp), %r8         # 8-byte Reload
	movq	8848(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	9208(%rsp), %rcx        # 8-byte Reload
	movq	8720(%rsp), %rdx        # 8-byte Reload
	vmovsd	8784(%rsp), %xmm0       # 8-byte Reload
	vmovsd	%xmm0, (%rcx,%rdx,8)
.Ltmp407:
	#DEBUG_VALUE: tqlrat:l <- 0
	.loc	2 466 0                 # eispack.c:466:0
	movq	8856(%rsp), %rdi        # 8-byte Reload
	movq	8816(%rsp), %rsi        # 8-byte Reload
	movq	8752(%rsp), %rdx        # 8-byte Reload
	movq	8744(%rsp), %rcx        # 8-byte Reload
	movq	8736(%rsp), %r8         # 8-byte Reload
	movl	8812(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	8952(%rsp), %rdi        # 8-byte Reload
	movq	8840(%rsp), %rsi        # 8-byte Reload
	movq	8840(%rsp), %rdx        # 8-byte Reload
	movq	8952(%rsp), %rcx        # 8-byte Reload
	movq	8824(%rsp), %r8         # 8-byte Reload
	movq	8840(%rsp), %r9         # 8-byte Reload
	movq	8848(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	8812(%rsp), %eax        # 4-byte Reload
	movl	%eax, 9112(%rsp)        # 4-byte Spill
	jmp	.LBB10_28
.Ltmp408:
.LBB10_3:                               # %.lr.ph36
                                        # =>This Inner Loop Header: Depth=1
	movq	8960(%rsp), %rax        # 8-byte Reload
	movabsq	$1, %rcx
	leaq	.L.str176, %rdx
	movabsq	$0, %rsi
	leaq	.L.str792, %rdi
	movabsq	$2, %r8
	leaq	.L.str377, %r9
	movabsq	$3, %r10
	leaq	.L.str383, %r11
	movabsq	$457, %rbx              # imm = 0x1C9
	leaq	.L.str61146, %r14
	leaq	.L.str382, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 8704(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 8696(%rsp)        # 8-byte Spill
	leaq	.L.str175, %rax
	movq	%rax, 8688(%rsp)        # 8-byte Spill
	leaq	.L.str51136, %rax
	movq	%rax, 8680(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 8672(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 8664(%rsp)        # 8-byte Spill
	leaq	.L.str119, %rax
	movq	%rax, 8656(%rsp)        # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, 8648(%rsp)        # 8-byte Spill
	leaq	.L.str118, %rax
	movq	%rax, 8640(%rsp)        # 8-byte Spill
	leaq	.L.str1499, %rax
	movq	%rax, 8632(%rsp)        # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, 8624(%rsp)        # 8-byte Spill
	leaq	.L.str20105, %rax
	movq	%rax, 8616(%rsp)        # 8-byte Spill
	leaq	.L.str22107, %rax
	movq	%rax, 8608(%rsp)        # 8-byte Spill
	movabsq	$459, %rax              # imm = 0x1CB
	movq	%rax, 8600(%rsp)        # 8-byte Spill
	leaq	.L.str381, %rax
	movq	%rax, 8592(%rsp)        # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, 8584(%rsp)        # 8-byte Spill
	leaq	.L.str163, %rax
	movq	%rax, 8576(%rsp)        # 8-byte Spill
	leaq	.L.str21106, %rax
	movq	%rax, 8568(%rsp)        # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 8560(%rsp)        # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 8552(%rsp)        # 8-byte Spill
	leaq	.L.str18103, %rax
	movq	%rax, 8544(%rsp)        # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, 8536(%rsp)        # 8-byte Spill
	leaq	.L.str375, %rax
	movq	%rax, 8528(%rsp)        # 8-byte Spill
	movabsq	$48, %rax
	.loc	2 459 0                 # eispack.c:459:0
.Ltmp409:
	movq	%rax, 8520(%rsp)        # 8-byte Spill
	movq	8552(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 8512(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 8504(%rsp)        # 8-byte Spill
	movq	%r14, %rsi
	movq	%rdx, 8496(%rsp)        # 8-byte Spill
	movq	%r9, %rdx
	movq	8640(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 8488(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	8520(%rsp), %rax        # 8-byte Reload
	movq	%r8, 8480(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 8472(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r15, 8464(%rsp)        # 8-byte Spill
	movl	%ebp, 8460(%rsp)        # 4-byte Spill
	movl	%r12d, 8456(%rsp)       # 4-byte Spill
	movq	%r13, 8448(%rsp)        # 8-byte Spill
	movq	%r14, 8440(%rsp)        # 8-byte Spill
	movq	%rbx, 8432(%rsp)        # 8-byte Spill
	movq	%r10, 8424(%rsp)        # 8-byte Spill
	movq	%r11, 8416(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	8480(%rsp), %rdi        # 8-byte Reload
	movq	8664(%rsp), %rsi        # 8-byte Reload
	movq	8488(%rsp), %rdx        # 8-byte Reload
	movq	8504(%rsp), %rcx        # 8-byte Reload
	movq	8632(%rsp), %r8         # 8-byte Reload
	movq	8488(%rsp), %r9         # 8-byte Reload
	movq	8528(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	8488(%rsp), %rdi        # 8-byte Reload
	movq	8664(%rsp), %rsi        # 8-byte Reload
	movq	8504(%rsp), %rdx        # 8-byte Reload
	movq	8488(%rsp), %rcx        # 8-byte Reload
	movq	8656(%rsp), %r8         # 8-byte Reload
	movq	8488(%rsp), %r9         # 8-byte Reload
	movq	8472(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	8448(%rsp), %rdi        # 8-byte Reload
	movq	8664(%rsp), %rsi        # 8-byte Reload
	movq	8704(%rsp), %rdx        # 8-byte Reload
	movq	8488(%rsp), %rcx        # 8-byte Reload
	movq	8640(%rsp), %r8         # 8-byte Reload
	movq	8504(%rsp), %r9         # 8-byte Reload
	movq	8472(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	8600(%rsp), %rdi        # 8-byte Reload
	movq	8440(%rsp), %rsi        # 8-byte Reload
	movq	8472(%rsp), %rdx        # 8-byte Reload
	movq	8544(%rsp), %rcx        # 8-byte Reload
	movq	8560(%rsp), %r8         # 8-byte Reload
	movl	8460(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	8480(%rsp), %rdi        # 8-byte Reload
	movq	8664(%rsp), %rsi        # 8-byte Reload
	movq	8704(%rsp), %rdx        # 8-byte Reload
	movq	8488(%rsp), %rcx        # 8-byte Reload
	movq	8640(%rsp), %r8         # 8-byte Reload
	movq	8504(%rsp), %r9         # 8-byte Reload
	movq	8512(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	8488(%rsp), %rdi        # 8-byte Reload
	movq	8664(%rsp), %rsi        # 8-byte Reload
	movq	9208(%rsp), %rdx        # 8-byte Reload
	movq	8488(%rsp), %rcx        # 8-byte Reload
	movq	8576(%rsp), %r8         # 8-byte Reload
	movq	8504(%rsp), %r9         # 8-byte Reload
	movq	8512(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	8704(%rsp), %rax        # 8-byte Reload
	shlq	$3, %rax
	movq	9208(%rsp), %rcx        # 8-byte Reload
	addq	%rax, %rcx
	movq	8448(%rsp), %rdi        # 8-byte Reload
	movq	8664(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	8488(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 8408(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	8544(%rsp), %r8         # 8-byte Reload
	movq	8504(%rsp), %r9         # 8-byte Reload
	movq	8512(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	8600(%rsp), %rdi        # 8-byte Reload
	movq	8440(%rsp), %rsi        # 8-byte Reload
	movq	8472(%rsp), %rdx        # 8-byte Reload
	movq	8616(%rsp), %rcx        # 8-byte Reload
	movq	8536(%rsp), %r8         # 8-byte Reload
	movl	8460(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	8488(%rsp), %rdi        # 8-byte Reload
	movq	8664(%rsp), %rsi        # 8-byte Reload
	movq	8408(%rsp), %rdx        # 8-byte Reload
	movq	8488(%rsp), %rcx        # 8-byte Reload
	movq	8544(%rsp), %r8         # 8-byte Reload
	movq	8504(%rsp), %r9         # 8-byte Reload
	movq	8512(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	9208(%rsp), %rax        # 8-byte Reload
	movq	8704(%rsp), %rcx        # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
	movq	8448(%rsp), %rdi        # 8-byte Reload
	movq	8664(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 8400(%rsp)       # 8-byte Spill
	movq	8488(%rsp), %rdx        # 8-byte Reload
	movq	8616(%rsp), %rcx        # 8-byte Reload
	movq	8504(%rsp), %r8         # 8-byte Reload
	movq	8512(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	8600(%rsp), %rdi        # 8-byte Reload
	movq	8440(%rsp), %rsi        # 8-byte Reload
	movq	8472(%rsp), %rdx        # 8-byte Reload
	movq	8568(%rsp), %rcx        # 8-byte Reload
	movq	8624(%rsp), %r8         # 8-byte Reload
	movl	8460(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	8480(%rsp), %rdi        # 8-byte Reload
	movq	8664(%rsp), %rsi        # 8-byte Reload
	movq	8552(%rsp), %rdx        # 8-byte Reload
	movq	8504(%rsp), %rcx        # 8-byte Reload
	movq	8632(%rsp), %r8         # 8-byte Reload
	movq	8504(%rsp), %r9         # 8-byte Reload
	movq	8512(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	8488(%rsp), %rdi        # 8-byte Reload
	movq	8664(%rsp), %rsi        # 8-byte Reload
	movq	8704(%rsp), %rdx        # 8-byte Reload
	movq	8488(%rsp), %rcx        # 8-byte Reload
	movq	8640(%rsp), %r8         # 8-byte Reload
	movq	8504(%rsp), %r9         # 8-byte Reload
	movq	8512(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	8704(%rsp), %rax        # 8-byte Reload
	addq	$-1, %rax
	movq	8448(%rsp), %rdi        # 8-byte Reload
	movq	8664(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	8488(%rsp), %rcx        # 8-byte Reload
	movq	8568(%rsp), %r8         # 8-byte Reload
	movq	8504(%rsp), %r9         # 8-byte Reload
	movq	8512(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 8392(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	8600(%rsp), %rdi        # 8-byte Reload
	movq	8440(%rsp), %rsi        # 8-byte Reload
	movq	8472(%rsp), %rdx        # 8-byte Reload
	movq	8608(%rsp), %rcx        # 8-byte Reload
	movq	8560(%rsp), %r8         # 8-byte Reload
	movl	8460(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	8480(%rsp), %rdi        # 8-byte Reload
	movq	8664(%rsp), %rsi        # 8-byte Reload
	movq	8392(%rsp), %rdx        # 8-byte Reload
	movq	8488(%rsp), %rcx        # 8-byte Reload
	movq	8568(%rsp), %r8         # 8-byte Reload
	movq	8504(%rsp), %r9         # 8-byte Reload
	movq	8512(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	8488(%rsp), %rdi        # 8-byte Reload
	movq	8664(%rsp), %rsi        # 8-byte Reload
	movq	9208(%rsp), %rdx        # 8-byte Reload
	movq	8488(%rsp), %rcx        # 8-byte Reload
	movq	8576(%rsp), %r8         # 8-byte Reload
	movq	8504(%rsp), %r9         # 8-byte Reload
	movq	8512(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	8392(%rsp), %rax        # 8-byte Reload
	shlq	$3, %rax
	movq	9208(%rsp), %rcx        # 8-byte Reload
	addq	%rax, %rcx
	movq	8448(%rsp), %rdi        # 8-byte Reload
	movq	8664(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	8488(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 8384(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	8608(%rsp), %r8         # 8-byte Reload
	movq	8504(%rsp), %r9         # 8-byte Reload
	movq	8512(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	8600(%rsp), %rdi        # 8-byte Reload
	movq	8440(%rsp), %rsi        # 8-byte Reload
	movq	8472(%rsp), %rdx        # 8-byte Reload
	movq	8592(%rsp), %rcx        # 8-byte Reload
	movq	8584(%rsp), %r8         # 8-byte Reload
	movl	8460(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	8480(%rsp), %rdi        # 8-byte Reload
	movq	8664(%rsp), %rsi        # 8-byte Reload
	movq	8384(%rsp), %rdx        # 8-byte Reload
	movq	8488(%rsp), %rcx        # 8-byte Reload
	movq	8608(%rsp), %r8         # 8-byte Reload
	movq	8504(%rsp), %r9         # 8-byte Reload
	movq	8512(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	8488(%rsp), %rdi        # 8-byte Reload
	movq	8664(%rsp), %rsi        # 8-byte Reload
	vmovsd	8400(%rsp), %xmm0       # 8-byte Reload
	movq	8488(%rsp), %rdx        # 8-byte Reload
	movq	8616(%rsp), %rcx        # 8-byte Reload
	movq	8504(%rsp), %r8         # 8-byte Reload
	movq	8512(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	9208(%rsp), %rax        # 8-byte Reload
	movq	8704(%rsp), %rcx        # 8-byte Reload
	vmovsd	8400(%rsp), %xmm0       # 8-byte Reload
	vmovsd	%xmm0, -8(%rax,%rcx,8)
.Ltmp410:
	.loc	2 457 0                 # eispack.c:457:0
	movq	8432(%rsp), %rdi        # 8-byte Reload
	movq	8440(%rsp), %rsi        # 8-byte Reload
	movq	8472(%rsp), %rdx        # 8-byte Reload
	movq	8656(%rsp), %rcx        # 8-byte Reload
	movq	8624(%rsp), %r8         # 8-byte Reload
	movl	8460(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	8480(%rsp), %rdi        # 8-byte Reload
	movq	8664(%rsp), %rsi        # 8-byte Reload
	movq	8488(%rsp), %rdx        # 8-byte Reload
	movq	8504(%rsp), %rcx        # 8-byte Reload
	movq	8632(%rsp), %r8         # 8-byte Reload
	movq	8504(%rsp), %r9         # 8-byte Reload
	movq	8512(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	8488(%rsp), %rdi        # 8-byte Reload
	movq	8664(%rsp), %rsi        # 8-byte Reload
	movq	8704(%rsp), %rdx        # 8-byte Reload
	movq	8488(%rsp), %rcx        # 8-byte Reload
	movq	8640(%rsp), %r8         # 8-byte Reload
	movq	8504(%rsp), %r9         # 8-byte Reload
	movq	8512(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	8704(%rsp), %rax        # 8-byte Reload
	addq	$1, %rax
	movq	8448(%rsp), %rdi        # 8-byte Reload
	movq	8664(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	8488(%rsp), %rcx        # 8-byte Reload
	movq	8656(%rsp), %r8         # 8-byte Reload
	movq	8504(%rsp), %r9         # 8-byte Reload
	movq	8512(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 8376(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	8432(%rsp), %rdi        # 8-byte Reload
	movq	8440(%rsp), %rsi        # 8-byte Reload
	movq	8472(%rsp), %rdx        # 8-byte Reload
	movq	8688(%rsp), %rcx        # 8-byte Reload
	movq	8648(%rsp), %r8         # 8-byte Reload
	movl	8460(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	8488(%rsp), %rdi        # 8-byte Reload
	movq	8664(%rsp), %rsi        # 8-byte Reload
	movq	8376(%rsp), %rdx        # 8-byte Reload
	movq	8488(%rsp), %rcx        # 8-byte Reload
	movq	8656(%rsp), %r8         # 8-byte Reload
	movq	8504(%rsp), %r9         # 8-byte Reload
	movq	8512(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	8376(%rsp), %rax        # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	8448(%rsp), %rdi        # 8-byte Reload
	movq	8696(%rsp), %rsi        # 8-byte Reload
	movq	8488(%rsp), %rcx        # 8-byte Reload
	movq	8688(%rsp), %r8         # 8-byte Reload
	movq	8504(%rsp), %r9         # 8-byte Reload
	movq	8512(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 8372(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	8432(%rsp), %rdi        # 8-byte Reload
	movq	8440(%rsp), %rsi        # 8-byte Reload
	movq	8472(%rsp), %rdx        # 8-byte Reload
	movq	8496(%rsp), %rcx        # 8-byte Reload
	movq	8672(%rsp), %r8         # 8-byte Reload
	movl	8460(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	9228(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	8480(%rsp), %rdi        # 8-byte Reload
	movq	8696(%rsp), %rsi        # 8-byte Reload
	movq	8488(%rsp), %rcx        # 8-byte Reload
	movq	8680(%rsp), %r8         # 8-byte Reload
	movq	8504(%rsp), %r9         # 8-byte Reload
	movq	8512(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	8372(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	8488(%rsp), %rdi        # 8-byte Reload
	movq	8696(%rsp), %rsi        # 8-byte Reload
	movq	8488(%rsp), %rcx        # 8-byte Reload
	movq	8688(%rsp), %r8         # 8-byte Reload
	movq	8504(%rsp), %r9         # 8-byte Reload
	movq	8512(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	8372(%rsp), %ebp        # 4-byte Reload
	movl	9228(%rsp), %r12d       # 4-byte Reload
	cmpl	%r12d, %ebp
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	8448(%rsp), %rdi        # 8-byte Reload
	movq	8488(%rsp), %rsi        # 8-byte Reload
	movq	8488(%rsp), %rcx        # 8-byte Reload
	movq	8496(%rsp), %r8         # 8-byte Reload
	movq	8504(%rsp), %r9         # 8-byte Reload
	movq	8512(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 8371(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	8432(%rsp), %rdi        # 8-byte Reload
	movq	8440(%rsp), %rsi        # 8-byte Reload
	movq	8472(%rsp), %rdx        # 8-byte Reload
	movq	8464(%rsp), %rcx        # 8-byte Reload
	movq	8480(%rsp), %r8         # 8-byte Reload
	movl	8460(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	8424(%rsp), %rdi        # 8-byte Reload
	movq	8504(%rsp), %rsi        # 8-byte Reload
	movq	8504(%rsp), %rdx        # 8-byte Reload
	movq	8488(%rsp), %rcx        # 8-byte Reload
	movq	8416(%rsp), %r8         # 8-byte Reload
	movq	8504(%rsp), %r9         # 8-byte Reload
	movq	8512(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	8480(%rsp), %rdi        # 8-byte Reload
	movq	8504(%rsp), %rsi        # 8-byte Reload
	movq	8504(%rsp), %rdx        # 8-byte Reload
	movq	8488(%rsp), %rcx        # 8-byte Reload
	movq	8472(%rsp), %r8         # 8-byte Reload
	movq	8504(%rsp), %r9         # 8-byte Reload
	movq	8512(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	8371(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	8488(%rsp), %rdi        # 8-byte Reload
	movq	8488(%rsp), %rsi        # 8-byte Reload
	movq	8488(%rsp), %rcx        # 8-byte Reload
	movq	8496(%rsp), %r8         # 8-byte Reload
	movq	8504(%rsp), %r9         # 8-byte Reload
	movq	8512(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	8371(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	movq	8376(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 8960(%rsp)        # 8-byte Spill
	jne	.LBB10_4
	jmp	.LBB10_3
.Ltmp411:
.LBB10_4:                               # %._crit_edge37
	movabsq	$0, %rax
	movl	$1, %ecx
	movabsq	$1, %rdx
	vxorps	%xmm0, %xmm0, %xmm0
	movl	$0, %esi
	leaq	.L.str33118, %rdi
	leaq	.L.str792, %r8
	movabsq	$2, %r9
	leaq	.L.str374, %r10
	movabsq	$3, %r11
	leaq	.L.str386, %rbx
	movabsq	$466, %r14              # imm = 0x1D2
	leaq	.L.str61146, %r15
	leaq	.L.str383, %r12
	leaq	.L.str385, %r13
	movabsq	$19134, %rbp            # imm = 0x4ABE
	movq	%rax, 8360(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 8352(%rsp)        # 8-byte Spill
	leaq	.L.str51136, %rax
	movq	%rax, 8344(%rsp)        # 8-byte Spill
	leaq	.L.str1499, %rax
	movq	%rax, 8336(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 8328(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 8320(%rsp)        # 8-byte Spill
	leaq	.L.str32117, %rax
	movq	%rax, 8312(%rsp)        # 8-byte Spill
	movabsq	$464, %rax              # imm = 0x1D0
	movq	%rax, 8304(%rsp)        # 8-byte Spill
	leaq	.L.str384, %rax
	movq	%rax, 8296(%rsp)        # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, 8288(%rsp)        # 8-byte Spill
	leaq	.L.str163, %rax
	movq	%rax, 8280(%rsp)        # 8-byte Spill
	leaq	.L.str26111, %rax
	movq	%rax, 8272(%rsp)        # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 8264(%rsp)        # 8-byte Spill
	leaq	.L.str23108, %rax
	movq	%rax, 8256(%rsp)        # 8-byte Spill
	movabsq	$35, %rax
	movq	%rax, 8248(%rsp)        # 8-byte Spill
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
	movq	%rax, 8240(%rsp)        # 8-byte Spill
	movabsq	$8, %rax
	#DEBUG_VALUE: tqlrat:f <- 0.000000e+00
	#DEBUG_VALUE: tqlrat:t <- 0.000000e+00
	.loc	2 464 0                 # eispack.c:464:0
	movq	%rax, 8232(%rsp)        # 8-byte Spill
	movq	8304(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 8224(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movl	%esi, 8220(%rsp)        # 4-byte Spill
	movq	%r15, %rsi
	movq	%rdx, 8208(%rsp)        # 8-byte Spill
	movq	%r12, %rdx
	movq	8256(%rsp), %rax        # 8-byte Reload
	movl	%ecx, 8204(%rsp)        # 4-byte Spill
	movq	%rax, %rcx
	movq	8232(%rsp), %rax        # 8-byte Reload
	movq	%r8, 8192(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movl	8220(%rsp), %eax        # 4-byte Reload
	movq	%r9, 8184(%rsp)         # 8-byte Spill
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movq	%r15, 8176(%rsp)        # 8-byte Spill
	movq	%r12, 8168(%rsp)        # 8-byte Spill
	vmovsd	%xmm0, 8160(%rsp)       # 8-byte Spill
	movq	%r13, 8152(%rsp)        # 8-byte Spill
	movq	%rbp, 8144(%rsp)        # 8-byte Spill
	movq	%r14, 8136(%rsp)        # 8-byte Spill
	movq	%rbx, 8128(%rsp)        # 8-byte Spill
	movq	%r10, 8120(%rsp)        # 8-byte Spill
	movq	%r11, 8112(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	8184(%rsp), %rdi        # 8-byte Reload
	movq	8352(%rsp), %rsi        # 8-byte Reload
	movq	8240(%rsp), %rdx        # 8-byte Reload
	movq	8360(%rsp), %rcx        # 8-byte Reload
	movq	8336(%rsp), %r8         # 8-byte Reload
	movq	8360(%rsp), %r9         # 8-byte Reload
	movq	8192(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	9228(%rsp), %eax        # 4-byte Reload
	movl	%eax, %eax
	movl	%eax, %edx
	movq	8208(%rsp), %rdi        # 8-byte Reload
	movq	8352(%rsp), %rsi        # 8-byte Reload
	movq	8208(%rsp), %rcx        # 8-byte Reload
	movq	8344(%rsp), %r8         # 8-byte Reload
	movq	8360(%rsp), %r9         # 8-byte Reload
	movq	8192(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	9228(%rsp), %eax        # 4-byte Reload
	addl	$4294967295, %eax       # imm = 0xFFFFFFFF
	movl	%eax, %esi
	movl	%esi, %edx
	movq	8144(%rsp), %rdi        # 8-byte Reload
	movq	8352(%rsp), %rsi        # 8-byte Reload
	movq	8208(%rsp), %rcx        # 8-byte Reload
	movq	8256(%rsp), %r8         # 8-byte Reload
	movq	8360(%rsp), %r9         # 8-byte Reload
	movq	8192(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, 8108(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	8304(%rsp), %rdi        # 8-byte Reload
	movq	8176(%rsp), %rsi        # 8-byte Reload
	movq	8168(%rsp), %rdx        # 8-byte Reload
	movq	8272(%rsp), %rcx        # 8-byte Reload
	movq	8248(%rsp), %r8         # 8-byte Reload
	movl	8220(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	8108(%rsp), %eax        # 4-byte Reload
	movl	%eax, %r9d
	movl	%r9d, %edx
	movq	8208(%rsp), %rdi        # 8-byte Reload
	movq	8352(%rsp), %rsi        # 8-byte Reload
	movq	8208(%rsp), %rcx        # 8-byte Reload
	movq	8256(%rsp), %r8         # 8-byte Reload
	movq	8360(%rsp), %r9         # 8-byte Reload
	movq	8192(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	8108(%rsp), %eax        # 4-byte Reload
	movslq	%eax, %rcx
	movq	8144(%rsp), %rdi        # 8-byte Reload
	movq	8320(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	8208(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 8096(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	8272(%rsp), %r8         # 8-byte Reload
	movq	8360(%rsp), %r9         # 8-byte Reload
	movq	8192(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	8304(%rsp), %rdi        # 8-byte Reload
	movq	8176(%rsp), %rsi        # 8-byte Reload
	movq	8168(%rsp), %rdx        # 8-byte Reload
	movq	8312(%rsp), %rcx        # 8-byte Reload
	movq	8264(%rsp), %r8         # 8-byte Reload
	movl	8220(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	8184(%rsp), %rdi        # 8-byte Reload
	movq	8320(%rsp), %rsi        # 8-byte Reload
	movq	8096(%rsp), %rdx        # 8-byte Reload
	movq	8208(%rsp), %rcx        # 8-byte Reload
	movq	8272(%rsp), %r8         # 8-byte Reload
	movq	8360(%rsp), %r9         # 8-byte Reload
	movq	8192(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	8208(%rsp), %rdi        # 8-byte Reload
	movq	8320(%rsp), %rsi        # 8-byte Reload
	movq	9208(%rsp), %rdx        # 8-byte Reload
	movq	8208(%rsp), %rcx        # 8-byte Reload
	movq	8280(%rsp), %r8         # 8-byte Reload
	movq	8360(%rsp), %r9         # 8-byte Reload
	movq	8192(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	8096(%rsp), %rcx        # 8-byte Reload
	shlq	$3, %rcx
	movq	9208(%rsp), %rdx        # 8-byte Reload
	addq	%rcx, %rdx
	movq	8144(%rsp), %rdi        # 8-byte Reload
	movq	8320(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 8088(%rsp)        # 8-byte Spill
	movq	8208(%rsp), %rcx        # 8-byte Reload
	movq	8312(%rsp), %r8         # 8-byte Reload
	movq	8360(%rsp), %r9         # 8-byte Reload
	movq	8192(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	8304(%rsp), %rdi        # 8-byte Reload
	movq	8176(%rsp), %rsi        # 8-byte Reload
	movq	8168(%rsp), %rdx        # 8-byte Reload
	movq	8296(%rsp), %rcx        # 8-byte Reload
	movq	8288(%rsp), %r8         # 8-byte Reload
	movl	8220(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	8184(%rsp), %rdi        # 8-byte Reload
	movq	8320(%rsp), %rsi        # 8-byte Reload
	movq	8088(%rsp), %rdx        # 8-byte Reload
	movq	8208(%rsp), %rcx        # 8-byte Reload
	movq	8312(%rsp), %r8         # 8-byte Reload
	movq	8360(%rsp), %r9         # 8-byte Reload
	movq	8192(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	8208(%rsp), %rdi        # 8-byte Reload
	movq	8320(%rsp), %rsi        # 8-byte Reload
	vmovsd	8160(%rsp), %xmm0       # 8-byte Reload
	movq	8360(%rsp), %rdx        # 8-byte Reload
	movq	8336(%rsp), %rcx        # 8-byte Reload
	movq	8360(%rsp), %r8         # 8-byte Reload
	movq	8192(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	9208(%rsp), %rcx        # 8-byte Reload
	movq	8096(%rsp), %rdx        # 8-byte Reload
	vmovsd	8160(%rsp), %xmm0       # 8-byte Reload
	vmovsd	%xmm0, (%rcx,%rdx,8)
	#DEBUG_VALUE: tqlrat:l <- 0
	.loc	2 466 0                 # eispack.c:466:0
.Ltmp412:
	movq	8136(%rsp), %rdi        # 8-byte Reload
	movq	8176(%rsp), %rsi        # 8-byte Reload
	movq	8168(%rsp), %rdx        # 8-byte Reload
	movq	8224(%rsp), %rcx        # 8-byte Reload
	movq	8328(%rsp), %r8         # 8-byte Reload
	movl	8220(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	8184(%rsp), %rdi        # 8-byte Reload
	movq	8352(%rsp), %rsi        # 8-byte Reload
	movq	8360(%rsp), %rdx        # 8-byte Reload
	movq	8360(%rsp), %rcx        # 8-byte Reload
	movq	8336(%rsp), %r8         # 8-byte Reload
	movq	8360(%rsp), %r9         # 8-byte Reload
	movq	8192(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	9228(%rsp), %eax        # 4-byte Reload
	movl	%eax, %eax
	movl	%eax, %edx
	movq	8208(%rsp), %rdi        # 8-byte Reload
	movq	8352(%rsp), %rsi        # 8-byte Reload
	movq	8208(%rsp), %rcx        # 8-byte Reload
	movq	8344(%rsp), %r8         # 8-byte Reload
	movq	8360(%rsp), %r9         # 8-byte Reload
	movq	8192(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	9228(%rsp), %eax        # 4-byte Reload
	cmpl	$0, %eax
	setg	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	8144(%rsp), %rdi        # 8-byte Reload
	movq	8208(%rsp), %rsi        # 8-byte Reload
	movq	8208(%rsp), %rcx        # 8-byte Reload
	movq	8224(%rsp), %r8         # 8-byte Reload
	movq	8360(%rsp), %r9         # 8-byte Reload
	movq	8192(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 8087(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	8136(%rsp), %rdi        # 8-byte Reload
	movq	8176(%rsp), %rsi        # 8-byte Reload
	movq	8168(%rsp), %rdx        # 8-byte Reload
	movq	8152(%rsp), %rcx        # 8-byte Reload
	movq	8184(%rsp), %r8         # 8-byte Reload
	movl	8220(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	8112(%rsp), %rdi        # 8-byte Reload
	movq	8360(%rsp), %rsi        # 8-byte Reload
	movq	8360(%rsp), %rdx        # 8-byte Reload
	movq	8208(%rsp), %rcx        # 8-byte Reload
	movq	8128(%rsp), %r8         # 8-byte Reload
	movq	8360(%rsp), %r9         # 8-byte Reload
	movq	8192(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	8184(%rsp), %rdi        # 8-byte Reload
	movq	8360(%rsp), %rsi        # 8-byte Reload
	movq	8360(%rsp), %rdx        # 8-byte Reload
	movq	8208(%rsp), %rcx        # 8-byte Reload
	movq	8120(%rsp), %r8         # 8-byte Reload
	movq	8360(%rsp), %r9         # 8-byte Reload
	movq	8192(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	8087(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, %edx
	movq	8208(%rsp), %rdi        # 8-byte Reload
	movq	8208(%rsp), %rsi        # 8-byte Reload
	movq	8208(%rsp), %rcx        # 8-byte Reload
	movq	8224(%rsp), %r8         # 8-byte Reload
	movq	8360(%rsp), %r9         # 8-byte Reload
	movq	8192(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	8087(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	movq	8360(%rsp), %rcx        # 8-byte Reload
	movl	8204(%rsp), %eax        # 4-byte Reload
	movq	8208(%rsp), %rdx        # 8-byte Reload
	vmovsd	8160(%rsp), %xmm0       # 8-byte Reload
                                        # implicit-def: XMM1
	movl	8220(%rsp), %esi        # 4-byte Reload
	vmovsd	8160(%rsp), %xmm2       # 8-byte Reload
                                        # implicit-def: XMM3
	movl	8220(%rsp), %edi        # 4-byte Reload
	movl	%eax, 8080(%rsp)        # 4-byte Spill
	movq	%rcx, 8072(%rsp)        # 8-byte Spill
	movq	%rdx, 8064(%rsp)        # 8-byte Spill
	vmovsd	%xmm0, 8056(%rsp)       # 8-byte Spill
	vmovsd	%xmm1, 8048(%rsp)       # 8-byte Spill
	movl	%esi, 8044(%rsp)        # 4-byte Spill
	vmovsd	%xmm2, 8032(%rsp)       # 8-byte Spill
	vmovsd	%xmm3, 8024(%rsp)       # 8-byte Spill
	movl	%edi, 9112(%rsp)        # 4-byte Spill
	jne	.LBB10_5
	jmp	.LBB10_28
.LBB10_5:                               # %.lr.ph33
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB10_9 Depth 2
                                        #     Child Loop BB10_12 Depth 2
                                        #       Child Loop BB10_15 Depth 3
                                        #       Child Loop BB10_17 Depth 3
                                        #     Child Loop BB10_22 Depth 2
	vmovsd	8024(%rsp), %xmm0       # 8-byte Reload
	vmovsd	8032(%rsp), %xmm1       # 8-byte Reload
	movl	8044(%rsp), %eax        # 4-byte Reload
	vmovsd	8048(%rsp), %xmm2       # 8-byte Reload
	vmovsd	8056(%rsp), %xmm3       # 8-byte Reload
	movq	8064(%rsp), %rcx        # 8-byte Reload
	movl	8080(%rsp), %edx        # 4-byte Reload
	movq	8072(%rsp), %rsi        # 8-byte Reload
	movabsq	$1, %rdi
	leaq	.L.str97, %r8
	movabsq	$0, %r9
	leaq	.L.str792, %r10
	movabsq	$2, %r11
	leaq	.L.str404, %rbx
	movabsq	$3, %r14
	leaq	.L.str25110, %r15
	movabsq	$471, %r12              # imm = 0x1D7
	leaq	.L.str61146, %r13
	leaq	.L.str386, %rbp
	movq	%rcx, 8016(%rsp)        # 8-byte Spill
	leaq	.L.str403, %rcx
	movl	%eax, 8012(%rsp)        # 4-byte Spill
	movl	$0, %eax
	movl	%eax, 8008(%rsp)        # 4-byte Spill
	movl	$1, %eax
	movq	%rcx, 8000(%rsp)        # 8-byte Spill
	movabsq	$19134, %rcx            # imm = 0x4ABE
	movq	%rcx, 7992(%rsp)        # 8-byte Spill
	movabsq	$64, %rcx
	movq	%rcx, 7984(%rsp)        # 8-byte Spill
	leaq	.L.str394, %rcx
	movq	%rcx, 7976(%rsp)        # 8-byte Spill
	leaq	.L.str37122, %rcx
	movq	%rcx, 7968(%rsp)        # 8-byte Spill
	movabsq	$47, %rcx
	movq	%rcx, 7960(%rsp)        # 8-byte Spill
	leaq	.L.str35120, %rcx
	movq	%rcx, 7952(%rsp)        # 8-byte Spill
	leaq	.L.str27112, %rcx
	movq	%rcx, 7944(%rsp)        # 8-byte Spill
	movabsq	$469, %rcx              # imm = 0x1D5
	movq	%rcx, 7936(%rsp)        # 8-byte Spill
	movabsq	$9, %rcx
	movq	%rcx, 7928(%rsp)        # 8-byte Spill
	leaq	.L.str31116, %rcx
	movq	%rcx, 7920(%rsp)        # 8-byte Spill
	leaq	sqrt, %rcx
	movq	%rcx, 7912(%rsp)        # 8-byte Spill
	leaq	.L.str201, %rcx
	movq	%rcx, 7904(%rsp)        # 8-byte Spill
	movabsq	$49, %rcx
	movq	%rcx, 7896(%rsp)        # 8-byte Spill
	leaq	.L.str36121, %rcx
	movq	%rcx, 7888(%rsp)        # 8-byte Spill
	movabsq	$27, %rcx
	movq	%rcx, 7880(%rsp)        # 8-byte Spill
	leaq	.L.str163, %rcx
	movq	%rcx, 7872(%rsp)        # 8-byte Spill
	leaq	.L.str387, %rcx
	movq	%rcx, 7864(%rsp)        # 8-byte Spill
	movabsq	$29, %rcx
	movq	%rcx, 7856(%rsp)        # 8-byte Spill
	leaq	.L.str29114, %rcx
	movq	%rcx, 7848(%rsp)        # 8-byte Spill
	leaq	fabs, %rcx
	movq	%rcx, 7840(%rsp)        # 8-byte Spill
	leaq	.L.str691, %rcx
	movq	%rcx, 7832(%rsp)        # 8-byte Spill
	leaq	.L.str34119, %rcx
	movq	%rcx, 7824(%rsp)        # 8-byte Spill
	leaq	.L.str85170, %rcx
	movq	%rcx, 7816(%rsp)        # 8-byte Spill
	leaq	.L.str401, %rcx
	movq	%rcx, 7808(%rsp)        # 8-byte Spill
	leaq	.L.str389, %rcx
	movq	%rcx, 7800(%rsp)        # 8-byte Spill
	leaq	.L.str402, %rcx
                                        # implicit-def: XMM4
	movq	%rcx, 7792(%rsp)        # 8-byte Spill
	leaq	.L.str1499, %rcx
	movq	%rcx, 7784(%rsp)        # 8-byte Spill
	leaq	.L.str383, %rcx
	movq	%rcx, 7776(%rsp)        # 8-byte Spill
	movabsq	$-1, %rcx
	movq	%rcx, 7768(%rsp)        # 8-byte Spill
	movabsq	$48, %rcx
	movq	%rcx, 7760(%rsp)        # 8-byte Spill
	leaq	.L.str399, %rcx
	movq	%rcx, 7752(%rsp)        # 8-byte Spill
	leaq	.L.str400, %rcx
	vxorps	%xmm5, %xmm5, %xmm5
	movq	%rcx, 7744(%rsp)        # 8-byte Spill
	movabsq	$32, %rcx
	movq	%rcx, 7736(%rsp)        # 8-byte Spill
	leaq	.L.str398, %rcx
	movq	%rcx, 7728(%rsp)        # 8-byte Spill
	leaq	.L.str321, %rcx
	movq	%rcx, 7720(%rsp)        # 8-byte Spill
	leaq	.L.str396, %rcx
	movq	%rcx, 7712(%rsp)        # 8-byte Spill
	leaq	.L.str397, %rcx
	movq	%rcx, 7704(%rsp)        # 8-byte Spill
	leaq	.L.str395, %rcx
	movq	%rcx, 7696(%rsp)        # 8-byte Spill
	leaq	.L.str392, %rcx
	movq	%rcx, 7688(%rsp)        # 8-byte Spill
	leaq	.L.str393, %rcx
	movq	%rcx, 7680(%rsp)        # 8-byte Spill
	leaq	.L.str390, %rcx
	movq	%rcx, 7672(%rsp)        # 8-byte Spill
	leaq	.L.str391, %rcx
	movq	%rcx, 7664(%rsp)        # 8-byte Spill
	leaq	.L.str388173, %rcx
	.loc	2 468 0                 # eispack.c:468:0
.Ltmp413:
	movq	%rcx, 7656(%rsp)        # 8-byte Spill
	movq	7768(%rsp), %rcx        # 8-byte Reload
	movq	%rdi, 7648(%rsp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	%rsi, 7640(%rsp)        # 8-byte Spill
	movq	%r13, %rsi
	movl	%edx, 7636(%rsp)        # 4-byte Spill
	movq	%rbp, %rdx
	movq	7864(%rsp), %rcx        # 8-byte Reload
	movq	%r8, 7624(%rsp)         # 8-byte Spill
	movq	7760(%rsp), %r8         # 8-byte Reload
	movl	%eax, 7620(%rsp)        # 4-byte Spill
	movl	8008(%rsp), %eax        # 4-byte Reload
	movq	%r9, 7608(%rsp)         # 8-byte Spill
	movl	%eax, %r9d
	movl	$1, (%rsp)
	vmovsd	%xmm0, 7600(%rsp)       # 8-byte Spill
	vmovsd	%xmm1, 7592(%rsp)       # 8-byte Spill
	vmovsd	%xmm2, 7584(%rsp)       # 8-byte Spill
	vmovsd	%xmm3, 7576(%rsp)       # 8-byte Spill
	movq	%r13, 7568(%rsp)        # 8-byte Spill
	movq	%rbp, 7560(%rsp)        # 8-byte Spill
	vmovsd	%xmm4, 7552(%rsp)       # 8-byte Spill
	vmovsd	%xmm5, 7544(%rsp)       # 8-byte Spill
	movq	%r12, 7536(%rsp)        # 8-byte Spill
	movq	%r15, 7528(%rsp)        # 8-byte Spill
	movq	%r10, 7520(%rsp)        # 8-byte Spill
	movq	%r11, 7512(%rsp)        # 8-byte Spill
	movq	%rbx, 7504(%rsp)        # 8-byte Spill
	movq	%r14, 7496(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	7512(%rsp), %rdi        # 8-byte Reload
	movq	7984(%rsp), %rsi        # 8-byte Reload
	movq	7608(%rsp), %rdx        # 8-byte Reload
	movq	7608(%rsp), %rcx        # 8-byte Reload
	movq	7784(%rsp), %r8         # 8-byte Reload
	movq	7648(%rsp), %r9         # 8-byte Reload
	movq	7776(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	7648(%rsp), %rdi        # 8-byte Reload
	movq	7984(%rsp), %rsi        # 8-byte Reload
	movq	7608(%rsp), %rdx        # 8-byte Reload
	movq	7648(%rsp), %rcx        # 8-byte Reload
	movq	7656(%rsp), %r8         # 8-byte Reload
	movq	7648(%rsp), %r9         # 8-byte Reload
	movq	7800(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	7992(%rsp), %rdi        # 8-byte Reload
	movq	7984(%rsp), %rsi        # 8-byte Reload
	movq	7640(%rsp), %rdx        # 8-byte Reload
	movq	7648(%rsp), %rcx        # 8-byte Reload
	movq	7864(%rsp), %r8         # 8-byte Reload
	movq	7608(%rsp), %r9         # 8-byte Reload
	movq	7800(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	7768(%rsp), %rdi        # 8-byte Reload
	movq	7568(%rsp), %rsi        # 8-byte Reload
	movq	7560(%rsp), %rdx        # 8-byte Reload
	movq	7672(%rsp), %rcx        # 8-byte Reload
	movq	7760(%rsp), %r8         # 8-byte Reload
	movl	8008(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	7512(%rsp), %rdi        # 8-byte Reload
	movq	7736(%rsp), %rsi        # 8-byte Reload
	movq	7648(%rsp), %rdx        # 8-byte Reload
	movq	7608(%rsp), %rcx        # 8-byte Reload
	movq	7784(%rsp), %r8         # 8-byte Reload
	movq	7648(%rsp), %r9         # 8-byte Reload
	movq	7776(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	7648(%rsp), %rdi        # 8-byte Reload
	movq	7736(%rsp), %rsi        # 8-byte Reload
	movq	7608(%rsp), %rdx        # 8-byte Reload
	movq	7648(%rsp), %rcx        # 8-byte Reload
	movq	7664(%rsp), %r8         # 8-byte Reload
	movq	7648(%rsp), %r9         # 8-byte Reload
	movq	7800(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	7636(%rsp), %eax        # 4-byte Reload
	movl	%eax, %eax
	movl	%eax, %edx
	movq	7992(%rsp), %rdi        # 8-byte Reload
	movq	7736(%rsp), %rsi        # 8-byte Reload
	movq	7648(%rsp), %rcx        # 8-byte Reload
	movq	7672(%rsp), %r8         # 8-byte Reload
	movq	7608(%rsp), %r9         # 8-byte Reload
	movq	7800(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	7768(%rsp), %rdi        # 8-byte Reload
	movq	7568(%rsp), %rsi        # 8-byte Reload
	movq	7560(%rsp), %rdx        # 8-byte Reload
	movq	7688(%rsp), %rcx        # 8-byte Reload
	movq	7760(%rsp), %r8         # 8-byte Reload
	movl	8008(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	7512(%rsp), %rdi        # 8-byte Reload
	movq	7984(%rsp), %rsi        # 8-byte Reload
	movq	7648(%rsp), %rdx        # 8-byte Reload
	movq	7608(%rsp), %rcx        # 8-byte Reload
	movq	7784(%rsp), %r8         # 8-byte Reload
	movq	7648(%rsp), %r9         # 8-byte Reload
	movq	7776(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	7648(%rsp), %rdi        # 8-byte Reload
	movq	7984(%rsp), %rsi        # 8-byte Reload
	movq	7608(%rsp), %rdx        # 8-byte Reload
	movq	7648(%rsp), %rcx        # 8-byte Reload
	movq	7680(%rsp), %r8         # 8-byte Reload
	movq	7648(%rsp), %r9         # 8-byte Reload
	movq	7800(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	7992(%rsp), %rdi        # 8-byte Reload
	movq	7984(%rsp), %rsi        # 8-byte Reload
	movq	8016(%rsp), %rdx        # 8-byte Reload
	movq	7648(%rsp), %rcx        # 8-byte Reload
	movq	7688(%rsp), %r8         # 8-byte Reload
	movq	7608(%rsp), %r9         # 8-byte Reload
	movq	7800(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	7768(%rsp), %rdi        # 8-byte Reload
	movq	7568(%rsp), %rsi        # 8-byte Reload
	movq	7560(%rsp), %rdx        # 8-byte Reload
	movq	7976(%rsp), %rcx        # 8-byte Reload
	movq	7760(%rsp), %r8         # 8-byte Reload
	movl	8008(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	7512(%rsp), %rdi        # 8-byte Reload
	movq	7984(%rsp), %rsi        # 8-byte Reload
	vmovsd	7544(%rsp), %xmm0       # 8-byte Reload
	movq	7608(%rsp), %rdx        # 8-byte Reload
	movq	7784(%rsp), %rcx        # 8-byte Reload
	movq	7648(%rsp), %r8         # 8-byte Reload
	movq	7776(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	7648(%rsp), %rdi        # 8-byte Reload
	movq	7984(%rsp), %rsi        # 8-byte Reload
	movq	7608(%rsp), %rdx        # 8-byte Reload
	movq	7648(%rsp), %rcx        # 8-byte Reload
	movq	7696(%rsp), %r8         # 8-byte Reload
	movq	7648(%rsp), %r9         # 8-byte Reload
	movq	7800(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	7992(%rsp), %rdi        # 8-byte Reload
	movq	7984(%rsp), %rsi        # 8-byte Reload
	vmovsd	7576(%rsp), %xmm0       # 8-byte Reload
	movq	7648(%rsp), %rdx        # 8-byte Reload
	movq	7976(%rsp), %rcx        # 8-byte Reload
	movq	7608(%rsp), %r8         # 8-byte Reload
	movq	7800(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	7768(%rsp), %rdi        # 8-byte Reload
	movq	7568(%rsp), %rsi        # 8-byte Reload
	movq	7560(%rsp), %rdx        # 8-byte Reload
	movq	7712(%rsp), %rcx        # 8-byte Reload
	movq	7760(%rsp), %r8         # 8-byte Reload
	movl	8008(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	7512(%rsp), %rdi        # 8-byte Reload
	movq	7984(%rsp), %rsi        # 8-byte Reload
	vmovsd	7552(%rsp), %xmm0       # 8-byte Reload
	movq	7608(%rsp), %rdx        # 8-byte Reload
	movq	7784(%rsp), %rcx        # 8-byte Reload
	movq	7648(%rsp), %r8         # 8-byte Reload
	movq	7776(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	7648(%rsp), %rdi        # 8-byte Reload
	movq	7984(%rsp), %rsi        # 8-byte Reload
	movq	7608(%rsp), %rdx        # 8-byte Reload
	movq	7648(%rsp), %rcx        # 8-byte Reload
	movq	7704(%rsp), %r8         # 8-byte Reload
	movq	7648(%rsp), %r9         # 8-byte Reload
	movq	7800(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	7992(%rsp), %rdi        # 8-byte Reload
	movq	7984(%rsp), %rsi        # 8-byte Reload
	vmovsd	7584(%rsp), %xmm0       # 8-byte Reload
	movq	7648(%rsp), %rdx        # 8-byte Reload
	movq	7712(%rsp), %rcx        # 8-byte Reload
	movq	7608(%rsp), %r8         # 8-byte Reload
	movq	7800(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	7768(%rsp), %rdi        # 8-byte Reload
	movq	7568(%rsp), %rsi        # 8-byte Reload
	movq	7560(%rsp), %rdx        # 8-byte Reload
	movq	7728(%rsp), %rcx        # 8-byte Reload
	movq	7760(%rsp), %r8         # 8-byte Reload
	movl	8008(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	7512(%rsp), %rdi        # 8-byte Reload
	movq	7736(%rsp), %rsi        # 8-byte Reload
	movq	7608(%rsp), %rdx        # 8-byte Reload
	movq	7608(%rsp), %rcx        # 8-byte Reload
	movq	7784(%rsp), %r8         # 8-byte Reload
	movq	7648(%rsp), %r9         # 8-byte Reload
	movq	7776(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	7648(%rsp), %rdi        # 8-byte Reload
	movq	7736(%rsp), %rsi        # 8-byte Reload
	movq	7608(%rsp), %rdx        # 8-byte Reload
	movq	7648(%rsp), %rcx        # 8-byte Reload
	movq	7720(%rsp), %r8         # 8-byte Reload
	movq	7648(%rsp), %r9         # 8-byte Reload
	movq	7800(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	8012(%rsp), %eax        # 4-byte Reload
	movl	%eax, %eax
	movl	%eax, %edx
	movq	7992(%rsp), %rdi        # 8-byte Reload
	movq	7736(%rsp), %rsi        # 8-byte Reload
	movq	7648(%rsp), %rcx        # 8-byte Reload
	movq	7728(%rsp), %r8         # 8-byte Reload
	movq	7608(%rsp), %r9         # 8-byte Reload
	movq	7800(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	7768(%rsp), %rdi        # 8-byte Reload
	movq	7568(%rsp), %rsi        # 8-byte Reload
	movq	7560(%rsp), %rdx        # 8-byte Reload
	movq	7752(%rsp), %rcx        # 8-byte Reload
	movq	7760(%rsp), %r8         # 8-byte Reload
	movl	8008(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	7512(%rsp), %rdi        # 8-byte Reload
	movq	7984(%rsp), %rsi        # 8-byte Reload
	vmovsd	7544(%rsp), %xmm0       # 8-byte Reload
	movq	7608(%rsp), %rdx        # 8-byte Reload
	movq	7784(%rsp), %rcx        # 8-byte Reload
	movq	7648(%rsp), %r8         # 8-byte Reload
	movq	7776(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	7648(%rsp), %rdi        # 8-byte Reload
	movq	7984(%rsp), %rsi        # 8-byte Reload
	movq	7608(%rsp), %rdx        # 8-byte Reload
	movq	7648(%rsp), %rcx        # 8-byte Reload
	movq	7744(%rsp), %r8         # 8-byte Reload
	movq	7648(%rsp), %r9         # 8-byte Reload
	movq	7800(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	7992(%rsp), %rdi        # 8-byte Reload
	movq	7984(%rsp), %rsi        # 8-byte Reload
	vmovsd	7592(%rsp), %xmm0       # 8-byte Reload
	movq	7648(%rsp), %rdx        # 8-byte Reload
	movq	7752(%rsp), %rcx        # 8-byte Reload
	movq	7608(%rsp), %r8         # 8-byte Reload
	movq	7800(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	7768(%rsp), %rdi        # 8-byte Reload
	movq	7568(%rsp), %rsi        # 8-byte Reload
	movq	7560(%rsp), %rdx        # 8-byte Reload
	movq	7808(%rsp), %rcx        # 8-byte Reload
	movq	7760(%rsp), %r8         # 8-byte Reload
	movl	8008(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	7512(%rsp), %rdi        # 8-byte Reload
	movq	7984(%rsp), %rsi        # 8-byte Reload
	vmovsd	7552(%rsp), %xmm0       # 8-byte Reload
	movq	7608(%rsp), %rdx        # 8-byte Reload
	movq	7784(%rsp), %rcx        # 8-byte Reload
	movq	7648(%rsp), %r8         # 8-byte Reload
	movq	7776(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	7648(%rsp), %rdi        # 8-byte Reload
	movq	7984(%rsp), %rsi        # 8-byte Reload
	movq	7608(%rsp), %rdx        # 8-byte Reload
	movq	7648(%rsp), %rcx        # 8-byte Reload
	movq	7792(%rsp), %r8         # 8-byte Reload
	movq	7648(%rsp), %r9         # 8-byte Reload
	movq	7800(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	7992(%rsp), %rdi        # 8-byte Reload
	movq	7984(%rsp), %rsi        # 8-byte Reload
	vmovsd	7600(%rsp), %xmm0       # 8-byte Reload
	movq	7648(%rsp), %rdx        # 8-byte Reload
	movq	7808(%rsp), %rcx        # 8-byte Reload
	movq	7608(%rsp), %r8         # 8-byte Reload
	movq	7800(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
.Ltmp414:
	#DEBUG_VALUE: tqlrat:j <- 0
	.loc	2 469 0                 # eispack.c:469:0
	movq	7936(%rsp), %rdi        # 8-byte Reload
	movq	7568(%rsp), %rsi        # 8-byte Reload
	movq	7560(%rsp), %rdx        # 8-byte Reload
	movq	7824(%rsp), %rcx        # 8-byte Reload
	movq	7856(%rsp), %r8         # 8-byte Reload
	movl	8008(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	7512(%rsp), %rdi        # 8-byte Reload
	movq	7984(%rsp), %rsi        # 8-byte Reload
	movq	7640(%rsp), %rdx        # 8-byte Reload
	movq	7648(%rsp), %rcx        # 8-byte Reload
	movq	7864(%rsp), %r8         # 8-byte Reload
	movq	7608(%rsp), %r9         # 8-byte Reload
	movq	7520(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	7648(%rsp), %rdi        # 8-byte Reload
	movq	7984(%rsp), %rsi        # 8-byte Reload
	movq	9216(%rsp), %rdx        # 8-byte Reload
	movq	7648(%rsp), %rcx        # 8-byte Reload
	movq	7816(%rsp), %r8         # 8-byte Reload
	movq	7608(%rsp), %r9         # 8-byte Reload
	movq	7520(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	7640(%rsp), %rcx        # 8-byte Reload
	shlq	$3, %rcx
	movq	9216(%rsp), %rdx        # 8-byte Reload
	addq	%rcx, %rdx
	movq	7992(%rsp), %rdi        # 8-byte Reload
	movq	7984(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 7488(%rsp)        # 8-byte Spill
	movq	7648(%rsp), %rcx        # 8-byte Reload
	movq	7824(%rsp), %r8         # 8-byte Reload
	movq	7608(%rsp), %r9         # 8-byte Reload
	movq	7520(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	7936(%rsp), %rdi        # 8-byte Reload
	movq	7568(%rsp), %rsi        # 8-byte Reload
	movq	7560(%rsp), %rdx        # 8-byte Reload
	movq	7848(%rsp), %rcx        # 8-byte Reload
	movq	7880(%rsp), %r8         # 8-byte Reload
	movl	8008(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	7648(%rsp), %rdi        # 8-byte Reload
	movq	7984(%rsp), %rsi        # 8-byte Reload
	movq	7488(%rsp), %rdx        # 8-byte Reload
	movq	7648(%rsp), %rcx        # 8-byte Reload
	movq	7824(%rsp), %r8         # 8-byte Reload
	movq	7608(%rsp), %r9         # 8-byte Reload
	movq	7520(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	9216(%rsp), %rcx        # 8-byte Reload
	movq	7640(%rsp), %rdx        # 8-byte Reload
	vmovsd	(%rcx,%rdx,8), %xmm0
	movq	7992(%rsp), %rdi        # 8-byte Reload
	movq	7984(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 7480(%rsp)       # 8-byte Spill
	movq	7648(%rsp), %rdx        # 8-byte Reload
	movq	7848(%rsp), %rcx        # 8-byte Reload
	movq	7608(%rsp), %r8         # 8-byte Reload
	movq	7520(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	7936(%rsp), %rdi        # 8-byte Reload
	movq	7568(%rsp), %rsi        # 8-byte Reload
	movq	7560(%rsp), %rdx        # 8-byte Reload
	movq	7952(%rsp), %rcx        # 8-byte Reload
	movq	7896(%rsp), %r8         # 8-byte Reload
	movl	8008(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	7512(%rsp), %rdi        # 8-byte Reload
	movq	7984(%rsp), %rsi        # 8-byte Reload
	movq	7840(%rsp), %rdx        # 8-byte Reload
	movq	7648(%rsp), %rcx        # 8-byte Reload
	movq	7832(%rsp), %r8         # 8-byte Reload
	movq	7608(%rsp), %r9         # 8-byte Reload
	movq	7520(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	7648(%rsp), %rdi        # 8-byte Reload
	movq	7984(%rsp), %rsi        # 8-byte Reload
	vmovsd	7480(%rsp), %xmm0       # 8-byte Reload
	movq	7648(%rsp), %rdx        # 8-byte Reload
	movq	7848(%rsp), %rcx        # 8-byte Reload
	movq	7608(%rsp), %r8         # 8-byte Reload
	movq	7520(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	.LCPI10_0(%rip), %xmm0
	vmovsd	7480(%rsp), %xmm1       # 8-byte Reload
	vandpd	%xmm0, %xmm1, %xmm0
	movq	7992(%rsp), %rdi        # 8-byte Reload
	movq	7984(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 7472(%rsp)       # 8-byte Spill
	movq	7648(%rsp), %rdx        # 8-byte Reload
	movq	7952(%rsp), %rcx        # 8-byte Reload
	movq	7608(%rsp), %r8         # 8-byte Reload
	movq	7520(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	7936(%rsp), %rdi        # 8-byte Reload
	movq	7568(%rsp), %rsi        # 8-byte Reload
	movq	7560(%rsp), %rdx        # 8-byte Reload
	movq	7888(%rsp), %rcx        # 8-byte Reload
	movq	7856(%rsp), %r8         # 8-byte Reload
	movl	8008(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	7512(%rsp), %rdi        # 8-byte Reload
	movq	7984(%rsp), %rsi        # 8-byte Reload
	movq	7640(%rsp), %rdx        # 8-byte Reload
	movq	7648(%rsp), %rcx        # 8-byte Reload
	movq	7864(%rsp), %r8         # 8-byte Reload
	movq	7608(%rsp), %r9         # 8-byte Reload
	movq	7520(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	7648(%rsp), %rdi        # 8-byte Reload
	movq	7984(%rsp), %rsi        # 8-byte Reload
	movq	9208(%rsp), %rdx        # 8-byte Reload
	movq	7648(%rsp), %rcx        # 8-byte Reload
	movq	7872(%rsp), %r8         # 8-byte Reload
	movq	7608(%rsp), %r9         # 8-byte Reload
	movq	7520(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	7640(%rsp), %rcx        # 8-byte Reload
	shlq	$3, %rcx
	movq	9208(%rsp), %rdx        # 8-byte Reload
	addq	%rcx, %rdx
	movq	7992(%rsp), %rdi        # 8-byte Reload
	movq	7984(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 7464(%rsp)        # 8-byte Spill
	movq	7648(%rsp), %rcx        # 8-byte Reload
	movq	7888(%rsp), %r8         # 8-byte Reload
	movq	7608(%rsp), %r9         # 8-byte Reload
	movq	7520(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	7936(%rsp), %rdi        # 8-byte Reload
	movq	7568(%rsp), %rsi        # 8-byte Reload
	movq	7560(%rsp), %rdx        # 8-byte Reload
	movq	7920(%rsp), %rcx        # 8-byte Reload
	movq	7880(%rsp), %r8         # 8-byte Reload
	movl	8008(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	7648(%rsp), %rdi        # 8-byte Reload
	movq	7984(%rsp), %rsi        # 8-byte Reload
	movq	7464(%rsp), %rdx        # 8-byte Reload
	movq	7648(%rsp), %rcx        # 8-byte Reload
	movq	7888(%rsp), %r8         # 8-byte Reload
	movq	7608(%rsp), %r9         # 8-byte Reload
	movq	7520(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	9208(%rsp), %rcx        # 8-byte Reload
	movq	7640(%rsp), %rdx        # 8-byte Reload
	vmovsd	(%rcx,%rdx,8), %xmm0
	movq	7992(%rsp), %rdi        # 8-byte Reload
	movq	7984(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 7456(%rsp)       # 8-byte Spill
	movq	7648(%rsp), %rdx        # 8-byte Reload
	movq	7920(%rsp), %rcx        # 8-byte Reload
	movq	7608(%rsp), %r8         # 8-byte Reload
	movq	7520(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	7936(%rsp), %rdi        # 8-byte Reload
	movq	7568(%rsp), %rsi        # 8-byte Reload
	movq	7560(%rsp), %rdx        # 8-byte Reload
	movq	7944(%rsp), %rcx        # 8-byte Reload
	movq	7896(%rsp), %r8         # 8-byte Reload
	movl	8008(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	7512(%rsp), %rdi        # 8-byte Reload
	movq	7984(%rsp), %rsi        # 8-byte Reload
	movq	7912(%rsp), %rdx        # 8-byte Reload
	movq	7648(%rsp), %rcx        # 8-byte Reload
	movq	7904(%rsp), %r8         # 8-byte Reload
	movq	7608(%rsp), %r9         # 8-byte Reload
	movq	7520(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	7648(%rsp), %rdi        # 8-byte Reload
	movq	7984(%rsp), %rsi        # 8-byte Reload
	vmovsd	7456(%rsp), %xmm0       # 8-byte Reload
	movq	7648(%rsp), %rdx        # 8-byte Reload
	movq	7920(%rsp), %rcx        # 8-byte Reload
	movq	7608(%rsp), %r8         # 8-byte Reload
	movq	7520(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	7456(%rsp), %xmm0       # 8-byte Reload
	callq	sqrt
	movq	7992(%rsp), %rdi        # 8-byte Reload
	movq	7984(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 7448(%rsp)       # 8-byte Spill
	movq	7648(%rsp), %rdx        # 8-byte Reload
	movq	7944(%rsp), %rcx        # 8-byte Reload
	movq	7608(%rsp), %r8         # 8-byte Reload
	movq	7520(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	7936(%rsp), %rdi        # 8-byte Reload
	movq	7568(%rsp), %rsi        # 8-byte Reload
	movq	7560(%rsp), %rdx        # 8-byte Reload
	movq	7968(%rsp), %rcx        # 8-byte Reload
	movq	7928(%rsp), %r8         # 8-byte Reload
	movl	8008(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	7512(%rsp), %rdi        # 8-byte Reload
	movq	7984(%rsp), %rsi        # 8-byte Reload
	vmovsd	7448(%rsp), %xmm0       # 8-byte Reload
	movq	7648(%rsp), %rdx        # 8-byte Reload
	movq	7944(%rsp), %rcx        # 8-byte Reload
	movq	7608(%rsp), %r8         # 8-byte Reload
	movq	7520(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	7648(%rsp), %rdi        # 8-byte Reload
	movq	7984(%rsp), %rsi        # 8-byte Reload
	vmovsd	7472(%rsp), %xmm0       # 8-byte Reload
	movq	7648(%rsp), %rdx        # 8-byte Reload
	movq	7952(%rsp), %rcx        # 8-byte Reload
	movq	7608(%rsp), %r8         # 8-byte Reload
	movq	7520(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	7472(%rsp), %xmm0       # 8-byte Reload
	vmovsd	7448(%rsp), %xmm1       # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
	movq	7992(%rsp), %rdi        # 8-byte Reload
	movq	7984(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	7648(%rsp), %rdx        # 8-byte Reload
	movq	7968(%rsp), %rcx        # 8-byte Reload
	movq	7608(%rsp), %r8         # 8-byte Reload
	movq	7520(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 7440(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
.Ltmp415:
	#DEBUG_VALUE: tqlrat:h <- [RSP+7440]
	.loc	2 471 0                 # eispack.c:471:0
	movq	7536(%rsp), %rdi        # 8-byte Reload
	movq	7568(%rsp), %rsi        # 8-byte Reload
	movq	7560(%rsp), %rdx        # 8-byte Reload
	movq	7624(%rsp), %rcx        # 8-byte Reload
	movq	7960(%rsp), %r8         # 8-byte Reload
	movl	8008(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	7512(%rsp), %rdi        # 8-byte Reload
	movq	7984(%rsp), %rsi        # 8-byte Reload
	vmovsd	7440(%rsp), %xmm0       # 8-byte Reload
	movq	7648(%rsp), %rdx        # 8-byte Reload
	movq	7968(%rsp), %rcx        # 8-byte Reload
	movq	7608(%rsp), %r8         # 8-byte Reload
	movq	7520(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	7648(%rsp), %rdi        # 8-byte Reload
	movq	7984(%rsp), %rsi        # 8-byte Reload
	vmovsd	7576(%rsp), %xmm0       # 8-byte Reload
	movq	7648(%rsp), %rdx        # 8-byte Reload
	movq	7976(%rsp), %rcx        # 8-byte Reload
	movq	7608(%rsp), %r8         # 8-byte Reload
	movq	7520(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	7440(%rsp), %xmm0       # 8-byte Reload
	vmovsd	7576(%rsp), %xmm1       # 8-byte Reload
	vucomisd	%xmm1, %xmm0
	setb	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	7992(%rsp), %rdi        # 8-byte Reload
	movq	7648(%rsp), %rsi        # 8-byte Reload
	movq	7648(%rsp), %rcx        # 8-byte Reload
	movq	7624(%rsp), %r8         # 8-byte Reload
	movq	7608(%rsp), %r9         # 8-byte Reload
	movq	7520(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 7439(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	7536(%rsp), %rdi        # 8-byte Reload
	movq	7568(%rsp), %rsi        # 8-byte Reload
	movq	7560(%rsp), %rdx        # 8-byte Reload
	movq	8000(%rsp), %rcx        # 8-byte Reload
	movq	7512(%rsp), %r8         # 8-byte Reload
	movl	8008(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	7496(%rsp), %rdi        # 8-byte Reload
	movq	7608(%rsp), %rsi        # 8-byte Reload
	movq	7608(%rsp), %rdx        # 8-byte Reload
	movq	7648(%rsp), %rcx        # 8-byte Reload
	movq	7528(%rsp), %r8         # 8-byte Reload
	movq	7608(%rsp), %r9         # 8-byte Reload
	movq	7520(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	7512(%rsp), %rdi        # 8-byte Reload
	movq	7608(%rsp), %rsi        # 8-byte Reload
	movq	7608(%rsp), %rdx        # 8-byte Reload
	movq	7648(%rsp), %rcx        # 8-byte Reload
	movq	7504(%rsp), %r8         # 8-byte Reload
	movq	7608(%rsp), %r9         # 8-byte Reload
	movq	7520(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	7439(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, %edx
	movq	7648(%rsp), %rdi        # 8-byte Reload
	movq	7648(%rsp), %rsi        # 8-byte Reload
	movq	7648(%rsp), %rcx        # 8-byte Reload
	movq	7624(%rsp), %r8         # 8-byte Reload
	movq	7608(%rsp), %r9         # 8-byte Reload
	movq	7520(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	7439(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	vmovsd	7600(%rsp), %xmm0       # 8-byte Reload
	vmovsd	7584(%rsp), %xmm1       # 8-byte Reload
	vmovsd	7576(%rsp), %xmm2       # 8-byte Reload
	vmovsd	%xmm0, 7424(%rsp)       # 8-byte Spill
	vmovsd	%xmm1, 7416(%rsp)       # 8-byte Spill
	vmovsd	%xmm2, 7408(%rsp)       # 8-byte Spill
	jne	.LBB10_7
.Ltmp416:
# BB#6:                                 #   in Loop: Header=BB10_5 Depth=1
	movabsq	$1, %rax
	movabsq	$0, %rcx
	leaq	.L.str25110, %r8
	leaq	.L.str792, %rdx
	movabsq	$476, %rdi              # imm = 0x1DC
	leaq	.L.str61146, %rsi
	leaq	.L.str404, %r9
	leaq	.L.str405, %r10
	movabsq	$2, %r11
	movl	$0, %ebx
	movl	$1, %ebp
	movabsq	$19134, %r14            # imm = 0x4ABE
	movabsq	$64, %r15
	leaq	.L.str101, %r12
	leaq	.L.str100, %r13
	movq	%rax, 7400(%rsp)        # 8-byte Spill
	movabsq	$475, %rax              # imm = 0x1DB
	movq	%rax, 7392(%rsp)        # 8-byte Spill
	movabsq	$13, %rax
	vmovsd	.LCPI10_1, %xmm0
	movq	%rax, 7384(%rsp)        # 8-byte Spill
	leaq	.L.str99, %rax
	movq	%rax, 7376(%rsp)        # 8-byte Spill
	leaq	.L.str1499, %rax
	movq	%rax, 7368(%rsp)        # 8-byte Spill
	movabsq	$474, %rax              # imm = 0x1DA
	movq	%rax, 7360(%rsp)        # 8-byte Spill
	leaq	.L.str37122, %rax
	movq	%rax, 7352(%rsp)        # 8-byte Spill
	leaq	fabs, %rax
	movq	%rax, 7344(%rsp)        # 8-byte Spill
	leaq	.L.str691, %rax
	movq	%rax, 7336(%rsp)        # 8-byte Spill
	movabsq	$49, %rax
.Ltmp417:
	#DEBUG_VALUE: tqlrat:t <- [RSP+7440]
	.loc	2 474 0                 # eispack.c:474:0
	movq	%rax, 7328(%rsp)        # 8-byte Spill
	movq	7360(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 7320(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 7312(%rsp)        # 8-byte Spill
	movq	%rdx, 7304(%rsp)        # 8-byte Spill
	movq	%r9, %rdx
	movq	7376(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 7296(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	7328(%rsp), %rax        # 8-byte Reload
	movq	%r8, 7288(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 7280(%rsp)         # 8-byte Spill
	movl	%ebx, %r9d
	movl	$1, (%rsp)
	movq	%r15, 7272(%rsp)        # 8-byte Spill
	movq	%r14, 7264(%rsp)        # 8-byte Spill
	movq	%r12, 7256(%rsp)        # 8-byte Spill
	vmovsd	%xmm0, 7248(%rsp)       # 8-byte Spill
	movq	%r13, 7240(%rsp)        # 8-byte Spill
	movl	%ebp, 7236(%rsp)        # 4-byte Spill
	movq	%r10, 7224(%rsp)        # 8-byte Spill
	movq	%r11, 7216(%rsp)        # 8-byte Spill
	movl	%ebx, 7212(%rsp)        # 4-byte Spill
	callq	trace_logger_log0
	movq	7216(%rsp), %rdi        # 8-byte Reload
	movq	7272(%rsp), %rsi        # 8-byte Reload
	movq	7344(%rsp), %rdx        # 8-byte Reload
	movq	7400(%rsp), %rcx        # 8-byte Reload
	movq	7336(%rsp), %r8         # 8-byte Reload
	movq	7296(%rsp), %r9         # 8-byte Reload
	movq	7304(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	7400(%rsp), %rdi        # 8-byte Reload
	movq	7272(%rsp), %rsi        # 8-byte Reload
	vmovsd	7440(%rsp), %xmm0       # 8-byte Reload
	movq	7400(%rsp), %rdx        # 8-byte Reload
	movq	7352(%rsp), %rcx        # 8-byte Reload
	movq	7296(%rsp), %r8         # 8-byte Reload
	movq	7304(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	.LCPI10_0(%rip), %xmm0
	vmovsd	7440(%rsp), %xmm1       # 8-byte Reload
	vandpd	%xmm0, %xmm1, %xmm0
	movq	7264(%rsp), %rdi        # 8-byte Reload
	movq	7272(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 7200(%rsp)       # 8-byte Spill
	movq	7400(%rsp), %rdx        # 8-byte Reload
	movq	7376(%rsp), %rcx        # 8-byte Reload
	movq	7296(%rsp), %r8         # 8-byte Reload
	movq	7304(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	7360(%rsp), %rdi        # 8-byte Reload
	movq	7312(%rsp), %rsi        # 8-byte Reload
	movq	7280(%rsp), %rdx        # 8-byte Reload
	movq	7240(%rsp), %rcx        # 8-byte Reload
	movq	7384(%rsp), %r8         # 8-byte Reload
	movl	7212(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	7216(%rsp), %rdi        # 8-byte Reload
	movq	7272(%rsp), %rsi        # 8-byte Reload
	vmovsd	7248(%rsp), %xmm0       # 8-byte Reload
	movq	7296(%rsp), %rdx        # 8-byte Reload
	movq	7368(%rsp), %rcx        # 8-byte Reload
	movq	7296(%rsp), %r8         # 8-byte Reload
	movq	7304(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	7400(%rsp), %rdi        # 8-byte Reload
	movq	7272(%rsp), %rsi        # 8-byte Reload
	vmovsd	7200(%rsp), %xmm0       # 8-byte Reload
	movq	7400(%rsp), %rdx        # 8-byte Reload
	movq	7376(%rsp), %rcx        # 8-byte Reload
	movq	7296(%rsp), %r8         # 8-byte Reload
	movq	7304(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	7200(%rsp), %xmm0       # 8-byte Reload
	vmovsd	7248(%rsp), %xmm1       # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	7264(%rsp), %rdi        # 8-byte Reload
	movq	7272(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	7400(%rsp), %rdx        # 8-byte Reload
	movq	7240(%rsp), %rcx        # 8-byte Reload
	movq	7296(%rsp), %r8         # 8-byte Reload
	movq	7304(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 7192(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
.Ltmp418:
	#DEBUG_VALUE: tqlrat:b <- [RSP+7192]
	.loc	2 475 0                 # eispack.c:475:0
	movq	7392(%rsp), %rdi        # 8-byte Reload
	movq	7312(%rsp), %rsi        # 8-byte Reload
	movq	7280(%rsp), %rdx        # 8-byte Reload
	movq	7256(%rsp), %rcx        # 8-byte Reload
	movq	7384(%rsp), %r8         # 8-byte Reload
	movl	7212(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	7216(%rsp), %rdi        # 8-byte Reload
	movq	7272(%rsp), %rsi        # 8-byte Reload
	vmovsd	7192(%rsp), %xmm0       # 8-byte Reload
	movq	7400(%rsp), %rdx        # 8-byte Reload
	movq	7240(%rsp), %rcx        # 8-byte Reload
	movq	7296(%rsp), %r8         # 8-byte Reload
	movq	7304(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	7400(%rsp), %rdi        # 8-byte Reload
	movq	7272(%rsp), %rsi        # 8-byte Reload
	vmovsd	7192(%rsp), %xmm0       # 8-byte Reload
	movq	7400(%rsp), %rdx        # 8-byte Reload
	movq	7240(%rsp), %rcx        # 8-byte Reload
	movq	7296(%rsp), %r8         # 8-byte Reload
	movq	7304(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	7192(%rsp), %xmm0       # 8-byte Reload
	vmulsd	%xmm0, %xmm0, %xmm1
	movq	7264(%rsp), %rdi        # 8-byte Reload
	movq	7272(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm1, %xmm0
	movq	7400(%rsp), %rdx        # 8-byte Reload
	movq	7256(%rsp), %rcx        # 8-byte Reload
	movq	7296(%rsp), %r8         # 8-byte Reload
	movq	7304(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm1, 7184(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
.Ltmp419:
	#DEBUG_VALUE: tqlrat:c <- [RSP+7184]
	.loc	2 476 0                 # eispack.c:476:0
	movq	7320(%rsp), %rdi        # 8-byte Reload
	movq	7312(%rsp), %rsi        # 8-byte Reload
	movq	7280(%rsp), %rdx        # 8-byte Reload
	movq	7224(%rsp), %rcx        # 8-byte Reload
	movq	7216(%rsp), %r8         # 8-byte Reload
	movl	7212(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	7400(%rsp), %rdi        # 8-byte Reload
	movq	7296(%rsp), %rsi        # 8-byte Reload
	movq	7296(%rsp), %rdx        # 8-byte Reload
	movq	7400(%rsp), %rcx        # 8-byte Reload
	movq	7288(%rsp), %r8         # 8-byte Reload
	movq	7296(%rsp), %r9         # 8-byte Reload
	movq	7304(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	vmovsd	7184(%rsp), %xmm0       # 8-byte Reload
	vmovsd	7192(%rsp), %xmm1       # 8-byte Reload
	vmovsd	7440(%rsp), %xmm2       # 8-byte Reload
	vmovsd	%xmm0, 7424(%rsp)       # 8-byte Spill
	vmovsd	%xmm1, 7416(%rsp)       # 8-byte Spill
	vmovsd	%xmm2, 7408(%rsp)       # 8-byte Spill
.Ltmp420:
.LBB10_7:                               # %.lr.ph
                                        #   in Loop: Header=BB10_5 Depth=1
	vmovsd	7408(%rsp), %xmm0       # 8-byte Reload
	vmovsd	7416(%rsp), %xmm1       # 8-byte Reload
	vmovsd	7424(%rsp), %xmm2       # 8-byte Reload
	movabsq	$1, %rax
	movabsq	$0, %rcx
	leaq	.L.str407, %r8
	leaq	.L.str792, %rdx
	movabsq	$480, %rdi              # imm = 0x1E0
	leaq	.L.str61146, %rsi
	leaq	.L.str25110, %r9
	leaq	.L.str406, %r10
	movabsq	$2, %r11
	movl	$0, %ebx
	movl	$1, %ebp
	movabsq	$19134, %r14            # imm = 0x4ABE
	movabsq	$64, %r15
	leaq	.L.str395, %r12
	leaq	.L.str404, %r13
	movq	%rax, 7176(%rsp)        # 8-byte Spill
	leaq	.L.str37122, %rax
	movq	%rax, 7168(%rsp)        # 8-byte Spill
	leaq	.L.str394, %rax
	movq	%rax, 7160(%rsp)        # 8-byte Spill
	leaq	.L.str386, %rax
	movq	%rax, 7152(%rsp)        # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 7144(%rsp)        # 8-byte Spill
	movabsq	$48, %rax
	movq	%rax, 7136(%rsp)        # 8-byte Spill
	leaq	.L.str397, %rax
	movq	%rax, 7128(%rsp)        # 8-byte Spill
	leaq	.L.str100, %rax
	movq	%rax, 7120(%rsp)        # 8-byte Spill
	leaq	.L.str396, %rax
	movq	%rax, 7112(%rsp)        # 8-byte Spill
	leaq	.L.str402, %rax
	movq	%rax, 7104(%rsp)        # 8-byte Spill
	leaq	.L.str101, %rax
	movq	%rax, 7096(%rsp)        # 8-byte Spill
	leaq	.L.str401, %rax
	.loc	2 480 0                 # eispack.c:480:0
.Ltmp421:
	movq	%rax, 7088(%rsp)        # 8-byte Spill
	movq	7144(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 7080(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 7072(%rsp)        # 8-byte Spill
	movq	%rdx, 7064(%rsp)        # 8-byte Spill
	movq	%r9, %rdx
	movq	7104(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 7056(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	7136(%rsp), %rax        # 8-byte Reload
	movq	%r8, 7048(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 7040(%rsp)         # 8-byte Spill
	movl	%ebx, %r9d
	movl	$1, (%rsp)
	vmovsd	%xmm0, 7032(%rsp)       # 8-byte Spill
	vmovsd	%xmm1, 7024(%rsp)       # 8-byte Spill
	vmovsd	%xmm2, 7016(%rsp)       # 8-byte Spill
	movq	%r14, 7008(%rsp)        # 8-byte Spill
	movl	%ebp, 7004(%rsp)        # 4-byte Spill
	movq	%r15, 6992(%rsp)        # 8-byte Spill
	movq	%r13, 6984(%rsp)        # 8-byte Spill
	movq	%r12, 6976(%rsp)        # 8-byte Spill
	movl	%ebx, 6972(%rsp)        # 4-byte Spill
	movq	%r10, 6960(%rsp)        # 8-byte Spill
	movq	%r11, 6952(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	6952(%rsp), %rdi        # 8-byte Reload
	movq	6992(%rsp), %rsi        # 8-byte Reload
	movq	7056(%rsp), %rdx        # 8-byte Reload
	movq	7176(%rsp), %rcx        # 8-byte Reload
	movq	7088(%rsp), %r8         # 8-byte Reload
	movq	7176(%rsp), %r9         # 8-byte Reload
	movq	7152(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	7176(%rsp), %rdi        # 8-byte Reload
	movq	6992(%rsp), %rsi        # 8-byte Reload
	movq	7056(%rsp), %rdx        # 8-byte Reload
	movq	7176(%rsp), %rcx        # 8-byte Reload
	movq	7096(%rsp), %r8         # 8-byte Reload
	movq	7176(%rsp), %r9         # 8-byte Reload
	movq	6984(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	7008(%rsp), %rdi        # 8-byte Reload
	movq	6992(%rsp), %rsi        # 8-byte Reload
	vmovsd	7016(%rsp), %xmm0       # 8-byte Reload
	movq	7176(%rsp), %rdx        # 8-byte Reload
	movq	7104(%rsp), %rcx        # 8-byte Reload
	movq	7056(%rsp), %r8         # 8-byte Reload
	movq	6984(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	7144(%rsp), %rdi        # 8-byte Reload
	movq	7072(%rsp), %rsi        # 8-byte Reload
	movq	7040(%rsp), %rdx        # 8-byte Reload
	movq	7128(%rsp), %rcx        # 8-byte Reload
	movq	7136(%rsp), %r8         # 8-byte Reload
	movl	6972(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	6952(%rsp), %rdi        # 8-byte Reload
	movq	6992(%rsp), %rsi        # 8-byte Reload
	movq	7056(%rsp), %rdx        # 8-byte Reload
	movq	7176(%rsp), %rcx        # 8-byte Reload
	movq	7112(%rsp), %r8         # 8-byte Reload
	movq	7176(%rsp), %r9         # 8-byte Reload
	movq	7152(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	7176(%rsp), %rdi        # 8-byte Reload
	movq	6992(%rsp), %rsi        # 8-byte Reload
	movq	7056(%rsp), %rdx        # 8-byte Reload
	movq	7176(%rsp), %rcx        # 8-byte Reload
	movq	7120(%rsp), %r8         # 8-byte Reload
	movq	7176(%rsp), %r9         # 8-byte Reload
	movq	6984(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	7008(%rsp), %rdi        # 8-byte Reload
	movq	6992(%rsp), %rsi        # 8-byte Reload
	vmovsd	7024(%rsp), %xmm0       # 8-byte Reload
	movq	7176(%rsp), %rdx        # 8-byte Reload
	movq	7128(%rsp), %rcx        # 8-byte Reload
	movq	7056(%rsp), %r8         # 8-byte Reload
	movq	6984(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	7144(%rsp), %rdi        # 8-byte Reload
	movq	7072(%rsp), %rsi        # 8-byte Reload
	movq	7040(%rsp), %rdx        # 8-byte Reload
	movq	6976(%rsp), %rcx        # 8-byte Reload
	movq	7136(%rsp), %r8         # 8-byte Reload
	movl	6972(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	6952(%rsp), %rdi        # 8-byte Reload
	movq	6992(%rsp), %rsi        # 8-byte Reload
	movq	7056(%rsp), %rdx        # 8-byte Reload
	movq	7176(%rsp), %rcx        # 8-byte Reload
	movq	7160(%rsp), %r8         # 8-byte Reload
	movq	7176(%rsp), %r9         # 8-byte Reload
	movq	7152(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	7176(%rsp), %rdi        # 8-byte Reload
	movq	6992(%rsp), %rsi        # 8-byte Reload
	movq	7056(%rsp), %rdx        # 8-byte Reload
	movq	7176(%rsp), %rcx        # 8-byte Reload
	movq	7168(%rsp), %r8         # 8-byte Reload
	movq	7176(%rsp), %r9         # 8-byte Reload
	movq	6984(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	7008(%rsp), %rdi        # 8-byte Reload
	movq	6992(%rsp), %rsi        # 8-byte Reload
	vmovsd	7032(%rsp), %xmm0       # 8-byte Reload
	movq	7176(%rsp), %rdx        # 8-byte Reload
	movq	6976(%rsp), %rcx        # 8-byte Reload
	movq	7056(%rsp), %r8         # 8-byte Reload
	movq	6984(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
.Ltmp422:
	#DEBUG_VALUE: tqlrat:m <- [RSP+8012]
	movq	7080(%rsp), %rdi        # 8-byte Reload
	movq	7072(%rsp), %rsi        # 8-byte Reload
	movq	7040(%rsp), %rdx        # 8-byte Reload
	movq	6960(%rsp), %rcx        # 8-byte Reload
	movq	6952(%rsp), %r8         # 8-byte Reload
	movl	6972(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	7176(%rsp), %rdi        # 8-byte Reload
	movq	7056(%rsp), %rsi        # 8-byte Reload
	movq	7056(%rsp), %rdx        # 8-byte Reload
	movq	7176(%rsp), %rcx        # 8-byte Reload
	movq	7048(%rsp), %r8         # 8-byte Reload
	movq	7056(%rsp), %r9         # 8-byte Reload
	movq	7064(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	7640(%rsp), %rax        # 8-byte Reload
	movl	8012(%rsp), %ebx        # 4-byte Reload
	movq	%rax, 6944(%rsp)        # 8-byte Spill
	movl	%ebx, 6940(%rsp)        # 4-byte Spill
	jmp	.LBB10_9
.Ltmp423:
.LBB10_8:                               #   in Loop: Header=BB10_9 Depth=2
	movabsq	$1, %rax
	leaq	.L.str114, %rcx
	movabsq	$0, %rdx
	leaq	.L.str792, %rsi
	movabsq	$2, %rdi
	leaq	.L.str411, %r8
	movabsq	$3, %r9
	leaq	.L.str407, %r10
	movabsq	$480, %r11              # imm = 0x1E0
	leaq	.L.str61146, %rbx
	leaq	.L.str408, %r14
	leaq	.L.str410, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 6928(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 6920(%rsp)        # 8-byte Spill
	leaq	.L.str113, %rax
	movq	%rax, 6912(%rsp)        # 8-byte Spill
	leaq	.L.str51136, %rax
	movq	%rax, 6904(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 6896(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 6888(%rsp)        # 8-byte Spill
	leaq	.L.str409, %rax
	movq	%rax, 6880(%rsp)        # 8-byte Spill
	movabsq	$33, %rax
	movq	%rdi, 6872(%rsp)        # 8-byte Spill
	movq	%r11, %rdi
	movq	%rsi, 6864(%rsp)        # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, 6856(%rsp)        # 8-byte Spill
	movq	%r14, %rdx
	movq	%rax, 6848(%rsp)        # 8-byte Spill
	movq	6912(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 6840(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	6848(%rsp), %rax        # 8-byte Reload
	movq	%r8, 6832(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 6824(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r15, 6816(%rsp)        # 8-byte Spill
	movl	%ebp, 6812(%rsp)        # 4-byte Spill
	movl	%r12d, 6808(%rsp)       # 4-byte Spill
	movq	%r13, 6800(%rsp)        # 8-byte Spill
	movq	%r14, 6792(%rsp)        # 8-byte Spill
	movq	%rbx, 6784(%rsp)        # 8-byte Spill
	movq	%r10, 6776(%rsp)        # 8-byte Spill
	movq	%r11, 6768(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	6928(%rsp), %rdi        # 8-byte Reload
	movq	6888(%rsp), %rsi        # 8-byte Reload
	movq	6760(%rsp), %rdx        # 8-byte Reload
	movq	6928(%rsp), %rcx        # 8-byte Reload
	movq	6880(%rsp), %r8         # 8-byte Reload
	movq	6856(%rsp), %r9         # 8-byte Reload
	movq	6864(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	6760(%rsp), %rax        # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	6800(%rsp), %rdi        # 8-byte Reload
	movq	6920(%rsp), %rsi        # 8-byte Reload
	movq	6928(%rsp), %rcx        # 8-byte Reload
	movq	6912(%rsp), %r8         # 8-byte Reload
	movq	6856(%rsp), %r9         # 8-byte Reload
	movq	6864(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 6756(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	6768(%rsp), %rdi        # 8-byte Reload
	movq	6784(%rsp), %rsi        # 8-byte Reload
	movq	6792(%rsp), %rdx        # 8-byte Reload
	movq	6840(%rsp), %rcx        # 8-byte Reload
	movq	6896(%rsp), %r8         # 8-byte Reload
	movl	6812(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	9228(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	6872(%rsp), %rdi        # 8-byte Reload
	movq	6920(%rsp), %rsi        # 8-byte Reload
	movq	6928(%rsp), %rcx        # 8-byte Reload
	movq	6904(%rsp), %r8         # 8-byte Reload
	movq	6856(%rsp), %r9         # 8-byte Reload
	movq	6864(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	6756(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	6928(%rsp), %rdi        # 8-byte Reload
	movq	6920(%rsp), %rsi        # 8-byte Reload
	movq	6928(%rsp), %rcx        # 8-byte Reload
	movq	6912(%rsp), %r8         # 8-byte Reload
	movq	6856(%rsp), %r9         # 8-byte Reload
	movq	6864(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	6756(%rsp), %ebp        # 4-byte Reload
	movl	9228(%rsp), %r12d       # 4-byte Reload
	cmpl	%r12d, %ebp
	setl	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	6800(%rsp), %rdi        # 8-byte Reload
	movq	6928(%rsp), %rsi        # 8-byte Reload
	movq	6928(%rsp), %rcx        # 8-byte Reload
	movq	6840(%rsp), %r8         # 8-byte Reload
	movq	6856(%rsp), %r9         # 8-byte Reload
	movq	6864(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 6755(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	6768(%rsp), %rdi        # 8-byte Reload
	movq	6784(%rsp), %rsi        # 8-byte Reload
	movq	6792(%rsp), %rdx        # 8-byte Reload
	movq	6816(%rsp), %rcx        # 8-byte Reload
	movq	6872(%rsp), %r8         # 8-byte Reload
	movl	6812(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	6824(%rsp), %rdi        # 8-byte Reload
	movq	6856(%rsp), %rsi        # 8-byte Reload
	movq	6856(%rsp), %rdx        # 8-byte Reload
	movq	6928(%rsp), %rcx        # 8-byte Reload
	movq	6776(%rsp), %r8         # 8-byte Reload
	movq	6856(%rsp), %r9         # 8-byte Reload
	movq	6864(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	6872(%rsp), %rdi        # 8-byte Reload
	movq	6856(%rsp), %rsi        # 8-byte Reload
	movq	6856(%rsp), %rdx        # 8-byte Reload
	movq	6928(%rsp), %rcx        # 8-byte Reload
	movq	6832(%rsp), %r8         # 8-byte Reload
	movq	6856(%rsp), %r9         # 8-byte Reload
	movq	6864(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	6755(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	6928(%rsp), %rdi        # 8-byte Reload
	movq	6928(%rsp), %rsi        # 8-byte Reload
	movq	6928(%rsp), %rcx        # 8-byte Reload
	movq	6840(%rsp), %r8         # 8-byte Reload
	movq	6856(%rsp), %r9         # 8-byte Reload
	movq	6864(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	6755(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	movq	6760(%rsp), %rcx        # 8-byte Reload
	movl	6748(%rsp), %ebp        # 4-byte Reload
	movl	6748(%rsp), %r12d       # 4-byte Reload
	movq	%rcx, 6944(%rsp)        # 8-byte Spill
	movl	%ebp, 6940(%rsp)        # 4-byte Spill
	movl	%r12d, 6744(%rsp)       # 4-byte Spill
	jne	.LBB10_9
	jmp	.LBB10_10
.LBB10_9:                               #   Parent Loop BB10_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	6940(%rsp), %eax        # 4-byte Reload
	movq	6944(%rsp), %rcx        # 8-byte Reload
	movabsq	$1, %rdx
	leaq	.L.str121, %rsi
	movabsq	$0, %rdi
	leaq	.L.str792, %r8
	movabsq	$2, %r9
	leaq	.L.str411, %r10
	movabsq	$3, %r11
	leaq	.L.str408, %rbx
	movabsq	$482, %r14              # imm = 0x1E2
	leaq	.L.str61146, %r15
	leaq	.L.str407, %r12
	leaq	.L.str414, %r13
	movl	$0, %ebp
	movl	%eax, 6740(%rsp)        # 4-byte Spill
	movl	$1, %eax
	movq	%rcx, 6728(%rsp)        # 8-byte Spill
	movabsq	$19134, %rcx            # imm = 0x4ABE
	movq	%rcx, 6720(%rsp)        # 8-byte Spill
	movabsq	$32, %rcx
	movq	%rcx, 6712(%rsp)        # 8-byte Spill
	leaq	.L.str129, %rcx
	movq	%rcx, 6704(%rsp)        # 8-byte Spill
	leaq	.L.str413, %rcx
	movq	%rcx, 6696(%rsp)        # 8-byte Spill
	leaq	.L.str1499, %rcx
	movq	%rcx, 6688(%rsp)        # 8-byte Spill
	movabsq	$480, %rcx              # imm = 0x1E0
	movq	%rcx, 6680(%rsp)        # 8-byte Spill
	movabsq	$8, %rcx
	movq	%rcx, 6672(%rsp)        # 8-byte Spill
	movabsq	$64, %rcx
	movq	%rcx, 6664(%rsp)        # 8-byte Spill
	leaq	.L.str409, %rcx
	movq	%rcx, 6656(%rsp)        # 8-byte Spill
	leaq	.L.str412, %rcx
	movq	%rcx, 6648(%rsp)        # 8-byte Spill
	leaq	.L.str124, %rcx
	movq	%rcx, 6640(%rsp)        # 8-byte Spill
	leaq	.L.str402, %rcx
	movq	%rcx, 6632(%rsp)        # 8-byte Spill
	movabsq	$47, %rcx
	movq	%rcx, 6624(%rsp)        # 8-byte Spill
	leaq	.L.str123, %rcx
	movq	%rcx, 6616(%rsp)        # 8-byte Spill
	movabsq	$27, %rcx
	movq	%rcx, 6608(%rsp)        # 8-byte Spill
	leaq	.L.str163, %rcx
	movq	%rcx, 6600(%rsp)        # 8-byte Spill
	movabsq	$29, %rcx
	movq	%rcx, 6592(%rsp)        # 8-byte Spill
	leaq	.L.str25110, %rcx
	movq	%rcx, 6584(%rsp)        # 8-byte Spill
	leaq	.L.str398, %rcx
	movq	%rcx, 6576(%rsp)        # 8-byte Spill
	movabsq	$-1, %rcx
	movq	%rcx, 6568(%rsp)        # 8-byte Spill
	movabsq	$48, %rcx
	movq	%rcx, 6560(%rsp)        # 8-byte Spill
	leaq	.L.str387, %rcx
	.loc	2 482 0                 # eispack.c:482:0
.Ltmp424:
	movq	%rcx, 6552(%rsp)        # 8-byte Spill
	movq	6568(%rsp), %rcx        # 8-byte Reload
	movq	%rdi, 6544(%rsp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	%rsi, 6536(%rsp)        # 8-byte Spill
	movq	%r15, %rsi
	movq	%rdx, 6528(%rsp)        # 8-byte Spill
	movq	%r12, %rdx
	movq	6648(%rsp), %rcx        # 8-byte Reload
	movq	%r8, 6520(%rsp)         # 8-byte Spill
	movq	6560(%rsp), %r8         # 8-byte Reload
	movq	%r9, 6512(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movl	%eax, 6508(%rsp)        # 4-byte Spill
	movq	%r15, 6496(%rsp)        # 8-byte Spill
	movq	%r12, 6488(%rsp)        # 8-byte Spill
	movq	%r13, 6480(%rsp)        # 8-byte Spill
	movl	%ebp, 6476(%rsp)        # 4-byte Spill
	movq	%r14, 6464(%rsp)        # 8-byte Spill
	movq	%rbx, 6456(%rsp)        # 8-byte Spill
	movq	%r10, 6448(%rsp)        # 8-byte Spill
	movq	%r11, 6440(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	6512(%rsp), %rdi        # 8-byte Reload
	movq	6664(%rsp), %rsi        # 8-byte Reload
	movq	6544(%rsp), %rdx        # 8-byte Reload
	movq	6528(%rsp), %rcx        # 8-byte Reload
	movq	6656(%rsp), %r8         # 8-byte Reload
	movq	6528(%rsp), %r9         # 8-byte Reload
	movq	6456(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	6528(%rsp), %rdi        # 8-byte Reload
	movq	6664(%rsp), %rsi        # 8-byte Reload
	movq	6544(%rsp), %rdx        # 8-byte Reload
	movq	6528(%rsp), %rcx        # 8-byte Reload
	movq	6552(%rsp), %r8         # 8-byte Reload
	movq	6528(%rsp), %r9         # 8-byte Reload
	movq	6584(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	6720(%rsp), %rdi        # 8-byte Reload
	movq	6664(%rsp), %rsi        # 8-byte Reload
	movq	6728(%rsp), %rdx        # 8-byte Reload
	movq	6528(%rsp), %rcx        # 8-byte Reload
	movq	6648(%rsp), %r8         # 8-byte Reload
	movq	6544(%rsp), %r9         # 8-byte Reload
	movq	6584(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	6568(%rsp), %rdi        # 8-byte Reload
	movq	6496(%rsp), %rsi        # 8-byte Reload
	movq	6488(%rsp), %rdx        # 8-byte Reload
	movq	6696(%rsp), %rcx        # 8-byte Reload
	movq	6560(%rsp), %r8         # 8-byte Reload
	movl	6476(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	6512(%rsp), %rdi        # 8-byte Reload
	movq	6712(%rsp), %rsi        # 8-byte Reload
	movq	6544(%rsp), %rdx        # 8-byte Reload
	movq	6528(%rsp), %rcx        # 8-byte Reload
	movq	6704(%rsp), %r8         # 8-byte Reload
	movq	6528(%rsp), %r9         # 8-byte Reload
	movq	6456(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	6528(%rsp), %rdi        # 8-byte Reload
	movq	6712(%rsp), %rsi        # 8-byte Reload
	movq	6544(%rsp), %rdx        # 8-byte Reload
	movq	6528(%rsp), %rcx        # 8-byte Reload
	movq	6576(%rsp), %r8         # 8-byte Reload
	movq	6528(%rsp), %r9         # 8-byte Reload
	movq	6584(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	6740(%rsp), %eax        # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	6720(%rsp), %rdi        # 8-byte Reload
	movq	6712(%rsp), %rsi        # 8-byte Reload
	movq	6528(%rsp), %rcx        # 8-byte Reload
	movq	6696(%rsp), %r8         # 8-byte Reload
	movq	6544(%rsp), %r9         # 8-byte Reload
	movq	6584(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	6464(%rsp), %rdi        # 8-byte Reload
	movq	6496(%rsp), %rsi        # 8-byte Reload
	movq	6488(%rsp), %rdx        # 8-byte Reload
	movq	6616(%rsp), %rcx        # 8-byte Reload
	movq	6592(%rsp), %r8         # 8-byte Reload
	movl	6476(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	6512(%rsp), %rdi        # 8-byte Reload
	movq	6664(%rsp), %rsi        # 8-byte Reload
	movq	6728(%rsp), %rdx        # 8-byte Reload
	movq	6528(%rsp), %rcx        # 8-byte Reload
	movq	6648(%rsp), %r8         # 8-byte Reload
	movq	6544(%rsp), %r9         # 8-byte Reload
	movq	6520(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	6528(%rsp), %rdi        # 8-byte Reload
	movq	6664(%rsp), %rsi        # 8-byte Reload
	movq	9208(%rsp), %rdx        # 8-byte Reload
	movq	6528(%rsp), %rcx        # 8-byte Reload
	movq	6600(%rsp), %r8         # 8-byte Reload
	movq	6544(%rsp), %r9         # 8-byte Reload
	movq	6520(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	6728(%rsp), %rcx        # 8-byte Reload
	shlq	$3, %rcx
	movq	9208(%rsp), %rdx        # 8-byte Reload
	addq	%rcx, %rdx
	movq	6720(%rsp), %rdi        # 8-byte Reload
	movq	6664(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 6432(%rsp)        # 8-byte Spill
	movq	6528(%rsp), %rcx        # 8-byte Reload
	movq	6616(%rsp), %r8         # 8-byte Reload
	movq	6544(%rsp), %r9         # 8-byte Reload
	movq	6520(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	6464(%rsp), %rdi        # 8-byte Reload
	movq	6496(%rsp), %rsi        # 8-byte Reload
	movq	6488(%rsp), %rdx        # 8-byte Reload
	movq	6640(%rsp), %rcx        # 8-byte Reload
	movq	6608(%rsp), %r8         # 8-byte Reload
	movl	6476(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	6528(%rsp), %rdi        # 8-byte Reload
	movq	6664(%rsp), %rsi        # 8-byte Reload
	movq	6432(%rsp), %rdx        # 8-byte Reload
	movq	6528(%rsp), %rcx        # 8-byte Reload
	movq	6616(%rsp), %r8         # 8-byte Reload
	movq	6544(%rsp), %r9         # 8-byte Reload
	movq	6520(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	9208(%rsp), %rcx        # 8-byte Reload
	movq	6728(%rsp), %rdx        # 8-byte Reload
	vmovsd	(%rcx,%rdx,8), %xmm0
	movq	6720(%rsp), %rdi        # 8-byte Reload
	movq	6664(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 6424(%rsp)       # 8-byte Spill
	movq	6528(%rsp), %rdx        # 8-byte Reload
	movq	6640(%rsp), %rcx        # 8-byte Reload
	movq	6544(%rsp), %r8         # 8-byte Reload
	movq	6520(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	6464(%rsp), %rdi        # 8-byte Reload
	movq	6496(%rsp), %rsi        # 8-byte Reload
	movq	6488(%rsp), %rdx        # 8-byte Reload
	movq	6536(%rsp), %rcx        # 8-byte Reload
	movq	6624(%rsp), %r8         # 8-byte Reload
	movl	6476(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	6512(%rsp), %rdi        # 8-byte Reload
	movq	6664(%rsp), %rsi        # 8-byte Reload
	vmovsd	7016(%rsp), %xmm0       # 8-byte Reload
	movq	6528(%rsp), %rdx        # 8-byte Reload
	movq	6632(%rsp), %rcx        # 8-byte Reload
	movq	6544(%rsp), %r8         # 8-byte Reload
	movq	6520(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	6528(%rsp), %rdi        # 8-byte Reload
	movq	6664(%rsp), %rsi        # 8-byte Reload
	vmovsd	6424(%rsp), %xmm0       # 8-byte Reload
	movq	6528(%rsp), %rdx        # 8-byte Reload
	movq	6640(%rsp), %rcx        # 8-byte Reload
	movq	6544(%rsp), %r8         # 8-byte Reload
	movq	6520(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	7016(%rsp), %xmm0       # 8-byte Reload
	vmovsd	6424(%rsp), %xmm1       # 8-byte Reload
	vucomisd	%xmm1, %xmm0
	setb	%al
.Ltmp425:
	.loc	2 480 0                 # eispack.c:480:0
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ebp
	movl	%ebp, %edx
	movq	6720(%rsp), %rdi        # 8-byte Reload
	movq	6528(%rsp), %rsi        # 8-byte Reload
	movq	6528(%rsp), %rcx        # 8-byte Reload
	movq	6536(%rsp), %r8         # 8-byte Reload
	movq	6544(%rsp), %r9         # 8-byte Reload
	movq	6520(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 6423(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	6680(%rsp), %rdi        # 8-byte Reload
	movq	6496(%rsp), %rsi        # 8-byte Reload
	movq	6488(%rsp), %rdx        # 8-byte Reload
	movq	6656(%rsp), %rcx        # 8-byte Reload
	movq	6672(%rsp), %r8         # 8-byte Reload
	movl	6476(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	6512(%rsp), %rdi        # 8-byte Reload
	movq	6664(%rsp), %rsi        # 8-byte Reload
	movq	6528(%rsp), %rdx        # 8-byte Reload
	movq	6544(%rsp), %rcx        # 8-byte Reload
	movq	6688(%rsp), %r8         # 8-byte Reload
	movq	6544(%rsp), %r9         # 8-byte Reload
	movq	6520(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	6528(%rsp), %rdi        # 8-byte Reload
	movq	6664(%rsp), %rsi        # 8-byte Reload
	movq	6728(%rsp), %rdx        # 8-byte Reload
	movq	6528(%rsp), %rcx        # 8-byte Reload
	movq	6648(%rsp), %r8         # 8-byte Reload
	movq	6544(%rsp), %r9         # 8-byte Reload
	movq	6520(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	6728(%rsp), %rcx        # 8-byte Reload
	addq	$1, %rcx
	movq	6720(%rsp), %rdi        # 8-byte Reload
	movq	6664(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	6528(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 6760(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	6656(%rsp), %r8         # 8-byte Reload
	movq	6544(%rsp), %r9         # 8-byte Reload
	movq	6520(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	6680(%rsp), %rdi        # 8-byte Reload
	movq	6496(%rsp), %rsi        # 8-byte Reload
	movq	6488(%rsp), %rdx        # 8-byte Reload
	movq	6704(%rsp), %rcx        # 8-byte Reload
	movq	6672(%rsp), %r8         # 8-byte Reload
	movl	6476(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	6512(%rsp), %rdi        # 8-byte Reload
	movq	6712(%rsp), %rsi        # 8-byte Reload
	movq	6528(%rsp), %rdx        # 8-byte Reload
	movq	6544(%rsp), %rcx        # 8-byte Reload
	movq	6688(%rsp), %r8         # 8-byte Reload
	movq	6544(%rsp), %r9         # 8-byte Reload
	movq	6520(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	6740(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %eax
	movl	%eax, %edx
	movq	6528(%rsp), %rdi        # 8-byte Reload
	movq	6712(%rsp), %rsi        # 8-byte Reload
	movq	6528(%rsp), %rcx        # 8-byte Reload
	movq	6696(%rsp), %r8         # 8-byte Reload
	movq	6544(%rsp), %r9         # 8-byte Reload
	movq	6520(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	6740(%rsp), %eax        # 4-byte Reload
	addl	$1, %eax
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	6720(%rsp), %rdi        # 8-byte Reload
	movq	6712(%rsp), %rsi        # 8-byte Reload
	movq	6528(%rsp), %rcx        # 8-byte Reload
	movq	6704(%rsp), %r8         # 8-byte Reload
	movq	6544(%rsp), %r9         # 8-byte Reload
	movq	6520(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, 6748(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
.Ltmp426:
	#DEBUG_VALUE: tqlrat:m <- [RSP+6748]
	.loc	2 482 0                 # eispack.c:482:0
	movq	6464(%rsp), %rdi        # 8-byte Reload
	movq	6496(%rsp), %rsi        # 8-byte Reload
	movq	6488(%rsp), %rdx        # 8-byte Reload
	movq	6480(%rsp), %rcx        # 8-byte Reload
	movq	6512(%rsp), %r8         # 8-byte Reload
	movl	6476(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	6440(%rsp), %rdi        # 8-byte Reload
	movq	6544(%rsp), %rsi        # 8-byte Reload
	movq	6544(%rsp), %rdx        # 8-byte Reload
	movq	6528(%rsp), %rcx        # 8-byte Reload
	movq	6456(%rsp), %r8         # 8-byte Reload
	movq	6544(%rsp), %r9         # 8-byte Reload
	movq	6520(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	6512(%rsp), %rdi        # 8-byte Reload
	movq	6544(%rsp), %rsi        # 8-byte Reload
	movq	6544(%rsp), %rdx        # 8-byte Reload
	movq	6528(%rsp), %rcx        # 8-byte Reload
	movq	6448(%rsp), %r8         # 8-byte Reload
	movq	6544(%rsp), %r9         # 8-byte Reload
	movq	6520(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	6423(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	6528(%rsp), %rdi        # 8-byte Reload
	movq	6528(%rsp), %rsi        # 8-byte Reload
	movq	6528(%rsp), %rcx        # 8-byte Reload
	movq	6536(%rsp), %r8         # 8-byte Reload
	movq	6544(%rsp), %r9         # 8-byte Reload
	movq	6520(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	6423(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	movl	6740(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, 6744(%rsp)        # 4-byte Spill
	jne	.LBB10_8
.Ltmp427:
.LBB10_10:                              # %split2
                                        #   in Loop: Header=BB10_5 Depth=1
	movl	6744(%rsp), %eax        # 4-byte Reload
	movabsq	$1, %rcx
	leaq	.L.str141, %rdx
	movabsq	$0, %rsi
	leaq	.L.str792, %rdi
	movabsq	$2, %r8
	leaq	.L.str133, %r9
	movabsq	$3, %r10
	leaq	.L.str417, %r11
	movabsq	$488, %rbx              # imm = 0x1E8
	leaq	.L.str61146, %r14
	leaq	.L.str411, %r15
	leaq	.L.str416, %r12
	movl	$0, %ebp
	movl	$1, %r13d
	movq	%rcx, 6408(%rsp)        # 8-byte Spill
	movabsq	$19134, %rcx            # imm = 0x4ABE
	movq	%rcx, 6400(%rsp)        # 8-byte Spill
	movabsq	$32, %rcx
	movq	%rcx, 6392(%rsp)        # 8-byte Spill
	leaq	.L.str415, %rcx
	movq	%rcx, 6384(%rsp)        # 8-byte Spill
	leaq	.L.str130, %rcx
	movq	%rcx, 6376(%rsp)        # 8-byte Spill
	movabsq	$46, %rcx
	movq	%rcx, 6368(%rsp)        # 8-byte Spill
	movabsq	$64, %rcx
	movq	%rcx, 6360(%rsp)        # 8-byte Spill
	leaq	.L.str387, %rcx
	movq	%rcx, 6352(%rsp)        # 8-byte Spill
	movabsq	$33, %rcx
	movq	%rcx, 6344(%rsp)        # 8-byte Spill
	leaq	.L.str407, %rcx
	movq	%rcx, 6336(%rsp)        # 8-byte Spill
	leaq	.L.str413, %rcx
	movq	%rcx, 6328(%rsp)        # 8-byte Spill
	leaq	.L.str129, %rcx
	movq	%rcx, 6320(%rsp)        # 8-byte Spill
	leaq	.L.str408, %rcx
	movq	%rcx, 6312(%rsp)        # 8-byte Spill
	movabsq	$-1, %rcx
	movq	%rcx, 6304(%rsp)        # 8-byte Spill
	movabsq	$48, %rcx
	.loc	2 488 0                 # eispack.c:488:0
.Ltmp428:
	movq	%rcx, 6296(%rsp)        # 8-byte Spill
	movq	6304(%rsp), %rcx        # 8-byte Reload
	movq	%rdi, 6288(%rsp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	%rsi, 6280(%rsp)        # 8-byte Spill
	movq	%r14, %rsi
	movq	%rdx, 6272(%rsp)        # 8-byte Spill
	movq	%r15, %rdx
	movq	6384(%rsp), %rcx        # 8-byte Reload
	movq	%r8, 6264(%rsp)         # 8-byte Spill
	movq	6296(%rsp), %r8         # 8-byte Reload
	movq	%r9, 6256(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movl	%eax, 6252(%rsp)        # 4-byte Spill
	movq	%r15, 6240(%rsp)        # 8-byte Spill
	movq	%r12, 6232(%rsp)        # 8-byte Spill
	movl	%ebp, 6228(%rsp)        # 4-byte Spill
	movl	%r13d, 6224(%rsp)       # 4-byte Spill
	movq	%r14, 6216(%rsp)        # 8-byte Spill
	movq	%rbx, 6208(%rsp)        # 8-byte Spill
	movq	%r10, 6200(%rsp)        # 8-byte Spill
	movq	%r11, 6192(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	6264(%rsp), %rdi        # 8-byte Reload
	movq	6392(%rsp), %rsi        # 8-byte Reload
	movq	6280(%rsp), %rdx        # 8-byte Reload
	movq	6408(%rsp), %rcx        # 8-byte Reload
	movq	6320(%rsp), %r8         # 8-byte Reload
	movq	6408(%rsp), %r9         # 8-byte Reload
	movq	6312(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	6408(%rsp), %rdi        # 8-byte Reload
	movq	6392(%rsp), %rsi        # 8-byte Reload
	movq	6280(%rsp), %rdx        # 8-byte Reload
	movq	6408(%rsp), %rcx        # 8-byte Reload
	movq	6328(%rsp), %r8         # 8-byte Reload
	movq	6408(%rsp), %r9         # 8-byte Reload
	movq	6336(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	6252(%rsp), %eax        # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	6400(%rsp), %rdi        # 8-byte Reload
	movq	6392(%rsp), %rsi        # 8-byte Reload
	movq	6408(%rsp), %rcx        # 8-byte Reload
	movq	6384(%rsp), %r8         # 8-byte Reload
	movq	6280(%rsp), %r9         # 8-byte Reload
	movq	6336(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	6208(%rsp), %rdi        # 8-byte Reload
	movq	6216(%rsp), %rsi        # 8-byte Reload
	movq	6240(%rsp), %rdx        # 8-byte Reload
	movq	6376(%rsp), %rcx        # 8-byte Reload
	movq	6344(%rsp), %r8         # 8-byte Reload
	movl	6228(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	6408(%rsp), %rdi        # 8-byte Reload
	movq	6360(%rsp), %rsi        # 8-byte Reload
	movq	7640(%rsp), %rdx        # 8-byte Reload
	movq	6408(%rsp), %rcx        # 8-byte Reload
	movq	6352(%rsp), %r8         # 8-byte Reload
	movq	6280(%rsp), %r9         # 8-byte Reload
	movq	6288(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	7640(%rsp), %rcx        # 8-byte Reload
	movl	%ecx, %eax
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	6400(%rsp), %rdi        # 8-byte Reload
	movq	6392(%rsp), %rsi        # 8-byte Reload
	movq	6408(%rsp), %rcx        # 8-byte Reload
	movq	6376(%rsp), %r8         # 8-byte Reload
	movq	6280(%rsp), %r9         # 8-byte Reload
	movq	6288(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, 6188(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	6208(%rsp), %rdi        # 8-byte Reload
	movq	6216(%rsp), %rsi        # 8-byte Reload
	movq	6240(%rsp), %rdx        # 8-byte Reload
	movq	6272(%rsp), %rcx        # 8-byte Reload
	movq	6368(%rsp), %r8         # 8-byte Reload
	movl	6228(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	6188(%rsp), %eax        # 4-byte Reload
	movl	%eax, %r9d
	movl	%r9d, %edx
	movq	6264(%rsp), %rdi        # 8-byte Reload
	movq	6392(%rsp), %rsi        # 8-byte Reload
	movq	6408(%rsp), %rcx        # 8-byte Reload
	movq	6376(%rsp), %r8         # 8-byte Reload
	movq	6280(%rsp), %r9         # 8-byte Reload
	movq	6288(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	6252(%rsp), %eax        # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	6408(%rsp), %rdi        # 8-byte Reload
	movq	6392(%rsp), %rsi        # 8-byte Reload
	movq	6408(%rsp), %rcx        # 8-byte Reload
	movq	6384(%rsp), %r8         # 8-byte Reload
	movq	6280(%rsp), %r9         # 8-byte Reload
	movq	6288(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	6252(%rsp), %eax        # 4-byte Reload
	movl	6188(%rsp), %ebp        # 4-byte Reload
	cmpl	%ebp, %eax
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %r13d
	movl	%r13d, %edx
	movq	6400(%rsp), %rdi        # 8-byte Reload
	movq	6408(%rsp), %rsi        # 8-byte Reload
	movq	6408(%rsp), %rcx        # 8-byte Reload
	movq	6272(%rsp), %r8         # 8-byte Reload
	movq	6280(%rsp), %r9         # 8-byte Reload
	movq	6288(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 6187(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	6208(%rsp), %rdi        # 8-byte Reload
	movq	6216(%rsp), %rsi        # 8-byte Reload
	movq	6240(%rsp), %rdx        # 8-byte Reload
	movq	6232(%rsp), %rcx        # 8-byte Reload
	movq	6264(%rsp), %r8         # 8-byte Reload
	movl	6228(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	6200(%rsp), %rdi        # 8-byte Reload
	movq	6280(%rsp), %rsi        # 8-byte Reload
	movq	6280(%rsp), %rdx        # 8-byte Reload
	movq	6408(%rsp), %rcx        # 8-byte Reload
	movq	6192(%rsp), %r8         # 8-byte Reload
	movq	6280(%rsp), %r9         # 8-byte Reload
	movq	6288(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	6264(%rsp), %rdi        # 8-byte Reload
	movq	6280(%rsp), %rsi        # 8-byte Reload
	movq	6280(%rsp), %rdx        # 8-byte Reload
	movq	6408(%rsp), %rcx        # 8-byte Reload
	movq	6256(%rsp), %r8         # 8-byte Reload
	movq	6280(%rsp), %r9         # 8-byte Reload
	movq	6288(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	6187(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	6408(%rsp), %rdi        # 8-byte Reload
	movq	6408(%rsp), %rsi        # 8-byte Reload
	movq	6408(%rsp), %rcx        # 8-byte Reload
	movq	6272(%rsp), %r8         # 8-byte Reload
	movq	6280(%rsp), %r9         # 8-byte Reload
	movq	6288(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	6187(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	vmovsd	7592(%rsp), %xmm0       # 8-byte Reload
	vmovsd	%xmm0, 6176(%rsp)       # 8-byte Spill
	jne	.LBB10_21
# BB#11:                                # %.preheader
                                        #   in Loop: Header=BB10_5 Depth=1
	movl	$0, %eax
	movabsq	$1, %rcx
	movabsq	$0, %rdx
	leaq	.L.str418, %r8
	leaq	.L.str792, %rsi
	movabsq	$492, %rdi              # imm = 0x1EC
	leaq	.L.str61146, %r9
	leaq	.L.str133, %r10
	leaq	.L.str136, %r11
	movabsq	$2, %rbx
	movl	$1, %ebp
	movabsq	$19134, %r14            # imm = 0x4ABE
	movabsq	$32, %r15
	leaq	.L.str152, %r12
	leaq	.L.str415, %r13
	movq	%rcx, 6168(%rsp)        # 8-byte Spill
	leaq	.L.str390, %rcx
	movq	%rcx, 6160(%rsp)        # 8-byte Spill
	movabsq	$8, %rcx
	movq	%rcx, 6152(%rsp)        # 8-byte Spill
	leaq	.L.str151, %rcx
	movq	%rcx, 6144(%rsp)        # 8-byte Spill
	leaq	.L.str150, %rcx
	movq	%rcx, 6136(%rsp)        # 8-byte Spill
	leaq	.L.str1499, %rcx
	movq	%rcx, 6128(%rsp)        # 8-byte Spill
	movabsq	$527, %rcx              # imm = 0x20F
	movq	%rcx, 6120(%rsp)        # 8-byte Spill
	movabsq	$46, %rcx
	movq	%rcx, 6112(%rsp)        # 8-byte Spill
	leaq	.L.str149, %rcx
	movq	%rcx, 6104(%rsp)        # 8-byte Spill
	movabsq	$525, %rcx              # imm = 0x20D
	movq	%rcx, 6096(%rsp)        # 8-byte Spill
	movabsq	$10, %rcx
	movq	%rcx, 6088(%rsp)        # 8-byte Spill
	movabsq	$64, %rcx
	movq	%rcx, 6080(%rsp)        # 8-byte Spill
	leaq	.L.str387, %rcx
	movq	%rcx, 6072(%rsp)        # 8-byte Spill
	movabsq	$33, %rcx
	movq	%rcx, 6064(%rsp)        # 8-byte Spill
	leaq	.L.str147, %rcx
	movq	%rcx, 6056(%rsp)        # 8-byte Spill
	leaq	.L.str85170, %rcx
	movq	%rcx, 6048(%rsp)        # 8-byte Spill
	leaq	.L.str146, %rcx
	movq	%rcx, 6040(%rsp)        # 8-byte Spill
	movabsq	$517, %rcx              # imm = 0x205
	movq	%rcx, 6032(%rsp)        # 8-byte Spill
	movabsq	$29, %rcx
	movq	%rcx, 6024(%rsp)        # 8-byte Spill
	movabsq	$35, %rcx
	movq	%rcx, 6016(%rsp)        # 8-byte Spill
	leaq	.L.str145, %rcx
	movq	%rcx, 6008(%rsp)        # 8-byte Spill
	leaq	.L.str144, %rcx
	movq	%rcx, 6000(%rsp)        # 8-byte Spill
	leaq	.L.str51136, %rcx
	movq	%rcx, 5992(%rsp)        # 8-byte Spill
	movabsq	$509, %rcx              # imm = 0x1FD
	movq	%rcx, 5984(%rsp)        # 8-byte Spill
	leaq	.L.str142, %rcx
	movq	%rcx, 5976(%rsp)        # 8-byte Spill
	leaq	.L.str143, %rcx
	movq	%rcx, 5968(%rsp)        # 8-byte Spill
	movabsq	$505, %rcx              # imm = 0x1F9
	movq	%rcx, 5960(%rsp)        # 8-byte Spill
	movabsq	$502, %rcx              # imm = 0x1F6
	.loc	2 502 0                 # eispack.c:502:0
.Ltmp429:
	movq	%rdi, 5952(%rsp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	%rsi, 5944(%rsp)        # 8-byte Spill
	movq	%r9, %rsi
	movq	%rdx, 5936(%rsp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	5976(%rsp), %rcx        # 8-byte Reload
	movq	%r8, 5928(%rsp)         # 8-byte Spill
	movq	6152(%rsp), %r8         # 8-byte Reload
	movq	%r9, 5920(%rsp)         # 8-byte Spill
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movl	%eax, 5916(%rsp)        # 4-byte Spill
	movq	%r13, 5904(%rsp)        # 8-byte Spill
	movq	%r14, 5896(%rsp)        # 8-byte Spill
	movl	%ebp, 5892(%rsp)        # 4-byte Spill
	movq	%r15, 5880(%rsp)        # 8-byte Spill
	movq	%r12, 5872(%rsp)        # 8-byte Spill
	movq	%rbx, 5864(%rsp)        # 8-byte Spill
	movq	%r10, 5856(%rsp)        # 8-byte Spill
	movq	%r11, 5848(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	5864(%rsp), %rdi        # 8-byte Reload
	movq	6080(%rsp), %rsi        # 8-byte Reload
	movq	6168(%rsp), %rdx        # 8-byte Reload
	movq	5936(%rsp), %rcx        # 8-byte Reload
	movq	6128(%rsp), %r8         # 8-byte Reload
	movq	5936(%rsp), %r9         # 8-byte Reload
	movq	5944(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	6168(%rsp), %rdi        # 8-byte Reload
	movq	6080(%rsp), %rsi        # 8-byte Reload
	movq	7640(%rsp), %rdx        # 8-byte Reload
	movq	6168(%rsp), %rcx        # 8-byte Reload
	movq	6072(%rsp), %r8         # 8-byte Reload
	movq	5936(%rsp), %r9         # 8-byte Reload
	movq	5944(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	7640(%rsp), %rcx        # 8-byte Reload
	addq	$1, %rcx
	.loc	2 505 0                 # eispack.c:505:0
	movq	5896(%rsp), %rdi        # 8-byte Reload
	movq	6080(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	6168(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 5840(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	5976(%rsp), %r8         # 8-byte Reload
	movq	5936(%rsp), %r9         # 8-byte Reload
	movq	5944(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	5960(%rsp), %rdi        # 8-byte Reload
	movq	5920(%rsp), %rsi        # 8-byte Reload
	movq	5856(%rsp), %rdx        # 8-byte Reload
	movq	5968(%rsp), %rcx        # 8-byte Reload
	movq	6024(%rsp), %r8         # 8-byte Reload
	movl	5916(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	5864(%rsp), %rdi        # 8-byte Reload
	movq	6080(%rsp), %rsi        # 8-byte Reload
	movq	5840(%rsp), %rdx        # 8-byte Reload
	movq	6168(%rsp), %rcx        # 8-byte Reload
	movq	5976(%rsp), %r8         # 8-byte Reload
	movq	5936(%rsp), %r9         # 8-byte Reload
	movq	5944(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	6168(%rsp), %rdi        # 8-byte Reload
	movq	6080(%rsp), %rsi        # 8-byte Reload
	movq	9216(%rsp), %rdx        # 8-byte Reload
	movq	6168(%rsp), %rcx        # 8-byte Reload
	movq	6048(%rsp), %r8         # 8-byte Reload
	movq	5936(%rsp), %r9         # 8-byte Reload
	movq	5944(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	5840(%rsp), %rcx        # 8-byte Reload
	shlq	$3, %rcx
	movq	9216(%rsp), %rdx        # 8-byte Reload
	addq	%rcx, %rdx
	.loc	2 509 0                 # eispack.c:509:0
.Ltmp430:
	movq	5896(%rsp), %rdi        # 8-byte Reload
	movq	6080(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 5832(%rsp)        # 8-byte Spill
	movq	6168(%rsp), %rcx        # 8-byte Reload
	movq	5968(%rsp), %r8         # 8-byte Reload
	movq	5936(%rsp), %r9         # 8-byte Reload
	movq	5944(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	5984(%rsp), %rdi        # 8-byte Reload
	movq	5920(%rsp), %rsi        # 8-byte Reload
	movq	5856(%rsp), %rdx        # 8-byte Reload
	movq	6000(%rsp), %rcx        # 8-byte Reload
	movq	6064(%rsp), %r8         # 8-byte Reload
	movl	5916(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	6168(%rsp), %rdi        # 8-byte Reload
	movq	6080(%rsp), %rsi        # 8-byte Reload
	movq	5840(%rsp), %rdx        # 8-byte Reload
	movq	6168(%rsp), %rcx        # 8-byte Reload
	movq	5976(%rsp), %r8         # 8-byte Reload
	movq	5936(%rsp), %r9         # 8-byte Reload
	movq	5944(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	5840(%rsp), %rcx        # 8-byte Reload
	movl	%ecx, %eax
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	5896(%rsp), %rdi        # 8-byte Reload
	movq	5880(%rsp), %rsi        # 8-byte Reload
	movq	6168(%rsp), %rcx        # 8-byte Reload
	movq	6000(%rsp), %r8         # 8-byte Reload
	movq	5936(%rsp), %r9         # 8-byte Reload
	movq	5944(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, 5828(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	5984(%rsp), %rdi        # 8-byte Reload
	movq	5920(%rsp), %rsi        # 8-byte Reload
	movq	5856(%rsp), %rdx        # 8-byte Reload
	movq	6008(%rsp), %rcx        # 8-byte Reload
	movq	6112(%rsp), %r8         # 8-byte Reload
	movl	5916(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	9228(%rsp), %eax        # 4-byte Reload
	movl	%eax, %r9d
	movl	%r9d, %edx
	movq	5864(%rsp), %rdi        # 8-byte Reload
	movq	5880(%rsp), %rsi        # 8-byte Reload
	movq	6168(%rsp), %rcx        # 8-byte Reload
	movq	5992(%rsp), %r8         # 8-byte Reload
	movq	5936(%rsp), %r9         # 8-byte Reload
	movq	5944(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	5828(%rsp), %eax        # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	6168(%rsp), %rdi        # 8-byte Reload
	movq	5880(%rsp), %rsi        # 8-byte Reload
	movq	6168(%rsp), %rcx        # 8-byte Reload
	movq	6000(%rsp), %r8         # 8-byte Reload
	movq	5936(%rsp), %r9         # 8-byte Reload
	movq	5944(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	5828(%rsp), %eax        # 4-byte Reload
	movl	9228(%rsp), %ebp        # 4-byte Reload
	cmpl	%ebp, %eax
	setl	%al
.Ltmp431:
	.loc	2 517 0                 # eispack.c:517:0
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	5896(%rsp), %rdi        # 8-byte Reload
	movq	6168(%rsp), %rsi        # 8-byte Reload
	movq	6168(%rsp), %rcx        # 8-byte Reload
	movq	6008(%rsp), %r8         # 8-byte Reload
	movq	5936(%rsp), %r9         # 8-byte Reload
	movq	5944(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 5827(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	6032(%rsp), %rdi        # 8-byte Reload
	movq	5920(%rsp), %rsi        # 8-byte Reload
	movq	5856(%rsp), %rdx        # 8-byte Reload
	movq	6040(%rsp), %rcx        # 8-byte Reload
	movq	6016(%rsp), %r8         # 8-byte Reload
	movl	5916(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	6252(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	6168(%rsp), %rdi        # 8-byte Reload
	movq	5880(%rsp), %rsi        # 8-byte Reload
	movq	6168(%rsp), %rcx        # 8-byte Reload
	movq	5904(%rsp), %r8         # 8-byte Reload
	movq	5936(%rsp), %r9         # 8-byte Reload
	movq	5944(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	6252(%rsp), %ebp        # 4-byte Reload
	movslq	%ebp, %rcx
	movq	5896(%rsp), %rdi        # 8-byte Reload
	movq	6080(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	6168(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 5816(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	6040(%rsp), %r8         # 8-byte Reload
	movq	5936(%rsp), %r9         # 8-byte Reload
	movq	5944(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	6032(%rsp), %rdi        # 8-byte Reload
	movq	5920(%rsp), %rsi        # 8-byte Reload
	movq	5856(%rsp), %rdx        # 8-byte Reload
	movq	6056(%rsp), %rcx        # 8-byte Reload
	movq	6024(%rsp), %r8         # 8-byte Reload
	movl	5916(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	5864(%rsp), %rdi        # 8-byte Reload
	movq	6080(%rsp), %rsi        # 8-byte Reload
	movq	5816(%rsp), %rdx        # 8-byte Reload
	movq	6168(%rsp), %rcx        # 8-byte Reload
	movq	6040(%rsp), %r8         # 8-byte Reload
	movq	5936(%rsp), %r9         # 8-byte Reload
	movq	5944(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	6168(%rsp), %rdi        # 8-byte Reload
	movq	6080(%rsp), %rsi        # 8-byte Reload
	movq	9216(%rsp), %rdx        # 8-byte Reload
	movq	6168(%rsp), %rcx        # 8-byte Reload
	movq	6048(%rsp), %r8         # 8-byte Reload
	movq	5936(%rsp), %r9         # 8-byte Reload
	movq	5944(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	5816(%rsp), %rcx        # 8-byte Reload
	shlq	$3, %rcx
	movq	9216(%rsp), %rdx        # 8-byte Reload
	addq	%rcx, %rdx
	.loc	2 525 0                 # eispack.c:525:0
	movq	5896(%rsp), %rdi        # 8-byte Reload
	movq	6080(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 5808(%rsp)        # 8-byte Spill
	movq	6168(%rsp), %rcx        # 8-byte Reload
	movq	6056(%rsp), %r8         # 8-byte Reload
	movq	5936(%rsp), %r9         # 8-byte Reload
	movq	5944(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	6096(%rsp), %rdi        # 8-byte Reload
	movq	5920(%rsp), %rsi        # 8-byte Reload
	movq	5856(%rsp), %rdx        # 8-byte Reload
	movq	6104(%rsp), %rcx        # 8-byte Reload
	movq	6064(%rsp), %r8         # 8-byte Reload
	movl	5916(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	6168(%rsp), %rdi        # 8-byte Reload
	movq	6080(%rsp), %rsi        # 8-byte Reload
	movq	7640(%rsp), %rdx        # 8-byte Reload
	movq	6168(%rsp), %rcx        # 8-byte Reload
	movq	6072(%rsp), %r8         # 8-byte Reload
	movq	5936(%rsp), %r9         # 8-byte Reload
	movq	5944(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	7640(%rsp), %rcx        # 8-byte Reload
	movl	%ecx, %ebp
	movl	%ebp, %eax
	movl	%eax, %edx
	movq	5896(%rsp), %rdi        # 8-byte Reload
	movq	5880(%rsp), %rsi        # 8-byte Reload
	movq	6168(%rsp), %rcx        # 8-byte Reload
	movq	6104(%rsp), %r8         # 8-byte Reload
	movq	5936(%rsp), %r9         # 8-byte Reload
	movq	5944(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 5804(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	6096(%rsp), %rdi        # 8-byte Reload
	movq	5920(%rsp), %rsi        # 8-byte Reload
	movq	5856(%rsp), %rdx        # 8-byte Reload
	movq	6136(%rsp), %rcx        # 8-byte Reload
	movq	6088(%rsp), %r8         # 8-byte Reload
	movl	5916(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	5804(%rsp), %eax        # 4-byte Reload
	movl	%eax, %r9d
	movl	%r9d, %edx
	movq	5864(%rsp), %rdi        # 8-byte Reload
	movq	5880(%rsp), %rsi        # 8-byte Reload
	movq	6168(%rsp), %rcx        # 8-byte Reload
	movq	6104(%rsp), %r8         # 8-byte Reload
	movq	5936(%rsp), %r9         # 8-byte Reload
	movq	5944(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	6252(%rsp), %eax        # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	6168(%rsp), %rdi        # 8-byte Reload
	movq	5880(%rsp), %rsi        # 8-byte Reload
	movq	6168(%rsp), %rcx        # 8-byte Reload
	movq	5904(%rsp), %r8         # 8-byte Reload
	movq	5936(%rsp), %r9         # 8-byte Reload
	movq	5944(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	6252(%rsp), %eax        # 4-byte Reload
	movl	5804(%rsp), %ebp        # 4-byte Reload
	subl	%ebp, %eax
	.loc	2 527 0                 # eispack.c:527:0
.Ltmp432:
	movl	%eax, %esi
	movl	%esi, %edx
	movq	5896(%rsp), %rdi        # 8-byte Reload
	movq	5880(%rsp), %rsi        # 8-byte Reload
	movq	6168(%rsp), %rcx        # 8-byte Reload
	movq	6136(%rsp), %r8         # 8-byte Reload
	movq	5936(%rsp), %r9         # 8-byte Reload
	movq	5944(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, 5800(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	6120(%rsp), %rdi        # 8-byte Reload
	movq	5920(%rsp), %rsi        # 8-byte Reload
	movq	5856(%rsp), %rdx        # 8-byte Reload
	movq	6144(%rsp), %rcx        # 8-byte Reload
	movq	6112(%rsp), %r8         # 8-byte Reload
	movl	5916(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	5864(%rsp), %rdi        # 8-byte Reload
	movq	5880(%rsp), %rsi        # 8-byte Reload
	movq	6168(%rsp), %rdx        # 8-byte Reload
	movq	5936(%rsp), %rcx        # 8-byte Reload
	movq	6128(%rsp), %r8         # 8-byte Reload
	movq	5936(%rsp), %r9         # 8-byte Reload
	movq	5944(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	5800(%rsp), %eax        # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	6168(%rsp), %rdi        # 8-byte Reload
	movq	5880(%rsp), %rsi        # 8-byte Reload
	movq	6168(%rsp), %rcx        # 8-byte Reload
	movq	6136(%rsp), %r8         # 8-byte Reload
	movq	5936(%rsp), %r9         # 8-byte Reload
	movq	5944(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	5800(%rsp), %eax        # 4-byte Reload
	cmpl	$1, %eax
	setl	%al
.Ltmp433:
	.loc	2 492 0                 # eispack.c:492:0
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ebp
	movl	%ebp, %edx
	movq	5896(%rsp), %rdi        # 8-byte Reload
	movq	6168(%rsp), %rsi        # 8-byte Reload
	movq	6168(%rsp), %rcx        # 8-byte Reload
	movq	6144(%rsp), %r8         # 8-byte Reload
	movq	5936(%rsp), %r9         # 8-byte Reload
	movq	5944(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 5799(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	5952(%rsp), %rdi        # 8-byte Reload
	movq	5920(%rsp), %rsi        # 8-byte Reload
	movq	5856(%rsp), %rdx        # 8-byte Reload
	movq	5872(%rsp), %rcx        # 8-byte Reload
	movq	6152(%rsp), %r8         # 8-byte Reload
	movl	5916(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	7636(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	5864(%rsp), %rdi        # 8-byte Reload
	movq	5880(%rsp), %rsi        # 8-byte Reload
	movq	6168(%rsp), %rcx        # 8-byte Reload
	movq	6160(%rsp), %r8         # 8-byte Reload
	movq	5936(%rsp), %r9         # 8-byte Reload
	movq	5944(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	6252(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %eax
	movl	%eax, %edx
	movq	6168(%rsp), %rdi        # 8-byte Reload
	movq	5880(%rsp), %rsi        # 8-byte Reload
	movq	6168(%rsp), %rcx        # 8-byte Reload
	movq	5904(%rsp), %r8         # 8-byte Reload
	movq	5936(%rsp), %r9         # 8-byte Reload
	movq	5944(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	6252(%rsp), %eax        # 4-byte Reload
	movl	7636(%rsp), %ebp        # 4-byte Reload
	addl	%ebp, %eax
	movl	%eax, %esi
	movl	%esi, %edx
	movq	5896(%rsp), %rdi        # 8-byte Reload
	movq	5880(%rsp), %rsi        # 8-byte Reload
	movq	6168(%rsp), %rcx        # 8-byte Reload
	movq	5872(%rsp), %r8         # 8-byte Reload
	movq	5936(%rsp), %r9         # 8-byte Reload
	movq	5944(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, 5792(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	5952(%rsp), %rdi        # 8-byte Reload
	movq	5920(%rsp), %rsi        # 8-byte Reload
	movq	5856(%rsp), %rdx        # 8-byte Reload
	movq	5848(%rsp), %rcx        # 8-byte Reload
	movq	5864(%rsp), %r8         # 8-byte Reload
	movl	5916(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	6168(%rsp), %rdi        # 8-byte Reload
	movq	5936(%rsp), %rsi        # 8-byte Reload
	movq	5936(%rsp), %rdx        # 8-byte Reload
	movq	6168(%rsp), %rcx        # 8-byte Reload
	movq	5928(%rsp), %r8         # 8-byte Reload
	movq	5936(%rsp), %r9         # 8-byte Reload
	movq	5944(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	vmovsd	7592(%rsp), %xmm0       # 8-byte Reload
	movl	5916(%rsp), %eax        # 4-byte Reload
	vmovsd	%xmm0, 5784(%rsp)       # 8-byte Spill
	movl	%eax, 5780(%rsp)        # 4-byte Spill
.LBB10_12:                              #   Parent Loop BB10_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB10_15 Depth 3
                                        #       Child Loop BB10_17 Depth 3
	movl	5780(%rsp), %eax        # 4-byte Reload
	vmovsd	5784(%rsp), %xmm0       # 8-byte Reload
	movabsq	$1, %rcx
	leaq	.L.str159, %rdx
	movabsq	$0, %rsi
	leaq	.L.str792, %rdi
	movabsq	$2, %r8
	leaq	.L.str424, %r9
	movabsq	$3, %r10
	leaq	.L.str423, %r11
	movabsq	$492, %rbx              # imm = 0x1EC
	leaq	.L.str61146, %r14
	leaq	.L.str418, %r15
	leaq	.L.str422, %r12
	movl	$0, %ebp
	movl	$1, %r13d
	movq	%rcx, 5768(%rsp)        # 8-byte Spill
	movabsq	$19134, %rcx            # imm = 0x4ABE
	movq	%rcx, 5760(%rsp)        # 8-byte Spill
	movabsq	$32, %rcx
	movq	%rcx, 5752(%rsp)        # 8-byte Spill
	leaq	.L.str421, %rcx
	movq	%rcx, 5744(%rsp)        # 8-byte Spill
	movabsq	$29, %rcx
	movq	%rcx, 5736(%rsp)        # 8-byte Spill
	leaq	.L.str1499, %rcx
	movq	%rcx, 5728(%rsp)        # 8-byte Spill
	movabsq	$46, %rcx
	movq	%rcx, 5720(%rsp)        # 8-byte Spill
	leaq	.L.str420, %rcx
	movq	%rcx, 5712(%rsp)        # 8-byte Spill
	leaq	.L.str171, %rcx
	movq	%rcx, 5704(%rsp)        # 8-byte Spill
	leaq	.L.str133, %rcx
	movq	%rcx, 5696(%rsp)        # 8-byte Spill
	movabsq	$-1, %rcx
	movq	%rcx, 5688(%rsp)        # 8-byte Spill
	movabsq	$48, %rcx
	movq	%rcx, 5680(%rsp)        # 8-byte Spill
	movabsq	$64, %rcx
	movq	%rcx, 5672(%rsp)        # 8-byte Spill
	leaq	.L.str419, %rcx
	movq	%rcx, 5664(%rsp)        # 8-byte Spill
	leaq	.L.str205, %rcx
	movq	%rcx, 5656(%rsp)        # 8-byte Spill
	leaq	.L.str399, %rcx
	movq	%rcx, 5648(%rsp)        # 8-byte Spill
	movq	5688(%rsp), %rcx        # 8-byte Reload
	movq	%rdi, 5640(%rsp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	%rsi, 5632(%rsp)        # 8-byte Spill
	movq	%r14, %rsi
	movq	%rdx, 5624(%rsp)        # 8-byte Spill
	movq	%r15, %rdx
	movq	5664(%rsp), %rcx        # 8-byte Reload
	movq	%r8, 5616(%rsp)         # 8-byte Spill
	movq	5680(%rsp), %r8         # 8-byte Reload
	movq	%r9, 5608(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movl	%eax, 5604(%rsp)        # 4-byte Spill
	vmovsd	%xmm0, 5592(%rsp)       # 8-byte Spill
	movq	%r15, 5584(%rsp)        # 8-byte Spill
	movq	%r12, 5576(%rsp)        # 8-byte Spill
	movl	%ebp, 5572(%rsp)        # 4-byte Spill
	movl	%r13d, 5568(%rsp)       # 4-byte Spill
	movq	%r14, 5560(%rsp)        # 8-byte Spill
	movq	%rbx, 5552(%rsp)        # 8-byte Spill
	movq	%r10, 5544(%rsp)        # 8-byte Spill
	movq	%r11, 5536(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	5616(%rsp), %rdi        # 8-byte Reload
	movq	5672(%rsp), %rsi        # 8-byte Reload
	movq	5632(%rsp), %rdx        # 8-byte Reload
	movq	5768(%rsp), %rcx        # 8-byte Reload
	movq	5648(%rsp), %r8         # 8-byte Reload
	movq	5768(%rsp), %r9         # 8-byte Reload
	movq	5696(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	5768(%rsp), %rdi        # 8-byte Reload
	movq	5672(%rsp), %rsi        # 8-byte Reload
	movq	5632(%rsp), %rdx        # 8-byte Reload
	movq	5768(%rsp), %rcx        # 8-byte Reload
	movq	5656(%rsp), %r8         # 8-byte Reload
	movq	5768(%rsp), %r9         # 8-byte Reload
	movq	5712(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	5760(%rsp), %rdi        # 8-byte Reload
	movq	5672(%rsp), %rsi        # 8-byte Reload
	vmovsd	5592(%rsp), %xmm0       # 8-byte Reload
	movq	5768(%rsp), %rdx        # 8-byte Reload
	movq	5664(%rsp), %rcx        # 8-byte Reload
	movq	5632(%rsp), %r8         # 8-byte Reload
	movq	5712(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	5688(%rsp), %rdi        # 8-byte Reload
	movq	5560(%rsp), %rsi        # 8-byte Reload
	movq	5584(%rsp), %rdx        # 8-byte Reload
	movq	5744(%rsp), %rcx        # 8-byte Reload
	movq	5680(%rsp), %r8         # 8-byte Reload
	movl	5572(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	5616(%rsp), %rdi        # 8-byte Reload
	movq	5752(%rsp), %rsi        # 8-byte Reload
	movq	5632(%rsp), %rdx        # 8-byte Reload
	movq	5632(%rsp), %rcx        # 8-byte Reload
	movq	5728(%rsp), %r8         # 8-byte Reload
	movq	5768(%rsp), %r9         # 8-byte Reload
	movq	5696(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	5768(%rsp), %rdi        # 8-byte Reload
	movq	5752(%rsp), %rsi        # 8-byte Reload
	movq	5632(%rsp), %rdx        # 8-byte Reload
	movq	5768(%rsp), %rcx        # 8-byte Reload
	movq	5704(%rsp), %r8         # 8-byte Reload
	movq	5768(%rsp), %r9         # 8-byte Reload
	movq	5712(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	5604(%rsp), %eax        # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	5760(%rsp), %rdi        # 8-byte Reload
	movq	5752(%rsp), %rsi        # 8-byte Reload
	movq	5768(%rsp), %rcx        # 8-byte Reload
	movq	5744(%rsp), %r8         # 8-byte Reload
	movq	5632(%rsp), %r9         # 8-byte Reload
	movq	5712(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	5552(%rsp), %rdi        # 8-byte Reload
	movq	5560(%rsp), %rsi        # 8-byte Reload
	movq	5584(%rsp), %rdx        # 8-byte Reload
	movq	5624(%rsp), %rcx        # 8-byte Reload
	movq	5720(%rsp), %r8         # 8-byte Reload
	movl	5572(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	5616(%rsp), %rdi        # 8-byte Reload
	movq	5752(%rsp), %rsi        # 8-byte Reload
	movq	5736(%rsp), %rdx        # 8-byte Reload
	movq	5632(%rsp), %rcx        # 8-byte Reload
	movq	5728(%rsp), %r8         # 8-byte Reload
	movq	5632(%rsp), %r9         # 8-byte Reload
	movq	5640(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	5604(%rsp), %eax        # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	5768(%rsp), %rdi        # 8-byte Reload
	movq	5752(%rsp), %rsi        # 8-byte Reload
	movq	5768(%rsp), %rcx        # 8-byte Reload
	movq	5744(%rsp), %r8         # 8-byte Reload
	movq	5632(%rsp), %r9         # 8-byte Reload
	movq	5640(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	5604(%rsp), %eax        # 4-byte Reload
	cmpl	$29, %eax
	setg	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ebp
	movl	%ebp, %edx
	movq	5760(%rsp), %rdi        # 8-byte Reload
	movq	5768(%rsp), %rsi        # 8-byte Reload
	movq	5768(%rsp), %rcx        # 8-byte Reload
	movq	5624(%rsp), %r8         # 8-byte Reload
	movq	5632(%rsp), %r9         # 8-byte Reload
	movq	5640(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 5535(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	5552(%rsp), %rdi        # 8-byte Reload
	movq	5560(%rsp), %rsi        # 8-byte Reload
	movq	5584(%rsp), %rdx        # 8-byte Reload
	movq	5576(%rsp), %rcx        # 8-byte Reload
	movq	5616(%rsp), %r8         # 8-byte Reload
	movl	5572(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	5544(%rsp), %rdi        # 8-byte Reload
	movq	5632(%rsp), %rsi        # 8-byte Reload
	movq	5632(%rsp), %rdx        # 8-byte Reload
	movq	5768(%rsp), %rcx        # 8-byte Reload
	movq	5536(%rsp), %r8         # 8-byte Reload
	movq	5632(%rsp), %r9         # 8-byte Reload
	movq	5640(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	5616(%rsp), %rdi        # 8-byte Reload
	movq	5632(%rsp), %rsi        # 8-byte Reload
	movq	5632(%rsp), %rdx        # 8-byte Reload
	movq	5768(%rsp), %rcx        # 8-byte Reload
	movq	5608(%rsp), %r8         # 8-byte Reload
	movq	5632(%rsp), %r9         # 8-byte Reload
	movq	5640(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	5535(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	5768(%rsp), %rdi        # 8-byte Reload
	movq	5768(%rsp), %rsi        # 8-byte Reload
	movq	5768(%rsp), %rcx        # 8-byte Reload
	movq	5624(%rsp), %r8         # 8-byte Reload
	movq	5632(%rsp), %r9         # 8-byte Reload
	movq	5640(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	5535(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB10_13
	jmp	.LBB10_14
.LBB10_13:
	movabsq	$1, %rax
	movabsq	$0, %rcx
	leaq	.L.str374, %r8
	leaq	.L.str792, %rdx
	movabsq	$495, %rdi              # imm = 0x1EF
	leaq	.L.str61146, %rsi
	leaq	.L.str423, %r9
	leaq	.L.str425, %r10
	movabsq	$2, %r11
	movl	$0, %ebx
	movl	$1, %ebp
	movabsq	$19134, %r14            # imm = 0x4ABE
	movabsq	$32, %r15
	leaq	.L.str166, %r12
	leaq	.L.str398, %r13
	movq	%rax, 5520(%rsp)        # 8-byte Spill
	leaq	.L.str1499, %rax
	movq	%rax, 5512(%rsp)        # 8-byte Spill
	movabsq	$494, %rax              # imm = 0x1EE
	movq	%rax, 5504(%rsp)        # 8-byte Spill
	movabsq	$8, %rax
	.loc	2 494 0                 # eispack.c:494:0
.Ltmp434:
	movq	%rax, 5496(%rsp)        # 8-byte Spill
	movq	5504(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 5488(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 5480(%rsp)        # 8-byte Spill
	movq	%rdx, 5472(%rsp)        # 8-byte Spill
	movq	%r9, %rdx
	movq	%rcx, 5464(%rsp)        # 8-byte Spill
	movq	%r12, %rcx
	movq	5496(%rsp), %rax        # 8-byte Reload
	movq	%r8, 5456(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 5448(%rsp)         # 8-byte Spill
	movl	%ebx, %r9d
	movl	$1, (%rsp)
	movq	%r14, 5440(%rsp)        # 8-byte Spill
	movl	%ebp, 5436(%rsp)        # 4-byte Spill
	movq	%r15, 5424(%rsp)        # 8-byte Spill
	movq	%r13, 5416(%rsp)        # 8-byte Spill
	movq	%r12, 5408(%rsp)        # 8-byte Spill
	movl	%ebx, 5404(%rsp)        # 4-byte Spill
	movq	%r10, 5392(%rsp)        # 8-byte Spill
	movq	%r11, 5384(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	5384(%rsp), %rdi        # 8-byte Reload
	movq	5424(%rsp), %rsi        # 8-byte Reload
	movq	5520(%rsp), %rdx        # 8-byte Reload
	movq	5464(%rsp), %rcx        # 8-byte Reload
	movq	5512(%rsp), %r8         # 8-byte Reload
	movq	5464(%rsp), %r9         # 8-byte Reload
	movq	5472(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	8012(%rsp), %ebx        # 4-byte Reload
	movl	%ebx, %ebp
	movl	%ebp, %edx
	movq	5520(%rsp), %rdi        # 8-byte Reload
	movq	5424(%rsp), %rsi        # 8-byte Reload
	movq	5520(%rsp), %rcx        # 8-byte Reload
	movq	5416(%rsp), %r8         # 8-byte Reload
	movq	5464(%rsp), %r9         # 8-byte Reload
	movq	5472(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	8012(%rsp), %ebx        # 4-byte Reload
	addl	$1, %ebx
	movl	%ebx, %ebp
	movl	%ebp, %edx
	movq	5440(%rsp), %rdi        # 8-byte Reload
	movq	5424(%rsp), %rsi        # 8-byte Reload
	movq	5520(%rsp), %rcx        # 8-byte Reload
	movq	5408(%rsp), %r8         # 8-byte Reload
	movq	5464(%rsp), %r9         # 8-byte Reload
	movq	5472(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%ebx, 5380(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
.Ltmp435:
	#DEBUG_VALUE: tqlrat:ierr <- [RSP+5380]
	.loc	2 495 0                 # eispack.c:495:0
	movq	5488(%rsp), %rdi        # 8-byte Reload
	movq	5480(%rsp), %rsi        # 8-byte Reload
	movq	5448(%rsp), %rdx        # 8-byte Reload
	movq	5392(%rsp), %rcx        # 8-byte Reload
	movq	5384(%rsp), %r8         # 8-byte Reload
	movl	5404(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	5520(%rsp), %rdi        # 8-byte Reload
	movq	5464(%rsp), %rsi        # 8-byte Reload
	movq	5464(%rsp), %rdx        # 8-byte Reload
	movq	5520(%rsp), %rcx        # 8-byte Reload
	movq	5456(%rsp), %r8         # 8-byte Reload
	movq	5464(%rsp), %r9         # 8-byte Reload
	movq	5472(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	5380(%rsp), %ebx        # 4-byte Reload
	movl	%ebx, 9112(%rsp)        # 4-byte Spill
	jmp	.LBB10_28
.Ltmp436:
.LBB10_14:                              #   in Loop: Header=BB10_12 Depth=2
	movabsq	$2, %rax
	movabsq	$64, %rcx
	movabsq	$1, %rdx
	vmovsd	.LCPI10_2, %xmm0
	movabsq	$0, %rsi
	leaq	.L.str1499, %rdi
	leaq	.L.str792, %r8
	leaq	.L.str185, %r9
	movabsq	$3, %r10
	leaq	pythag, %r11
	leaq	.L.str388, %rbx
	movabsq	$506, %r14              # imm = 0x1FA
	leaq	.L.str61146, %r15
	leaq	.L.str424, %r12
	leaq	.L.str193, %r13
	movabsq	$49, %rbp
	movq	%rsi, 5368(%rsp)        # 8-byte Spill
	movl	$0, %esi
	movl	%esi, 5364(%rsp)        # 4-byte Spill
	movl	$1, %esi
	movq	%rax, 5352(%rsp)        # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 5344(%rsp)        # 8-byte Spill
	leaq	.L.str187, %rax
	movq	%rax, 5336(%rsp)        # 8-byte Spill
	leaq	.L.str188, %rax
	movq	%rax, 5328(%rsp)        # 8-byte Spill
	movabsq	$505, %rax              # imm = 0x1F9
	movq	%rax, 5320(%rsp)        # 8-byte Spill
	movabsq	$16, %rax
	vmovsd	.LCPI10_3, %xmm1
	movq	%rax, 5312(%rsp)        # 8-byte Spill
	leaq	.L.str173, %rax
	movq	%rax, 5304(%rsp)        # 8-byte Spill
	movabsq	$13, %rax
	movq	%rax, 5296(%rsp)        # 8-byte Spill
	leaq	.L.str186171, %rax
	movq	%rax, 5288(%rsp)        # 8-byte Spill
	leaq	.L.str179, %rax
	movq	%rax, 5280(%rsp)        # 8-byte Spill
	movabsq	$11, %rax
	movq	%rax, 5272(%rsp)        # 8-byte Spill
	leaq	.L.str143, %rax
	movq	%rax, 5264(%rsp)        # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, 5256(%rsp)        # 8-byte Spill
	leaq	.L.str34119, %rax
	movq	%rax, 5248(%rsp)        # 8-byte Spill
	movabsq	$504, %rax              # imm = 0x1F8
	movq	%rax, 5240(%rsp)        # 8-byte Spill
	leaq	.L.str172, %rax
	movq	%rax, 5232(%rsp)        # 8-byte Spill
	leaq	sqrt, %rax
	movq	%rax, 5224(%rsp)        # 8-byte Spill
	leaq	.L.str201, %rax
	movq	%rax, 5216(%rsp)        # 8-byte Spill
	movabsq	$503, %rax              # imm = 0x1F7
	movq	%rax, 5208(%rsp)        # 8-byte Spill
	leaq	.L.str36121, %rax
	movq	%rax, 5200(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 5192(%rsp)        # 8-byte Spill
	leaq	.L.str171, %rax
	movq	%rax, 5184(%rsp)        # 8-byte Spill
	leaq	.L.str421, %rax
	movq	%rax, 5176(%rsp)        # 8-byte Spill
	movabsq	$498, %rax              # imm = 0x1F2
	movq	%rax, 5168(%rsp)        # 8-byte Spill
	movabsq	$8, %rax
	.loc	2 498 0                 # eispack.c:498:0
	movq	%rax, 5160(%rsp)        # 8-byte Spill
	movq	5168(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 5152(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movl	%esi, 5148(%rsp)        # 4-byte Spill
	movq	%r15, %rsi
	movq	%rdx, 5136(%rsp)        # 8-byte Spill
	movq	%r12, %rdx
	movq	5184(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 5128(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	5160(%rsp), %rax        # 8-byte Reload
	movq	%r8, 5120(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movl	5364(%rsp), %eax        # 4-byte Reload
	movq	%r9, 5112(%rsp)         # 8-byte Spill
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movq	%r12, 5104(%rsp)        # 8-byte Spill
	movq	%r13, 5096(%rsp)        # 8-byte Spill
	vmovsd	%xmm0, 5088(%rsp)       # 8-byte Spill
	movq	%rbp, 5080(%rsp)        # 8-byte Spill
	vmovsd	%xmm1, 5072(%rsp)       # 8-byte Spill
	movq	%r15, 5064(%rsp)        # 8-byte Spill
	movq	%r14, 5056(%rsp)        # 8-byte Spill
	movq	%r10, 5048(%rsp)        # 8-byte Spill
	movq	%r11, 5040(%rsp)        # 8-byte Spill
	movq	%rbx, 5032(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	5352(%rsp), %rdi        # 8-byte Reload
	movq	5192(%rsp), %rsi        # 8-byte Reload
	movq	5136(%rsp), %rdx        # 8-byte Reload
	movq	5368(%rsp), %rcx        # 8-byte Reload
	movq	5152(%rsp), %r8         # 8-byte Reload
	movq	5368(%rsp), %r9         # 8-byte Reload
	movq	5120(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	5604(%rsp), %eax        # 4-byte Reload
	movl	%eax, %eax
	movl	%eax, %edx
	movq	5136(%rsp), %rdi        # 8-byte Reload
	movq	5192(%rsp), %rsi        # 8-byte Reload
	movq	5136(%rsp), %rcx        # 8-byte Reload
	movq	5176(%rsp), %r8         # 8-byte Reload
	movq	5368(%rsp), %r9         # 8-byte Reload
	movq	5120(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	5604(%rsp), %eax        # 4-byte Reload
	addl	$1, %eax
	movl	%eax, %esi
	movl	%esi, %edx
	movq	5344(%rsp), %rdi        # 8-byte Reload
	movq	5192(%rsp), %rsi        # 8-byte Reload
	movq	5136(%rsp), %rcx        # 8-byte Reload
	movq	5184(%rsp), %r8         # 8-byte Reload
	movq	5368(%rsp), %r9         # 8-byte Reload
	movq	5120(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, 5028(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
.Ltmp437:
	#DEBUG_VALUE: tqlrat:j <- [RSP+5028]
	.loc	2 503 0                 # eispack.c:503:0
	movq	5208(%rsp), %rdi        # 8-byte Reload
	movq	5064(%rsp), %rsi        # 8-byte Reload
	movq	5104(%rsp), %rdx        # 8-byte Reload
	movq	5232(%rsp), %rcx        # 8-byte Reload
	movq	5256(%rsp), %r8         # 8-byte Reload
	movl	5364(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	5136(%rsp), %rdi        # 8-byte Reload
	movq	5128(%rsp), %rsi        # 8-byte Reload
	movq	7464(%rsp), %rdx        # 8-byte Reload
	movq	5136(%rsp), %rcx        # 8-byte Reload
	movq	5200(%rsp), %r8         # 8-byte Reload
	movq	5368(%rsp), %r9         # 8-byte Reload
	movq	5120(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	7464(%rsp), %rcx        # 8-byte Reload
	vmovsd	(%rcx), %xmm0
	movq	5344(%rsp), %rdi        # 8-byte Reload
	movq	5128(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 5016(%rsp)       # 8-byte Spill
	movq	5136(%rsp), %rdx        # 8-byte Reload
	movq	5232(%rsp), %rcx        # 8-byte Reload
	movq	5368(%rsp), %r8         # 8-byte Reload
	movq	5120(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	5208(%rsp), %rdi        # 8-byte Reload
	movq	5064(%rsp), %rsi        # 8-byte Reload
	movq	5104(%rsp), %rdx        # 8-byte Reload
	movq	5304(%rsp), %rcx        # 8-byte Reload
	movq	5080(%rsp), %r8         # 8-byte Reload
	movl	5364(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	5352(%rsp), %rdi        # 8-byte Reload
	movq	5128(%rsp), %rsi        # 8-byte Reload
	movq	5224(%rsp), %rdx        # 8-byte Reload
	movq	5136(%rsp), %rcx        # 8-byte Reload
	movq	5216(%rsp), %r8         # 8-byte Reload
	movq	5368(%rsp), %r9         # 8-byte Reload
	movq	5120(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	5136(%rsp), %rdi        # 8-byte Reload
	movq	5128(%rsp), %rsi        # 8-byte Reload
	vmovsd	5016(%rsp), %xmm0       # 8-byte Reload
	movq	5136(%rsp), %rdx        # 8-byte Reload
	movq	5232(%rsp), %rcx        # 8-byte Reload
	movq	5368(%rsp), %r8         # 8-byte Reload
	movq	5120(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	5016(%rsp), %xmm0       # 8-byte Reload
	callq	sqrt
.Ltmp438:
	movq	5344(%rsp), %rdi        # 8-byte Reload
	movq	5128(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 5008(%rsp)       # 8-byte Spill
	movq	5136(%rsp), %rdx        # 8-byte Reload
	movq	5304(%rsp), %rcx        # 8-byte Reload
	movq	5368(%rsp), %r8         # 8-byte Reload
	movq	5120(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
.Ltmp439:
	#DEBUG_VALUE: tqlrat:s <- [RSP+5008]
	.loc	2 504 0                 # eispack.c:504:0
	movq	5240(%rsp), %rdi        # 8-byte Reload
	movq	5064(%rsp), %rsi        # 8-byte Reload
	movq	5104(%rsp), %rdx        # 8-byte Reload
	movq	5280(%rsp), %rcx        # 8-byte Reload
	movq	5256(%rsp), %r8         # 8-byte Reload
	movl	5364(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	5136(%rsp), %rdi        # 8-byte Reload
	movq	5128(%rsp), %rsi        # 8-byte Reload
	movq	7488(%rsp), %rdx        # 8-byte Reload
	movq	5136(%rsp), %rcx        # 8-byte Reload
	movq	5248(%rsp), %r8         # 8-byte Reload
	movq	5368(%rsp), %r9         # 8-byte Reload
	movq	5120(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	7488(%rsp), %rcx        # 8-byte Reload
	vmovsd	(%rcx), %xmm0
	movq	5344(%rsp), %rdi        # 8-byte Reload
	movq	5128(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 5000(%rsp)       # 8-byte Spill
	movq	5136(%rsp), %rdx        # 8-byte Reload
	movq	5280(%rsp), %rcx        # 8-byte Reload
	movq	5368(%rsp), %r8         # 8-byte Reload
	movq	5120(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
.Ltmp440:
	#DEBUG_VALUE: tqlrat:g <- [RSP+5000]
	.loc	2 505 0                 # eispack.c:505:0
	movq	5320(%rsp), %rdi        # 8-byte Reload
	movq	5064(%rsp), %rsi        # 8-byte Reload
	movq	5104(%rsp), %rdx        # 8-byte Reload
	movq	5288(%rsp), %rcx        # 8-byte Reload
	movq	5256(%rsp), %r8         # 8-byte Reload
	movl	5364(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	5136(%rsp), %rdi        # 8-byte Reload
	movq	5128(%rsp), %rsi        # 8-byte Reload
	movq	5832(%rsp), %rdx        # 8-byte Reload
	movq	5136(%rsp), %rcx        # 8-byte Reload
	movq	5264(%rsp), %r8         # 8-byte Reload
	movq	5368(%rsp), %r9         # 8-byte Reload
	movq	5120(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	5832(%rsp), %rcx        # 8-byte Reload
	vmovsd	(%rcx), %xmm0
	movq	5344(%rsp), %rdi        # 8-byte Reload
	movq	5128(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 4992(%rsp)       # 8-byte Spill
	movq	5136(%rsp), %rdx        # 8-byte Reload
	movq	5288(%rsp), %rcx        # 8-byte Reload
	movq	5368(%rsp), %r8         # 8-byte Reload
	movq	5120(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	5320(%rsp), %rdi        # 8-byte Reload
	movq	5064(%rsp), %rsi        # 8-byte Reload
	movq	5104(%rsp), %rdx        # 8-byte Reload
	movq	5336(%rsp), %rcx        # 8-byte Reload
	movq	5272(%rsp), %r8         # 8-byte Reload
	movl	5364(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	5352(%rsp), %rdi        # 8-byte Reload
	movq	5128(%rsp), %rsi        # 8-byte Reload
	vmovsd	5000(%rsp), %xmm0       # 8-byte Reload
	movq	5136(%rsp), %rdx        # 8-byte Reload
	movq	5280(%rsp), %rcx        # 8-byte Reload
	movq	5368(%rsp), %r8         # 8-byte Reload
	movq	5120(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	5136(%rsp), %rdi        # 8-byte Reload
	movq	5128(%rsp), %rsi        # 8-byte Reload
	vmovsd	4992(%rsp), %xmm0       # 8-byte Reload
	movq	5136(%rsp), %rdx        # 8-byte Reload
	movq	5288(%rsp), %rcx        # 8-byte Reload
	movq	5368(%rsp), %r8         # 8-byte Reload
	movq	5120(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	4992(%rsp), %xmm0       # 8-byte Reload
	vmovsd	5000(%rsp), %xmm1       # 8-byte Reload
	vsubsd	%xmm1, %xmm0, %xmm2
	movq	5344(%rsp), %rdi        # 8-byte Reload
	movq	5128(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	5136(%rsp), %rdx        # 8-byte Reload
	movq	5336(%rsp), %rcx        # 8-byte Reload
	movq	5368(%rsp), %r8         # 8-byte Reload
	movq	5120(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 4984(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	5320(%rsp), %rdi        # 8-byte Reload
	movq	5064(%rsp), %rsi        # 8-byte Reload
	movq	5104(%rsp), %rdx        # 8-byte Reload
	movq	5328(%rsp), %rcx        # 8-byte Reload
	movq	5296(%rsp), %r8         # 8-byte Reload
	movl	5364(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	5352(%rsp), %rdi        # 8-byte Reload
	movq	5128(%rsp), %rsi        # 8-byte Reload
	vmovsd	5072(%rsp), %xmm0       # 8-byte Reload
	movq	5368(%rsp), %rdx        # 8-byte Reload
	movq	5152(%rsp), %rcx        # 8-byte Reload
	movq	5368(%rsp), %r8         # 8-byte Reload
	movq	5120(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	5136(%rsp), %rdi        # 8-byte Reload
	movq	5128(%rsp), %rsi        # 8-byte Reload
	vmovsd	5008(%rsp), %xmm0       # 8-byte Reload
	movq	5136(%rsp), %rdx        # 8-byte Reload
	movq	5304(%rsp), %rcx        # 8-byte Reload
	movq	5368(%rsp), %r8         # 8-byte Reload
	movq	5120(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	5008(%rsp), %xmm0       # 8-byte Reload
	vmovsd	5072(%rsp), %xmm1       # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	5344(%rsp), %rdi        # 8-byte Reload
	movq	5128(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	5136(%rsp), %rdx        # 8-byte Reload
	movq	5328(%rsp), %rcx        # 8-byte Reload
	movq	5368(%rsp), %r8         # 8-byte Reload
	movq	5120(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 4976(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	5320(%rsp), %rdi        # 8-byte Reload
	movq	5064(%rsp), %rsi        # 8-byte Reload
	movq	5104(%rsp), %rdx        # 8-byte Reload
	movq	5112(%rsp), %rcx        # 8-byte Reload
	movq	5312(%rsp), %r8         # 8-byte Reload
	movl	5364(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	5352(%rsp), %rdi        # 8-byte Reload
	movq	5128(%rsp), %rsi        # 8-byte Reload
	vmovsd	4976(%rsp), %xmm0       # 8-byte Reload
	movq	5136(%rsp), %rdx        # 8-byte Reload
	movq	5328(%rsp), %rcx        # 8-byte Reload
	movq	5368(%rsp), %r8         # 8-byte Reload
	movq	5120(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	5136(%rsp), %rdi        # 8-byte Reload
	movq	5128(%rsp), %rsi        # 8-byte Reload
	vmovsd	4984(%rsp), %xmm0       # 8-byte Reload
	movq	5136(%rsp), %rdx        # 8-byte Reload
	movq	5336(%rsp), %rcx        # 8-byte Reload
	movq	5368(%rsp), %r8         # 8-byte Reload
	movq	5120(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	4984(%rsp), %xmm0       # 8-byte Reload
	vmovsd	4976(%rsp), %xmm1       # 8-byte Reload
	vdivsd	%xmm1, %xmm0, %xmm2
	movq	5344(%rsp), %rdi        # 8-byte Reload
	movq	5128(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	5136(%rsp), %rdx        # 8-byte Reload
	movq	5112(%rsp), %rcx        # 8-byte Reload
	movq	5368(%rsp), %r8         # 8-byte Reload
	movq	5120(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 4968(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
.Ltmp441:
	#DEBUG_VALUE: tqlrat:p <- [RSP+4968]
	.loc	2 506 0                 # eispack.c:506:0
	movq	5056(%rsp), %rdi        # 8-byte Reload
	movq	5064(%rsp), %rsi        # 8-byte Reload
	movq	5104(%rsp), %rdx        # 8-byte Reload
	movq	5096(%rsp), %rcx        # 8-byte Reload
	movq	5080(%rsp), %r8         # 8-byte Reload
	movl	5364(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	5048(%rsp), %rdi        # 8-byte Reload
	movq	5128(%rsp), %rsi        # 8-byte Reload
	movq	5040(%rsp), %rdx        # 8-byte Reload
	movq	5136(%rsp), %rcx        # 8-byte Reload
	movq	5032(%rsp), %r8         # 8-byte Reload
	movq	5368(%rsp), %r9         # 8-byte Reload
	movq	5120(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	5136(%rsp), %rdi        # 8-byte Reload
	movq	5128(%rsp), %rsi        # 8-byte Reload
	vmovsd	4968(%rsp), %xmm0       # 8-byte Reload
	movq	5136(%rsp), %rdx        # 8-byte Reload
	movq	5112(%rsp), %rcx        # 8-byte Reload
	movq	5368(%rsp), %r8         # 8-byte Reload
	movq	5120(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	5352(%rsp), %rdi        # 8-byte Reload
	movq	5128(%rsp), %rsi        # 8-byte Reload
	vmovsd	5088(%rsp), %xmm0       # 8-byte Reload
	movq	5368(%rsp), %rdx        # 8-byte Reload
	movq	5152(%rsp), %rcx        # 8-byte Reload
	movq	5368(%rsp), %r8         # 8-byte Reload
	movq	5120(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	.LCPI10_2(%rip), %xmm1
	vmovsd	4968(%rsp), %xmm0       # 8-byte Reload
	callq	pythag
.Ltmp442:
	movabsq	$1, %rcx
	movabsq	$64, %rdx
	leaq	.L.str185, %rsi
	movabsq	$0, %rdi
	leaq	.L.str792, %r8
	movabsq	$2, %r9
	leaq	r8_sign, %r10
	leaq	.L.str48133, %r11
	movabsq	$507, %rbx              # imm = 0x1FB
	leaq	.L.str61146, %r14
	leaq	.L.str424, %r15
	leaq	.L.str195, %r12
	movabsq	$49, %r13
	movl	$0, %eax
	movl	$1, %ebp
	movq	%rcx, 4960(%rsp)        # 8-byte Spill
	movabsq	$19134, %rcx            # imm = 0x4ABE
	movq	%rcx, 4952(%rsp)        # 8-byte Spill
	leaq	.L.str194, %rcx
	movq	%rcx, 4944(%rsp)        # 8-byte Spill
	leaq	.L.str193, %rcx
	movq	%rcx, 4936(%rsp)        # 8-byte Spill
	leaq	fabs, %rcx
	movq	%rcx, 4928(%rsp)        # 8-byte Spill
	leaq	.L.str691, %rcx
	movq	%rcx, 4920(%rsp)        # 8-byte Spill
	movq	4952(%rsp), %rcx        # 8-byte Reload
	movq	%rdi, 4912(%rsp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	%rsi, 4904(%rsp)        # 8-byte Spill
	movq	%rdx, %rsi
	vmovsd	%xmm0, 4896(%rsp)       # 8-byte Spill
	movq	4960(%rsp), %rcx        # 8-byte Reload
	movq	%rdx, 4888(%rsp)        # 8-byte Spill
	movq	%rcx, %rdx
	movq	4936(%rsp), %rcx        # 8-byte Reload
	movq	%r8, 4880(%rsp)         # 8-byte Spill
	movq	4912(%rsp), %r8         # 8-byte Reload
	movq	%r9, 4872(%rsp)         # 8-byte Spill
	movq	4880(%rsp), %r9         # 8-byte Reload
	movq	%r13, 4864(%rsp)        # 8-byte Spill
	movq	%r15, 4856(%rsp)        # 8-byte Spill
	movq	%r12, 4848(%rsp)        # 8-byte Spill
	movl	%eax, 4844(%rsp)        # 4-byte Spill
	movl	%ebp, 4840(%rsp)        # 4-byte Spill
	movq	%r14, 4832(%rsp)        # 8-byte Spill
	movq	%rbx, 4824(%rsp)        # 8-byte Spill
	movq	%r10, 4816(%rsp)        # 8-byte Spill
	movq	%r11, 4808(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
.Ltmp443:
	#DEBUG_VALUE: tqlrat:r <- [RSP+4896]
	.loc	2 507 0                 # eispack.c:507:0
	movq	4824(%rsp), %rdi        # 8-byte Reload
	movq	4832(%rsp), %rsi        # 8-byte Reload
	movq	4856(%rsp), %rdx        # 8-byte Reload
	movq	4944(%rsp), %rcx        # 8-byte Reload
	movq	4864(%rsp), %r8         # 8-byte Reload
	movl	4844(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	4872(%rsp), %rdi        # 8-byte Reload
	movq	4888(%rsp), %rsi        # 8-byte Reload
	movq	4928(%rsp), %rdx        # 8-byte Reload
	movq	4960(%rsp), %rcx        # 8-byte Reload
	movq	4920(%rsp), %r8         # 8-byte Reload
	movq	4912(%rsp), %r9         # 8-byte Reload
	movq	4880(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	4960(%rsp), %rdi        # 8-byte Reload
	movq	4888(%rsp), %rsi        # 8-byte Reload
	vmovsd	4896(%rsp), %xmm0       # 8-byte Reload
	movq	4960(%rsp), %rdx        # 8-byte Reload
	movq	4936(%rsp), %rcx        # 8-byte Reload
	movq	4912(%rsp), %r8         # 8-byte Reload
	movq	4880(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	.LCPI10_0(%rip), %xmm0
	vmovsd	4896(%rsp), %xmm1       # 8-byte Reload
	vandpd	%xmm0, %xmm1, %xmm0
	movq	4952(%rsp), %rdi        # 8-byte Reload
	movq	4888(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 4800(%rsp)       # 8-byte Spill
	movq	4960(%rsp), %rdx        # 8-byte Reload
	movq	4944(%rsp), %rcx        # 8-byte Reload
	movq	4912(%rsp), %r8         # 8-byte Reload
	movq	4880(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	4824(%rsp), %rdi        # 8-byte Reload
	movq	4832(%rsp), %rsi        # 8-byte Reload
	movq	4856(%rsp), %rdx        # 8-byte Reload
	movq	4848(%rsp), %rcx        # 8-byte Reload
	movq	4864(%rsp), %r8         # 8-byte Reload
	movl	4844(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	4872(%rsp), %rdi        # 8-byte Reload
	movq	4888(%rsp), %rsi        # 8-byte Reload
	movq	4816(%rsp), %rdx        # 8-byte Reload
	movq	4960(%rsp), %rcx        # 8-byte Reload
	movq	4808(%rsp), %r8         # 8-byte Reload
	movq	4912(%rsp), %r9         # 8-byte Reload
	movq	4880(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	4960(%rsp), %rdi        # 8-byte Reload
	movq	4888(%rsp), %rsi        # 8-byte Reload
	vmovsd	4968(%rsp), %xmm0       # 8-byte Reload
	movq	4960(%rsp), %rdx        # 8-byte Reload
	movq	4904(%rsp), %rcx        # 8-byte Reload
	movq	4912(%rsp), %r8         # 8-byte Reload
	movq	4880(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	4968(%rsp), %xmm0       # 8-byte Reload
	callq	r8_sign
.Ltmp444:
	movabsq	$1, %rcx
	leaq	.L.str145, %r8
	movabsq	$0, %rdx
	leaq	.L.str792, %rsi
	movabsq	$2, %rdi
	leaq	.L.str429, %r9
	movabsq	$3, %r10
	leaq	.L.str428, %r11
	movabsq	$509, %rbx              # imm = 0x1FD
	leaq	.L.str61146, %r14
	leaq	.L.str424, %r15
	leaq	.L.str427, %r12
	movl	$0, %eax
	movl	$1, %ebp
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rcx, 4792(%rsp)        # 8-byte Spill
	movabsq	$64, %rcx
	movq	%rcx, 4784(%rsp)        # 8-byte Spill
	leaq	.L.str200, %rcx
	movq	%rcx, 4776(%rsp)        # 8-byte Spill
	leaq	.L.str179, %rcx
	movq	%rcx, 4768(%rsp)        # 8-byte Spill
	leaq	.L.str199, %rcx
	movq	%rcx, 4760(%rsp)        # 8-byte Spill
	movabsq	$508, %rcx              # imm = 0x1FC
	movq	%rcx, 4752(%rsp)        # 8-byte Spill
	movabsq	$11, %rcx
	movq	%rcx, 4744(%rsp)        # 8-byte Spill
	leaq	.L.str34119, %rcx
	movq	%rcx, 4736(%rsp)        # 8-byte Spill
	movabsq	$507, %rcx              # imm = 0x1FB
	movq	%rcx, 4728(%rsp)        # 8-byte Spill
	leaq	.L.str426, %rcx
	movq	%rcx, 4720(%rsp)        # 8-byte Spill
	movabsq	$28, %rcx
	movq	%rcx, 4712(%rsp)        # 8-byte Spill
	leaq	.L.str173, %rcx
	movq	%rcx, 4704(%rsp)        # 8-byte Spill
	leaq	.L.str198, %rcx
	movq	%rcx, 4696(%rsp)        # 8-byte Spill
	movabsq	$16, %rcx
	movq	%rcx, 4688(%rsp)        # 8-byte Spill
	leaq	.L.str185, %rcx
	movq	%rcx, 4680(%rsp)        # 8-byte Spill
	leaq	.L.str197, %rcx
	movq	%rcx, 4672(%rsp)        # 8-byte Spill
	movabsq	$9, %rcx
	movq	%rcx, 4664(%rsp)        # 8-byte Spill
	leaq	.L.str194, %rcx
	movq	%rcx, 4656(%rsp)        # 8-byte Spill
	leaq	.L.str195, %rcx
	movq	%rcx, 4648(%rsp)        # 8-byte Spill
	movabsq	$13, %rcx
	movq	%rdi, 4640(%rsp)        # 8-byte Spill
	movq	%r13, %rdi
	movq	%rcx, 4632(%rsp)        # 8-byte Spill
	movq	4784(%rsp), %rcx        # 8-byte Reload
	movq	%rsi, 4624(%rsp)        # 8-byte Spill
	movq	%rcx, %rsi
	vmovsd	%xmm0, 4616(%rsp)       # 8-byte Spill
	movq	4792(%rsp), %rcx        # 8-byte Reload
	movq	%rdx, 4608(%rsp)        # 8-byte Spill
	movq	%rcx, %rdx
	movq	4648(%rsp), %rcx        # 8-byte Reload
	movq	%r8, 4600(%rsp)         # 8-byte Spill
	movq	4608(%rsp), %r8         # 8-byte Reload
	movq	%r9, 4592(%rsp)         # 8-byte Spill
	movq	4624(%rsp), %r9         # 8-byte Reload
	movl	%eax, 4588(%rsp)        # 4-byte Spill
	movq	%r15, 4576(%rsp)        # 8-byte Spill
	movq	%r14, 4568(%rsp)        # 8-byte Spill
	movq	%r12, 4560(%rsp)        # 8-byte Spill
	movl	%ebp, 4556(%rsp)        # 4-byte Spill
	movq	%r13, 4544(%rsp)        # 8-byte Spill
	movq	%rbx, 4536(%rsp)        # 8-byte Spill
	movq	%r10, 4528(%rsp)        # 8-byte Spill
	movq	%r11, 4520(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	4728(%rsp), %rdi        # 8-byte Reload
	movq	4568(%rsp), %rsi        # 8-byte Reload
	movq	4576(%rsp), %rdx        # 8-byte Reload
	movq	4672(%rsp), %rcx        # 8-byte Reload
	movq	4632(%rsp), %r8         # 8-byte Reload
	movl	4588(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	4640(%rsp), %rdi        # 8-byte Reload
	movq	4784(%rsp), %rsi        # 8-byte Reload
	vmovsd	4616(%rsp), %xmm0       # 8-byte Reload
	movq	4792(%rsp), %rdx        # 8-byte Reload
	movq	4648(%rsp), %rcx        # 8-byte Reload
	movq	4608(%rsp), %r8         # 8-byte Reload
	movq	4624(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	4792(%rsp), %rdi        # 8-byte Reload
	movq	4784(%rsp), %rsi        # 8-byte Reload
	vmovsd	4800(%rsp), %xmm0       # 8-byte Reload
	movq	4792(%rsp), %rdx        # 8-byte Reload
	movq	4656(%rsp), %rcx        # 8-byte Reload
	movq	4608(%rsp), %r8         # 8-byte Reload
	movq	4624(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	4800(%rsp), %xmm0       # 8-byte Reload
	vmovsd	4616(%rsp), %xmm1       # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	4544(%rsp), %rdi        # 8-byte Reload
	movq	4784(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	4792(%rsp), %rdx        # 8-byte Reload
	movq	4672(%rsp), %rcx        # 8-byte Reload
	movq	4608(%rsp), %r8         # 8-byte Reload
	movq	4624(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 4512(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	4728(%rsp), %rdi        # 8-byte Reload
	movq	4568(%rsp), %rsi        # 8-byte Reload
	movq	4576(%rsp), %rdx        # 8-byte Reload
	movq	4696(%rsp), %rcx        # 8-byte Reload
	movq	4664(%rsp), %r8         # 8-byte Reload
	movl	4588(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	4640(%rsp), %rdi        # 8-byte Reload
	movq	4784(%rsp), %rsi        # 8-byte Reload
	vmovsd	4512(%rsp), %xmm0       # 8-byte Reload
	movq	4792(%rsp), %rdx        # 8-byte Reload
	movq	4672(%rsp), %rcx        # 8-byte Reload
	movq	4608(%rsp), %r8         # 8-byte Reload
	movq	4624(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	4792(%rsp), %rdi        # 8-byte Reload
	movq	4784(%rsp), %rsi        # 8-byte Reload
	vmovsd	4968(%rsp), %xmm0       # 8-byte Reload
	movq	4792(%rsp), %rdx        # 8-byte Reload
	movq	4680(%rsp), %rcx        # 8-byte Reload
	movq	4608(%rsp), %r8         # 8-byte Reload
	movq	4624(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	4968(%rsp), %xmm0       # 8-byte Reload
	vmovsd	4512(%rsp), %xmm1       # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
	movq	4544(%rsp), %rdi        # 8-byte Reload
	movq	4784(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	4792(%rsp), %rdx        # 8-byte Reload
	movq	4696(%rsp), %rcx        # 8-byte Reload
	movq	4608(%rsp), %r8         # 8-byte Reload
	movq	4624(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 4504(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	4728(%rsp), %rdi        # 8-byte Reload
	movq	4568(%rsp), %rsi        # 8-byte Reload
	movq	4576(%rsp), %rdx        # 8-byte Reload
	movq	4760(%rsp), %rcx        # 8-byte Reload
	movq	4688(%rsp), %r8         # 8-byte Reload
	movl	4588(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	4640(%rsp), %rdi        # 8-byte Reload
	movq	4784(%rsp), %rsi        # 8-byte Reload
	vmovsd	4504(%rsp), %xmm0       # 8-byte Reload
	movq	4792(%rsp), %rdx        # 8-byte Reload
	movq	4696(%rsp), %rcx        # 8-byte Reload
	movq	4608(%rsp), %r8         # 8-byte Reload
	movq	4624(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	4792(%rsp), %rdi        # 8-byte Reload
	movq	4784(%rsp), %rsi        # 8-byte Reload
	vmovsd	5008(%rsp), %xmm0       # 8-byte Reload
	movq	4792(%rsp), %rdx        # 8-byte Reload
	movq	4704(%rsp), %rcx        # 8-byte Reload
	movq	4608(%rsp), %r8         # 8-byte Reload
	movq	4624(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	5008(%rsp), %xmm0       # 8-byte Reload
	vmovsd	4504(%rsp), %xmm1       # 8-byte Reload
	vdivsd	%xmm1, %xmm0, %xmm2
	movq	4544(%rsp), %rdi        # 8-byte Reload
	movq	4784(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	4792(%rsp), %rdx        # 8-byte Reload
	movq	4760(%rsp), %rcx        # 8-byte Reload
	movq	4608(%rsp), %r8         # 8-byte Reload
	movq	4624(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 4496(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	4728(%rsp), %rdi        # 8-byte Reload
	movq	4568(%rsp), %rsi        # 8-byte Reload
	movq	4576(%rsp), %rdx        # 8-byte Reload
	movq	4720(%rsp), %rcx        # 8-byte Reload
	movq	4712(%rsp), %r8         # 8-byte Reload
	movl	4588(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	4640(%rsp), %rdi        # 8-byte Reload
	movq	4784(%rsp), %rsi        # 8-byte Reload
	movq	7488(%rsp), %rdx        # 8-byte Reload
	movq	4792(%rsp), %rcx        # 8-byte Reload
	movq	4736(%rsp), %r8         # 8-byte Reload
	movq	4608(%rsp), %r9         # 8-byte Reload
	movq	4624(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	4792(%rsp), %rdi        # 8-byte Reload
	movq	4784(%rsp), %rsi        # 8-byte Reload
	vmovsd	4496(%rsp), %xmm0       # 8-byte Reload
	movq	4792(%rsp), %rdx        # 8-byte Reload
	movq	4760(%rsp), %rcx        # 8-byte Reload
	movq	4608(%rsp), %r8         # 8-byte Reload
	movq	4624(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	7488(%rsp), %rcx        # 8-byte Reload
	vmovsd	4496(%rsp), %xmm0       # 8-byte Reload
	vmovsd	%xmm0, (%rcx)
	.loc	2 508 0                 # eispack.c:508:0
	movq	4752(%rsp), %rdi        # 8-byte Reload
	movq	4568(%rsp), %rsi        # 8-byte Reload
	movq	4576(%rsp), %rdx        # 8-byte Reload
	movq	4776(%rsp), %rcx        # 8-byte Reload
	movq	4744(%rsp), %r8         # 8-byte Reload
	movl	4588(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	4640(%rsp), %rdi        # 8-byte Reload
	movq	4784(%rsp), %rsi        # 8-byte Reload
	vmovsd	4496(%rsp), %xmm0       # 8-byte Reload
	movq	4792(%rsp), %rdx        # 8-byte Reload
	movq	4760(%rsp), %rcx        # 8-byte Reload
	movq	4608(%rsp), %r8         # 8-byte Reload
	movq	4624(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	4792(%rsp), %rdi        # 8-byte Reload
	movq	4784(%rsp), %rsi        # 8-byte Reload
	vmovsd	5000(%rsp), %xmm0       # 8-byte Reload
	movq	4792(%rsp), %rdx        # 8-byte Reload
	movq	4768(%rsp), %rcx        # 8-byte Reload
	movq	4608(%rsp), %r8         # 8-byte Reload
	movq	4624(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	5000(%rsp), %xmm0       # 8-byte Reload
	vmovsd	4496(%rsp), %xmm1       # 8-byte Reload
	vsubsd	%xmm1, %xmm0, %xmm2
	movq	4544(%rsp), %rdi        # 8-byte Reload
	movq	4784(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	4792(%rsp), %rdx        # 8-byte Reload
	movq	4776(%rsp), %rcx        # 8-byte Reload
	movq	4608(%rsp), %r8         # 8-byte Reload
	movq	4624(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 4488(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
.Ltmp445:
	#DEBUG_VALUE: tqlrat:h <- [RSP+4488]
	.loc	2 509 0                 # eispack.c:509:0
	movq	4536(%rsp), %rdi        # 8-byte Reload
	movq	4568(%rsp), %rsi        # 8-byte Reload
	movq	4576(%rsp), %rdx        # 8-byte Reload
	movq	4560(%rsp), %rcx        # 8-byte Reload
	movq	4640(%rsp), %r8         # 8-byte Reload
	movl	4588(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	4528(%rsp), %rdi        # 8-byte Reload
	movq	4608(%rsp), %rsi        # 8-byte Reload
	movq	4608(%rsp), %rdx        # 8-byte Reload
	movq	4792(%rsp), %rcx        # 8-byte Reload
	movq	4520(%rsp), %r8         # 8-byte Reload
	movq	4608(%rsp), %r9         # 8-byte Reload
	movq	4624(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	4640(%rsp), %rdi        # 8-byte Reload
	movq	4608(%rsp), %rsi        # 8-byte Reload
	movq	4608(%rsp), %rdx        # 8-byte Reload
	movq	4792(%rsp), %rcx        # 8-byte Reload
	movq	4592(%rsp), %r8         # 8-byte Reload
	movq	4608(%rsp), %r9         # 8-byte Reload
	movq	4624(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	5827(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	4792(%rsp), %rdi        # 8-byte Reload
	movq	4792(%rsp), %rsi        # 8-byte Reload
	movq	4792(%rsp), %rcx        # 8-byte Reload
	movq	4600(%rsp), %r8         # 8-byte Reload
	movq	4608(%rsp), %r9         # 8-byte Reload
	movq	4624(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	5827(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	movq	8016(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 4480(%rsp)        # 8-byte Spill
	jne	.LBB10_15
	jmp	.LBB10_16
.Ltmp446:
.LBB10_15:                              # %.lr.ph5
                                        #   Parent Loop BB10_5 Depth=1
                                        #     Parent Loop BB10_12 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movq	4480(%rsp), %rax        # 8-byte Reload
	movabsq	$1, %rcx
	leaq	.L.str126, %rdx
	movabsq	$0, %rsi
	leaq	.L.str792, %rdi
	movabsq	$2, %r8
	leaq	.L.str428, %r9
	movabsq	$3, %r10
	leaq	.L.str429, %r11
	movabsq	$509, %rbx              # imm = 0x1FD
	leaq	.L.str61146, %r14
	leaq	.L.str433, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 4472(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 4464(%rsp)        # 8-byte Spill
	leaq	.L.str125, %rax
	movq	%rax, 4456(%rsp)        # 8-byte Spill
	leaq	.L.str51136, %rax
	movq	%rax, 4448(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 4440(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 4432(%rsp)        # 8-byte Spill
	leaq	.L.str431, %rax
	movq	%rax, 4424(%rsp)        # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, 4416(%rsp)        # 8-byte Spill
	leaq	.L.str430, %rax
	movq	%rax, 4408(%rsp)        # 8-byte Spill
	leaq	.L.str1499, %rax
	movq	%rax, 4400(%rsp)        # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, 4392(%rsp)        # 8-byte Spill
	leaq	.L.str204, %rax
	movq	%rax, 4384(%rsp)        # 8-byte Spill
	leaq	.L.str202, %rax
	movq	%rax, 4376(%rsp)        # 8-byte Spill
	movabsq	$511, %rax              # imm = 0x1FF
	movq	%rax, 4368(%rsp)        # 8-byte Spill
	leaq	.L.str432, %rax
	movq	%rax, 4360(%rsp)        # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, 4352(%rsp)        # 8-byte Spill
	leaq	.L.str203, %rax
	movq	%rax, 4344(%rsp)        # 8-byte Spill
	leaq	.L.str200, %rax
	movq	%rax, 4336(%rsp)        # 8-byte Spill
	movabsq	$11, %rax
	movq	%rax, 4328(%rsp)        # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, 4320(%rsp)        # 8-byte Spill
	leaq	.L.str85170, %rax
	movq	%rax, 4312(%rsp)        # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 4304(%rsp)        # 8-byte Spill
	leaq	.L.str392, %rax
	movq	%rax, 4296(%rsp)        # 8-byte Spill
	leaq	.L.str424, %rax
	movq	%rax, 4288(%rsp)        # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 4280(%rsp)        # 8-byte Spill
	movabsq	$48, %rax
	.loc	2 511 0                 # eispack.c:511:0
.Ltmp447:
	movq	%rax, 4272(%rsp)        # 8-byte Spill
	movq	4280(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 4264(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 4256(%rsp)        # 8-byte Spill
	movq	%r14, %rsi
	movq	%rdx, 4248(%rsp)        # 8-byte Spill
	movq	%r9, %rdx
	movq	4408(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 4240(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	4272(%rsp), %rax        # 8-byte Reload
	movq	%r8, 4232(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 4224(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r15, 4216(%rsp)        # 8-byte Spill
	movl	%ebp, 4212(%rsp)        # 4-byte Spill
	movl	%r12d, 4208(%rsp)       # 4-byte Spill
	movq	%r13, 4200(%rsp)        # 8-byte Spill
	movq	%r14, 4192(%rsp)        # 8-byte Spill
	movq	%rbx, 4184(%rsp)        # 8-byte Spill
	movq	%r10, 4176(%rsp)        # 8-byte Spill
	movq	%r11, 4168(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	4232(%rsp), %rdi        # 8-byte Reload
	movq	4432(%rsp), %rsi        # 8-byte Reload
	movq	4256(%rsp), %rdx        # 8-byte Reload
	movq	4240(%rsp), %rcx        # 8-byte Reload
	movq	4296(%rsp), %r8         # 8-byte Reload
	movq	4240(%rsp), %r9         # 8-byte Reload
	movq	4288(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	4240(%rsp), %rdi        # 8-byte Reload
	movq	4432(%rsp), %rsi        # 8-byte Reload
	movq	4256(%rsp), %rdx        # 8-byte Reload
	movq	4240(%rsp), %rcx        # 8-byte Reload
	movq	4424(%rsp), %r8         # 8-byte Reload
	movq	4240(%rsp), %r9         # 8-byte Reload
	movq	4224(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	4200(%rsp), %rdi        # 8-byte Reload
	movq	4432(%rsp), %rsi        # 8-byte Reload
	movq	4472(%rsp), %rdx        # 8-byte Reload
	movq	4240(%rsp), %rcx        # 8-byte Reload
	movq	4408(%rsp), %r8         # 8-byte Reload
	movq	4256(%rsp), %r9         # 8-byte Reload
	movq	4224(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	4368(%rsp), %rdi        # 8-byte Reload
	movq	4192(%rsp), %rsi        # 8-byte Reload
	movq	4224(%rsp), %rdx        # 8-byte Reload
	movq	4376(%rsp), %rcx        # 8-byte Reload
	movq	4304(%rsp), %r8         # 8-byte Reload
	movl	4212(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	4232(%rsp), %rdi        # 8-byte Reload
	movq	4432(%rsp), %rsi        # 8-byte Reload
	movq	4472(%rsp), %rdx        # 8-byte Reload
	movq	4240(%rsp), %rcx        # 8-byte Reload
	movq	4408(%rsp), %r8         # 8-byte Reload
	movq	4256(%rsp), %r9         # 8-byte Reload
	movq	4264(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	4240(%rsp), %rdi        # 8-byte Reload
	movq	4432(%rsp), %rsi        # 8-byte Reload
	movq	9216(%rsp), %rdx        # 8-byte Reload
	movq	4240(%rsp), %rcx        # 8-byte Reload
	movq	4312(%rsp), %r8         # 8-byte Reload
	movq	4256(%rsp), %r9         # 8-byte Reload
	movq	4264(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	4472(%rsp), %rax        # 8-byte Reload
	shlq	$3, %rax
	movq	9216(%rsp), %rcx        # 8-byte Reload
	addq	%rax, %rcx
	movq	4200(%rsp), %rdi        # 8-byte Reload
	movq	4432(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	4240(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 4160(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	4376(%rsp), %r8         # 8-byte Reload
	movq	4256(%rsp), %r9         # 8-byte Reload
	movq	4264(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	4368(%rsp), %rdi        # 8-byte Reload
	movq	4192(%rsp), %rsi        # 8-byte Reload
	movq	4224(%rsp), %rdx        # 8-byte Reload
	movq	4344(%rsp), %rcx        # 8-byte Reload
	movq	4320(%rsp), %r8         # 8-byte Reload
	movl	4212(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	4240(%rsp), %rdi        # 8-byte Reload
	movq	4432(%rsp), %rsi        # 8-byte Reload
	movq	4160(%rsp), %rdx        # 8-byte Reload
	movq	4240(%rsp), %rcx        # 8-byte Reload
	movq	4376(%rsp), %r8         # 8-byte Reload
	movq	4256(%rsp), %r9         # 8-byte Reload
	movq	4264(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	9216(%rsp), %rax        # 8-byte Reload
	movq	4472(%rsp), %rcx        # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
	movq	4200(%rsp), %rdi        # 8-byte Reload
	movq	4432(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 4152(%rsp)       # 8-byte Spill
	movq	4240(%rsp), %rdx        # 8-byte Reload
	movq	4344(%rsp), %rcx        # 8-byte Reload
	movq	4256(%rsp), %r8         # 8-byte Reload
	movq	4264(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	4368(%rsp), %rdi        # 8-byte Reload
	movq	4192(%rsp), %rsi        # 8-byte Reload
	movq	4224(%rsp), %rdx        # 8-byte Reload
	movq	4384(%rsp), %rcx        # 8-byte Reload
	movq	4328(%rsp), %r8         # 8-byte Reload
	movl	4212(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	4232(%rsp), %rdi        # 8-byte Reload
	movq	4432(%rsp), %rsi        # 8-byte Reload
	vmovsd	4488(%rsp), %xmm0       # 8-byte Reload
	movq	4240(%rsp), %rdx        # 8-byte Reload
	movq	4336(%rsp), %rcx        # 8-byte Reload
	movq	4256(%rsp), %r8         # 8-byte Reload
	movq	4264(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	4240(%rsp), %rdi        # 8-byte Reload
	movq	4432(%rsp), %rsi        # 8-byte Reload
	vmovsd	4152(%rsp), %xmm0       # 8-byte Reload
	movq	4240(%rsp), %rdx        # 8-byte Reload
	movq	4344(%rsp), %rcx        # 8-byte Reload
	movq	4256(%rsp), %r8         # 8-byte Reload
	movq	4264(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	4152(%rsp), %xmm0       # 8-byte Reload
	vmovsd	4488(%rsp), %xmm1       # 8-byte Reload
	vsubsd	%xmm1, %xmm0, %xmm2
	movq	4200(%rsp), %rdi        # 8-byte Reload
	movq	4432(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	4240(%rsp), %rdx        # 8-byte Reload
	movq	4384(%rsp), %rcx        # 8-byte Reload
	movq	4256(%rsp), %r8         # 8-byte Reload
	movq	4264(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 4144(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	4368(%rsp), %rdi        # 8-byte Reload
	movq	4192(%rsp), %rsi        # 8-byte Reload
	movq	4224(%rsp), %rdx        # 8-byte Reload
	movq	4360(%rsp), %rcx        # 8-byte Reload
	movq	4352(%rsp), %r8         # 8-byte Reload
	movl	4212(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	4232(%rsp), %rdi        # 8-byte Reload
	movq	4432(%rsp), %rsi        # 8-byte Reload
	movq	4160(%rsp), %rdx        # 8-byte Reload
	movq	4240(%rsp), %rcx        # 8-byte Reload
	movq	4376(%rsp), %r8         # 8-byte Reload
	movq	4256(%rsp), %r9         # 8-byte Reload
	movq	4264(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	4240(%rsp), %rdi        # 8-byte Reload
	movq	4432(%rsp), %rsi        # 8-byte Reload
	vmovsd	4144(%rsp), %xmm0       # 8-byte Reload
	movq	4240(%rsp), %rdx        # 8-byte Reload
	movq	4384(%rsp), %rcx        # 8-byte Reload
	movq	4256(%rsp), %r8         # 8-byte Reload
	movq	4264(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	9216(%rsp), %rax        # 8-byte Reload
	movq	4472(%rsp), %rcx        # 8-byte Reload
	vmovsd	4144(%rsp), %xmm0       # 8-byte Reload
	vmovsd	%xmm0, (%rax,%rcx,8)
.Ltmp448:
	.loc	2 509 0                 # eispack.c:509:0
	movq	4184(%rsp), %rdi        # 8-byte Reload
	movq	4192(%rsp), %rsi        # 8-byte Reload
	movq	4224(%rsp), %rdx        # 8-byte Reload
	movq	4424(%rsp), %rcx        # 8-byte Reload
	movq	4392(%rsp), %r8         # 8-byte Reload
	movl	4212(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	4232(%rsp), %rdi        # 8-byte Reload
	movq	4432(%rsp), %rsi        # 8-byte Reload
	movq	4240(%rsp), %rdx        # 8-byte Reload
	movq	4256(%rsp), %rcx        # 8-byte Reload
	movq	4400(%rsp), %r8         # 8-byte Reload
	movq	4256(%rsp), %r9         # 8-byte Reload
	movq	4264(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	4240(%rsp), %rdi        # 8-byte Reload
	movq	4432(%rsp), %rsi        # 8-byte Reload
	movq	4472(%rsp), %rdx        # 8-byte Reload
	movq	4240(%rsp), %rcx        # 8-byte Reload
	movq	4408(%rsp), %r8         # 8-byte Reload
	movq	4256(%rsp), %r9         # 8-byte Reload
	movq	4264(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	4472(%rsp), %rax        # 8-byte Reload
	addq	$1, %rax
	movq	4200(%rsp), %rdi        # 8-byte Reload
	movq	4432(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	4240(%rsp), %rcx        # 8-byte Reload
	movq	4424(%rsp), %r8         # 8-byte Reload
	movq	4256(%rsp), %r9         # 8-byte Reload
	movq	4264(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 4136(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	4184(%rsp), %rdi        # 8-byte Reload
	movq	4192(%rsp), %rsi        # 8-byte Reload
	movq	4224(%rsp), %rdx        # 8-byte Reload
	movq	4456(%rsp), %rcx        # 8-byte Reload
	movq	4416(%rsp), %r8         # 8-byte Reload
	movl	4212(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	4240(%rsp), %rdi        # 8-byte Reload
	movq	4432(%rsp), %rsi        # 8-byte Reload
	movq	4136(%rsp), %rdx        # 8-byte Reload
	movq	4240(%rsp), %rcx        # 8-byte Reload
	movq	4424(%rsp), %r8         # 8-byte Reload
	movq	4256(%rsp), %r9         # 8-byte Reload
	movq	4264(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	4136(%rsp), %rax        # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	4200(%rsp), %rdi        # 8-byte Reload
	movq	4464(%rsp), %rsi        # 8-byte Reload
	movq	4240(%rsp), %rcx        # 8-byte Reload
	movq	4456(%rsp), %r8         # 8-byte Reload
	movq	4256(%rsp), %r9         # 8-byte Reload
	movq	4264(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 4132(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	4184(%rsp), %rdi        # 8-byte Reload
	movq	4192(%rsp), %rsi        # 8-byte Reload
	movq	4224(%rsp), %rdx        # 8-byte Reload
	movq	4248(%rsp), %rcx        # 8-byte Reload
	movq	4440(%rsp), %r8         # 8-byte Reload
	movl	4212(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	9228(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	4232(%rsp), %rdi        # 8-byte Reload
	movq	4464(%rsp), %rsi        # 8-byte Reload
	movq	4240(%rsp), %rcx        # 8-byte Reload
	movq	4448(%rsp), %r8         # 8-byte Reload
	movq	4256(%rsp), %r9         # 8-byte Reload
	movq	4264(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	4132(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	4240(%rsp), %rdi        # 8-byte Reload
	movq	4464(%rsp), %rsi        # 8-byte Reload
	movq	4240(%rsp), %rcx        # 8-byte Reload
	movq	4456(%rsp), %r8         # 8-byte Reload
	movq	4256(%rsp), %r9         # 8-byte Reload
	movq	4264(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	4132(%rsp), %ebp        # 4-byte Reload
	movl	9228(%rsp), %r12d       # 4-byte Reload
	cmpl	%r12d, %ebp
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	4200(%rsp), %rdi        # 8-byte Reload
	movq	4240(%rsp), %rsi        # 8-byte Reload
	movq	4240(%rsp), %rcx        # 8-byte Reload
	movq	4248(%rsp), %r8         # 8-byte Reload
	movq	4256(%rsp), %r9         # 8-byte Reload
	movq	4264(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 4131(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	4184(%rsp), %rdi        # 8-byte Reload
	movq	4192(%rsp), %rsi        # 8-byte Reload
	movq	4224(%rsp), %rdx        # 8-byte Reload
	movq	4216(%rsp), %rcx        # 8-byte Reload
	movq	4232(%rsp), %r8         # 8-byte Reload
	movl	4212(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	4176(%rsp), %rdi        # 8-byte Reload
	movq	4256(%rsp), %rsi        # 8-byte Reload
	movq	4256(%rsp), %rdx        # 8-byte Reload
	movq	4240(%rsp), %rcx        # 8-byte Reload
	movq	4168(%rsp), %r8         # 8-byte Reload
	movq	4256(%rsp), %r9         # 8-byte Reload
	movq	4264(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	4232(%rsp), %rdi        # 8-byte Reload
	movq	4256(%rsp), %rsi        # 8-byte Reload
	movq	4256(%rsp), %rdx        # 8-byte Reload
	movq	4240(%rsp), %rcx        # 8-byte Reload
	movq	4224(%rsp), %r8         # 8-byte Reload
	movq	4256(%rsp), %r9         # 8-byte Reload
	movq	4264(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	4131(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	4240(%rsp), %rdi        # 8-byte Reload
	movq	4240(%rsp), %rsi        # 8-byte Reload
	movq	4240(%rsp), %rcx        # 8-byte Reload
	movq	4248(%rsp), %r8         # 8-byte Reload
	movq	4256(%rsp), %r9         # 8-byte Reload
	movq	4264(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	4131(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	movq	4136(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 4480(%rsp)        # 8-byte Spill
	jne	.LBB10_16
	jmp	.LBB10_15
.Ltmp449:
.LBB10_16:                              # %._crit_edge6
                                        #   in Loop: Header=BB10_12 Depth=2
	vxorps	%xmm0, %xmm0, %xmm0
	movabsq	$1, %rax
	leaq	.L.str151, %r8
	movabsq	$0, %rcx
	leaq	.L.str792, %rdx
	movabsq	$2, %rsi
	leaq	.L.str437, %rdi
	movabsq	$3, %r9
	leaq	.L.str436, %r10
	movabsq	$527, %r11              # imm = 0x20F
	leaq	.L.str61146, %rbx
	leaq	.L.str429, %r14
	leaq	.L.str435, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 4120(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 4112(%rsp)        # 8-byte Spill
	leaq	.L.str434, %rax
	.loc	2 513 0                 # eispack.c:513:0
	movq	%rax, 4104(%rsp)        # 8-byte Spill
	movq	%rsp, %rax
	movl	$1, (%rax)
	movl	$.L.str61146, %eax
                                        # kill: RAX<def> EAX<kill>
	movq	%rsi, 4096(%rsp)        # 8-byte Spill
	movl	$.L.str429, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, 4088(%rsp)        # 8-byte Spill
	movl	$.L.str205, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, 4080(%rsp)        # 8-byte Spill
	movl	$513, %esi              # imm = 0x201
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, 4072(%rsp)        # 8-byte Spill
	movl	$9, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, 4064(%rsp)        # 8-byte Spill
	xorl	%esi, %esi
	movq	%rax, 4056(%rsp)        # 8-byte Spill
	movq	4072(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 4048(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	4056(%rsp), %rax        # 8-byte Reload
	movl	%esi, 4044(%rsp)        # 4-byte Spill
	movq	%rax, %rsi
	movq	4088(%rsp), %rax        # 8-byte Reload
	movq	%rdx, 4032(%rsp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	4080(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 4024(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	4064(%rsp), %rax        # 8-byte Reload
	movq	%r8, 4016(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movl	4044(%rsp), %eax        # 4-byte Reload
	movq	%r9, 4008(%rsp)         # 8-byte Spill
	movl	%eax, %r9d
	vmovsd	%xmm0, 4000(%rsp)       # 8-byte Spill
	movq	%r13, 3992(%rsp)        # 8-byte Spill
	movq	%r14, 3984(%rsp)        # 8-byte Spill
	movq	%r15, 3976(%rsp)        # 8-byte Spill
	movl	%ebp, 3972(%rsp)        # 4-byte Spill
	movl	%r12d, 3968(%rsp)       # 4-byte Spill
	movq	%rbx, 3960(%rsp)        # 8-byte Spill
	movq	%r10, 3952(%rsp)        # 8-byte Spill
	movq	%r11, 3944(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movl	$.L.str200, %eax
	movl	%eax, %ecx
	movl	$.L.str792, %eax
	movl	%eax, %edx
	movl	$2, %eax
	movl	%eax, %esi
	movl	$64, %eax
	movl	%eax, %edi
	movl	$1, %eax
	movl	%eax, %r8d
	movl	4044(%rsp), %eax        # 4-byte Reload
	movl	%eax, %r10d
	movq	%rdi, 3936(%rsp)        # 8-byte Spill
	movq	%rsi, %rdi
	movq	3936(%rsp), %r11        # 8-byte Reload
	movq	%rsi, 3928(%rsp)        # 8-byte Spill
	movq	%r11, %rsi
	vmovsd	4488(%rsp), %xmm0       # 8-byte Reload
	movq	%rdx, 3920(%rsp)        # 8-byte Spill
	movq	%r8, %rdx
	movq	%r8, 3912(%rsp)         # 8-byte Spill
	movq	%r10, %r8
	movq	3920(%rsp), %r9         # 8-byte Reload
	movq	%r10, 3904(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movl	$.L.str419, %eax
	movl	%eax, %ecx
	movq	3912(%rsp), %rdi        # 8-byte Reload
	movq	3936(%rsp), %rsi        # 8-byte Reload
	vmovsd	5592(%rsp), %xmm0       # 8-byte Reload
	movq	3912(%rsp), %rdx        # 8-byte Reload
	movq	3904(%rsp), %r8         # 8-byte Reload
	movq	3920(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	5592(%rsp), %xmm0       # 8-byte Reload
	vmovsd	4488(%rsp), %xmm1       # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %ecx
	movq	%rcx, %rdi
	movq	3936(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	3912(%rsp), %rdx        # 8-byte Reload
	movq	4080(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 3896(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	3904(%rsp), %r8         # 8-byte Reload
	movq	3920(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 3888(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
.Ltmp450:
	#DEBUG_VALUE: tqlrat:f <- [RSP+3888]
	.loc	2 517 0                 # eispack.c:517:0
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str206, %eax
	movl	%eax, %ecx
	movl	$517, %eax              # imm = 0x205
	movl	%eax, %edi
	movl	$27, %eax
	movl	%eax, %r8d
	movq	4056(%rsp), %rsi        # 8-byte Reload
	movq	4088(%rsp), %rdx        # 8-byte Reload
	movq	%rcx, 3880(%rsp)        # 8-byte Spill
	movl	4044(%rsp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
.Ltmp451:
	movq	%rsp, %rcx
	movq	$.L.str792, (%rcx)
	movl	$.L.str147, %eax
	movl	%eax, %r8d
	movq	3912(%rsp), %rdi        # 8-byte Reload
	movq	3936(%rsp), %rsi        # 8-byte Reload
	movq	5808(%rsp), %rdx        # 8-byte Reload
	movq	3912(%rsp), %rcx        # 8-byte Reload
	movq	3904(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_ptr
	movq	5808(%rsp), %rcx        # 8-byte Reload
	vmovsd	(%rcx), %xmm0
	movq	3896(%rsp), %rdi        # 8-byte Reload
	movq	3936(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 3872(%rsp)       # 8-byte Spill
	movq	3912(%rsp), %rdx        # 8-byte Reload
	movq	3880(%rsp), %rcx        # 8-byte Reload
	movq	3904(%rsp), %r8         # 8-byte Reload
	movq	3920(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
.Ltmp452:
	#DEBUG_VALUE: tqlrat:g <- [RSP+3872]
	.loc	2 518 0                 # eispack.c:518:0
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str208, %eax
	movl	%eax, %ecx
	movl	$518, %eax              # imm = 0x206
	movl	%eax, %edx
	movl	$47, %eax
	movl	%eax, %r8d
	movq	%rdx, %rdi
	movq	4056(%rsp), %rsi        # 8-byte Reload
	movq	4088(%rsp), %r9         # 8-byte Reload
	movq	%rdx, 3864(%rsp)        # 8-byte Spill
	movq	%r9, %rdx
	movq	%rcx, 3856(%rsp)        # 8-byte Spill
	movl	4044(%rsp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
.Ltmp453:
	movl	$.L.str1499, %eax
	movl	%eax, %ecx
	vxorps	%xmm0, %xmm0, %xmm0
	movq	3928(%rsp), %rdi        # 8-byte Reload
	movq	3936(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 3848(%rsp)       # 8-byte Spill
	movq	3904(%rsp), %rdx        # 8-byte Reload
	movq	3904(%rsp), %r8         # 8-byte Reload
	movq	3920(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	3912(%rsp), %rdi        # 8-byte Reload
	movq	3936(%rsp), %rsi        # 8-byte Reload
	vmovsd	3872(%rsp), %xmm0       # 8-byte Reload
	movq	3912(%rsp), %rdx        # 8-byte Reload
	movq	3880(%rsp), %rcx        # 8-byte Reload
	movq	3904(%rsp), %r8         # 8-byte Reload
	movq	3920(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	3848(%rsp), %xmm0       # 8-byte Reload
	vmovsd	3872(%rsp), %xmm1       # 8-byte Reload
	vucomisd	%xmm1, %xmm0
	setnp	%al
	sete	%cl
	andb	%al, %cl
	.loc	2 520 0                 # eispack.c:520:0
.Ltmp454:
	movzbl	%cl, %ebp
	movl	%ebp, %edx
	movq	%rsp, %rsi
	movq	$.L.str792, (%rsi)
	movq	3896(%rsp), %rdi        # 8-byte Reload
	movq	3912(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 3840(%rsp)        # 8-byte Spill
	movq	3912(%rsp), %r8         # 8-byte Reload
	movb	%cl, 3839(%rsp)         # 1-byte Spill
	movq	%r8, %rcx
	movq	3856(%rsp), %r8         # 8-byte Reload
	movq	3904(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
.Ltmp455:
	.loc	2 518 0                 # eispack.c:518:0
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str434, %ebp
	movl	%ebp, %ecx
	movl	$50, %ebp
	movl	%ebp, %r8d
	movq	3864(%rsp), %rdi        # 8-byte Reload
	movq	4056(%rsp), %rsi        # 8-byte Reload
	movq	4088(%rsp), %rdx        # 8-byte Reload
	movl	4044(%rsp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
	movl	$3, %r9d
	movl	%r9d, %edi
	movq	3936(%rsp), %rsi        # 8-byte Reload
	vmovsd	3872(%rsp), %xmm0       # 8-byte Reload
	movq	3912(%rsp), %rdx        # 8-byte Reload
	movq	3880(%rsp), %rcx        # 8-byte Reload
	movq	3904(%rsp), %r8         # 8-byte Reload
	movq	3920(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movl	$.L.str397, %ebp
	movl	%ebp, %ecx
.Ltmp456:
	#DEBUG_VALUE: tqlrat:g <- [RSP+7024]
	movq	3928(%rsp), %rdi        # 8-byte Reload
	movq	3936(%rsp), %rsi        # 8-byte Reload
	vmovsd	7024(%rsp), %xmm0       # 8-byte Reload
	movq	3912(%rsp), %rdx        # 8-byte Reload
	movq	3904(%rsp), %r8         # 8-byte Reload
	movq	3920(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
.Ltmp457:
	movq	%rsp, %rcx
	movq	$.L.str792, (%rcx)
	movq	3912(%rsp), %rdi        # 8-byte Reload
	movq	3912(%rsp), %rsi        # 8-byte Reload
	movq	3840(%rsp), %rdx        # 8-byte Reload
	movq	3912(%rsp), %rcx        # 8-byte Reload
	movq	3856(%rsp), %r8         # 8-byte Reload
	movq	3904(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	movb	3839(%rsp), %al         # 1-byte Reload
	testb	%al, %al
	vmovsd	7024(%rsp), %xmm0       # 8-byte Reload
	vmovsd	%xmm0, 3824(%rsp)       # 8-byte Spill
	jne	.LBB10_30
# BB#29:                                # %._crit_edge6
                                        #   in Loop: Header=BB10_12 Depth=2
	vmovsd	3872(%rsp), %xmm0       # 8-byte Reload
	vmovsd	%xmm0, 3824(%rsp)       # 8-byte Spill
.LBB10_30:                              # %._crit_edge6
                                        #   in Loop: Header=BB10_12 Depth=2
	vmovsd	3824(%rsp), %xmm0       # 8-byte Reload
.Ltmp458:
	.loc	2 523 0                 # eispack.c:523:0
	movq	3992(%rsp), %rdi        # 8-byte Reload
	movq	4112(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 3816(%rsp)       # 8-byte Spill
	movq	4120(%rsp), %rdx        # 8-byte Reload
	movq	4104(%rsp), %rcx        # 8-byte Reload
	movq	4024(%rsp), %r8         # 8-byte Reload
	movq	4032(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
.Ltmp459:
	#DEBUG_VALUE: tqlrat:h <- [RSP+3816]
	#DEBUG_VALUE: tqlrat:s <- 0.000000e+00
	#DEBUG_VALUE: tqlrat:mml <- [RSP+5800]
	#DEBUG_VALUE: tqlrat:ii <- 1
	.loc	2 527 0                 # eispack.c:527:0
	movq	3944(%rsp), %rdi        # 8-byte Reload
	movq	3960(%rsp), %rsi        # 8-byte Reload
	movq	3984(%rsp), %rdx        # 8-byte Reload
	movq	3976(%rsp), %rcx        # 8-byte Reload
	movq	4096(%rsp), %r8         # 8-byte Reload
	movl	3972(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	4008(%rsp), %rdi        # 8-byte Reload
	movq	4024(%rsp), %rsi        # 8-byte Reload
	movq	4024(%rsp), %rdx        # 8-byte Reload
	movq	4120(%rsp), %rcx        # 8-byte Reload
	movq	3952(%rsp), %r8         # 8-byte Reload
	movq	4024(%rsp), %r9         # 8-byte Reload
	movq	4032(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	4096(%rsp), %rdi        # 8-byte Reload
	movq	4024(%rsp), %rsi        # 8-byte Reload
	movq	4024(%rsp), %rdx        # 8-byte Reload
	movq	4120(%rsp), %rcx        # 8-byte Reload
	movq	4048(%rsp), %r8         # 8-byte Reload
	movq	4024(%rsp), %r9         # 8-byte Reload
	movq	4032(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movb	5799(%rsp), %r10b       # 1-byte Reload
	andb	$1, %r10b
	movzbl	%r10b, %r11d
	movl	%r11d, %edx
	movq	4120(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	movq	4120(%rsp), %rcx        # 8-byte Reload
	movq	4016(%rsp), %r8         # 8-byte Reload
	movq	4024(%rsp), %r9         # 8-byte Reload
	movq	4032(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movb	5799(%rsp), %r10b       # 1-byte Reload
	testb	$1, %r10b
	movq	4120(%rsp), %rax        # 8-byte Reload
	vmovsd	4000(%rsp), %xmm0       # 8-byte Reload
	vmovsd	3816(%rsp), %xmm1       # 8-byte Reload
	vmovsd	3816(%rsp), %xmm2       # 8-byte Reload
	movq	%rax, 3808(%rsp)        # 8-byte Spill
	vmovsd	%xmm0, 3800(%rsp)       # 8-byte Spill
	vmovsd	%xmm1, 3792(%rsp)       # 8-byte Spill
	vmovsd	%xmm2, 3784(%rsp)       # 8-byte Spill
	jne	.LBB10_18
.Ltmp460:
.LBB10_17:                              # %.lr.ph12
                                        #   Parent Loop BB10_5 Depth=1
                                        #     Parent Loop BB10_12 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	vmovsd	3784(%rsp), %xmm0       # 8-byte Reload
	vmovsd	3792(%rsp), %xmm1       # 8-byte Reload
	vmovsd	3800(%rsp), %xmm2       # 8-byte Reload
	movq	3808(%rsp), %rax        # 8-byte Reload
	movabsq	$1, %rcx
	leaq	.L.str448, %rdx
	movabsq	$0, %rsi
	leaq	.L.str792, %rdi
	movabsq	$2, %r8
	leaq	.L.str437, %r9
	movabsq	$3, %r10
	leaq	.L.str436, %r11
	movabsq	$527, %rbx              # imm = 0x20F
	leaq	.L.str61146, %r14
	leaq	.L.str449, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 3776(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 3768(%rsp)        # 8-byte Spill
	leaq	.L.str447, %rax
	movq	%rax, 3760(%rsp)        # 8-byte Spill
	leaq	.L.str152, %rax
	movq	%rax, 3752(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 3744(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 3736(%rsp)        # 8-byte Spill
	leaq	.L.str439, %rax
	movq	%rax, 3728(%rsp)        # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, 3720(%rsp)        # 8-byte Spill
	leaq	.L.str438, %rax
	movq	%rax, 3712(%rsp)        # 8-byte Spill
	leaq	.L.str1499, %rax
	movq	%rax, 3704(%rsp)        # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, 3696(%rsp)        # 8-byte Spill
	leaq	.L.str258, %rax
	movq	%rax, 3688(%rsp)        # 8-byte Spill
	leaq	.L.str257, %rax
	movq	%rax, 3680(%rsp)        # 8-byte Spill
	leaq	.L.str232, %rax
	movq	%rax, 3672(%rsp)        # 8-byte Spill
	movabsq	$540, %rax              # imm = 0x21C
	movq	%rax, 3664(%rsp)        # 8-byte Spill
	movabsq	$16, %rax
	movq	%rax, 3656(%rsp)        # 8-byte Spill
	leaq	.L.str212, %rax
	movq	%rax, 3648(%rsp)        # 8-byte Spill
	leaq	.L.str443, %rax
	movq	%rax, 3640(%rsp)        # 8-byte Spill
	movabsq	$13, %rax
	.loc	2 529 0                 # eispack.c:529:0
.Ltmp461:
	movq	%rax, 3632(%rsp)        # 8-byte Spill
	movq	%rsp, %rax
	movl	$1, (%rax)
	movl	$.L.str61146, %eax
                                        # kill: RAX<def> EAX<kill>
	movq	%rsi, 3624(%rsp)        # 8-byte Spill
	movl	$.L.str437, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, 3616(%rsp)        # 8-byte Spill
	movl	$.L.str438, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, 3608(%rsp)        # 8-byte Spill
	movl	$48, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rax, 3600(%rsp)        # 8-byte Spill
	movq	$-1, %rax
	movq	%rsi, 3592(%rsp)        # 8-byte Spill
	xorl	%esi, %esi
	movq	%rdi, 3584(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rax, 3576(%rsp)        # 8-byte Spill
	movq	3600(%rsp), %rax        # 8-byte Reload
	movl	%esi, 3572(%rsp)        # 4-byte Spill
	movq	%rax, %rsi
	movq	3616(%rsp), %rax        # 8-byte Reload
	movq	%rdx, 3560(%rsp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	3608(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 3552(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	3592(%rsp), %rax        # 8-byte Reload
	movq	%r8, 3544(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movl	3572(%rsp), %eax        # 4-byte Reload
	movq	%r9, 3536(%rsp)         # 8-byte Spill
	movl	%eax, %r9d
	vmovsd	%xmm0, 3528(%rsp)       # 8-byte Spill
	vmovsd	%xmm1, 3520(%rsp)       # 8-byte Spill
	vmovsd	%xmm2, 3512(%rsp)       # 8-byte Spill
	movq	%r13, 3504(%rsp)        # 8-byte Spill
	movq	%r15, 3496(%rsp)        # 8-byte Spill
	movl	%ebp, 3492(%rsp)        # 4-byte Spill
	movl	%r12d, 3488(%rsp)       # 4-byte Spill
	movq	%r14, 3480(%rsp)        # 8-byte Spill
	movq	%rbx, 3472(%rsp)        # 8-byte Spill
	movq	%r10, 3464(%rsp)        # 8-byte Spill
	movq	%r11, 3456(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	%rsp, %rcx
	movq	$.L.str429, (%rcx)
	movl	$.L.str1499, %eax
	movl	%eax, %ecx
	movl	$2, %eax
	movl	%eax, %edx
	movl	$64, %eax
	movl	%eax, %esi
	movl	3572(%rsp), %eax        # 4-byte Reload
	movl	%eax, %edi
	movl	$1, %r9d
	movl	%r9d, %r8d
	movq	%rdi, 3448(%rsp)        # 8-byte Spill
	movq	%rdx, %rdi
	movq	%rsi, 3440(%rsp)        # 8-byte Spill
	movq	%rdx, 3432(%rsp)        # 8-byte Spill
	movq	%r8, %rdx
	movq	3448(%rsp), %r10        # 8-byte Reload
	movq	%rcx, 3424(%rsp)        # 8-byte Spill
	movq	%r10, %rcx
	movq	3424(%rsp), %r11        # 8-byte Reload
	movq	%r8, 3416(%rsp)         # 8-byte Spill
	movq	%r11, %r8
	movq	3416(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	movl	$.L.str429, %eax
	movl	%eax, %r9d
	movq	%rsp, %rcx
	movq	$.L.str437, (%rcx)
	movl	$.L.str439, %eax
	movl	%eax, %r8d
	movq	3416(%rsp), %rdi        # 8-byte Reload
	movq	3440(%rsp), %rsi        # 8-byte Reload
	movq	3448(%rsp), %rdx        # 8-byte Reload
	movq	3416(%rsp), %rcx        # 8-byte Reload
	movq	3416(%rsp), %r10        # 8-byte Reload
	movq	%r9, 3408(%rsp)         # 8-byte Spill
	movq	%r10, %r9
	callq	trace_logger_log_int
	movq	%rsp, %rcx
	movq	$.L.str437, (%rcx)
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %ecx
	movq	%rcx, %rdi
	movq	3440(%rsp), %rsi        # 8-byte Reload
	movq	3776(%rsp), %rdx        # 8-byte Reload
	movq	3416(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 3400(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	3608(%rsp), %r8         # 8-byte Reload
	movq	3448(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str440, %eax
	movl	%eax, %ecx
	movq	3576(%rsp), %rdi        # 8-byte Reload
	movq	3600(%rsp), %rsi        # 8-byte Reload
	movq	3616(%rsp), %rdx        # 8-byte Reload
	movq	%rcx, 3392(%rsp)        # 8-byte Spill
	movq	3592(%rsp), %r8         # 8-byte Reload
	movl	3572(%rsp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
	vxorps	%xmm0, %xmm0, %xmm0
	movq	3432(%rsp), %rdi        # 8-byte Reload
	movq	3440(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 3384(%rsp)       # 8-byte Spill
	movq	3448(%rsp), %rdx        # 8-byte Reload
	movq	3424(%rsp), %rcx        # 8-byte Reload
	movq	3416(%rsp), %r8         # 8-byte Reload
	movq	3408(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	%rsp, %rcx
	movq	$.L.str437, (%rcx)
	movl	$.L.str238, %eax
	movl	%eax, %ecx
	movq	3416(%rsp), %rdi        # 8-byte Reload
	movq	3440(%rsp), %rsi        # 8-byte Reload
	movq	3448(%rsp), %rdx        # 8-byte Reload
	movq	3416(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 3376(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	3376(%rsp), %r8         # 8-byte Reload
	movq	3416(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	movq	3400(%rsp), %rdi        # 8-byte Reload
	movq	3440(%rsp), %rsi        # 8-byte Reload
	vmovsd	3512(%rsp), %xmm0       # 8-byte Reload
	movq	3416(%rsp), %rdx        # 8-byte Reload
	movq	3392(%rsp), %rcx        # 8-byte Reload
	movq	3448(%rsp), %r8         # 8-byte Reload
	movq	3616(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str441, %eax
	movl	%eax, %ecx
	movq	3576(%rsp), %rdi        # 8-byte Reload
	movq	3600(%rsp), %rsi        # 8-byte Reload
	movq	3616(%rsp), %rdx        # 8-byte Reload
	movq	%rcx, 3368(%rsp)        # 8-byte Spill
	movq	3592(%rsp), %r8         # 8-byte Reload
	movl	3572(%rsp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
	movq	%rsp, %rcx
	movq	$.L.str429, (%rcx)
	movl	$.L.str434, %eax
	movl	%eax, %ecx
	movq	3432(%rsp), %rdi        # 8-byte Reload
	movq	3440(%rsp), %rsi        # 8-byte Reload
	movq	3448(%rsp), %rdx        # 8-byte Reload
	movq	3416(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 3360(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	3360(%rsp), %r8         # 8-byte Reload
	movq	3416(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	movq	%rsp, %rcx
	movq	$.L.str437, (%rcx)
	movl	$.L.str258, %eax
	movl	%eax, %r8d
	movq	3416(%rsp), %rdi        # 8-byte Reload
	movq	3440(%rsp), %rsi        # 8-byte Reload
	movq	3448(%rsp), %rdx        # 8-byte Reload
	movq	3416(%rsp), %rcx        # 8-byte Reload
	movq	3416(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	movq	3400(%rsp), %rdi        # 8-byte Reload
	movq	3440(%rsp), %rsi        # 8-byte Reload
	vmovsd	3520(%rsp), %xmm0       # 8-byte Reload
	movq	3416(%rsp), %rdx        # 8-byte Reload
	movq	3368(%rsp), %rcx        # 8-byte Reload
	movq	3448(%rsp), %r8         # 8-byte Reload
	movq	3616(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str442, %eax
	movl	%eax, %ecx
	movq	3576(%rsp), %rdi        # 8-byte Reload
	movq	3600(%rsp), %rsi        # 8-byte Reload
	movq	3616(%rsp), %rdx        # 8-byte Reload
	movq	%rcx, 3352(%rsp)        # 8-byte Spill
	movq	3592(%rsp), %r8         # 8-byte Reload
	movl	3572(%rsp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
	movq	%rsp, %rcx
	movq	$.L.str429, (%rcx)
	movq	3432(%rsp), %rdi        # 8-byte Reload
	movq	3440(%rsp), %rsi        # 8-byte Reload
	movq	3448(%rsp), %rdx        # 8-byte Reload
	movq	3416(%rsp), %rcx        # 8-byte Reload
	movq	3360(%rsp), %r8         # 8-byte Reload
	movq	3416(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	movq	%rsp, %rcx
	movq	$.L.str437, (%rcx)
	movl	$.L.str443, %eax
	movl	%eax, %ecx
	movq	3416(%rsp), %rdi        # 8-byte Reload
	movq	3440(%rsp), %rsi        # 8-byte Reload
	movq	3448(%rsp), %rdx        # 8-byte Reload
	movq	3416(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 3344(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	3344(%rsp), %r8         # 8-byte Reload
	movq	3416(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	movq	3400(%rsp), %rdi        # 8-byte Reload
	movq	3440(%rsp), %rsi        # 8-byte Reload
	vmovsd	3528(%rsp), %xmm0       # 8-byte Reload
	movq	3416(%rsp), %rdx        # 8-byte Reload
	movq	3352(%rsp), %rcx        # 8-byte Reload
	movq	3448(%rsp), %r8         # 8-byte Reload
	movq	3616(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str209, %eax
	movl	%eax, %ecx
	movl	$529, %eax              # imm = 0x211
	movl	%eax, %edx
	movl	$33, %eax
	movl	%eax, %r8d
	movq	%rdx, %rdi
	movq	3600(%rsp), %rsi        # 8-byte Reload
	movq	3616(%rsp), %r9         # 8-byte Reload
	movq	%rdx, 3336(%rsp)        # 8-byte Spill
	movq	%r9, %rdx
	movq	%rcx, 3328(%rsp)        # 8-byte Spill
	movl	3572(%rsp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
	movq	%rsp, %rcx
	movq	$.L.str792, (%rcx)
	movq	3416(%rsp), %rdi        # 8-byte Reload
	movq	3440(%rsp), %rsi        # 8-byte Reload
	movq	3776(%rsp), %rdx        # 8-byte Reload
	movq	3416(%rsp), %rcx        # 8-byte Reload
	movq	3608(%rsp), %r8         # 8-byte Reload
	movq	3448(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	movl	$.L.str792, %eax
	movl	%eax, %ecx
	movq	3776(%rsp), %rdx        # 8-byte Reload
	movl	%edx, %eax
	movl	%eax, %ebp
	movl	%ebp, %esi
	movq	%rsp, %rdi
	movq	$.L.str792, (%rdi)
	movl	$32, %ebp
	movl	%ebp, %edi
	movq	3400(%rsp), %r8         # 8-byte Reload
	movq	%rdi, 3320(%rsp)        # 8-byte Spill
	movq	%r8, %rdi
	movq	3320(%rsp), %r9         # 8-byte Reload
	movq	%rsi, 3312(%rsp)        # 8-byte Spill
	movq	%r9, %rsi
	movq	3312(%rsp), %rdx        # 8-byte Reload
	movq	3416(%rsp), %r10        # 8-byte Reload
	movq	%rcx, 3304(%rsp)        # 8-byte Spill
	movq	%r10, %rcx
	movq	3328(%rsp), %r8         # 8-byte Reload
	movq	3448(%rsp), %r9         # 8-byte Reload
	movl	%eax, 3300(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str210, %eax
	movl	%eax, %ecx
	movl	$10, %eax
	movl	%eax, %r8d
	movq	3336(%rsp), %rdi        # 8-byte Reload
	movq	3600(%rsp), %rsi        # 8-byte Reload
	movq	3616(%rsp), %rdx        # 8-byte Reload
	movq	%rcx, 3288(%rsp)        # 8-byte Spill
	movl	3572(%rsp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
	movq	%rsp, %rcx
	movq	$.L.str792, (%rcx)
	movq	3432(%rsp), %rdi        # 8-byte Reload
	movq	3320(%rsp), %rsi        # 8-byte Reload
	movq	3312(%rsp), %rdx        # 8-byte Reload
	movq	3416(%rsp), %rcx        # 8-byte Reload
	movq	3328(%rsp), %r8         # 8-byte Reload
	movq	3448(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	movl	6252(%rsp), %eax        # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	%rsp, %rcx
	movq	$.L.str792, (%rcx)
	movl	$.L.str415, %ebp
	movl	%ebp, %r8d
	movq	3416(%rsp), %rdi        # 8-byte Reload
	movq	3320(%rsp), %rsi        # 8-byte Reload
	movq	3416(%rsp), %rcx        # 8-byte Reload
	movq	3448(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	movl	6252(%rsp), %eax        # 4-byte Reload
	movl	3300(%rsp), %ebp        # 4-byte Reload
	subl	%ebp, %eax
	movl	%eax, %ecx
	movq	%rsp, %rdx
	movq	$.L.str792, (%rdx)
	movq	3400(%rsp), %rdi        # 8-byte Reload
	movq	3320(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	3416(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 3280(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	3288(%rsp), %r8         # 8-byte Reload
	movq	3448(%rsp), %r9         # 8-byte Reload
	movl	%eax, 3276(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
.Ltmp462:
	#DEBUG_VALUE: tqlrat:i <- [RSP+3276]
	.loc	2 530 0                 # eispack.c:530:0
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str212, %eax
	movl	%eax, %ecx
	movl	$530, %eax              # imm = 0x212
	movl	%eax, %edi
	movl	$13, %eax
	movl	%eax, %edx
	movq	3600(%rsp), %rsi        # 8-byte Reload
	movq	3616(%rsp), %r8         # 8-byte Reload
	movq	%rdx, 3264(%rsp)        # 8-byte Spill
	movq	%r8, %rdx
	movq	%rcx, 3256(%rsp)        # 8-byte Spill
	movq	3264(%rsp), %r8         # 8-byte Reload
	movl	3572(%rsp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
.Ltmp463:
	movq	3432(%rsp), %rdi        # 8-byte Reload
	movq	3440(%rsp), %rsi        # 8-byte Reload
	vmovsd	3520(%rsp), %xmm0       # 8-byte Reload
	movq	3416(%rsp), %rdx        # 8-byte Reload
	movq	3368(%rsp), %rcx        # 8-byte Reload
	movq	3448(%rsp), %r8         # 8-byte Reload
	movq	3304(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	3416(%rsp), %rdi        # 8-byte Reload
	movq	3440(%rsp), %rsi        # 8-byte Reload
	vmovsd	3528(%rsp), %xmm0       # 8-byte Reload
	movq	3416(%rsp), %rdx        # 8-byte Reload
	movq	3352(%rsp), %rcx        # 8-byte Reload
	movq	3448(%rsp), %r8         # 8-byte Reload
	movq	3304(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	3528(%rsp), %xmm0       # 8-byte Reload
	vmovsd	3520(%rsp), %xmm1       # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	3400(%rsp), %rdi        # 8-byte Reload
	movq	3440(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	3416(%rsp), %rdx        # 8-byte Reload
	movq	3256(%rsp), %rcx        # 8-byte Reload
	movq	3448(%rsp), %r8         # 8-byte Reload
	movq	3304(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 3248(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
.Ltmp464:
	#DEBUG_VALUE: tqlrat:p <- [RSP+3248]
	.loc	2 531 0                 # eispack.c:531:0
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str217, %eax
	movl	%eax, %ecx
	movl	$531, %eax              # imm = 0x213
	movl	%eax, %edx
	movl	$35, %eax
	movl	%eax, %esi
	movq	%rdx, %rdi
	movq	3600(%rsp), %r8         # 8-byte Reload
	movq	%rsi, 3240(%rsp)        # 8-byte Spill
	movq	%r8, %rsi
	movq	3616(%rsp), %r9         # 8-byte Reload
	movq	%rdx, 3232(%rsp)        # 8-byte Spill
	movq	%r9, %rdx
	movq	%rcx, 3224(%rsp)        # 8-byte Spill
	movq	3240(%rsp), %r8         # 8-byte Reload
	movl	3572(%rsp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
.Ltmp465:
	movq	%rsp, %rcx
	movq	$.L.str792, (%rcx)
	movq	3416(%rsp), %rdi        # 8-byte Reload
	movq	3320(%rsp), %rsi        # 8-byte Reload
	movq	3280(%rsp), %rdx        # 8-byte Reload
	movq	3416(%rsp), %rcx        # 8-byte Reload
	movq	3288(%rsp), %r8         # 8-byte Reload
	movq	3448(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	movl	3276(%rsp), %eax        # 4-byte Reload
	movslq	%eax, %rcx
	movq	%rsp, %rdx
	movq	$.L.str792, (%rdx)
	movq	3400(%rsp), %rdi        # 8-byte Reload
	movq	3440(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	3416(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 3216(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	3224(%rsp), %r8         # 8-byte Reload
	movq	3448(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str223, %eax
	movl	%eax, %ecx
	movl	$29, %eax
	movl	%eax, %edx
	movq	3232(%rsp), %rdi        # 8-byte Reload
	movq	3600(%rsp), %rsi        # 8-byte Reload
	movq	3616(%rsp), %r8         # 8-byte Reload
	movq	%rdx, 3208(%rsp)        # 8-byte Spill
	movq	%r8, %rdx
	movq	%rcx, 3200(%rsp)        # 8-byte Spill
	movq	3208(%rsp), %r8         # 8-byte Reload
	movl	3572(%rsp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
	movq	%rsp, %rcx
	movq	$.L.str792, (%rcx)
	movq	3432(%rsp), %rdi        # 8-byte Reload
	movq	3440(%rsp), %rsi        # 8-byte Reload
	movq	3216(%rsp), %rdx        # 8-byte Reload
	movq	3416(%rsp), %rcx        # 8-byte Reload
	movq	3224(%rsp), %r8         # 8-byte Reload
	movq	3448(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	movq	%rsp, %rcx
	movq	$.L.str792, (%rcx)
	movl	$.L.str163, %eax
	movl	%eax, %ecx
	movq	3416(%rsp), %rdi        # 8-byte Reload
	movq	3440(%rsp), %rsi        # 8-byte Reload
	movq	9208(%rsp), %rdx        # 8-byte Reload
	movq	3416(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 3192(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	3192(%rsp), %r8         # 8-byte Reload
	movq	3448(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_ptr
	movq	9208(%rsp), %rcx        # 8-byte Reload
	movq	3216(%rsp), %rdx        # 8-byte Reload
	leaq	(%rcx,%rdx,8), %rsi
	movq	%rsp, %rdi
	movq	$.L.str792, (%rdi)
	movq	3400(%rsp), %rdi        # 8-byte Reload
	movq	3440(%rsp), %r8         # 8-byte Reload
	movq	%rsi, 3184(%rsp)        # 8-byte Spill
	movq	%r8, %rsi
	movq	3184(%rsp), %rdx        # 8-byte Reload
	movq	3416(%rsp), %rcx        # 8-byte Reload
	movq	3200(%rsp), %r8         # 8-byte Reload
	movq	3448(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_ptr
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str231, %eax
	movl	%eax, %ecx
	movl	$27, %eax
	movl	%eax, %edx
	movq	3232(%rsp), %rdi        # 8-byte Reload
	movq	3600(%rsp), %rsi        # 8-byte Reload
	movq	3616(%rsp), %r8         # 8-byte Reload
	movq	%rdx, 3176(%rsp)        # 8-byte Spill
	movq	%r8, %rdx
	movq	%rcx, 3168(%rsp)        # 8-byte Spill
	movq	3176(%rsp), %r8         # 8-byte Reload
	movl	3572(%rsp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
	movq	%rsp, %rcx
	movq	$.L.str792, (%rcx)
	movq	3416(%rsp), %rdi        # 8-byte Reload
	movq	3440(%rsp), %rsi        # 8-byte Reload
	movq	3184(%rsp), %rdx        # 8-byte Reload
	movq	3416(%rsp), %rcx        # 8-byte Reload
	movq	3200(%rsp), %r8         # 8-byte Reload
	movq	3448(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_ptr
	movq	9208(%rsp), %rcx        # 8-byte Reload
	movq	3216(%rsp), %rdx        # 8-byte Reload
	vmovsd	(%rcx,%rdx,8), %xmm0
	movq	3400(%rsp), %rdi        # 8-byte Reload
	movq	3440(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 3160(%rsp)       # 8-byte Spill
	movq	3416(%rsp), %rdx        # 8-byte Reload
	movq	3168(%rsp), %rcx        # 8-byte Reload
	movq	3448(%rsp), %r8         # 8-byte Reload
	movq	3304(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str232, %eax
	movl	%eax, %ecx
	movl	$9, %eax
	movl	%eax, %edx
	movq	3232(%rsp), %rdi        # 8-byte Reload
	movq	3600(%rsp), %rsi        # 8-byte Reload
	movq	3616(%rsp), %r8         # 8-byte Reload
	movq	%rdx, 3152(%rsp)        # 8-byte Spill
	movq	%r8, %rdx
	movq	%rcx, 3144(%rsp)        # 8-byte Spill
	movq	3152(%rsp), %r8         # 8-byte Reload
	movl	3572(%rsp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
	movq	3432(%rsp), %rdi        # 8-byte Reload
	movq	3440(%rsp), %rsi        # 8-byte Reload
	vmovsd	3160(%rsp), %xmm0       # 8-byte Reload
	movq	3416(%rsp), %rdx        # 8-byte Reload
	movq	3168(%rsp), %rcx        # 8-byte Reload
	movq	3448(%rsp), %r8         # 8-byte Reload
	movq	3304(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	3416(%rsp), %rdi        # 8-byte Reload
	movq	3440(%rsp), %rsi        # 8-byte Reload
	vmovsd	3248(%rsp), %xmm0       # 8-byte Reload
	movq	3416(%rsp), %rdx        # 8-byte Reload
	movq	3256(%rsp), %rcx        # 8-byte Reload
	movq	3448(%rsp), %r8         # 8-byte Reload
	movq	3304(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	3248(%rsp), %xmm0       # 8-byte Reload
	vmovsd	3160(%rsp), %xmm1       # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
	movq	3400(%rsp), %rdi        # 8-byte Reload
	movq	3440(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	3416(%rsp), %rdx        # 8-byte Reload
	movq	3144(%rsp), %rcx        # 8-byte Reload
	movq	3448(%rsp), %r8         # 8-byte Reload
	movq	3304(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 3136(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
.Ltmp466:
	#DEBUG_VALUE: tqlrat:r <- [RSP+3136]
	.loc	2 532 0                 # eispack.c:532:0
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str233, %eax
	movl	%eax, %ecx
	movl	$532, %eax              # imm = 0x214
	movl	%eax, %edx
	movq	%rdx, %rdi
	movq	3600(%rsp), %rsi        # 8-byte Reload
	movq	3616(%rsp), %r8         # 8-byte Reload
	movq	%rdx, 3128(%rsp)        # 8-byte Spill
	movq	%r8, %rdx
	movq	%rcx, 3120(%rsp)        # 8-byte Spill
	movq	3264(%rsp), %r8         # 8-byte Reload
	movl	3572(%rsp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
.Ltmp467:
	movq	3432(%rsp), %rdi        # 8-byte Reload
	movq	3440(%rsp), %rsi        # 8-byte Reload
	vmovsd	3136(%rsp), %xmm0       # 8-byte Reload
	movq	3416(%rsp), %rdx        # 8-byte Reload
	movq	3144(%rsp), %rcx        # 8-byte Reload
	movq	3448(%rsp), %r8         # 8-byte Reload
	movq	3304(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	3416(%rsp), %rdi        # 8-byte Reload
	movq	3440(%rsp), %rsi        # 8-byte Reload
	vmovsd	3512(%rsp), %xmm0       # 8-byte Reload
	movq	3416(%rsp), %rdx        # 8-byte Reload
	movq	3392(%rsp), %rcx        # 8-byte Reload
	movq	3448(%rsp), %r8         # 8-byte Reload
	movq	3304(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	3512(%rsp), %xmm0       # 8-byte Reload
	vmovsd	3136(%rsp), %xmm1       # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	3400(%rsp), %rdi        # 8-byte Reload
	movq	3440(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	3416(%rsp), %rdx        # 8-byte Reload
	movq	3120(%rsp), %rcx        # 8-byte Reload
	movq	3448(%rsp), %r8         # 8-byte Reload
	movq	3304(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 3112(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str234, %eax
	movl	%eax, %ecx
	movl	$8, %eax
	movl	%eax, %r8d
	movq	3128(%rsp), %rdi        # 8-byte Reload
	movq	3600(%rsp), %rsi        # 8-byte Reload
	movq	3616(%rsp), %rdx        # 8-byte Reload
	movq	%rcx, 3104(%rsp)        # 8-byte Spill
	movl	3572(%rsp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
	movq	%rsp, %rcx
	movq	$.L.str792, (%rcx)
	movq	3432(%rsp), %rdi        # 8-byte Reload
	movq	3320(%rsp), %rsi        # 8-byte Reload
	movq	3416(%rsp), %rdx        # 8-byte Reload
	movq	3448(%rsp), %rcx        # 8-byte Reload
	movq	3424(%rsp), %r8         # 8-byte Reload
	movq	3448(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	movq	%rsp, %rcx
	movq	$.L.str792, (%rcx)
	movq	3416(%rsp), %rdi        # 8-byte Reload
	movq	3320(%rsp), %rsi        # 8-byte Reload
	movq	3280(%rsp), %rdx        # 8-byte Reload
	movq	3416(%rsp), %rcx        # 8-byte Reload
	movq	3288(%rsp), %r8         # 8-byte Reload
	movq	3448(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	movl	3276(%rsp), %eax        # 4-byte Reload
	incl	%eax
	movl	%eax, %ecx
	movq	%rsp, %rdx
	movq	$.L.str792, (%rdx)
	movq	3400(%rsp), %rdi        # 8-byte Reload
	movq	3320(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	3416(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 3096(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	3104(%rsp), %r8         # 8-byte Reload
	movq	3448(%rsp), %r9         # 8-byte Reload
	movl	%eax, 3092(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str235, %eax
	movl	%eax, %ecx
	movq	3128(%rsp), %rdi        # 8-byte Reload
	movq	3600(%rsp), %rsi        # 8-byte Reload
	movq	3616(%rsp), %rdx        # 8-byte Reload
	movq	%rcx, 3080(%rsp)        # 8-byte Spill
	movq	3240(%rsp), %r8         # 8-byte Reload
	movl	3572(%rsp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
	movq	%rsp, %rcx
	movq	$.L.str792, (%rcx)
	movq	3416(%rsp), %rdi        # 8-byte Reload
	movq	3320(%rsp), %rsi        # 8-byte Reload
	movq	3096(%rsp), %rdx        # 8-byte Reload
	movq	3416(%rsp), %rcx        # 8-byte Reload
	movq	3104(%rsp), %r8         # 8-byte Reload
	movq	3448(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	movl	3092(%rsp), %eax        # 4-byte Reload
	movslq	%eax, %rcx
	movq	%rsp, %rdx
	movq	$.L.str792, (%rdx)
	movq	3400(%rsp), %rdi        # 8-byte Reload
	movq	3440(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	3416(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 3072(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	3080(%rsp), %r8         # 8-byte Reload
	movq	3448(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str236, %eax
	movl	%eax, %ecx
	movq	3128(%rsp), %rdi        # 8-byte Reload
	movq	3600(%rsp), %rsi        # 8-byte Reload
	movq	3616(%rsp), %rdx        # 8-byte Reload
	movq	%rcx, 3064(%rsp)        # 8-byte Spill
	movq	3208(%rsp), %r8         # 8-byte Reload
	movl	3572(%rsp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
	movq	%rsp, %rcx
	movq	$.L.str792, (%rcx)
	movq	3432(%rsp), %rdi        # 8-byte Reload
	movq	3440(%rsp), %rsi        # 8-byte Reload
	movq	3072(%rsp), %rdx        # 8-byte Reload
	movq	3416(%rsp), %rcx        # 8-byte Reload
	movq	3080(%rsp), %r8         # 8-byte Reload
	movq	3448(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	movq	%rsp, %rcx
	movq	$.L.str792, (%rcx)
	movq	3416(%rsp), %rdi        # 8-byte Reload
	movq	3440(%rsp), %rsi        # 8-byte Reload
	movq	9208(%rsp), %rdx        # 8-byte Reload
	movq	3416(%rsp), %rcx        # 8-byte Reload
	movq	3192(%rsp), %r8         # 8-byte Reload
	movq	3448(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_ptr
	movq	9208(%rsp), %rcx        # 8-byte Reload
	movq	3072(%rsp), %rdx        # 8-byte Reload
	leaq	(%rcx,%rdx,8), %rsi
	movq	%rsp, %rdi
	movq	$.L.str792, (%rdi)
	movq	3400(%rsp), %rdi        # 8-byte Reload
	movq	3440(%rsp), %r8         # 8-byte Reload
	movq	%rsi, 3056(%rsp)        # 8-byte Spill
	movq	%r8, %rsi
	movq	3056(%rsp), %rdx        # 8-byte Reload
	movq	3416(%rsp), %rcx        # 8-byte Reload
	movq	3064(%rsp), %r8         # 8-byte Reload
	movq	3448(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_ptr
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str444, %eax
	movl	%eax, %ecx
	movl	$28, %eax
	movl	%eax, %edx
	movq	3128(%rsp), %rdi        # 8-byte Reload
	movq	3600(%rsp), %rsi        # 8-byte Reload
	movq	3616(%rsp), %r8         # 8-byte Reload
	movq	%rdx, 3048(%rsp)        # 8-byte Spill
	movq	%r8, %rdx
	movq	3048(%rsp), %r8         # 8-byte Reload
	movl	3572(%rsp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
	movq	%rsp, %rcx
	movq	$.L.str792, (%rcx)
	movq	3432(%rsp), %rdi        # 8-byte Reload
	movq	3440(%rsp), %rsi        # 8-byte Reload
	movq	3056(%rsp), %rdx        # 8-byte Reload
	movq	3416(%rsp), %rcx        # 8-byte Reload
	movq	3064(%rsp), %r8         # 8-byte Reload
	movq	3448(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_ptr
	movq	3416(%rsp), %rdi        # 8-byte Reload
	movq	3440(%rsp), %rsi        # 8-byte Reload
	vmovsd	3112(%rsp), %xmm0       # 8-byte Reload
	movq	3416(%rsp), %rdx        # 8-byte Reload
	movq	3120(%rsp), %rcx        # 8-byte Reload
	movq	3448(%rsp), %r8         # 8-byte Reload
	movq	3304(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	9208(%rsp), %rcx        # 8-byte Reload
	movq	3072(%rsp), %rdx        # 8-byte Reload
	vmovsd	3112(%rsp), %xmm0       # 8-byte Reload
	vmovsd	%xmm0, (%rcx,%rdx,8)
	.loc	2 533 0                 # eispack.c:533:0
	movq	%rsp, %rsi
	movl	$1, (%rsi)
	movl	$.L.str237, %eax
	movl	%eax, %esi
	movl	$533, %eax              # imm = 0x215
	movl	%eax, %edi
	movq	%rdi, 3040(%rsp)        # 8-byte Spill
	movq	3600(%rsp), %r8         # 8-byte Reload
	movq	%rsi, 3032(%rsp)        # 8-byte Spill
	movq	%r8, %rsi
	movq	3616(%rsp), %rdx        # 8-byte Reload
	movq	3032(%rsp), %rcx        # 8-byte Reload
	movq	3176(%rsp), %r8         # 8-byte Reload
	movl	3572(%rsp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
	movq	%rsp, %rcx
	movq	$.L.str792, (%rcx)
	movq	3416(%rsp), %rdi        # 8-byte Reload
	movq	3440(%rsp), %rsi        # 8-byte Reload
	movq	3184(%rsp), %rdx        # 8-byte Reload
	movq	3416(%rsp), %rcx        # 8-byte Reload
	movq	3200(%rsp), %r8         # 8-byte Reload
	movq	3448(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_ptr
	movq	9208(%rsp), %rcx        # 8-byte Reload
	movq	3216(%rsp), %rdx        # 8-byte Reload
	vmovsd	(%rcx,%rdx,8), %xmm0
	movq	3400(%rsp), %rdi        # 8-byte Reload
	movq	3440(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 3024(%rsp)       # 8-byte Spill
	movq	3416(%rsp), %rdx        # 8-byte Reload
	movq	3032(%rsp), %rcx        # 8-byte Reload
	movq	3448(%rsp), %r8         # 8-byte Reload
	movq	3304(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$16, %eax
	movl	%eax, %ecx
	movq	3040(%rsp), %rdi        # 8-byte Reload
	movq	3600(%rsp), %rsi        # 8-byte Reload
	movq	3616(%rsp), %rdx        # 8-byte Reload
	movq	3376(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 3016(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	3016(%rsp), %r8         # 8-byte Reload
	movl	3572(%rsp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
	movq	3432(%rsp), %rdi        # 8-byte Reload
	movq	3440(%rsp), %rsi        # 8-byte Reload
	vmovsd	3136(%rsp), %xmm0       # 8-byte Reload
	movq	3416(%rsp), %rdx        # 8-byte Reload
	movq	3144(%rsp), %rcx        # 8-byte Reload
	movq	3448(%rsp), %r8         # 8-byte Reload
	movq	3304(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	3416(%rsp), %rdi        # 8-byte Reload
	movq	3440(%rsp), %rsi        # 8-byte Reload
	vmovsd	3024(%rsp), %xmm0       # 8-byte Reload
	movq	3416(%rsp), %rdx        # 8-byte Reload
	movq	3032(%rsp), %rcx        # 8-byte Reload
	movq	3448(%rsp), %r8         # 8-byte Reload
	movq	3304(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	3024(%rsp), %xmm0       # 8-byte Reload
	vmovsd	3136(%rsp), %xmm1       # 8-byte Reload
	vdivsd	%xmm1, %xmm0, %xmm2
	movq	3400(%rsp), %rdi        # 8-byte Reload
	movq	3440(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	3416(%rsp), %rdx        # 8-byte Reload
	movq	3376(%rsp), %rcx        # 8-byte Reload
	movq	3448(%rsp), %r8         # 8-byte Reload
	movq	3304(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 3008(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
.Ltmp468:
	#DEBUG_VALUE: tqlrat:s <- [RSP+3008]
	.loc	2 534 0                 # eispack.c:534:0
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str239, %eax
	movl	%eax, %ecx
	movl	$534, %eax              # imm = 0x216
	movl	%eax, %edx
	movq	%rdx, %rdi
	movq	3600(%rsp), %rsi        # 8-byte Reload
	movq	3616(%rsp), %r8         # 8-byte Reload
	movq	%rdx, 3000(%rsp)        # 8-byte Spill
	movq	%r8, %rdx
	movq	%rcx, 2992(%rsp)        # 8-byte Spill
	movq	3208(%rsp), %r8         # 8-byte Reload
	movl	3572(%rsp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
.Ltmp469:
	movq	%rsp, %rcx
	movq	$.L.str792, (%rcx)
	movq	3432(%rsp), %rdi        # 8-byte Reload
	movq	3440(%rsp), %rsi        # 8-byte Reload
	movq	3216(%rsp), %rdx        # 8-byte Reload
	movq	3416(%rsp), %rcx        # 8-byte Reload
	movq	3224(%rsp), %r8         # 8-byte Reload
	movq	3448(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	movq	%rsp, %rcx
	movq	$.L.str792, (%rcx)
	movl	$.L.str85170, %eax
	movl	%eax, %ecx
	movq	3416(%rsp), %rdi        # 8-byte Reload
	movq	3440(%rsp), %rsi        # 8-byte Reload
	movq	9216(%rsp), %rdx        # 8-byte Reload
	movq	3416(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 2984(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	2984(%rsp), %r8         # 8-byte Reload
	movq	3448(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_ptr
	movq	9216(%rsp), %rcx        # 8-byte Reload
	movq	3216(%rsp), %rdx        # 8-byte Reload
	leaq	(%rcx,%rdx,8), %rsi
	movq	%rsp, %rdi
	movq	$.L.str792, (%rdi)
	movq	3400(%rsp), %rdi        # 8-byte Reload
	movq	3440(%rsp), %r8         # 8-byte Reload
	movq	%rsi, 2976(%rsp)        # 8-byte Spill
	movq	%r8, %rsi
	movq	2976(%rsp), %rdx        # 8-byte Reload
	movq	3416(%rsp), %rcx        # 8-byte Reload
	movq	2992(%rsp), %r8         # 8-byte Reload
	movq	3448(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_ptr
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str240, %eax
	movl	%eax, %ecx
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	3600(%rsp), %rsi        # 8-byte Reload
	movq	3616(%rsp), %rdx        # 8-byte Reload
	movq	%rcx, 2968(%rsp)        # 8-byte Spill
	movq	3176(%rsp), %r8         # 8-byte Reload
	movl	3572(%rsp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
	movq	%rsp, %rcx
	movq	$.L.str792, (%rcx)
	movq	3416(%rsp), %rdi        # 8-byte Reload
	movq	3440(%rsp), %rsi        # 8-byte Reload
	movq	2976(%rsp), %rdx        # 8-byte Reload
	movq	3416(%rsp), %rcx        # 8-byte Reload
	movq	2992(%rsp), %r8         # 8-byte Reload
	movq	3448(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_ptr
	movq	9216(%rsp), %rcx        # 8-byte Reload
	movq	3216(%rsp), %rdx        # 8-byte Reload
	vmovsd	(%rcx,%rdx,8), %xmm0
	movq	3400(%rsp), %rdi        # 8-byte Reload
	movq	3440(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 2960(%rsp)       # 8-byte Spill
	movq	3416(%rsp), %rdx        # 8-byte Reload
	movq	2968(%rsp), %rcx        # 8-byte Reload
	movq	3448(%rsp), %r8         # 8-byte Reload
	movq	3304(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str241, %eax
	movl	%eax, %ecx
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	3600(%rsp), %rsi        # 8-byte Reload
	movq	3616(%rsp), %rdx        # 8-byte Reload
	movq	%rcx, 2952(%rsp)        # 8-byte Spill
	movq	3152(%rsp), %r8         # 8-byte Reload
	movl	3572(%rsp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
	movq	3432(%rsp), %rdi        # 8-byte Reload
	movq	3440(%rsp), %rsi        # 8-byte Reload
	vmovsd	2960(%rsp), %xmm0       # 8-byte Reload
	movq	3416(%rsp), %rdx        # 8-byte Reload
	movq	2968(%rsp), %rcx        # 8-byte Reload
	movq	3448(%rsp), %r8         # 8-byte Reload
	movq	3304(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	3416(%rsp), %rdi        # 8-byte Reload
	movq	3440(%rsp), %rsi        # 8-byte Reload
	vmovsd	3520(%rsp), %xmm0       # 8-byte Reload
	movq	3416(%rsp), %rdx        # 8-byte Reload
	movq	3368(%rsp), %rcx        # 8-byte Reload
	movq	3448(%rsp), %r8         # 8-byte Reload
	movq	3304(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	3520(%rsp), %xmm0       # 8-byte Reload
	vmovsd	2960(%rsp), %xmm1       # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
	movq	3400(%rsp), %rdi        # 8-byte Reload
	movq	3440(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	3416(%rsp), %rdx        # 8-byte Reload
	movq	2952(%rsp), %rcx        # 8-byte Reload
	movq	3448(%rsp), %r8         # 8-byte Reload
	movq	3304(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 2944(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str242, %eax
	movl	%eax, %ecx
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	3600(%rsp), %rsi        # 8-byte Reload
	movq	3616(%rsp), %rdx        # 8-byte Reload
	movq	%rcx, 2936(%rsp)        # 8-byte Spill
	movq	3264(%rsp), %r8         # 8-byte Reload
	movl	3572(%rsp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
	movq	3432(%rsp), %rdi        # 8-byte Reload
	movq	3440(%rsp), %rsi        # 8-byte Reload
	vmovsd	2944(%rsp), %xmm0       # 8-byte Reload
	movq	3416(%rsp), %rdx        # 8-byte Reload
	movq	2952(%rsp), %rcx        # 8-byte Reload
	movq	3448(%rsp), %r8         # 8-byte Reload
	movq	3304(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	3416(%rsp), %rdi        # 8-byte Reload
	movq	3440(%rsp), %rsi        # 8-byte Reload
	vmovsd	3008(%rsp), %xmm0       # 8-byte Reload
	movq	3416(%rsp), %rdx        # 8-byte Reload
	movq	3376(%rsp), %rcx        # 8-byte Reload
	movq	3448(%rsp), %r8         # 8-byte Reload
	movq	3304(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	3008(%rsp), %xmm0       # 8-byte Reload
	vmovsd	2944(%rsp), %xmm1       # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	3400(%rsp), %rdi        # 8-byte Reload
	movq	3440(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	3416(%rsp), %rdx        # 8-byte Reload
	movq	2936(%rsp), %rcx        # 8-byte Reload
	movq	3448(%rsp), %r8         # 8-byte Reload
	movq	3304(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 2928(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str243, %eax
	movl	%eax, %ecx
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	3600(%rsp), %rsi        # 8-byte Reload
	movq	3616(%rsp), %rdx        # 8-byte Reload
	movq	%rcx, 2920(%rsp)        # 8-byte Spill
	movq	3152(%rsp), %r8         # 8-byte Reload
	movl	3572(%rsp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
	movq	3432(%rsp), %rdi        # 8-byte Reload
	movq	3440(%rsp), %rsi        # 8-byte Reload
	vmovsd	2928(%rsp), %xmm0       # 8-byte Reload
	movq	3416(%rsp), %rdx        # 8-byte Reload
	movq	2936(%rsp), %rcx        # 8-byte Reload
	movq	3448(%rsp), %r8         # 8-byte Reload
	movq	3304(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	3416(%rsp), %rdi        # 8-byte Reload
	movq	3440(%rsp), %rsi        # 8-byte Reload
	vmovsd	3520(%rsp), %xmm0       # 8-byte Reload
	movq	3416(%rsp), %rdx        # 8-byte Reload
	movq	3368(%rsp), %rcx        # 8-byte Reload
	movq	3448(%rsp), %r8         # 8-byte Reload
	movq	3304(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	3520(%rsp), %xmm0       # 8-byte Reload
	vmovsd	2928(%rsp), %xmm1       # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
	movq	3400(%rsp), %rdi        # 8-byte Reload
	movq	3440(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	3416(%rsp), %rdx        # 8-byte Reload
	movq	2920(%rsp), %rcx        # 8-byte Reload
	movq	3448(%rsp), %r8         # 8-byte Reload
	movq	3304(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 2912(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str244, %eax
	movl	%eax, %ecx
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	3600(%rsp), %rsi        # 8-byte Reload
	movq	3616(%rsp), %rdx        # 8-byte Reload
	movq	%rcx, 2904(%rsp)        # 8-byte Spill
	movq	3208(%rsp), %r8         # 8-byte Reload
	movl	3572(%rsp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
	movq	%rsp, %rcx
	movq	$.L.str792, (%rcx)
	movq	3432(%rsp), %rdi        # 8-byte Reload
	movq	3440(%rsp), %rsi        # 8-byte Reload
	movq	3072(%rsp), %rdx        # 8-byte Reload
	movq	3416(%rsp), %rcx        # 8-byte Reload
	movq	3080(%rsp), %r8         # 8-byte Reload
	movq	3448(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	movq	%rsp, %rcx
	movq	$.L.str792, (%rcx)
	movq	3416(%rsp), %rdi        # 8-byte Reload
	movq	3440(%rsp), %rsi        # 8-byte Reload
	movq	9216(%rsp), %rdx        # 8-byte Reload
	movq	3416(%rsp), %rcx        # 8-byte Reload
	movq	2984(%rsp), %r8         # 8-byte Reload
	movq	3448(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_ptr
	movq	9216(%rsp), %rcx        # 8-byte Reload
	movq	3072(%rsp), %rdx        # 8-byte Reload
	leaq	(%rcx,%rdx,8), %rsi
	movq	%rsp, %rdi
	movq	$.L.str792, (%rdi)
	movq	3400(%rsp), %rdi        # 8-byte Reload
	movq	3440(%rsp), %r8         # 8-byte Reload
	movq	%rsi, 2896(%rsp)        # 8-byte Spill
	movq	%r8, %rsi
	movq	2896(%rsp), %rdx        # 8-byte Reload
	movq	3416(%rsp), %rcx        # 8-byte Reload
	movq	2904(%rsp), %r8         # 8-byte Reload
	movq	3448(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_ptr
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str445, %eax
	movl	%eax, %ecx
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	3600(%rsp), %rsi        # 8-byte Reload
	movq	3616(%rsp), %rdx        # 8-byte Reload
	movq	3048(%rsp), %r8         # 8-byte Reload
	movl	3572(%rsp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
	movq	%rsp, %rcx
	movq	$.L.str792, (%rcx)
	movq	3432(%rsp), %rdi        # 8-byte Reload
	movq	3440(%rsp), %rsi        # 8-byte Reload
	movq	2896(%rsp), %rdx        # 8-byte Reload
	movq	3416(%rsp), %rcx        # 8-byte Reload
	movq	2904(%rsp), %r8         # 8-byte Reload
	movq	3448(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_ptr
	movq	3416(%rsp), %rdi        # 8-byte Reload
	movq	3440(%rsp), %rsi        # 8-byte Reload
	vmovsd	2912(%rsp), %xmm0       # 8-byte Reload
	movq	3416(%rsp), %rdx        # 8-byte Reload
	movq	2920(%rsp), %rcx        # 8-byte Reload
	movq	3448(%rsp), %r8         # 8-byte Reload
	movq	3304(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	9216(%rsp), %rcx        # 8-byte Reload
	movq	3072(%rsp), %rdx        # 8-byte Reload
	vmovsd	2912(%rsp), %xmm0       # 8-byte Reload
	vmovsd	%xmm0, (%rcx,%rdx,8)
	.loc	2 535 0                 # eispack.c:535:0
	movq	%rsp, %rsi
	movl	$1, (%rsi)
	movl	$.L.str245, %eax
	movl	%eax, %esi
	movl	$535, %eax              # imm = 0x217
	movl	%eax, %edi
	movq	%rdi, 2888(%rsp)        # 8-byte Spill
	movq	3600(%rsp), %r8         # 8-byte Reload
	movq	%rsi, 2880(%rsp)        # 8-byte Spill
	movq	%r8, %rsi
	movq	3616(%rsp), %rdx        # 8-byte Reload
	movq	2880(%rsp), %rcx        # 8-byte Reload
	movq	3176(%rsp), %r8         # 8-byte Reload
	movl	3572(%rsp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
	movq	%rsp, %rcx
	movq	$.L.str792, (%rcx)
	movq	3416(%rsp), %rdi        # 8-byte Reload
	movq	3440(%rsp), %rsi        # 8-byte Reload
	movq	2976(%rsp), %rdx        # 8-byte Reload
	movq	3416(%rsp), %rcx        # 8-byte Reload
	movq	2992(%rsp), %r8         # 8-byte Reload
	movq	3448(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_ptr
	movq	9216(%rsp), %rcx        # 8-byte Reload
	movq	3216(%rsp), %rdx        # 8-byte Reload
	vmovsd	(%rcx,%rdx,8), %xmm0
	movq	3400(%rsp), %rdi        # 8-byte Reload
	movq	3440(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 2872(%rsp)       # 8-byte Spill
	movq	3416(%rsp), %rdx        # 8-byte Reload
	movq	2880(%rsp), %rcx        # 8-byte Reload
	movq	3448(%rsp), %r8         # 8-byte Reload
	movq	3304(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str248, %eax
	movl	%eax, %ecx
	movq	2888(%rsp), %rdi        # 8-byte Reload
	movq	3600(%rsp), %rsi        # 8-byte Reload
	movq	3616(%rsp), %rdx        # 8-byte Reload
	movq	%rcx, 2864(%rsp)        # 8-byte Spill
	movq	3176(%rsp), %r8         # 8-byte Reload
	movl	3572(%rsp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
	movq	%rsp, %rcx
	movq	$.L.str792, (%rcx)
	movq	3416(%rsp), %rdi        # 8-byte Reload
	movq	3440(%rsp), %rsi        # 8-byte Reload
	movq	3184(%rsp), %rdx        # 8-byte Reload
	movq	3416(%rsp), %rcx        # 8-byte Reload
	movq	3200(%rsp), %r8         # 8-byte Reload
	movq	3448(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_ptr
	movq	9208(%rsp), %rcx        # 8-byte Reload
	movq	3216(%rsp), %rdx        # 8-byte Reload
	vmovsd	(%rcx,%rdx,8), %xmm0
	movq	3400(%rsp), %rdi        # 8-byte Reload
	movq	3440(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 2856(%rsp)       # 8-byte Spill
	movq	3416(%rsp), %rdx        # 8-byte Reload
	movq	2864(%rsp), %rcx        # 8-byte Reload
	movq	3448(%rsp), %r8         # 8-byte Reload
	movq	3304(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str446, %eax
	movl	%eax, %ecx
	movq	2888(%rsp), %rdi        # 8-byte Reload
	movq	3600(%rsp), %rsi        # 8-byte Reload
	movq	3616(%rsp), %rdx        # 8-byte Reload
	movq	%rcx, 2848(%rsp)        # 8-byte Spill
	movq	3016(%rsp), %r8         # 8-byte Reload
	movl	3572(%rsp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
	movq	3432(%rsp), %rdi        # 8-byte Reload
	movq	3440(%rsp), %rsi        # 8-byte Reload
	vmovsd	3528(%rsp), %xmm0       # 8-byte Reload
	movq	3416(%rsp), %rdx        # 8-byte Reload
	movq	3352(%rsp), %rcx        # 8-byte Reload
	movq	3448(%rsp), %r8         # 8-byte Reload
	movq	3304(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	3416(%rsp), %rdi        # 8-byte Reload
	movq	3440(%rsp), %rsi        # 8-byte Reload
	vmovsd	2856(%rsp), %xmm0       # 8-byte Reload
	movq	3416(%rsp), %rdx        # 8-byte Reload
	movq	2864(%rsp), %rcx        # 8-byte Reload
	movq	3448(%rsp), %r8         # 8-byte Reload
	movq	3304(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	2856(%rsp), %xmm0       # 8-byte Reload
	vmovsd	3528(%rsp), %xmm1       # 8-byte Reload
	vdivsd	%xmm1, %xmm0, %xmm2
	movq	3400(%rsp), %rdi        # 8-byte Reload
	movq	3440(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	3416(%rsp), %rdx        # 8-byte Reload
	movq	2848(%rsp), %rcx        # 8-byte Reload
	movq	3448(%rsp), %r8         # 8-byte Reload
	movq	3304(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 2840(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str255, %eax
	movl	%eax, %ecx
	movl	$11, %eax
	movl	%eax, %r8d
	movq	2888(%rsp), %rdi        # 8-byte Reload
	movq	3600(%rsp), %rsi        # 8-byte Reload
	movq	3616(%rsp), %rdx        # 8-byte Reload
	movq	%rcx, 2832(%rsp)        # 8-byte Spill
	movl	3572(%rsp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
	movq	3432(%rsp), %rdi        # 8-byte Reload
	movq	3440(%rsp), %rsi        # 8-byte Reload
	vmovsd	2840(%rsp), %xmm0       # 8-byte Reload
	movq	3416(%rsp), %rdx        # 8-byte Reload
	movq	2848(%rsp), %rcx        # 8-byte Reload
	movq	3448(%rsp), %r8         # 8-byte Reload
	movq	3304(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	3416(%rsp), %rdi        # 8-byte Reload
	movq	3440(%rsp), %rsi        # 8-byte Reload
	vmovsd	2872(%rsp), %xmm0       # 8-byte Reload
	movq	3416(%rsp), %rdx        # 8-byte Reload
	movq	2880(%rsp), %rcx        # 8-byte Reload
	movq	3448(%rsp), %r8         # 8-byte Reload
	movq	3304(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	2872(%rsp), %xmm0       # 8-byte Reload
	vmovsd	2840(%rsp), %xmm1       # 8-byte Reload
	vsubsd	%xmm1, %xmm0, %xmm2
	movq	3400(%rsp), %rdi        # 8-byte Reload
	movq	3440(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	3416(%rsp), %rdx        # 8-byte Reload
	movq	2832(%rsp), %rcx        # 8-byte Reload
	movq	3448(%rsp), %r8         # 8-byte Reload
	movq	3304(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 2824(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
.Ltmp470:
	#DEBUG_VALUE: tqlrat:g <- [RSP+2824]
	.loc	2 536 0                 # eispack.c:536:0
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str256, %eax
	movl	%eax, %ecx
	movl	$536, %eax              # imm = 0x218
	movl	%eax, %edx
	movl	$47, %eax
	movl	%eax, %r8d
	movq	%rdx, %rdi
	movq	3600(%rsp), %rsi        # 8-byte Reload
	movq	3616(%rsp), %r9         # 8-byte Reload
	movq	%rdx, 2816(%rsp)        # 8-byte Spill
	movq	%r9, %rdx
	movq	%rcx, 2808(%rsp)        # 8-byte Spill
	movl	3572(%rsp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
.Ltmp471:
	movq	3432(%rsp), %rdi        # 8-byte Reload
	movq	3440(%rsp), %rsi        # 8-byte Reload
	vmovsd	3384(%rsp), %xmm0       # 8-byte Reload
	movq	3448(%rsp), %rdx        # 8-byte Reload
	movq	3424(%rsp), %rcx        # 8-byte Reload
	movq	3448(%rsp), %r8         # 8-byte Reload
	movq	3304(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	3416(%rsp), %rdi        # 8-byte Reload
	movq	3440(%rsp), %rsi        # 8-byte Reload
	vmovsd	2824(%rsp), %xmm0       # 8-byte Reload
	movq	3416(%rsp), %rdx        # 8-byte Reload
	movq	2832(%rsp), %rcx        # 8-byte Reload
	movq	3448(%rsp), %r8         # 8-byte Reload
	movq	3304(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
.Ltmp472:
	.loc	2 535 0                 # eispack.c:535:0
	vmovsd	2824(%rsp), %xmm0       # 8-byte Reload
	vmovsd	3384(%rsp), %xmm1       # 8-byte Reload
	vucomisd	%xmm1, %xmm0
	.loc	2 536 0                 # eispack.c:536:0
.Ltmp473:
	setnp	%al
	sete	%cl
	andb	%al, %cl
	.loc	2 538 0                 # eispack.c:538:0
.Ltmp474:
	movzbl	%cl, %ebp
	movl	%ebp, %edx
	movq	%rsp, %rsi
	movq	$.L.str792, (%rsi)
	movq	3400(%rsp), %rdi        # 8-byte Reload
	movq	3416(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 2800(%rsp)        # 8-byte Spill
	movq	3416(%rsp), %r8         # 8-byte Reload
	movb	%cl, 2799(%rsp)         # 1-byte Spill
	movq	%r8, %rcx
	movq	2808(%rsp), %r8         # 8-byte Reload
	movq	3448(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
.Ltmp475:
	.loc	2 536 0                 # eispack.c:536:0
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$50, %ebp
	movl	%ebp, %r8d
	movq	2816(%rsp), %rdi        # 8-byte Reload
	movq	3600(%rsp), %rsi        # 8-byte Reload
	movq	3616(%rsp), %rdx        # 8-byte Reload
	movq	3344(%rsp), %rcx        # 8-byte Reload
	movl	3572(%rsp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
	movl	$3, %r9d
	movl	%r9d, %edi
	movq	3440(%rsp), %rsi        # 8-byte Reload
	vmovsd	2824(%rsp), %xmm0       # 8-byte Reload
	movq	3416(%rsp), %rdx        # 8-byte Reload
	movq	2832(%rsp), %rcx        # 8-byte Reload
	movq	3448(%rsp), %r8         # 8-byte Reload
	movq	3304(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movl	$.L.str397, %ebp
	movl	%ebp, %ecx
.Ltmp476:
	#DEBUG_VALUE: tqlrat:g <- [RSP+7024]
	movq	3432(%rsp), %rdi        # 8-byte Reload
	movq	3440(%rsp), %rsi        # 8-byte Reload
	vmovsd	7024(%rsp), %xmm0       # 8-byte Reload
	movq	3416(%rsp), %rdx        # 8-byte Reload
	movq	3448(%rsp), %r8         # 8-byte Reload
	movq	3304(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
.Ltmp477:
	movq	%rsp, %rcx
	movq	$.L.str792, (%rcx)
	movq	3416(%rsp), %rdi        # 8-byte Reload
	movq	3416(%rsp), %rsi        # 8-byte Reload
	movq	2800(%rsp), %rdx        # 8-byte Reload
	movq	3416(%rsp), %rcx        # 8-byte Reload
	movq	2808(%rsp), %r8         # 8-byte Reload
	movq	3448(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	movb	2799(%rsp), %al         # 1-byte Reload
	testb	%al, %al
	vmovsd	7024(%rsp), %xmm0       # 8-byte Reload
	vmovsd	%xmm0, 2784(%rsp)       # 8-byte Spill
	jne	.LBB10_32
# BB#31:                                # %.lr.ph12
                                        #   in Loop: Header=BB10_17 Depth=3
	vmovsd	2824(%rsp), %xmm0       # 8-byte Reload
	vmovsd	%xmm0, 2784(%rsp)       # 8-byte Spill
.LBB10_32:                              # %.lr.ph12
                                        #   in Loop: Header=BB10_17 Depth=3
	vmovsd	2784(%rsp), %xmm0       # 8-byte Reload
.Ltmp478:
	.loc	2 540 0                 # eispack.c:540:0
	movq	3504(%rsp), %rdi        # 8-byte Reload
	movq	3736(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 2776(%rsp)       # 8-byte Spill
	movq	3552(%rsp), %rdx        # 8-byte Reload
	movq	3640(%rsp), %rcx        # 8-byte Reload
	movq	3624(%rsp), %r8         # 8-byte Reload
	movq	3584(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	3664(%rsp), %rdi        # 8-byte Reload
	movq	3480(%rsp), %rsi        # 8-byte Reload
	movq	3536(%rsp), %rdx        # 8-byte Reload
	movq	3680(%rsp), %rcx        # 8-byte Reload
	movq	3632(%rsp), %r8         # 8-byte Reload
	movl	3492(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3544(%rsp), %rdi        # 8-byte Reload
	movq	3736(%rsp), %rsi        # 8-byte Reload
	vmovsd	2776(%rsp), %xmm0       # 8-byte Reload
	movq	3552(%rsp), %rdx        # 8-byte Reload
	movq	3640(%rsp), %rcx        # 8-byte Reload
	movq	3624(%rsp), %r8         # 8-byte Reload
	movq	3584(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	3552(%rsp), %rdi        # 8-byte Reload
	movq	3736(%rsp), %rsi        # 8-byte Reload
	vmovsd	3248(%rsp), %xmm0       # 8-byte Reload
	movq	3552(%rsp), %rdx        # 8-byte Reload
	movq	3648(%rsp), %rcx        # 8-byte Reload
	movq	3624(%rsp), %r8         # 8-byte Reload
	movq	3584(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	3248(%rsp), %xmm0       # 8-byte Reload
	vmovsd	2776(%rsp), %xmm1       # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	3504(%rsp), %rdi        # 8-byte Reload
	movq	3736(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	3552(%rsp), %rdx        # 8-byte Reload
	movq	3680(%rsp), %rcx        # 8-byte Reload
	movq	3624(%rsp), %r8         # 8-byte Reload
	movq	3584(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 2768(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	3664(%rsp), %rdi        # 8-byte Reload
	movq	3480(%rsp), %rsi        # 8-byte Reload
	movq	3536(%rsp), %rdx        # 8-byte Reload
	movq	3688(%rsp), %rcx        # 8-byte Reload
	movq	3656(%rsp), %r8         # 8-byte Reload
	movl	3492(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3544(%rsp), %rdi        # 8-byte Reload
	movq	3736(%rsp), %rsi        # 8-byte Reload
	vmovsd	3136(%rsp), %xmm0       # 8-byte Reload
	movq	3552(%rsp), %rdx        # 8-byte Reload
	movq	3672(%rsp), %rcx        # 8-byte Reload
	movq	3624(%rsp), %r8         # 8-byte Reload
	movq	3584(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	3552(%rsp), %rdi        # 8-byte Reload
	movq	3736(%rsp), %rsi        # 8-byte Reload
	vmovsd	2768(%rsp), %xmm0       # 8-byte Reload
	movq	3552(%rsp), %rdx        # 8-byte Reload
	movq	3680(%rsp), %rcx        # 8-byte Reload
	movq	3624(%rsp), %r8         # 8-byte Reload
	movq	3584(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	2768(%rsp), %xmm0       # 8-byte Reload
	vmovsd	3136(%rsp), %xmm1       # 8-byte Reload
	vdivsd	%xmm1, %xmm0, %xmm2
	movq	3504(%rsp), %rdi        # 8-byte Reload
	movq	3736(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	3552(%rsp), %rdx        # 8-byte Reload
	movq	3688(%rsp), %rcx        # 8-byte Reload
	movq	3624(%rsp), %r8         # 8-byte Reload
	movq	3584(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 2760(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
.Ltmp479:
	#DEBUG_VALUE: tqlrat:h <- [RSP+2760]
	.loc	2 527 0                 # eispack.c:527:0
	movq	3472(%rsp), %rdi        # 8-byte Reload
	movq	3480(%rsp), %rsi        # 8-byte Reload
	movq	3536(%rsp), %rdx        # 8-byte Reload
	movq	3728(%rsp), %rcx        # 8-byte Reload
	movq	3696(%rsp), %r8         # 8-byte Reload
	movl	3492(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3544(%rsp), %rdi        # 8-byte Reload
	movq	3736(%rsp), %rsi        # 8-byte Reload
	movq	3552(%rsp), %rdx        # 8-byte Reload
	movq	3624(%rsp), %rcx        # 8-byte Reload
	movq	3704(%rsp), %r8         # 8-byte Reload
	movq	3624(%rsp), %r9         # 8-byte Reload
	movq	3584(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3552(%rsp), %rdi        # 8-byte Reload
	movq	3736(%rsp), %rsi        # 8-byte Reload
	movq	3776(%rsp), %rdx        # 8-byte Reload
	movq	3552(%rsp), %rcx        # 8-byte Reload
	movq	3712(%rsp), %r8         # 8-byte Reload
	movq	3624(%rsp), %r9         # 8-byte Reload
	movq	3584(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3776(%rsp), %rax        # 8-byte Reload
	addq	$1, %rax
	movq	3504(%rsp), %rdi        # 8-byte Reload
	movq	3736(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	3552(%rsp), %rcx        # 8-byte Reload
	movq	3728(%rsp), %r8         # 8-byte Reload
	movq	3624(%rsp), %r9         # 8-byte Reload
	movq	3584(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 2752(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	3472(%rsp), %rdi        # 8-byte Reload
	movq	3480(%rsp), %rsi        # 8-byte Reload
	movq	3536(%rsp), %rdx        # 8-byte Reload
	movq	3760(%rsp), %rcx        # 8-byte Reload
	movq	3720(%rsp), %r8         # 8-byte Reload
	movl	3492(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3552(%rsp), %rdi        # 8-byte Reload
	movq	3736(%rsp), %rsi        # 8-byte Reload
	movq	2752(%rsp), %rdx        # 8-byte Reload
	movq	3552(%rsp), %rcx        # 8-byte Reload
	movq	3728(%rsp), %r8         # 8-byte Reload
	movq	3624(%rsp), %r9         # 8-byte Reload
	movq	3584(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2752(%rsp), %rax        # 8-byte Reload
	movl	%eax, %r11d
	movl	%r11d, %ebx
	movl	%ebx, %edx
	movq	3504(%rsp), %rdi        # 8-byte Reload
	movq	3768(%rsp), %rsi        # 8-byte Reload
	movq	3552(%rsp), %rcx        # 8-byte Reload
	movq	3760(%rsp), %r8         # 8-byte Reload
	movq	3624(%rsp), %r9         # 8-byte Reload
	movq	3584(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%r11d, 2748(%rsp)       # 4-byte Spill
	callq	trace_logger_log_int
	movq	3472(%rsp), %rdi        # 8-byte Reload
	movq	3480(%rsp), %rsi        # 8-byte Reload
	movq	3536(%rsp), %rdx        # 8-byte Reload
	movq	3560(%rsp), %rcx        # 8-byte Reload
	movq	3744(%rsp), %r8         # 8-byte Reload
	movl	3492(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	5792(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %r11d
	movl	%r11d, %edx
	movq	3544(%rsp), %rdi        # 8-byte Reload
	movq	3768(%rsp), %rsi        # 8-byte Reload
	movq	3552(%rsp), %rcx        # 8-byte Reload
	movq	3752(%rsp), %r8         # 8-byte Reload
	movq	3624(%rsp), %r9         # 8-byte Reload
	movq	3584(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	2748(%rsp), %r11d       # 4-byte Reload
	movl	%r11d, %ebx
	movl	%ebx, %edx
	movq	3552(%rsp), %rdi        # 8-byte Reload
	movq	3768(%rsp), %rsi        # 8-byte Reload
	movq	3552(%rsp), %rcx        # 8-byte Reload
	movq	3760(%rsp), %r8         # 8-byte Reload
	movq	3624(%rsp), %r9         # 8-byte Reload
	movq	3584(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	2748(%rsp), %r11d       # 4-byte Reload
	movl	5792(%rsp), %ebx        # 4-byte Reload
	cmpl	%ebx, %r11d
	sete	%bpl
	movb	%bpl, %r14b
	andb	$1, %r14b
	movzbl	%r14b, %r15d
	movl	%r15d, %edx
	movq	3504(%rsp), %rdi        # 8-byte Reload
	movq	3552(%rsp), %rsi        # 8-byte Reload
	movq	3552(%rsp), %rcx        # 8-byte Reload
	movq	3560(%rsp), %r8         # 8-byte Reload
	movq	3624(%rsp), %r9         # 8-byte Reload
	movq	3584(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	movb	%bpl, 2747(%rsp)        # 1-byte Spill
	callq	trace_logger_log_int
	movq	3472(%rsp), %rdi        # 8-byte Reload
	movq	3480(%rsp), %rsi        # 8-byte Reload
	movq	3536(%rsp), %rdx        # 8-byte Reload
	movq	3496(%rsp), %rcx        # 8-byte Reload
	movq	3544(%rsp), %r8         # 8-byte Reload
	movl	3492(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3464(%rsp), %rdi        # 8-byte Reload
	movq	3624(%rsp), %rsi        # 8-byte Reload
	movq	3624(%rsp), %rdx        # 8-byte Reload
	movq	3552(%rsp), %rcx        # 8-byte Reload
	movq	3456(%rsp), %r8         # 8-byte Reload
	movq	3624(%rsp), %r9         # 8-byte Reload
	movq	3584(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3544(%rsp), %rdi        # 8-byte Reload
	movq	3624(%rsp), %rsi        # 8-byte Reload
	movq	3624(%rsp), %rdx        # 8-byte Reload
	movq	3552(%rsp), %rcx        # 8-byte Reload
	movq	3536(%rsp), %r8         # 8-byte Reload
	movq	3624(%rsp), %r9         # 8-byte Reload
	movq	3584(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movb	2747(%rsp), %bpl        # 1-byte Reload
	andb	$1, %bpl
	movzbl	%bpl, %r11d
	movl	%r11d, %edx
	movq	3552(%rsp), %rdi        # 8-byte Reload
	movq	3552(%rsp), %rsi        # 8-byte Reload
	movq	3552(%rsp), %rcx        # 8-byte Reload
	movq	3560(%rsp), %r8         # 8-byte Reload
	movq	3624(%rsp), %r9         # 8-byte Reload
	movq	3584(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movb	2747(%rsp), %bpl        # 1-byte Reload
	testb	$1, %bpl
	movq	2752(%rsp), %rax        # 8-byte Reload
	vmovsd	3008(%rsp), %xmm0       # 8-byte Reload
	vmovsd	2760(%rsp), %xmm1       # 8-byte Reload
	vmovsd	2776(%rsp), %xmm2       # 8-byte Reload
	movq	%rax, 3808(%rsp)        # 8-byte Spill
	vmovsd	%xmm0, 3800(%rsp)       # 8-byte Spill
	vmovsd	%xmm1, 3792(%rsp)       # 8-byte Spill
	vmovsd	%xmm2, 3784(%rsp)       # 8-byte Spill
	jne	.LBB10_18
	jmp	.LBB10_17
.Ltmp480:
.LBB10_18:                              # %._crit_edge13
                                        #   in Loop: Header=BB10_12 Depth=2
	vmovsd	3784(%rsp), %xmm0       # 8-byte Reload
	vmovsd	3792(%rsp), %xmm1       # 8-byte Reload
	vmovsd	3800(%rsp), %xmm2       # 8-byte Reload
	movabsq	$1, %rax
	leaq	.L.str260, %rcx
	movabsq	$0, %rdx
	leaq	.L.str792, %rsi
	movabsq	$2, %rdi
	leaq	.L.str455, %r8
	movabsq	$3, %r9
	leaq	.L.str417, %r10
	movabsq	$547, %r11              # imm = 0x223
	leaq	.L.str61146, %rbx
	leaq	.L.str436, %r14
	leaq	.L.str454, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	vxorps	%xmm3, %xmm3, %xmm3
	movq	%rax, 2736(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 2728(%rsp)        # 8-byte Spill
	leaq	.L.str192, %rax
	movq	%rax, 2720(%rsp)        # 8-byte Spill
	leaq	.L.str1499, %rax
	movq	%rax, 2712(%rsp)        # 8-byte Spill
	movabsq	$47, %rax
	movq	%rax, 2704(%rsp)        # 8-byte Spill
	leaq	.L.str34119, %rax
	movq	%rax, 2696(%rsp)        # 8-byte Spill
	movabsq	$543, %rax              # imm = 0x21F
	movq	%rax, 2688(%rsp)        # 8-byte Spill
	leaq	.L.str453, %rax
	movq	%rax, 2680(%rsp)        # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, 2672(%rsp)        # 8-byte Spill
	leaq	.L.str259, %rax
	movq	%rax, 2664(%rsp)        # 8-byte Spill
	leaq	.L.str36121, %rax
	movq	%rax, 2656(%rsp)        # 8-byte Spill
	movabsq	$542, %rax              # imm = 0x21E
	movq	%rax, 2648(%rsp)        # 8-byte Spill
	leaq	.L.str452, %rax
	movq	%rax, 2640(%rsp)        # 8-byte Spill
	leaq	.L.str451, %rax
	movq	%rax, 2632(%rsp)        # 8-byte Spill
	leaq	.L.str450, %rax
	movq	%rax, 2624(%rsp)        # 8-byte Spill
	movabsq	$13, %rax
	movq	%rax, 2616(%rsp)        # 8-byte Spill
	leaq	.L.str429, %rax
	movq	%rax, 2608(%rsp)        # 8-byte Spill
	leaq	.L.str434, %rax
	movq	%rax, 2600(%rsp)        # 8-byte Spill
	leaq	.L.str443, %rax
	movq	%rax, 2592(%rsp)        # 8-byte Spill
	leaq	.L.str437, %rax
	movq	%rax, 2584(%rsp)        # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 2576(%rsp)        # 8-byte Spill
	movabsq	$48, %rax
	movq	%rax, 2568(%rsp)        # 8-byte Spill
	leaq	.L.str258, %rax
	movq	%rax, 2560(%rsp)        # 8-byte Spill
	leaq	.L.str238, %rax
	.loc	2 542 0                 # eispack.c:542:0
	movq	%rax, 2552(%rsp)        # 8-byte Spill
	movq	2576(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 2544(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 2536(%rsp)        # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, 2528(%rsp)        # 8-byte Spill
	movq	%r14, %rdx
	movq	2624(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 2520(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	2568(%rsp), %rax        # 8-byte Reload
	movq	%r8, 2512(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 2504(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	vmovsd	%xmm0, 2496(%rsp)       # 8-byte Spill
	vmovsd	%xmm1, 2488(%rsp)       # 8-byte Spill
	vmovsd	%xmm2, 2480(%rsp)       # 8-byte Spill
	movl	%ebp, 2476(%rsp)        # 4-byte Spill
	movl	%r12d, 2472(%rsp)       # 4-byte Spill
	movq	%r13, 2464(%rsp)        # 8-byte Spill
	vmovsd	%xmm3, 2456(%rsp)       # 8-byte Spill
	movq	%r15, 2448(%rsp)        # 8-byte Spill
	movq	%r14, 2440(%rsp)        # 8-byte Spill
	movq	%r10, 2432(%rsp)        # 8-byte Spill
	movq	%r11, 2424(%rsp)        # 8-byte Spill
	movq	%rbx, 2416(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	2544(%rsp), %rdi        # 8-byte Reload
	movq	2728(%rsp), %rsi        # 8-byte Reload
	movq	2528(%rsp), %rdx        # 8-byte Reload
	movq	2736(%rsp), %rcx        # 8-byte Reload
	movq	2552(%rsp), %r8         # 8-byte Reload
	movq	2736(%rsp), %r9         # 8-byte Reload
	movq	2584(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2736(%rsp), %rdi        # 8-byte Reload
	movq	2728(%rsp), %rsi        # 8-byte Reload
	vmovsd	2456(%rsp), %xmm0       # 8-byte Reload
	movq	2528(%rsp), %rdx        # 8-byte Reload
	movq	2712(%rsp), %rcx        # 8-byte Reload
	movq	2736(%rsp), %r8         # 8-byte Reload
	movq	2608(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	2464(%rsp), %rdi        # 8-byte Reload
	movq	2728(%rsp), %rsi        # 8-byte Reload
	vmovsd	2480(%rsp), %xmm0       # 8-byte Reload
	movq	2736(%rsp), %rdx        # 8-byte Reload
	movq	2624(%rsp), %rcx        # 8-byte Reload
	movq	2528(%rsp), %r8         # 8-byte Reload
	movq	2608(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	2576(%rsp), %rdi        # 8-byte Reload
	movq	2416(%rsp), %rsi        # 8-byte Reload
	movq	2440(%rsp), %rdx        # 8-byte Reload
	movq	2720(%rsp), %rcx        # 8-byte Reload
	movq	2568(%rsp), %r8         # 8-byte Reload
	movl	2476(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2544(%rsp), %rdi        # 8-byte Reload
	movq	2728(%rsp), %rsi        # 8-byte Reload
	movq	2528(%rsp), %rdx        # 8-byte Reload
	movq	2736(%rsp), %rcx        # 8-byte Reload
	movq	2560(%rsp), %r8         # 8-byte Reload
	movq	2736(%rsp), %r9         # 8-byte Reload
	movq	2584(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2736(%rsp), %rdi        # 8-byte Reload
	movq	2728(%rsp), %rsi        # 8-byte Reload
	movq	2528(%rsp), %rdx        # 8-byte Reload
	movq	2736(%rsp), %rcx        # 8-byte Reload
	movq	2600(%rsp), %r8         # 8-byte Reload
	movq	2736(%rsp), %r9         # 8-byte Reload
	movq	2608(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2464(%rsp), %rdi        # 8-byte Reload
	movq	2728(%rsp), %rsi        # 8-byte Reload
	vmovsd	2488(%rsp), %xmm0       # 8-byte Reload
	movq	2736(%rsp), %rdx        # 8-byte Reload
	movq	2720(%rsp), %rcx        # 8-byte Reload
	movq	2528(%rsp), %r8         # 8-byte Reload
	movq	2608(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	2576(%rsp), %rdi        # 8-byte Reload
	movq	2416(%rsp), %rsi        # 8-byte Reload
	movq	2440(%rsp), %rdx        # 8-byte Reload
	movq	2632(%rsp), %rcx        # 8-byte Reload
	movq	2568(%rsp), %r8         # 8-byte Reload
	movl	2476(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2544(%rsp), %rdi        # 8-byte Reload
	movq	2728(%rsp), %rsi        # 8-byte Reload
	movq	2528(%rsp), %rdx        # 8-byte Reload
	movq	2736(%rsp), %rcx        # 8-byte Reload
	movq	2592(%rsp), %r8         # 8-byte Reload
	movq	2736(%rsp), %r9         # 8-byte Reload
	movq	2584(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2736(%rsp), %rdi        # 8-byte Reload
	movq	2728(%rsp), %rsi        # 8-byte Reload
	movq	2528(%rsp), %rdx        # 8-byte Reload
	movq	2736(%rsp), %rcx        # 8-byte Reload
	movq	2600(%rsp), %r8         # 8-byte Reload
	movq	2736(%rsp), %r9         # 8-byte Reload
	movq	2608(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2464(%rsp), %rdi        # 8-byte Reload
	movq	2728(%rsp), %rsi        # 8-byte Reload
	vmovsd	2496(%rsp), %xmm0       # 8-byte Reload
	movq	2736(%rsp), %rdx        # 8-byte Reload
	movq	2632(%rsp), %rcx        # 8-byte Reload
	movq	2528(%rsp), %r8         # 8-byte Reload
	movq	2608(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	2648(%rsp), %rdi        # 8-byte Reload
	movq	2416(%rsp), %rsi        # 8-byte Reload
	movq	2440(%rsp), %rdx        # 8-byte Reload
	movq	2664(%rsp), %rcx        # 8-byte Reload
	movq	2616(%rsp), %r8         # 8-byte Reload
	movl	2476(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2544(%rsp), %rdi        # 8-byte Reload
	movq	2728(%rsp), %rsi        # 8-byte Reload
	vmovsd	2480(%rsp), %xmm0       # 8-byte Reload
	movq	2736(%rsp), %rdx        # 8-byte Reload
	movq	2624(%rsp), %rcx        # 8-byte Reload
	movq	2528(%rsp), %r8         # 8-byte Reload
	movq	2536(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	2736(%rsp), %rdi        # 8-byte Reload
	movq	2728(%rsp), %rsi        # 8-byte Reload
	vmovsd	2496(%rsp), %xmm0       # 8-byte Reload
	movq	2736(%rsp), %rdx        # 8-byte Reload
	movq	2632(%rsp), %rcx        # 8-byte Reload
	movq	2528(%rsp), %r8         # 8-byte Reload
	movq	2536(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	2496(%rsp), %xmm0       # 8-byte Reload
	vmovsd	2480(%rsp), %xmm1       # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	2464(%rsp), %rdi        # 8-byte Reload
	movq	2728(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	2736(%rsp), %rdx        # 8-byte Reload
	movq	2664(%rsp), %rcx        # 8-byte Reload
	movq	2528(%rsp), %r8         # 8-byte Reload
	movq	2536(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 2408(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	2648(%rsp), %rdi        # 8-byte Reload
	movq	2416(%rsp), %rsi        # 8-byte Reload
	movq	2440(%rsp), %rdx        # 8-byte Reload
	movq	2640(%rsp), %rcx        # 8-byte Reload
	movq	2672(%rsp), %r8         # 8-byte Reload
	movl	2476(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2544(%rsp), %rdi        # 8-byte Reload
	movq	2728(%rsp), %rsi        # 8-byte Reload
	movq	7464(%rsp), %rdx        # 8-byte Reload
	movq	2736(%rsp), %rcx        # 8-byte Reload
	movq	2656(%rsp), %r8         # 8-byte Reload
	movq	2528(%rsp), %r9         # 8-byte Reload
	movq	2536(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2736(%rsp), %rdi        # 8-byte Reload
	movq	2728(%rsp), %rsi        # 8-byte Reload
	vmovsd	2408(%rsp), %xmm0       # 8-byte Reload
	movq	2736(%rsp), %rdx        # 8-byte Reload
	movq	2664(%rsp), %rcx        # 8-byte Reload
	movq	2528(%rsp), %r8         # 8-byte Reload
	movq	2536(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	7464(%rsp), %rax        # 8-byte Reload
	vmovsd	2408(%rsp), %xmm0       # 8-byte Reload
	vmovsd	%xmm0, (%rax)
	.loc	2 543 0                 # eispack.c:543:0
	movq	2688(%rsp), %rdi        # 8-byte Reload
	movq	2416(%rsp), %rsi        # 8-byte Reload
	movq	2440(%rsp), %rdx        # 8-byte Reload
	movq	2680(%rsp), %rcx        # 8-byte Reload
	movq	2672(%rsp), %r8         # 8-byte Reload
	movl	2476(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2544(%rsp), %rdi        # 8-byte Reload
	movq	2728(%rsp), %rsi        # 8-byte Reload
	movq	7488(%rsp), %rdx        # 8-byte Reload
	movq	2736(%rsp), %rcx        # 8-byte Reload
	movq	2696(%rsp), %r8         # 8-byte Reload
	movq	2528(%rsp), %r9         # 8-byte Reload
	movq	2536(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2736(%rsp), %rdi        # 8-byte Reload
	movq	2728(%rsp), %rsi        # 8-byte Reload
	vmovsd	2488(%rsp), %xmm0       # 8-byte Reload
	movq	2736(%rsp), %rdx        # 8-byte Reload
	movq	2720(%rsp), %rcx        # 8-byte Reload
	movq	2528(%rsp), %r8         # 8-byte Reload
	movq	2536(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	7488(%rsp), %rax        # 8-byte Reload
	vmovsd	2488(%rsp), %xmm0       # 8-byte Reload
	vmovsd	%xmm0, (%rax)
	.loc	2 547 0                 # eispack.c:547:0
.Ltmp481:
	movq	2424(%rsp), %rdi        # 8-byte Reload
	movq	2416(%rsp), %rsi        # 8-byte Reload
	movq	2440(%rsp), %rdx        # 8-byte Reload
	movq	2520(%rsp), %rcx        # 8-byte Reload
	movq	2704(%rsp), %r8         # 8-byte Reload
	movl	2476(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2544(%rsp), %rdi        # 8-byte Reload
	movq	2728(%rsp), %rsi        # 8-byte Reload
	vmovsd	2456(%rsp), %xmm0       # 8-byte Reload
	movq	2528(%rsp), %rdx        # 8-byte Reload
	movq	2712(%rsp), %rcx        # 8-byte Reload
	movq	2528(%rsp), %r8         # 8-byte Reload
	movq	2536(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	2736(%rsp), %rdi        # 8-byte Reload
	movq	2728(%rsp), %rsi        # 8-byte Reload
	vmovsd	2488(%rsp), %xmm0       # 8-byte Reload
	movq	2736(%rsp), %rdx        # 8-byte Reload
	movq	2720(%rsp), %rcx        # 8-byte Reload
	movq	2528(%rsp), %r8         # 8-byte Reload
	movq	2536(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	2488(%rsp), %xmm0       # 8-byte Reload
	vmovsd	2456(%rsp), %xmm1       # 8-byte Reload
	vucomisd	%xmm1, %xmm0
	sete	%al
	setnp	%cl
	andb	%al, %cl
	movb	%cl, %al
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	2464(%rsp), %rdi        # 8-byte Reload
	movq	2736(%rsp), %rsi        # 8-byte Reload
	movq	2736(%rsp), %r8         # 8-byte Reload
	movb	%cl, 2407(%rsp)         # 1-byte Spill
	movq	%r8, %rcx
	movq	2520(%rsp), %r8         # 8-byte Reload
	movq	2528(%rsp), %r9         # 8-byte Reload
	movq	2536(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	2424(%rsp), %rdi        # 8-byte Reload
	movq	2416(%rsp), %rsi        # 8-byte Reload
	movq	2440(%rsp), %rdx        # 8-byte Reload
	movq	2448(%rsp), %rcx        # 8-byte Reload
	movq	2544(%rsp), %r8         # 8-byte Reload
	movl	2476(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2504(%rsp), %rdi        # 8-byte Reload
	movq	2528(%rsp), %rsi        # 8-byte Reload
	movq	2528(%rsp), %rdx        # 8-byte Reload
	movq	2736(%rsp), %rcx        # 8-byte Reload
	movq	2432(%rsp), %r8         # 8-byte Reload
	movq	2528(%rsp), %r9         # 8-byte Reload
	movq	2536(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	2544(%rsp), %rdi        # 8-byte Reload
	movq	2528(%rsp), %rsi        # 8-byte Reload
	movq	2528(%rsp), %rdx        # 8-byte Reload
	movq	2736(%rsp), %rcx        # 8-byte Reload
	movq	2512(%rsp), %r8         # 8-byte Reload
	movq	2528(%rsp), %r9         # 8-byte Reload
	movq	2536(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	2407(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	2736(%rsp), %rdi        # 8-byte Reload
	movq	2736(%rsp), %rsi        # 8-byte Reload
	movq	2736(%rsp), %rcx        # 8-byte Reload
	movq	2520(%rsp), %r8         # 8-byte Reload
	movq	2528(%rsp), %r9         # 8-byte Reload
	movq	2536(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	2407(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	vmovsd	3888(%rsp), %xmm0       # 8-byte Reload
	vmovsd	%xmm0, 6176(%rsp)       # 8-byte Spill
	jne	.LBB10_21
.Ltmp482:
# BB#19:                                #   in Loop: Header=BB10_12 Depth=2
	movabsq	$1, %rax
	leaq	.L.str275, %rcx
	movabsq	$0, %rdx
	leaq	.L.str792, %rsi
	movabsq	$2, %rdi
	leaq	.L.str417, %r8
	movabsq	$3, %r9
	leaq	.L.str420, %r10
	movabsq	$552, %r11              # imm = 0x228
	leaq	.L.str61146, %rbx
	leaq	.L.str455, %r14
	leaq	.L.str456, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 2392(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 2384(%rsp)        # 8-byte Spill
	leaq	.L.str262, %rax
	movq	%rax, 2376(%rsp)        # 8-byte Spill
	leaq	.L.str264, %rax
	movq	%rax, 2368(%rsp)        # 8-byte Spill
	movabsq	$47, %rax
	movq	%rax, 2360(%rsp)        # 8-byte Spill
	leaq	.L.str263, %rax
	movq	%rax, 2352(%rsp)        # 8-byte Spill
	leaq	fabs, %rax
	movq	%rax, 2344(%rsp)        # 8-byte Spill
	leaq	.L.str691, %rax
	movq	%rax, 2336(%rsp)        # 8-byte Spill
	movabsq	$49, %rax
	movq	%rax, 2328(%rsp)        # 8-byte Spill
	leaq	.L.str402, %rax
	movq	%rax, 2320(%rsp)        # 8-byte Spill
	leaq	.L.str192, %rax
	movq	%rax, 2312(%rsp)        # 8-byte Spill
	movabsq	$16, %rax
	movq	%rax, 2304(%rsp)        # 8-byte Spill
	leaq	.L.str261, %rax
	movq	%rax, 2296(%rsp)        # 8-byte Spill
	leaq	.L.str36121, %rax
	movq	%rax, 2288(%rsp)        # 8-byte Spill
	movabsq	$27, %rax
	.loc	2 552 0                 # eispack.c:552:0
.Ltmp483:
	movq	%rdi, 2280(%rsp)        # 8-byte Spill
	movq	%r11, %rdi
	movq	%rsi, 2272(%rsp)        # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, 2264(%rsp)        # 8-byte Spill
	movq	%r14, %rdx
	movq	%rax, 2256(%rsp)        # 8-byte Spill
	movq	2296(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 2248(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	2256(%rsp), %rax        # 8-byte Reload
	movq	%r8, 2240(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 2232(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r15, 2224(%rsp)        # 8-byte Spill
	movl	%ebp, 2220(%rsp)        # 4-byte Spill
	movl	%r12d, 2216(%rsp)       # 4-byte Spill
	movq	%r13, 2208(%rsp)        # 8-byte Spill
	movq	%r14, 2200(%rsp)        # 8-byte Spill
	movq	%rbx, 2192(%rsp)        # 8-byte Spill
	movq	%r10, 2184(%rsp)        # 8-byte Spill
	movq	%r11, 2176(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	2392(%rsp), %rdi        # 8-byte Reload
	movq	2384(%rsp), %rsi        # 8-byte Reload
	movq	7464(%rsp), %rdx        # 8-byte Reload
	movq	2392(%rsp), %rcx        # 8-byte Reload
	movq	2288(%rsp), %r8         # 8-byte Reload
	movq	2264(%rsp), %r9         # 8-byte Reload
	movq	2272(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	7464(%rsp), %rax        # 8-byte Reload
	vmovsd	(%rax), %xmm0
	movq	2208(%rsp), %rdi        # 8-byte Reload
	movq	2384(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 2168(%rsp)       # 8-byte Spill
	movq	2392(%rsp), %rdx        # 8-byte Reload
	movq	2296(%rsp), %rcx        # 8-byte Reload
	movq	2264(%rsp), %r8         # 8-byte Reload
	movq	2272(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	2176(%rsp), %rdi        # 8-byte Reload
	movq	2192(%rsp), %rsi        # 8-byte Reload
	movq	2200(%rsp), %rdx        # 8-byte Reload
	movq	2376(%rsp), %rcx        # 8-byte Reload
	movq	2328(%rsp), %r8         # 8-byte Reload
	movl	2220(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2280(%rsp), %rdi        # 8-byte Reload
	movq	2384(%rsp), %rsi        # 8-byte Reload
	movq	2344(%rsp), %rdx        # 8-byte Reload
	movq	2392(%rsp), %rcx        # 8-byte Reload
	movq	2336(%rsp), %r8         # 8-byte Reload
	movq	2264(%rsp), %r9         # 8-byte Reload
	movq	2272(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2392(%rsp), %rdi        # 8-byte Reload
	movq	2384(%rsp), %rsi        # 8-byte Reload
	vmovsd	2168(%rsp), %xmm0       # 8-byte Reload
	movq	2392(%rsp), %rdx        # 8-byte Reload
	movq	2296(%rsp), %rcx        # 8-byte Reload
	movq	2264(%rsp), %r8         # 8-byte Reload
	movq	2272(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	.LCPI10_0(%rip), %xmm0
	vmovsd	2168(%rsp), %xmm1       # 8-byte Reload
	vandpd	%xmm0, %xmm1, %xmm0
	movq	2208(%rsp), %rdi        # 8-byte Reload
	movq	2384(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 2160(%rsp)       # 8-byte Spill
	movq	2392(%rsp), %rdx        # 8-byte Reload
	movq	2376(%rsp), %rcx        # 8-byte Reload
	movq	2264(%rsp), %r8         # 8-byte Reload
	movq	2272(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	2176(%rsp), %rdi        # 8-byte Reload
	movq	2192(%rsp), %rsi        # 8-byte Reload
	movq	2200(%rsp), %rdx        # 8-byte Reload
	movq	2352(%rsp), %rcx        # 8-byte Reload
	movq	2304(%rsp), %r8         # 8-byte Reload
	movl	2220(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2280(%rsp), %rdi        # 8-byte Reload
	movq	2384(%rsp), %rsi        # 8-byte Reload
	vmovsd	2488(%rsp), %xmm0       # 8-byte Reload
	movq	2392(%rsp), %rdx        # 8-byte Reload
	movq	2312(%rsp), %rcx        # 8-byte Reload
	movq	2264(%rsp), %r8         # 8-byte Reload
	movq	2272(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	2392(%rsp), %rdi        # 8-byte Reload
	movq	2384(%rsp), %rsi        # 8-byte Reload
	vmovsd	7016(%rsp), %xmm0       # 8-byte Reload
	movq	2392(%rsp), %rdx        # 8-byte Reload
	movq	2320(%rsp), %rcx        # 8-byte Reload
	movq	2264(%rsp), %r8         # 8-byte Reload
	movq	2272(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	7016(%rsp), %xmm0       # 8-byte Reload
	vmovsd	2488(%rsp), %xmm1       # 8-byte Reload
	vdivsd	%xmm1, %xmm0, %xmm2
	movq	2208(%rsp), %rdi        # 8-byte Reload
	movq	2384(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	2392(%rsp), %rdx        # 8-byte Reload
	movq	2352(%rsp), %rcx        # 8-byte Reload
	movq	2264(%rsp), %r8         # 8-byte Reload
	movq	2272(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 2152(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	2176(%rsp), %rdi        # 8-byte Reload
	movq	2192(%rsp), %rsi        # 8-byte Reload
	movq	2200(%rsp), %rdx        # 8-byte Reload
	movq	2368(%rsp), %rcx        # 8-byte Reload
	movq	2328(%rsp), %r8         # 8-byte Reload
	movl	2220(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2280(%rsp), %rdi        # 8-byte Reload
	movq	2384(%rsp), %rsi        # 8-byte Reload
	movq	2344(%rsp), %rdx        # 8-byte Reload
	movq	2392(%rsp), %rcx        # 8-byte Reload
	movq	2336(%rsp), %r8         # 8-byte Reload
	movq	2264(%rsp), %r9         # 8-byte Reload
	movq	2272(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2392(%rsp), %rdi        # 8-byte Reload
	movq	2384(%rsp), %rsi        # 8-byte Reload
	vmovsd	2152(%rsp), %xmm0       # 8-byte Reload
	movq	2392(%rsp), %rdx        # 8-byte Reload
	movq	2352(%rsp), %rcx        # 8-byte Reload
	movq	2264(%rsp), %r8         # 8-byte Reload
	movq	2272(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	.LCPI10_0(%rip), %xmm0
	vmovsd	2152(%rsp), %xmm1       # 8-byte Reload
	vandpd	%xmm0, %xmm1, %xmm0
	movq	2208(%rsp), %rdi        # 8-byte Reload
	movq	2384(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 2144(%rsp)       # 8-byte Spill
	movq	2392(%rsp), %rdx        # 8-byte Reload
	movq	2368(%rsp), %rcx        # 8-byte Reload
	movq	2264(%rsp), %r8         # 8-byte Reload
	movq	2272(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	2176(%rsp), %rdi        # 8-byte Reload
	movq	2192(%rsp), %rsi        # 8-byte Reload
	movq	2200(%rsp), %rdx        # 8-byte Reload
	movq	2248(%rsp), %rcx        # 8-byte Reload
	movq	2360(%rsp), %r8         # 8-byte Reload
	movl	2220(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2280(%rsp), %rdi        # 8-byte Reload
	movq	2384(%rsp), %rsi        # 8-byte Reload
	vmovsd	2144(%rsp), %xmm0       # 8-byte Reload
	movq	2392(%rsp), %rdx        # 8-byte Reload
	movq	2368(%rsp), %rcx        # 8-byte Reload
	movq	2264(%rsp), %r8         # 8-byte Reload
	movq	2272(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	2392(%rsp), %rdi        # 8-byte Reload
	movq	2384(%rsp), %rsi        # 8-byte Reload
	vmovsd	2160(%rsp), %xmm0       # 8-byte Reload
	movq	2392(%rsp), %rdx        # 8-byte Reload
	movq	2376(%rsp), %rcx        # 8-byte Reload
	movq	2264(%rsp), %r8         # 8-byte Reload
	movq	2272(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	2144(%rsp), %xmm0       # 8-byte Reload
	vmovsd	2160(%rsp), %xmm1       # 8-byte Reload
	vucomisd	%xmm1, %xmm0
	setb	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ebp
	movl	%ebp, %edx
	movq	2208(%rsp), %rdi        # 8-byte Reload
	movq	2392(%rsp), %rsi        # 8-byte Reload
	movq	2392(%rsp), %rcx        # 8-byte Reload
	movq	2248(%rsp), %r8         # 8-byte Reload
	movq	2264(%rsp), %r9         # 8-byte Reload
	movq	2272(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 2143(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	2176(%rsp), %rdi        # 8-byte Reload
	movq	2192(%rsp), %rsi        # 8-byte Reload
	movq	2200(%rsp), %rdx        # 8-byte Reload
	movq	2224(%rsp), %rcx        # 8-byte Reload
	movq	2280(%rsp), %r8         # 8-byte Reload
	movl	2220(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2232(%rsp), %rdi        # 8-byte Reload
	movq	2264(%rsp), %rsi        # 8-byte Reload
	movq	2264(%rsp), %rdx        # 8-byte Reload
	movq	2392(%rsp), %rcx        # 8-byte Reload
	movq	2184(%rsp), %r8         # 8-byte Reload
	movq	2264(%rsp), %r9         # 8-byte Reload
	movq	2272(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	2280(%rsp), %rdi        # 8-byte Reload
	movq	2264(%rsp), %rsi        # 8-byte Reload
	movq	2264(%rsp), %rdx        # 8-byte Reload
	movq	2392(%rsp), %rcx        # 8-byte Reload
	movq	2240(%rsp), %r8         # 8-byte Reload
	movq	2264(%rsp), %r9         # 8-byte Reload
	movq	2272(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	2143(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	2392(%rsp), %rdi        # 8-byte Reload
	movq	2392(%rsp), %rsi        # 8-byte Reload
	movq	2392(%rsp), %rcx        # 8-byte Reload
	movq	2248(%rsp), %r8         # 8-byte Reload
	movq	2264(%rsp), %r9         # 8-byte Reload
	movq	2272(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	2143(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	vmovsd	3888(%rsp), %xmm0       # 8-byte Reload
	vmovsd	%xmm0, 6176(%rsp)       # 8-byte Spill
	jne	.LBB10_20
	jmp	.LBB10_21
.Ltmp484:
.LBB10_20:                              #   in Loop: Header=BB10_12 Depth=2
	movabsq	$1, %rax
	leaq	.L.str284, %rcx
	movabsq	$0, %rdx
	leaq	.L.str792, %rsi
	movabsq	$2, %rdi
	leaq	.L.str418, %r8
	movabsq	$3, %r9
	leaq	.L.str417, %r10
	movabsq	$559, %r11              # imm = 0x22F
	leaq	.L.str61146, %rbx
	leaq	.L.str420, %r14
	leaq	.L.str458, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	vxorps	%xmm0, %xmm0, %xmm0
	movq	%rax, 2128(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 2120(%rsp)        # 8-byte Spill
	leaq	.L.str283, %rax
	movq	%rax, 2112(%rsp)        # 8-byte Spill
	leaq	.L.str1499, %rax
	movq	%rax, 2104(%rsp)        # 8-byte Spill
	movabsq	$47, %rax
	movq	%rax, 2096(%rsp)        # 8-byte Spill
	leaq	.L.str36121, %rax
	movq	%rax, 2088(%rsp)        # 8-byte Spill
	movabsq	$557, %rax              # imm = 0x22D
	movq	%rax, 2080(%rsp)        # 8-byte Spill
	leaq	.L.str457, %rax
	movq	%rax, 2072(%rsp)        # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, 2064(%rsp)        # 8-byte Spill
	leaq	.L.str192, %rax
	movq	%rax, 2056(%rsp)        # 8-byte Spill
	leaq	.L.str261, %rax
	movq	%rax, 2048(%rsp)        # 8-byte Spill
	movabsq	$13, %rax
	.loc	2 557 0                 # eispack.c:557:0
	movq	%rax, 2040(%rsp)        # 8-byte Spill
	movq	2080(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 2032(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 2024(%rsp)        # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, 2016(%rsp)        # 8-byte Spill
	movq	%r14, %rdx
	movq	2112(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 2008(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	2040(%rsp), %rax        # 8-byte Reload
	movq	%r8, 2000(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 1992(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movl	%ebp, 1988(%rsp)        # 4-byte Spill
	movl	%r12d, 1984(%rsp)       # 4-byte Spill
	movq	%r13, 1976(%rsp)        # 8-byte Spill
	vmovsd	%xmm0, 1968(%rsp)       # 8-byte Spill
	movq	%r15, 1960(%rsp)        # 8-byte Spill
	movq	%r14, 1952(%rsp)        # 8-byte Spill
	movq	%r10, 1944(%rsp)        # 8-byte Spill
	movq	%r11, 1936(%rsp)        # 8-byte Spill
	movq	%rbx, 1928(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	2032(%rsp), %rdi        # 8-byte Reload
	movq	2120(%rsp), %rsi        # 8-byte Reload
	vmovsd	2168(%rsp), %xmm0       # 8-byte Reload
	movq	2128(%rsp), %rdx        # 8-byte Reload
	movq	2048(%rsp), %rcx        # 8-byte Reload
	movq	2016(%rsp), %r8         # 8-byte Reload
	movq	2024(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	2128(%rsp), %rdi        # 8-byte Reload
	movq	2120(%rsp), %rsi        # 8-byte Reload
	vmovsd	2488(%rsp), %xmm0       # 8-byte Reload
	movq	2128(%rsp), %rdx        # 8-byte Reload
	movq	2056(%rsp), %rcx        # 8-byte Reload
	movq	2016(%rsp), %r8         # 8-byte Reload
	movq	2024(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	2488(%rsp), %xmm0       # 8-byte Reload
	vmovsd	2168(%rsp), %xmm1       # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	1976(%rsp), %rdi        # 8-byte Reload
	movq	2120(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	2128(%rsp), %rdx        # 8-byte Reload
	movq	2112(%rsp), %rcx        # 8-byte Reload
	movq	2016(%rsp), %r8         # 8-byte Reload
	movq	2024(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 1920(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	2080(%rsp), %rdi        # 8-byte Reload
	movq	1928(%rsp), %rsi        # 8-byte Reload
	movq	1952(%rsp), %rdx        # 8-byte Reload
	movq	2072(%rsp), %rcx        # 8-byte Reload
	movq	2064(%rsp), %r8         # 8-byte Reload
	movl	1988(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2032(%rsp), %rdi        # 8-byte Reload
	movq	2120(%rsp), %rsi        # 8-byte Reload
	movq	7464(%rsp), %rdx        # 8-byte Reload
	movq	2128(%rsp), %rcx        # 8-byte Reload
	movq	2088(%rsp), %r8         # 8-byte Reload
	movq	2016(%rsp), %r9         # 8-byte Reload
	movq	2024(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2128(%rsp), %rdi        # 8-byte Reload
	movq	2120(%rsp), %rsi        # 8-byte Reload
	vmovsd	1920(%rsp), %xmm0       # 8-byte Reload
	movq	2128(%rsp), %rdx        # 8-byte Reload
	movq	2112(%rsp), %rcx        # 8-byte Reload
	movq	2016(%rsp), %r8         # 8-byte Reload
	movq	2024(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	7464(%rsp), %rax        # 8-byte Reload
	vmovsd	1920(%rsp), %xmm0       # 8-byte Reload
	vmovsd	%xmm0, (%rax)
	.loc	2 559 0                 # eispack.c:559:0
.Ltmp485:
	movq	1936(%rsp), %rdi        # 8-byte Reload
	movq	1928(%rsp), %rsi        # 8-byte Reload
	movq	1952(%rsp), %rdx        # 8-byte Reload
	movq	2008(%rsp), %rcx        # 8-byte Reload
	movq	2096(%rsp), %r8         # 8-byte Reload
	movl	1988(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2032(%rsp), %rdi        # 8-byte Reload
	movq	2120(%rsp), %rsi        # 8-byte Reload
	vmovsd	1968(%rsp), %xmm0       # 8-byte Reload
	movq	2016(%rsp), %rdx        # 8-byte Reload
	movq	2104(%rsp), %rcx        # 8-byte Reload
	movq	2016(%rsp), %r8         # 8-byte Reload
	movq	2024(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	2128(%rsp), %rdi        # 8-byte Reload
	movq	2120(%rsp), %rsi        # 8-byte Reload
	vmovsd	1920(%rsp), %xmm0       # 8-byte Reload
	movq	2128(%rsp), %rdx        # 8-byte Reload
	movq	2112(%rsp), %rcx        # 8-byte Reload
	movq	2016(%rsp), %r8         # 8-byte Reload
	movq	2024(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	1920(%rsp), %xmm0       # 8-byte Reload
	vmovsd	1968(%rsp), %xmm1       # 8-byte Reload
	vucomisd	%xmm1, %xmm0
	sete	%al
	setnp	%cl
	andb	%al, %cl
	movb	%cl, %al
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	1976(%rsp), %rdi        # 8-byte Reload
	movq	2128(%rsp), %rsi        # 8-byte Reload
	movq	2128(%rsp), %r8         # 8-byte Reload
	movb	%cl, 1919(%rsp)         # 1-byte Spill
	movq	%r8, %rcx
	movq	2008(%rsp), %r8         # 8-byte Reload
	movq	2016(%rsp), %r9         # 8-byte Reload
	movq	2024(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1936(%rsp), %rdi        # 8-byte Reload
	movq	1928(%rsp), %rsi        # 8-byte Reload
	movq	1952(%rsp), %rdx        # 8-byte Reload
	movq	1960(%rsp), %rcx        # 8-byte Reload
	movq	2032(%rsp), %r8         # 8-byte Reload
	movl	1988(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1992(%rsp), %rdi        # 8-byte Reload
	movq	2016(%rsp), %rsi        # 8-byte Reload
	movq	2016(%rsp), %rdx        # 8-byte Reload
	movq	2128(%rsp), %rcx        # 8-byte Reload
	movq	1944(%rsp), %r8         # 8-byte Reload
	movq	2016(%rsp), %r9         # 8-byte Reload
	movq	2024(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	2032(%rsp), %rdi        # 8-byte Reload
	movq	2016(%rsp), %rsi        # 8-byte Reload
	movq	2016(%rsp), %rdx        # 8-byte Reload
	movq	2128(%rsp), %rcx        # 8-byte Reload
	movq	2000(%rsp), %r8         # 8-byte Reload
	movq	2016(%rsp), %r9         # 8-byte Reload
	movq	2024(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	1919(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	2128(%rsp), %rdi        # 8-byte Reload
	movq	2128(%rsp), %rsi        # 8-byte Reload
	movq	2128(%rsp), %rcx        # 8-byte Reload
	movq	2008(%rsp), %r8         # 8-byte Reload
	movq	2016(%rsp), %r9         # 8-byte Reload
	movq	2024(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	1919(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	vmovsd	3888(%rsp), %xmm0       # 8-byte Reload
	movl	5028(%rsp), %ebp        # 4-byte Reload
	vmovsd	3888(%rsp), %xmm1       # 8-byte Reload
	vmovsd	%xmm0, 5784(%rsp)       # 8-byte Spill
	movl	%ebp, 5780(%rsp)        # 4-byte Spill
	vmovsd	%xmm1, 6176(%rsp)       # 8-byte Spill
	jne	.LBB10_21
	jmp	.LBB10_12
.Ltmp486:
.LBB10_21:                              # %.lr.ph23
                                        #   in Loop: Header=BB10_5 Depth=1
	vmovsd	6176(%rsp), %xmm0       # 8-byte Reload
	movabsq	$1, %rax
	movabsq	$0, %rcx
	leaq	.L.str460, %r8
	leaq	.L.str792, %rdx
	movabsq	$570, %rdi              # imm = 0x23A
	leaq	.L.str61146, %rsi
	leaq	.L.str417, %r9
	leaq	.L.str459, %r10
	movabsq	$2, %r11
	movl	$0, %ebx
	movl	$1, %ebp
	movabsq	$19134, %r14            # imm = 0x4ABE
	movabsq	$64, %r15
	leaq	.L.str287172, %r12
	leaq	.L.str400, %r13
	movq	%rax, 1904(%rsp)        # 8-byte Spill
	leaq	.L.str286, %rax
	movq	%rax, 1896(%rsp)        # 8-byte Spill
	movabsq	$566, %rax              # imm = 0x236
	movq	%rax, 1888(%rsp)        # 8-byte Spill
	movabsq	$9, %rax
	movq	%rax, 1880(%rsp)        # 8-byte Spill
	leaq	.L.str34119, %rax
	movq	%rax, 1872(%rsp)        # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, 1864(%rsp)        # 8-byte Spill
	leaq	.L.str411, %rax
	movq	%rax, 1856(%rsp)        # 8-byte Spill
	leaq	.L.str399, %rax
	movq	%rax, 1848(%rsp)        # 8-byte Spill
	leaq	.L.str205, %rax
	movq	%rax, 1840(%rsp)        # 8-byte Spill
	leaq	.L.str420, %rax
	movq	%rax, 1832(%rsp)        # 8-byte Spill
	movabsq	$3, %rax
	movq	%rax, 1824(%rsp)        # 8-byte Spill
	leaq	.L.str436, %rax
	movq	%rax, 1816(%rsp)        # 8-byte Spill
	movabsq	$4, %rax
	movq	%rax, 1808(%rsp)        # 8-byte Spill
	leaq	.L.str455, %rax
	movq	%rax, 1800(%rsp)        # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 1792(%rsp)        # 8-byte Spill
	movabsq	$48, %rax
	.loc	2 566 0                 # eispack.c:566:0
	movq	%rax, 1784(%rsp)        # 8-byte Spill
	movq	1792(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 1776(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 1768(%rsp)        # 8-byte Spill
	movq	%rdx, 1760(%rsp)        # 8-byte Spill
	movq	%r9, %rdx
	movq	%rcx, 1752(%rsp)        # 8-byte Spill
	movq	%r13, %rcx
	movq	1784(%rsp), %rax        # 8-byte Reload
	movq	%r8, 1744(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 1736(%rsp)         # 8-byte Spill
	movl	%ebx, %r9d
	movl	$1, (%rsp)
	vmovsd	%xmm0, 1728(%rsp)       # 8-byte Spill
	movq	%r14, 1720(%rsp)        # 8-byte Spill
	movl	%ebp, 1716(%rsp)        # 4-byte Spill
	movq	%r15, 1704(%rsp)        # 8-byte Spill
	movq	%r13, 1696(%rsp)        # 8-byte Spill
	movq	%r12, 1688(%rsp)        # 8-byte Spill
	movl	%ebx, 1684(%rsp)        # 4-byte Spill
	movq	%r10, 1672(%rsp)        # 8-byte Spill
	movq	%r11, 1664(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	1808(%rsp), %rdi        # 8-byte Reload
	movq	1704(%rsp), %rsi        # 8-byte Reload
	movq	1752(%rsp), %rdx        # 8-byte Reload
	movq	1904(%rsp), %rcx        # 8-byte Reload
	movq	1840(%rsp), %r8         # 8-byte Reload
	movq	1904(%rsp), %r9         # 8-byte Reload
	movq	1800(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1824(%rsp), %rdi        # 8-byte Reload
	movq	1704(%rsp), %rsi        # 8-byte Reload
	movq	1752(%rsp), %rdx        # 8-byte Reload
	movq	1904(%rsp), %rcx        # 8-byte Reload
	movq	1840(%rsp), %r8         # 8-byte Reload
	movq	1904(%rsp), %r9         # 8-byte Reload
	movq	1816(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1664(%rsp), %rdi        # 8-byte Reload
	movq	1704(%rsp), %rsi        # 8-byte Reload
	movq	1752(%rsp), %rdx        # 8-byte Reload
	movq	1904(%rsp), %rcx        # 8-byte Reload
	movq	1840(%rsp), %r8         # 8-byte Reload
	movq	1904(%rsp), %r9         # 8-byte Reload
	movq	1832(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1904(%rsp), %rdi        # 8-byte Reload
	movq	1704(%rsp), %rsi        # 8-byte Reload
	movq	1752(%rsp), %rdx        # 8-byte Reload
	movq	1904(%rsp), %rcx        # 8-byte Reload
	movq	1848(%rsp), %r8         # 8-byte Reload
	movq	1904(%rsp), %r9         # 8-byte Reload
	movq	1856(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1720(%rsp), %rdi        # 8-byte Reload
	movq	1704(%rsp), %rsi        # 8-byte Reload
	vmovsd	1728(%rsp), %xmm0       # 8-byte Reload
	movq	1904(%rsp), %rdx        # 8-byte Reload
	movq	1696(%rsp), %rcx        # 8-byte Reload
	movq	1752(%rsp), %r8         # 8-byte Reload
	movq	1856(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1888(%rsp), %rdi        # 8-byte Reload
	movq	1768(%rsp), %rsi        # 8-byte Reload
	movq	1736(%rsp), %rdx        # 8-byte Reload
	movq	1896(%rsp), %rcx        # 8-byte Reload
	movq	1864(%rsp), %r8         # 8-byte Reload
	movl	1684(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1904(%rsp), %rdi        # 8-byte Reload
	movq	1704(%rsp), %rsi        # 8-byte Reload
	movq	7488(%rsp), %rdx        # 8-byte Reload
	movq	1904(%rsp), %rcx        # 8-byte Reload
	movq	1872(%rsp), %r8         # 8-byte Reload
	movq	1752(%rsp), %r9         # 8-byte Reload
	movq	1760(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	7488(%rsp), %rax        # 8-byte Reload
	vmovsd	(%rax), %xmm0
	movq	1720(%rsp), %rdi        # 8-byte Reload
	movq	1704(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 1656(%rsp)       # 8-byte Spill
	movq	1904(%rsp), %rdx        # 8-byte Reload
	movq	1896(%rsp), %rcx        # 8-byte Reload
	movq	1752(%rsp), %r8         # 8-byte Reload
	movq	1760(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1888(%rsp), %rdi        # 8-byte Reload
	movq	1768(%rsp), %rsi        # 8-byte Reload
	movq	1736(%rsp), %rdx        # 8-byte Reload
	movq	1688(%rsp), %rcx        # 8-byte Reload
	movq	1880(%rsp), %r8         # 8-byte Reload
	movl	1684(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1664(%rsp), %rdi        # 8-byte Reload
	movq	1704(%rsp), %rsi        # 8-byte Reload
	vmovsd	1656(%rsp), %xmm0       # 8-byte Reload
	movq	1904(%rsp), %rdx        # 8-byte Reload
	movq	1896(%rsp), %rcx        # 8-byte Reload
	movq	1752(%rsp), %r8         # 8-byte Reload
	movq	1760(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1904(%rsp), %rdi        # 8-byte Reload
	movq	1704(%rsp), %rsi        # 8-byte Reload
	vmovsd	1728(%rsp), %xmm0       # 8-byte Reload
	movq	1904(%rsp), %rdx        # 8-byte Reload
	movq	1696(%rsp), %rcx        # 8-byte Reload
	movq	1752(%rsp), %r8         # 8-byte Reload
	movq	1760(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	1728(%rsp), %xmm0       # 8-byte Reload
	vmovsd	1656(%rsp), %xmm1       # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
	movq	1720(%rsp), %rdi        # 8-byte Reload
	movq	1704(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1904(%rsp), %rdx        # 8-byte Reload
	movq	1688(%rsp), %rcx        # 8-byte Reload
	movq	1752(%rsp), %r8         # 8-byte Reload
	movq	1760(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 1648(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
.Ltmp487:
	#DEBUG_VALUE: tqlrat:p <- [RSP+1648]
	#DEBUG_VALUE: tqlrat:i <- [RSP+8012]
	.loc	2 570 0                 # eispack.c:570:0
	movq	1776(%rsp), %rdi        # 8-byte Reload
	movq	1768(%rsp), %rsi        # 8-byte Reload
	movq	1736(%rsp), %rdx        # 8-byte Reload
	movq	1672(%rsp), %rcx        # 8-byte Reload
	movq	1664(%rsp), %r8         # 8-byte Reload
	movl	1684(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1904(%rsp), %rdi        # 8-byte Reload
	movq	1752(%rsp), %rsi        # 8-byte Reload
	movq	1752(%rsp), %rdx        # 8-byte Reload
	movq	1904(%rsp), %rcx        # 8-byte Reload
	movq	1744(%rsp), %r8         # 8-byte Reload
	movq	1752(%rsp), %r9         # 8-byte Reload
	movq	1760(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	7640(%rsp), %rax        # 8-byte Reload
	movl	8012(%rsp), %ebx        # 4-byte Reload
	movq	%rax, 1640(%rsp)        # 8-byte Spill
	movl	%ebx, 1636(%rsp)        # 4-byte Spill
.Ltmp488:
.LBB10_22:                              #   Parent Loop BB10_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	1636(%rsp), %eax        # 4-byte Reload
	movq	1640(%rsp), %rcx        # 8-byte Reload
	movabsq	$1, %rdx
	leaq	.L.str293, %rsi
	movabsq	$0, %rdi
	leaq	.L.str792, %r8
	movabsq	$2, %r9
	leaq	.L.str467, %r10
	movabsq	$3, %r11
	leaq	.L.str466, %rbx
	movabsq	$572, %r14              # imm = 0x23C
	leaq	.L.str61146, %r15
	leaq	.L.str460, %r12
	leaq	.L.str465, %r13
	movl	$0, %ebp
	movl	%eax, 1632(%rsp)        # 4-byte Spill
	movl	$1, %eax
	movq	%rcx, 1624(%rsp)        # 8-byte Spill
	movabsq	$19134, %rcx            # imm = 0x4ABE
	movq	%rcx, 1616(%rsp)        # 8-byte Spill
	movabsq	$32, %rcx
	movq	%rcx, 1608(%rsp)        # 8-byte Spill
	leaq	.L.str281, %rcx
	movq	%rcx, 1600(%rsp)        # 8-byte Spill
	leaq	.L.str1499, %rcx
	movq	%rcx, 1592(%rsp)        # 8-byte Spill
	movabsq	$46, %rcx
	movq	%rcx, 1584(%rsp)        # 8-byte Spill
	movabsq	$64, %rcx
	movq	%rcx, 1576(%rsp)        # 8-byte Spill
	leaq	.L.str461, %rcx
	movq	%rcx, 1568(%rsp)        # 8-byte Spill
	movabsq	$33, %rcx
	movq	%rcx, 1560(%rsp)        # 8-byte Spill
	leaq	.L.str464, %rcx
	movq	%rcx, 1552(%rsp)        # 8-byte Spill
	leaq	.L.str417, %rcx
	movq	%rcx, 1544(%rsp)        # 8-byte Spill
	leaq	.L.str398, %rcx
	movq	%rcx, 1536(%rsp)        # 8-byte Spill
	leaq	.L.str318, %rcx
	movq	%rcx, 1528(%rsp)        # 8-byte Spill
	leaq	.L.str463, %rcx
	movq	%rcx, 1520(%rsp)        # 8-byte Spill
	movabsq	$-1, %rcx
	movq	%rcx, 1512(%rsp)        # 8-byte Spill
	movabsq	$48, %rcx
	movq	%rcx, 1504(%rsp)        # 8-byte Spill
	leaq	.L.str387, %rcx
	movq	%rcx, 1496(%rsp)        # 8-byte Spill
	leaq	.L.str462, %rcx
	.loc	2 572 0                 # eispack.c:572:0
.Ltmp489:
	movq	%rcx, 1488(%rsp)        # 8-byte Spill
	movq	1512(%rsp), %rcx        # 8-byte Reload
	movq	%rdi, 1480(%rsp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	%rsi, 1472(%rsp)        # 8-byte Spill
	movq	%r15, %rsi
	movq	%rdx, 1464(%rsp)        # 8-byte Spill
	movq	%r12, %rdx
	movq	1568(%rsp), %rcx        # 8-byte Reload
	movq	%r8, 1456(%rsp)         # 8-byte Spill
	movq	1504(%rsp), %r8         # 8-byte Reload
	movq	%r9, 1448(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movl	%eax, 1444(%rsp)        # 4-byte Spill
	movq	%r15, 1432(%rsp)        # 8-byte Spill
	movq	%r12, 1424(%rsp)        # 8-byte Spill
	movq	%r13, 1416(%rsp)        # 8-byte Spill
	movl	%ebp, 1412(%rsp)        # 4-byte Spill
	movq	%r14, 1400(%rsp)        # 8-byte Spill
	movq	%rbx, 1392(%rsp)        # 8-byte Spill
	movq	%r10, 1384(%rsp)        # 8-byte Spill
	movq	%r11, 1376(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	1448(%rsp), %rdi        # 8-byte Reload
	movq	1576(%rsp), %rsi        # 8-byte Reload
	movq	1480(%rsp), %rdx        # 8-byte Reload
	movq	1464(%rsp), %rcx        # 8-byte Reload
	movq	1488(%rsp), %r8         # 8-byte Reload
	movq	1464(%rsp), %r9         # 8-byte Reload
	movq	1520(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1464(%rsp), %rdi        # 8-byte Reload
	movq	1576(%rsp), %rsi        # 8-byte Reload
	movq	1480(%rsp), %rdx        # 8-byte Reload
	movq	1464(%rsp), %rcx        # 8-byte Reload
	movq	1496(%rsp), %r8         # 8-byte Reload
	movq	1464(%rsp), %r9         # 8-byte Reload
	movq	1544(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1616(%rsp), %rdi        # 8-byte Reload
	movq	1576(%rsp), %rsi        # 8-byte Reload
	movq	1624(%rsp), %rdx        # 8-byte Reload
	movq	1464(%rsp), %rcx        # 8-byte Reload
	movq	1568(%rsp), %r8         # 8-byte Reload
	movq	1480(%rsp), %r9         # 8-byte Reload
	movq	1544(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1512(%rsp), %rdi        # 8-byte Reload
	movq	1432(%rsp), %rsi        # 8-byte Reload
	movq	1424(%rsp), %rdx        # 8-byte Reload
	movq	1552(%rsp), %rcx        # 8-byte Reload
	movq	1504(%rsp), %r8         # 8-byte Reload
	movl	1412(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1448(%rsp), %rdi        # 8-byte Reload
	movq	1608(%rsp), %rsi        # 8-byte Reload
	movq	1480(%rsp), %rdx        # 8-byte Reload
	movq	1464(%rsp), %rcx        # 8-byte Reload
	movq	1528(%rsp), %r8         # 8-byte Reload
	movq	1464(%rsp), %r9         # 8-byte Reload
	movq	1520(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1464(%rsp), %rdi        # 8-byte Reload
	movq	1608(%rsp), %rsi        # 8-byte Reload
	movq	1480(%rsp), %rdx        # 8-byte Reload
	movq	1464(%rsp), %rcx        # 8-byte Reload
	movq	1536(%rsp), %r8         # 8-byte Reload
	movq	1464(%rsp), %r9         # 8-byte Reload
	movq	1544(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	1632(%rsp), %eax        # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	1616(%rsp), %rdi        # 8-byte Reload
	movq	1608(%rsp), %rsi        # 8-byte Reload
	movq	1464(%rsp), %rcx        # 8-byte Reload
	movq	1552(%rsp), %r8         # 8-byte Reload
	movq	1480(%rsp), %r9         # 8-byte Reload
	movq	1544(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1400(%rsp), %rdi        # 8-byte Reload
	movq	1432(%rsp), %rsi        # 8-byte Reload
	movq	1424(%rsp), %rdx        # 8-byte Reload
	movq	1600(%rsp), %rcx        # 8-byte Reload
	movq	1560(%rsp), %r8         # 8-byte Reload
	movl	1412(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1464(%rsp), %rdi        # 8-byte Reload
	movq	1576(%rsp), %rsi        # 8-byte Reload
	movq	1624(%rsp), %rdx        # 8-byte Reload
	movq	1464(%rsp), %rcx        # 8-byte Reload
	movq	1568(%rsp), %r8         # 8-byte Reload
	movq	1480(%rsp), %r9         # 8-byte Reload
	movq	1456(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1624(%rsp), %rcx        # 8-byte Reload
	movl	%ecx, %eax
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	1616(%rsp), %rdi        # 8-byte Reload
	movq	1608(%rsp), %rsi        # 8-byte Reload
	movq	1464(%rsp), %rcx        # 8-byte Reload
	movq	1600(%rsp), %r8         # 8-byte Reload
	movq	1480(%rsp), %r9         # 8-byte Reload
	movq	1456(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, 1372(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	1400(%rsp), %rdi        # 8-byte Reload
	movq	1432(%rsp), %rsi        # 8-byte Reload
	movq	1424(%rsp), %rdx        # 8-byte Reload
	movq	1472(%rsp), %rcx        # 8-byte Reload
	movq	1584(%rsp), %r8         # 8-byte Reload
	movl	1412(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1448(%rsp), %rdi        # 8-byte Reload
	movq	1608(%rsp), %rsi        # 8-byte Reload
	movq	1480(%rsp), %rdx        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1592(%rsp), %r8         # 8-byte Reload
	movq	1480(%rsp), %r9         # 8-byte Reload
	movq	1456(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	1372(%rsp), %eax        # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	1464(%rsp), %rdi        # 8-byte Reload
	movq	1608(%rsp), %rsi        # 8-byte Reload
	movq	1464(%rsp), %rcx        # 8-byte Reload
	movq	1600(%rsp), %r8         # 8-byte Reload
	movq	1480(%rsp), %r9         # 8-byte Reload
	movq	1456(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	1372(%rsp), %eax        # 4-byte Reload
	cmpl	$0, %eax
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ebp
	movl	%ebp, %edx
	movq	1616(%rsp), %rdi        # 8-byte Reload
	movq	1464(%rsp), %rsi        # 8-byte Reload
	movq	1464(%rsp), %rcx        # 8-byte Reload
	movq	1472(%rsp), %r8         # 8-byte Reload
	movq	1480(%rsp), %r9         # 8-byte Reload
	movq	1456(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 1371(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	1400(%rsp), %rdi        # 8-byte Reload
	movq	1432(%rsp), %rsi        # 8-byte Reload
	movq	1424(%rsp), %rdx        # 8-byte Reload
	movq	1416(%rsp), %rcx        # 8-byte Reload
	movq	1448(%rsp), %r8         # 8-byte Reload
	movl	1412(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1376(%rsp), %rdi        # 8-byte Reload
	movq	1480(%rsp), %rsi        # 8-byte Reload
	movq	1480(%rsp), %rdx        # 8-byte Reload
	movq	1464(%rsp), %rcx        # 8-byte Reload
	movq	1392(%rsp), %r8         # 8-byte Reload
	movq	1480(%rsp), %r9         # 8-byte Reload
	movq	1456(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1448(%rsp), %rdi        # 8-byte Reload
	movq	1480(%rsp), %rsi        # 8-byte Reload
	movq	1480(%rsp), %rdx        # 8-byte Reload
	movq	1464(%rsp), %rcx        # 8-byte Reload
	movq	1384(%rsp), %r8         # 8-byte Reload
	movq	1480(%rsp), %r9         # 8-byte Reload
	movq	1456(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	1371(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	1464(%rsp), %rdi        # 8-byte Reload
	movq	1464(%rsp), %rsi        # 8-byte Reload
	movq	1464(%rsp), %rcx        # 8-byte Reload
	movq	1472(%rsp), %r8         # 8-byte Reload
	movq	1480(%rsp), %r9         # 8-byte Reload
	movq	1456(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	1371(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB10_23
	jmp	.LBB10_24
.LBB10_23:                              #   in Loop: Header=BB10_5 Depth=1
	movabsq	$1, %rax
	movabsq	$0, %rcx
	leaq	.L.str389, %r8
	leaq	.L.str792, %rdx
	movabsq	$575, %rdi              # imm = 0x23F
	leaq	.L.str61146, %rsi
	leaq	.L.str466, %r9
	leaq	.L.str469, %r10
	movabsq	$2, %r11
	movl	$0, %ebx
	movl	$1, %ebp
	movabsq	$64, %r14
	leaq	.L.str287172, %r15
	leaq	.L.str300, %r12
	movabsq	$574, %r13              # imm = 0x23E
	movq	%rax, 1360(%rsp)        # 8-byte Spill
	leaq	.L.str468, %rax
	movq	%rax, 1352(%rsp)        # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, 1344(%rsp)        # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 1336(%rsp)        # 8-byte Spill
	leaq	.L.str85170, %rax
	movq	%rax, 1328(%rsp)        # 8-byte Spill
	leaq	.L.str295, %rax
	movq	%rax, 1320(%rsp)        # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 1312(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 1304(%rsp)        # 8-byte Spill
	leaq	.L.str464, %rax
	movq	%rax, 1296(%rsp)        # 8-byte Spill
	movabsq	$35, %rax
	.loc	2 574 0                 # eispack.c:574:0
.Ltmp490:
	movq	%rdi, 1288(%rsp)        # 8-byte Spill
	movq	%r13, %rdi
	movq	%rsi, 1280(%rsp)        # 8-byte Spill
	movq	%rdx, 1272(%rsp)        # 8-byte Spill
	movq	%r9, %rdx
	movq	%rax, 1264(%rsp)        # 8-byte Spill
	movq	1320(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 1256(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	1264(%rsp), %rax        # 8-byte Reload
	movq	%r8, 1248(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 1240(%rsp)         # 8-byte Spill
	movl	%ebx, %r9d
	movl	$1, (%rsp)
	movq	%r14, 1232(%rsp)        # 8-byte Spill
	movl	%ebp, 1228(%rsp)        # 4-byte Spill
	movq	%r15, 1216(%rsp)        # 8-byte Spill
	movq	%r13, 1208(%rsp)        # 8-byte Spill
	movq	%r12, 1200(%rsp)        # 8-byte Spill
	movl	%ebx, 1196(%rsp)        # 4-byte Spill
	movq	%r10, 1184(%rsp)        # 8-byte Spill
	movq	%r11, 1176(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movl	1632(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebx
	movl	%ebx, %edx
	movq	1360(%rsp), %rdi        # 8-byte Reload
	movq	1304(%rsp), %rsi        # 8-byte Reload
	movq	1360(%rsp), %rcx        # 8-byte Reload
	movq	1296(%rsp), %r8         # 8-byte Reload
	movq	1256(%rsp), %r9         # 8-byte Reload
	movq	1272(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	1632(%rsp), %ebx        # 4-byte Reload
	movslq	%ebx, %rax
	movq	1336(%rsp), %rdi        # 8-byte Reload
	movq	1232(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	1360(%rsp), %rcx        # 8-byte Reload
	movq	1320(%rsp), %r8         # 8-byte Reload
	movq	1256(%rsp), %r9         # 8-byte Reload
	movq	1272(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 1168(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	1208(%rsp), %rdi        # 8-byte Reload
	movq	1280(%rsp), %rsi        # 8-byte Reload
	movq	1240(%rsp), %rdx        # 8-byte Reload
	movq	1200(%rsp), %rcx        # 8-byte Reload
	movq	1312(%rsp), %r8         # 8-byte Reload
	movl	1196(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1176(%rsp), %rdi        # 8-byte Reload
	movq	1232(%rsp), %rsi        # 8-byte Reload
	movq	1168(%rsp), %rdx        # 8-byte Reload
	movq	1360(%rsp), %rcx        # 8-byte Reload
	movq	1320(%rsp), %r8         # 8-byte Reload
	movq	1256(%rsp), %r9         # 8-byte Reload
	movq	1272(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1360(%rsp), %rdi        # 8-byte Reload
	movq	1232(%rsp), %rsi        # 8-byte Reload
	movq	9216(%rsp), %rdx        # 8-byte Reload
	movq	1360(%rsp), %rcx        # 8-byte Reload
	movq	1328(%rsp), %r8         # 8-byte Reload
	movq	1256(%rsp), %r9         # 8-byte Reload
	movq	1272(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1168(%rsp), %rax        # 8-byte Reload
	shlq	$3, %rax
	movq	9216(%rsp), %rcx        # 8-byte Reload
	addq	%rax, %rcx
	movq	1336(%rsp), %rdi        # 8-byte Reload
	movq	1232(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	1360(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 1160(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	1200(%rsp), %r8         # 8-byte Reload
	movq	1256(%rsp), %r9         # 8-byte Reload
	movq	1272(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1208(%rsp), %rdi        # 8-byte Reload
	movq	1280(%rsp), %rsi        # 8-byte Reload
	movq	1240(%rsp), %rdx        # 8-byte Reload
	movq	1352(%rsp), %rcx        # 8-byte Reload
	movq	1344(%rsp), %r8         # 8-byte Reload
	movl	1196(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1176(%rsp), %rdi        # 8-byte Reload
	movq	1232(%rsp), %rsi        # 8-byte Reload
	movq	1160(%rsp), %rdx        # 8-byte Reload
	movq	1360(%rsp), %rcx        # 8-byte Reload
	movq	1200(%rsp), %r8         # 8-byte Reload
	movq	1256(%rsp), %r9         # 8-byte Reload
	movq	1272(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1360(%rsp), %rdi        # 8-byte Reload
	movq	1232(%rsp), %rsi        # 8-byte Reload
	vmovsd	1648(%rsp), %xmm0       # 8-byte Reload
	movq	1360(%rsp), %rdx        # 8-byte Reload
	movq	1216(%rsp), %rcx        # 8-byte Reload
	movq	1256(%rsp), %r8         # 8-byte Reload
	movq	1272(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	9216(%rsp), %rax        # 8-byte Reload
	movq	1168(%rsp), %rcx        # 8-byte Reload
	vmovsd	1648(%rsp), %xmm0       # 8-byte Reload
	vmovsd	%xmm0, (%rax,%rcx,8)
	.loc	2 575 0                 # eispack.c:575:0
	movq	1288(%rsp), %rdi        # 8-byte Reload
	movq	1280(%rsp), %rsi        # 8-byte Reload
	movq	1240(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1176(%rsp), %r8         # 8-byte Reload
	movl	1196(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1360(%rsp), %rdi        # 8-byte Reload
	movq	1256(%rsp), %rsi        # 8-byte Reload
	movq	1256(%rsp), %rdx        # 8-byte Reload
	movq	1360(%rsp), %rcx        # 8-byte Reload
	movq	1248(%rsp), %r8         # 8-byte Reload
	movq	1256(%rsp), %r9         # 8-byte Reload
	movq	1272(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	jmp	.LBB10_27
.Ltmp491:
.LBB10_24:                              #   in Loop: Header=BB10_22 Depth=2
	movabsq	$1, %rax
	leaq	.L.str304, %rcx
	movabsq	$0, %rdx
	leaq	.L.str792, %rsi
	movabsq	$2, %rdi
	leaq	.L.str471, %r8
	movabsq	$3, %r9
	leaq	.L.str463, %r10
	movabsq	$577, %r11              # imm = 0x241
	leaq	.L.str61146, %rbx
	leaq	.L.str467, %r14
	leaq	.L.str470, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 1152(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 1144(%rsp)        # 8-byte Spill
	leaq	.L.str305, %rax
	movq	%rax, 1136(%rsp)        # 8-byte Spill
	leaq	.L.str85170, %rax
	movq	%rax, 1128(%rsp)        # 8-byte Spill
	leaq	.L.str461, %rax
	movq	%rax, 1120(%rsp)        # 8-byte Spill
	movabsq	$582, %rax              # imm = 0x246
	movq	%rax, 1112(%rsp)        # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 1104(%rsp)        # 8-byte Spill
	leaq	.L.str303, %rax
	movq	%rax, 1096(%rsp)        # 8-byte Spill
	leaq	.L.str287172, %rax
	movq	%rax, 1088(%rsp)        # 8-byte Spill
	movabsq	$47, %rax
	movq	%rax, 1080(%rsp)        # 8-byte Spill
	leaq	.L.str302, %rax
	movq	%rax, 1072(%rsp)        # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, 1064(%rsp)        # 8-byte Spill
	leaq	.L.str462, %rax
	movq	%rax, 1056(%rsp)        # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 1048(%rsp)        # 8-byte Spill
	leaq	.L.str1499, %rax
	movq	%rax, 1040(%rsp)        # 8-byte Spill
	movabsq	$570, %rax              # imm = 0x23A
	movq	%rax, 1032(%rsp)        # 8-byte Spill
	movabsq	$8, %rax
	.loc	2 570 0                 # eispack.c:570:0
	movq	%rax, 1024(%rsp)        # 8-byte Spill
	movq	1032(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 1016(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 1008(%rsp)        # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, 1000(%rsp)        # 8-byte Spill
	movq	%r14, %rdx
	movq	1056(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 992(%rsp)         # 8-byte Spill
	movq	%rax, %rcx
	movq	1024(%rsp), %rax        # 8-byte Reload
	movq	%r8, 984(%rsp)          # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 976(%rsp)          # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r15, 968(%rsp)         # 8-byte Spill
	movl	%ebp, 964(%rsp)         # 4-byte Spill
	movl	%r12d, 960(%rsp)        # 4-byte Spill
	movq	%r13, 952(%rsp)         # 8-byte Spill
	movq	%r14, 944(%rsp)         # 8-byte Spill
	movq	%rbx, 936(%rsp)         # 8-byte Spill
	movq	%r10, 928(%rsp)         # 8-byte Spill
	movq	%r11, 920(%rsp)         # 8-byte Spill
	callq	trace_logger_log0
	movq	1016(%rsp), %rdi        # 8-byte Reload
	movq	1144(%rsp), %rsi        # 8-byte Reload
	movq	1048(%rsp), %rdx        # 8-byte Reload
	movq	1000(%rsp), %rcx        # 8-byte Reload
	movq	1040(%rsp), %r8         # 8-byte Reload
	movq	1000(%rsp), %r9         # 8-byte Reload
	movq	1008(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1152(%rsp), %rdi        # 8-byte Reload
	movq	1144(%rsp), %rsi        # 8-byte Reload
	movq	1624(%rsp), %rdx        # 8-byte Reload
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1000(%rsp), %r9         # 8-byte Reload
	movq	1008(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1624(%rsp), %rax        # 8-byte Reload
	addq	$-1, %rax
	.loc	2 577 0                 # eispack.c:577:0
.Ltmp492:
	movq	952(%rsp), %rdi         # 8-byte Reload
	movq	1144(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1056(%rsp), %r8         # 8-byte Reload
	movq	1000(%rsp), %r9         # 8-byte Reload
	movq	1008(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 912(%rsp)         # 8-byte Spill
	callq	trace_logger_log_int
	movq	920(%rsp), %rdi         # 8-byte Reload
	movq	936(%rsp), %rsi         # 8-byte Reload
	movq	944(%rsp), %rdx         # 8-byte Reload
	movq	1072(%rsp), %rcx        # 8-byte Reload
	movq	1104(%rsp), %r8         # 8-byte Reload
	movl	964(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1016(%rsp), %rdi        # 8-byte Reload
	movq	1144(%rsp), %rsi        # 8-byte Reload
	movq	912(%rsp), %rdx         # 8-byte Reload
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1056(%rsp), %r8         # 8-byte Reload
	movq	1000(%rsp), %r9         # 8-byte Reload
	movq	1008(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1152(%rsp), %rdi        # 8-byte Reload
	movq	1144(%rsp), %rsi        # 8-byte Reload
	movq	9216(%rsp), %rdx        # 8-byte Reload
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1128(%rsp), %r8         # 8-byte Reload
	movq	1000(%rsp), %r9         # 8-byte Reload
	movq	1008(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	912(%rsp), %rax         # 8-byte Reload
	shlq	$3, %rax
	movq	9216(%rsp), %rcx        # 8-byte Reload
	addq	%rax, %rcx
	movq	952(%rsp), %rdi         # 8-byte Reload
	movq	1144(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	1152(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 904(%rsp)         # 8-byte Spill
	movq	%rax, %rcx
	movq	1072(%rsp), %r8         # 8-byte Reload
	movq	1000(%rsp), %r9         # 8-byte Reload
	movq	1008(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	920(%rsp), %rdi         # 8-byte Reload
	movq	936(%rsp), %rsi         # 8-byte Reload
	movq	944(%rsp), %rdx         # 8-byte Reload
	movq	1096(%rsp), %rcx        # 8-byte Reload
	movq	1064(%rsp), %r8         # 8-byte Reload
	movl	964(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1152(%rsp), %rdi        # 8-byte Reload
	movq	1144(%rsp), %rsi        # 8-byte Reload
	movq	904(%rsp), %rdx         # 8-byte Reload
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1072(%rsp), %r8         # 8-byte Reload
	movq	1000(%rsp), %r9         # 8-byte Reload
	movq	1008(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	9216(%rsp), %rax        # 8-byte Reload
	movq	1624(%rsp), %rcx        # 8-byte Reload
	vmovsd	-8(%rax,%rcx,8), %xmm0
	movq	952(%rsp), %rdi         # 8-byte Reload
	movq	1144(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 896(%rsp)        # 8-byte Spill
	movq	1152(%rsp), %rdx        # 8-byte Reload
	movq	1096(%rsp), %rcx        # 8-byte Reload
	movq	1000(%rsp), %r8         # 8-byte Reload
	movq	1008(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	920(%rsp), %rdi         # 8-byte Reload
	movq	936(%rsp), %rsi         # 8-byte Reload
	movq	944(%rsp), %rdx         # 8-byte Reload
	movq	992(%rsp), %rcx         # 8-byte Reload
	movq	1080(%rsp), %r8         # 8-byte Reload
	movl	964(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1016(%rsp), %rdi        # 8-byte Reload
	movq	1144(%rsp), %rsi        # 8-byte Reload
	vmovsd	1648(%rsp), %xmm0       # 8-byte Reload
	movq	1152(%rsp), %rdx        # 8-byte Reload
	movq	1088(%rsp), %rcx        # 8-byte Reload
	movq	1000(%rsp), %r8         # 8-byte Reload
	movq	1008(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1152(%rsp), %rdi        # 8-byte Reload
	movq	1144(%rsp), %rsi        # 8-byte Reload
	vmovsd	896(%rsp), %xmm0        # 8-byte Reload
	movq	1152(%rsp), %rdx        # 8-byte Reload
	movq	1096(%rsp), %rcx        # 8-byte Reload
	movq	1000(%rsp), %r8         # 8-byte Reload
	movq	1008(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	1648(%rsp), %xmm0       # 8-byte Reload
	vmovsd	896(%rsp), %xmm1        # 8-byte Reload
	vucomisd	%xmm1, %xmm0
	setb	%al
.Ltmp493:
	.loc	2 582 0                 # eispack.c:582:0
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ebp
	movl	%ebp, %edx
	movq	952(%rsp), %rdi         # 8-byte Reload
	movq	1152(%rsp), %rsi        # 8-byte Reload
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	992(%rsp), %r8          # 8-byte Reload
	movq	1000(%rsp), %r9         # 8-byte Reload
	movq	1008(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 895(%rsp)          # 1-byte Spill
	callq	trace_logger_log_int
	movq	1112(%rsp), %rdi        # 8-byte Reload
	movq	936(%rsp), %rsi         # 8-byte Reload
	movq	944(%rsp), %rdx         # 8-byte Reload
	movq	1136(%rsp), %rcx        # 8-byte Reload
	movq	1104(%rsp), %r8         # 8-byte Reload
	movl	964(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1016(%rsp), %rdi        # 8-byte Reload
	movq	1144(%rsp), %rsi        # 8-byte Reload
	movq	1624(%rsp), %rdx        # 8-byte Reload
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1000(%rsp), %r9         # 8-byte Reload
	movq	1008(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1152(%rsp), %rdi        # 8-byte Reload
	movq	1144(%rsp), %rsi        # 8-byte Reload
	movq	9216(%rsp), %rdx        # 8-byte Reload
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1128(%rsp), %r8         # 8-byte Reload
	movq	1000(%rsp), %r9         # 8-byte Reload
	movq	1008(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1624(%rsp), %rcx        # 8-byte Reload
	shlq	$3, %rcx
	movq	9216(%rsp), %rdx        # 8-byte Reload
	addq	%rcx, %rdx
	.loc	2 577 0                 # eispack.c:577:0
.Ltmp494:
	movq	952(%rsp), %rdi         # 8-byte Reload
	movq	1144(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 880(%rsp)         # 8-byte Spill
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1136(%rsp), %r8         # 8-byte Reload
	movq	1000(%rsp), %r9         # 8-byte Reload
	movq	1008(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	920(%rsp), %rdi         # 8-byte Reload
	movq	936(%rsp), %rsi         # 8-byte Reload
	movq	944(%rsp), %rdx         # 8-byte Reload
	movq	968(%rsp), %rcx         # 8-byte Reload
	movq	1016(%rsp), %r8         # 8-byte Reload
	movl	964(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	976(%rsp), %rdi         # 8-byte Reload
	movq	1000(%rsp), %rsi        # 8-byte Reload
	movq	1000(%rsp), %rdx        # 8-byte Reload
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	928(%rsp), %r8          # 8-byte Reload
	movq	1000(%rsp), %r9         # 8-byte Reload
	movq	1008(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1016(%rsp), %rdi        # 8-byte Reload
	movq	1000(%rsp), %rsi        # 8-byte Reload
	movq	1000(%rsp), %rdx        # 8-byte Reload
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	984(%rsp), %r8          # 8-byte Reload
	movq	1000(%rsp), %r9         # 8-byte Reload
	movq	1008(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	895(%rsp), %al          # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	1152(%rsp), %rdi        # 8-byte Reload
	movq	1152(%rsp), %rsi        # 8-byte Reload
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	992(%rsp), %r8          # 8-byte Reload
	movq	1000(%rsp), %r9         # 8-byte Reload
	movq	1008(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	895(%rsp), %al          # 1-byte Reload
	testb	$1, %al
	jne	.LBB10_26
# BB#25:                                #   in Loop: Header=BB10_5 Depth=1
	movabsq	$1, %rax
	movabsq	$0, %rcx
	leaq	.L.str389, %r8
	leaq	.L.str792, %rdx
	movabsq	$580, %rdi              # imm = 0x244
	leaq	.L.str61146, %rsi
	leaq	.L.str471, %r9
	leaq	.L.str473, %r10
	movabsq	$2, %r11
	movl	$0, %ebx
	movl	$1, %ebp
	movabsq	$64, %r14
	leaq	.L.str287172, %r15
	leaq	.L.str305, %r12
	movabsq	$579, %r13              # imm = 0x243
	movq	%rax, 872(%rsp)         # 8-byte Spill
	leaq	.L.str472, %rax
	movq	%rax, 864(%rsp)         # 8-byte Spill
	movabsq	$28, %rax
	.loc	2 579 0                 # eispack.c:579:0
.Ltmp495:
	movq	%rdi, 856(%rsp)         # 8-byte Spill
	movq	%r13, %rdi
	movq	%rsi, 848(%rsp)         # 8-byte Spill
	movq	%rdx, 840(%rsp)         # 8-byte Spill
	movq	%r9, %rdx
	movq	864(%rsp), %r13         # 8-byte Reload
	movq	%rcx, 832(%rsp)         # 8-byte Spill
	movq	%r13, %rcx
	movq	%r8, 824(%rsp)          # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 816(%rsp)          # 8-byte Spill
	movl	%ebx, %r9d
	movl	$1, (%rsp)
	movl	%ebp, 812(%rsp)         # 4-byte Spill
	movl	%ebx, 808(%rsp)         # 4-byte Spill
	movq	%r14, 800(%rsp)         # 8-byte Spill
	movq	%r12, 792(%rsp)         # 8-byte Spill
	movq	%r15, 784(%rsp)         # 8-byte Spill
	movq	%r11, 776(%rsp)         # 8-byte Spill
	movq	%r10, 768(%rsp)         # 8-byte Spill
	callq	trace_logger_log0
	movq	776(%rsp), %rdi         # 8-byte Reload
	movq	800(%rsp), %rsi         # 8-byte Reload
	movq	880(%rsp), %rdx         # 8-byte Reload
	movq	872(%rsp), %rcx         # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	832(%rsp), %r9          # 8-byte Reload
	movq	840(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	872(%rsp), %rdi         # 8-byte Reload
	movq	800(%rsp), %rsi         # 8-byte Reload
	vmovsd	1648(%rsp), %xmm0       # 8-byte Reload
	movq	872(%rsp), %rdx         # 8-byte Reload
	movq	784(%rsp), %rcx         # 8-byte Reload
	movq	832(%rsp), %r8          # 8-byte Reload
	movq	840(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	880(%rsp), %rax         # 8-byte Reload
	vmovsd	1648(%rsp), %xmm0       # 8-byte Reload
	vmovsd	%xmm0, (%rax)
	.loc	2 580 0                 # eispack.c:580:0
	movq	856(%rsp), %rdi         # 8-byte Reload
	movq	848(%rsp), %rsi         # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	768(%rsp), %rcx         # 8-byte Reload
	movq	776(%rsp), %r8          # 8-byte Reload
	movl	808(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	872(%rsp), %rdi         # 8-byte Reload
	movq	832(%rsp), %rsi         # 8-byte Reload
	movq	832(%rsp), %rdx         # 8-byte Reload
	movq	872(%rsp), %rcx         # 8-byte Reload
	movq	824(%rsp), %r8          # 8-byte Reload
	movq	832(%rsp), %r9          # 8-byte Reload
	movq	840(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	jmp	.LBB10_27
.Ltmp496:
.LBB10_26:                              #   in Loop: Header=BB10_22 Depth=2
	movabsq	$1, %rax
	leaq	.L.str320, %rcx
	movabsq	$0, %rdx
	leaq	.L.str792, %rsi
	movabsq	$2, %rdi
	leaq	.L.str389, %r8
	movabsq	$3, %r9
	leaq	.L.str460, %r10
	movabsq	$570, %r11              # imm = 0x23A
	leaq	.L.str61146, %rbx
	leaq	.L.str463, %r14
	leaq	.L.str475, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 760(%rsp)         # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 752(%rsp)         # 8-byte Spill
	leaq	.L.str319, %rax
	movq	%rax, 744(%rsp)         # 8-byte Spill
	leaq	.L.str1499, %rax
	movq	%rax, 736(%rsp)         # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 728(%rsp)         # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 720(%rsp)         # 8-byte Spill
	leaq	.L.str461, %rax
	movq	%rax, 712(%rsp)         # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, 704(%rsp)         # 8-byte Spill
	leaq	.L.str303, %rax
	movq	%rax, 696(%rsp)         # 8-byte Spill
	leaq	.L.str305, %rax
	movq	%rax, 688(%rsp)         # 8-byte Spill
	movabsq	$582, %rax              # imm = 0x246
	movq	%rax, 680(%rsp)         # 8-byte Spill
	leaq	.L.str474, %rax
	movq	%rax, 672(%rsp)         # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, 664(%rsp)         # 8-byte Spill
	leaq	.L.str318, %rax
	movq	%rax, 656(%rsp)         # 8-byte Spill
	leaq	.L.str464, %rax
	movq	%rax, 648(%rsp)         # 8-byte Spill
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
	movq	%rax, 640(%rsp)         # 8-byte Spill
	movabsq	$577, %rax              # imm = 0x241
	movq	%rax, 632(%rsp)         # 8-byte Spill
	movabsq	$8, %rax
	.loc	2 577 0                 # eispack.c:577:0
	movq	%rax, 624(%rsp)         # 8-byte Spill
	movq	632(%rsp), %rax         # 8-byte Reload
	movq	%rdi, 616(%rsp)         # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 608(%rsp)         # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, 600(%rsp)         # 8-byte Spill
	movq	%r14, %rdx
	movq	656(%rsp), %rax         # 8-byte Reload
	movq	%rcx, 592(%rsp)         # 8-byte Spill
	movq	%rax, %rcx
	movq	624(%rsp), %rax         # 8-byte Reload
	movq	%r8, 584(%rsp)          # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 576(%rsp)          # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r15, 568(%rsp)         # 8-byte Spill
	movl	%ebp, 564(%rsp)         # 4-byte Spill
	movl	%r12d, 560(%rsp)        # 4-byte Spill
	movq	%r13, 552(%rsp)         # 8-byte Spill
	movq	%r14, 544(%rsp)         # 8-byte Spill
	movq	%rbx, 536(%rsp)         # 8-byte Spill
	movq	%r10, 528(%rsp)         # 8-byte Spill
	movq	%r11, 520(%rsp)         # 8-byte Spill
	callq	trace_logger_log0
	movq	616(%rsp), %rdi         # 8-byte Reload
	movq	752(%rsp), %rsi         # 8-byte Reload
	movq	640(%rsp), %rdx         # 8-byte Reload
	movq	600(%rsp), %rcx         # 8-byte Reload
	movq	736(%rsp), %r8          # 8-byte Reload
	movq	600(%rsp), %r9          # 8-byte Reload
	movq	608(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	1632(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	760(%rsp), %rdi         # 8-byte Reload
	movq	752(%rsp), %rsi         # 8-byte Reload
	movq	760(%rsp), %rcx         # 8-byte Reload
	movq	648(%rsp), %r8          # 8-byte Reload
	movq	600(%rsp), %r9          # 8-byte Reload
	movq	608(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	1632(%rsp), %ebp        # 4-byte Reload
	addl	$4294967295, %ebp       # imm = 0xFFFFFFFF
.Ltmp497:
	.loc	2 582 0                 # eispack.c:582:0
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	552(%rsp), %rdi         # 8-byte Reload
	movq	752(%rsp), %rsi         # 8-byte Reload
	movq	760(%rsp), %rcx         # 8-byte Reload
	movq	656(%rsp), %r8          # 8-byte Reload
	movq	600(%rsp), %r9          # 8-byte Reload
	movq	608(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%ebp, 516(%rsp)         # 4-byte Spill
	callq	trace_logger_log_int
	movq	680(%rsp), %rdi         # 8-byte Reload
	movq	536(%rsp), %rsi         # 8-byte Reload
	movq	544(%rsp), %rdx         # 8-byte Reload
	movq	672(%rsp), %rcx         # 8-byte Reload
	movq	664(%rsp), %r8          # 8-byte Reload
	movl	564(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	616(%rsp), %rdi         # 8-byte Reload
	movq	720(%rsp), %rsi         # 8-byte Reload
	movq	880(%rsp), %rdx         # 8-byte Reload
	movq	760(%rsp), %rcx         # 8-byte Reload
	movq	688(%rsp), %r8          # 8-byte Reload
	movq	600(%rsp), %r9          # 8-byte Reload
	movq	608(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	760(%rsp), %rdi         # 8-byte Reload
	movq	720(%rsp), %rsi         # 8-byte Reload
	vmovsd	896(%rsp), %xmm0        # 8-byte Reload
	movq	760(%rsp), %rdx         # 8-byte Reload
	movq	696(%rsp), %rcx         # 8-byte Reload
	movq	600(%rsp), %r8          # 8-byte Reload
	movq	608(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	880(%rsp), %rax         # 8-byte Reload
	vmovsd	896(%rsp), %xmm0        # 8-byte Reload
	vmovsd	%xmm0, (%rax)
.Ltmp498:
	#DEBUG_VALUE: tqlrat:i <- [RSP+516]
	.loc	2 570 0                 # eispack.c:570:0
	movq	520(%rsp), %rdi         # 8-byte Reload
	movq	536(%rsp), %rsi         # 8-byte Reload
	movq	544(%rsp), %rdx         # 8-byte Reload
	movq	744(%rsp), %rcx         # 8-byte Reload
	movq	704(%rsp), %r8          # 8-byte Reload
	movl	564(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	760(%rsp), %rdi         # 8-byte Reload
	movq	720(%rsp), %rsi         # 8-byte Reload
	movq	1624(%rsp), %rdx        # 8-byte Reload
	movq	760(%rsp), %rcx         # 8-byte Reload
	movq	712(%rsp), %r8          # 8-byte Reload
	movq	600(%rsp), %r9          # 8-byte Reload
	movq	608(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1624(%rsp), %rax        # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	552(%rsp), %rdi         # 8-byte Reload
	movq	752(%rsp), %rsi         # 8-byte Reload
	movq	760(%rsp), %rcx         # 8-byte Reload
	movq	744(%rsp), %r8          # 8-byte Reload
	movq	600(%rsp), %r9          # 8-byte Reload
	movq	608(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 512(%rsp)         # 4-byte Spill
	callq	trace_logger_log_int
	movq	520(%rsp), %rdi         # 8-byte Reload
	movq	536(%rsp), %rsi         # 8-byte Reload
	movq	544(%rsp), %rdx         # 8-byte Reload
	movq	592(%rsp), %rcx         # 8-byte Reload
	movq	728(%rsp), %r8          # 8-byte Reload
	movl	564(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	616(%rsp), %rdi         # 8-byte Reload
	movq	752(%rsp), %rsi         # 8-byte Reload
	movq	600(%rsp), %rdx         # 8-byte Reload
	movq	600(%rsp), %rcx         # 8-byte Reload
	movq	736(%rsp), %r8          # 8-byte Reload
	movq	600(%rsp), %r9          # 8-byte Reload
	movq	608(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	512(%rsp), %ebp         # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	760(%rsp), %rdi         # 8-byte Reload
	movq	752(%rsp), %rsi         # 8-byte Reload
	movq	760(%rsp), %rcx         # 8-byte Reload
	movq	744(%rsp), %r8          # 8-byte Reload
	movq	600(%rsp), %r9          # 8-byte Reload
	movq	608(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	512(%rsp), %ebp         # 4-byte Reload
	cmpl	$0, %ebp
	setg	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %r12d
	movl	%r12d, %edx
	movq	552(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	760(%rsp), %rcx         # 8-byte Reload
	movq	592(%rsp), %r8          # 8-byte Reload
	movq	600(%rsp), %r9          # 8-byte Reload
	movq	608(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 511(%rsp)          # 1-byte Spill
	callq	trace_logger_log_int
	movq	520(%rsp), %rdi         # 8-byte Reload
	movq	536(%rsp), %rsi         # 8-byte Reload
	movq	544(%rsp), %rdx         # 8-byte Reload
	movq	568(%rsp), %rcx         # 8-byte Reload
	movq	616(%rsp), %r8          # 8-byte Reload
	movl	564(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	576(%rsp), %rdi         # 8-byte Reload
	movq	600(%rsp), %rsi         # 8-byte Reload
	movq	600(%rsp), %rdx         # 8-byte Reload
	movq	760(%rsp), %rcx         # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	600(%rsp), %r9          # 8-byte Reload
	movq	608(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	616(%rsp), %rdi         # 8-byte Reload
	movq	600(%rsp), %rsi         # 8-byte Reload
	movq	600(%rsp), %rdx         # 8-byte Reload
	movq	760(%rsp), %rcx         # 8-byte Reload
	movq	584(%rsp), %r8          # 8-byte Reload
	movq	600(%rsp), %r9          # 8-byte Reload
	movq	608(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	511(%rsp), %al          # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	760(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	760(%rsp), %rcx         # 8-byte Reload
	movq	592(%rsp), %r8          # 8-byte Reload
	movq	600(%rsp), %r9          # 8-byte Reload
	movq	608(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	511(%rsp), %al          # 1-byte Reload
	testb	$1, %al
	movq	912(%rsp), %rcx         # 8-byte Reload
	movl	516(%rsp), %ebp         # 4-byte Reload
	movq	%rcx, 1640(%rsp)        # 8-byte Spill
	movl	%ebp, 1636(%rsp)        # 4-byte Spill
	jne	.LBB10_22
.Ltmp499:
.LBB10_27:                              # %.loopexit17
                                        #   in Loop: Header=BB10_5 Depth=1
	movl	$0, %eax
	movabsq	$1, %rcx
	leaq	.L.str323, %rdx
	movabsq	$0, %rsi
	leaq	.L.str792, %rdi
	movabsq	$2, %r8
	leaq	.L.str374, %r9
	movabsq	$3, %r10
	leaq	.L.str386, %r11
	movabsq	$466, %rbx              # imm = 0x1D2
	leaq	.L.str61146, %r14
	leaq	.L.str389, %r15
	leaq	.L.str476, %r12
	movl	$1, %ebp
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rcx, 496(%rsp)         # 8-byte Spill
	movabsq	$32, %rcx
	movq	%rcx, 488(%rsp)         # 8-byte Spill
	leaq	.L.str391, %rcx
	movq	%rcx, 480(%rsp)         # 8-byte Spill
	leaq	.L.str390, %rcx
	movq	%rcx, 472(%rsp)         # 8-byte Spill
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	movq	%rcx, 464(%rsp)         # 8-byte Spill
	leaq	.L.str1499, %rcx
	movq	%rcx, 456(%rsp)         # 8-byte Spill
	movabsq	$8, %rcx
	movq	%rcx, 448(%rsp)         # 8-byte Spill
	movabsq	$64, %rcx
	movq	%rcx, 440(%rsp)         # 8-byte Spill
	leaq	.L.str393, %rcx
	movq	%rcx, 432(%rsp)         # 8-byte Spill
	leaq	.L.str392, %rcx
	movq	%rcx, 424(%rsp)         # 8-byte Spill
	leaq	.L.str322, %rcx
	movq	%rcx, 416(%rsp)         # 8-byte Spill
	leaq	.L.str51136, %rcx
	movq	%rcx, 408(%rsp)         # 8-byte Spill
	movabsq	$46, %rcx
	movq	%rcx, 400(%rsp)         # 8-byte Spill
	leaq	.L.str388173, %rcx
	movq	%rcx, 392(%rsp)         # 8-byte Spill
	movabsq	$33, %rcx
	movq	%rcx, 384(%rsp)         # 8-byte Spill
	leaq	.L.str321, %rcx
	movq	%rcx, 376(%rsp)         # 8-byte Spill
	leaq	.L.str398, %rcx
	movq	%rcx, 368(%rsp)         # 8-byte Spill
	leaq	.L.str387, %rcx
	.loc	2 466 0                 # eispack.c:466:0
	movq	%rdi, 360(%rsp)         # 8-byte Spill
	movq	%rbx, %rdi
	movq	%rsi, 352(%rsp)         # 8-byte Spill
	movq	%r14, %rsi
	movq	%rdx, 344(%rsp)         # 8-byte Spill
	movq	%r15, %rdx
	movq	%rcx, 336(%rsp)         # 8-byte Spill
	movq	392(%rsp), %rcx         # 8-byte Reload
	movq	%r8, 328(%rsp)          # 8-byte Spill
	movq	448(%rsp), %r8          # 8-byte Reload
	movq	%r9, 320(%rsp)          # 8-byte Spill
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movl	%eax, 316(%rsp)         # 4-byte Spill
	movq	%r15, 304(%rsp)         # 8-byte Spill
	movq	%r12, 296(%rsp)         # 8-byte Spill
	movl	%ebp, 292(%rsp)         # 4-byte Spill
	movq	%r13, 280(%rsp)         # 8-byte Spill
	movq	%r14, 272(%rsp)         # 8-byte Spill
	movq	%rbx, 264(%rsp)         # 8-byte Spill
	movq	%r10, 256(%rsp)         # 8-byte Spill
	movq	%r11, 248(%rsp)         # 8-byte Spill
	callq	trace_logger_log0
	movq	328(%rsp), %rdi         # 8-byte Reload
	movq	440(%rsp), %rsi         # 8-byte Reload
	movq	496(%rsp), %rdx         # 8-byte Reload
	movq	352(%rsp), %rcx         # 8-byte Reload
	movq	456(%rsp), %r8          # 8-byte Reload
	movq	352(%rsp), %r9          # 8-byte Reload
	movq	360(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	496(%rsp), %rdi         # 8-byte Reload
	movq	440(%rsp), %rsi         # 8-byte Reload
	movq	7640(%rsp), %rdx        # 8-byte Reload
	movq	496(%rsp), %rcx         # 8-byte Reload
	movq	336(%rsp), %r8          # 8-byte Reload
	movq	352(%rsp), %r9          # 8-byte Reload
	movq	360(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	7640(%rsp), %rcx        # 8-byte Reload
	addq	$1, %rcx
	movq	280(%rsp), %rdi         # 8-byte Reload
	movq	440(%rsp), %rsi         # 8-byte Reload
	movq	%rcx, %rdx
	movq	496(%rsp), %r8          # 8-byte Reload
	movq	%rcx, 240(%rsp)         # 8-byte Spill
	movq	%r8, %rcx
	movq	392(%rsp), %r8          # 8-byte Reload
	movq	352(%rsp), %r9          # 8-byte Reload
	movq	360(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	264(%rsp), %rdi         # 8-byte Reload
	movq	272(%rsp), %rsi         # 8-byte Reload
	movq	304(%rsp), %rdx         # 8-byte Reload
	movq	376(%rsp), %rcx         # 8-byte Reload
	movq	448(%rsp), %r8          # 8-byte Reload
	movl	316(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	328(%rsp), %rdi         # 8-byte Reload
	movq	488(%rsp), %rsi         # 8-byte Reload
	movq	496(%rsp), %rdx         # 8-byte Reload
	movq	352(%rsp), %rcx         # 8-byte Reload
	movq	456(%rsp), %r8          # 8-byte Reload
	movq	352(%rsp), %r9          # 8-byte Reload
	movq	360(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	8012(%rsp), %eax        # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	496(%rsp), %rdi         # 8-byte Reload
	movq	488(%rsp), %rsi         # 8-byte Reload
	movq	496(%rsp), %rcx         # 8-byte Reload
	movq	368(%rsp), %r8          # 8-byte Reload
	movq	352(%rsp), %r9          # 8-byte Reload
	movq	360(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	8012(%rsp), %eax        # 4-byte Reload
	addl	$1, %eax
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	280(%rsp), %rdi         # 8-byte Reload
	movq	488(%rsp), %rsi         # 8-byte Reload
	movq	496(%rsp), %rcx         # 8-byte Reload
	movq	376(%rsp), %r8          # 8-byte Reload
	movq	352(%rsp), %r9          # 8-byte Reload
	movq	360(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, 236(%rsp)         # 4-byte Spill
	callq	trace_logger_log_int
.Ltmp500:
	#DEBUG_VALUE: tqlrat:l <- [RSP+236]
	movq	264(%rsp), %rdi         # 8-byte Reload
	movq	272(%rsp), %rsi         # 8-byte Reload
	movq	304(%rsp), %rdx         # 8-byte Reload
	movq	416(%rsp), %rcx         # 8-byte Reload
	movq	384(%rsp), %r8          # 8-byte Reload
	movl	316(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	496(%rsp), %rdi         # 8-byte Reload
	movq	440(%rsp), %rsi         # 8-byte Reload
	movq	240(%rsp), %rdx         # 8-byte Reload
	movq	496(%rsp), %rcx         # 8-byte Reload
	movq	392(%rsp), %r8          # 8-byte Reload
	movq	352(%rsp), %r9          # 8-byte Reload
	movq	360(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	240(%rsp), %rcx         # 8-byte Reload
	movl	%ecx, %eax
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	280(%rsp), %rdi         # 8-byte Reload
	movq	488(%rsp), %rsi         # 8-byte Reload
	movq	496(%rsp), %rcx         # 8-byte Reload
	movq	416(%rsp), %r8          # 8-byte Reload
	movq	352(%rsp), %r9          # 8-byte Reload
	movq	360(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, 232(%rsp)         # 4-byte Spill
	callq	trace_logger_log_int
	movq	264(%rsp), %rdi         # 8-byte Reload
	movq	272(%rsp), %rsi         # 8-byte Reload
	movq	304(%rsp), %rdx         # 8-byte Reload
	movq	344(%rsp), %rcx         # 8-byte Reload
	movq	400(%rsp), %r8          # 8-byte Reload
	movl	316(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	9228(%rsp), %eax        # 4-byte Reload
	movl	%eax, %r9d
	movl	%r9d, %edx
	movq	328(%rsp), %rdi         # 8-byte Reload
	movq	488(%rsp), %rsi         # 8-byte Reload
	movq	496(%rsp), %rcx         # 8-byte Reload
	movq	408(%rsp), %r8          # 8-byte Reload
	movq	352(%rsp), %r9          # 8-byte Reload
	movq	360(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	232(%rsp), %eax         # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	496(%rsp), %rdi         # 8-byte Reload
	movq	488(%rsp), %rsi         # 8-byte Reload
	movq	496(%rsp), %rcx         # 8-byte Reload
	movq	416(%rsp), %r8          # 8-byte Reload
	movq	352(%rsp), %r9          # 8-byte Reload
	movq	360(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	232(%rsp), %eax         # 4-byte Reload
	movl	9228(%rsp), %ebp        # 4-byte Reload
	cmpl	%ebp, %eax
	setl	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	280(%rsp), %rdi         # 8-byte Reload
	movq	496(%rsp), %rsi         # 8-byte Reload
	movq	496(%rsp), %rcx         # 8-byte Reload
	movq	344(%rsp), %r8          # 8-byte Reload
	movq	352(%rsp), %r9          # 8-byte Reload
	movq	360(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 231(%rsp)          # 1-byte Spill
	callq	trace_logger_log_int
	movq	264(%rsp), %rdi         # 8-byte Reload
	movq	272(%rsp), %rsi         # 8-byte Reload
	movq	304(%rsp), %rdx         # 8-byte Reload
	movq	432(%rsp), %rcx         # 8-byte Reload
	movq	448(%rsp), %r8          # 8-byte Reload
	movl	316(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	328(%rsp), %rdi         # 8-byte Reload
	movq	440(%rsp), %rsi         # 8-byte Reload
	movq	496(%rsp), %rdx         # 8-byte Reload
	movq	352(%rsp), %rcx         # 8-byte Reload
	movq	456(%rsp), %r8          # 8-byte Reload
	movq	352(%rsp), %r9          # 8-byte Reload
	movq	360(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	496(%rsp), %rdi         # 8-byte Reload
	movq	440(%rsp), %rsi         # 8-byte Reload
	movq	8016(%rsp), %rdx        # 8-byte Reload
	movq	496(%rsp), %rcx         # 8-byte Reload
	movq	424(%rsp), %r8          # 8-byte Reload
	movq	352(%rsp), %r9          # 8-byte Reload
	movq	360(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	8016(%rsp), %rcx        # 8-byte Reload
	addq	$1, %rcx
	movq	280(%rsp), %rdi         # 8-byte Reload
	movq	440(%rsp), %rsi         # 8-byte Reload
	movq	%rcx, %rdx
	movq	496(%rsp), %r8          # 8-byte Reload
	movq	%rcx, 216(%rsp)         # 8-byte Spill
	movq	%r8, %rcx
	movq	432(%rsp), %r8          # 8-byte Reload
	movq	352(%rsp), %r9          # 8-byte Reload
	movq	360(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	264(%rsp), %rdi         # 8-byte Reload
	movq	272(%rsp), %rsi         # 8-byte Reload
	movq	304(%rsp), %rdx         # 8-byte Reload
	movq	480(%rsp), %rcx         # 8-byte Reload
	movq	448(%rsp), %r8          # 8-byte Reload
	movl	316(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	328(%rsp), %rdi         # 8-byte Reload
	movq	488(%rsp), %rsi         # 8-byte Reload
	movq	464(%rsp), %rdx         # 8-byte Reload
	movq	352(%rsp), %rcx         # 8-byte Reload
	movq	456(%rsp), %r8          # 8-byte Reload
	movq	352(%rsp), %r9          # 8-byte Reload
	movq	360(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	7636(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %eax
	movl	%eax, %edx
	movq	496(%rsp), %rdi         # 8-byte Reload
	movq	488(%rsp), %rsi         # 8-byte Reload
	movq	496(%rsp), %rcx         # 8-byte Reload
	movq	472(%rsp), %r8          # 8-byte Reload
	movq	352(%rsp), %r9          # 8-byte Reload
	movq	360(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	7636(%rsp), %eax        # 4-byte Reload
	addl	$4294967295, %eax       # imm = 0xFFFFFFFF
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	280(%rsp), %rdi         # 8-byte Reload
	movq	488(%rsp), %rsi         # 8-byte Reload
	movq	496(%rsp), %rcx         # 8-byte Reload
	movq	480(%rsp), %r8          # 8-byte Reload
	movq	352(%rsp), %r9          # 8-byte Reload
	movq	360(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, 212(%rsp)         # 4-byte Spill
	callq	trace_logger_log_int
	movq	264(%rsp), %rdi         # 8-byte Reload
	movq	272(%rsp), %rsi         # 8-byte Reload
	movq	304(%rsp), %rdx         # 8-byte Reload
	movq	296(%rsp), %rcx         # 8-byte Reload
	movq	328(%rsp), %r8          # 8-byte Reload
	movl	316(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	256(%rsp), %rdi         # 8-byte Reload
	movq	352(%rsp), %rsi         # 8-byte Reload
	movq	352(%rsp), %rdx         # 8-byte Reload
	movq	496(%rsp), %rcx         # 8-byte Reload
	movq	248(%rsp), %r8          # 8-byte Reload
	movq	352(%rsp), %r9          # 8-byte Reload
	movq	360(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	328(%rsp), %rdi         # 8-byte Reload
	movq	352(%rsp), %rsi         # 8-byte Reload
	movq	352(%rsp), %rdx         # 8-byte Reload
	movq	496(%rsp), %rcx         # 8-byte Reload
	movq	320(%rsp), %r8          # 8-byte Reload
	movq	352(%rsp), %r9          # 8-byte Reload
	movq	360(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	231(%rsp), %al          # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	496(%rsp), %rdi         # 8-byte Reload
	movq	496(%rsp), %rsi         # 8-byte Reload
	movq	496(%rsp), %rcx         # 8-byte Reload
	movq	344(%rsp), %r8          # 8-byte Reload
	movq	352(%rsp), %r9          # 8-byte Reload
	movq	360(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	231(%rsp), %al          # 1-byte Reload
	testb	$1, %al
	movq	240(%rsp), %rcx         # 8-byte Reload
	movl	212(%rsp), %ebp         # 4-byte Reload
	movq	216(%rsp), %rdx         # 8-byte Reload
	vmovsd	7032(%rsp), %xmm0       # 8-byte Reload
	vmovsd	7024(%rsp), %xmm1       # 8-byte Reload
	movl	236(%rsp), %eax         # 4-byte Reload
	vmovsd	1728(%rsp), %xmm2       # 8-byte Reload
	vmovsd	7016(%rsp), %xmm3       # 8-byte Reload
	movl	316(%rsp), %esi         # 4-byte Reload
	movl	%eax, 8044(%rsp)        # 4-byte Spill
	movq	%rcx, 8072(%rsp)        # 8-byte Spill
	movl	%ebp, 8080(%rsp)        # 4-byte Spill
	movq	%rdx, 8064(%rsp)        # 8-byte Spill
	vmovsd	%xmm0, 8056(%rsp)       # 8-byte Spill
	vmovsd	%xmm1, 8048(%rsp)       # 8-byte Spill
	vmovsd	%xmm2, 8032(%rsp)       # 8-byte Spill
	vmovsd	%xmm3, 8024(%rsp)       # 8-byte Spill
	movl	%esi, 9112(%rsp)        # 4-byte Spill
	jne	.LBB10_5
.Ltmp501:
.LBB10_28:                              # %.loopexit24
	movl	9112(%rsp), %eax        # 4-byte Reload
	movabsq	$1, %rcx
	movabsq	$32, %rdx
	leaq	.L.str71156, %rsi
	movabsq	$0, %rdi
	leaq	.L.str792, %r8
	movabsq	$587, %r9               # imm = 0x24B
	leaq	.L.str61146, %r10
	leaq	.L.str374, %r11
	leaq	.L.str477, %rbx
	movl	$0, %ebp
	movl	$1, %r14d
	movabsq	$19134, %r15            # imm = 0x4ABE
	leaq	.L.str423, %r12
	leaq	.L.str166, %r13
	movq	%rcx, 200(%rsp)         # 8-byte Spill
	movabsq	$2, %rcx
	movq	%rcx, 192(%rsp)         # 8-byte Spill
	leaq	.L.str1499, %rcx
	movq	%rcx, 184(%rsp)         # 8-byte Spill
	leaq	.L.str489, %rcx
	movq	%rcx, 176(%rsp)         # 8-byte Spill
	movabsq	$3, %rcx
	movq	%rcx, 168(%rsp)         # 8-byte Spill
	leaq	.L.str389, %rcx
	movq	%rcx, 160(%rsp)         # 8-byte Spill
	movabsq	$4, %rcx
	movq	%rcx, 152(%rsp)         # 8-byte Spill
	leaq	.L.str378, %rcx
	movq	%rcx, 144(%rsp)         # 8-byte Spill
	movabsq	$5, %rcx
	movq	%rcx, 136(%rsp)         # 8-byte Spill
	leaq	.L.str383, %rcx
	movq	%rcx, 128(%rsp)         # 8-byte Spill
	movabsq	$-1, %rcx
	movq	%rcx, 120(%rsp)         # 8-byte Spill
	movabsq	$48, %rcx
	.loc	2 587 0                 # eispack.c:587:0
	movq	%rcx, 112(%rsp)         # 8-byte Spill
	movq	120(%rsp), %rcx         # 8-byte Reload
	movq	%rdi, 104(%rsp)         # 8-byte Spill
	movq	%rcx, %rdi
	movq	%rsi, 96(%rsp)          # 8-byte Spill
	movq	%r10, %rsi
	movq	%rdx, 88(%rsp)          # 8-byte Spill
	movq	%r11, %rdx
	movq	96(%rsp), %rcx          # 8-byte Reload
	movq	%r8, 80(%rsp)           # 8-byte Spill
	movq	112(%rsp), %r8          # 8-byte Reload
	movq	%r9, 72(%rsp)           # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movl	%eax, 68(%rsp)          # 4-byte Spill
	movl	%r14d, 64(%rsp)         # 4-byte Spill
	movq	%r15, 56(%rsp)          # 8-byte Spill
	movq	%r12, 48(%rsp)          # 8-byte Spill
	movq	%r13, 40(%rsp)          # 8-byte Spill
	movl	%ebp, 36(%rsp)          # 4-byte Spill
	movq	%rbx, 24(%rsp)          # 8-byte Spill
	movq	%r10, 16(%rsp)          # 8-byte Spill
	movq	%r11, 8(%rsp)           # 8-byte Spill
	callq	trace_logger_log0
	movq	136(%rsp), %rdi         # 8-byte Reload
	movq	88(%rsp), %rsi          # 8-byte Reload
	movq	104(%rsp), %rdx         # 8-byte Reload
	movq	104(%rsp), %rcx         # 8-byte Reload
	movq	184(%rsp), %r8          # 8-byte Reload
	movq	200(%rsp), %r9          # 8-byte Reload
	movq	128(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	152(%rsp), %rdi         # 8-byte Reload
	movq	88(%rsp), %rsi          # 8-byte Reload
	movq	104(%rsp), %rdx         # 8-byte Reload
	movq	104(%rsp), %rcx         # 8-byte Reload
	movq	184(%rsp), %r8          # 8-byte Reload
	movq	200(%rsp), %r9          # 8-byte Reload
	movq	144(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	168(%rsp), %rdi         # 8-byte Reload
	movq	88(%rsp), %rsi          # 8-byte Reload
	movq	104(%rsp), %rdx         # 8-byte Reload
	movq	104(%rsp), %rcx         # 8-byte Reload
	movq	184(%rsp), %r8          # 8-byte Reload
	movq	200(%rsp), %r9          # 8-byte Reload
	movq	160(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	192(%rsp), %rdi         # 8-byte Reload
	movq	88(%rsp), %rsi          # 8-byte Reload
	movq	104(%rsp), %rdx         # 8-byte Reload
	movq	104(%rsp), %rcx         # 8-byte Reload
	movq	184(%rsp), %r8          # 8-byte Reload
	movq	200(%rsp), %r9          # 8-byte Reload
	movq	176(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	200(%rsp), %rdi         # 8-byte Reload
	movq	88(%rsp), %rsi          # 8-byte Reload
	movq	104(%rsp), %rdx         # 8-byte Reload
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	40(%rsp), %r8           # 8-byte Reload
	movq	200(%rsp), %r9          # 8-byte Reload
	movq	48(%rsp), %r10          # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	68(%rsp), %eax          # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	56(%rsp), %rdi          # 8-byte Reload
	movq	88(%rsp), %rsi          # 8-byte Reload
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	96(%rsp), %r8           # 8-byte Reload
	movq	104(%rsp), %r9          # 8-byte Reload
	movq	48(%rsp), %r10          # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	72(%rsp), %rdi          # 8-byte Reload
	movq	16(%rsp), %rsi          # 8-byte Reload
	movq	8(%rsp), %rdx           # 8-byte Reload
	movq	24(%rsp), %rcx          # 8-byte Reload
	movq	200(%rsp), %r8          # 8-byte Reload
	movl	36(%rsp), %r9d          # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	68(%rsp), %eax          # 4-byte Reload
	movl	%eax, %r9d
	movl	%r9d, %edx
	movq	200(%rsp), %rdi         # 8-byte Reload
	movq	88(%rsp), %rsi          # 8-byte Reload
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	96(%rsp), %r8           # 8-byte Reload
	movq	104(%rsp), %r9          # 8-byte Reload
	movq	80(%rsp), %r10          # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	68(%rsp), %eax          # 4-byte Reload
	addq	$9336, %rsp             # imm = 0x2478
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
.Ltmp502:
.Ltmp503:
	.size	tqlrat, .Ltmp503-tqlrat
.Lfunc_end10:
	.cfi_endproc

	.globl	trbak1
	.align	16, 0x90
	.type	trbak1,@function
trbak1:                                 # @trbak1
	.cfi_startproc
.Lfunc_begin11:
	.loc	2 652 0                 # eispack.c:652:0
# BB#0:
	pushq	%rbp
.Ltmp511:
	.cfi_def_cfa_offset 16
	pushq	%r15
.Ltmp512:
	.cfi_def_cfa_offset 24
	pushq	%r14
.Ltmp513:
	.cfi_def_cfa_offset 32
	pushq	%r13
.Ltmp514:
	.cfi_def_cfa_offset 40
	pushq	%r12
.Ltmp515:
	.cfi_def_cfa_offset 48
	pushq	%rbx
.Ltmp516:
	.cfi_def_cfa_offset 56
	subq	$3080, %rsp             # imm = 0xC08
.Ltmp517:
	.cfi_def_cfa_offset 3136
.Ltmp518:
	.cfi_offset %rbx, -56
.Ltmp519:
	.cfi_offset %r12, -48
.Ltmp520:
	.cfi_offset %r13, -40
.Ltmp521:
	.cfi_offset %r14, -32
.Ltmp522:
	.cfi_offset %r15, -24
.Ltmp523:
	.cfi_offset %rbp, -16
	movabsq	$1, %rax
	leaq	.L.str483, %r9
	movabsq	$0, %r10
	leaq	.L.str792, %r11
	movabsq	$2, %rbx
	leaq	.L.str486, %r14
	movabsq	$3, %r15
	leaq	.L.str485, %r12
	movabsq	$659, %r13              # imm = 0x293
	leaq	.L.str478, %rbp
	movq	%rax, 3072(%rsp)        # 8-byte Spill
	leaq	.L.str489, %rax
	movq	%rax, 3064(%rsp)        # 8-byte Spill
	leaq	.L.str484, %rax
	movl	%ecx, 3060(%rsp)        # 4-byte Spill
	movl	$0, %ecx
	movl	%ecx, 3056(%rsp)        # 4-byte Spill
	movl	$1, %ecx
	movq	%rax, 3048(%rsp)        # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 3040(%rsp)        # 8-byte Spill
	leaq	.L.str482, %rax
	movq	%rax, 3032(%rsp)        # 8-byte Spill
	leaq	.L.str590, %rax
	movq	%rax, 3024(%rsp)        # 8-byte Spill
	movabsq	$23, %rax
	movq	%rax, 3016(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 3008(%rsp)        # 8-byte Spill
	leaq	.L.str51136, %rax
	movq	%rax, 3000(%rsp)        # 8-byte Spill
	leaq	.L.str1499, %rax
	movq	%rax, 2992(%rsp)        # 8-byte Spill
	movabsq	$669, %rax              # imm = 0x29D
	movq	%rax, 2984(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 2976(%rsp)        # 8-byte Spill
	leaq	.L.str481, %rax
	movq	%rax, 2968(%rsp)        # 8-byte Spill
	leaq	.L.str479, %rax
	movq	%rax, 2960(%rsp)        # 8-byte Spill
	leaq	.L.str480, %rax
	movq	%rax, 2952(%rsp)        # 8-byte Spill
	movabsq	$24601, %rax            # imm = 0x6019
	movq	%rax, 2944(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 2936(%rsp)        # 8-byte Spill
	leaq	.L.str73158, %rax
	movq	%rax, 2928(%rsp)        # 8-byte Spill
	leaq	.L.str160, %rax
	movq	%rax, 2920(%rsp)        # 8-byte Spill
	leaq	.L.str893, %rax
	.loc	2 590 0 prologue_end    # eispack.c:590:0
.Ltmp524:
	movl	%ecx, 2916(%rsp)        # 4-byte Spill
	movl	%edi, %ecx
                                        # kill: RCX<def> ECX<kill>
	movq	%rax, 2904(%rsp)        # 8-byte Spill
	movq	2944(%rsp), %rax        # 8-byte Reload
	movl	%edi, 2900(%rsp)        # 4-byte Spill
	movq	%rax, %rdi
	movq	3008(%rsp), %rax        # 8-byte Reload
	movq	%rsi, 2888(%rsp)        # 8-byte Spill
	movq	%rax, %rsi
	movq	%rdx, 2880(%rsp)        # 8-byte Spill
	movq	%rcx, %rdx
	movq	3072(%rsp), %rcx        # 8-byte Reload
	movq	3000(%rsp), %rax        # 8-byte Reload
	movq	%r8, 2872(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 2864(%rsp)         # 8-byte Spill
	movq	%r10, %r9
	movq	%r11, (%rsp)
	movq	%rbp, 2856(%rsp)        # 8-byte Spill
	movq	%r15, 2848(%rsp)        # 8-byte Spill
	movq	%r13, 2840(%rsp)        # 8-byte Spill
	movq	%r12, 2832(%rsp)        # 8-byte Spill
	movq	%r14, 2824(%rsp)        # 8-byte Spill
	movq	%rbx, 2816(%rsp)        # 8-byte Spill
	movq	%r10, 2808(%rsp)        # 8-byte Spill
	movq	%r11, 2800(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	2944(%rsp), %rdi        # 8-byte Reload
	movq	2936(%rsp), %rsi        # 8-byte Reload
	movq	2888(%rsp), %rdx        # 8-byte Reload
	movq	3072(%rsp), %rcx        # 8-byte Reload
	movq	2904(%rsp), %r8         # 8-byte Reload
	movq	2808(%rsp), %r9         # 8-byte Reload
	movq	2800(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2944(%rsp), %rdi        # 8-byte Reload
	movq	2936(%rsp), %rsi        # 8-byte Reload
	movq	2880(%rsp), %rdx        # 8-byte Reload
	movq	3072(%rsp), %rcx        # 8-byte Reload
	movq	2920(%rsp), %r8         # 8-byte Reload
	movq	2808(%rsp), %r9         # 8-byte Reload
	movq	2800(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	3060(%rsp), %esi        # 4-byte Reload
	movl	%esi, %esi
	movl	%esi, %edx
	movq	2944(%rsp), %rdi        # 8-byte Reload
	movq	3008(%rsp), %rsi        # 8-byte Reload
	movq	3072(%rsp), %rcx        # 8-byte Reload
	movq	2952(%rsp), %r8         # 8-byte Reload
	movq	2808(%rsp), %r9         # 8-byte Reload
	movq	2800(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2944(%rsp), %rdi        # 8-byte Reload
	movq	2936(%rsp), %rsi        # 8-byte Reload
	movq	2872(%rsp), %rdx        # 8-byte Reload
	movq	3072(%rsp), %rcx        # 8-byte Reload
	movq	2928(%rsp), %r8         # 8-byte Reload
	movq	2808(%rsp), %r9         # 8-byte Reload
	movq	2800(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	#DEBUG_VALUE: trbak1:n <- [RSP+2900]
	#DEBUG_VALUE: trbak1:a <- [RSP+2888]
	#DEBUG_VALUE: trbak1:e <- [RSP+2880]
	#DEBUG_VALUE: trbak1:m <- [RSP+3060]
	#DEBUG_VALUE: trbak1:z <- [RSP+2872]
	.loc	2 659 0                 # eispack.c:659:0
.Ltmp525:
	movq	2840(%rsp), %rdi        # 8-byte Reload
	movq	2856(%rsp), %rsi        # 8-byte Reload
	movq	3064(%rsp), %rdx        # 8-byte Reload
	movq	2960(%rsp), %rcx        # 8-byte Reload
	movq	2976(%rsp), %r8         # 8-byte Reload
	movl	3056(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2816(%rsp), %rdi        # 8-byte Reload
	movq	3008(%rsp), %rsi        # 8-byte Reload
	movq	2808(%rsp), %rdx        # 8-byte Reload
	movq	2808(%rsp), %rcx        # 8-byte Reload
	movq	2992(%rsp), %r8         # 8-byte Reload
	movq	2808(%rsp), %r9         # 8-byte Reload
	movq	2800(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	3060(%rsp), %esi        # 4-byte Reload
	movl	%esi, %esi
	movl	%esi, %edx
	movq	3072(%rsp), %rdi        # 8-byte Reload
	movq	3008(%rsp), %rsi        # 8-byte Reload
	movq	3072(%rsp), %rcx        # 8-byte Reload
	movq	2952(%rsp), %r8         # 8-byte Reload
	movq	2808(%rsp), %r9         # 8-byte Reload
	movq	2800(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	3060(%rsp), %esi        # 4-byte Reload
	cmpl	$0, %esi
	setg	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	3040(%rsp), %rdi        # 8-byte Reload
	movq	3072(%rsp), %rsi        # 8-byte Reload
	movq	3072(%rsp), %rcx        # 8-byte Reload
	movq	2960(%rsp), %r8         # 8-byte Reload
	movq	2808(%rsp), %r9         # 8-byte Reload
	movq	2800(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 2799(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	2840(%rsp), %rdi        # 8-byte Reload
	movq	2856(%rsp), %rsi        # 8-byte Reload
	movq	3064(%rsp), %rdx        # 8-byte Reload
	movq	2968(%rsp), %rcx        # 8-byte Reload
	movq	2976(%rsp), %r8         # 8-byte Reload
	movl	3056(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2816(%rsp), %rdi        # 8-byte Reload
	movq	3008(%rsp), %rsi        # 8-byte Reload
	movq	3072(%rsp), %rdx        # 8-byte Reload
	movq	2808(%rsp), %rcx        # 8-byte Reload
	movq	2992(%rsp), %r8         # 8-byte Reload
	movq	2808(%rsp), %r9         # 8-byte Reload
	movq	2800(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	2900(%rsp), %eax        # 4-byte Reload
	movl	%eax, %eax
	movl	%eax, %edx
	movq	3072(%rsp), %rdi        # 8-byte Reload
	movq	3008(%rsp), %rsi        # 8-byte Reload
	movq	3072(%rsp), %rcx        # 8-byte Reload
	movq	3000(%rsp), %r8         # 8-byte Reload
	movq	2808(%rsp), %r9         # 8-byte Reload
	movq	2800(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	2900(%rsp), %eax        # 4-byte Reload
	cmpl	$1, %eax
	setg	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	3040(%rsp), %rdi        # 8-byte Reload
	movq	3072(%rsp), %rsi        # 8-byte Reload
	movq	3072(%rsp), %rcx        # 8-byte Reload
	movq	2968(%rsp), %r8         # 8-byte Reload
	movq	2808(%rsp), %r9         # 8-byte Reload
	movq	2800(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 2798(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	2840(%rsp), %rdi        # 8-byte Reload
	movq	2856(%rsp), %rsi        # 8-byte Reload
	movq	3064(%rsp), %rdx        # 8-byte Reload
	movq	3032(%rsp), %rcx        # 8-byte Reload
	movq	3016(%rsp), %r8         # 8-byte Reload
	movl	3056(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movb	2799(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %r9d
	movl	%r9d, %edx
	movq	2816(%rsp), %rdi        # 8-byte Reload
	movq	3072(%rsp), %rsi        # 8-byte Reload
	movq	3072(%rsp), %rcx        # 8-byte Reload
	movq	2960(%rsp), %r8         # 8-byte Reload
	movq	2808(%rsp), %r9         # 8-byte Reload
	movq	2800(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	2798(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, %edx
	movq	3072(%rsp), %rdi        # 8-byte Reload
	movq	3072(%rsp), %rsi        # 8-byte Reload
	movq	3072(%rsp), %rcx        # 8-byte Reload
	movq	2968(%rsp), %r8         # 8-byte Reload
	movq	2808(%rsp), %r9         # 8-byte Reload
	movq	2800(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	2798(%rsp), %al         # 1-byte Reload
	movb	2799(%rsp), %cl         # 1-byte Reload
	andb	%cl, %al
.Ltmp526:
	.loc	2 669 0                 # eispack.c:669:0
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	3040(%rsp), %rdi        # 8-byte Reload
	movq	3072(%rsp), %rsi        # 8-byte Reload
	movq	3072(%rsp), %rcx        # 8-byte Reload
	movq	3032(%rsp), %r8         # 8-byte Reload
	movq	2808(%rsp), %r9         # 8-byte Reload
	movq	2800(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 2797(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	2984(%rsp), %rdi        # 8-byte Reload
	movq	2856(%rsp), %rsi        # 8-byte Reload
	movq	3064(%rsp), %rdx        # 8-byte Reload
	movq	3024(%rsp), %rcx        # 8-byte Reload
	movq	2976(%rsp), %r8         # 8-byte Reload
	movl	3056(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2816(%rsp), %rdi        # 8-byte Reload
	movq	3008(%rsp), %rsi        # 8-byte Reload
	movq	3072(%rsp), %rdx        # 8-byte Reload
	movq	2808(%rsp), %rcx        # 8-byte Reload
	movq	2992(%rsp), %r8         # 8-byte Reload
	movq	2808(%rsp), %r9         # 8-byte Reload
	movq	2800(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	2900(%rsp), %eax        # 4-byte Reload
	movl	%eax, %eax
	movl	%eax, %edx
	movq	3072(%rsp), %rdi        # 8-byte Reload
	movq	3008(%rsp), %rsi        # 8-byte Reload
	movq	3072(%rsp), %rcx        # 8-byte Reload
	movq	3000(%rsp), %r8         # 8-byte Reload
	movq	2808(%rsp), %r9         # 8-byte Reload
	movq	2800(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	2900(%rsp), %eax        # 4-byte Reload
	cmpl	$1, %eax
	setg	%al
.Ltmp527:
	.loc	2 659 0                 # eispack.c:659:0
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	3040(%rsp), %rdi        # 8-byte Reload
	movq	3072(%rsp), %rsi        # 8-byte Reload
	movq	3072(%rsp), %rcx        # 8-byte Reload
	movq	3024(%rsp), %r8         # 8-byte Reload
	movq	2808(%rsp), %r9         # 8-byte Reload
	movq	2800(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 2796(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	2840(%rsp), %rdi        # 8-byte Reload
	movq	2856(%rsp), %rsi        # 8-byte Reload
	movq	3064(%rsp), %rdx        # 8-byte Reload
	movq	2864(%rsp), %rcx        # 8-byte Reload
	movq	3016(%rsp), %r8         # 8-byte Reload
	movl	3056(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movb	2796(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %r9d
	movl	%r9d, %edx
	movq	2816(%rsp), %rdi        # 8-byte Reload
	movq	3072(%rsp), %rsi        # 8-byte Reload
	movq	3072(%rsp), %rcx        # 8-byte Reload
	movq	3024(%rsp), %r8         # 8-byte Reload
	movq	2808(%rsp), %r9         # 8-byte Reload
	movq	2800(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	2797(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, %edx
	movq	3072(%rsp), %rdi        # 8-byte Reload
	movq	3072(%rsp), %rsi        # 8-byte Reload
	movq	3072(%rsp), %rcx        # 8-byte Reload
	movq	3032(%rsp), %r8         # 8-byte Reload
	movq	2808(%rsp), %r9         # 8-byte Reload
	movq	2800(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	2797(%rsp), %al         # 1-byte Reload
	movb	2796(%rsp), %cl         # 1-byte Reload
	andb	%cl, %al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	3040(%rsp), %rdi        # 8-byte Reload
	movq	3072(%rsp), %rsi        # 8-byte Reload
	movq	3072(%rsp), %rcx        # 8-byte Reload
	movq	2864(%rsp), %r8         # 8-byte Reload
	movq	2808(%rsp), %r9         # 8-byte Reload
	movq	2800(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 2795(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	2840(%rsp), %rdi        # 8-byte Reload
	movq	2856(%rsp), %rsi        # 8-byte Reload
	movq	3064(%rsp), %rdx        # 8-byte Reload
	movq	3048(%rsp), %rcx        # 8-byte Reload
	movq	2816(%rsp), %r8         # 8-byte Reload
	movl	3056(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2848(%rsp), %rdi        # 8-byte Reload
	movq	2808(%rsp), %rsi        # 8-byte Reload
	movq	2808(%rsp), %rdx        # 8-byte Reload
	movq	3072(%rsp), %rcx        # 8-byte Reload
	movq	2832(%rsp), %r8         # 8-byte Reload
	movq	2808(%rsp), %r9         # 8-byte Reload
	movq	2800(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	2816(%rsp), %rdi        # 8-byte Reload
	movq	2808(%rsp), %rsi        # 8-byte Reload
	movq	2808(%rsp), %rdx        # 8-byte Reload
	movq	3072(%rsp), %rcx        # 8-byte Reload
	movq	2824(%rsp), %r8         # 8-byte Reload
	movq	2808(%rsp), %r9         # 8-byte Reload
	movq	2800(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	2795(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, %edx
	movq	3072(%rsp), %rdi        # 8-byte Reload
	movq	3072(%rsp), %rsi        # 8-byte Reload
	movq	3072(%rsp), %rcx        # 8-byte Reload
	movq	2864(%rsp), %r8         # 8-byte Reload
	movq	2808(%rsp), %r9         # 8-byte Reload
	movq	2800(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	2795(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB11_1
	jmp	.LBB11_10
.Ltmp528:
.LBB11_1:                               # %.lr.ph15
	movabsq	$1, %rax
	movl	$1, %ecx
	movabsq	$0, %rdx
	leaq	.L.str488, %r8
	leaq	.L.str792, %rsi
	movabsq	$669, %rdi              # imm = 0x29D
	leaq	.L.str478, %r9
	leaq	.L.str485, %r10
	leaq	.L.str487, %r11
	movabsq	$2, %rbx
	movl	$0, %ebp
	.loc	2 669 0                 # eispack.c:669:0
.Ltmp529:
	movq	%rsi, 2784(%rsp)        # 8-byte Spill
	movq	%r9, %rsi
	movq	%rdx, 2776(%rsp)        # 8-byte Spill
	movq	%r10, %rdx
	movl	%ecx, 2772(%rsp)        # 4-byte Spill
	movq	%r11, %rcx
	movq	%r8, 2760(%rsp)         # 8-byte Spill
	movq	%rbx, %r8
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%rax, 2752(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	2752(%rsp), %rdi        # 8-byte Reload
	movq	2776(%rsp), %rsi        # 8-byte Reload
	movq	2776(%rsp), %rdx        # 8-byte Reload
	movq	2752(%rsp), %rcx        # 8-byte Reload
	movq	2760(%rsp), %r8         # 8-byte Reload
	movq	2776(%rsp), %r9         # 8-byte Reload
	movq	2784(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2752(%rsp), %rax        # 8-byte Reload
	movl	2772(%rsp), %ebp        # 4-byte Reload
	movq	%rax, 2744(%rsp)        # 8-byte Spill
	movl	%ebp, 2740(%rsp)        # 4-byte Spill
.LBB11_2:                               # =>This Loop Header: Depth=1
                                        #     Child Loop BB11_4 Depth 2
                                        #       Child Loop BB11_5 Depth 3
                                        #       Child Loop BB11_7 Depth 3
	movl	2740(%rsp), %eax        # 4-byte Reload
	movq	2744(%rsp), %rcx        # 8-byte Reload
	movabsq	$1, %rdx
	leaq	.L.str495, %rsi
	movabsq	$0, %rdi
	leaq	.L.str792, %r8
	movabsq	$2, %r9
	leaq	.L.str497, %r10
	movabsq	$3, %r11
	leaq	.L.str178, %rbx
	movabsq	$673, %r14              # imm = 0x2A1
	leaq	.L.str478, %r15
	leaq	.L.str488, %r12
	leaq	.L.str496, %r13
	movl	$0, %ebp
	movl	%eax, 2736(%rsp)        # 4-byte Spill
	movl	$1, %eax
	movq	%rcx, 2728(%rsp)        # 8-byte Spill
	movabsq	$19134, %rcx            # imm = 0x4ABE
	movq	%rcx, 2720(%rsp)        # 8-byte Spill
	leaq	.L.str493, %rcx
	movq	%rcx, 2712(%rsp)        # 8-byte Spill
	leaq	.L.str494, %rcx
	movq	%rcx, 2704(%rsp)        # 8-byte Spill
	movabsq	$24, %rcx
	movq	%rcx, 2696(%rsp)        # 8-byte Spill
	movabsq	$32, %rcx
	movq	%rcx, 2688(%rsp)        # 8-byte Spill
	leaq	.L.str480, %rcx
	movq	%rcx, 2680(%rsp)        # 8-byte Spill
	leaq	.L.str1499, %rcx
	movq	%rcx, 2672(%rsp)        # 8-byte Spill
	movabsq	$46, %rcx
	vxorps	%xmm0, %xmm0, %xmm0
	movq	%rcx, 2664(%rsp)        # 8-byte Spill
	movabsq	$64, %rcx
	movq	%rcx, 2656(%rsp)        # 8-byte Spill
	leaq	.L.str1398, %rcx
	movq	%rcx, 2648(%rsp)        # 8-byte Spill
	movabsq	$47, %rcx
	movq	%rcx, 2640(%rsp)        # 8-byte Spill
	leaq	.L.str1196, %rcx
	movq	%rcx, 2632(%rsp)        # 8-byte Spill
	movabsq	$27, %rcx
	movq	%rcx, 2624(%rsp)        # 8-byte Spill
	leaq	.L.str160, %rcx
	movq	%rcx, 2616(%rsp)        # 8-byte Spill
	leaq	.L.str489174, %rcx
	movq	%rcx, 2608(%rsp)        # 8-byte Spill
	movabsq	$29, %rcx
	movq	%rcx, 2600(%rsp)        # 8-byte Spill
	leaq	.L.str491, %rcx
	movq	%rcx, 2592(%rsp)        # 8-byte Spill
	leaq	.L.str485, %rcx
	movq	%rcx, 2584(%rsp)        # 8-byte Spill
	leaq	.L.str492, %rcx
	movq	%rcx, 2576(%rsp)        # 8-byte Spill
	movabsq	$-1, %rcx
	movq	%rcx, 2568(%rsp)        # 8-byte Spill
	movabsq	$48, %rcx
	movq	%rcx, 2560(%rsp)        # 8-byte Spill
	leaq	.L.str490, %rcx
	.loc	2 673 0                 # eispack.c:673:0
.Ltmp530:
	movq	%rcx, 2552(%rsp)        # 8-byte Spill
	movq	2568(%rsp), %rcx        # 8-byte Reload
	movq	%rdi, 2544(%rsp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	%rsi, 2536(%rsp)        # 8-byte Spill
	movq	%r15, %rsi
	movq	%rdx, 2528(%rsp)        # 8-byte Spill
	movq	%r12, %rdx
	movq	2608(%rsp), %rcx        # 8-byte Reload
	movq	%r8, 2520(%rsp)         # 8-byte Spill
	movq	2560(%rsp), %r8         # 8-byte Reload
	movq	%r9, 2512(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movl	%eax, 2508(%rsp)        # 4-byte Spill
	movq	%r12, 2496(%rsp)        # 8-byte Spill
	movq	%r13, 2488(%rsp)        # 8-byte Spill
	movl	%ebp, 2484(%rsp)        # 4-byte Spill
	vmovsd	%xmm0, 2472(%rsp)       # 8-byte Spill
	movq	%r15, 2464(%rsp)        # 8-byte Spill
	movq	%r14, 2456(%rsp)        # 8-byte Spill
	movq	%r10, 2448(%rsp)        # 8-byte Spill
	movq	%r11, 2440(%rsp)        # 8-byte Spill
	movq	%rbx, 2432(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	2512(%rsp), %rdi        # 8-byte Reload
	movq	2656(%rsp), %rsi        # 8-byte Reload
	movq	2544(%rsp), %rdx        # 8-byte Reload
	movq	2528(%rsp), %rcx        # 8-byte Reload
	movq	2552(%rsp), %r8         # 8-byte Reload
	movq	2528(%rsp), %r9         # 8-byte Reload
	movq	2432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	2528(%rsp), %rdi        # 8-byte Reload
	movq	2656(%rsp), %rsi        # 8-byte Reload
	movq	2528(%rsp), %rdx        # 8-byte Reload
	movq	2544(%rsp), %rcx        # 8-byte Reload
	movq	2672(%rsp), %r8         # 8-byte Reload
	movq	2528(%rsp), %r9         # 8-byte Reload
	movq	2584(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	2720(%rsp), %rdi        # 8-byte Reload
	movq	2656(%rsp), %rsi        # 8-byte Reload
	movq	2728(%rsp), %rdx        # 8-byte Reload
	movq	2528(%rsp), %rcx        # 8-byte Reload
	movq	2608(%rsp), %r8         # 8-byte Reload
	movq	2544(%rsp), %r9         # 8-byte Reload
	movq	2584(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	2568(%rsp), %rdi        # 8-byte Reload
	movq	2464(%rsp), %rsi        # 8-byte Reload
	movq	2496(%rsp), %rdx        # 8-byte Reload
	movq	2592(%rsp), %rcx        # 8-byte Reload
	movq	2560(%rsp), %r8         # 8-byte Reload
	movl	2484(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2512(%rsp), %rdi        # 8-byte Reload
	movq	2688(%rsp), %rsi        # 8-byte Reload
	movq	2544(%rsp), %rdx        # 8-byte Reload
	movq	2528(%rsp), %rcx        # 8-byte Reload
	movq	2576(%rsp), %r8         # 8-byte Reload
	movq	2528(%rsp), %r9         # 8-byte Reload
	movq	2432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	2528(%rsp), %rdi        # 8-byte Reload
	movq	2688(%rsp), %rsi        # 8-byte Reload
	movq	2528(%rsp), %rdx        # 8-byte Reload
	movq	2544(%rsp), %rcx        # 8-byte Reload
	movq	2672(%rsp), %r8         # 8-byte Reload
	movq	2528(%rsp), %r9         # 8-byte Reload
	movq	2584(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	2736(%rsp), %eax        # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	2720(%rsp), %rdi        # 8-byte Reload
	movq	2688(%rsp), %rsi        # 8-byte Reload
	movq	2528(%rsp), %rcx        # 8-byte Reload
	movq	2592(%rsp), %r8         # 8-byte Reload
	movq	2544(%rsp), %r9         # 8-byte Reload
	movq	2584(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	2456(%rsp), %rdi        # 8-byte Reload
	movq	2464(%rsp), %rsi        # 8-byte Reload
	movq	2496(%rsp), %rdx        # 8-byte Reload
	movq	2632(%rsp), %rcx        # 8-byte Reload
	movq	2600(%rsp), %r8         # 8-byte Reload
	movl	2484(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2512(%rsp), %rdi        # 8-byte Reload
	movq	2656(%rsp), %rsi        # 8-byte Reload
	movq	2728(%rsp), %rdx        # 8-byte Reload
	movq	2528(%rsp), %rcx        # 8-byte Reload
	movq	2608(%rsp), %r8         # 8-byte Reload
	movq	2544(%rsp), %r9         # 8-byte Reload
	movq	2520(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	2528(%rsp), %rdi        # 8-byte Reload
	movq	2656(%rsp), %rsi        # 8-byte Reload
	movq	2880(%rsp), %rdx        # 8-byte Reload
	movq	2528(%rsp), %rcx        # 8-byte Reload
	movq	2616(%rsp), %r8         # 8-byte Reload
	movq	2544(%rsp), %r9         # 8-byte Reload
	movq	2520(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2728(%rsp), %rcx        # 8-byte Reload
	shlq	$3, %rcx
	movq	2880(%rsp), %rdx        # 8-byte Reload
	addq	%rcx, %rdx
	movq	2720(%rsp), %rdi        # 8-byte Reload
	movq	2656(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 2424(%rsp)        # 8-byte Spill
	movq	2528(%rsp), %rcx        # 8-byte Reload
	movq	2632(%rsp), %r8         # 8-byte Reload
	movq	2544(%rsp), %r9         # 8-byte Reload
	movq	2520(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2456(%rsp), %rdi        # 8-byte Reload
	movq	2464(%rsp), %rsi        # 8-byte Reload
	movq	2496(%rsp), %rdx        # 8-byte Reload
	movq	2648(%rsp), %rcx        # 8-byte Reload
	movq	2624(%rsp), %r8         # 8-byte Reload
	movl	2484(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2528(%rsp), %rdi        # 8-byte Reload
	movq	2656(%rsp), %rsi        # 8-byte Reload
	movq	2424(%rsp), %rdx        # 8-byte Reload
	movq	2528(%rsp), %rcx        # 8-byte Reload
	movq	2632(%rsp), %r8         # 8-byte Reload
	movq	2544(%rsp), %r9         # 8-byte Reload
	movq	2520(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2880(%rsp), %rcx        # 8-byte Reload
	movq	2728(%rsp), %rdx        # 8-byte Reload
	vmovsd	(%rcx,%rdx,8), %xmm0
	movq	2720(%rsp), %rdi        # 8-byte Reload
	movq	2656(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 2416(%rsp)       # 8-byte Spill
	movq	2528(%rsp), %rdx        # 8-byte Reload
	movq	2648(%rsp), %rcx        # 8-byte Reload
	movq	2544(%rsp), %r8         # 8-byte Reload
	movq	2520(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	2456(%rsp), %rdi        # 8-byte Reload
	movq	2464(%rsp), %rsi        # 8-byte Reload
	movq	2496(%rsp), %rdx        # 8-byte Reload
	movq	2712(%rsp), %rcx        # 8-byte Reload
	movq	2640(%rsp), %r8         # 8-byte Reload
	movl	2484(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2512(%rsp), %rdi        # 8-byte Reload
	movq	2656(%rsp), %rsi        # 8-byte Reload
	vmovsd	2472(%rsp), %xmm0       # 8-byte Reload
	movq	2544(%rsp), %rdx        # 8-byte Reload
	movq	2672(%rsp), %rcx        # 8-byte Reload
	movq	2544(%rsp), %r8         # 8-byte Reload
	movq	2520(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	2528(%rsp), %rdi        # 8-byte Reload
	movq	2656(%rsp), %rsi        # 8-byte Reload
	vmovsd	2416(%rsp), %xmm0       # 8-byte Reload
	movq	2528(%rsp), %rdx        # 8-byte Reload
	movq	2648(%rsp), %rcx        # 8-byte Reload
	movq	2544(%rsp), %r8         # 8-byte Reload
	movq	2520(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	2416(%rsp), %xmm0       # 8-byte Reload
	vmovsd	2472(%rsp), %xmm1       # 8-byte Reload
	vucomisd	%xmm1, %xmm0
	sete	%al
	setnp	%cl
	andb	%al, %cl
	movb	%cl, %al
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	2720(%rsp), %rdi        # 8-byte Reload
	movq	2528(%rsp), %rsi        # 8-byte Reload
	movq	2528(%rsp), %r8         # 8-byte Reload
	movb	%cl, 2415(%rsp)         # 1-byte Spill
	movq	%r8, %rcx
	movq	2712(%rsp), %r8         # 8-byte Reload
	movq	2544(%rsp), %r9         # 8-byte Reload
	movq	2520(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	2456(%rsp), %rdi        # 8-byte Reload
	movq	2464(%rsp), %rsi        # 8-byte Reload
	movq	2496(%rsp), %rdx        # 8-byte Reload
	movq	2704(%rsp), %rcx        # 8-byte Reload
	movq	2664(%rsp), %r8         # 8-byte Reload
	movl	2484(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2512(%rsp), %rdi        # 8-byte Reload
	movq	2688(%rsp), %rsi        # 8-byte Reload
	movq	2528(%rsp), %rdx        # 8-byte Reload
	movq	2544(%rsp), %rcx        # 8-byte Reload
	movq	2672(%rsp), %r8         # 8-byte Reload
	movq	2544(%rsp), %r9         # 8-byte Reload
	movq	2520(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	3060(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %eax
	movl	%eax, %edx
	movq	2528(%rsp), %rdi        # 8-byte Reload
	movq	2688(%rsp), %rsi        # 8-byte Reload
	movq	2528(%rsp), %rcx        # 8-byte Reload
	movq	2680(%rsp), %r8         # 8-byte Reload
	movq	2544(%rsp), %r9         # 8-byte Reload
	movq	2520(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	3060(%rsp), %eax        # 4-byte Reload
	cmpl	$1, %eax
	setl	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ebp
	movl	%ebp, %edx
	movq	2720(%rsp), %rdi        # 8-byte Reload
	movq	2528(%rsp), %rsi        # 8-byte Reload
	movq	2528(%rsp), %rcx        # 8-byte Reload
	movq	2704(%rsp), %r8         # 8-byte Reload
	movq	2544(%rsp), %r9         # 8-byte Reload
	movq	2520(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 2414(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	2456(%rsp), %rdi        # 8-byte Reload
	movq	2464(%rsp), %rsi        # 8-byte Reload
	movq	2496(%rsp), %rdx        # 8-byte Reload
	movq	2536(%rsp), %rcx        # 8-byte Reload
	movq	2696(%rsp), %r8         # 8-byte Reload
	movl	2484(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movb	2414(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %r9d
	movl	%r9d, %edx
	movq	2512(%rsp), %rdi        # 8-byte Reload
	movq	2528(%rsp), %rsi        # 8-byte Reload
	movq	2528(%rsp), %rcx        # 8-byte Reload
	movq	2704(%rsp), %r8         # 8-byte Reload
	movq	2544(%rsp), %r9         # 8-byte Reload
	movq	2520(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	2415(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	2528(%rsp), %rdi        # 8-byte Reload
	movq	2528(%rsp), %rsi        # 8-byte Reload
	movq	2528(%rsp), %rcx        # 8-byte Reload
	movq	2712(%rsp), %r8         # 8-byte Reload
	movq	2544(%rsp), %r9         # 8-byte Reload
	movq	2520(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	2415(%rsp), %al         # 1-byte Reload
	movb	2414(%rsp), %cl         # 1-byte Reload
	orb	%cl, %al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ebp
	movl	%ebp, %edx
	movq	2720(%rsp), %rdi        # 8-byte Reload
	movq	2528(%rsp), %rsi        # 8-byte Reload
	movq	2528(%rsp), %rcx        # 8-byte Reload
	movq	2536(%rsp), %r8         # 8-byte Reload
	movq	2544(%rsp), %r9         # 8-byte Reload
	movq	2520(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 2413(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	2456(%rsp), %rdi        # 8-byte Reload
	movq	2464(%rsp), %rsi        # 8-byte Reload
	movq	2496(%rsp), %rdx        # 8-byte Reload
	movq	2488(%rsp), %rcx        # 8-byte Reload
	movq	2512(%rsp), %r8         # 8-byte Reload
	movl	2484(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2440(%rsp), %rdi        # 8-byte Reload
	movq	2544(%rsp), %rsi        # 8-byte Reload
	movq	2544(%rsp), %rdx        # 8-byte Reload
	movq	2528(%rsp), %rcx        # 8-byte Reload
	movq	2432(%rsp), %r8         # 8-byte Reload
	movq	2544(%rsp), %r9         # 8-byte Reload
	movq	2520(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	2512(%rsp), %rdi        # 8-byte Reload
	movq	2544(%rsp), %rsi        # 8-byte Reload
	movq	2544(%rsp), %rdx        # 8-byte Reload
	movq	2528(%rsp), %rcx        # 8-byte Reload
	movq	2448(%rsp), %r8         # 8-byte Reload
	movq	2544(%rsp), %r9         # 8-byte Reload
	movq	2520(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	2413(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	2528(%rsp), %rdi        # 8-byte Reload
	movq	2528(%rsp), %rsi        # 8-byte Reload
	movq	2528(%rsp), %rcx        # 8-byte Reload
	movq	2536(%rsp), %r8         # 8-byte Reload
	movq	2544(%rsp), %r9         # 8-byte Reload
	movq	2520(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	2413(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB11_9
.Ltmp531:
# BB#3:                                 # %.preheader.lr.ph
                                        #   in Loop: Header=BB11_2 Depth=1
	movabsq	$0, %rax
	movabsq	$1, %rcx
	leaq	.L.str117, %r8
	leaq	.L.str792, %rdx
	movabsq	$675, %rdi              # imm = 0x2A3
	leaq	.L.str478, %rsi
	leaq	.L.str497, %r9
	leaq	.L.str498, %r10
	movabsq	$2, %r11
	movl	$0, %ebx
	movl	$1, %ebp
	movabsq	$19134, %r14            # imm = 0x4ABE
	movabsq	$64, %r15
	leaq	.L.str26111, %r12
	leaq	.L.str893, %r13
	movq	%rax, 2400(%rsp)        # 8-byte Spill
	leaq	.L.str23108, %rax
	movq	%rax, 2392(%rsp)        # 8-byte Spill
	movabsq	$682, %rax              # imm = 0x2AA
	movq	%rax, 2384(%rsp)        # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 2376(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 2368(%rsp)        # 8-byte Spill
	leaq	.L.str22107, %rax
	movq	%rax, 2360(%rsp)        # 8-byte Spill
	movabsq	$35, %rax
	movq	%rax, 2352(%rsp)        # 8-byte Spill
	leaq	.L.str20105, %rax
	movq	%rax, 2344(%rsp)        # 8-byte Spill
	leaq	.L.str21106, %rax
	movq	%rax, 2336(%rsp)        # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, 2328(%rsp)        # 8-byte Spill
	leaq	.L.str489174, %rax
	movq	%rax, 2320(%rsp)        # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, 2312(%rsp)        # 8-byte Spill
	leaq	.L.str18103, %rax
	movq	%rax, 2304(%rsp)        # 8-byte Spill
	leaq	.L.str51136, %rax
	movq	%rax, 2296(%rsp)        # 8-byte Spill
	movabsq	$12, %rax
	movq	%rax, 2288(%rsp)        # 8-byte Spill
	leaq	.L.str57142, %rax
	movq	%rax, 2280(%rsp)        # 8-byte Spill
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
	movq	%rax, 2272(%rsp)        # 8-byte Spill
	leaq	.L.str1499, %rax
	movq	%rax, 2264(%rsp)        # 8-byte Spill
	movabsq	$671, %rax              # imm = 0x29F
	.loc	2 671 0                 # eispack.c:671:0
	movq	%rdi, 2256(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 2248(%rsp)        # 8-byte Spill
	movq	%rdx, 2240(%rsp)        # 8-byte Spill
	movq	%r9, %rdx
	movq	2280(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 2232(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	2328(%rsp), %rax        # 8-byte Reload
	movq	%r8, 2224(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 2216(%rsp)         # 8-byte Spill
	movl	%ebx, %r9d
	movl	$1, (%rsp)
	movq	%r13, 2208(%rsp)        # 8-byte Spill
	movl	%ebp, 2204(%rsp)        # 4-byte Spill
	movq	%r14, 2192(%rsp)        # 8-byte Spill
	movq	%r12, 2184(%rsp)        # 8-byte Spill
	movq	%r15, 2176(%rsp)        # 8-byte Spill
	movl	%ebx, 2172(%rsp)        # 4-byte Spill
	movq	%r10, 2160(%rsp)        # 8-byte Spill
	movq	%r11, 2152(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	2152(%rsp), %rdi        # 8-byte Reload
	movq	2176(%rsp), %rsi        # 8-byte Reload
	movq	2272(%rsp), %rdx        # 8-byte Reload
	movq	2400(%rsp), %rcx        # 8-byte Reload
	movq	2264(%rsp), %r8         # 8-byte Reload
	movq	2400(%rsp), %r9         # 8-byte Reload
	movq	2240(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2232(%rsp), %rdi        # 8-byte Reload
	movq	2176(%rsp), %rsi        # 8-byte Reload
	movq	2728(%rsp), %rdx        # 8-byte Reload
	movq	2232(%rsp), %rcx        # 8-byte Reload
	movq	2320(%rsp), %r8         # 8-byte Reload
	movq	2400(%rsp), %r9         # 8-byte Reload
	movq	2240(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
	movq	2728(%rsp), %rcx        # 8-byte Reload
	addq	%rax, %rcx
	.loc	2 682 0                 # eispack.c:682:0
.Ltmp532:
	movq	2192(%rsp), %rdi        # 8-byte Reload
	movq	2176(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	2232(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 2144(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	2280(%rsp), %r8         # 8-byte Reload
	movq	2400(%rsp), %r9         # 8-byte Reload
	movq	2240(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2248(%rsp), %rsi        # 8-byte Reload
	movq	2216(%rsp), %rdx        # 8-byte Reload
	movq	2304(%rsp), %rcx        # 8-byte Reload
	movq	2312(%rsp), %r8         # 8-byte Reload
	movl	2172(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2232(%rsp), %rdi        # 8-byte Reload
	movq	2176(%rsp), %rsi        # 8-byte Reload
	movq	2144(%rsp), %rdx        # 8-byte Reload
	movq	2232(%rsp), %rcx        # 8-byte Reload
	movq	2280(%rsp), %r8         # 8-byte Reload
	movq	2400(%rsp), %r9         # 8-byte Reload
	movq	2240(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2144(%rsp), %rax        # 8-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %ebp
	movl	%ebp, %edx
	movq	2192(%rsp), %rdi        # 8-byte Reload
	movq	2368(%rsp), %rsi        # 8-byte Reload
	movq	2232(%rsp), %rcx        # 8-byte Reload
	movq	2304(%rsp), %r8         # 8-byte Reload
	movq	2400(%rsp), %r9         # 8-byte Reload
	movq	2240(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebx, 2140(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2248(%rsp), %rsi        # 8-byte Reload
	movq	2216(%rsp), %rdx        # 8-byte Reload
	movq	2344(%rsp), %rcx        # 8-byte Reload
	movq	2288(%rsp), %r8         # 8-byte Reload
	movl	2172(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	2900(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebx
	movl	%ebx, %edx
	movq	2152(%rsp), %rdi        # 8-byte Reload
	movq	2368(%rsp), %rsi        # 8-byte Reload
	movq	2232(%rsp), %rcx        # 8-byte Reload
	movq	2296(%rsp), %r8         # 8-byte Reload
	movq	2400(%rsp), %r9         # 8-byte Reload
	movq	2240(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	2140(%rsp), %ebx        # 4-byte Reload
	movl	%ebx, %ebp
	movl	%ebp, %edx
	movq	2232(%rsp), %rdi        # 8-byte Reload
	movq	2368(%rsp), %rsi        # 8-byte Reload
	movq	2232(%rsp), %rcx        # 8-byte Reload
	movq	2304(%rsp), %r8         # 8-byte Reload
	movq	2400(%rsp), %r9         # 8-byte Reload
	movq	2240(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	2140(%rsp), %ebx        # 4-byte Reload
	movl	2900(%rsp), %ebp        # 4-byte Reload
	imull	%ebp, %ebx
	movl	%ebx, %esi
	movl	%esi, %edx
	movq	2192(%rsp), %rdi        # 8-byte Reload
	movq	2368(%rsp), %rsi        # 8-byte Reload
	movq	2232(%rsp), %rcx        # 8-byte Reload
	movq	2344(%rsp), %r8         # 8-byte Reload
	movq	2400(%rsp), %r9         # 8-byte Reload
	movq	2240(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%ebx, 2136(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2248(%rsp), %rsi        # 8-byte Reload
	movq	2216(%rsp), %rdx        # 8-byte Reload
	movq	2336(%rsp), %rcx        # 8-byte Reload
	movq	2312(%rsp), %r8         # 8-byte Reload
	movl	2172(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2232(%rsp), %rdi        # 8-byte Reload
	movq	2176(%rsp), %rsi        # 8-byte Reload
	movq	2728(%rsp), %rdx        # 8-byte Reload
	movq	2232(%rsp), %rcx        # 8-byte Reload
	movq	2320(%rsp), %r8         # 8-byte Reload
	movq	2400(%rsp), %r9         # 8-byte Reload
	movq	2240(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2728(%rsp), %rax        # 8-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %ebp
	movl	%ebp, %edx
	movq	2192(%rsp), %rdi        # 8-byte Reload
	movq	2368(%rsp), %rsi        # 8-byte Reload
	movq	2232(%rsp), %rcx        # 8-byte Reload
	movq	2336(%rsp), %r8         # 8-byte Reload
	movq	2400(%rsp), %r9         # 8-byte Reload
	movq	2240(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebx, 2132(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2248(%rsp), %rsi        # 8-byte Reload
	movq	2216(%rsp), %rdx        # 8-byte Reload
	movq	2360(%rsp), %rcx        # 8-byte Reload
	movq	2328(%rsp), %r8         # 8-byte Reload
	movl	2172(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	2132(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebx
	movl	%ebx, %edx
	movq	2152(%rsp), %rdi        # 8-byte Reload
	movq	2368(%rsp), %rsi        # 8-byte Reload
	movq	2232(%rsp), %rcx        # 8-byte Reload
	movq	2336(%rsp), %r8         # 8-byte Reload
	movq	2400(%rsp), %r9         # 8-byte Reload
	movq	2240(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	2136(%rsp), %ebx        # 4-byte Reload
	movl	%ebx, %ebp
	movl	%ebp, %edx
	movq	2232(%rsp), %rdi        # 8-byte Reload
	movq	2368(%rsp), %rsi        # 8-byte Reload
	movq	2232(%rsp), %rcx        # 8-byte Reload
	movq	2344(%rsp), %r8         # 8-byte Reload
	movq	2400(%rsp), %r9         # 8-byte Reload
	movq	2240(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	2136(%rsp), %ebx        # 4-byte Reload
	movl	2132(%rsp), %ebp        # 4-byte Reload
	addl	%ebp, %ebx
	movl	%ebx, %esi
	movl	%esi, %edx
	movq	2192(%rsp), %rdi        # 8-byte Reload
	movq	2368(%rsp), %rsi        # 8-byte Reload
	movq	2232(%rsp), %rcx        # 8-byte Reload
	movq	2360(%rsp), %r8         # 8-byte Reload
	movq	2400(%rsp), %r9         # 8-byte Reload
	movq	2240(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%ebx, 2128(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2248(%rsp), %rsi        # 8-byte Reload
	movq	2216(%rsp), %rdx        # 8-byte Reload
	movq	2392(%rsp), %rcx        # 8-byte Reload
	movq	2352(%rsp), %r8         # 8-byte Reload
	movl	2172(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	2128(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebx
	movl	%ebx, %edx
	movq	2232(%rsp), %rdi        # 8-byte Reload
	movq	2368(%rsp), %rsi        # 8-byte Reload
	movq	2232(%rsp), %rcx        # 8-byte Reload
	movq	2360(%rsp), %r8         # 8-byte Reload
	movq	2400(%rsp), %r9         # 8-byte Reload
	movq	2240(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	2128(%rsp), %ebx        # 4-byte Reload
	movslq	%ebx, %rax
	movq	2192(%rsp), %rdi        # 8-byte Reload
	movq	2176(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	2232(%rsp), %rcx        # 8-byte Reload
	movq	2392(%rsp), %r8         # 8-byte Reload
	movq	2400(%rsp), %r9         # 8-byte Reload
	movq	2240(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 2120(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2248(%rsp), %rsi        # 8-byte Reload
	movq	2216(%rsp), %rdx        # 8-byte Reload
	movq	2184(%rsp), %rcx        # 8-byte Reload
	movq	2376(%rsp), %r8         # 8-byte Reload
	movl	2172(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2152(%rsp), %rdi        # 8-byte Reload
	movq	2176(%rsp), %rsi        # 8-byte Reload
	movq	2120(%rsp), %rdx        # 8-byte Reload
	movq	2232(%rsp), %rcx        # 8-byte Reload
	movq	2392(%rsp), %r8         # 8-byte Reload
	movq	2400(%rsp), %r9         # 8-byte Reload
	movq	2240(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2232(%rsp), %rdi        # 8-byte Reload
	movq	2176(%rsp), %rsi        # 8-byte Reload
	movq	2888(%rsp), %rdx        # 8-byte Reload
	movq	2232(%rsp), %rcx        # 8-byte Reload
	movq	2208(%rsp), %r8         # 8-byte Reload
	movq	2400(%rsp), %r9         # 8-byte Reload
	movq	2240(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2120(%rsp), %rax        # 8-byte Reload
	shlq	$3, %rax
	movq	2888(%rsp), %rcx        # 8-byte Reload
	addq	%rax, %rcx
.Ltmp533:
	.loc	2 675 0                 # eispack.c:675:0
	movq	2192(%rsp), %rdi        # 8-byte Reload
	movq	2176(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	2232(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 2112(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	2184(%rsp), %r8         # 8-byte Reload
	movq	2400(%rsp), %r9         # 8-byte Reload
	movq	2240(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2256(%rsp), %rdi        # 8-byte Reload
	movq	2248(%rsp), %rsi        # 8-byte Reload
	movq	2216(%rsp), %rdx        # 8-byte Reload
	movq	2160(%rsp), %rcx        # 8-byte Reload
	movq	2152(%rsp), %r8         # 8-byte Reload
	movl	2172(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2232(%rsp), %rdi        # 8-byte Reload
	movq	2400(%rsp), %rsi        # 8-byte Reload
	movq	2400(%rsp), %rdx        # 8-byte Reload
	movq	2232(%rsp), %rcx        # 8-byte Reload
	movq	2224(%rsp), %r8         # 8-byte Reload
	movq	2400(%rsp), %r9         # 8-byte Reload
	movq	2240(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2400(%rsp), %rax        # 8-byte Reload
	movq	%rax, 2104(%rsp)        # 8-byte Spill
.LBB11_4:                               # %.lr.ph
                                        #   Parent Loop BB11_2 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB11_5 Depth 3
                                        #       Child Loop BB11_7 Depth 3
	movq	2104(%rsp), %rax        # 8-byte Reload
	movabsq	$0, %rcx
	vxorps	%xmm0, %xmm0, %xmm0
	movabsq	$1, %rdx
	leaq	.L.str503, %r8
	leaq	.L.str792, %rsi
	movabsq	$678, %rdi              # imm = 0x2A6
	leaq	.L.str478, %r9
	leaq	.L.str117, %r10
	leaq	.L.str502, %r11
	movabsq	$2, %rbx
	movl	$0, %ebp
	movl	$1, %r14d
	movabsq	$19134, %r15            # imm = 0x4ABE
	movabsq	$64, %r12
	leaq	.L.str34119, %r13
	movq	%rax, 2096(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 2088(%rsp)        # 8-byte Spill
	leaq	.L.str33118, %rax
	movq	%rax, 2080(%rsp)        # 8-byte Spill
	movabsq	$35, %rax
	movq	%rax, 2072(%rsp)        # 8-byte Spill
	leaq	.L.str32117, %rax
	movq	%rax, 2064(%rsp)        # 8-byte Spill
	leaq	.L.str51136, %rax
	movq	%rax, 2056(%rsp)        # 8-byte Spill
	movabsq	$680, %rax              # imm = 0x2A8
	movq	%rax, 2048(%rsp)        # 8-byte Spill
	movabsq	$12, %rax
	movq	%rax, 2040(%rsp)        # 8-byte Spill
	leaq	.L.str499, %rax
	movq	%rax, 2032(%rsp)        # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, 2024(%rsp)        # 8-byte Spill
	leaq	.L.str497, %rax
	movq	%rax, 2016(%rsp)        # 8-byte Spill
	leaq	.L.str1499, %rax
	movq	%rax, 2008(%rsp)        # 8-byte Spill
	leaq	.L.str500, %rax
	movq	%rax, 2000(%rsp)        # 8-byte Spill
	leaq	.L.str501, %rax
	movq	%rax, 1992(%rsp)        # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 1984(%rsp)        # 8-byte Spill
	movabsq	$48, %rax
	.loc	2 680 0                 # eispack.c:680:0
.Ltmp534:
	movq	%rax, 1976(%rsp)        # 8-byte Spill
	movq	1984(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 1968(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 1960(%rsp)        # 8-byte Spill
	movq	%r9, %rsi
	movq	%rdx, 1952(%rsp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	2032(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 1944(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	1976(%rsp), %rax        # 8-byte Reload
	movq	%r8, 1936(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 1928(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movl	%r14d, 1924(%rsp)       # 4-byte Spill
	vmovsd	%xmm0, 1912(%rsp)       # 8-byte Spill
	movq	%r15, 1904(%rsp)        # 8-byte Spill
	movl	%ebp, 1900(%rsp)        # 4-byte Spill
	movq	%r12, 1888(%rsp)        # 8-byte Spill
	movq	%r13, 1880(%rsp)        # 8-byte Spill
	movq	%rbx, 1872(%rsp)        # 8-byte Spill
	movq	%r10, 1864(%rsp)        # 8-byte Spill
	movq	%r11, 1856(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	1872(%rsp), %rdi        # 8-byte Reload
	movq	1888(%rsp), %rsi        # 8-byte Reload
	movq	1944(%rsp), %rdx        # 8-byte Reload
	movq	1952(%rsp), %rcx        # 8-byte Reload
	movq	2000(%rsp), %r8         # 8-byte Reload
	movq	1952(%rsp), %r9         # 8-byte Reload
	movq	1992(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1952(%rsp), %rdi        # 8-byte Reload
	movq	1888(%rsp), %rsi        # 8-byte Reload
	movq	1944(%rsp), %rdx        # 8-byte Reload
	movq	1944(%rsp), %rcx        # 8-byte Reload
	movq	2008(%rsp), %r8         # 8-byte Reload
	movq	1952(%rsp), %r9         # 8-byte Reload
	movq	2016(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1904(%rsp), %rdi        # 8-byte Reload
	movq	1888(%rsp), %rsi        # 8-byte Reload
	movq	2096(%rsp), %rdx        # 8-byte Reload
	movq	1952(%rsp), %rcx        # 8-byte Reload
	movq	2032(%rsp), %r8         # 8-byte Reload
	movq	1944(%rsp), %r9         # 8-byte Reload
	movq	2016(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2048(%rsp), %rdi        # 8-byte Reload
	movq	1928(%rsp), %rsi        # 8-byte Reload
	movq	1864(%rsp), %rdx        # 8-byte Reload
	movq	2064(%rsp), %rcx        # 8-byte Reload
	movq	2024(%rsp), %r8         # 8-byte Reload
	movl	1900(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1952(%rsp), %rdi        # 8-byte Reload
	movq	1888(%rsp), %rsi        # 8-byte Reload
	movq	2096(%rsp), %rdx        # 8-byte Reload
	movq	1952(%rsp), %rcx        # 8-byte Reload
	movq	2032(%rsp), %r8         # 8-byte Reload
	movq	1944(%rsp), %r9         # 8-byte Reload
	movq	1960(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2096(%rsp), %rax        # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %r14d
	movl	%r14d, %edx
	movq	1904(%rsp), %rdi        # 8-byte Reload
	movq	2088(%rsp), %rsi        # 8-byte Reload
	movq	1952(%rsp), %rcx        # 8-byte Reload
	movq	2064(%rsp), %r8         # 8-byte Reload
	movq	1944(%rsp), %r9         # 8-byte Reload
	movq	1960(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 1852(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	2048(%rsp), %rdi        # 8-byte Reload
	movq	1928(%rsp), %rsi        # 8-byte Reload
	movq	1864(%rsp), %rdx        # 8-byte Reload
	movq	2080(%rsp), %rcx        # 8-byte Reload
	movq	2040(%rsp), %r8         # 8-byte Reload
	movl	1900(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	2900(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	1872(%rsp), %rdi        # 8-byte Reload
	movq	2088(%rsp), %rsi        # 8-byte Reload
	movq	1952(%rsp), %rcx        # 8-byte Reload
	movq	2056(%rsp), %r8         # 8-byte Reload
	movq	1944(%rsp), %r9         # 8-byte Reload
	movq	1960(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	1852(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r14d
	movl	%r14d, %edx
	movq	1952(%rsp), %rdi        # 8-byte Reload
	movq	2088(%rsp), %rsi        # 8-byte Reload
	movq	1952(%rsp), %rcx        # 8-byte Reload
	movq	2064(%rsp), %r8         # 8-byte Reload
	movq	1944(%rsp), %r9         # 8-byte Reload
	movq	1960(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	1852(%rsp), %ebp        # 4-byte Reload
	movl	2900(%rsp), %r14d       # 4-byte Reload
	imull	%r14d, %ebp
.Ltmp535:
	.loc	2 678 0                 # eispack.c:678:0
	movl	%ebp, %esi
	movl	%esi, %edx
	movq	1904(%rsp), %rdi        # 8-byte Reload
	movq	2088(%rsp), %rsi        # 8-byte Reload
	movq	1952(%rsp), %rcx        # 8-byte Reload
	movq	2080(%rsp), %r8         # 8-byte Reload
	movq	1944(%rsp), %r9         # 8-byte Reload
	movq	1960(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%ebp, 1848(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	1968(%rsp), %rdi        # 8-byte Reload
	movq	1928(%rsp), %rsi        # 8-byte Reload
	movq	1864(%rsp), %rdx        # 8-byte Reload
	movq	1880(%rsp), %rcx        # 8-byte Reload
	movq	2072(%rsp), %r8         # 8-byte Reload
	movl	1900(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	1848(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	1952(%rsp), %rdi        # 8-byte Reload
	movq	2088(%rsp), %rsi        # 8-byte Reload
	movq	1952(%rsp), %rcx        # 8-byte Reload
	movq	2080(%rsp), %r8         # 8-byte Reload
	movq	1944(%rsp), %r9         # 8-byte Reload
	movq	1960(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	1848(%rsp), %ebp        # 4-byte Reload
	movslq	%ebp, %rax
	movq	1904(%rsp), %rdi        # 8-byte Reload
	movq	1888(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	1952(%rsp), %rcx        # 8-byte Reload
	movq	1880(%rsp), %r8         # 8-byte Reload
	movq	1944(%rsp), %r9         # 8-byte Reload
	movq	1960(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 1840(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	1968(%rsp), %rdi        # 8-byte Reload
	movq	1928(%rsp), %rsi        # 8-byte Reload
	movq	1864(%rsp), %rdx        # 8-byte Reload
	movq	1856(%rsp), %rcx        # 8-byte Reload
	movq	1872(%rsp), %r8         # 8-byte Reload
	movl	1900(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1952(%rsp), %rdi        # 8-byte Reload
	movq	1944(%rsp), %rsi        # 8-byte Reload
	movq	1944(%rsp), %rdx        # 8-byte Reload
	movq	1952(%rsp), %rcx        # 8-byte Reload
	movq	1936(%rsp), %r8         # 8-byte Reload
	movq	1944(%rsp), %r9         # 8-byte Reload
	movq	1960(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1944(%rsp), %rax        # 8-byte Reload
	vmovsd	1912(%rsp), %xmm0       # 8-byte Reload
	movq	%rax, 1832(%rsp)        # 8-byte Spill
	vmovsd	%xmm0, 1824(%rsp)       # 8-byte Spill
.LBB11_5:                               #   Parent Loop BB11_2 Depth=1
                                        #     Parent Loop BB11_4 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	vmovsd	1824(%rsp), %xmm0       # 8-byte Reload
	movq	1832(%rsp), %rax        # 8-byte Reload
	movabsq	$1, %rcx
	leaq	.L.str126, %rdx
	movabsq	$0, %rsi
	leaq	.L.str792, %rdi
	movabsq	$2, %r8
	leaq	.L.str503, %r9
	movabsq	$3, %r10
	leaq	.L.str507, %r11
	movabsq	$678, %rbx              # imm = 0x2A6
	leaq	.L.str478, %r14
	leaq	.L.str506, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 1816(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 1808(%rsp)        # 8-byte Spill
	leaq	.L.str125, %rax
	movq	%rax, 1800(%rsp)        # 8-byte Spill
	leaq	.L.str491, %rax
	movq	%rax, 1792(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 1784(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 1776(%rsp)        # 8-byte Spill
	leaq	.L.str119, %rax
	movq	%rax, 1768(%rsp)        # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, 1760(%rsp)        # 8-byte Spill
	leaq	.L.str118, %rax
	movq	%rax, 1752(%rsp)        # 8-byte Spill
	leaq	.L.str1499, %rax
	movq	%rax, 1744(%rsp)        # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, 1736(%rsp)        # 8-byte Spill
	leaq	.L.str113, %rax
	movq	%rax, 1728(%rsp)        # 8-byte Spill
	leaq	.L.str504, %rax
	movq	%rax, 1720(%rsp)        # 8-byte Spill
	leaq	.L.str505, %rax
	movq	%rax, 1712(%rsp)        # 8-byte Spill
	movabsq	$680, %rax              # imm = 0x2A8
	movq	%rax, 1704(%rsp)        # 8-byte Spill
	movabsq	$9, %rax
	movq	%rax, 1696(%rsp)        # 8-byte Spill
	leaq	.L.str98, %rax
	movq	%rax, 1688(%rsp)        # 8-byte Spill
	leaq	.L.str101, %rax
	movq	%rax, 1680(%rsp)        # 8-byte Spill
	movabsq	$13, %rax
	movq	%rax, 1672(%rsp)        # 8-byte Spill
	leaq	.L.str100, %rax
	movq	%rax, 1664(%rsp)        # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, 1656(%rsp)        # 8-byte Spill
	leaq	.L.str73158, %rax
	movq	%rax, 1648(%rsp)        # 8-byte Spill
	leaq	.L.str99, %rax
	movq	%rax, 1640(%rsp)        # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 1632(%rsp)        # 8-byte Spill
	leaq	.L.str34119, %rax
	movq	%rax, 1624(%rsp)        # 8-byte Spill
	leaq	.L.str97, %rax
	movq	%rax, 1616(%rsp)        # 8-byte Spill
	leaq	.L.str893, %rax
	movq	%rax, 1608(%rsp)        # 8-byte Spill
	leaq	.L.str37122, %rax
	movq	%rax, 1600(%rsp)        # 8-byte Spill
	leaq	.L.str27112, %rax
	movq	%rax, 1592(%rsp)        # 8-byte Spill
	movabsq	$35, %rax
	movq	%rax, 1584(%rsp)        # 8-byte Spill
	leaq	.L.str36121, %rax
	movq	%rax, 1576(%rsp)        # 8-byte Spill
	leaq	.L.str31116, %rax
	movq	%rax, 1568(%rsp)        # 8-byte Spill
	leaq	.L.str489174, %rax
	movq	%rax, 1560(%rsp)        # 8-byte Spill
	leaq	.L.str35120, %rax
	movq	%rax, 1552(%rsp)        # 8-byte Spill
	leaq	.L.str51136, %rax
	movq	%rax, 1544(%rsp)        # 8-byte Spill
	movabsq	$12, %rax
	movq	%rax, 1536(%rsp)        # 8-byte Spill
	leaq	.L.str117, %rax
	vxorps	%xmm1, %xmm1, %xmm1
	movq	%rax, 1528(%rsp)        # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 1520(%rsp)        # 8-byte Spill
	movabsq	$48, %rax
	.loc	2 680 0                 # eispack.c:680:0
.Ltmp536:
	movq	%rax, 1512(%rsp)        # 8-byte Spill
	movq	1520(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 1504(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 1496(%rsp)        # 8-byte Spill
	movq	%r14, %rsi
	movq	%rdx, 1488(%rsp)        # 8-byte Spill
	movq	%r9, %rdx
	movq	1752(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 1480(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	1512(%rsp), %rax        # 8-byte Reload
	movq	%r8, 1472(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 1464(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	vmovsd	%xmm0, 1456(%rsp)       # 8-byte Spill
	movl	%ebp, 1452(%rsp)        # 4-byte Spill
	movl	%r12d, 1448(%rsp)       # 4-byte Spill
	movq	%r13, 1440(%rsp)        # 8-byte Spill
	vmovsd	%xmm1, 1432(%rsp)       # 8-byte Spill
	movq	%r15, 1424(%rsp)        # 8-byte Spill
	movq	%r14, 1416(%rsp)        # 8-byte Spill
	movq	%r10, 1408(%rsp)        # 8-byte Spill
	movq	%r11, 1400(%rsp)        # 8-byte Spill
	movq	%rbx, 1392(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	1472(%rsp), %rdi        # 8-byte Reload
	movq	1776(%rsp), %rsi        # 8-byte Reload
	movq	1496(%rsp), %rdx        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1768(%rsp), %r8         # 8-byte Reload
	movq	1480(%rsp), %r9         # 8-byte Reload
	movq	1464(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1480(%rsp), %rdi        # 8-byte Reload
	movq	1776(%rsp), %rsi        # 8-byte Reload
	movq	1496(%rsp), %rdx        # 8-byte Reload
	movq	1496(%rsp), %rcx        # 8-byte Reload
	movq	1744(%rsp), %r8         # 8-byte Reload
	movq	1480(%rsp), %r9         # 8-byte Reload
	movq	1528(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1440(%rsp), %rdi        # 8-byte Reload
	movq	1776(%rsp), %rsi        # 8-byte Reload
	movq	1816(%rsp), %rdx        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1752(%rsp), %r8         # 8-byte Reload
	movq	1496(%rsp), %r9         # 8-byte Reload
	movq	1528(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1520(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	1464(%rsp), %rdx        # 8-byte Reload
	movq	1720(%rsp), %rcx        # 8-byte Reload
	movq	1512(%rsp), %r8         # 8-byte Reload
	movl	1452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1472(%rsp), %rdi        # 8-byte Reload
	movq	1776(%rsp), %rsi        # 8-byte Reload
	movq	1496(%rsp), %rdx        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1728(%rsp), %r8         # 8-byte Reload
	movq	1480(%rsp), %r9         # 8-byte Reload
	movq	1464(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1480(%rsp), %rdi        # 8-byte Reload
	movq	1776(%rsp), %rsi        # 8-byte Reload
	vmovsd	1432(%rsp), %xmm0       # 8-byte Reload
	movq	1496(%rsp), %rdx        # 8-byte Reload
	movq	1744(%rsp), %rcx        # 8-byte Reload
	movq	1480(%rsp), %r8         # 8-byte Reload
	movq	1528(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1440(%rsp), %rdi        # 8-byte Reload
	movq	1776(%rsp), %rsi        # 8-byte Reload
	vmovsd	1456(%rsp), %xmm0       # 8-byte Reload
	movq	1480(%rsp), %rdx        # 8-byte Reload
	movq	1720(%rsp), %rcx        # 8-byte Reload
	movq	1496(%rsp), %r8         # 8-byte Reload
	movq	1528(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1704(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	1464(%rsp), %rdx        # 8-byte Reload
	movq	1552(%rsp), %rcx        # 8-byte Reload
	movq	1760(%rsp), %r8         # 8-byte Reload
	movl	1452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1480(%rsp), %rdi        # 8-byte Reload
	movq	1776(%rsp), %rsi        # 8-byte Reload
	movq	1816(%rsp), %rdx        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1752(%rsp), %r8         # 8-byte Reload
	movq	1496(%rsp), %r9         # 8-byte Reload
	movq	1504(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1816(%rsp), %rax        # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	1440(%rsp), %rdi        # 8-byte Reload
	movq	1808(%rsp), %rsi        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1552(%rsp), %r8         # 8-byte Reload
	movq	1496(%rsp), %r9         # 8-byte Reload
	movq	1504(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 1388(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	1704(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	1464(%rsp), %rdx        # 8-byte Reload
	movq	1576(%rsp), %rcx        # 8-byte Reload
	movq	1536(%rsp), %r8         # 8-byte Reload
	movl	1452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	2900(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	1472(%rsp), %rdi        # 8-byte Reload
	movq	1808(%rsp), %rsi        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1544(%rsp), %r8         # 8-byte Reload
	movq	1496(%rsp), %r9         # 8-byte Reload
	movq	1504(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	1388(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	1480(%rsp), %rdi        # 8-byte Reload
	movq	1808(%rsp), %rsi        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1552(%rsp), %r8         # 8-byte Reload
	movq	1496(%rsp), %r9         # 8-byte Reload
	movq	1504(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	1388(%rsp), %ebp        # 4-byte Reload
	movl	2900(%rsp), %r12d       # 4-byte Reload
	imull	%r12d, %ebp
	movl	%ebp, %esi
	movl	%esi, %edx
	movq	1440(%rsp), %rdi        # 8-byte Reload
	movq	1808(%rsp), %rsi        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1576(%rsp), %r8         # 8-byte Reload
	movq	1496(%rsp), %r9         # 8-byte Reload
	movq	1504(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%ebp, 1384(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	1704(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	1464(%rsp), %rdx        # 8-byte Reload
	movq	1568(%rsp), %rcx        # 8-byte Reload
	movq	1760(%rsp), %r8         # 8-byte Reload
	movl	1452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1480(%rsp), %rdi        # 8-byte Reload
	movq	1776(%rsp), %rsi        # 8-byte Reload
	movq	2728(%rsp), %rdx        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1560(%rsp), %r8         # 8-byte Reload
	movq	1496(%rsp), %r9         # 8-byte Reload
	movq	1504(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2728(%rsp), %rax        # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	1440(%rsp), %rdi        # 8-byte Reload
	movq	1808(%rsp), %rsi        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1568(%rsp), %r8         # 8-byte Reload
	movq	1496(%rsp), %r9         # 8-byte Reload
	movq	1504(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 1380(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	1704(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	1464(%rsp), %rdx        # 8-byte Reload
	movq	1592(%rsp), %rcx        # 8-byte Reload
	movq	1736(%rsp), %r8         # 8-byte Reload
	movl	1452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	1380(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	1472(%rsp), %rdi        # 8-byte Reload
	movq	1808(%rsp), %rsi        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1568(%rsp), %r8         # 8-byte Reload
	movq	1496(%rsp), %r9         # 8-byte Reload
	movq	1504(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	1384(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	1480(%rsp), %rdi        # 8-byte Reload
	movq	1808(%rsp), %rsi        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1576(%rsp), %r8         # 8-byte Reload
	movq	1496(%rsp), %r9         # 8-byte Reload
	movq	1504(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	1384(%rsp), %ebp        # 4-byte Reload
	movl	1380(%rsp), %r12d       # 4-byte Reload
	addl	%r12d, %ebp
	movl	%ebp, %esi
	movl	%esi, %edx
	movq	1440(%rsp), %rdi        # 8-byte Reload
	movq	1808(%rsp), %rsi        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1592(%rsp), %r8         # 8-byte Reload
	movq	1496(%rsp), %r9         # 8-byte Reload
	movq	1504(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%ebp, 1376(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	1704(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	1464(%rsp), %rdx        # 8-byte Reload
	movq	1600(%rsp), %rcx        # 8-byte Reload
	movq	1584(%rsp), %r8         # 8-byte Reload
	movl	1452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	1376(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	1480(%rsp), %rdi        # 8-byte Reload
	movq	1808(%rsp), %rsi        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1592(%rsp), %r8         # 8-byte Reload
	movq	1496(%rsp), %r9         # 8-byte Reload
	movq	1504(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	1376(%rsp), %ebp        # 4-byte Reload
	movslq	%ebp, %rax
	movq	1440(%rsp), %rdi        # 8-byte Reload
	movq	1776(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1600(%rsp), %r8         # 8-byte Reload
	movq	1496(%rsp), %r9         # 8-byte Reload
	movq	1504(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 1368(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	1704(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	1464(%rsp), %rdx        # 8-byte Reload
	movq	1616(%rsp), %rcx        # 8-byte Reload
	movq	1632(%rsp), %r8         # 8-byte Reload
	movl	1452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1472(%rsp), %rdi        # 8-byte Reload
	movq	1776(%rsp), %rsi        # 8-byte Reload
	movq	1368(%rsp), %rdx        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1600(%rsp), %r8         # 8-byte Reload
	movq	1496(%rsp), %r9         # 8-byte Reload
	movq	1504(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1480(%rsp), %rdi        # 8-byte Reload
	movq	1776(%rsp), %rsi        # 8-byte Reload
	movq	2888(%rsp), %rdx        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1608(%rsp), %r8         # 8-byte Reload
	movq	1496(%rsp), %r9         # 8-byte Reload
	movq	1504(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1368(%rsp), %rax        # 8-byte Reload
	shlq	$3, %rax
	movq	2888(%rsp), %rcx        # 8-byte Reload
	addq	%rax, %rcx
	movq	1440(%rsp), %rdi        # 8-byte Reload
	movq	1776(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	1480(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 1360(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	1616(%rsp), %r8         # 8-byte Reload
	movq	1496(%rsp), %r9         # 8-byte Reload
	movq	1504(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1704(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	1464(%rsp), %rdx        # 8-byte Reload
	movq	1688(%rsp), %rcx        # 8-byte Reload
	movq	1656(%rsp), %r8         # 8-byte Reload
	movl	1452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1480(%rsp), %rdi        # 8-byte Reload
	movq	1776(%rsp), %rsi        # 8-byte Reload
	movq	1360(%rsp), %rdx        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1616(%rsp), %r8         # 8-byte Reload
	movq	1496(%rsp), %r9         # 8-byte Reload
	movq	1504(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2888(%rsp), %rax        # 8-byte Reload
	movq	1368(%rsp), %rcx        # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
	movq	1440(%rsp), %rdi        # 8-byte Reload
	movq	1776(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 1352(%rsp)       # 8-byte Spill
	movq	1480(%rsp), %rdx        # 8-byte Reload
	movq	1688(%rsp), %rcx        # 8-byte Reload
	movq	1496(%rsp), %r8         # 8-byte Reload
	movq	1504(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1704(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	1464(%rsp), %rdx        # 8-byte Reload
	movq	1640(%rsp), %rcx        # 8-byte Reload
	movq	1736(%rsp), %r8         # 8-byte Reload
	movl	1452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1472(%rsp), %rdi        # 8-byte Reload
	movq	1776(%rsp), %rsi        # 8-byte Reload
	movq	1840(%rsp), %rdx        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1624(%rsp), %r8         # 8-byte Reload
	movq	1496(%rsp), %r9         # 8-byte Reload
	movq	1504(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1480(%rsp), %rdi        # 8-byte Reload
	movq	1776(%rsp), %rsi        # 8-byte Reload
	movq	1816(%rsp), %rdx        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1752(%rsp), %r8         # 8-byte Reload
	movq	1496(%rsp), %r9         # 8-byte Reload
	movq	1504(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1816(%rsp), %rax        # 8-byte Reload
	movq	1840(%rsp), %rcx        # 8-byte Reload
	addq	%rcx, %rax
	movq	1440(%rsp), %rdi        # 8-byte Reload
	movq	1776(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1640(%rsp), %r8         # 8-byte Reload
	movq	1496(%rsp), %r9         # 8-byte Reload
	movq	1504(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 1344(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	1704(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	1464(%rsp), %rdx        # 8-byte Reload
	movq	1664(%rsp), %rcx        # 8-byte Reload
	movq	1632(%rsp), %r8         # 8-byte Reload
	movl	1452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1472(%rsp), %rdi        # 8-byte Reload
	movq	1776(%rsp), %rsi        # 8-byte Reload
	movq	1344(%rsp), %rdx        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1640(%rsp), %r8         # 8-byte Reload
	movq	1496(%rsp), %r9         # 8-byte Reload
	movq	1504(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1480(%rsp), %rdi        # 8-byte Reload
	movq	1776(%rsp), %rsi        # 8-byte Reload
	movq	2872(%rsp), %rdx        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1648(%rsp), %r8         # 8-byte Reload
	movq	1496(%rsp), %r9         # 8-byte Reload
	movq	1504(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1344(%rsp), %rax        # 8-byte Reload
	shlq	$3, %rax
	movq	2872(%rsp), %rcx        # 8-byte Reload
	addq	%rax, %rcx
	movq	1440(%rsp), %rdi        # 8-byte Reload
	movq	1776(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	1480(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 1336(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	1664(%rsp), %r8         # 8-byte Reload
	movq	1496(%rsp), %r9         # 8-byte Reload
	movq	1504(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1704(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	1464(%rsp), %rdx        # 8-byte Reload
	movq	1680(%rsp), %rcx        # 8-byte Reload
	movq	1656(%rsp), %r8         # 8-byte Reload
	movl	1452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1480(%rsp), %rdi        # 8-byte Reload
	movq	1776(%rsp), %rsi        # 8-byte Reload
	movq	1336(%rsp), %rdx        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1664(%rsp), %r8         # 8-byte Reload
	movq	1496(%rsp), %r9         # 8-byte Reload
	movq	1504(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2872(%rsp), %rax        # 8-byte Reload
	movq	1344(%rsp), %rcx        # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
	movq	1440(%rsp), %rdi        # 8-byte Reload
	movq	1776(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 1328(%rsp)       # 8-byte Spill
	movq	1480(%rsp), %rdx        # 8-byte Reload
	movq	1680(%rsp), %rcx        # 8-byte Reload
	movq	1496(%rsp), %r8         # 8-byte Reload
	movq	1504(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1704(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	1464(%rsp), %rdx        # 8-byte Reload
	movq	1712(%rsp), %rcx        # 8-byte Reload
	movq	1672(%rsp), %r8         # 8-byte Reload
	movl	1452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1472(%rsp), %rdi        # 8-byte Reload
	movq	1776(%rsp), %rsi        # 8-byte Reload
	vmovsd	1328(%rsp), %xmm0       # 8-byte Reload
	movq	1480(%rsp), %rdx        # 8-byte Reload
	movq	1680(%rsp), %rcx        # 8-byte Reload
	movq	1496(%rsp), %r8         # 8-byte Reload
	movq	1504(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1480(%rsp), %rdi        # 8-byte Reload
	movq	1776(%rsp), %rsi        # 8-byte Reload
	vmovsd	1352(%rsp), %xmm0       # 8-byte Reload
	movq	1480(%rsp), %rdx        # 8-byte Reload
	movq	1688(%rsp), %rcx        # 8-byte Reload
	movq	1496(%rsp), %r8         # 8-byte Reload
	movq	1504(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	1352(%rsp), %xmm0       # 8-byte Reload
	vmovsd	1328(%rsp), %xmm1       # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	1440(%rsp), %rdi        # 8-byte Reload
	movq	1776(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1480(%rsp), %rdx        # 8-byte Reload
	movq	1712(%rsp), %rcx        # 8-byte Reload
	movq	1496(%rsp), %r8         # 8-byte Reload
	movq	1504(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 1320(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	1704(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	1464(%rsp), %rdx        # 8-byte Reload
	movq	1728(%rsp), %rcx        # 8-byte Reload
	movq	1696(%rsp), %r8         # 8-byte Reload
	movl	1452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1472(%rsp), %rdi        # 8-byte Reload
	movq	1776(%rsp), %rsi        # 8-byte Reload
	vmovsd	1320(%rsp), %xmm0       # 8-byte Reload
	movq	1480(%rsp), %rdx        # 8-byte Reload
	movq	1712(%rsp), %rcx        # 8-byte Reload
	movq	1496(%rsp), %r8         # 8-byte Reload
	movq	1504(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1480(%rsp), %rdi        # 8-byte Reload
	movq	1776(%rsp), %rsi        # 8-byte Reload
	vmovsd	1456(%rsp), %xmm0       # 8-byte Reload
	movq	1480(%rsp), %rdx        # 8-byte Reload
	movq	1720(%rsp), %rcx        # 8-byte Reload
	movq	1496(%rsp), %r8         # 8-byte Reload
	movq	1504(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	1456(%rsp), %xmm0       # 8-byte Reload
	vmovsd	1320(%rsp), %xmm1       # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
	movq	1440(%rsp), %rdi        # 8-byte Reload
	movq	1776(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1480(%rsp), %rdx        # 8-byte Reload
	movq	1728(%rsp), %rcx        # 8-byte Reload
	movq	1496(%rsp), %r8         # 8-byte Reload
	movq	1504(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 1312(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
.Ltmp537:
	#DEBUG_VALUE: trbak1:s <- [RSP+1312]
	.loc	2 678 0                 # eispack.c:678:0
	movq	1392(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	1464(%rsp), %rdx        # 8-byte Reload
	movq	1768(%rsp), %rcx        # 8-byte Reload
	movq	1736(%rsp), %r8         # 8-byte Reload
	movl	1452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1472(%rsp), %rdi        # 8-byte Reload
	movq	1776(%rsp), %rsi        # 8-byte Reload
	movq	1480(%rsp), %rdx        # 8-byte Reload
	movq	1496(%rsp), %rcx        # 8-byte Reload
	movq	1744(%rsp), %r8         # 8-byte Reload
	movq	1496(%rsp), %r9         # 8-byte Reload
	movq	1504(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1480(%rsp), %rdi        # 8-byte Reload
	movq	1776(%rsp), %rsi        # 8-byte Reload
	movq	1816(%rsp), %rdx        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1752(%rsp), %r8         # 8-byte Reload
	movq	1496(%rsp), %r9         # 8-byte Reload
	movq	1504(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1816(%rsp), %rax        # 8-byte Reload
	addq	$1, %rax
	movq	1440(%rsp), %rdi        # 8-byte Reload
	movq	1776(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1768(%rsp), %r8         # 8-byte Reload
	movq	1496(%rsp), %r9         # 8-byte Reload
	movq	1504(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 1304(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	1392(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	1464(%rsp), %rdx        # 8-byte Reload
	movq	1800(%rsp), %rcx        # 8-byte Reload
	movq	1760(%rsp), %r8         # 8-byte Reload
	movl	1452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1480(%rsp), %rdi        # 8-byte Reload
	movq	1776(%rsp), %rsi        # 8-byte Reload
	movq	1304(%rsp), %rdx        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1768(%rsp), %r8         # 8-byte Reload
	movq	1496(%rsp), %r9         # 8-byte Reload
	movq	1504(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1304(%rsp), %rax        # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	1440(%rsp), %rdi        # 8-byte Reload
	movq	1808(%rsp), %rsi        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1800(%rsp), %r8         # 8-byte Reload
	movq	1496(%rsp), %r9         # 8-byte Reload
	movq	1504(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 1300(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	1392(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	1464(%rsp), %rdx        # 8-byte Reload
	movq	1488(%rsp), %rcx        # 8-byte Reload
	movq	1784(%rsp), %r8         # 8-byte Reload
	movl	1452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	2736(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	1472(%rsp), %rdi        # 8-byte Reload
	movq	1808(%rsp), %rsi        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1792(%rsp), %r8         # 8-byte Reload
	movq	1496(%rsp), %r9         # 8-byte Reload
	movq	1504(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	1300(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	1480(%rsp), %rdi        # 8-byte Reload
	movq	1808(%rsp), %rsi        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1800(%rsp), %r8         # 8-byte Reload
	movq	1496(%rsp), %r9         # 8-byte Reload
	movq	1504(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	1300(%rsp), %ebp        # 4-byte Reload
	movl	2736(%rsp), %r12d       # 4-byte Reload
	cmpl	%r12d, %ebp
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	1440(%rsp), %rdi        # 8-byte Reload
	movq	1480(%rsp), %rsi        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1488(%rsp), %r8         # 8-byte Reload
	movq	1496(%rsp), %r9         # 8-byte Reload
	movq	1504(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 1299(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	1392(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	1464(%rsp), %rdx        # 8-byte Reload
	movq	1424(%rsp), %rcx        # 8-byte Reload
	movq	1472(%rsp), %r8         # 8-byte Reload
	movl	1452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1408(%rsp), %rdi        # 8-byte Reload
	movq	1496(%rsp), %rsi        # 8-byte Reload
	movq	1496(%rsp), %rdx        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1400(%rsp), %r8         # 8-byte Reload
	movq	1496(%rsp), %r9         # 8-byte Reload
	movq	1504(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1472(%rsp), %rdi        # 8-byte Reload
	movq	1496(%rsp), %rsi        # 8-byte Reload
	movq	1496(%rsp), %rdx        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1464(%rsp), %r8         # 8-byte Reload
	movq	1496(%rsp), %r9         # 8-byte Reload
	movq	1504(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	1299(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	1480(%rsp), %rdi        # 8-byte Reload
	movq	1480(%rsp), %rsi        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1488(%rsp), %r8         # 8-byte Reload
	movq	1496(%rsp), %r9         # 8-byte Reload
	movq	1504(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	1299(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	movq	1304(%rsp), %rcx        # 8-byte Reload
	vmovsd	1312(%rsp), %xmm0       # 8-byte Reload
	movq	%rcx, 1832(%rsp)        # 8-byte Spill
	vmovsd	%xmm0, 1824(%rsp)       # 8-byte Spill
	jne	.LBB11_6
	jmp	.LBB11_5
.Ltmp538:
.LBB11_6:                               # %.lr.ph6
                                        #   in Loop: Header=BB11_4 Depth=2
	movabsq	$0, %rax
	movabsq	$1, %rcx
	leaq	.L.str509, %r8
	leaq	.L.str792, %rdx
	movabsq	$683, %rsi              # imm = 0x2AB
	leaq	.L.str478, %rdi
	leaq	.L.str507, %r9
	leaq	.L.str508, %r10
	movabsq	$2, %r11
	movl	$0, %ebx
	movl	$1, %ebp
	movabsq	$19134, %r14            # imm = 0x4ABE
	movabsq	$64, %r15
	leaq	.L.str130, %r12
	movabsq	$32, %r13
	movq	%rax, 1288(%rsp)        # 8-byte Spill
	leaq	.L.str129, %rax
	movq	%rax, 1280(%rsp)        # 8-byte Spill
	movabsq	$35, %rax
	movq	%rax, 1272(%rsp)        # 8-byte Spill
	leaq	.L.str121, %rax
	movq	%rax, 1264(%rsp)        # 8-byte Spill
	leaq	.L.str51136, %rax
	movq	%rax, 1256(%rsp)        # 8-byte Spill
	movabsq	$685, %rax              # imm = 0x2AD
	movq	%rax, 1248(%rsp)        # 8-byte Spill
	movabsq	$12, %rax
	movq	%rax, 1240(%rsp)        # 8-byte Spill
	leaq	.L.str499, %rax
	movq	%rax, 1232(%rsp)        # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, 1224(%rsp)        # 8-byte Spill
	leaq	.L.str124, %rax
	movq	%rax, 1216(%rsp)        # 8-byte Spill
	leaq	.L.str122, %rax
	movq	%rax, 1208(%rsp)        # 8-byte Spill
	leaq	.L.str123, %rax
	movq	%rax, 1200(%rsp)        # 8-byte Spill
	movabsq	$682, %rax              # imm = 0x2AA
	movq	%rax, 1192(%rsp)        # 8-byte Spill
	movabsq	$16, %rax
	movq	%rax, 1184(%rsp)        # 8-byte Spill
	leaq	.L.str1196, %rax
	movq	%rax, 1176(%rsp)        # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, 1168(%rsp)        # 8-byte Spill
	leaq	.L.str113, %rax
	movq	%rax, 1160(%rsp)        # 8-byte Spill
	leaq	.L.str114, %rax
	movq	%rax, 1152(%rsp)        # 8-byte Spill
	leaq	.L.str26111, %rax
	.loc	2 682 0                 # eispack.c:682:0
	movq	%rax, 1144(%rsp)        # 8-byte Spill
	movq	1192(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 1136(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	1136(%rsp), %rax        # 8-byte Reload
	movq	%rsi, 1128(%rsp)        # 8-byte Spill
	movq	%rax, %rsi
	movq	%rdx, 1120(%rsp)        # 8-byte Spill
	movq	%r9, %rdx
	movq	1152(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 1112(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	1168(%rsp), %rax        # 8-byte Reload
	movq	%r8, 1104(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 1096(%rsp)         # 8-byte Spill
	movl	%ebx, %r9d
	movl	$1, (%rsp)
	movq	%r14, 1088(%rsp)        # 8-byte Spill
	movl	%ebp, 1084(%rsp)        # 4-byte Spill
	movq	%r15, 1072(%rsp)        # 8-byte Spill
	movq	%r12, 1064(%rsp)        # 8-byte Spill
	movq	%r13, 1056(%rsp)        # 8-byte Spill
	movl	%ebx, 1052(%rsp)        # 4-byte Spill
	movq	%r10, 1040(%rsp)        # 8-byte Spill
	movq	%r11, 1032(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	1112(%rsp), %rdi        # 8-byte Reload
	movq	1072(%rsp), %rsi        # 8-byte Reload
	movq	2112(%rsp), %rdx        # 8-byte Reload
	movq	1112(%rsp), %rcx        # 8-byte Reload
	movq	1144(%rsp), %r8         # 8-byte Reload
	movq	1288(%rsp), %r9         # 8-byte Reload
	movq	1120(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2112(%rsp), %rax        # 8-byte Reload
	vmovsd	(%rax), %xmm0
	movq	1088(%rsp), %rdi        # 8-byte Reload
	movq	1072(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 1024(%rsp)       # 8-byte Spill
	movq	1112(%rsp), %rdx        # 8-byte Reload
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1288(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1192(%rsp), %rdi        # 8-byte Reload
	movq	1136(%rsp), %rsi        # 8-byte Reload
	movq	1096(%rsp), %rdx        # 8-byte Reload
	movq	1208(%rsp), %rcx        # 8-byte Reload
	movq	1184(%rsp), %r8         # 8-byte Reload
	movl	1052(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1032(%rsp), %rdi        # 8-byte Reload
	movq	1072(%rsp), %rsi        # 8-byte Reload
	vmovsd	1024(%rsp), %xmm0       # 8-byte Reload
	movq	1112(%rsp), %rdx        # 8-byte Reload
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1288(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1112(%rsp), %rdi        # 8-byte Reload
	movq	1072(%rsp), %rsi        # 8-byte Reload
	vmovsd	1312(%rsp), %xmm0       # 8-byte Reload
	movq	1112(%rsp), %rdx        # 8-byte Reload
	movq	1160(%rsp), %rcx        # 8-byte Reload
	movq	1288(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	1312(%rsp), %xmm0       # 8-byte Reload
	vmovsd	1024(%rsp), %xmm1       # 8-byte Reload
	vdivsd	%xmm1, %xmm0, %xmm2
	movq	1088(%rsp), %rdi        # 8-byte Reload
	movq	1072(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1112(%rsp), %rdx        # 8-byte Reload
	movq	1208(%rsp), %rcx        # 8-byte Reload
	movq	1288(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 1016(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	1192(%rsp), %rdi        # 8-byte Reload
	movq	1136(%rsp), %rsi        # 8-byte Reload
	movq	1096(%rsp), %rdx        # 8-byte Reload
	movq	1200(%rsp), %rcx        # 8-byte Reload
	movq	1168(%rsp), %r8         # 8-byte Reload
	movl	1052(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1112(%rsp), %rdi        # 8-byte Reload
	movq	1072(%rsp), %rsi        # 8-byte Reload
	movq	2424(%rsp), %rdx        # 8-byte Reload
	movq	1112(%rsp), %rcx        # 8-byte Reload
	movq	1176(%rsp), %r8         # 8-byte Reload
	movq	1288(%rsp), %r9         # 8-byte Reload
	movq	1120(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2424(%rsp), %rax        # 8-byte Reload
	vmovsd	(%rax), %xmm0
	movq	1088(%rsp), %rdi        # 8-byte Reload
	movq	1072(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 1008(%rsp)       # 8-byte Spill
	movq	1112(%rsp), %rdx        # 8-byte Reload
	movq	1200(%rsp), %rcx        # 8-byte Reload
	movq	1288(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1192(%rsp), %rdi        # 8-byte Reload
	movq	1136(%rsp), %rsi        # 8-byte Reload
	movq	1096(%rsp), %rdx        # 8-byte Reload
	movq	1216(%rsp), %rcx        # 8-byte Reload
	movq	1184(%rsp), %r8         # 8-byte Reload
	movl	1052(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1032(%rsp), %rdi        # 8-byte Reload
	movq	1072(%rsp), %rsi        # 8-byte Reload
	vmovsd	1008(%rsp), %xmm0       # 8-byte Reload
	movq	1112(%rsp), %rdx        # 8-byte Reload
	movq	1200(%rsp), %rcx        # 8-byte Reload
	movq	1288(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1112(%rsp), %rdi        # 8-byte Reload
	movq	1072(%rsp), %rsi        # 8-byte Reload
	vmovsd	1016(%rsp), %xmm0       # 8-byte Reload
	movq	1112(%rsp), %rdx        # 8-byte Reload
	movq	1208(%rsp), %rcx        # 8-byte Reload
	movq	1288(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	1016(%rsp), %xmm0       # 8-byte Reload
	vmovsd	1008(%rsp), %xmm1       # 8-byte Reload
	vdivsd	%xmm1, %xmm0, %xmm2
	movq	1088(%rsp), %rdi        # 8-byte Reload
	movq	1072(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1112(%rsp), %rdx        # 8-byte Reload
	movq	1216(%rsp), %rcx        # 8-byte Reload
	movq	1288(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 1000(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
.Ltmp539:
	#DEBUG_VALUE: trbak1:s <- [RSP+1000]
	#DEBUG_VALUE: trbak1:k <- 0
	.loc	2 685 0                 # eispack.c:685:0
	movq	1248(%rsp), %rdi        # 8-byte Reload
	movq	1136(%rsp), %rsi        # 8-byte Reload
	movq	1096(%rsp), %rdx        # 8-byte Reload
	movq	1264(%rsp), %rcx        # 8-byte Reload
	movq	1224(%rsp), %r8         # 8-byte Reload
	movl	1052(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1112(%rsp), %rdi        # 8-byte Reload
	movq	1072(%rsp), %rsi        # 8-byte Reload
	movq	2096(%rsp), %rdx        # 8-byte Reload
	movq	1112(%rsp), %rcx        # 8-byte Reload
	movq	1232(%rsp), %r8         # 8-byte Reload
	movq	1288(%rsp), %r9         # 8-byte Reload
	movq	1120(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2096(%rsp), %rax        # 8-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %ebp
	movl	%ebp, %edx
	movq	1088(%rsp), %rdi        # 8-byte Reload
	movq	1056(%rsp), %rsi        # 8-byte Reload
	movq	1112(%rsp), %rcx        # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movq	1288(%rsp), %r9         # 8-byte Reload
	movq	1120(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebx, 996(%rsp)         # 4-byte Spill
	callq	trace_logger_log_int
	movq	1248(%rsp), %rdi        # 8-byte Reload
	movq	1136(%rsp), %rsi        # 8-byte Reload
	movq	1096(%rsp), %rdx        # 8-byte Reload
	movq	1280(%rsp), %rcx        # 8-byte Reload
	movq	1240(%rsp), %r8         # 8-byte Reload
	movl	1052(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	2900(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebx
	movl	%ebx, %edx
	movq	1032(%rsp), %rdi        # 8-byte Reload
	movq	1056(%rsp), %rsi        # 8-byte Reload
	movq	1112(%rsp), %rcx        # 8-byte Reload
	movq	1256(%rsp), %r8         # 8-byte Reload
	movq	1288(%rsp), %r9         # 8-byte Reload
	movq	1120(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	996(%rsp), %ebx         # 4-byte Reload
	movl	%ebx, %ebp
	movl	%ebp, %edx
	movq	1112(%rsp), %rdi        # 8-byte Reload
	movq	1056(%rsp), %rsi        # 8-byte Reload
	movq	1112(%rsp), %rcx        # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movq	1288(%rsp), %r9         # 8-byte Reload
	movq	1120(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	996(%rsp), %ebx         # 4-byte Reload
	movl	2900(%rsp), %ebp        # 4-byte Reload
	imull	%ebp, %ebx
.Ltmp540:
	.loc	2 683 0                 # eispack.c:683:0
	movl	%ebx, %esi
	movl	%esi, %edx
	movq	1088(%rsp), %rdi        # 8-byte Reload
	movq	1056(%rsp), %rsi        # 8-byte Reload
	movq	1112(%rsp), %rcx        # 8-byte Reload
	movq	1280(%rsp), %r8         # 8-byte Reload
	movq	1288(%rsp), %r9         # 8-byte Reload
	movq	1120(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%ebx, 992(%rsp)         # 4-byte Spill
	callq	trace_logger_log_int
	movq	1128(%rsp), %rdi        # 8-byte Reload
	movq	1136(%rsp), %rsi        # 8-byte Reload
	movq	1096(%rsp), %rdx        # 8-byte Reload
	movq	1064(%rsp), %rcx        # 8-byte Reload
	movq	1272(%rsp), %r8         # 8-byte Reload
	movl	1052(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	992(%rsp), %r9d         # 4-byte Reload
	movl	%r9d, %ebx
	movl	%ebx, %edx
	movq	1112(%rsp), %rdi        # 8-byte Reload
	movq	1056(%rsp), %rsi        # 8-byte Reload
	movq	1112(%rsp), %rcx        # 8-byte Reload
	movq	1280(%rsp), %r8         # 8-byte Reload
	movq	1288(%rsp), %r9         # 8-byte Reload
	movq	1120(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	992(%rsp), %ebx         # 4-byte Reload
	movslq	%ebx, %rax
	movq	1088(%rsp), %rdi        # 8-byte Reload
	movq	1072(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	1112(%rsp), %rcx        # 8-byte Reload
	movq	1064(%rsp), %r8         # 8-byte Reload
	movq	1288(%rsp), %r9         # 8-byte Reload
	movq	1120(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 984(%rsp)         # 8-byte Spill
	callq	trace_logger_log_int
	movq	1128(%rsp), %rdi        # 8-byte Reload
	movq	1136(%rsp), %rsi        # 8-byte Reload
	movq	1096(%rsp), %rdx        # 8-byte Reload
	movq	1040(%rsp), %rcx        # 8-byte Reload
	movq	1032(%rsp), %r8         # 8-byte Reload
	movl	1052(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1112(%rsp), %rdi        # 8-byte Reload
	movq	1288(%rsp), %rsi        # 8-byte Reload
	movq	1288(%rsp), %rdx        # 8-byte Reload
	movq	1112(%rsp), %rcx        # 8-byte Reload
	movq	1104(%rsp), %r8         # 8-byte Reload
	movq	1288(%rsp), %r9         # 8-byte Reload
	movq	1120(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1288(%rsp), %rax        # 8-byte Reload
	movq	%rax, 976(%rsp)         # 8-byte Spill
.Ltmp541:
.LBB11_7:                               #   Parent Loop BB11_2 Depth=1
                                        #     Parent Loop BB11_4 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movq	976(%rsp), %rax         # 8-byte Reload
	movabsq	$1, %rcx
	leaq	.L.str514, %rdx
	movabsq	$0, %rsi
	leaq	.L.str792, %rdi
	movabsq	$2, %r8
	leaq	.L.str509, %r9
	movabsq	$3, %r10
	leaq	.L.str501, %r11
	movabsq	$683, %rbx              # imm = 0x2AB
	leaq	.L.str478, %r14
	leaq	.L.str515, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 968(%rsp)         # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 960(%rsp)         # 8-byte Spill
	leaq	.L.str513, %rax
	movq	%rax, 952(%rsp)         # 8-byte Spill
	leaq	.L.str491, %rax
	movq	%rax, 944(%rsp)         # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 936(%rsp)         # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 928(%rsp)         # 8-byte Spill
	leaq	.L.str511, %rax
	movq	%rax, 920(%rsp)         # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, 912(%rsp)         # 8-byte Spill
	leaq	.L.str510, %rax
	movq	%rax, 904(%rsp)         # 8-byte Spill
	leaq	.L.str1499, %rax
	movq	%rax, 896(%rsp)         # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, 888(%rsp)         # 8-byte Spill
	leaq	.L.str159, %rax
	movq	%rax, 880(%rsp)         # 8-byte Spill
	leaq	.L.str143, %rax
	movq	%rax, 872(%rsp)         # 8-byte Spill
	movabsq	$685, %rax              # imm = 0x2AD
	movq	%rax, 864(%rsp)         # 8-byte Spill
	leaq	.L.str512, %rax
	movq	%rax, 856(%rsp)         # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, 848(%rsp)         # 8-byte Spill
	leaq	.L.str144, %rax
	movq	%rax, 840(%rsp)         # 8-byte Spill
	leaq	.L.str153, %rax
	movq	%rax, 832(%rsp)         # 8-byte Spill
	movabsq	$9, %rax
	movq	%rax, 824(%rsp)         # 8-byte Spill
	leaq	.L.str124, %rax
	movq	%rax, 816(%rsp)         # 8-byte Spill
	leaq	.L.str152, %rax
	movq	%rax, 808(%rsp)         # 8-byte Spill
	movabsq	$13, %rax
	movq	%rax, 800(%rsp)         # 8-byte Spill
	leaq	.L.str151, %rax
	movq	%rax, 792(%rsp)         # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, 784(%rsp)         # 8-byte Spill
	leaq	.L.str893, %rax
	movq	%rax, 776(%rsp)         # 8-byte Spill
	leaq	.L.str150, %rax
	movq	%rax, 768(%rsp)         # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 760(%rsp)         # 8-byte Spill
	leaq	.L.str149, %rax
	movq	%rax, 752(%rsp)         # 8-byte Spill
	movabsq	$35, %rax
	movq	%rax, 744(%rsp)         # 8-byte Spill
	leaq	.L.str146, %rax
	movq	%rax, 736(%rsp)         # 8-byte Spill
	leaq	.L.str147, %rax
	movq	%rax, 728(%rsp)         # 8-byte Spill
	leaq	.L.str489174, %rax
	movq	%rax, 720(%rsp)         # 8-byte Spill
	leaq	.L.str145, %rax
	movq	%rax, 712(%rsp)         # 8-byte Spill
	leaq	.L.str51136, %rax
	movq	%rax, 704(%rsp)         # 8-byte Spill
	movabsq	$12, %rax
	movq	%rax, 696(%rsp)         # 8-byte Spill
	leaq	.L.str73158, %rax
	movq	%rax, 688(%rsp)         # 8-byte Spill
	leaq	.L.str142, %rax
	movq	%rax, 680(%rsp)         # 8-byte Spill
	leaq	.L.str130, %rax
	movq	%rax, 672(%rsp)         # 8-byte Spill
	leaq	.L.str507, %rax
	movq	%rax, 664(%rsp)         # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 656(%rsp)         # 8-byte Spill
	movabsq	$48, %rax
	.loc	2 685 0                 # eispack.c:685:0
.Ltmp542:
	movq	%rax, 648(%rsp)         # 8-byte Spill
	movq	656(%rsp), %rax         # 8-byte Reload
	movq	%rdi, 640(%rsp)         # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 632(%rsp)         # 8-byte Spill
	movq	%r14, %rsi
	movq	%rdx, 624(%rsp)         # 8-byte Spill
	movq	%r9, %rdx
	movq	904(%rsp), %rax         # 8-byte Reload
	movq	%rcx, 616(%rsp)         # 8-byte Spill
	movq	%rax, %rcx
	movq	648(%rsp), %rax         # 8-byte Reload
	movq	%r8, 608(%rsp)          # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 600(%rsp)          # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r15, 592(%rsp)         # 8-byte Spill
	movl	%ebp, 588(%rsp)         # 4-byte Spill
	movl	%r12d, 584(%rsp)        # 4-byte Spill
	movq	%r13, 576(%rsp)         # 8-byte Spill
	movq	%r14, 568(%rsp)         # 8-byte Spill
	movq	%rbx, 560(%rsp)         # 8-byte Spill
	movq	%r10, 552(%rsp)         # 8-byte Spill
	movq	%r11, 544(%rsp)         # 8-byte Spill
	callq	trace_logger_log0
	movq	608(%rsp), %rdi         # 8-byte Reload
	movq	928(%rsp), %rsi         # 8-byte Reload
	movq	632(%rsp), %rdx         # 8-byte Reload
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	920(%rsp), %r8          # 8-byte Reload
	movq	616(%rsp), %r9          # 8-byte Reload
	movq	600(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	616(%rsp), %rdi         # 8-byte Reload
	movq	928(%rsp), %rsi         # 8-byte Reload
	movq	632(%rsp), %rdx         # 8-byte Reload
	movq	632(%rsp), %rcx         # 8-byte Reload
	movq	896(%rsp), %r8          # 8-byte Reload
	movq	616(%rsp), %r9          # 8-byte Reload
	movq	664(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	576(%rsp), %rdi         # 8-byte Reload
	movq	928(%rsp), %rsi         # 8-byte Reload
	movq	968(%rsp), %rdx         # 8-byte Reload
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	904(%rsp), %r8          # 8-byte Reload
	movq	632(%rsp), %r9          # 8-byte Reload
	movq	664(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	864(%rsp), %rdi         # 8-byte Reload
	movq	568(%rsp), %rsi         # 8-byte Reload
	movq	600(%rsp), %rdx         # 8-byte Reload
	movq	680(%rsp), %rcx         # 8-byte Reload
	movq	888(%rsp), %r8          # 8-byte Reload
	movl	588(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	608(%rsp), %rdi         # 8-byte Reload
	movq	928(%rsp), %rsi         # 8-byte Reload
	movq	984(%rsp), %rdx         # 8-byte Reload
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	672(%rsp), %r8          # 8-byte Reload
	movq	632(%rsp), %r9          # 8-byte Reload
	movq	640(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	616(%rsp), %rdi         # 8-byte Reload
	movq	928(%rsp), %rsi         # 8-byte Reload
	movq	968(%rsp), %rdx         # 8-byte Reload
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	904(%rsp), %r8          # 8-byte Reload
	movq	632(%rsp), %r9          # 8-byte Reload
	movq	640(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	968(%rsp), %rax         # 8-byte Reload
	movq	984(%rsp), %rcx         # 8-byte Reload
	addq	%rcx, %rax
	movq	576(%rsp), %rdi         # 8-byte Reload
	movq	928(%rsp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	680(%rsp), %r8          # 8-byte Reload
	movq	632(%rsp), %r9          # 8-byte Reload
	movq	640(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 536(%rsp)         # 8-byte Spill
	callq	trace_logger_log_int
	movq	864(%rsp), %rdi         # 8-byte Reload
	movq	568(%rsp), %rsi         # 8-byte Reload
	movq	600(%rsp), %rdx         # 8-byte Reload
	movq	872(%rsp), %rcx         # 8-byte Reload
	movq	760(%rsp), %r8          # 8-byte Reload
	movl	588(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	608(%rsp), %rdi         # 8-byte Reload
	movq	928(%rsp), %rsi         # 8-byte Reload
	movq	536(%rsp), %rdx         # 8-byte Reload
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	680(%rsp), %r8          # 8-byte Reload
	movq	632(%rsp), %r9          # 8-byte Reload
	movq	640(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	616(%rsp), %rdi         # 8-byte Reload
	movq	928(%rsp), %rsi         # 8-byte Reload
	movq	2872(%rsp), %rdx        # 8-byte Reload
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	688(%rsp), %r8          # 8-byte Reload
	movq	632(%rsp), %r9          # 8-byte Reload
	movq	640(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	536(%rsp), %rax         # 8-byte Reload
	shlq	$3, %rax
	movq	2872(%rsp), %rcx        # 8-byte Reload
	addq	%rax, %rcx
	movq	576(%rsp), %rdi         # 8-byte Reload
	movq	928(%rsp), %rsi         # 8-byte Reload
	movq	%rcx, %rdx
	movq	616(%rsp), %rax         # 8-byte Reload
	movq	%rcx, 528(%rsp)         # 8-byte Spill
	movq	%rax, %rcx
	movq	872(%rsp), %r8          # 8-byte Reload
	movq	632(%rsp), %r9          # 8-byte Reload
	movq	640(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	864(%rsp), %rdi         # 8-byte Reload
	movq	568(%rsp), %rsi         # 8-byte Reload
	movq	600(%rsp), %rdx         # 8-byte Reload
	movq	840(%rsp), %rcx         # 8-byte Reload
	movq	784(%rsp), %r8          # 8-byte Reload
	movl	588(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	616(%rsp), %rdi         # 8-byte Reload
	movq	928(%rsp), %rsi         # 8-byte Reload
	movq	528(%rsp), %rdx         # 8-byte Reload
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	872(%rsp), %r8          # 8-byte Reload
	movq	632(%rsp), %r9          # 8-byte Reload
	movq	640(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2872(%rsp), %rax        # 8-byte Reload
	movq	536(%rsp), %rcx         # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
	movq	576(%rsp), %rdi         # 8-byte Reload
	movq	928(%rsp), %rsi         # 8-byte Reload
	vmovsd	%xmm0, 520(%rsp)        # 8-byte Spill
	movq	616(%rsp), %rdx         # 8-byte Reload
	movq	840(%rsp), %rcx         # 8-byte Reload
	movq	632(%rsp), %r8          # 8-byte Reload
	movq	640(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	864(%rsp), %rdi         # 8-byte Reload
	movq	568(%rsp), %rsi         # 8-byte Reload
	movq	600(%rsp), %rdx         # 8-byte Reload
	movq	712(%rsp), %rcx         # 8-byte Reload
	movq	912(%rsp), %r8          # 8-byte Reload
	movl	588(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	616(%rsp), %rdi         # 8-byte Reload
	movq	928(%rsp), %rsi         # 8-byte Reload
	movq	968(%rsp), %rdx         # 8-byte Reload
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	904(%rsp), %r8          # 8-byte Reload
	movq	632(%rsp), %r9          # 8-byte Reload
	movq	640(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	968(%rsp), %rax         # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	576(%rsp), %rdi         # 8-byte Reload
	movq	960(%rsp), %rsi         # 8-byte Reload
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	712(%rsp), %r8          # 8-byte Reload
	movq	632(%rsp), %r9          # 8-byte Reload
	movq	640(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 516(%rsp)         # 4-byte Spill
	callq	trace_logger_log_int
	movq	864(%rsp), %rdi         # 8-byte Reload
	movq	568(%rsp), %rsi         # 8-byte Reload
	movq	600(%rsp), %rdx         # 8-byte Reload
	movq	736(%rsp), %rcx         # 8-byte Reload
	movq	696(%rsp), %r8          # 8-byte Reload
	movl	588(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	2900(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	608(%rsp), %rdi         # 8-byte Reload
	movq	960(%rsp), %rsi         # 8-byte Reload
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	704(%rsp), %r8          # 8-byte Reload
	movq	632(%rsp), %r9          # 8-byte Reload
	movq	640(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	516(%rsp), %ebp         # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	616(%rsp), %rdi         # 8-byte Reload
	movq	960(%rsp), %rsi         # 8-byte Reload
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	712(%rsp), %r8          # 8-byte Reload
	movq	632(%rsp), %r9          # 8-byte Reload
	movq	640(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	516(%rsp), %ebp         # 4-byte Reload
	movl	2900(%rsp), %r12d       # 4-byte Reload
	imull	%r12d, %ebp
	movl	%ebp, %esi
	movl	%esi, %edx
	movq	576(%rsp), %rdi         # 8-byte Reload
	movq	960(%rsp), %rsi         # 8-byte Reload
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	736(%rsp), %r8          # 8-byte Reload
	movq	632(%rsp), %r9          # 8-byte Reload
	movq	640(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%ebp, 512(%rsp)         # 4-byte Spill
	callq	trace_logger_log_int
	movq	864(%rsp), %rdi         # 8-byte Reload
	movq	568(%rsp), %rsi         # 8-byte Reload
	movq	600(%rsp), %rdx         # 8-byte Reload
	movq	728(%rsp), %rcx         # 8-byte Reload
	movq	912(%rsp), %r8          # 8-byte Reload
	movl	588(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	616(%rsp), %rdi         # 8-byte Reload
	movq	928(%rsp), %rsi         # 8-byte Reload
	movq	2728(%rsp), %rdx        # 8-byte Reload
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	720(%rsp), %r8          # 8-byte Reload
	movq	632(%rsp), %r9          # 8-byte Reload
	movq	640(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2728(%rsp), %rax        # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	576(%rsp), %rdi         # 8-byte Reload
	movq	960(%rsp), %rsi         # 8-byte Reload
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	728(%rsp), %r8          # 8-byte Reload
	movq	632(%rsp), %r9          # 8-byte Reload
	movq	640(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 508(%rsp)         # 4-byte Spill
	callq	trace_logger_log_int
	movq	864(%rsp), %rdi         # 8-byte Reload
	movq	568(%rsp), %rsi         # 8-byte Reload
	movq	600(%rsp), %rdx         # 8-byte Reload
	movq	752(%rsp), %rcx         # 8-byte Reload
	movq	888(%rsp), %r8          # 8-byte Reload
	movl	588(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	508(%rsp), %r9d         # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	608(%rsp), %rdi         # 8-byte Reload
	movq	960(%rsp), %rsi         # 8-byte Reload
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	728(%rsp), %r8          # 8-byte Reload
	movq	632(%rsp), %r9          # 8-byte Reload
	movq	640(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	512(%rsp), %ebp         # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	616(%rsp), %rdi         # 8-byte Reload
	movq	960(%rsp), %rsi         # 8-byte Reload
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	736(%rsp), %r8          # 8-byte Reload
	movq	632(%rsp), %r9          # 8-byte Reload
	movq	640(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	512(%rsp), %ebp         # 4-byte Reload
	movl	508(%rsp), %r12d        # 4-byte Reload
	addl	%r12d, %ebp
	movl	%ebp, %esi
	movl	%esi, %edx
	movq	576(%rsp), %rdi         # 8-byte Reload
	movq	960(%rsp), %rsi         # 8-byte Reload
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	752(%rsp), %r8          # 8-byte Reload
	movq	632(%rsp), %r9          # 8-byte Reload
	movq	640(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%ebp, 504(%rsp)         # 4-byte Spill
	callq	trace_logger_log_int
	movq	864(%rsp), %rdi         # 8-byte Reload
	movq	568(%rsp), %rsi         # 8-byte Reload
	movq	600(%rsp), %rdx         # 8-byte Reload
	movq	768(%rsp), %rcx         # 8-byte Reload
	movq	744(%rsp), %r8          # 8-byte Reload
	movl	588(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	504(%rsp), %r9d         # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	616(%rsp), %rdi         # 8-byte Reload
	movq	960(%rsp), %rsi         # 8-byte Reload
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	752(%rsp), %r8          # 8-byte Reload
	movq	632(%rsp), %r9          # 8-byte Reload
	movq	640(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	504(%rsp), %ebp         # 4-byte Reload
	movslq	%ebp, %rax
	movq	576(%rsp), %rdi         # 8-byte Reload
	movq	928(%rsp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	768(%rsp), %r8          # 8-byte Reload
	movq	632(%rsp), %r9          # 8-byte Reload
	movq	640(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 496(%rsp)         # 8-byte Spill
	callq	trace_logger_log_int
	movq	864(%rsp), %rdi         # 8-byte Reload
	movq	568(%rsp), %rsi         # 8-byte Reload
	movq	600(%rsp), %rdx         # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	760(%rsp), %r8          # 8-byte Reload
	movl	588(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	608(%rsp), %rdi         # 8-byte Reload
	movq	928(%rsp), %rsi         # 8-byte Reload
	movq	496(%rsp), %rdx         # 8-byte Reload
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	768(%rsp), %r8          # 8-byte Reload
	movq	632(%rsp), %r9          # 8-byte Reload
	movq	640(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	616(%rsp), %rdi         # 8-byte Reload
	movq	928(%rsp), %rsi         # 8-byte Reload
	movq	2888(%rsp), %rdx        # 8-byte Reload
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	776(%rsp), %r8          # 8-byte Reload
	movq	632(%rsp), %r9          # 8-byte Reload
	movq	640(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	496(%rsp), %rax         # 8-byte Reload
	shlq	$3, %rax
	movq	2888(%rsp), %rcx        # 8-byte Reload
	addq	%rax, %rcx
	movq	576(%rsp), %rdi         # 8-byte Reload
	movq	928(%rsp), %rsi         # 8-byte Reload
	movq	%rcx, %rdx
	movq	616(%rsp), %rax         # 8-byte Reload
	movq	%rcx, 488(%rsp)         # 8-byte Spill
	movq	%rax, %rcx
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	632(%rsp), %r9          # 8-byte Reload
	movq	640(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	864(%rsp), %rdi         # 8-byte Reload
	movq	568(%rsp), %rsi         # 8-byte Reload
	movq	600(%rsp), %rdx         # 8-byte Reload
	movq	808(%rsp), %rcx         # 8-byte Reload
	movq	784(%rsp), %r8          # 8-byte Reload
	movl	588(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	616(%rsp), %rdi         # 8-byte Reload
	movq	928(%rsp), %rsi         # 8-byte Reload
	movq	488(%rsp), %rdx         # 8-byte Reload
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	632(%rsp), %r9          # 8-byte Reload
	movq	640(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2888(%rsp), %rax        # 8-byte Reload
	movq	496(%rsp), %rcx         # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
	movq	576(%rsp), %rdi         # 8-byte Reload
	movq	928(%rsp), %rsi         # 8-byte Reload
	vmovsd	%xmm0, 480(%rsp)        # 8-byte Spill
	movq	616(%rsp), %rdx         # 8-byte Reload
	movq	808(%rsp), %rcx         # 8-byte Reload
	movq	632(%rsp), %r8          # 8-byte Reload
	movq	640(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	864(%rsp), %rdi         # 8-byte Reload
	movq	568(%rsp), %rsi         # 8-byte Reload
	movq	600(%rsp), %rdx         # 8-byte Reload
	movq	832(%rsp), %rcx         # 8-byte Reload
	movq	800(%rsp), %r8          # 8-byte Reload
	movl	588(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	608(%rsp), %rdi         # 8-byte Reload
	movq	928(%rsp), %rsi         # 8-byte Reload
	vmovsd	480(%rsp), %xmm0        # 8-byte Reload
	movq	616(%rsp), %rdx         # 8-byte Reload
	movq	808(%rsp), %rcx         # 8-byte Reload
	movq	632(%rsp), %r8          # 8-byte Reload
	movq	640(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	616(%rsp), %rdi         # 8-byte Reload
	movq	928(%rsp), %rsi         # 8-byte Reload
	vmovsd	1000(%rsp), %xmm0       # 8-byte Reload
	movq	616(%rsp), %rdx         # 8-byte Reload
	movq	816(%rsp), %rcx         # 8-byte Reload
	movq	632(%rsp), %r8          # 8-byte Reload
	movq	640(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	1000(%rsp), %xmm0       # 8-byte Reload
	vmovsd	480(%rsp), %xmm1        # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	576(%rsp), %rdi         # 8-byte Reload
	movq	928(%rsp), %rsi         # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	616(%rsp), %rdx         # 8-byte Reload
	movq	832(%rsp), %rcx         # 8-byte Reload
	movq	632(%rsp), %r8          # 8-byte Reload
	movq	640(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 472(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	864(%rsp), %rdi         # 8-byte Reload
	movq	568(%rsp), %rsi         # 8-byte Reload
	movq	600(%rsp), %rdx         # 8-byte Reload
	movq	880(%rsp), %rcx         # 8-byte Reload
	movq	824(%rsp), %r8          # 8-byte Reload
	movl	588(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	608(%rsp), %rdi         # 8-byte Reload
	movq	928(%rsp), %rsi         # 8-byte Reload
	vmovsd	472(%rsp), %xmm0        # 8-byte Reload
	movq	616(%rsp), %rdx         # 8-byte Reload
	movq	832(%rsp), %rcx         # 8-byte Reload
	movq	632(%rsp), %r8          # 8-byte Reload
	movq	640(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	616(%rsp), %rdi         # 8-byte Reload
	movq	928(%rsp), %rsi         # 8-byte Reload
	vmovsd	520(%rsp), %xmm0        # 8-byte Reload
	movq	616(%rsp), %rdx         # 8-byte Reload
	movq	840(%rsp), %rcx         # 8-byte Reload
	movq	632(%rsp), %r8          # 8-byte Reload
	movq	640(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	520(%rsp), %xmm0        # 8-byte Reload
	vmovsd	472(%rsp), %xmm1        # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
	movq	576(%rsp), %rdi         # 8-byte Reload
	movq	928(%rsp), %rsi         # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	616(%rsp), %rdx         # 8-byte Reload
	movq	880(%rsp), %rcx         # 8-byte Reload
	movq	632(%rsp), %r8          # 8-byte Reload
	movq	640(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 464(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	864(%rsp), %rdi         # 8-byte Reload
	movq	568(%rsp), %rsi         # 8-byte Reload
	movq	600(%rsp), %rdx         # 8-byte Reload
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	848(%rsp), %r8          # 8-byte Reload
	movl	588(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	608(%rsp), %rdi         # 8-byte Reload
	movq	928(%rsp), %rsi         # 8-byte Reload
	movq	528(%rsp), %rdx         # 8-byte Reload
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	872(%rsp), %r8          # 8-byte Reload
	movq	632(%rsp), %r9          # 8-byte Reload
	movq	640(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	616(%rsp), %rdi         # 8-byte Reload
	movq	928(%rsp), %rsi         # 8-byte Reload
	vmovsd	464(%rsp), %xmm0        # 8-byte Reload
	movq	616(%rsp), %rdx         # 8-byte Reload
	movq	880(%rsp), %rcx         # 8-byte Reload
	movq	632(%rsp), %r8          # 8-byte Reload
	movq	640(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	2872(%rsp), %rax        # 8-byte Reload
	movq	536(%rsp), %rcx         # 8-byte Reload
	vmovsd	464(%rsp), %xmm0        # 8-byte Reload
	vmovsd	%xmm0, (%rax,%rcx,8)
.Ltmp543:
	.loc	2 683 0                 # eispack.c:683:0
	movq	560(%rsp), %rdi         # 8-byte Reload
	movq	568(%rsp), %rsi         # 8-byte Reload
	movq	600(%rsp), %rdx         # 8-byte Reload
	movq	920(%rsp), %rcx         # 8-byte Reload
	movq	888(%rsp), %r8          # 8-byte Reload
	movl	588(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	608(%rsp), %rdi         # 8-byte Reload
	movq	928(%rsp), %rsi         # 8-byte Reload
	movq	616(%rsp), %rdx         # 8-byte Reload
	movq	632(%rsp), %rcx         # 8-byte Reload
	movq	896(%rsp), %r8          # 8-byte Reload
	movq	632(%rsp), %r9          # 8-byte Reload
	movq	640(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	616(%rsp), %rdi         # 8-byte Reload
	movq	928(%rsp), %rsi         # 8-byte Reload
	movq	968(%rsp), %rdx         # 8-byte Reload
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	904(%rsp), %r8          # 8-byte Reload
	movq	632(%rsp), %r9          # 8-byte Reload
	movq	640(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	968(%rsp), %rax         # 8-byte Reload
	addq	$1, %rax
	movq	576(%rsp), %rdi         # 8-byte Reload
	movq	928(%rsp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	920(%rsp), %r8          # 8-byte Reload
	movq	632(%rsp), %r9          # 8-byte Reload
	movq	640(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 456(%rsp)         # 8-byte Spill
	callq	trace_logger_log_int
	movq	560(%rsp), %rdi         # 8-byte Reload
	movq	568(%rsp), %rsi         # 8-byte Reload
	movq	600(%rsp), %rdx         # 8-byte Reload
	movq	952(%rsp), %rcx         # 8-byte Reload
	movq	912(%rsp), %r8          # 8-byte Reload
	movl	588(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	616(%rsp), %rdi         # 8-byte Reload
	movq	928(%rsp), %rsi         # 8-byte Reload
	movq	456(%rsp), %rdx         # 8-byte Reload
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	920(%rsp), %r8          # 8-byte Reload
	movq	632(%rsp), %r9          # 8-byte Reload
	movq	640(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	456(%rsp), %rax         # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	576(%rsp), %rdi         # 8-byte Reload
	movq	960(%rsp), %rsi         # 8-byte Reload
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	952(%rsp), %r8          # 8-byte Reload
	movq	632(%rsp), %r9          # 8-byte Reload
	movq	640(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 452(%rsp)         # 4-byte Spill
	callq	trace_logger_log_int
	movq	560(%rsp), %rdi         # 8-byte Reload
	movq	568(%rsp), %rsi         # 8-byte Reload
	movq	600(%rsp), %rdx         # 8-byte Reload
	movq	624(%rsp), %rcx         # 8-byte Reload
	movq	936(%rsp), %r8          # 8-byte Reload
	movl	588(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	2736(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	608(%rsp), %rdi         # 8-byte Reload
	movq	960(%rsp), %rsi         # 8-byte Reload
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	944(%rsp), %r8          # 8-byte Reload
	movq	632(%rsp), %r9          # 8-byte Reload
	movq	640(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	452(%rsp), %ebp         # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	616(%rsp), %rdi         # 8-byte Reload
	movq	960(%rsp), %rsi         # 8-byte Reload
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	952(%rsp), %r8          # 8-byte Reload
	movq	632(%rsp), %r9          # 8-byte Reload
	movq	640(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	452(%rsp), %ebp         # 4-byte Reload
	movl	2736(%rsp), %r12d       # 4-byte Reload
	cmpl	%r12d, %ebp
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	576(%rsp), %rdi         # 8-byte Reload
	movq	616(%rsp), %rsi         # 8-byte Reload
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	624(%rsp), %r8          # 8-byte Reload
	movq	632(%rsp), %r9          # 8-byte Reload
	movq	640(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 451(%rsp)          # 1-byte Spill
	callq	trace_logger_log_int
	movq	560(%rsp), %rdi         # 8-byte Reload
	movq	568(%rsp), %rsi         # 8-byte Reload
	movq	600(%rsp), %rdx         # 8-byte Reload
	movq	592(%rsp), %rcx         # 8-byte Reload
	movq	608(%rsp), %r8          # 8-byte Reload
	movl	588(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	552(%rsp), %rdi         # 8-byte Reload
	movq	632(%rsp), %rsi         # 8-byte Reload
	movq	632(%rsp), %rdx         # 8-byte Reload
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	544(%rsp), %r8          # 8-byte Reload
	movq	632(%rsp), %r9          # 8-byte Reload
	movq	640(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	608(%rsp), %rdi         # 8-byte Reload
	movq	632(%rsp), %rsi         # 8-byte Reload
	movq	632(%rsp), %rdx         # 8-byte Reload
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	600(%rsp), %r8          # 8-byte Reload
	movq	632(%rsp), %r9          # 8-byte Reload
	movq	640(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	451(%rsp), %al          # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	616(%rsp), %rdi         # 8-byte Reload
	movq	616(%rsp), %rsi         # 8-byte Reload
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	624(%rsp), %r8          # 8-byte Reload
	movq	632(%rsp), %r9          # 8-byte Reload
	movq	640(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	451(%rsp), %al          # 1-byte Reload
	testb	$1, %al
	movq	456(%rsp), %rcx         # 8-byte Reload
	movq	%rcx, 976(%rsp)         # 8-byte Spill
	jne	.LBB11_8
	jmp	.LBB11_7
.Ltmp544:
.LBB11_8:                               # %._crit_edge7
                                        #   in Loop: Header=BB11_4 Depth=2
	movabsq	$1, %rax
	leaq	.L.str517, %rcx
	movabsq	$0, %rdx
	leaq	.L.str792, %rsi
	movabsq	$2, %rdi
	leaq	.L.str117, %r8
	movabsq	$3, %r9
	leaq	.L.str178, %r10
	movabsq	$675, %r11              # imm = 0x2A3
	leaq	.L.str478, %rbx
	leaq	.L.str501, %r14
	leaq	.L.str518, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 440(%rsp)         # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 432(%rsp)         # 8-byte Spill
	leaq	.L.str516, %rax
	movq	%rax, 424(%rsp)         # 8-byte Spill
	leaq	.L.str480, %rax
	movq	%rax, 416(%rsp)         # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 408(%rsp)         # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 400(%rsp)         # 8-byte Spill
	leaq	.L.str500, %rax
	movq	%rax, 392(%rsp)         # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, 384(%rsp)         # 8-byte Spill
	leaq	.L.str499, %rax
	movq	%rax, 376(%rsp)         # 8-byte Spill
	leaq	.L.str1499, %rax
	movq	%rax, 368(%rsp)         # 8-byte Spill
	movabsq	$8, %rax
	.loc	2 675 0                 # eispack.c:675:0
	movq	%rdi, 360(%rsp)         # 8-byte Spill
	movq	%r11, %rdi
	movq	%rsi, 352(%rsp)         # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, 344(%rsp)         # 8-byte Spill
	movq	%r14, %rdx
	movq	%rax, 336(%rsp)         # 8-byte Spill
	movq	392(%rsp), %rax         # 8-byte Reload
	movq	%rcx, 328(%rsp)         # 8-byte Spill
	movq	%rax, %rcx
	movq	336(%rsp), %rax         # 8-byte Reload
	movq	%r8, 320(%rsp)          # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 312(%rsp)          # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r15, 304(%rsp)         # 8-byte Spill
	movl	%ebp, 300(%rsp)         # 4-byte Spill
	movl	%r12d, 296(%rsp)        # 4-byte Spill
	movq	%r13, 288(%rsp)         # 8-byte Spill
	movq	%r14, 280(%rsp)         # 8-byte Spill
	movq	%rbx, 272(%rsp)         # 8-byte Spill
	movq	%r10, 264(%rsp)         # 8-byte Spill
	movq	%r11, 256(%rsp)         # 8-byte Spill
	callq	trace_logger_log0
	movq	360(%rsp), %rdi         # 8-byte Reload
	movq	400(%rsp), %rsi         # 8-byte Reload
	movq	440(%rsp), %rdx         # 8-byte Reload
	movq	344(%rsp), %rcx         # 8-byte Reload
	movq	368(%rsp), %r8          # 8-byte Reload
	movq	344(%rsp), %r9          # 8-byte Reload
	movq	352(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	440(%rsp), %rdi         # 8-byte Reload
	movq	400(%rsp), %rsi         # 8-byte Reload
	movq	2096(%rsp), %rdx        # 8-byte Reload
	movq	440(%rsp), %rcx         # 8-byte Reload
	movq	376(%rsp), %r8          # 8-byte Reload
	movq	344(%rsp), %r9          # 8-byte Reload
	movq	352(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2096(%rsp), %rax        # 8-byte Reload
	addq	$1, %rax
	movq	288(%rsp), %rdi         # 8-byte Reload
	movq	400(%rsp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	movq	440(%rsp), %rcx         # 8-byte Reload
	movq	392(%rsp), %r8          # 8-byte Reload
	movq	344(%rsp), %r9          # 8-byte Reload
	movq	352(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 248(%rsp)         # 8-byte Spill
	callq	trace_logger_log_int
	movq	256(%rsp), %rdi         # 8-byte Reload
	movq	272(%rsp), %rsi         # 8-byte Reload
	movq	280(%rsp), %rdx         # 8-byte Reload
	movq	424(%rsp), %rcx         # 8-byte Reload
	movq	384(%rsp), %r8          # 8-byte Reload
	movl	300(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	440(%rsp), %rdi         # 8-byte Reload
	movq	400(%rsp), %rsi         # 8-byte Reload
	movq	248(%rsp), %rdx         # 8-byte Reload
	movq	440(%rsp), %rcx         # 8-byte Reload
	movq	392(%rsp), %r8          # 8-byte Reload
	movq	344(%rsp), %r9          # 8-byte Reload
	movq	352(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	248(%rsp), %rax         # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	288(%rsp), %rdi         # 8-byte Reload
	movq	432(%rsp), %rsi         # 8-byte Reload
	movq	440(%rsp), %rcx         # 8-byte Reload
	movq	424(%rsp), %r8          # 8-byte Reload
	movq	344(%rsp), %r9          # 8-byte Reload
	movq	352(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 244(%rsp)         # 4-byte Spill
	callq	trace_logger_log_int
	movq	256(%rsp), %rdi         # 8-byte Reload
	movq	272(%rsp), %rsi         # 8-byte Reload
	movq	280(%rsp), %rdx         # 8-byte Reload
	movq	328(%rsp), %rcx         # 8-byte Reload
	movq	408(%rsp), %r8          # 8-byte Reload
	movl	300(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	3060(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	360(%rsp), %rdi         # 8-byte Reload
	movq	432(%rsp), %rsi         # 8-byte Reload
	movq	440(%rsp), %rcx         # 8-byte Reload
	movq	416(%rsp), %r8          # 8-byte Reload
	movq	344(%rsp), %r9          # 8-byte Reload
	movq	352(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	244(%rsp), %ebp         # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	440(%rsp), %rdi         # 8-byte Reload
	movq	432(%rsp), %rsi         # 8-byte Reload
	movq	440(%rsp), %rcx         # 8-byte Reload
	movq	424(%rsp), %r8          # 8-byte Reload
	movq	344(%rsp), %r9          # 8-byte Reload
	movq	352(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	244(%rsp), %ebp         # 4-byte Reload
	movl	3060(%rsp), %r12d       # 4-byte Reload
	cmpl	%r12d, %ebp
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	288(%rsp), %rdi         # 8-byte Reload
	movq	440(%rsp), %rsi         # 8-byte Reload
	movq	440(%rsp), %rcx         # 8-byte Reload
	movq	328(%rsp), %r8          # 8-byte Reload
	movq	344(%rsp), %r9          # 8-byte Reload
	movq	352(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 243(%rsp)          # 1-byte Spill
	callq	trace_logger_log_int
	movq	256(%rsp), %rdi         # 8-byte Reload
	movq	272(%rsp), %rsi         # 8-byte Reload
	movq	280(%rsp), %rdx         # 8-byte Reload
	movq	304(%rsp), %rcx         # 8-byte Reload
	movq	360(%rsp), %r8          # 8-byte Reload
	movl	300(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	312(%rsp), %rdi         # 8-byte Reload
	movq	344(%rsp), %rsi         # 8-byte Reload
	movq	344(%rsp), %rdx         # 8-byte Reload
	movq	440(%rsp), %rcx         # 8-byte Reload
	movq	264(%rsp), %r8          # 8-byte Reload
	movq	344(%rsp), %r9          # 8-byte Reload
	movq	352(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	360(%rsp), %rdi         # 8-byte Reload
	movq	344(%rsp), %rsi         # 8-byte Reload
	movq	344(%rsp), %rdx         # 8-byte Reload
	movq	440(%rsp), %rcx         # 8-byte Reload
	movq	320(%rsp), %r8          # 8-byte Reload
	movq	344(%rsp), %r9          # 8-byte Reload
	movq	352(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	243(%rsp), %al          # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	440(%rsp), %rdi         # 8-byte Reload
	movq	440(%rsp), %rsi         # 8-byte Reload
	movq	440(%rsp), %rcx         # 8-byte Reload
	movq	328(%rsp), %r8          # 8-byte Reload
	movq	344(%rsp), %r9          # 8-byte Reload
	movq	352(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	243(%rsp), %al          # 1-byte Reload
	testb	$1, %al
	movq	248(%rsp), %rcx         # 8-byte Reload
	movq	%rcx, 2104(%rsp)        # 8-byte Spill
	jne	.LBB11_9
	jmp	.LBB11_4
.Ltmp545:
.LBB11_9:                               # %.loopexit
                                        #   in Loop: Header=BB11_2 Depth=1
	movabsq	$1, %rax
	leaq	.L.str520, %rcx
	movabsq	$0, %rdx
	leaq	.L.str792, %rsi
	movabsq	$2, %rdi
	leaq	.L.str488, %r8
	movabsq	$3, %r9
	leaq	.L.str486, %r10
	movabsq	$669, %r11              # imm = 0x29D
	leaq	.L.str478, %rbx
	leaq	.L.str178, %r14
	leaq	.L.str521, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 232(%rsp)         # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 224(%rsp)         # 8-byte Spill
	leaq	.L.str519, %rax
	movq	%rax, 216(%rsp)         # 8-byte Spill
	leaq	.L.str51136, %rax
	movq	%rax, 208(%rsp)         # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 200(%rsp)         # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 192(%rsp)         # 8-byte Spill
	leaq	.L.str490, %rax
	movq	%rax, 184(%rsp)         # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, 176(%rsp)         # 8-byte Spill
	leaq	.L.str492, %rax
	movq	%rax, 168(%rsp)         # 8-byte Spill
	leaq	.L.str491, %rax
	movq	%rax, 160(%rsp)         # 8-byte Spill
	leaq	.L.str1499, %rax
	movq	%rax, 152(%rsp)         # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, 144(%rsp)         # 8-byte Spill
	leaq	.L.str489174, %rax
	.loc	2 669 0                 # eispack.c:669:0
	movq	%rdi, 136(%rsp)         # 8-byte Spill
	movq	%r11, %rdi
	movq	%rsi, 128(%rsp)         # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, 120(%rsp)         # 8-byte Spill
	movq	%r14, %rdx
	movq	%rax, 112(%rsp)         # 8-byte Spill
	movq	184(%rsp), %rax         # 8-byte Reload
	movq	%rcx, 104(%rsp)         # 8-byte Spill
	movq	%rax, %rcx
	movq	144(%rsp), %rax         # 8-byte Reload
	movq	%r8, 96(%rsp)           # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 88(%rsp)           # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r15, 80(%rsp)          # 8-byte Spill
	movl	%ebp, 76(%rsp)          # 4-byte Spill
	movl	%r12d, 72(%rsp)         # 4-byte Spill
	movq	%r13, 64(%rsp)          # 8-byte Spill
	movq	%r14, 56(%rsp)          # 8-byte Spill
	movq	%rbx, 48(%rsp)          # 8-byte Spill
	movq	%r10, 40(%rsp)          # 8-byte Spill
	movq	%r11, 32(%rsp)          # 8-byte Spill
	callq	trace_logger_log0
	movq	136(%rsp), %rdi         # 8-byte Reload
	movq	192(%rsp), %rsi         # 8-byte Reload
	movq	232(%rsp), %rdx         # 8-byte Reload
	movq	120(%rsp), %rcx         # 8-byte Reload
	movq	152(%rsp), %r8          # 8-byte Reload
	movq	120(%rsp), %r9          # 8-byte Reload
	movq	128(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	232(%rsp), %rdi         # 8-byte Reload
	movq	192(%rsp), %rsi         # 8-byte Reload
	movq	2728(%rsp), %rdx        # 8-byte Reload
	movq	232(%rsp), %rcx         # 8-byte Reload
	movq	112(%rsp), %r8          # 8-byte Reload
	movq	120(%rsp), %r9          # 8-byte Reload
	movq	128(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2728(%rsp), %rax        # 8-byte Reload
	addq	$1, %rax
	movq	64(%rsp), %rdi          # 8-byte Reload
	movq	192(%rsp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	movq	232(%rsp), %rcx         # 8-byte Reload
	movq	184(%rsp), %r8          # 8-byte Reload
	movq	120(%rsp), %r9          # 8-byte Reload
	movq	128(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 24(%rsp)          # 8-byte Spill
	callq	trace_logger_log_int
	movq	32(%rsp), %rdi          # 8-byte Reload
	movq	48(%rsp), %rsi          # 8-byte Reload
	movq	56(%rsp), %rdx          # 8-byte Reload
	movq	168(%rsp), %rcx         # 8-byte Reload
	movq	144(%rsp), %r8          # 8-byte Reload
	movl	76(%rsp), %r9d          # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	136(%rsp), %rdi         # 8-byte Reload
	movq	224(%rsp), %rsi         # 8-byte Reload
	movq	232(%rsp), %rdx         # 8-byte Reload
	movq	120(%rsp), %rcx         # 8-byte Reload
	movq	152(%rsp), %r8          # 8-byte Reload
	movq	120(%rsp), %r9          # 8-byte Reload
	movq	128(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	2736(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	232(%rsp), %rdi         # 8-byte Reload
	movq	224(%rsp), %rsi         # 8-byte Reload
	movq	232(%rsp), %rcx         # 8-byte Reload
	movq	160(%rsp), %r8          # 8-byte Reload
	movq	120(%rsp), %r9          # 8-byte Reload
	movq	128(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	2736(%rsp), %ebp        # 4-byte Reload
	addl	$1, %ebp
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	64(%rsp), %rdi          # 8-byte Reload
	movq	224(%rsp), %rsi         # 8-byte Reload
	movq	232(%rsp), %rcx         # 8-byte Reload
	movq	168(%rsp), %r8          # 8-byte Reload
	movq	120(%rsp), %r9          # 8-byte Reload
	movq	128(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%ebp, 20(%rsp)          # 4-byte Spill
	callq	trace_logger_log_int
.Ltmp546:
	#DEBUG_VALUE: trbak1:i <- [RSP+20]
	movq	32(%rsp), %rdi          # 8-byte Reload
	movq	48(%rsp), %rsi          # 8-byte Reload
	movq	56(%rsp), %rdx          # 8-byte Reload
	movq	216(%rsp), %rcx         # 8-byte Reload
	movq	176(%rsp), %r8          # 8-byte Reload
	movl	76(%rsp), %r9d          # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	232(%rsp), %rdi         # 8-byte Reload
	movq	192(%rsp), %rsi         # 8-byte Reload
	movq	24(%rsp), %rdx          # 8-byte Reload
	movq	232(%rsp), %rcx         # 8-byte Reload
	movq	184(%rsp), %r8          # 8-byte Reload
	movq	120(%rsp), %r9          # 8-byte Reload
	movq	128(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	24(%rsp), %rax          # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	64(%rsp), %rdi          # 8-byte Reload
	movq	224(%rsp), %rsi         # 8-byte Reload
	movq	232(%rsp), %rcx         # 8-byte Reload
	movq	216(%rsp), %r8          # 8-byte Reload
	movq	120(%rsp), %r9          # 8-byte Reload
	movq	128(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 16(%rsp)          # 4-byte Spill
	callq	trace_logger_log_int
	movq	32(%rsp), %rdi          # 8-byte Reload
	movq	48(%rsp), %rsi          # 8-byte Reload
	movq	56(%rsp), %rdx          # 8-byte Reload
	movq	104(%rsp), %rcx         # 8-byte Reload
	movq	200(%rsp), %r8          # 8-byte Reload
	movl	76(%rsp), %r9d          # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	2900(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	136(%rsp), %rdi         # 8-byte Reload
	movq	224(%rsp), %rsi         # 8-byte Reload
	movq	232(%rsp), %rcx         # 8-byte Reload
	movq	208(%rsp), %r8          # 8-byte Reload
	movq	120(%rsp), %r9          # 8-byte Reload
	movq	128(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	16(%rsp), %ebp          # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	232(%rsp), %rdi         # 8-byte Reload
	movq	224(%rsp), %rsi         # 8-byte Reload
	movq	232(%rsp), %rcx         # 8-byte Reload
	movq	216(%rsp), %r8          # 8-byte Reload
	movq	120(%rsp), %r9          # 8-byte Reload
	movq	128(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	16(%rsp), %ebp          # 4-byte Reload
	movl	2900(%rsp), %r12d       # 4-byte Reload
	cmpl	%r12d, %ebp
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	64(%rsp), %rdi          # 8-byte Reload
	movq	232(%rsp), %rsi         # 8-byte Reload
	movq	232(%rsp), %rcx         # 8-byte Reload
	movq	104(%rsp), %r8          # 8-byte Reload
	movq	120(%rsp), %r9          # 8-byte Reload
	movq	128(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 15(%rsp)           # 1-byte Spill
	callq	trace_logger_log_int
	movq	32(%rsp), %rdi          # 8-byte Reload
	movq	48(%rsp), %rsi          # 8-byte Reload
	movq	56(%rsp), %rdx          # 8-byte Reload
	movq	80(%rsp), %rcx          # 8-byte Reload
	movq	136(%rsp), %r8          # 8-byte Reload
	movl	76(%rsp), %r9d          # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	88(%rsp), %rdi          # 8-byte Reload
	movq	120(%rsp), %rsi         # 8-byte Reload
	movq	120(%rsp), %rdx         # 8-byte Reload
	movq	232(%rsp), %rcx         # 8-byte Reload
	movq	40(%rsp), %r8           # 8-byte Reload
	movq	120(%rsp), %r9          # 8-byte Reload
	movq	128(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	136(%rsp), %rdi         # 8-byte Reload
	movq	120(%rsp), %rsi         # 8-byte Reload
	movq	120(%rsp), %rdx         # 8-byte Reload
	movq	232(%rsp), %rcx         # 8-byte Reload
	movq	96(%rsp), %r8           # 8-byte Reload
	movq	120(%rsp), %r9          # 8-byte Reload
	movq	128(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	15(%rsp), %al           # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	232(%rsp), %rdi         # 8-byte Reload
	movq	232(%rsp), %rsi         # 8-byte Reload
	movq	232(%rsp), %rcx         # 8-byte Reload
	movq	104(%rsp), %r8          # 8-byte Reload
	movq	120(%rsp), %r9          # 8-byte Reload
	movq	128(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	15(%rsp), %al           # 1-byte Reload
	testb	$1, %al
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	20(%rsp), %ebp          # 4-byte Reload
	movq	%rcx, 2744(%rsp)        # 8-byte Spill
	movl	%ebp, 2740(%rsp)        # 4-byte Spill
	jne	.LBB11_10
	jmp	.LBB11_2
.Ltmp547:
.LBB11_10:                              # %.loopexit11
	movabsq	$692, %rdi              # imm = 0x2B4
	leaq	.L.str478, %rsi
	leaq	.L.str486, %rdx
	leaq	.L.str522, %rcx
	movabsq	$1, %r8
	movl	$0, %r9d
	movl	$1, %eax
	.loc	2 692 0                 # eispack.c:692:0
	movl	$1, (%rsp)
	movl	%eax, 8(%rsp)           # 4-byte Spill
	callq	trace_logger_log0
	addq	$3080, %rsp             # imm = 0xC08
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
.Ltmp548:
.Ltmp549:
	.size	trbak1, .Ltmp549-trbak1
.Lfunc_end11:
	.cfi_endproc

	.globl	trace_logger_write_labelmap
	.align	16, 0x90
	.type	trace_logger_write_labelmap,@function
trace_logger_write_labelmap:            # @trace_logger_write_labelmap
	.cfi_startproc
# BB#0:
	subq	$24, %rsp
.Ltmp551:
	.cfi_def_cfa_offset 32
	cmpb	$0, initp
	movq	%rdi, 16(%rsp)          # 8-byte Spill
	movq	%rsi, 8(%rsp)           # 8-byte Spill
	jne	.LBB12_2
# BB#1:
	callq	trace_logger_init
.LBB12_2:
	movq	full_trace_file(%rip), %rdi
	movl	$.L.str523, %eax
	movl	%eax, %esi
	movl	$26, %edx
	callq	gzwrite
	movq	full_trace_file(%rip), %rdi
	movq	8(%rsp), %rsi           # 8-byte Reload
	movl	%esi, %edx
	movq	16(%rsp), %rsi          # 8-byte Reload
	movl	%eax, 4(%rsp)           # 4-byte Spill
	callq	gzwrite
	movq	full_trace_file(%rip), %rdi
	movl	$.L.str1524, %edx
	movl	%edx, %esi
	movl	$25, %edx
	movl	%eax, (%rsp)            # 4-byte Spill
	addq	$24, %rsp
	jmp	gzwrite                 # TAILCALL
.Ltmp552:
	.size	trace_logger_write_labelmap, .Ltmp552-trace_logger_write_labelmap
	.cfi_endproc

	.globl	trace_logger_init
	.align	16, 0x90
	.type	trace_logger_init,@function
trace_logger_init:                      # @trace_logger_init
	.cfi_startproc
# BB#0:
	pushq	%rax
.Ltmp554:
	.cfi_def_cfa_offset 16
	movl	$.L.str2525, %eax
	movl	%eax, %edi
	movl	$.L.str3526, %eax
	movl	%eax, %esi
	callq	gzopen
	movq	%rax, full_trace_file
	cmpq	$0, %rax
	jne	.LBB13_2
# BB#1:
	movl	$.L.str4527, %eax
	movl	%eax, %edi
	callq	perror
	movl	$-1, %edi
	callq	exit
.LBB13_2:
	movl	$512, %eax              # imm = 0x200
	movl	%eax, %edi
	movl	$1, %eax
	movl	%eax, %esi
	callq	calloc
	movq	%rax, current_toplevel_function
	movl	$2, current_logging_status
	movl	$trace_logger_fin, %ecx
	movl	%ecx, %edi
	callq	atexit
	movb	$1, initp
	movl	%eax, 4(%rsp)           # 4-byte Spill
	popq	%rax
	ret
.Ltmp555:
	.size	trace_logger_init, .Ltmp555-trace_logger_init
	.cfi_endproc

	.globl	trace_logger_fin
	.align	16, 0x90
	.type	trace_logger_fin,@function
trace_logger_fin:                       # @trace_logger_fin
	.cfi_startproc
# BB#0:
	pushq	%rax
.Ltmp557:
	.cfi_def_cfa_offset 16
	movq	current_toplevel_function(%rip), %rdi
	callq	free
	movq	full_trace_file(%rip), %rdi
	popq	%rax
	jmp	gzclose                 # TAILCALL
.Ltmp558:
	.size	trace_logger_fin, .Ltmp558-trace_logger_fin
	.cfi_endproc

	.globl	log_or_not
	.align	16, 0x90
	.type	log_or_not,@function
log_or_not:                             # @log_or_not
	.cfi_startproc
# BB#0:
	subq	$40, %rsp
.Ltmp560:
	.cfi_def_cfa_offset 48
	movb	%sil, %al
	movb	%dil, %r8b
	testb	$1, %r8b
	movl	%edx, 36(%rsp)          # 4-byte Spill
	movq	%rcx, 24(%rsp)          # 8-byte Spill
	movb	%al, 23(%rsp)           # 1-byte Spill
	jne	.LBB15_2
	jmp	.LBB15_1
.LBB15_1:
	movl	$1, %eax
	movl	$2, %ecx
	movb	23(%rsp), %dl           # 1-byte Reload
	testb	%dl, %dl
	cmovel	%ecx, %eax
	movl	%eax, 16(%rsp)          # 4-byte Spill
	jmp	.LBB15_9
.LBB15_2:
	movb	23(%rsp), %al           # 1-byte Reload
	testb	$1, %al
	jne	.LBB15_4
	jmp	.LBB15_3
.LBB15_3:
	movl	current_logging_status, %eax
	movl	%eax, 16(%rsp)          # 4-byte Spill
	jmp	.LBB15_9
.LBB15_4:
	movl	$1, %eax
	movl	36(%rsp), %ecx          # 4-byte Reload
	cmpl	$1, %ecx
	movl	%eax, 16(%rsp)          # 4-byte Spill
	jne	.LBB15_9
# BB#5:
	movq	current_toplevel_function, %rax
	cmpb	$0, (%rax)
	movq	%rax, 8(%rsp)           # 8-byte Spill
	jne	.LBB15_7
# BB#6:
	movl	$.L.str5528, %eax
	movl	%eax, %edi
	movl	$.L.str6529, %eax
	movl	%eax, %esi
	movl	$.L__PRETTY_FUNCTION__.log_or_not, %eax
	movl	%eax, %ecx
	movl	$118, %edx
	callq	__assert_fail
.LBB15_7:
	movl	$0, %eax
	movq	24(%rsp), %rdi          # 8-byte Reload
	movq	8(%rsp), %rsi           # 8-byte Reload
	movl	%eax, 4(%rsp)           # 4-byte Spill
	callq	strcmp
	cmpl	$0, %eax
	movl	4(%rsp), %eax           # 4-byte Reload
	movl	%eax, 16(%rsp)          # 4-byte Spill
	je	.LBB15_9
# BB#8:
	movl	$.L.str7530, %eax
	movl	%eax, %edi
	movl	$.L.str6529, %eax
	movl	%eax, %esi
	movl	$.L__PRETTY_FUNCTION__.log_or_not, %eax
	movl	%eax, %ecx
	movl	$123, %edx
	callq	__assert_fail
.LBB15_9:
	movl	16(%rsp), %eax          # 4-byte Reload
	addq	$40, %rsp
	ret
.Ltmp561:
	.size	log_or_not, .Ltmp561-log_or_not
	.cfi_endproc

	.globl	convert_bytes_to_hex
	.align	16, 0x90
	.type	convert_bytes_to_hex,@function
convert_bytes_to_hex:                   # @convert_bytes_to_hex
	.cfi_startproc
# BB#0:
	subq	$56, %rsp
.Ltmp563:
	.cfi_def_cfa_offset 64
	movabsq	$0, %rax
	movw	.L.str8531, %cx
	movw	%cx, (%rdi)
	movb	.L.str8531+2, %r8b
	movb	%r8b, 2(%rdi)
	addq	$2, %rdi
	cmpl	$0, %edx
	movq	%rsi, 48(%rsp)          # 8-byte Spill
	movq	%rax, 40(%rsp)          # 8-byte Spill
	movl	%edx, 36(%rsp)          # 4-byte Spill
	movq	%rdi, 24(%rsp)          # 8-byte Spill
	jle	.LBB16_2
.LBB16_1:                               # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	40(%rsp), %rcx          # 8-byte Reload
	movq	48(%rsp), %rdx          # 8-byte Reload
	movzbl	(%rdx,%rcx), %edx
	movl	$.L.str9532, %esi
                                        # kill: RSI<def> ESI<kill>
	xorl	%edi, %edi
	movb	%dil, %r8b
	movq	%rax, %rdi
	movq	%rax, 16(%rsp)          # 8-byte Spill
	movb	%r8b, %al
	movq	%rcx, 8(%rsp)           # 8-byte Spill
	callq	sprintf
	movslq	%eax, %rcx
	movq	16(%rsp), %rsi          # 8-byte Reload
	addq	%rcx, %rsi
	movq	8(%rsp), %rcx           # 8-byte Reload
	addq	$1, %rcx
	movl	%ecx, %eax
	movl	36(%rsp), %edx          # 4-byte Reload
	cmpl	%edx, %eax
	movq	%rcx, 40(%rsp)          # 8-byte Spill
	movq	%rsi, 24(%rsp)          # 8-byte Spill
	jne	.LBB16_1
.LBB16_2:                               # %._crit_edge
	movq	24(%rsp), %rax          # 8-byte Reload
	movb	$0, (%rax)
	addq	$56, %rsp
	ret
.Ltmp564:
	.size	convert_bytes_to_hex, .Ltmp564-convert_bytes_to_hex
	.cfi_endproc

	.globl	update_logging_status
	.align	16, 0x90
	.type	update_logging_status,@function
update_logging_status:                  # @update_logging_status
	.cfi_startproc
# BB#0:
	subq	$56, %rsp
.Ltmp566:
	.cfi_def_cfa_offset 64
	movb	%cl, %al
	movb	%dl, %r8b
	movl	current_logging_status, %ecx
	cmpl	$0, %ecx
	movl	%esi, 52(%rsp)          # 4-byte Spill
	movb	%al, 51(%rsp)           # 1-byte Spill
	movb	%r8b, 50(%rsp)          # 1-byte Spill
	movq	%rdi, 40(%rsp)          # 8-byte Spill
	movl	%ecx, 36(%rsp)          # 4-byte Spill
	jne	.LBB17_2
# BB#1:
	movl	inst_count, %esi
	movl	$.L.str10533, %eax
	movl	%eax, %edi
	xorl	%eax, %eax
	movb	%al, %cl
	movb	%cl, %al
	callq	printf
	movl	$2, current_logging_status
	movl	%eax, 32(%rsp)          # 4-byte Spill
	jmp	.LBB17_8
.LBB17_2:
	movb	51(%rsp), %al           # 1-byte Reload
	movzbl	%al, %ecx
	andl	$1, %ecx
	movb	50(%rsp), %dl           # 1-byte Reload
	movzbl	%dl, %esi
	andl	$1, %esi
	movl	%ecx, %edi
	movl	52(%rsp), %edx          # 4-byte Reload
	movq	40(%rsp), %rcx          # 8-byte Reload
	callq	log_or_not
	movl	%eax, current_logging_status
	movl	36(%rsp), %edx          # 4-byte Reload
	cmpl	$2, %edx
	setne	%r8b
	cmpl	%edx, %eax
	sete	%r9b
	orb	%r9b, %r8b
	testb	$1, %r8b
	movl	%eax, 28(%rsp)          # 4-byte Spill
	jne	.LBB17_4
# BB#3:
	movl	inst_count, %esi
	movl	$.L.str11534, %eax
	movl	%eax, %edi
	xorl	%eax, %eax
	movb	%al, %cl
	movb	%cl, %al
	callq	printf
	movl	current_logging_status, %esi
	movl	%eax, 24(%rsp)          # 4-byte Spill
	movl	%esi, 28(%rsp)          # 4-byte Spill
.LBB17_4:
	movl	28(%rsp), %eax          # 4-byte Reload
	movq	current_toplevel_function, %rcx
	cmpb	$0, (%rcx)
	sete	%dl
	cmpl	$1, %eax
	sete	%sil
	andb	%sil, %dl
	testb	$1, %dl
	movl	%eax, 20(%rsp)          # 4-byte Spill
	movq	%rcx, 8(%rsp)           # 8-byte Spill
	jne	.LBB17_5
	jmp	.LBB17_6
.LBB17_5:
	movq	8(%rsp), %rdi           # 8-byte Reload
	movq	40(%rsp), %rsi          # 8-byte Reload
	callq	strcpy
	movq	%rax, (%rsp)            # 8-byte Spill
	jmp	.LBB17_8
.LBB17_6:
	movl	20(%rsp), %eax          # 4-byte Reload
	cmpl	$0, %eax
	jne	.LBB17_8
# BB#7:
	movl	$0, %esi
	movabsq	$512, %rdx              # imm = 0x200
	movq	8(%rsp), %rdi           # 8-byte Reload
	callq	memset
.LBB17_8:
	addq	$56, %rsp
	ret
.Ltmp567:
	.size	update_logging_status, .Ltmp567-update_logging_status
	.cfi_endproc

	.globl	do_not_log
	.align	16, 0x90
	.type	do_not_log,@function
do_not_log:                             # @do_not_log
	.cfi_startproc
# BB#0:
	cmpl	$2, current_logging_status
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	ret
.Ltmp568:
	.size	do_not_log, .Ltmp568-do_not_log
	.cfi_endproc

	.globl	trace_logger_log_entry
	.align	16, 0x90
	.type	trace_logger_log_entry,@function
trace_logger_log_entry:                 # @trace_logger_log_entry
	.cfi_startproc
# BB#0:
	subq	$24, %rsp
.Ltmp570:
	.cfi_def_cfa_offset 32
	cmpb	$0, initp
	movq	%rdi, 16(%rsp)          # 8-byte Spill
	movl	%esi, 12(%rsp)          # 4-byte Spill
	jne	.LBB19_2
# BB#1:
	callq	trace_logger_init
.LBB19_2:
	xorl	%esi, %esi
	movl	$1, %eax
	movq	16(%rsp), %rdi          # 8-byte Reload
	movl	%eax, %edx
	movl	%eax, %ecx
	callq	update_logging_status
	cmpl	$2, current_logging_status
	je	.LBB19_4
# BB#3:
	movq	full_trace_file, %rdi
	movl	$.L.str12535, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movb	%al, %cl
	movq	16(%rsp), %rdx          # 8-byte Reload
	movl	12(%rsp), %eax          # 4-byte Reload
	movb	%cl, 11(%rsp)           # 1-byte Spill
	movl	%eax, %ecx
	movb	11(%rsp), %al           # 1-byte Reload
	callq	gzprintf
	movl	%eax, 4(%rsp)           # 4-byte Spill
.LBB19_4:
	addq	$24, %rsp
	ret
.Ltmp571:
	.size	trace_logger_log_entry, .Ltmp571-trace_logger_log_entry
	.cfi_endproc

	.globl	trace_logger_log0
	.align	16, 0x90
	.type	trace_logger_log0,@function
trace_logger_log0:                      # @trace_logger_log0
	.cfi_startproc
# BB#0:
	subq	$72, %rsp
.Ltmp573:
	.cfi_def_cfa_offset 80
	movb	%r9b, %al
	movb	80(%rsp), %r10b
	cmpb	$0, initp
	movq	%rsi, 64(%rsp)          # 8-byte Spill
	movb	%r10b, 63(%rsp)         # 1-byte Spill
	movl	%r8d, 56(%rsp)          # 4-byte Spill
	movq	%rcx, 48(%rsp)          # 8-byte Spill
	movq	%rdx, 40(%rsp)          # 8-byte Spill
	movb	%al, 39(%rsp)           # 1-byte Spill
	movl	%edi, 32(%rsp)          # 4-byte Spill
	jne	.LBB20_2
# BB#1:
	callq	trace_logger_init
.LBB20_2:
	movb	39(%rsp), %al           # 1-byte Reload
	movzbl	%al, %ecx
	andl	$1, %ecx
	movb	63(%rsp), %dl           # 1-byte Reload
	movzbl	%dl, %esi
	andl	$1, %esi
	movq	64(%rsp), %rdi          # 8-byte Reload
	movl	56(%rsp), %r8d          # 4-byte Reload
	movl	%esi, 28(%rsp)          # 4-byte Spill
	movl	%r8d, %esi
	movl	%ecx, %edx
	movl	28(%rsp), %ecx          # 4-byte Reload
	callq	update_logging_status
	cmpl	$2, current_logging_status
	je	.LBB20_4
# BB#3:
	movq	full_trace_file, %rdi
	movl	inst_count, %eax
	movq	%rsp, %rcx
	movl	%eax, 8(%rcx)
	movl	56(%rsp), %eax          # 4-byte Reload
	movl	%eax, (%rcx)
	movl	$.L.str13536, %edx
	movl	%edx, %esi
	xorl	%edx, %edx
	movb	%dl, %r8b
	movl	32(%rsp), %edx          # 4-byte Reload
	movq	64(%rsp), %rcx          # 8-byte Reload
	movq	40(%rsp), %r9           # 8-byte Reload
	movb	%r8b, 27(%rsp)          # 1-byte Spill
	movq	%r9, %r8
	movq	48(%rsp), %r9           # 8-byte Reload
	movb	27(%rsp), %al           # 1-byte Reload
	callq	gzprintf
	movl	inst_count, %edx
	addl	$1, %edx
	movl	%edx, inst_count
	movl	%eax, 20(%rsp)          # 4-byte Spill
.LBB20_4:
	addq	$72, %rsp
	ret
.Ltmp574:
	.size	trace_logger_log0, .Ltmp574-trace_logger_log0
	.cfi_endproc

	.globl	trace_logger_log_int
	.align	16, 0x90
	.type	trace_logger_log_int,@function
trace_logger_log_int:                   # @trace_logger_log_int
	.cfi_startproc
# BB#0:
	subq	$120, %rsp
.Ltmp576:
	.cfi_def_cfa_offset 128
	movq	128(%rsp), %rax
	cmpb	$0, initp
	movq	%rax, 112(%rsp)         # 8-byte Spill
	movl	%r9d, 108(%rsp)         # 4-byte Spill
	movq	%r8, 96(%rsp)           # 8-byte Spill
	movl	%ecx, 92(%rsp)          # 4-byte Spill
	movq	%rdx, 80(%rsp)          # 8-byte Spill
	movl	%esi, 76(%rsp)          # 4-byte Spill
	movl	%edi, 72(%rsp)          # 4-byte Spill
	jne	.LBB21_2
# BB#1:
	movl	$.L.str14537, %eax
	movl	%eax, %edi
	movl	$.L.str6529, %eax
	movl	%eax, %esi
	movl	$.L__PRETTY_FUNCTION__.trace_logger_log_int, %eax
	movl	%eax, %ecx
	movl	$204, %edx
	callq	__assert_fail
.LBB21_2:
	callq	do_not_log
	testb	$1, %al
	jne	.LBB21_14
# BB#3:
	movl	72(%rsp), %eax          # 4-byte Reload
	cmpl	$19134, %eax            # imm = 0x4ABE
	jne	.LBB21_5
# BB#4:
	movq	full_trace_file, %rdi
	movl	$.L.str15538, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movb	%al, %cl
	movl	76(%rsp), %edx          # 4-byte Reload
	movq	80(%rsp), %r8           # 8-byte Reload
	movb	%cl, 71(%rsp)           # 1-byte Spill
	movq	%r8, %rcx
	movl	92(%rsp), %r8d          # 4-byte Reload
	movb	71(%rsp), %al           # 1-byte Reload
	callq	gzprintf
	movl	%eax, 64(%rsp)          # 4-byte Spill
	jmp	.LBB21_8
.LBB21_5:
	movq	full_trace_file, %rax
	movl	72(%rsp), %ecx          # 4-byte Reload
	cmpl	$24601, %ecx            # imm = 0x6019
	movq	%rax, 56(%rsp)          # 8-byte Spill
	jne	.LBB21_7
# BB#6:
	movl	$.L.str16539, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movb	%al, %cl
	movq	56(%rsp), %rdi          # 8-byte Reload
	movl	76(%rsp), %edx          # 4-byte Reload
	movq	80(%rsp), %r8           # 8-byte Reload
	movb	%cl, 55(%rsp)           # 1-byte Spill
	movq	%r8, %rcx
	movl	92(%rsp), %r8d          # 4-byte Reload
	movb	55(%rsp), %al           # 1-byte Reload
	callq	gzprintf
	movl	%eax, 48(%rsp)          # 4-byte Spill
	jmp	.LBB21_8
.LBB21_7:
	movl	$.L.str17540, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movb	%al, %cl
	movq	56(%rsp), %rdi          # 8-byte Reload
	movl	72(%rsp), %edx          # 4-byte Reload
	movl	76(%rsp), %eax          # 4-byte Reload
	movb	%cl, 47(%rsp)           # 1-byte Spill
	movl	%eax, %ecx
	movq	80(%rsp), %r8           # 8-byte Reload
	movl	92(%rsp), %r9d          # 4-byte Reload
	movb	47(%rsp), %al           # 1-byte Reload
	callq	gzprintf
	movl	%eax, 40(%rsp)          # 4-byte Spill
.LBB21_8:
	movq	full_trace_file, %rax
	movl	92(%rsp), %ecx          # 4-byte Reload
	cmpl	$0, %ecx
	movq	%rax, 32(%rsp)          # 8-byte Spill
	je	.LBB21_10
# BB#9:
	movl	$.L.str18541, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movb	%al, %cl
	movq	32(%rsp), %rdi          # 8-byte Reload
	movq	96(%rsp), %rdx          # 8-byte Reload
	movb	%cl, %al
	callq	gzprintf
	movl	%eax, 28(%rsp)          # 4-byte Spill
	jmp	.LBB21_11
.LBB21_10:
	movl	$.L.str19542, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movb	%al, %cl
	movq	32(%rsp), %rdi          # 8-byte Reload
	movb	%cl, %al
	callq	gzprintf
	movl	%eax, 24(%rsp)          # 4-byte Spill
.LBB21_11:
	movq	full_trace_file, %rax
	movl	108(%rsp), %ecx         # 4-byte Reload
	cmpl	$0, %ecx
	movq	%rax, 16(%rsp)          # 8-byte Spill
	je	.LBB21_13
# BB#12:
	movl	$.L.str20543, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movb	%al, %cl
	movq	16(%rsp), %rdi          # 8-byte Reload
	movq	112(%rsp), %rdx         # 8-byte Reload
	movb	%cl, %al
	callq	gzprintf
	movl	%eax, 12(%rsp)          # 4-byte Spill
	jmp	.LBB21_14
.LBB21_13:
	movl	$.L.str21544, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movb	%al, %cl
	movq	16(%rsp), %rdi          # 8-byte Reload
	movb	%cl, %al
	callq	gzprintf
	movl	%eax, 8(%rsp)           # 4-byte Spill
.LBB21_14:
	addq	$120, %rsp
	ret
.Ltmp577:
	.size	trace_logger_log_int, .Ltmp577-trace_logger_log_int
	.cfi_endproc

	.globl	trace_logger_log_ptr
	.align	16, 0x90
	.type	trace_logger_log_ptr,@function
trace_logger_log_ptr:                   # @trace_logger_log_ptr
	.cfi_startproc
# BB#0:
	subq	$120, %rsp
.Ltmp579:
	.cfi_def_cfa_offset 128
	movq	128(%rsp), %rax
	cmpb	$0, initp
	movq	%rax, 112(%rsp)         # 8-byte Spill
	movl	%r9d, 108(%rsp)         # 4-byte Spill
	movq	%r8, 96(%rsp)           # 8-byte Spill
	movl	%ecx, 92(%rsp)          # 4-byte Spill
	movq	%rdx, 80(%rsp)          # 8-byte Spill
	movl	%esi, 76(%rsp)          # 4-byte Spill
	movl	%edi, 72(%rsp)          # 4-byte Spill
	jne	.LBB22_2
# BB#1:
	movl	$.L.str14537, %eax
	movl	%eax, %edi
	movl	$.L.str6529, %eax
	movl	%eax, %esi
	movl	$.L__PRETTY_FUNCTION__.trace_logger_log_ptr, %eax
	movl	%eax, %ecx
	movl	$225, %edx
	callq	__assert_fail
.LBB22_2:
	callq	do_not_log
	testb	$1, %al
	jne	.LBB22_14
# BB#3:
	movl	72(%rsp), %eax          # 4-byte Reload
	cmpl	$19134, %eax            # imm = 0x4ABE
	jne	.LBB22_5
# BB#4:
	movq	full_trace_file, %rdi
	movl	$.L.str22545, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movb	%al, %cl
	movl	76(%rsp), %edx          # 4-byte Reload
	movq	80(%rsp), %r8           # 8-byte Reload
	movb	%cl, 71(%rsp)           # 1-byte Spill
	movq	%r8, %rcx
	movl	92(%rsp), %r8d          # 4-byte Reload
	movb	71(%rsp), %al           # 1-byte Reload
	callq	gzprintf
	movl	%eax, 64(%rsp)          # 4-byte Spill
	jmp	.LBB22_8
.LBB22_5:
	movq	full_trace_file, %rax
	movl	72(%rsp), %ecx          # 4-byte Reload
	cmpl	$24601, %ecx            # imm = 0x6019
	movq	%rax, 56(%rsp)          # 8-byte Spill
	jne	.LBB22_7
# BB#6:
	movl	$.L.str23546, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movb	%al, %cl
	movq	56(%rsp), %rdi          # 8-byte Reload
	movl	76(%rsp), %edx          # 4-byte Reload
	movq	80(%rsp), %r8           # 8-byte Reload
	movb	%cl, 55(%rsp)           # 1-byte Spill
	movq	%r8, %rcx
	movl	92(%rsp), %r8d          # 4-byte Reload
	movb	55(%rsp), %al           # 1-byte Reload
	callq	gzprintf
	movl	%eax, 48(%rsp)          # 4-byte Spill
	jmp	.LBB22_8
.LBB22_7:
	movl	$.L.str24547, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movb	%al, %cl
	movq	56(%rsp), %rdi          # 8-byte Reload
	movl	72(%rsp), %edx          # 4-byte Reload
	movl	76(%rsp), %eax          # 4-byte Reload
	movb	%cl, 47(%rsp)           # 1-byte Spill
	movl	%eax, %ecx
	movq	80(%rsp), %r8           # 8-byte Reload
	movl	92(%rsp), %r9d          # 4-byte Reload
	movb	47(%rsp), %al           # 1-byte Reload
	callq	gzprintf
	movl	%eax, 40(%rsp)          # 4-byte Spill
.LBB22_8:
	movq	full_trace_file, %rax
	movl	92(%rsp), %ecx          # 4-byte Reload
	cmpl	$0, %ecx
	movq	%rax, 32(%rsp)          # 8-byte Spill
	je	.LBB22_10
# BB#9:
	movl	$.L.str18541, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movb	%al, %cl
	movq	32(%rsp), %rdi          # 8-byte Reload
	movq	96(%rsp), %rdx          # 8-byte Reload
	movb	%cl, %al
	callq	gzprintf
	movl	%eax, 28(%rsp)          # 4-byte Spill
	jmp	.LBB22_11
.LBB22_10:
	movl	$.L.str19542, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movb	%al, %cl
	movq	32(%rsp), %rdi          # 8-byte Reload
	movb	%cl, %al
	callq	gzprintf
	movl	%eax, 24(%rsp)          # 4-byte Spill
.LBB22_11:
	movq	full_trace_file, %rax
	movl	108(%rsp), %ecx         # 4-byte Reload
	cmpl	$0, %ecx
	movq	%rax, 16(%rsp)          # 8-byte Spill
	je	.LBB22_13
# BB#12:
	movl	$.L.str20543, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movb	%al, %cl
	movq	16(%rsp), %rdi          # 8-byte Reload
	movq	112(%rsp), %rdx         # 8-byte Reload
	movb	%cl, %al
	callq	gzprintf
	movl	%eax, 12(%rsp)          # 4-byte Spill
	jmp	.LBB22_14
.LBB22_13:
	movl	$.L.str21544, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movb	%al, %cl
	movq	16(%rsp), %rdi          # 8-byte Reload
	movb	%cl, %al
	callq	gzprintf
	movl	%eax, 8(%rsp)           # 4-byte Spill
.LBB22_14:
	addq	$120, %rsp
	ret
.Ltmp580:
	.size	trace_logger_log_ptr, .Ltmp580-trace_logger_log_ptr
	.cfi_endproc

	.globl	trace_logger_log_double
	.align	16, 0x90
	.type	trace_logger_log_double,@function
trace_logger_log_double:                # @trace_logger_log_double
	.cfi_startproc
# BB#0:
	subq	$104, %rsp
.Ltmp582:
	.cfi_def_cfa_offset 112
	cmpb	$0, initp
	movl	%esi, 100(%rsp)         # 4-byte Spill
	movq	%r9, 88(%rsp)           # 8-byte Spill
	movl	%r8d, 84(%rsp)          # 4-byte Spill
	movq	%rcx, 72(%rsp)          # 8-byte Spill
	movl	%edx, 68(%rsp)          # 4-byte Spill
	vmovsd	%xmm0, 56(%rsp)         # 8-byte Spill
	movl	%edi, 52(%rsp)          # 4-byte Spill
	jne	.LBB23_2
# BB#1:
	movl	$.L.str14537, %eax
	movl	%eax, %edi
	movl	$.L.str6529, %eax
	movl	%eax, %esi
	movl	$.L__PRETTY_FUNCTION__.trace_logger_log_double, %eax
	movl	%eax, %ecx
	movl	$246, %edx
	callq	__assert_fail
.LBB23_2:
	callq	do_not_log
	testb	$1, %al
	jne	.LBB23_14
# BB#3:
	movl	52(%rsp), %eax          # 4-byte Reload
	cmpl	$19134, %eax            # imm = 0x4ABE
	jne	.LBB23_5
# BB#4:
	movq	full_trace_file, %rdi
	movl	$.L.str25548, %eax
	movl	%eax, %esi
	movb	$1, %al
	movl	100(%rsp), %edx         # 4-byte Reload
	vmovsd	56(%rsp), %xmm0         # 8-byte Reload
	movl	68(%rsp), %ecx          # 4-byte Reload
	callq	gzprintf
	movl	%eax, 48(%rsp)          # 4-byte Spill
	jmp	.LBB23_8
.LBB23_5:
	movq	full_trace_file, %rax
	movl	52(%rsp), %ecx          # 4-byte Reload
	cmpl	$24601, %ecx            # imm = 0x6019
	movq	%rax, 40(%rsp)          # 8-byte Spill
	jne	.LBB23_7
# BB#6:
	movl	$.L.str26549, %eax
	movl	%eax, %esi
	movb	$1, %al
	movq	40(%rsp), %rdi          # 8-byte Reload
	movl	100(%rsp), %edx         # 4-byte Reload
	vmovsd	56(%rsp), %xmm0         # 8-byte Reload
	movl	68(%rsp), %ecx          # 4-byte Reload
	callq	gzprintf
	movl	%eax, 36(%rsp)          # 4-byte Spill
	jmp	.LBB23_8
.LBB23_7:
	movl	$.L.str27550, %eax
	movl	%eax, %esi
	movb	$1, %al
	movq	40(%rsp), %rdi          # 8-byte Reload
	movl	52(%rsp), %edx          # 4-byte Reload
	movl	100(%rsp), %ecx         # 4-byte Reload
	vmovsd	56(%rsp), %xmm0         # 8-byte Reload
	movl	68(%rsp), %r8d          # 4-byte Reload
	callq	gzprintf
	movl	%eax, 32(%rsp)          # 4-byte Spill
.LBB23_8:
	movq	full_trace_file, %rax
	movl	68(%rsp), %ecx          # 4-byte Reload
	cmpl	$0, %ecx
	movq	%rax, 24(%rsp)          # 8-byte Spill
	je	.LBB23_10
# BB#9:
	movl	$.L.str18541, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movb	%al, %cl
	movq	24(%rsp), %rdi          # 8-byte Reload
	movq	72(%rsp), %rdx          # 8-byte Reload
	movb	%cl, %al
	callq	gzprintf
	movl	%eax, 20(%rsp)          # 4-byte Spill
	jmp	.LBB23_11
.LBB23_10:
	movl	$.L.str19542, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movb	%al, %cl
	movq	24(%rsp), %rdi          # 8-byte Reload
	movb	%cl, %al
	callq	gzprintf
	movl	%eax, 16(%rsp)          # 4-byte Spill
.LBB23_11:
	movq	full_trace_file, %rax
	movl	84(%rsp), %ecx          # 4-byte Reload
	cmpl	$0, %ecx
	movq	%rax, 8(%rsp)           # 8-byte Spill
	je	.LBB23_13
# BB#12:
	movl	$.L.str20543, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movb	%al, %cl
	movq	8(%rsp), %rdi           # 8-byte Reload
	movq	88(%rsp), %rdx          # 8-byte Reload
	movb	%cl, %al
	callq	gzprintf
	movl	%eax, 4(%rsp)           # 4-byte Spill
	jmp	.LBB23_14
.LBB23_13:
	movl	$.L.str21544, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movb	%al, %cl
	movq	8(%rsp), %rdi           # 8-byte Reload
	movb	%cl, %al
	callq	gzprintf
	movl	%eax, (%rsp)            # 4-byte Spill
.LBB23_14:
	addq	$104, %rsp
	ret
.Ltmp583:
	.size	trace_logger_log_double, .Ltmp583-trace_logger_log_double
	.cfi_endproc

	.globl	trace_logger_log_vector
	.align	16, 0x90
	.type	trace_logger_log_vector,@function
trace_logger_log_vector:                # @trace_logger_log_vector
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp586:
	.cfi_def_cfa_offset 16
.Ltmp587:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp588:
	.cfi_def_cfa_register %rbp
	subq	$128, %rsp
	movq	16(%rbp), %rax
	cmpb	$0, initp
	movq	%rax, -8(%rbp)          # 8-byte Spill
	movl	%r9d, -12(%rbp)         # 4-byte Spill
	movq	%r8, -24(%rbp)          # 8-byte Spill
	movl	%ecx, -28(%rbp)         # 4-byte Spill
	movq	%rdx, -40(%rbp)         # 8-byte Spill
	movl	%esi, -44(%rbp)         # 4-byte Spill
	movl	%edi, -48(%rbp)         # 4-byte Spill
	jne	.LBB24_2
# BB#1:
	leaq	.L.str14537, %rdi
	leaq	.L.str6529, %rsi
	movl	$267, %edx              # imm = 0x10B
	leaq	.L__PRETTY_FUNCTION__.trace_logger_log_vector, %rcx
	callq	__assert_fail
.LBB24_2:
	callq	do_not_log
	testb	$1, %al
	jne	.LBB24_15
# BB#3:
	movl	$8, %eax
	movl	-44(%rbp), %ecx         # 4-byte Reload
	sarl	$31, %ecx
	shrl	$30, %ecx
	movl	-44(%rbp), %edx         # 4-byte Reload
	addl	%ecx, %edx
	sarl	$2, %edx
	addl	$3, %edx
	movl	%edx, %esi
	movq	%rsp, %rdi
	addq	$15, %rsi
	andq	$-16, %rsi
	movq	%rsp, %r8
	subq	%rsi, %r8
	movq	%r8, %rsp
	movl	-44(%rbp), %ecx         # 4-byte Reload
	movl	%eax, -52(%rbp)         # 4-byte Spill
	movl	%ecx, %eax
	cltd
	movl	-52(%rbp), %r9d         # 4-byte Reload
	idivl	%r9d
	movq	%rdi, -64(%rbp)         # 8-byte Spill
	movq	%r8, %rdi
	movq	-40(%rbp), %rsi         # 8-byte Reload
	movl	%eax, %edx
	movq	%r8, -72(%rbp)          # 8-byte Spill
	callq	convert_bytes_to_hex
	movl	-48(%rbp), %eax         # 4-byte Reload
	cmpl	$19134, %eax            # imm = 0x4ABE
	jne	.LBB24_5
# BB#4:
	leaq	.L.str28551, %rsi
	movq	full_trace_file, %rdi
	movl	-44(%rbp), %edx         # 4-byte Reload
	movq	-72(%rbp), %rcx         # 8-byte Reload
	movl	-28(%rbp), %r8d         # 4-byte Reload
	movb	$0, %al
	callq	gzprintf
	movl	%eax, -76(%rbp)         # 4-byte Spill
	jmp	.LBB24_8
.LBB24_5:
	movq	full_trace_file, %rax
	movl	-48(%rbp), %ecx         # 4-byte Reload
	cmpl	$24601, %ecx            # imm = 0x6019
	movq	%rax, -88(%rbp)         # 8-byte Spill
	jne	.LBB24_7
# BB#6:
	leaq	.L.str29552, %rsi
	movq	-88(%rbp), %rdi         # 8-byte Reload
	movl	-44(%rbp), %edx         # 4-byte Reload
	movq	-72(%rbp), %rcx         # 8-byte Reload
	movl	-28(%rbp), %r8d         # 4-byte Reload
	movb	$0, %al
	callq	gzprintf
	movl	%eax, -92(%rbp)         # 4-byte Spill
	jmp	.LBB24_8
.LBB24_7:
	leaq	.L.str30553, %rsi
	movq	-88(%rbp), %rdi         # 8-byte Reload
	movl	-48(%rbp), %edx         # 4-byte Reload
	movl	-44(%rbp), %ecx         # 4-byte Reload
	movq	-72(%rbp), %r8          # 8-byte Reload
	movl	-28(%rbp), %r9d         # 4-byte Reload
	movb	$0, %al
	callq	gzprintf
	movl	%eax, -96(%rbp)         # 4-byte Spill
.LBB24_8:
	movq	full_trace_file, %rax
	movl	-28(%rbp), %ecx         # 4-byte Reload
	cmpl	$0, %ecx
	movq	%rax, -104(%rbp)        # 8-byte Spill
	je	.LBB24_10
# BB#9:
	leaq	.L.str18541, %rsi
	movq	-104(%rbp), %rdi        # 8-byte Reload
	movq	-24(%rbp), %rdx         # 8-byte Reload
	movb	$0, %al
	callq	gzprintf
	movl	%eax, -108(%rbp)        # 4-byte Spill
	jmp	.LBB24_11
.LBB24_10:
	leaq	.L.str19542, %rsi
	movq	-104(%rbp), %rdi        # 8-byte Reload
	movb	$0, %al
	callq	gzprintf
	movl	%eax, -112(%rbp)        # 4-byte Spill
.LBB24_11:
	movq	full_trace_file, %rax
	movl	-12(%rbp), %ecx         # 4-byte Reload
	cmpl	$0, %ecx
	movq	%rax, -120(%rbp)        # 8-byte Spill
	je	.LBB24_13
# BB#12:
	leaq	.L.str20543, %rsi
	movq	-120(%rbp), %rdi        # 8-byte Reload
	movq	-8(%rbp), %rdx          # 8-byte Reload
	movb	$0, %al
	callq	gzprintf
	movl	%eax, -124(%rbp)        # 4-byte Spill
	jmp	.LBB24_14
.LBB24_13:
	leaq	.L.str21544, %rsi
	movq	-120(%rbp), %rdi        # 8-byte Reload
	movb	$0, %al
	callq	gzprintf
	movl	%eax, -128(%rbp)        # 4-byte Spill
.LBB24_14:
	movq	-64(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rsp
.LBB24_15:
	movq	%rbp, %rsp
	popq	%rbp
	ret
.Ltmp589:
	.size	trace_logger_log_vector, .Ltmp589-trace_logger_log_vector
	.cfi_endproc

	.type	.L.str,@object          # @.str
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str:
	.asciz	"\nstore_loc[%d] = %d\n"
	.size	.L.str, 21

	.type	.L.str1,@object         # @.str1
.L.str1:
	.asciz	"store_vals[%d] = %d\n"
	.size	.L.str1, 21

	.type	.L.str2,@object         # @.str2
.L.str2:
	.asciz	"FAILED: store_loc[%d] = %d, should be %d\n"
	.size	.L.str2, 42

	.type	.L.str3,@object         # @.str3
.L.str3:
	.asciz	"Test failed with %d errors."
	.size	.L.str3, 28

	.type	.L.str4,@object         # @.str4
.L.str4:
	.asciz	"Test passed!\n"
	.size	.L.str4, 14

	.type	.L.str5,@object         # @.str5
	.section	.rodata,"a",@progbits
.L.str5:
	.asciz	"test_stores"
	.size	.L.str5, 12

	.type	.L.str6,@object         # @.str6
.L.str6:
	.asciz	"0:0"
	.size	.L.str6, 4

	.type	.L.str7,@object         # @.str7
.L.str7:
	.asciz	"1"
	.size	.L.str7, 2

	.type	.L.str8,@object         # @.str8
.L.str8:
	.zero	1
	.size	.L.str8, 1

	.type	.L.str9,@object         # @.str9
.L.str9:
	.asciz	"phi"
	.size	.L.str9, 4

	.type	.L.str10,@object        # @.str10
.L.str10:
	.asciz	"num_vals"
	.size	.L.str10, 9

	.type	.L.str11,@object        # @.str11
.L.str11:
	.asciz	"0:0-5"
	.size	.L.str11, 6

	.type	.L.str12,@object        # @.str12
.L.str12:
	.asciz	".lr.ph:1"
	.size	.L.str12, 9

	.type	.L.str13,@object        # @.str13
.L.str13:
	.asciz	"._crit_edge:0"
	.size	.L.str13, 14

	.type	.L.str14,@object        # @.str14
.L.str14:
	.asciz	"indvars.iv"
	.size	.L.str14, 11

	.type	.L.str15,@object        # @.str15
.L.str15:
	.asciz	"indvars.iv.next"
	.size	.L.str15, 16

	.type	.L.str16,@object        # @.str16
.L.str16:
	.asciz	"19:1"
	.size	.L.str16, 5

	.type	.L.str17,@object        # @.str17
.L.str17:
	.asciz	"2"
	.size	.L.str17, 2

	.type	.L.str18,@object        # @.str18
.L.str18:
	.asciz	"stdout"
	.size	.L.str18, 7

	.type	.L.str19,@object        # @.str19
.L.str19:
	.asciz	"3"
	.size	.L.str19, 2

	.type	.L.str20,@object        # @.str20
.L.str20:
	.asciz	"store_loc"
	.size	.L.str20, 10

	.type	.L.str21,@object        # @.str21
.L.str21:
	.asciz	"4"
	.size	.L.str21, 2

	.type	.L.str22,@object        # @.str22
.L.str22:
	.asciz	"5"
	.size	.L.str22, 2

	.type	.L.str23,@object        # @.str23
.L.str23:
	.asciz	"6"
	.size	.L.str23, 2

	.type	.L.str24,@object        # @.str24
.L.str24:
	.asciz	"fprintf"
	.size	.L.str24, 8

	.type	.L.str25,@object        # @.str25
.L.str25:
	.asciz	"7"
	.size	.L.str25, 2

	.type	.L.str26,@object        # @.str26
.L.str26:
	.asciz	"8"
	.size	.L.str26, 2

	.type	.L.str27,@object        # @.str27
.L.str27:
	.asciz	"store_vals"
	.size	.L.str27, 11

	.type	.L.str28,@object        # @.str28
.L.str28:
	.asciz	"9"
	.size	.L.str28, 2

	.type	.L.str29,@object        # @.str29
.L.str29:
	.asciz	"10"
	.size	.L.str29, 3

	.type	.L.str30,@object        # @.str30
.L.str30:
	.asciz	"11"
	.size	.L.str30, 3

	.type	.L.str31,@object        # @.str31
.L.str31:
	.asciz	"12"
	.size	.L.str31, 3

	.type	.L.str32,@object        # @.str32
.L.str32:
	.asciz	"13"
	.size	.L.str32, 3

	.type	.L.str33,@object        # @.str33
.L.str33:
	.asciz	"14"
	.size	.L.str33, 3

	.type	.L.str34,@object        # @.str34
.L.str34:
	.asciz	".lr.ph:1-0"
	.size	.L.str34, 11

	.type	.L.str35,@object        # @.str35
.L.str35:
	.asciz	"15:1"
	.size	.L.str35, 5

	.type	.L.str36,@object        # @.str36
.L.str36:
	.asciz	"16"
	.size	.L.str36, 3

	.type	.L.str37,@object        # @.str37
.L.str37:
	.asciz	"17"
	.size	.L.str37, 3

	.type	.L.str38,@object        # @.str38
.L.str38:
	.asciz	"18"
	.size	.L.str38, 3

	.type	.L.str39,@object        # @.str39
.L.str39:
	.asciz	"15:1-0"
	.size	.L.str39, 7

	.type	.L.str40,@object        # @.str40
.L.str40:
	.asciz	"lftr.wideiv"
	.size	.L.str40, 12

	.type	.L.str41,@object        # @.str41
.L.str41:
	.asciz	"exitcond"
	.size	.L.str41, 9

	.type	.L.str42,@object        # @.str42
.L.str42:
	.asciz	"19:1-0"
	.size	.L.str42, 7

	.type	.L.str43,@object        # @.str43
.L.str43:
	.asciz	"._crit_edge:0-0"
	.size	.L.str43, 16

	.type	.L.str44,@object        # @.str44
.L.str44:
	.asciz	"store_kernel"
	.size	.L.str44, 13

	.type	.L.str45,@object        # @.str45
.L.str45:
	.asciz	"malloc"
	.size	.L.str45, 7

	.type	.L.str46,@object        # @.str46
.L.str46:
	.asciz	"0:0-6"
	.size	.L.str46, 6

	.type	.L.str47,@object        # @.str47
.L.str47:
	.asciz	"0:0-7"
	.size	.L.str47, 6

	.type	.L.str48,@object        # @.str48
.L.str48:
	.asciz	"15"
	.size	.L.str48, 3

	.type	.L.str49,@object        # @.str49
.L.str49:
	.asciz	"0:0-8"
	.size	.L.str49, 6

	.type	.L.str50,@object        # @.str50
.L.str50:
	.asciz	"0:0-9"
	.size	.L.str50, 6

	.type	.L.str51,@object        # @.str51
.L.str51:
	.asciz	"19"
	.size	.L.str51, 3

	.type	.L.str52,@object        # @.str52
.L.str52:
	.asciz	"0:0-10"
	.size	.L.str52, 7

	.type	.L.str53,@object        # @.str53
.L.str53:
	.asciz	"20"
	.size	.L.str53, 3

	.type	.L.str54,@object        # @.str54
.L.str54:
	.asciz	"21"
	.size	.L.str54, 3

	.type	.L.str55,@object        # @.str55
.L.str55:
	.asciz	"0:0-11"
	.size	.L.str55, 7

	.type	.L.str56,@object        # @.str56
.L.str56:
	.asciz	"22"
	.size	.L.str56, 3

	.type	.L.str57,@object        # @.str57
.L.str57:
	.asciz	"23"
	.size	.L.str57, 3

	.type	.L.str58,@object        # @.str58
.L.str58:
	.asciz	"0:0-12"
	.size	.L.str58, 7

	.type	.L.str59,@object        # @.str59
.L.str59:
	.asciz	"24"
	.size	.L.str59, 3

	.type	.L.str60,@object        # @.str60
.L.str60:
	.asciz	"25"
	.size	.L.str60, 3

	.type	.L.str61,@object        # @.str61
.L.str61:
	.asciz	"0:0-13"
	.size	.L.str61, 7

	.type	.L.str62,@object        # @.str62
.L.str62:
	.asciz	"26"
	.size	.L.str62, 3

	.type	.L.str63,@object        # @.str63
.L.str63:
	.asciz	"27"
	.size	.L.str63, 3

	.type	.L.str64,@object        # @.str64
.L.str64:
	.asciz	"0:0-14"
	.size	.L.str64, 7

	.type	.L.str65,@object        # @.str65
.L.str65:
	.asciz	"28"
	.size	.L.str65, 3

	.type	.L.str66,@object        # @.str66
.L.str66:
	.asciz	"rs"
	.size	.L.str66, 3

	.type	.L.str67,@object        # @.str67
.L.str67:
	.asciz	"29"
	.size	.L.str67, 3

	.type	.L.str68,@object        # @.str68
.L.str68:
	.asciz	"0:0-16"
	.size	.L.str68, 7

	.type	.L.str69,@object        # @.str69
.L.str69:
	.asciz	"30"
	.size	.L.str69, 3

	.type	.L.str70,@object        # @.str70
.L.str70:
	.asciz	"31"
	.size	.L.str70, 3

	.type	.L.str71,@object        # @.str71
.L.str71:
	.asciz	"32"
	.size	.L.str71, 3

	.type	.L.str72,@object        # @.str72
.L.str72:
	.asciz	"33"
	.size	.L.str72, 3

	.type	.L.str73,@object        # @.str73
.L.str73:
	.asciz	"34"
	.size	.L.str73, 3

	.type	.L.str74,@object        # @.str74
.L.str74:
	.asciz	".lr.ph:1-1"
	.size	.L.str74, 11

	.type	.L.str75,@object        # @.str75
.L.str75:
	.asciz	"main"
	.size	.L.str75, 5

	.type	.L.str76,@object        # @.str76
.L.str76:
	.asciz	"0:0-4"
	.size	.L.str76, 6

	.type	.L.str77,@object        # @.str77
.L.str77:
	.asciz	"5:1"
	.size	.L.str77, 4

	.type	.L.str78,@object        # @.str78
.L.str78:
	.asciz	"5:1-0"
	.size	.L.str78, 6

	.type	.L.str79,@object        # @.str79
.L.str79:
	.asciz	"5:1-1"
	.size	.L.str79, 6

	.type	.L.str80,@object        # @.str80
.L.str80:
	.asciz	"5:1-2"
	.size	.L.str80, 6

	.type	.L.str81,@object        # @.str81
.L.str81:
	.asciz	"9:0"
	.size	.L.str81, 4

	.type	.L.str82,@object        # @.str82
.L.str82:
	.asciz	"9:0-0"
	.size	.L.str82, 6

	.type	.L.str83,@object        # @.str83
.L.str83:
	.asciz	"9:0-2"
	.size	.L.str83, 6

	.type	.L.str84,@object        # @.str84
	.align	16
.L.str84:
	.asciz	"store_kernel/loop 50\n"
	.size	.L.str84, 22

	.type	.L.str85,@object        # @.str85
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str85:
	.asciz	"\n"
	.size	.L.str85, 2

	.type	.L.str186,@object       # @.str186
.L.str186:
	.asciz	"RS - Fatal error!\n"
	.size	.L.str186, 19

	.type	.L.str287,@object       # @.str287
.L.str287:
	.asciz	"  Error return from TQLRAT!\n"
	.size	.L.str287, 29

	.type	.L.str388,@object       # @.str388
	.section	.rodata,"a",@progbits
.L.str388:
	.asciz	"pythag"
	.size	.L.str388, 7

	.type	.L.str489,@object       # @.str489
.L.str489:
	.asciz	"0:0"
	.size	.L.str489, 4

	.type	.L.str590,@object       # @.str590
.L.str590:
	.asciz	"1"
	.size	.L.str590, 2

	.type	.L.str691,@object       # @.str691
.L.str691:
	.asciz	"fabs"
	.size	.L.str691, 5

	.type	.L.str792,@object       # @.str792
.L.str792:
	.asciz	"phi"
	.size	.L.str792, 4

	.type	.L.str893,@object       # @.str893
.L.str893:
	.asciz	"a"
	.size	.L.str893, 2

	.type	.L.str994,@object       # @.str994
.L.str994:
	.asciz	"2"
	.size	.L.str994, 2

	.type	.L.str1095,@object      # @.str1095
.L.str1095:
	.asciz	"b"
	.size	.L.str1095, 2

	.type	.L.str1196,@object      # @.str1196
.L.str1196:
	.asciz	"3"
	.size	.L.str1196, 2

	.type	.L.str1297,@object      # @.str1297
.L.str1297:
	.asciz	"r8_max"
	.size	.L.str1297, 7

	.type	.L.str1398,@object      # @.str1398
.L.str1398:
	.asciz	"4"
	.size	.L.str1398, 2

	.type	.L.str1499,@object      # @.str1499
.L.str1499:
	.zero	1
	.size	.L.str1499, 1

	.type	.L.str15100,@object     # @.str15100
.L.str15100:
	.asciz	"0:0-3"
	.size	.L.str15100, 6

	.type	.L.str16101,@object     # @.str16101
.L.str16101:
	.asciz	"5:0"
	.size	.L.str16101, 4

	.type	.L.str17102,@object     # @.str17102
.L.str17102:
	.asciz	".loopexit:0"
	.size	.L.str17102, 12

	.type	.L.str18103,@object     # @.str18103
.L.str18103:
	.asciz	"6"
	.size	.L.str18103, 2

	.type	.L.str19104,@object     # @.str19104
.L.str19104:
	.asciz	"r8_min"
	.size	.L.str19104, 7

	.type	.L.str20105,@object     # @.str20105
.L.str20105:
	.asciz	"7"
	.size	.L.str20105, 2

	.type	.L.str21106,@object     # @.str21106
.L.str21106:
	.asciz	"8"
	.size	.L.str21106, 2

	.type	.L.str22107,@object     # @.str22107
.L.str22107:
	.asciz	"9"
	.size	.L.str22107, 2

	.type	.L.str23108,@object     # @.str23108
.L.str23108:
	.asciz	"10"
	.size	.L.str23108, 3

	.type	.L.str24109,@object     # @.str24109
.L.str24109:
	.asciz	"5:0-3"
	.size	.L.str24109, 6

	.type	.L.str25110,@object     # @.str25110
.L.str25110:
	.asciz	".lr.ph:1"
	.size	.L.str25110, 9

	.type	.L.str26111,@object     # @.str26111
.L.str26111:
	.asciz	"11"
	.size	.L.str26111, 3

	.type	.L.str27112,@object     # @.str27112
.L.str27112:
	.asciz	"19"
	.size	.L.str27112, 3

	.type	.L.str28113,@object     # @.str28113
.L.str28113:
	.asciz	"p.02"
	.size	.L.str28113, 5

	.type	.L.str29114,@object     # @.str29114
.L.str29114:
	.asciz	"15"
	.size	.L.str29114, 3

	.type	.L.str30115,@object     # @.str30115
.L.str30115:
	.asciz	"r.01"
	.size	.L.str30115, 5

	.type	.L.str31116,@object     # @.str31116
.L.str31116:
	.asciz	"18"
	.size	.L.str31116, 3

	.type	.L.str32117,@object     # @.str32117
.L.str32117:
	.asciz	"12"
	.size	.L.str32117, 3

	.type	.L.str33118,@object     # @.str33118
.L.str33118:
	.asciz	"13"
	.size	.L.str33118, 3

	.type	.L.str34119,@object     # @.str34119
.L.str34119:
	.asciz	"14"
	.size	.L.str34119, 3

	.type	.L.str35120,@object     # @.str35120
.L.str35120:
	.asciz	"16"
	.size	.L.str35120, 3

	.type	.L.str36121,@object     # @.str36121
.L.str36121:
	.asciz	"17"
	.size	.L.str36121, 3

	.type	.L.str37122,@object     # @.str37122
.L.str37122:
	.asciz	"20"
	.size	.L.str37122, 3

	.type	.L.str38123,@object     # @.str38123
.L.str38123:
	.asciz	".lr.ph:1-5"
	.size	.L.str38123, 11

	.type	.L.str39124,@object     # @.str39124
.L.str39124:
	.asciz	"p.1"
	.size	.L.str39124, 4

	.type	.L.str40125,@object     # @.str40125
.L.str40125:
	.asciz	".loopexit:0-0"
	.size	.L.str40125, 14

	.type	.L.str41126,@object     # @.str41126
.L.str41126:
	.asciz	"x"
	.size	.L.str41126, 2

	.type	.L.str42127,@object     # @.str42127
.L.str42127:
	.asciz	"y"
	.size	.L.str42127, 2

	.type	.L.str43128,@object     # @.str43128
.L.str43128:
	.asciz	"x.y"
	.size	.L.str43128, 4

	.type	.L.str44129,@object     # @.str44129
.L.str44129:
	.asciz	"0:0-2"
	.size	.L.str44129, 6

	.type	.L.str45130,@object     # @.str45130
.L.str45130:
	.asciz	"y.x"
	.size	.L.str45130, 4

	.type	.L.str46131,@object     # @.str46131
.L.str46131:
	.asciz	"r8_epsilon"
	.size	.L.str46131, 11

	.type	.L.str47132,@object     # @.str47132
.L.str47132:
	.asciz	"0:0-1"
	.size	.L.str47132, 6

	.type	.L.str48133,@object     # @.str48133
.L.str48133:
	.asciz	"r8_sign"
	.size	.L.str48133, 8

	.type	.L.str49134,@object     # @.str49134
.L.str49134:
	.asciz	"."
	.size	.L.str49134, 2

	.type	.L.str50135,@object     # @.str50135
.L.str50135:
	.asciz	"rs"
	.size	.L.str50135, 3

	.type	.L.str51136,@object     # @.str51136
.L.str51136:
	.asciz	"n"
	.size	.L.str51136, 2

	.type	.L.str52137,@object     # @.str52137
.L.str52137:
	.asciz	"malloc"
	.size	.L.str52137, 7

	.type	.L.str53138,@object     # @.str53138
.L.str53138:
	.asciz	"0:0-6"
	.size	.L.str53138, 6

	.type	.L.str54139,@object     # @.str54139
.L.str54139:
	.asciz	"14:0"
	.size	.L.str54139, 5

	.type	.L.str55140,@object     # @.str55140
.L.str55140:
	.asciz	"4:0"
	.size	.L.str55140, 4

	.type	.L.str56141,@object     # @.str56141
.L.str56141:
	.asciz	"matz"
	.size	.L.str56141, 5

	.type	.L.str57142,@object     # @.str57142
.L.str57142:
	.asciz	"5"
	.size	.L.str57142, 2

	.type	.L.str58143,@object     # @.str58143
.L.str58143:
	.asciz	"4:0-1"
	.size	.L.str58143, 6

	.type	.L.str59144,@object     # @.str59144
.L.str59144:
	.asciz	"tred1"
	.size	.L.str59144, 6

	.type	.L.str60145,@object     # @.str60145
.L.str60145:
	.asciz	"w"
	.size	.L.str60145, 2

	.type	.L.str61146,@object     # @.str61146
.L.str61146:
	.asciz	"tqlrat"
	.size	.L.str61146, 7

	.type	.L.str62147,@object     # @.str62147
.L.str62147:
	.asciz	"4:0-3"
	.size	.L.str62147, 6

	.type	.L.str63148,@object     # @.str63148
.L.str63148:
	.asciz	"free"
	.size	.L.str63148, 5

	.type	.L.str64149,@object     # @.str64149
.L.str64149:
	.asciz	"4:0-4"
	.size	.L.str64149, 6

	.type	.L.str65150,@object     # @.str65150
.L.str65150:
	.asciz	"10:0"
	.size	.L.str65150, 5

	.type	.L.str66151,@object     # @.str66151
.L.str66151:
	.asciz	"printf"
	.size	.L.str66151, 7

	.type	.L.str67152,@object     # @.str67152
.L.str67152:
	.asciz	"10:0-0"
	.size	.L.str67152, 7

	.type	.L.str68153,@object     # @.str68153
.L.str68153:
	.asciz	"15:0"
	.size	.L.str68153, 5

	.type	.L.str69154,@object     # @.str69154
.L.str69154:
	.asciz	"14:0-0"
	.size	.L.str69154, 7

	.type	.L.str70155,@object     # @.str70155
.L.str70155:
	.asciz	"14:0-1"
	.size	.L.str70155, 7

	.type	.L.str71156,@object     # @.str71156
.L.str71156:
	.asciz	".0"
	.size	.L.str71156, 3

	.type	.L.str72157,@object     # @.str72157
.L.str72157:
	.asciz	"15:0-0"
	.size	.L.str72157, 7

	.type	.L.str73158,@object     # @.str73158
.L.str73158:
	.asciz	"z"
	.size	.L.str73158, 2

	.type	.L.str74159,@object     # @.str74159
.L.str74159:
	.asciz	".lr.ph58:0"
	.size	.L.str74159, 11

	.type	.L.str75160,@object     # @.str75160
.L.str75160:
	.asciz	"._crit_edge52:0"
	.size	.L.str75160, 16

	.type	.L.str76161,@object     # @.str76161
.L.str76161:
	.asciz	".lr.ph58:0-0"
	.size	.L.str76161, 13

	.type	.L.str77162,@object     # @.str77162
.L.str77162:
	.asciz	"5:1"
	.size	.L.str77162, 4

	.type	.L.str78163,@object     # @.str78163
.L.str78163:
	.asciz	".preheader53:0"
	.size	.L.str78163, 15

	.type	.L.str79164,@object     # @.str79164
	.align	16
.L.str79164:
	.asciz	".preheader53:0-0"
	.size	.L.str79164, 17

	.type	.L.str80165,@object     # @.str80165
.L.str80165:
	.asciz	".lr.ph55:0"
	.size	.L.str80165, 11

	.type	.L.str81166,@object     # @.str81166
.L.str81166:
	.asciz	".lr.ph55:0-0"
	.size	.L.str81166, 13

	.type	.L.str82167,@object     # @.str82167
.L.str82167:
	.asciz	"15:1"
	.size	.L.str82167, 5

	.type	.L.str83168,@object     # @.str83168
.L.str83168:
	.asciz	"indvars.iv140"
	.size	.L.str83168, 14

	.type	.L.str84169,@object     # @.str84169
	.align	16
.L.str84169:
	.asciz	"indvars.iv.next141"
	.size	.L.str84169, 19

	.type	.L.str85170,@object     # @.str85170
.L.str85170:
	.asciz	"d"
	.size	.L.str85170, 2

	.type	.L.str86,@object        # @.str86
.L.str86:
	.asciz	"5:1-0"
	.size	.L.str86, 6

	.type	.L.str87,@object        # @.str87
.L.str87:
	.asciz	"lftr.wideiv142"
	.size	.L.str87, 15

	.type	.L.str88,@object        # @.str88
.L.str88:
	.asciz	"exitcond143"
	.size	.L.str88, 12

	.type	.L.str89,@object        # @.str89
.L.str89:
	.asciz	"5:1-1"
	.size	.L.str89, 6

	.type	.L.str90,@object        # @.str90
.L.str90:
	.asciz	".preheader47:0"
	.size	.L.str90, 15

	.type	.L.str91,@object        # @.str91
	.align	16
.L.str91:
	.asciz	".preheader47:0-0"
	.size	.L.str91, 17

	.type	.L.str92,@object        # @.str92
.L.str92:
	.asciz	".lr.ph51:0"
	.size	.L.str92, 11

	.type	.L.str93,@object        # @.str93
.L.str93:
	.asciz	".lr.ph51:0-0"
	.size	.L.str93, 13

	.type	.L.str94,@object        # @.str94
.L.str94:
	.asciz	"26:1"
	.size	.L.str94, 5

	.type	.L.str95,@object        # @.str95
.L.str95:
	.asciz	"indvars.iv136"
	.size	.L.str95, 14

	.type	.L.str96,@object        # @.str96
	.align	16
.L.str96:
	.asciz	"indvars.iv.next137"
	.size	.L.str96, 19

	.type	.L.str97,@object        # @.str97
.L.str97:
	.asciz	"21"
	.size	.L.str97, 3

	.type	.L.str98,@object        # @.str98
.L.str98:
	.asciz	"22"
	.size	.L.str98, 3

	.type	.L.str99,@object        # @.str99
.L.str99:
	.asciz	"23"
	.size	.L.str99, 3

	.type	.L.str100,@object       # @.str100
.L.str100:
	.asciz	"24"
	.size	.L.str100, 3

	.type	.L.str101,@object       # @.str101
.L.str101:
	.asciz	"25"
	.size	.L.str101, 3

	.type	.L.str102,@object       # @.str102
.L.str102:
	.asciz	"15:1-0"
	.size	.L.str102, 7

	.type	.L.str103,@object       # @.str103
.L.str103:
	.asciz	"lftr.wideiv138"
	.size	.L.str103, 15

	.type	.L.str104,@object       # @.str104
.L.str104:
	.asciz	"exitcond139"
	.size	.L.str104, 12

	.type	.L.str105,@object       # @.str105
.L.str105:
	.asciz	"15:1-1"
	.size	.L.str105, 7

	.type	.L.str106,@object       # @.str106
.L.str106:
	.asciz	"indvars.iv134"
	.size	.L.str106, 14

	.type	.L.str107,@object       # @.str107
	.align	16
.L.str107:
	.asciz	"indvars.iv.next135"
	.size	.L.str107, 19

	.type	.L.str108,@object       # @.str108
.L.str108:
	.asciz	".backedge:1"
	.size	.L.str108, 12

	.type	.L.str109,@object       # @.str109
	.align	16
.L.str109:
	.asciz	"indvars.iv130.in"
	.size	.L.str109, 17

	.type	.L.str110,@object       # @.str110
.L.str110:
	.asciz	"indvars.iv130"
	.size	.L.str110, 14

	.type	.L.str111,@object       # @.str111
.L.str111:
	.asciz	"i.150.in"
	.size	.L.str111, 9

	.type	.L.str112,@object       # @.str112
.L.str112:
	.asciz	"i.150"
	.size	.L.str112, 6

	.type	.L.str113,@object       # @.str113
.L.str113:
	.asciz	"27"
	.size	.L.str113, 3

	.type	.L.str114,@object       # @.str114
.L.str114:
	.asciz	"28"
	.size	.L.str114, 3

	.type	.L.str115,@object       # @.str115
.L.str115:
	.asciz	"26:1-4"
	.size	.L.str115, 7

	.type	.L.str116,@object       # @.str116
.L.str116:
	.asciz	"._crit_edge46:1"
	.size	.L.str116, 16

	.type	.L.str117,@object       # @.str117
.L.str117:
	.asciz	".lr.ph:2"
	.size	.L.str117, 9

	.type	.L.str118,@object       # @.str118
.L.str118:
	.asciz	"indvars.iv"
	.size	.L.str118, 11

	.type	.L.str119,@object       # @.str119
.L.str119:
	.asciz	"indvars.iv.next"
	.size	.L.str119, 16

	.type	.L.str120,@object       # @.str120
.L.str120:
	.asciz	"scale.02"
	.size	.L.str120, 9

	.type	.L.str121,@object       # @.str121
.L.str121:
	.asciz	"32"
	.size	.L.str121, 3

	.type	.L.str122,@object       # @.str122
.L.str122:
	.asciz	"29"
	.size	.L.str122, 3

	.type	.L.str123,@object       # @.str123
.L.str123:
	.asciz	"30"
	.size	.L.str123, 3

	.type	.L.str124,@object       # @.str124
.L.str124:
	.asciz	"31"
	.size	.L.str124, 3

	.type	.L.str125,@object       # @.str125
.L.str125:
	.asciz	"lftr.wideiv"
	.size	.L.str125, 12

	.type	.L.str126,@object       # @.str126
.L.str126:
	.asciz	"exitcond"
	.size	.L.str126, 9

	.type	.L.str127,@object       # @.str127
.L.str127:
	.asciz	".lr.ph:2-1"
	.size	.L.str127, 11

	.type	.L.str128,@object       # @.str128
.L.str128:
	.asciz	"._crit_edge:1"
	.size	.L.str128, 14

	.type	.L.str129,@object       # @.str129
.L.str129:
	.asciz	"33"
	.size	.L.str129, 3

	.type	.L.str130,@object       # @.str130
.L.str130:
	.asciz	"34"
	.size	.L.str130, 3

	.type	.L.str131,@object       # @.str131
.L.str131:
	.asciz	"._crit_edge:1-0"
	.size	.L.str131, 16

	.type	.L.str132,@object       # @.str132
.L.str132:
	.asciz	".preheader43:1"
	.size	.L.str132, 15

	.type	.L.str133,@object       # @.str133
.L.str133:
	.asciz	".preheader:1"
	.size	.L.str133, 13

	.type	.L.str134,@object       # @.str134
	.align	16
.L.str134:
	.asciz	".preheader43:1-0"
	.size	.L.str134, 17

	.type	.L.str135,@object       # @.str135
.L.str135:
	.asciz	".lr.ph45:2"
	.size	.L.str135, 11

	.type	.L.str136,@object       # @.str136
.L.str136:
	.asciz	".preheader:1-0"
	.size	.L.str136, 15

	.type	.L.str137,@object       # @.str137
.L.str137:
	.asciz	"._crit_edge8:1"
	.size	.L.str137, 15

	.type	.L.str138,@object       # @.str138
.L.str138:
	.asciz	".lr.ph4:2"
	.size	.L.str138, 10

	.type	.L.str139,@object       # @.str139
.L.str139:
	.asciz	"indvars.iv128"
	.size	.L.str139, 14

	.type	.L.str140,@object       # @.str140
	.align	16
.L.str140:
	.asciz	"indvars.iv.next129"
	.size	.L.str140, 19

	.type	.L.str141,@object       # @.str141
.L.str141:
	.asciz	"35"
	.size	.L.str141, 3

	.type	.L.str142,@object       # @.str142
.L.str142:
	.asciz	"36"
	.size	.L.str142, 3

	.type	.L.str143,@object       # @.str143
.L.str143:
	.asciz	"37"
	.size	.L.str143, 3

	.type	.L.str144,@object       # @.str144
.L.str144:
	.asciz	"38"
	.size	.L.str144, 3

	.type	.L.str145,@object       # @.str145
.L.str145:
	.asciz	"39"
	.size	.L.str145, 3

	.type	.L.str146,@object       # @.str146
.L.str146:
	.asciz	"40"
	.size	.L.str146, 3

	.type	.L.str147,@object       # @.str147
.L.str147:
	.asciz	"41"
	.size	.L.str147, 3

	.type	.L.str148,@object       # @.str148
.L.str148:
	.asciz	".lr.ph45:2-0"
	.size	.L.str148, 13

	.type	.L.str149,@object       # @.str149
.L.str149:
	.asciz	"42"
	.size	.L.str149, 3

	.type	.L.str150,@object       # @.str150
.L.str150:
	.asciz	"43"
	.size	.L.str150, 3

	.type	.L.str151,@object       # @.str151
.L.str151:
	.asciz	"44"
	.size	.L.str151, 3

	.type	.L.str152,@object       # @.str152
.L.str152:
	.asciz	"45"
	.size	.L.str152, 3

	.type	.L.str153,@object       # @.str153
.L.str153:
	.asciz	"46"
	.size	.L.str153, 3

	.type	.L.str154,@object       # @.str154
.L.str154:
	.asciz	".lr.ph45:2-1"
	.size	.L.str154, 13

	.type	.L.str155,@object       # @.str155
.L.str155:
	.asciz	".lr.ph45:2-2"
	.size	.L.str155, 13

	.type	.L.str156,@object       # @.str156
.L.str156:
	.asciz	"lftr.wideiv132"
	.size	.L.str156, 15

	.type	.L.str157,@object       # @.str157
.L.str157:
	.asciz	"exitcond133"
	.size	.L.str157, 12

	.type	.L.str158,@object       # @.str158
.L.str158:
	.asciz	".lr.ph45:2-3"
	.size	.L.str158, 13

	.type	.L.str159,@object       # @.str159
.L.str159:
	.asciz	"47"
	.size	.L.str159, 3

	.type	.L.str160,@object       # @.str160
.L.str160:
	.asciz	"e"
	.size	.L.str160, 2

	.type	.L.str161,@object       # @.str161
	.align	16
.L.str161:
	.asciz	"._crit_edge46:1-0"
	.size	.L.str161, 18

	.type	.L.str162,@object       # @.str162
.L.str162:
	.asciz	"48"
	.size	.L.str162, 3

	.type	.L.str163,@object       # @.str163
.L.str163:
	.asciz	"e2"
	.size	.L.str163, 3

	.type	.L.str164,@object       # @.str164
	.align	16
.L.str164:
	.asciz	"._crit_edge46:1-1"
	.size	.L.str164, 18

	.type	.L.str165,@object       # @.str165
	.align	16
.L.str165:
	.asciz	"._crit_edge46:1-2"
	.size	.L.str165, 18

	.type	.L.str166,@object       # @.str166
.L.str166:
	.asciz	"49"
	.size	.L.str166, 3

	.type	.L.str167,@object       # @.str167
.L.str167:
	.asciz	"50"
	.size	.L.str167, 3

	.type	.L.str168,@object       # @.str168
.L.str168:
	.asciz	".backedge:1-0"
	.size	.L.str168, 14

	.type	.L.str169,@object       # @.str169
.L.str169:
	.asciz	"indvars.iv61"
	.size	.L.str169, 13

	.type	.L.str170,@object       # @.str170
	.align	16
.L.str170:
	.asciz	"indvars.iv.next62"
	.size	.L.str170, 18

	.type	.L.str171,@object       # @.str171
.L.str171:
	.asciz	"51"
	.size	.L.str171, 3

	.type	.L.str172,@object       # @.str172
.L.str172:
	.asciz	"52"
	.size	.L.str172, 3

	.type	.L.str173,@object       # @.str173
.L.str173:
	.asciz	"53"
	.size	.L.str173, 3

	.type	.L.str174,@object       # @.str174
.L.str174:
	.asciz	".lr.ph4:2-0"
	.size	.L.str174, 12

	.type	.L.str175,@object       # @.str175
.L.str175:
	.asciz	"lftr.wideiv65"
	.size	.L.str175, 14

	.type	.L.str176,@object       # @.str176
.L.str176:
	.asciz	"exitcond66"
	.size	.L.str176, 11

	.type	.L.str177,@object       # @.str177
.L.str177:
	.asciz	".lr.ph4:2-1"
	.size	.L.str177, 12

	.type	.L.str178,@object       # @.str178
.L.str178:
	.asciz	".loopexit:1"
	.size	.L.str178, 12

	.type	.L.str179,@object       # @.str179
.L.str179:
	.asciz	"54"
	.size	.L.str179, 3

	.type	.L.str180,@object       # @.str180
.L.str180:
	.asciz	".loopexit:1-0"
	.size	.L.str180, 14

	.type	.L.str181,@object       # @.str181
.L.str181:
	.asciz	".lr.ph7:2"
	.size	.L.str181, 10

	.type	.L.str182,@object       # @.str182
.L.str182:
	.asciz	"indvars.iv68"
	.size	.L.str182, 13

	.type	.L.str183,@object       # @.str183
	.align	16
.L.str183:
	.asciz	"indvars.iv.next69"
	.size	.L.str183, 18

	.type	.L.str184,@object       # @.str184
.L.str184:
	.asciz	"h.05"
	.size	.L.str184, 5

	.type	.L.str185,@object       # @.str185
.L.str185:
	.asciz	"58"
	.size	.L.str185, 3

	.type	.L.str186171,@object    # @.str186171
.L.str186171:
	.asciz	"55"
	.size	.L.str186171, 3

	.type	.L.str187,@object       # @.str187
.L.str187:
	.asciz	"56"
	.size	.L.str187, 3

	.type	.L.str188,@object       # @.str188
.L.str188:
	.asciz	"57"
	.size	.L.str188, 3

	.type	.L.str189,@object       # @.str189
.L.str189:
	.asciz	"lftr.wideiv72"
	.size	.L.str189, 14

	.type	.L.str190,@object       # @.str190
.L.str190:
	.asciz	"exitcond73"
	.size	.L.str190, 11

	.type	.L.str191,@object       # @.str191
.L.str191:
	.asciz	".lr.ph7:2-1"
	.size	.L.str191, 12

	.type	.L.str192,@object       # @.str192
.L.str192:
	.asciz	"h.0.lcssa"
	.size	.L.str192, 10

	.type	.L.str193,@object       # @.str193
.L.str193:
	.asciz	"59"
	.size	.L.str193, 3

	.type	.L.str194,@object       # @.str194
.L.str194:
	.asciz	"60"
	.size	.L.str194, 3

	.type	.L.str195,@object       # @.str195
.L.str195:
	.asciz	"61"
	.size	.L.str195, 3

	.type	.L.str196,@object       # @.str196
	.align	16
.L.str196:
	.asciz	"._crit_edge8:1-0"
	.size	.L.str196, 17

	.type	.L.str197,@object       # @.str197
.L.str197:
	.asciz	"62"
	.size	.L.str197, 3

	.type	.L.str198,@object       # @.str198
.L.str198:
	.asciz	"63"
	.size	.L.str198, 3

	.type	.L.str199,@object       # @.str199
.L.str199:
	.asciz	"64"
	.size	.L.str199, 3

	.type	.L.str200,@object       # @.str200
.L.str200:
	.asciz	"65"
	.size	.L.str200, 3

	.type	.L.str201,@object       # @.str201
.L.str201:
	.asciz	"sqrt"
	.size	.L.str201, 5

	.type	.L.str202,@object       # @.str202
.L.str202:
	.asciz	"66"
	.size	.L.str202, 3

	.type	.L.str203,@object       # @.str203
.L.str203:
	.asciz	"67"
	.size	.L.str203, 3

	.type	.L.str204,@object       # @.str204
.L.str204:
	.asciz	"68"
	.size	.L.str204, 3

	.type	.L.str205,@object       # @.str205
.L.str205:
	.asciz	"69"
	.size	.L.str205, 3

	.type	.L.str206,@object       # @.str206
.L.str206:
	.asciz	"70"
	.size	.L.str206, 3

	.type	.L.str207,@object       # @.str207
	.align	16
.L.str207:
	.asciz	"._crit_edge8:1-3"
	.size	.L.str207, 17

	.type	.L.str208,@object       # @.str208
.L.str208:
	.asciz	"71"
	.size	.L.str208, 3

	.type	.L.str209,@object       # @.str209
.L.str209:
	.asciz	"72"
	.size	.L.str209, 3

	.type	.L.str210,@object       # @.str210
.L.str210:
	.asciz	"73"
	.size	.L.str210, 3

	.type	.L.str211,@object       # @.str211
	.align	16
.L.str211:
	.asciz	"._crit_edge8:1-5"
	.size	.L.str211, 17

	.type	.L.str212,@object       # @.str212
.L.str212:
	.asciz	"74"
	.size	.L.str212, 3

	.type	.L.str213,@object       # @.str213
	.align	16
.L.str213:
	.asciz	"._crit_edge8:1-6"
	.size	.L.str213, 17

	.type	.L.str214,@object       # @.str214
.L.str214:
	.asciz	".lr.ph13:2"
	.size	.L.str214, 11

	.type	.L.str215,@object       # @.str215
.L.str215:
	.asciz	"indvars.iv74"
	.size	.L.str215, 13

	.type	.L.str216,@object       # @.str216
	.align	16
.L.str216:
	.asciz	"indvars.iv.next75"
	.size	.L.str216, 18

	.type	.L.str217,@object       # @.str217
.L.str217:
	.asciz	"75"
	.size	.L.str217, 3

	.type	.L.str218,@object       # @.str218
.L.str218:
	.asciz	".lr.ph13:2-0"
	.size	.L.str218, 13

	.type	.L.str219,@object       # @.str219
.L.str219:
	.asciz	"lftr.wideiv78"
	.size	.L.str219, 14

	.type	.L.str220,@object       # @.str220
.L.str220:
	.asciz	"exitcond79"
	.size	.L.str220, 11

	.type	.L.str221,@object       # @.str221
.L.str221:
	.asciz	".lr.ph13:2-1"
	.size	.L.str221, 13

	.type	.L.str222,@object       # @.str222
.L.str222:
	.asciz	".loopexit11:1"
	.size	.L.str222, 14

	.type	.L.str223,@object       # @.str223
.L.str223:
	.asciz	"76"
	.size	.L.str223, 3

	.type	.L.str224,@object       # @.str224
.L.str224:
	.asciz	".loopexit11:1-0"
	.size	.L.str224, 16

	.type	.L.str225,@object       # @.str225
.L.str225:
	.asciz	".lr.ph22:2"
	.size	.L.str225, 11

	.type	.L.str226,@object       # @.str226
.L.str226:
	.asciz	"indvars.iv89"
	.size	.L.str226, 13

	.type	.L.str227,@object       # @.str227
	.align	16
.L.str227:
	.asciz	"indvars.iv.next90"
	.size	.L.str227, 18

	.type	.L.str228,@object       # @.str228
.L.str228:
	.asciz	"._crit_edge18:2"
	.size	.L.str228, 16

	.type	.L.str229,@object       # @.str229
.L.str229:
	.asciz	"indvars.iv81"
	.size	.L.str229, 13

	.type	.L.str230,@object       # @.str230
	.align	16
.L.str230:
	.asciz	"indvars.iv.next82"
	.size	.L.str230, 18

	.type	.L.str231,@object       # @.str231
.L.str231:
	.asciz	"77"
	.size	.L.str231, 3

	.type	.L.str232,@object       # @.str232
.L.str232:
	.asciz	"78"
	.size	.L.str232, 3

	.type	.L.str233,@object       # @.str233
.L.str233:
	.asciz	"79"
	.size	.L.str233, 3

	.type	.L.str234,@object       # @.str234
.L.str234:
	.asciz	"80"
	.size	.L.str234, 3

	.type	.L.str235,@object       # @.str235
.L.str235:
	.asciz	"81"
	.size	.L.str235, 3

	.type	.L.str236,@object       # @.str236
.L.str236:
	.asciz	"82"
	.size	.L.str236, 3

	.type	.L.str237,@object       # @.str237
.L.str237:
	.asciz	"83"
	.size	.L.str237, 3

	.type	.L.str238,@object       # @.str238
.L.str238:
	.asciz	"84"
	.size	.L.str238, 3

	.type	.L.str239,@object       # @.str239
.L.str239:
	.asciz	"85"
	.size	.L.str239, 3

	.type	.L.str240,@object       # @.str240
.L.str240:
	.asciz	"86"
	.size	.L.str240, 3

	.type	.L.str241,@object       # @.str241
.L.str241:
	.asciz	"87"
	.size	.L.str241, 3

	.type	.L.str242,@object       # @.str242
.L.str242:
	.asciz	"88"
	.size	.L.str242, 3

	.type	.L.str243,@object       # @.str243
.L.str243:
	.asciz	"89"
	.size	.L.str243, 3

	.type	.L.str244,@object       # @.str244
.L.str244:
	.asciz	"90"
	.size	.L.str244, 3

	.type	.L.str245,@object       # @.str245
.L.str245:
	.asciz	"91"
	.size	.L.str245, 3

	.type	.L.str246,@object       # @.str246
.L.str246:
	.asciz	".lr.ph22:2-2"
	.size	.L.str246, 13

	.type	.L.str247,@object       # @.str247
.L.str247:
	.asciz	".lr.ph17:2"
	.size	.L.str247, 11

	.type	.L.str248,@object       # @.str248
.L.str248:
	.asciz	"92"
	.size	.L.str248, 3

	.type	.L.str249,@object       # @.str249
.L.str249:
	.asciz	".lr.ph17:2-0"
	.size	.L.str249, 13

	.type	.L.str250,@object       # @.str250
.L.str250:
	.asciz	"93:3"
	.size	.L.str250, 5

	.type	.L.str251,@object       # @.str251
.L.str251:
	.asciz	"indvars.iv83"
	.size	.L.str251, 13

	.type	.L.str252,@object       # @.str252
	.align	16
.L.str252:
	.asciz	"indvars.iv.next84"
	.size	.L.str252, 18

	.type	.L.str253,@object       # @.str253
.L.str253:
	.asciz	"g.014"
	.size	.L.str253, 6

	.type	.L.str254,@object       # @.str254
.L.str254:
	.asciz	"100"
	.size	.L.str254, 4

	.type	.L.str255,@object       # @.str255
.L.str255:
	.asciz	"94"
	.size	.L.str255, 3

	.type	.L.str256,@object       # @.str256
.L.str256:
	.asciz	"95"
	.size	.L.str256, 3

	.type	.L.str257,@object       # @.str257
.L.str257:
	.asciz	"96"
	.size	.L.str257, 3

	.type	.L.str258,@object       # @.str258
.L.str258:
	.asciz	"97"
	.size	.L.str258, 3

	.type	.L.str259,@object       # @.str259
.L.str259:
	.asciz	"98"
	.size	.L.str259, 3

	.type	.L.str260,@object       # @.str260
.L.str260:
	.asciz	"99"
	.size	.L.str260, 3

	.type	.L.str261,@object       # @.str261
.L.str261:
	.asciz	"101"
	.size	.L.str261, 4

	.type	.L.str262,@object       # @.str262
.L.str262:
	.asciz	"102"
	.size	.L.str262, 4

	.type	.L.str263,@object       # @.str263
.L.str263:
	.asciz	"103"
	.size	.L.str263, 4

	.type	.L.str264,@object       # @.str264
.L.str264:
	.asciz	"104"
	.size	.L.str264, 4

	.type	.L.str265,@object       # @.str265
.L.str265:
	.asciz	"93:3-1"
	.size	.L.str265, 7

	.type	.L.str266,@object       # @.str266
.L.str266:
	.asciz	"lftr.wideiv87"
	.size	.L.str266, 14

	.type	.L.str267,@object       # @.str267
.L.str267:
	.asciz	"exitcond88"
	.size	.L.str267, 11

	.type	.L.str268,@object       # @.str268
.L.str268:
	.asciz	"93:3-2"
	.size	.L.str268, 7

	.type	.L.str269,@object       # @.str269
.L.str269:
	.asciz	"g.0.lcssa"
	.size	.L.str269, 10

	.type	.L.str270,@object       # @.str270
	.align	16
.L.str270:
	.asciz	"._crit_edge18:2-0"
	.size	.L.str270, 18

	.type	.L.str271,@object       # @.str271
.L.str271:
	.asciz	"lftr.wideiv93"
	.size	.L.str271, 14

	.type	.L.str272,@object       # @.str272
.L.str272:
	.asciz	"exitcond94"
	.size	.L.str272, 11

	.type	.L.str273,@object       # @.str273
	.align	16
.L.str273:
	.asciz	"._crit_edge18:2-1"
	.size	.L.str273, 18

	.type	.L.str274,@object       # @.str274
.L.str274:
	.asciz	".loopexit20:1"
	.size	.L.str274, 14

	.type	.L.str275,@object       # @.str275
.L.str275:
	.asciz	"105"
	.size	.L.str275, 4

	.type	.L.str276,@object       # @.str276
.L.str276:
	.asciz	".loopexit20:1-0"
	.size	.L.str276, 16

	.type	.L.str277,@object       # @.str277
.L.str277:
	.asciz	".lr.ph25:2"
	.size	.L.str277, 11

	.type	.L.str278,@object       # @.str278
.L.str278:
	.asciz	"indvars.iv96"
	.size	.L.str278, 13

	.type	.L.str279,@object       # @.str279
	.align	16
.L.str279:
	.asciz	"indvars.iv.next97"
	.size	.L.str279, 18

	.type	.L.str280,@object       # @.str280
.L.str280:
	.asciz	"f.024"
	.size	.L.str280, 6

	.type	.L.str281,@object       # @.str281
.L.str281:
	.asciz	"112"
	.size	.L.str281, 4

	.type	.L.str282,@object       # @.str282
.L.str282:
	.asciz	"106"
	.size	.L.str282, 4

	.type	.L.str283,@object       # @.str283
.L.str283:
	.asciz	"107"
	.size	.L.str283, 4

	.type	.L.str284,@object       # @.str284
.L.str284:
	.asciz	"108"
	.size	.L.str284, 4

	.type	.L.str285,@object       # @.str285
.L.str285:
	.asciz	".lr.ph25:2-0"
	.size	.L.str285, 13

	.type	.L.str286,@object       # @.str286
.L.str286:
	.asciz	"109"
	.size	.L.str286, 4

	.type	.L.str287172,@object    # @.str287172
.L.str287172:
	.asciz	"110"
	.size	.L.str287172, 4

	.type	.L.str288,@object       # @.str288
.L.str288:
	.asciz	"111"
	.size	.L.str288, 4

	.type	.L.str289,@object       # @.str289
.L.str289:
	.asciz	"lftr.wideiv100"
	.size	.L.str289, 15

	.type	.L.str290,@object       # @.str290
.L.str290:
	.asciz	"exitcond101"
	.size	.L.str290, 12

	.type	.L.str291,@object       # @.str291
.L.str291:
	.asciz	".lr.ph25:2-2"
	.size	.L.str291, 13

	.type	.L.str292,@object       # @.str292
.L.str292:
	.asciz	"._crit_edge26:1"
	.size	.L.str292, 16

	.type	.L.str293,@object       # @.str293
.L.str293:
	.asciz	"113"
	.size	.L.str293, 4

	.type	.L.str294,@object       # @.str294
.L.str294:
	.asciz	"114"
	.size	.L.str294, 4

	.type	.L.str295,@object       # @.str295
.L.str295:
	.asciz	"115"
	.size	.L.str295, 4

	.type	.L.str296,@object       # @.str296
	.align	16
.L.str296:
	.asciz	"._crit_edge26:1-2"
	.size	.L.str296, 18

	.type	.L.str297,@object       # @.str297
.L.str297:
	.asciz	".lr.ph31:2"
	.size	.L.str297, 11

	.type	.L.str298,@object       # @.str298
.L.str298:
	.asciz	"indvars.iv102"
	.size	.L.str298, 14

	.type	.L.str299,@object       # @.str299
	.align	16
.L.str299:
	.asciz	"indvars.iv.next103"
	.size	.L.str299, 19

	.type	.L.str300,@object       # @.str300
.L.str300:
	.asciz	"116"
	.size	.L.str300, 4

	.type	.L.str301,@object       # @.str301
.L.str301:
	.asciz	"117"
	.size	.L.str301, 4

	.type	.L.str302,@object       # @.str302
.L.str302:
	.asciz	"118"
	.size	.L.str302, 4

	.type	.L.str303,@object       # @.str303
.L.str303:
	.asciz	"119"
	.size	.L.str303, 4

	.type	.L.str304,@object       # @.str304
.L.str304:
	.asciz	"120"
	.size	.L.str304, 4

	.type	.L.str305,@object       # @.str305
.L.str305:
	.asciz	"121"
	.size	.L.str305, 4

	.type	.L.str306,@object       # @.str306
.L.str306:
	.asciz	".lr.ph31:2-0"
	.size	.L.str306, 13

	.type	.L.str307,@object       # @.str307
.L.str307:
	.asciz	"lftr.wideiv106"
	.size	.L.str307, 15

	.type	.L.str308,@object       # @.str308
.L.str308:
	.asciz	"exitcond107"
	.size	.L.str308, 12

	.type	.L.str309,@object       # @.str309
.L.str309:
	.asciz	".lr.ph31:2-1"
	.size	.L.str309, 13

	.type	.L.str310,@object       # @.str310
.L.str310:
	.asciz	".loopexit28:1"
	.size	.L.str310, 14

	.type	.L.str311,@object       # @.str311
.L.str311:
	.asciz	"122"
	.size	.L.str311, 4

	.type	.L.str312,@object       # @.str312
.L.str312:
	.asciz	".loopexit28:1-0"
	.size	.L.str312, 16

	.type	.L.str313,@object       # @.str313
.L.str313:
	.asciz	".lr.ph34:2"
	.size	.L.str313, 11

	.type	.L.str314,@object       # @.str314
.L.str314:
	.asciz	"indvars.iv116"
	.size	.L.str314, 14

	.type	.L.str315,@object       # @.str315
	.align	16
.L.str315:
	.asciz	"indvars.iv.next117"
	.size	.L.str315, 19

	.type	.L.str316,@object       # @.str316
.L.str316:
	.asciz	"._crit_edge35:2"
	.size	.L.str316, 16

	.type	.L.str317,@object       # @.str317
.L.str317:
	.asciz	"123"
	.size	.L.str317, 4

	.type	.L.str318,@object       # @.str318
.L.str318:
	.asciz	"124"
	.size	.L.str318, 4

	.type	.L.str319,@object       # @.str319
.L.str319:
	.asciz	"125"
	.size	.L.str319, 4

	.type	.L.str320,@object       # @.str320
.L.str320:
	.asciz	"126"
	.size	.L.str320, 4

	.type	.L.str321,@object       # @.str321
.L.str321:
	.asciz	"127"
	.size	.L.str321, 4

	.type	.L.str322,@object       # @.str322
.L.str322:
	.asciz	"128"
	.size	.L.str322, 4

	.type	.L.str323,@object       # @.str323
.L.str323:
	.asciz	"129"
	.size	.L.str323, 4

	.type	.L.str324,@object       # @.str324
.L.str324:
	.asciz	".lr.ph34:2-3"
	.size	.L.str324, 13

	.type	.L.str325,@object       # @.str325
.L.str325:
	.asciz	"130:3"
	.size	.L.str325, 6

	.type	.L.str326,@object       # @.str326
.L.str326:
	.asciz	"indvars.iv110"
	.size	.L.str326, 14

	.type	.L.str327,@object       # @.str327
	.align	16
.L.str327:
	.asciz	"indvars.iv.next111"
	.size	.L.str327, 19

	.type	.L.str328,@object       # @.str328
.L.str328:
	.asciz	"131"
	.size	.L.str328, 4

	.type	.L.str329,@object       # @.str329
.L.str329:
	.asciz	"132"
	.size	.L.str329, 4

	.type	.L.str330,@object       # @.str330
.L.str330:
	.asciz	"133"
	.size	.L.str330, 4

	.type	.L.str331,@object       # @.str331
.L.str331:
	.asciz	"134"
	.size	.L.str331, 4

	.type	.L.str332,@object       # @.str332
.L.str332:
	.asciz	"135"
	.size	.L.str332, 4

	.type	.L.str333,@object       # @.str333
.L.str333:
	.asciz	"136"
	.size	.L.str333, 4

	.type	.L.str334,@object       # @.str334
.L.str334:
	.asciz	"137"
	.size	.L.str334, 4

	.type	.L.str335,@object       # @.str335
.L.str335:
	.asciz	"138"
	.size	.L.str335, 4

	.type	.L.str336,@object       # @.str336
.L.str336:
	.asciz	"139"
	.size	.L.str336, 4

	.type	.L.str337,@object       # @.str337
.L.str337:
	.asciz	"140"
	.size	.L.str337, 4

	.type	.L.str338,@object       # @.str338
.L.str338:
	.asciz	"141"
	.size	.L.str338, 4

	.type	.L.str339,@object       # @.str339
.L.str339:
	.asciz	"130:3-0"
	.size	.L.str339, 8

	.type	.L.str340,@object       # @.str340
.L.str340:
	.asciz	"lftr.wideiv114"
	.size	.L.str340, 15

	.type	.L.str341,@object       # @.str341
.L.str341:
	.asciz	"exitcond115"
	.size	.L.str341, 12

	.type	.L.str342,@object       # @.str342
.L.str342:
	.asciz	"130:3-1"
	.size	.L.str342, 8

	.type	.L.str343,@object       # @.str343
.L.str343:
	.asciz	"lftr.wideiv120"
	.size	.L.str343, 15

	.type	.L.str344,@object       # @.str344
.L.str344:
	.asciz	"exitcond121"
	.size	.L.str344, 12

	.type	.L.str345,@object       # @.str345
	.align	16
.L.str345:
	.asciz	"._crit_edge35:2-0"
	.size	.L.str345, 18

	.type	.L.str346,@object       # @.str346
.L.str346:
	.asciz	".preheader39:1"
	.size	.L.str346, 15

	.type	.L.str347,@object       # @.str347
.L.str347:
	.asciz	"142"
	.size	.L.str347, 4

	.type	.L.str348,@object       # @.str348
	.align	16
.L.str348:
	.asciz	".preheader39:1-0"
	.size	.L.str348, 17

	.type	.L.str349,@object       # @.str349
.L.str349:
	.asciz	".lr.ph42:2"
	.size	.L.str349, 11

	.type	.L.str350,@object       # @.str350
.L.str350:
	.asciz	"indvars.iv122"
	.size	.L.str350, 14

	.type	.L.str351,@object       # @.str351
	.align	16
.L.str351:
	.asciz	"indvars.iv.next123"
	.size	.L.str351, 19

	.type	.L.str352,@object       # @.str352
.L.str352:
	.asciz	"143"
	.size	.L.str352, 4

	.type	.L.str353,@object       # @.str353
.L.str353:
	.asciz	"144"
	.size	.L.str353, 4

	.type	.L.str354,@object       # @.str354
.L.str354:
	.asciz	"145"
	.size	.L.str354, 4

	.type	.L.str355,@object       # @.str355
.L.str355:
	.asciz	"146"
	.size	.L.str355, 4

	.type	.L.str356,@object       # @.str356
.L.str356:
	.asciz	"147"
	.size	.L.str356, 4

	.type	.L.str357,@object       # @.str357
.L.str357:
	.asciz	"148"
	.size	.L.str357, 4

	.type	.L.str358,@object       # @.str358
.L.str358:
	.asciz	"149"
	.size	.L.str358, 4

	.type	.L.str359,@object       # @.str359
.L.str359:
	.asciz	"150"
	.size	.L.str359, 4

	.type	.L.str360,@object       # @.str360
.L.str360:
	.asciz	".lr.ph42:2-1"
	.size	.L.str360, 13

	.type	.L.str361,@object       # @.str361
.L.str361:
	.asciz	"151"
	.size	.L.str361, 4

	.type	.L.str362,@object       # @.str362
.L.str362:
	.asciz	"152"
	.size	.L.str362, 4

	.type	.L.str363,@object       # @.str363
.L.str363:
	.asciz	"153"
	.size	.L.str363, 4

	.type	.L.str364,@object       # @.str364
.L.str364:
	.asciz	"154"
	.size	.L.str364, 4

	.type	.L.str365,@object       # @.str365
.L.str365:
	.asciz	"155"
	.size	.L.str365, 4

	.type	.L.str366,@object       # @.str366
.L.str366:
	.asciz	".lr.ph42:2-2"
	.size	.L.str366, 13

	.type	.L.str367,@object       # @.str367
.L.str367:
	.asciz	"156"
	.size	.L.str367, 4

	.type	.L.str368,@object       # @.str368
.L.str368:
	.asciz	".lr.ph42:2-3"
	.size	.L.str368, 13

	.type	.L.str369,@object       # @.str369
.L.str369:
	.asciz	"lftr.wideiv126"
	.size	.L.str369, 15

	.type	.L.str370,@object       # @.str370
.L.str370:
	.asciz	"exitcond127"
	.size	.L.str370, 12

	.type	.L.str371,@object       # @.str371
.L.str371:
	.asciz	".lr.ph42:2-4"
	.size	.L.str371, 13

	.type	.L.str372,@object       # @.str372
	.align	16
.L.str372:
	.asciz	"._crit_edge52:0-0"
	.size	.L.str372, 18

	.type	.L.str373,@object       # @.str373
.L.str373:
	.asciz	"0:0-4"
	.size	.L.str373, 6

	.type	.L.str374,@object       # @.str374
.L.str374:
	.asciz	".loopexit24:0"
	.size	.L.str374, 14

	.type	.L.str375,@object       # @.str375
.L.str375:
	.asciz	".preheader34:0"
	.size	.L.str375, 15

	.type	.L.str376,@object       # @.str376
	.align	16
.L.str376:
	.asciz	".preheader34:0-0"
	.size	.L.str376, 17

	.type	.L.str377,@object       # @.str377
.L.str377:
	.asciz	".lr.ph36:1"
	.size	.L.str377, 11

	.type	.L.str378,@object       # @.str378
	.align	16
.L.str378:
	.asciz	"._crit_edge37.thread:0"
	.size	.L.str378, 23

	.type	.L.str379,@object       # @.str379
	.align	16
.L.str379:
	.asciz	"._crit_edge37.thread:0-2"
	.size	.L.str379, 25

	.type	.L.str380,@object       # @.str380
	.align	16
.L.str380:
	.asciz	"._crit_edge37.thread:0-4"
	.size	.L.str380, 25

	.type	.L.str381,@object       # @.str381
.L.str381:
	.asciz	".lr.ph36:1-0"
	.size	.L.str381, 13

	.type	.L.str382,@object       # @.str382
.L.str382:
	.asciz	".lr.ph36:1-1"
	.size	.L.str382, 13

	.type	.L.str383,@object       # @.str383
.L.str383:
	.asciz	"._crit_edge37:0"
	.size	.L.str383, 16

	.type	.L.str384,@object       # @.str384
	.align	16
.L.str384:
	.asciz	"._crit_edge37:0-2"
	.size	.L.str384, 18

	.type	.L.str385,@object       # @.str385
	.align	16
.L.str385:
	.asciz	"._crit_edge37:0-4"
	.size	.L.str385, 18

	.type	.L.str386,@object       # @.str386
.L.str386:
	.asciz	".lr.ph33:1"
	.size	.L.str386, 11

	.type	.L.str387,@object       # @.str387
.L.str387:
	.asciz	"indvars.iv63"
	.size	.L.str387, 13

	.type	.L.str388173,@object    # @.str388173
	.align	16
.L.str388173:
	.asciz	"indvars.iv.next64"
	.size	.L.str388173, 18

	.type	.L.str389,@object       # @.str389
.L.str389:
	.asciz	".loopexit17:1"
	.size	.L.str389, 14

	.type	.L.str390,@object       # @.str390
.L.str390:
	.asciz	"indvars.iv49"
	.size	.L.str390, 13

	.type	.L.str391,@object       # @.str391
	.align	16
.L.str391:
	.asciz	"indvars.iv.next50"
	.size	.L.str391, 18

	.type	.L.str392,@object       # @.str392
.L.str392:
	.asciz	"indvars.iv42"
	.size	.L.str392, 13

	.type	.L.str393,@object       # @.str393
	.align	16
.L.str393:
	.asciz	"indvars.iv.next43"
	.size	.L.str393, 18

	.type	.L.str394,@object       # @.str394
.L.str394:
	.asciz	"t.031"
	.size	.L.str394, 6

	.type	.L.str395,@object       # @.str395
.L.str395:
	.asciz	"t.1"
	.size	.L.str395, 4

	.type	.L.str396,@object       # @.str396
.L.str396:
	.asciz	"b.030"
	.size	.L.str396, 6

	.type	.L.str397,@object       # @.str397
.L.str397:
	.asciz	"b.1"
	.size	.L.str397, 4

	.type	.L.str398,@object       # @.str398
.L.str398:
	.asciz	"l.028"
	.size	.L.str398, 6

	.type	.L.str399,@object       # @.str399
.L.str399:
	.asciz	"f.027"
	.size	.L.str399, 6

	.type	.L.str400,@object       # @.str400
.L.str400:
	.asciz	"f.2"
	.size	.L.str400, 4

	.type	.L.str401,@object       # @.str401
.L.str401:
	.asciz	"c.026"
	.size	.L.str401, 6

	.type	.L.str402,@object       # @.str402
.L.str402:
	.asciz	"c.1"
	.size	.L.str402, 4

	.type	.L.str403,@object       # @.str403
.L.str403:
	.asciz	".lr.ph33:1-2"
	.size	.L.str403, 13

	.type	.L.str404,@object       # @.str404
.L.str404:
	.asciz	"22:1"
	.size	.L.str404, 5

	.type	.L.str405,@object       # @.str405
.L.str405:
	.asciz	"22:1-3"
	.size	.L.str405, 7

	.type	.L.str406,@object       # @.str406
.L.str406:
	.asciz	".lr.ph:1-1"
	.size	.L.str406, 11

	.type	.L.str407,@object       # @.str407
.L.str407:
	.asciz	"29:2"
	.size	.L.str407, 5

	.type	.L.str408,@object       # @.str408
.L.str408:
	.asciz	"26:2"
	.size	.L.str408, 5

	.type	.L.str409,@object       # @.str409
	.align	16
.L.str409:
	.asciz	"indvars.iv.next41"
	.size	.L.str409, 18

	.type	.L.str410,@object       # @.str410
.L.str410:
	.asciz	"26:2-0"
	.size	.L.str410, 7

	.type	.L.str411,@object       # @.str411
.L.str411:
	.asciz	"split2:1"
	.size	.L.str411, 9

	.type	.L.str412,@object       # @.str412
.L.str412:
	.asciz	"indvars.iv40"
	.size	.L.str412, 13

	.type	.L.str413,@object       # @.str413
.L.str413:
	.asciz	"m.01"
	.size	.L.str413, 5

	.type	.L.str414,@object       # @.str414
.L.str414:
	.asciz	"29:2-1"
	.size	.L.str414, 7

	.type	.L.str415,@object       # @.str415
.L.str415:
	.asciz	"m.0.lcssa"
	.size	.L.str415, 10

	.type	.L.str416,@object       # @.str416
.L.str416:
	.asciz	"split2:1-0"
	.size	.L.str416, 11

	.type	.L.str417,@object       # @.str417
.L.str417:
	.asciz	".lr.ph23:1"
	.size	.L.str417, 11

	.type	.L.str418,@object       # @.str418
.L.str418:
	.asciz	"46:2"
	.size	.L.str418, 5

	.type	.L.str419,@object       # @.str419
.L.str419:
	.asciz	"f.1"
	.size	.L.str419, 4

	.type	.L.str420,@object       # @.str420
.L.str420:
	.asciz	"106:2"
	.size	.L.str420, 6

	.type	.L.str421,@object       # @.str421
.L.str421:
	.asciz	"j.0"
	.size	.L.str421, 4

	.type	.L.str422,@object       # @.str422
.L.str422:
	.asciz	"46:2-0"
	.size	.L.str422, 7

	.type	.L.str423,@object       # @.str423
.L.str423:
	.asciz	"48:0"
	.size	.L.str423, 5

	.type	.L.str424,@object       # @.str424
.L.str424:
	.asciz	"50:2"
	.size	.L.str424, 5

	.type	.L.str425,@object       # @.str425
.L.str425:
	.asciz	"48:0-1"
	.size	.L.str425, 7

	.type	.L.str426,@object       # @.str426
.L.str426:
	.asciz	"50:2-5"
	.size	.L.str426, 7

	.type	.L.str427,@object       # @.str427
.L.str427:
	.asciz	"50:2-7"
	.size	.L.str427, 7

	.type	.L.str428,@object       # @.str428
.L.str428:
	.asciz	".lr.ph5:3"
	.size	.L.str428, 10

	.type	.L.str429,@object       # @.str429
.L.str429:
	.asciz	"._crit_edge6:2"
	.size	.L.str429, 15

	.type	.L.str430,@object       # @.str430
.L.str430:
	.asciz	"indvars.iv44"
	.size	.L.str430, 13

	.type	.L.str431,@object       # @.str431
	.align	16
.L.str431:
	.asciz	"indvars.iv.next45"
	.size	.L.str431, 18

	.type	.L.str432,@object       # @.str432
.L.str432:
	.asciz	".lr.ph5:3-0"
	.size	.L.str432, 12

	.type	.L.str433,@object       # @.str433
.L.str433:
	.asciz	".lr.ph5:3-1"
	.size	.L.str433, 12

	.type	.L.str434,@object       # @.str434
.L.str434:
	.asciz	"g.0"
	.size	.L.str434, 4

	.type	.L.str435,@object       # @.str435
	.align	16
.L.str435:
	.asciz	"._crit_edge6:2-7"
	.size	.L.str435, 17

	.type	.L.str436,@object       # @.str436
.L.str436:
	.asciz	"._crit_edge13:2"
	.size	.L.str436, 16

	.type	.L.str437,@object       # @.str437
.L.str437:
	.asciz	".lr.ph12:3"
	.size	.L.str437, 11

	.type	.L.str438,@object       # @.str438
.L.str438:
	.asciz	"indvars.iv47"
	.size	.L.str438, 13

	.type	.L.str439,@object       # @.str439
	.align	16
.L.str439:
	.asciz	"indvars.iv.next48"
	.size	.L.str439, 18

	.type	.L.str440,@object       # @.str440
.L.str440:
	.asciz	"s.010"
	.size	.L.str440, 6

	.type	.L.str441,@object       # @.str441
.L.str441:
	.asciz	"h.08"
	.size	.L.str441, 5

	.type	.L.str442,@object       # @.str442
.L.str442:
	.asciz	"g.17"
	.size	.L.str442, 5

	.type	.L.str443,@object       # @.str443
.L.str443:
	.asciz	"g.2"
	.size	.L.str443, 4

	.type	.L.str444,@object       # @.str444
.L.str444:
	.asciz	".lr.ph12:3-3"
	.size	.L.str444, 13

	.type	.L.str445,@object       # @.str445
.L.str445:
	.asciz	".lr.ph12:3-5"
	.size	.L.str445, 13

	.type	.L.str446,@object       # @.str446
.L.str446:
	.asciz	"93"
	.size	.L.str446, 3

	.type	.L.str447,@object       # @.str447
.L.str447:
	.asciz	"lftr.wideiv51"
	.size	.L.str447, 14

	.type	.L.str448,@object       # @.str448
.L.str448:
	.asciz	"exitcond52"
	.size	.L.str448, 11

	.type	.L.str449,@object       # @.str449
.L.str449:
	.asciz	".lr.ph12:3-9"
	.size	.L.str449, 13

	.type	.L.str450,@object       # @.str450
.L.str450:
	.asciz	"s.0.lcssa"
	.size	.L.str450, 10

	.type	.L.str451,@object       # @.str451
.L.str451:
	.asciz	"g.1.lcssa"
	.size	.L.str451, 10

	.type	.L.str452,@object       # @.str452
	.align	16
.L.str452:
	.asciz	"._crit_edge13:2-0"
	.size	.L.str452, 18

	.type	.L.str453,@object       # @.str453
	.align	16
.L.str453:
	.asciz	"._crit_edge13:2-1"
	.size	.L.str453, 18

	.type	.L.str454,@object       # @.str454
	.align	16
.L.str454:
	.asciz	"._crit_edge13:2-2"
	.size	.L.str454, 18

	.type	.L.str455,@object       # @.str455
.L.str455:
	.asciz	"100:2"
	.size	.L.str455, 6

	.type	.L.str456,@object       # @.str456
.L.str456:
	.asciz	"100:2-0"
	.size	.L.str456, 8

	.type	.L.str457,@object       # @.str457
.L.str457:
	.asciz	"106:2-0"
	.size	.L.str457, 8

	.type	.L.str458,@object       # @.str458
.L.str458:
	.asciz	"106:2-1"
	.size	.L.str458, 8

	.type	.L.str459,@object       # @.str459
.L.str459:
	.asciz	".lr.ph23:1-2"
	.size	.L.str459, 13

	.type	.L.str460,@object       # @.str460
.L.str460:
	.asciz	"111:2"
	.size	.L.str460, 6

	.type	.L.str461,@object       # @.str461
.L.str461:
	.asciz	"indvars.iv60"
	.size	.L.str461, 13

	.type	.L.str462,@object       # @.str462
	.align	16
.L.str462:
	.asciz	"indvars.iv.next61"
	.size	.L.str462, 18

	.type	.L.str463,@object       # @.str463
.L.str463:
	.asciz	"123:2"
	.size	.L.str463, 6

	.type	.L.str464,@object       # @.str464
.L.str464:
	.asciz	"i.221"
	.size	.L.str464, 6

	.type	.L.str465,@object       # @.str465
.L.str465:
	.asciz	"111:2-0"
	.size	.L.str465, 8

	.type	.L.str466,@object       # @.str466
.L.str466:
	.asciz	"114:1"
	.size	.L.str466, 6

	.type	.L.str467,@object       # @.str467
.L.str467:
	.asciz	"117:2"
	.size	.L.str467, 6

	.type	.L.str468,@object       # @.str468
.L.str468:
	.asciz	"114:1-0"
	.size	.L.str468, 8

	.type	.L.str469,@object       # @.str469
.L.str469:
	.asciz	"114:1-1"
	.size	.L.str469, 8

	.type	.L.str470,@object       # @.str470
.L.str470:
	.asciz	"117:2-0"
	.size	.L.str470, 8

	.type	.L.str471,@object       # @.str471
.L.str471:
	.asciz	"122:1"
	.size	.L.str471, 6

	.type	.L.str472,@object       # @.str472
.L.str472:
	.asciz	"122:1-0"
	.size	.L.str472, 8

	.type	.L.str473,@object       # @.str473
.L.str473:
	.asciz	"122:1-1"
	.size	.L.str473, 8

	.type	.L.str474,@object       # @.str474
.L.str474:
	.asciz	"123:2-0"
	.size	.L.str474, 8

	.type	.L.str475,@object       # @.str475
.L.str475:
	.asciz	"123:2-2"
	.size	.L.str475, 8

	.type	.L.str476,@object       # @.str476
.L.str476:
	.asciz	".loopexit17:1-1"
	.size	.L.str476, 16

	.type	.L.str477,@object       # @.str477
.L.str477:
	.asciz	".loopexit24:0-0"
	.size	.L.str477, 16

	.type	.L.str478,@object       # @.str478
.L.str478:
	.asciz	"trbak1"
	.size	.L.str478, 7

	.type	.L.str479,@object       # @.str479
.L.str479:
	.asciz	"notlhs"
	.size	.L.str479, 7

	.type	.L.str480,@object       # @.str480
.L.str480:
	.asciz	"m"
	.size	.L.str480, 2

	.type	.L.str481,@object       # @.str481
.L.str481:
	.asciz	"notrhs"
	.size	.L.str481, 7

	.type	.L.str482,@object       # @.str482
.L.str482:
	.asciz	"or.cond.not"
	.size	.L.str482, 12

	.type	.L.str483,@object       # @.str483
.L.str483:
	.asciz	"or.cond32"
	.size	.L.str483, 10

	.type	.L.str484,@object       # @.str484
.L.str484:
	.asciz	"0:0-5"
	.size	.L.str484, 6

	.type	.L.str485,@object       # @.str485
.L.str485:
	.asciz	".lr.ph15:0"
	.size	.L.str485, 11

	.type	.L.str486,@object       # @.str486
.L.str486:
	.asciz	".loopexit11:0"
	.size	.L.str486, 14

	.type	.L.str487,@object       # @.str487
.L.str487:
	.asciz	".lr.ph15:0-0"
	.size	.L.str487, 13

	.type	.L.str488,@object       # @.str488
.L.str488:
	.asciz	"2:1"
	.size	.L.str488, 4

	.type	.L.str489174,@object    # @.str489174
.L.str489174:
	.asciz	"indvars.iv28"
	.size	.L.str489174, 13

	.type	.L.str490,@object       # @.str490
	.align	16
.L.str490:
	.asciz	"indvars.iv.next29"
	.size	.L.str490, 18

	.type	.L.str491,@object       # @.str491
.L.str491:
	.asciz	"indvars.iv20"
	.size	.L.str491, 13

	.type	.L.str492,@object       # @.str492
	.align	16
.L.str492:
	.asciz	"indvars.iv.next21"
	.size	.L.str492, 18

	.type	.L.str493,@object       # @.str493
.L.str493:
	.asciz	".not"
	.size	.L.str493, 5

	.type	.L.str494,@object       # @.str494
.L.str494:
	.asciz	".not33"
	.size	.L.str494, 7

	.type	.L.str495,@object       # @.str495
.L.str495:
	.asciz	"brmerge"
	.size	.L.str495, 8

	.type	.L.str496,@object       # @.str496
.L.str496:
	.asciz	"2:1-0"
	.size	.L.str496, 6

	.type	.L.str497,@object       # @.str497
	.align	16
.L.str497:
	.asciz	".preheader.lr.ph:1"
	.size	.L.str497, 19

	.type	.L.str498,@object       # @.str498
	.align	16
.L.str498:
	.asciz	".preheader.lr.ph:1-0"
	.size	.L.str498, 21

	.type	.L.str499,@object       # @.str499
.L.str499:
	.asciz	"indvars.iv24"
	.size	.L.str499, 13

	.type	.L.str500,@object       # @.str500
	.align	16
.L.str500:
	.asciz	"indvars.iv.next25"
	.size	.L.str500, 18

	.type	.L.str501,@object       # @.str501
.L.str501:
	.asciz	"._crit_edge7:2"
	.size	.L.str501, 15

	.type	.L.str502,@object       # @.str502
.L.str502:
	.asciz	".lr.ph:2-0"
	.size	.L.str502, 11

	.type	.L.str503,@object       # @.str503
.L.str503:
	.asciz	"15:3"
	.size	.L.str503, 5

	.type	.L.str504,@object       # @.str504
.L.str504:
	.asciz	"s.03"
	.size	.L.str504, 5

	.type	.L.str505,@object       # @.str505
.L.str505:
	.asciz	"26"
	.size	.L.str505, 3

	.type	.L.str506,@object       # @.str506
.L.str506:
	.asciz	"15:3-1"
	.size	.L.str506, 7

	.type	.L.str507,@object       # @.str507
.L.str507:
	.asciz	".lr.ph6:2"
	.size	.L.str507, 10

	.type	.L.str508,@object       # @.str508
.L.str508:
	.asciz	".lr.ph6:2-2"
	.size	.L.str508, 12

	.type	.L.str509,@object       # @.str509
.L.str509:
	.asciz	"35:3"
	.size	.L.str509, 5

	.type	.L.str510,@object       # @.str510
.L.str510:
	.asciz	"indvars.iv18"
	.size	.L.str510, 13

	.type	.L.str511,@object       # @.str511
	.align	16
.L.str511:
	.asciz	"indvars.iv.next19"
	.size	.L.str511, 18

	.type	.L.str512,@object       # @.str512
.L.str512:
	.asciz	"35:3-0"
	.size	.L.str512, 7

	.type	.L.str513,@object       # @.str513
.L.str513:
	.asciz	"lftr.wideiv22"
	.size	.L.str513, 14

	.type	.L.str514,@object       # @.str514
.L.str514:
	.asciz	"exitcond23"
	.size	.L.str514, 11

	.type	.L.str515,@object       # @.str515
.L.str515:
	.asciz	"35:3-1"
	.size	.L.str515, 7

	.type	.L.str516,@object       # @.str516
.L.str516:
	.asciz	"lftr.wideiv26"
	.size	.L.str516, 14

	.type	.L.str517,@object       # @.str517
.L.str517:
	.asciz	"exitcond27"
	.size	.L.str517, 11

	.type	.L.str518,@object       # @.str518
	.align	16
.L.str518:
	.asciz	"._crit_edge7:2-0"
	.size	.L.str518, 17

	.type	.L.str519,@object       # @.str519
.L.str519:
	.asciz	"lftr.wideiv30"
	.size	.L.str519, 14

	.type	.L.str520,@object       # @.str520
.L.str520:
	.asciz	"exitcond31"
	.size	.L.str520, 11

	.type	.L.str521,@object       # @.str521
.L.str521:
	.asciz	".loopexit:1-1"
	.size	.L.str521, 14

	.type	.L.str522,@object       # @.str522
.L.str522:
	.asciz	".loopexit11:0-0"
	.size	.L.str522, 16

	.type	initp,@object           # @initp
	.bss
	.globl	initp
initp:
	.byte	0                       # 0x0
	.size	initp, 1

	.type	inst_count,@object      # @inst_count
	.globl	inst_count
	.align	4
inst_count:
	.long	0                       # 0x0
	.size	inst_count, 4

	.type	.L.str523,@object       # @.str523
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str523:
	.asciz	"%%%% LABEL MAP START %%%%\n"
	.size	.L.str523, 27

	.type	.L.str1524,@object      # @.str1524
.L.str1524:
	.asciz	"%%%% LABEL MAP END %%%%\n\n"
	.size	.L.str1524, 26

	.type	full_trace_file,@object # @full_trace_file
	.comm	full_trace_file,8,8
	.type	.L.str2525,@object      # @.str2525
.L.str2525:
	.asciz	"dynamic_trace.gz"
	.size	.L.str2525, 17

	.type	.L.str3526,@object      # @.str3526
.L.str3526:
	.asciz	"w"
	.size	.L.str3526, 2

	.type	.L.str4527,@object      # @.str4527
.L.str4527:
	.asciz	"Failed to open logfile \"dynamic_trace\""
	.size	.L.str4527, 39

	.type	current_toplevel_function,@object # @current_toplevel_function
	.comm	current_toplevel_function,8,8
	.type	current_logging_status,@object # @current_logging_status
	.comm	current_logging_status,4,4
	.type	.L.str5528,@object      # @.str5528
.L.str5528:
	.asciz	"false && \"Returning from within a toplevel function before it was called!\""
	.size	.L.str5528, 75

	.type	.L.str6529,@object      # @.str6529
.L.str6529:
	.asciz	"/workspace/LLVM-Tracer/profile-func/trace_logger.c"
	.size	.L.str6529, 51

	.type	.L__PRETTY_FUNCTION__.log_or_not,@object # @__PRETTY_FUNCTION__.log_or_not
.L__PRETTY_FUNCTION__.log_or_not:
	.asciz	"logging_status log_or_not(_Bool, _Bool, int, char *)"
	.size	.L__PRETTY_FUNCTION__.log_or_not, 53

	.type	.L.str7530,@object      # @.str7530
.L.str7530:
	.asciz	"false && \"Cannot call a top level function from within another one!\""
	.size	.L.str7530, 69

	.type	.L.str8531,@object      # @.str8531
.L.str8531:
	.asciz	"0x"
	.size	.L.str8531, 3

	.type	.L.str9532,@object      # @.str9532
.L.str9532:
	.asciz	"%02x"
	.size	.L.str9532, 5

	.type	.L.str10533,@object     # @.str10533
.L.str10533:
	.asciz	"Stopping logging at inst %d.\n"
	.size	.L.str10533, 30

	.type	.L.str11534,@object     # @.str11534
.L.str11534:
	.asciz	"Starting to log at inst = %d.\n"
	.size	.L.str11534, 31

	.type	.L.str12535,@object     # @.str12535
.L.str12535:
	.asciz	"\nentry,%s,%d,\n"
	.size	.L.str12535, 15

	.type	.L.str13536,@object     # @.str13536
.L.str13536:
	.asciz	"\n0,%d,%s,%s,%s,%d,%d\n"
	.size	.L.str13536, 22

	.type	.L.str14537,@object     # @.str14537
.L.str14537:
	.asciz	"initp == true"
	.size	.L.str14537, 14

	.type	.L__PRETTY_FUNCTION__.trace_logger_log_int,@object # @__PRETTY_FUNCTION__.trace_logger_log_int
.L__PRETTY_FUNCTION__.trace_logger_log_int:
	.asciz	"void trace_logger_log_int(int, int, int64_t, int, char *, int, char *)"
	.size	.L__PRETTY_FUNCTION__.trace_logger_log_int, 71

	.type	.L.str15538,@object     # @.str15538
.L.str15538:
	.asciz	"r,%d,%ld,%d"
	.size	.L.str15538, 12

	.type	.L.str16539,@object     # @.str16539
.L.str16539:
	.asciz	"f,%d,%ld,%d"
	.size	.L.str16539, 12

	.type	.L.str17540,@object     # @.str17540
.L.str17540:
	.asciz	"%d,%d,%ld,%d"
	.size	.L.str17540, 13

	.type	.L.str18541,@object     # @.str18541
.L.str18541:
	.asciz	",%s"
	.size	.L.str18541, 4

	.type	.L.str19542,@object     # @.str19542
.L.str19542:
	.asciz	", "
	.size	.L.str19542, 3

	.type	.L.str20543,@object     # @.str20543
.L.str20543:
	.asciz	",%s,\n"
	.size	.L.str20543, 6

	.type	.L.str21544,@object     # @.str21544
.L.str21544:
	.asciz	",\n"
	.size	.L.str21544, 3

	.type	.L__PRETTY_FUNCTION__.trace_logger_log_ptr,@object # @__PRETTY_FUNCTION__.trace_logger_log_ptr
.L__PRETTY_FUNCTION__.trace_logger_log_ptr:
	.asciz	"void trace_logger_log_ptr(int, int, uint64_t, int, char *, int, char *)"
	.size	.L__PRETTY_FUNCTION__.trace_logger_log_ptr, 72

	.type	.L.str22545,@object     # @.str22545
.L.str22545:
	.asciz	"r,%d,%#llx,%d"
	.size	.L.str22545, 14

	.type	.L.str23546,@object     # @.str23546
.L.str23546:
	.asciz	"f,%d,%#llx,%d"
	.size	.L.str23546, 14

	.type	.L.str24547,@object     # @.str24547
.L.str24547:
	.asciz	"%d,%d,%#llx,%d"
	.size	.L.str24547, 15

	.type	.L__PRETTY_FUNCTION__.trace_logger_log_double,@object # @__PRETTY_FUNCTION__.trace_logger_log_double
.L__PRETTY_FUNCTION__.trace_logger_log_double:
	.asciz	"void trace_logger_log_double(int, int, double, int, char *, int, char *)"
	.size	.L__PRETTY_FUNCTION__.trace_logger_log_double, 73

	.type	.L.str25548,@object     # @.str25548
.L.str25548:
	.asciz	"r,%d,%f,%d"
	.size	.L.str25548, 11

	.type	.L.str26549,@object     # @.str26549
.L.str26549:
	.asciz	"f,%d,%f,%d"
	.size	.L.str26549, 11

	.type	.L.str27550,@object     # @.str27550
.L.str27550:
	.asciz	"%d,%d,%f,%d"
	.size	.L.str27550, 12

	.type	.L__PRETTY_FUNCTION__.trace_logger_log_vector,@object # @__PRETTY_FUNCTION__.trace_logger_log_vector
.L__PRETTY_FUNCTION__.trace_logger_log_vector:
	.asciz	"void trace_logger_log_vector(int, int, uint8_t *, int, char *, int, char *)"
	.size	.L__PRETTY_FUNCTION__.trace_logger_log_vector, 76

	.type	.L.str28551,@object     # @.str28551
.L.str28551:
	.asciz	"r,%d,%s,%d"
	.size	.L.str28551, 11

	.type	.L.str29552,@object     # @.str29552
.L.str29552:
	.asciz	"f,%d,%s,%d"
	.size	.L.str29552, 11

	.type	.L.str30553,@object     # @.str30553
.L.str30553:
	.asciz	"%d,%d,%s,%d"
	.size	.L.str30553, 12

	.text
.Ldebug_end0:
	.section	.debug_str,"MS",@progbits,1
.Linfo_string0:
	.asciz	"clang version 3.4.2 (tags/RELEASE_34/dot2-final)"
.Linfo_string1:
	.asciz	"mma_test_eigen.c"
.Linfo_string2:
	.asciz	"/workspace/gem5-aladdin/src/aladdin/integration-test/with-cpu/mma_test_eigen"
.Linfo_string3:
	.asciz	"num_vals"
.Linfo_string4:
	.asciz	"int"
.Linfo_string5:
	.asciz	"test_stores"
.Linfo_string6:
	.asciz	"store_kernel"
.Linfo_string7:
	.asciz	"main"
.Linfo_string8:
	.asciz	"eispack.c"
.Linfo_string9:
	.asciz	"value"
.Linfo_string10:
	.asciz	"double"
.Linfo_string11:
	.asciz	"pythag"
.Linfo_string12:
	.asciz	"r8_epsilon"
.Linfo_string13:
	.asciz	"r8_max"
.Linfo_string14:
	.asciz	"r8_min"
.Linfo_string15:
	.asciz	"r8_sign"
.Linfo_string16:
	.asciz	"rs"
.Linfo_string17:
	.asciz	"tqlrat"
.Linfo_string18:
	.asciz	"trbak1"
.Linfo_string19:
	.asciz	"tred1"
.Linfo_string20:
	.asciz	"store_vals"
.Linfo_string21:
	.asciz	"store_loc"
.Linfo_string22:
	.asciz	"num_failures"
.Linfo_string23:
	.asciz	"i"
.Linfo_string24:
	.asciz	"a"
.Linfo_string25:
	.asciz	"w"
.Linfo_string26:
	.asciz	"z"
.Linfo_string27:
	.asciz	"b"
.Linfo_string28:
	.asciz	"p"
.Linfo_string29:
	.asciz	"r"
.Linfo_string30:
	.asciz	"t"
.Linfo_string31:
	.asciz	"s"
.Linfo_string32:
	.asciz	"u"
.Linfo_string33:
	.asciz	"x"
.Linfo_string34:
	.asciz	"y"
.Linfo_string35:
	.asciz	"n"
.Linfo_string36:
	.asciz	"matz"
.Linfo_string37:
	.asciz	"_Bool"
.Linfo_string38:
	.asciz	"fv2"
.Linfo_string39:
	.asciz	"ierr"
.Linfo_string40:
	.asciz	"fv1"
.Linfo_string41:
	.asciz	"d"
.Linfo_string42:
	.asciz	"e"
.Linfo_string43:
	.asciz	"e2"
.Linfo_string44:
	.asciz	"j"
.Linfo_string45:
	.asciz	"l"
.Linfo_string46:
	.asciz	"h"
.Linfo_string47:
	.asciz	"scale"
.Linfo_string48:
	.asciz	"k"
.Linfo_string49:
	.asciz	"f"
.Linfo_string50:
	.asciz	"g"
.Linfo_string51:
	.asciz	"ii"
.Linfo_string52:
	.asciz	"c"
.Linfo_string53:
	.asciz	"m"
.Linfo_string54:
	.asciz	"mml"
.Linfo_string55:
	.asciz	"l1"
	.section	.debug_info,"",@progbits
.L.debug_info_begin0:
	.long	446                     # Length of Unit
	.short	4                       # DWARF version number
	.long	.L.debug_abbrev_begin   # Offset Into Abbrev. Section
	.byte	8                       # Address Size (in bytes)
	.byte	1                       # Abbrev [1] 0xb:0x1b7 DW_TAG_compile_unit
	.long	.Linfo_string0          # DW_AT_producer
	.short	12                      # DW_AT_language
	.long	.Linfo_string1          # DW_AT_name
	.quad	0                       # DW_AT_low_pc
	.long	.Lsection_line          # DW_AT_stmt_list
	.long	.Linfo_string2          # DW_AT_comp_dir
                                        # DW_AT_APPLE_optimized
	.byte	2                       # Abbrev [2] 0x26:0xc DW_TAG_variable
	.long	.Linfo_string3          # DW_AT_name
	.long	50                      # DW_AT_type
	.byte	1                       # DW_AT_decl_file
	.byte	58                      # DW_AT_decl_line
	.byte	3                       # DW_AT_const_value
	.byte	3                       # Abbrev [3] 0x32:0x5 DW_TAG_const_type
	.long	55                      # DW_AT_type
	.byte	4                       # Abbrev [4] 0x37:0x7 DW_TAG_base_type
	.long	.Linfo_string4          # DW_AT_name
	.byte	5                       # DW_AT_encoding
	.byte	4                       # DW_AT_byte_size
	.byte	5                       # Abbrev [5] 0x3e:0x75 DW_TAG_subprogram
	.long	.Linfo_string5          # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	16                      # DW_AT_decl_line
                                        # DW_AT_prototyped
	.long	55                      # DW_AT_type
                                        # DW_AT_external
	.quad	.Lfunc_begin0           # DW_AT_low_pc
	.quad	.Lfunc_end0             # DW_AT_high_pc
	.byte	1                       # DW_AT_frame_base
	.byte	87
                                        # DW_AT_APPLE_omit_frame_ptr
	.byte	6                       # Abbrev [6] 0x5b:0xf DW_TAG_formal_parameter
	.long	.Linfo_string20         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	16                      # DW_AT_decl_line
	.long	439                     # DW_AT_type
	.long	.Ldebug_loc0            # DW_AT_location
	.byte	6                       # Abbrev [6] 0x6a:0xf DW_TAG_formal_parameter
	.long	.Linfo_string21         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	16                      # DW_AT_decl_line
	.long	439                     # DW_AT_type
	.long	.Ldebug_loc2            # DW_AT_location
	.byte	6                       # Abbrev [6] 0x79:0xf DW_TAG_formal_parameter
	.long	.Linfo_string3          # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	16                      # DW_AT_decl_line
	.long	55                      # DW_AT_type
	.long	.Ldebug_loc4            # DW_AT_location
	.byte	7                       # Abbrev [7] 0x88:0xc DW_TAG_variable
	.long	.Linfo_string22         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	17                      # DW_AT_decl_line
	.long	55                      # DW_AT_type
	.byte	0                       # DW_AT_const_value
	.byte	8                       # Abbrev [8] 0x94:0x1e DW_TAG_lexical_block
	.quad	.Ltmp21                 # DW_AT_low_pc
	.quad	.Ltmp27                 # DW_AT_high_pc
	.byte	7                       # Abbrev [7] 0xa5:0xc DW_TAG_variable
	.long	.Linfo_string23         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	18                      # DW_AT_decl_line
	.long	55                      # DW_AT_type
	.byte	0                       # DW_AT_const_value
	.byte	0                       # End Of Children Mark
	.byte	0                       # End Of Children Mark
	.byte	9                       # Abbrev [9] 0xb3:0x92 DW_TAG_subprogram
	.long	.Linfo_string6          # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	33                      # DW_AT_decl_line
                                        # DW_AT_prototyped
                                        # DW_AT_external
	.quad	.Lfunc_begin1           # DW_AT_low_pc
	.quad	.Lfunc_end1             # DW_AT_high_pc
	.byte	1                       # DW_AT_frame_base
	.byte	87
                                        # DW_AT_APPLE_omit_frame_ptr
	.byte	6                       # Abbrev [6] 0xcc:0xf DW_TAG_formal_parameter
	.long	.Linfo_string20         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	33                      # DW_AT_decl_line
	.long	439                     # DW_AT_type
	.long	.Ldebug_loc6            # DW_AT_location
	.byte	6                       # Abbrev [6] 0xdb:0xf DW_TAG_formal_parameter
	.long	.Linfo_string21         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	33                      # DW_AT_decl_line
	.long	439                     # DW_AT_type
	.long	.Ldebug_loc8            # DW_AT_location
	.byte	6                       # Abbrev [6] 0xea:0xf DW_TAG_formal_parameter
	.long	.Linfo_string3          # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	33                      # DW_AT_decl_line
	.long	55                      # DW_AT_type
	.long	.Ldebug_loc10           # DW_AT_location
	.byte	10                      # Abbrev [10] 0xf9:0xf DW_TAG_variable
	.long	.Linfo_string24         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	34                      # DW_AT_decl_line
	.long	444                     # DW_AT_type
	.long	.Ldebug_loc12           # DW_AT_location
	.byte	10                      # Abbrev [10] 0x108:0xf DW_TAG_variable
	.long	.Linfo_string25         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	35                      # DW_AT_decl_line
	.long	444                     # DW_AT_type
	.long	.Ldebug_loc14           # DW_AT_location
	.byte	10                      # Abbrev [10] 0x117:0xf DW_TAG_variable
	.long	.Linfo_string26         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	36                      # DW_AT_decl_line
	.long	444                     # DW_AT_type
	.long	.Ldebug_loc16           # DW_AT_location
	.byte	8                       # Abbrev [8] 0x126:0x1e DW_TAG_lexical_block
	.quad	.Ltmp58                 # DW_AT_low_pc
	.quad	.Ltmp63                 # DW_AT_high_pc
	.byte	7                       # Abbrev [7] 0x137:0xc DW_TAG_variable
	.long	.Linfo_string23         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	50                      # DW_AT_decl_line
	.long	55                      # DW_AT_type
	.byte	0                       # DW_AT_const_value
	.byte	0                       # End Of Children Mark
	.byte	0                       # End Of Children Mark
	.byte	11                      # Abbrev [11] 0x145:0x72 DW_TAG_subprogram
	.long	.Linfo_string7          # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	56                      # DW_AT_decl_line
	.long	55                      # DW_AT_type
                                        # DW_AT_external
	.quad	.Lfunc_begin2           # DW_AT_low_pc
	.quad	.Lfunc_end2             # DW_AT_high_pc
	.byte	1                       # DW_AT_frame_base
	.byte	87
                                        # DW_AT_APPLE_omit_frame_ptr
	.byte	7                       # Abbrev [7] 0x162:0xc DW_TAG_variable
	.long	.Linfo_string3          # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	58                      # DW_AT_decl_line
	.long	50                      # DW_AT_type
	.byte	3                       # DW_AT_const_value
	.byte	10                      # Abbrev [10] 0x16e:0xf DW_TAG_variable
	.long	.Linfo_string20         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	59                      # DW_AT_decl_line
	.long	439                     # DW_AT_type
	.long	.Ldebug_loc18           # DW_AT_location
	.byte	10                      # Abbrev [10] 0x17d:0xf DW_TAG_variable
	.long	.Linfo_string21         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	60                      # DW_AT_decl_line
	.long	439                     # DW_AT_type
	.long	.Ldebug_loc20           # DW_AT_location
	.byte	7                       # Abbrev [7] 0x18c:0xc DW_TAG_variable
	.long	.Linfo_string22         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	78                      # DW_AT_decl_line
	.long	55                      # DW_AT_type
	.byte	0                       # DW_AT_const_value
	.byte	8                       # Abbrev [8] 0x198:0x1e DW_TAG_lexical_block
	.quad	.Ltmp90                 # DW_AT_low_pc
	.quad	.Ltmp94                 # DW_AT_high_pc
	.byte	7                       # Abbrev [7] 0x1a9:0xc DW_TAG_variable
	.long	.Linfo_string23         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	61                      # DW_AT_decl_line
	.long	55                      # DW_AT_type
	.byte	0                       # DW_AT_const_value
	.byte	0                       # End Of Children Mark
	.byte	0                       # End Of Children Mark
	.byte	12                      # Abbrev [12] 0x1b7:0x5 DW_TAG_pointer_type
	.long	55                      # DW_AT_type
	.byte	13                      # Abbrev [13] 0x1bc:0x5 DW_TAG_pointer_type
	.long	.Lsection_info+504      # DW_AT_type
	.byte	0                       # End Of Children Mark
.L.debug_info_end0:
.L.debug_info_begin1:
	.long	1363                    # Length of Unit
	.short	4                       # DWARF version number
	.long	.L.debug_abbrev_begin   # Offset Into Abbrev. Section
	.byte	8                       # Address Size (in bytes)
	.byte	1                       # Abbrev [1] 0xb:0x54c DW_TAG_compile_unit
	.long	.Linfo_string0          # DW_AT_producer
	.short	12                      # DW_AT_language
	.long	.Linfo_string8          # DW_AT_name
	.quad	0                       # DW_AT_low_pc
	.long	.Lsection_line          # DW_AT_stmt_list
	.long	.Linfo_string2          # DW_AT_comp_dir
                                        # DW_AT_APPLE_optimized
	.byte	14                      # Abbrev [14] 0x26:0xb DW_TAG_variable
	.long	.Linfo_string9          # DW_AT_name
	.long	49                      # DW_AT_type
	.byte	2                       # DW_AT_decl_file
	.byte	136                     # DW_AT_decl_line
	.byte	3                       # Abbrev [3] 0x31:0x5 DW_TAG_const_type
	.long	54                      # DW_AT_type
	.byte	4                       # Abbrev [4] 0x36:0x7 DW_TAG_base_type
	.long	.Linfo_string10         # DW_AT_name
	.byte	4                       # DW_AT_encoding
	.byte	8                       # DW_AT_byte_size
	.byte	5                       # Abbrev [5] 0x3d:0x87 DW_TAG_subprogram
	.long	.Linfo_string11         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	11                      # DW_AT_decl_line
                                        # DW_AT_prototyped
	.long	54                      # DW_AT_type
                                        # DW_AT_external
	.quad	.Lfunc_begin3           # DW_AT_low_pc
	.quad	.Lfunc_end3             # DW_AT_high_pc
	.byte	1                       # DW_AT_frame_base
	.byte	87
                                        # DW_AT_APPLE_omit_frame_ptr
	.byte	6                       # Abbrev [6] 0x5a:0xf DW_TAG_formal_parameter
	.long	.Linfo_string24         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	11                      # DW_AT_decl_line
	.long	54                      # DW_AT_type
	.long	.Ldebug_loc22           # DW_AT_location
	.byte	6                       # Abbrev [6] 0x69:0xf DW_TAG_formal_parameter
	.long	.Linfo_string27         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	11                      # DW_AT_decl_line
	.long	54                      # DW_AT_type
	.long	.Ldebug_loc24           # DW_AT_location
	.byte	10                      # Abbrev [10] 0x78:0xf DW_TAG_variable
	.long	.Linfo_string28         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	71                      # DW_AT_decl_line
	.long	54                      # DW_AT_type
	.long	.Ldebug_loc26           # DW_AT_location
	.byte	10                      # Abbrev [10] 0x87:0xf DW_TAG_variable
	.long	.Linfo_string29         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	72                      # DW_AT_decl_line
	.long	54                      # DW_AT_type
	.long	.Ldebug_loc29           # DW_AT_location
	.byte	10                      # Abbrev [10] 0x96:0xf DW_TAG_variable
	.long	.Linfo_string30         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	74                      # DW_AT_decl_line
	.long	54                      # DW_AT_type
	.long	.Ldebug_loc33           # DW_AT_location
	.byte	10                      # Abbrev [10] 0xa5:0xf DW_TAG_variable
	.long	.Linfo_string31         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	73                      # DW_AT_decl_line
	.long	54                      # DW_AT_type
	.long	.Ldebug_loc36           # DW_AT_location
	.byte	10                      # Abbrev [10] 0xb4:0xf DW_TAG_variable
	.long	.Linfo_string32         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	75                      # DW_AT_decl_line
	.long	54                      # DW_AT_type
	.long	.Ldebug_loc38           # DW_AT_location
	.byte	0                       # End Of Children Mark
	.byte	11                      # Abbrev [11] 0xc4:0x32 DW_TAG_subprogram
	.long	.Linfo_string12         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	103                     # DW_AT_decl_line
	.long	54                      # DW_AT_type
                                        # DW_AT_external
	.quad	.Lfunc_begin6           # DW_AT_low_pc
	.quad	.Lfunc_end6             # DW_AT_high_pc
	.byte	1                       # DW_AT_frame_base
	.byte	87
                                        # DW_AT_APPLE_omit_frame_ptr
	.byte	15                      # Abbrev [15] 0xe1:0x14 DW_TAG_variable
	.long	.Linfo_string9          # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	136                     # DW_AT_decl_line
	.long	49                      # DW_AT_type
	.byte	8                       # DW_AT_const_value
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	176
	.byte	60
	.byte	0                       # End Of Children Mark
	.byte	5                       # Abbrev [5] 0xf6:0x47 DW_TAG_subprogram
	.long	.Linfo_string13         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	143                     # DW_AT_decl_line
                                        # DW_AT_prototyped
	.long	54                      # DW_AT_type
                                        # DW_AT_external
	.quad	.Lfunc_begin4           # DW_AT_low_pc
	.quad	.Lfunc_end4             # DW_AT_high_pc
	.byte	1                       # DW_AT_frame_base
	.byte	87
                                        # DW_AT_APPLE_omit_frame_ptr
	.byte	6                       # Abbrev [6] 0x113:0xf DW_TAG_formal_parameter
	.long	.Linfo_string33         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	143                     # DW_AT_decl_line
	.long	54                      # DW_AT_type
	.long	.Ldebug_loc43           # DW_AT_location
	.byte	6                       # Abbrev [6] 0x122:0xf DW_TAG_formal_parameter
	.long	.Linfo_string34         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	143                     # DW_AT_decl_line
	.long	54                      # DW_AT_type
	.long	.Ldebug_loc40           # DW_AT_location
	.byte	16                      # Abbrev [16] 0x131:0xb DW_TAG_variable
	.long	.Linfo_string9          # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	170                     # DW_AT_decl_line
	.long	54                      # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	5                       # Abbrev [5] 0x13d:0x47 DW_TAG_subprogram
	.long	.Linfo_string14         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	184                     # DW_AT_decl_line
                                        # DW_AT_prototyped
	.long	54                      # DW_AT_type
                                        # DW_AT_external
	.quad	.Lfunc_begin5           # DW_AT_low_pc
	.quad	.Lfunc_end5             # DW_AT_high_pc
	.byte	1                       # DW_AT_frame_base
	.byte	87
                                        # DW_AT_APPLE_omit_frame_ptr
	.byte	6                       # Abbrev [6] 0x15a:0xf DW_TAG_formal_parameter
	.long	.Linfo_string33         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	184                     # DW_AT_decl_line
	.long	54                      # DW_AT_type
	.long	.Ldebug_loc49           # DW_AT_location
	.byte	6                       # Abbrev [6] 0x169:0xf DW_TAG_formal_parameter
	.long	.Linfo_string34         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	184                     # DW_AT_decl_line
	.long	54                      # DW_AT_type
	.long	.Ldebug_loc46           # DW_AT_location
	.byte	16                      # Abbrev [16] 0x178:0xb DW_TAG_variable
	.long	.Linfo_string9          # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	211                     # DW_AT_decl_line
	.long	54                      # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	5                       # Abbrev [5] 0x184:0x38 DW_TAG_subprogram
	.long	.Linfo_string15         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	225                     # DW_AT_decl_line
                                        # DW_AT_prototyped
	.long	54                      # DW_AT_type
                                        # DW_AT_external
	.quad	.Lfunc_begin7           # DW_AT_low_pc
	.quad	.Lfunc_end7             # DW_AT_high_pc
	.byte	1                       # DW_AT_frame_base
	.byte	87
                                        # DW_AT_APPLE_omit_frame_ptr
	.byte	6                       # Abbrev [6] 0x1a1:0xf DW_TAG_formal_parameter
	.long	.Linfo_string33         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	225                     # DW_AT_decl_line
	.long	54                      # DW_AT_type
	.long	.Ldebug_loc52           # DW_AT_location
	.byte	16                      # Abbrev [16] 0x1b0:0xb DW_TAG_variable
	.long	.Linfo_string9          # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	252                     # DW_AT_decl_line
	.long	54                      # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	17                      # Abbrev [17] 0x1bc:0x9b DW_TAG_subprogram
	.long	.Linfo_string16         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	267                     # DW_AT_decl_line
                                        # DW_AT_prototyped
	.long	.Lsection_info+55       # DW_AT_type
                                        # DW_AT_external
	.quad	.Lfunc_begin8           # DW_AT_low_pc
	.quad	.Lfunc_end8             # DW_AT_high_pc
	.byte	1                       # DW_AT_frame_base
	.byte	87
                                        # DW_AT_APPLE_omit_frame_ptr
	.byte	18                      # Abbrev [18] 0x1da:0x10 DW_TAG_formal_parameter
	.long	.Linfo_string35         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	267                     # DW_AT_decl_line
	.long	.Lsection_info+55       # DW_AT_type
	.long	.Ldebug_loc55           # DW_AT_location
	.byte	18                      # Abbrev [18] 0x1ea:0x10 DW_TAG_formal_parameter
	.long	.Linfo_string24         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	267                     # DW_AT_decl_line
	.long	.Lsection_info+444      # DW_AT_type
	.long	.Ldebug_loc57           # DW_AT_location
	.byte	18                      # Abbrev [18] 0x1fa:0x10 DW_TAG_formal_parameter
	.long	.Linfo_string25         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	267                     # DW_AT_decl_line
	.long	.Lsection_info+444      # DW_AT_type
	.long	.Ldebug_loc59           # DW_AT_location
	.byte	19                      # Abbrev [19] 0x20a:0x10 DW_TAG_formal_parameter
	.long	.Linfo_string36         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	267                     # DW_AT_decl_line
	.long	1359                    # DW_AT_type
	.long	.Ldebug_loc61           # DW_AT_location
	.byte	18                      # Abbrev [18] 0x21a:0x10 DW_TAG_formal_parameter
	.long	.Linfo_string26         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	267                     # DW_AT_decl_line
	.long	.Lsection_info+444      # DW_AT_type
	.long	.Ldebug_loc63           # DW_AT_location
	.byte	20                      # Abbrev [20] 0x22a:0x10 DW_TAG_variable
	.long	.Linfo_string38         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	333                     # DW_AT_decl_line
	.long	.Lsection_info+444      # DW_AT_type
	.long	.Ldebug_loc65           # DW_AT_location
	.byte	20                      # Abbrev [20] 0x23a:0x10 DW_TAG_variable
	.long	.Linfo_string39         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	334                     # DW_AT_decl_line
	.long	.Lsection_info+55       # DW_AT_type
	.long	.Ldebug_loc67           # DW_AT_location
	.byte	21                      # Abbrev [21] 0x24a:0xc DW_TAG_variable
	.long	.Linfo_string40         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	332                     # DW_AT_decl_line
	.long	.Lsection_info+444      # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	17                      # Abbrev [17] 0x257:0x158 DW_TAG_subprogram
	.long	.Linfo_string17         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	364                     # DW_AT_decl_line
                                        # DW_AT_prototyped
	.long	.Lsection_info+55       # DW_AT_type
                                        # DW_AT_external
	.quad	.Lfunc_begin10          # DW_AT_low_pc
	.quad	.Lfunc_end10            # DW_AT_high_pc
	.byte	1                       # DW_AT_frame_base
	.byte	87
                                        # DW_AT_APPLE_omit_frame_ptr
	.byte	18                      # Abbrev [18] 0x275:0x10 DW_TAG_formal_parameter
	.long	.Linfo_string35         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	364                     # DW_AT_decl_line
	.long	.Lsection_info+55       # DW_AT_type
	.long	.Ldebug_loc103          # DW_AT_location
	.byte	18                      # Abbrev [18] 0x285:0x10 DW_TAG_formal_parameter
	.long	.Linfo_string41         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	364                     # DW_AT_decl_line
	.long	.Lsection_info+444      # DW_AT_type
	.long	.Ldebug_loc105          # DW_AT_location
	.byte	18                      # Abbrev [18] 0x295:0x10 DW_TAG_formal_parameter
	.long	.Linfo_string43         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	364                     # DW_AT_decl_line
	.long	.Lsection_info+444      # DW_AT_type
	.long	.Ldebug_loc107          # DW_AT_location
	.byte	20                      # Abbrev [20] 0x2a5:0x10 DW_TAG_variable
	.long	.Linfo_string39         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	438                     # DW_AT_decl_line
	.long	.Lsection_info+55       # DW_AT_type
	.long	.Ldebug_loc109          # DW_AT_location
	.byte	22                      # Abbrev [22] 0x2b5:0x10 DW_TAG_variable
	.long	.Linfo_string49         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	434                     # DW_AT_decl_line
	.long	54                      # DW_AT_type
	.long	.Ldebug_loc112          # DW_AT_location
	.byte	22                      # Abbrev [22] 0x2c5:0x10 DW_TAG_variable
	.long	.Linfo_string30         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	448                     # DW_AT_decl_line
	.long	54                      # DW_AT_type
	.long	.Ldebug_loc115          # DW_AT_location
	.byte	20                      # Abbrev [20] 0x2d5:0x10 DW_TAG_variable
	.long	.Linfo_string45         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	441                     # DW_AT_decl_line
	.long	.Lsection_info+55       # DW_AT_type
	.long	.Ldebug_loc118          # DW_AT_location
	.byte	20                      # Abbrev [20] 0x2e5:0x10 DW_TAG_variable
	.long	.Linfo_string44         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	440                     # DW_AT_decl_line
	.long	.Lsection_info+55       # DW_AT_type
	.long	.Ldebug_loc121          # DW_AT_location
	.byte	22                      # Abbrev [22] 0x2f5:0x10 DW_TAG_variable
	.long	.Linfo_string46         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	436                     # DW_AT_decl_line
	.long	54                      # DW_AT_type
	.long	.Ldebug_loc124          # DW_AT_location
	.byte	22                      # Abbrev [22] 0x305:0x10 DW_TAG_variable
	.long	.Linfo_string27         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	432                     # DW_AT_decl_line
	.long	54                      # DW_AT_type
	.long	.Ldebug_loc129          # DW_AT_location
	.byte	22                      # Abbrev [22] 0x315:0x10 DW_TAG_variable
	.long	.Linfo_string52         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	433                     # DW_AT_decl_line
	.long	54                      # DW_AT_type
	.long	.Ldebug_loc131          # DW_AT_location
	.byte	20                      # Abbrev [20] 0x325:0x10 DW_TAG_variable
	.long	.Linfo_string53         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	443                     # DW_AT_decl_line
	.long	.Lsection_info+55       # DW_AT_type
	.long	.Ldebug_loc133          # DW_AT_location
	.byte	22                      # Abbrev [22] 0x335:0x10 DW_TAG_variable
	.long	.Linfo_string31         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	447                     # DW_AT_decl_line
	.long	54                      # DW_AT_type
	.long	.Ldebug_loc136          # DW_AT_location
	.byte	22                      # Abbrev [22] 0x345:0x10 DW_TAG_variable
	.long	.Linfo_string50         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	435                     # DW_AT_decl_line
	.long	54                      # DW_AT_type
	.long	.Ldebug_loc140          # DW_AT_location
	.byte	22                      # Abbrev [22] 0x355:0x10 DW_TAG_variable
	.long	.Linfo_string28         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	445                     # DW_AT_decl_line
	.long	54                      # DW_AT_type
	.long	.Ldebug_loc146          # DW_AT_location
	.byte	22                      # Abbrev [22] 0x365:0x10 DW_TAG_variable
	.long	.Linfo_string29         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	446                     # DW_AT_decl_line
	.long	54                      # DW_AT_type
	.long	.Ldebug_loc150          # DW_AT_location
	.byte	20                      # Abbrev [20] 0x375:0x10 DW_TAG_variable
	.long	.Linfo_string54         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	444                     # DW_AT_decl_line
	.long	.Lsection_info+55       # DW_AT_type
	.long	.Ldebug_loc153          # DW_AT_location
	.byte	23                      # Abbrev [23] 0x385:0xd DW_TAG_variable
	.long	.Linfo_string51         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	439                     # DW_AT_decl_line
	.long	.Lsection_info+55       # DW_AT_type
	.byte	1                       # DW_AT_const_value
	.byte	20                      # Abbrev [20] 0x392:0x10 DW_TAG_variable
	.long	.Linfo_string23         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	437                     # DW_AT_decl_line
	.long	.Lsection_info+55       # DW_AT_type
	.long	.Ldebug_loc155          # DW_AT_location
	.byte	21                      # Abbrev [21] 0x3a2:0xc DW_TAG_variable
	.long	.Linfo_string55         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	442                     # DW_AT_decl_line
	.long	.Lsection_info+55       # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	24                      # Abbrev [24] 0x3af:0xb0 DW_TAG_subprogram
	.long	.Linfo_string18         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	590                     # DW_AT_decl_line
                                        # DW_AT_prototyped
                                        # DW_AT_external
	.quad	.Lfunc_begin11          # DW_AT_low_pc
	.quad	.Lfunc_end11            # DW_AT_high_pc
	.byte	1                       # DW_AT_frame_base
	.byte	87
                                        # DW_AT_APPLE_omit_frame_ptr
	.byte	18                      # Abbrev [18] 0x3c9:0x10 DW_TAG_formal_parameter
	.long	.Linfo_string35         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	590                     # DW_AT_decl_line
	.long	.Lsection_info+55       # DW_AT_type
	.long	.Ldebug_loc159          # DW_AT_location
	.byte	18                      # Abbrev [18] 0x3d9:0x10 DW_TAG_formal_parameter
	.long	.Linfo_string24         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	590                     # DW_AT_decl_line
	.long	.Lsection_info+444      # DW_AT_type
	.long	.Ldebug_loc161          # DW_AT_location
	.byte	18                      # Abbrev [18] 0x3e9:0x10 DW_TAG_formal_parameter
	.long	.Linfo_string42         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	590                     # DW_AT_decl_line
	.long	.Lsection_info+444      # DW_AT_type
	.long	.Ldebug_loc163          # DW_AT_location
	.byte	18                      # Abbrev [18] 0x3f9:0x10 DW_TAG_formal_parameter
	.long	.Linfo_string53         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	590                     # DW_AT_decl_line
	.long	.Lsection_info+55       # DW_AT_type
	.long	.Ldebug_loc165          # DW_AT_location
	.byte	18                      # Abbrev [18] 0x409:0x10 DW_TAG_formal_parameter
	.long	.Linfo_string26         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	590                     # DW_AT_decl_line
	.long	.Lsection_info+444      # DW_AT_type
	.long	.Ldebug_loc167          # DW_AT_location
	.byte	22                      # Abbrev [22] 0x419:0x10 DW_TAG_variable
	.long	.Linfo_string31         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	657                     # DW_AT_decl_line
	.long	54                      # DW_AT_type
	.long	.Ldebug_loc169          # DW_AT_location
	.byte	23                      # Abbrev [23] 0x429:0xd DW_TAG_variable
	.long	.Linfo_string48         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	655                     # DW_AT_decl_line
	.long	.Lsection_info+55       # DW_AT_type
	.byte	0                       # DW_AT_const_value
	.byte	20                      # Abbrev [20] 0x436:0x10 DW_TAG_variable
	.long	.Linfo_string23         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	653                     # DW_AT_decl_line
	.long	.Lsection_info+55       # DW_AT_type
	.long	.Ldebug_loc172          # DW_AT_location
	.byte	21                      # Abbrev [21] 0x446:0xc DW_TAG_variable
	.long	.Linfo_string44         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	654                     # DW_AT_decl_line
	.long	.Lsection_info+55       # DW_AT_type
	.byte	21                      # Abbrev [21] 0x452:0xc DW_TAG_variable
	.long	.Linfo_string45         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	656                     # DW_AT_decl_line
	.long	.Lsection_info+55       # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	24                      # Abbrev [24] 0x45f:0xf0 DW_TAG_subprogram
	.long	.Linfo_string19         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	697                     # DW_AT_decl_line
                                        # DW_AT_prototyped
                                        # DW_AT_external
	.quad	.Lfunc_begin9           # DW_AT_low_pc
	.quad	.Lfunc_end9             # DW_AT_high_pc
	.byte	1                       # DW_AT_frame_base
	.byte	87
                                        # DW_AT_APPLE_omit_frame_ptr
	.byte	18                      # Abbrev [18] 0x479:0x10 DW_TAG_formal_parameter
	.long	.Linfo_string35         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	697                     # DW_AT_decl_line
	.long	.Lsection_info+55       # DW_AT_type
	.long	.Ldebug_loc69           # DW_AT_location
	.byte	18                      # Abbrev [18] 0x489:0x10 DW_TAG_formal_parameter
	.long	.Linfo_string24         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	697                     # DW_AT_decl_line
	.long	.Lsection_info+444      # DW_AT_type
	.long	.Ldebug_loc71           # DW_AT_location
	.byte	18                      # Abbrev [18] 0x499:0x10 DW_TAG_formal_parameter
	.long	.Linfo_string41         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	697                     # DW_AT_decl_line
	.long	.Lsection_info+444      # DW_AT_type
	.long	.Ldebug_loc73           # DW_AT_location
	.byte	18                      # Abbrev [18] 0x4a9:0x10 DW_TAG_formal_parameter
	.long	.Linfo_string42         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	697                     # DW_AT_decl_line
	.long	.Lsection_info+444      # DW_AT_type
	.long	.Ldebug_loc75           # DW_AT_location
	.byte	18                      # Abbrev [18] 0x4b9:0x10 DW_TAG_formal_parameter
	.long	.Linfo_string43         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	697                     # DW_AT_decl_line
	.long	.Lsection_info+444      # DW_AT_type
	.long	.Ldebug_loc77           # DW_AT_location
	.byte	20                      # Abbrev [20] 0x4c9:0x10 DW_TAG_variable
	.long	.Linfo_string44         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	771                     # DW_AT_decl_line
	.long	.Lsection_info+55       # DW_AT_type
	.long	.Ldebug_loc79           # DW_AT_location
	.byte	20                      # Abbrev [20] 0x4d9:0x10 DW_TAG_variable
	.long	.Linfo_string45         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	773                     # DW_AT_decl_line
	.long	.Lsection_info+55       # DW_AT_type
	.long	.Ldebug_loc82           # DW_AT_location
	.byte	22                      # Abbrev [22] 0x4e9:0x10 DW_TAG_variable
	.long	.Linfo_string46         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	768                     # DW_AT_decl_line
	.long	54                      # DW_AT_type
	.long	.Ldebug_loc84           # DW_AT_location
	.byte	22                      # Abbrev [22] 0x4f9:0x10 DW_TAG_variable
	.long	.Linfo_string47         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	774                     # DW_AT_decl_line
	.long	54                      # DW_AT_type
	.long	.Ldebug_loc89           # DW_AT_location
	.byte	23                      # Abbrev [23] 0x509:0xd DW_TAG_variable
	.long	.Linfo_string48         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	772                     # DW_AT_decl_line
	.long	.Lsection_info+55       # DW_AT_type
	.byte	0                       # DW_AT_const_value
	.byte	22                      # Abbrev [22] 0x516:0x10 DW_TAG_variable
	.long	.Linfo_string49         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	766                     # DW_AT_decl_line
	.long	54                      # DW_AT_type
	.long	.Ldebug_loc92           # DW_AT_location
	.byte	22                      # Abbrev [22] 0x526:0x10 DW_TAG_variable
	.long	.Linfo_string50         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	767                     # DW_AT_decl_line
	.long	54                      # DW_AT_type
	.long	.Ldebug_loc98           # DW_AT_location
	.byte	21                      # Abbrev [21] 0x536:0xc DW_TAG_variable
	.long	.Linfo_string23         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	769                     # DW_AT_decl_line
	.long	.Lsection_info+55       # DW_AT_type
	.byte	21                      # Abbrev [21] 0x542:0xc DW_TAG_variable
	.long	.Linfo_string51         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	770                     # DW_AT_decl_line
	.long	.Lsection_info+55       # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	4                       # Abbrev [4] 0x54f:0x7 DW_TAG_base_type
	.long	.Linfo_string37         # DW_AT_name
	.byte	2                       # DW_AT_encoding
	.byte	1                       # DW_AT_byte_size
	.byte	0                       # End Of Children Mark
.L.debug_info_end1:
	.section	.debug_abbrev,"",@progbits
.L.debug_abbrev_begin:
	.byte	1                       # Abbreviation Code
	.byte	17                      # DW_TAG_compile_unit
	.byte	1                       # DW_CHILDREN_yes
	.byte	37                      # DW_AT_producer
	.byte	14                      # DW_FORM_strp
	.byte	19                      # DW_AT_language
	.byte	5                       # DW_FORM_data2
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	17                      # DW_AT_low_pc
	.byte	1                       # DW_FORM_addr
	.byte	16                      # DW_AT_stmt_list
	.byte	23                      # DW_FORM_sec_offset
	.byte	27                      # DW_AT_comp_dir
	.byte	14                      # DW_FORM_strp
	.ascii	"\341\177"              # DW_AT_APPLE_optimized
	.byte	25                      # DW_FORM_flag_present
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	2                       # Abbreviation Code
	.byte	52                      # DW_TAG_variable
	.byte	0                       # DW_CHILDREN_no
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	73                      # DW_AT_type
	.byte	19                      # DW_FORM_ref4
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	11                      # DW_FORM_data1
	.byte	28                      # DW_AT_const_value
	.byte	13                      # DW_FORM_sdata
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	3                       # Abbreviation Code
	.byte	38                      # DW_TAG_const_type
	.byte	0                       # DW_CHILDREN_no
	.byte	73                      # DW_AT_type
	.byte	19                      # DW_FORM_ref4
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	4                       # Abbreviation Code
	.byte	36                      # DW_TAG_base_type
	.byte	0                       # DW_CHILDREN_no
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	62                      # DW_AT_encoding
	.byte	11                      # DW_FORM_data1
	.byte	11                      # DW_AT_byte_size
	.byte	11                      # DW_FORM_data1
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	5                       # Abbreviation Code
	.byte	46                      # DW_TAG_subprogram
	.byte	1                       # DW_CHILDREN_yes
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	11                      # DW_FORM_data1
	.byte	39                      # DW_AT_prototyped
	.byte	25                      # DW_FORM_flag_present
	.byte	73                      # DW_AT_type
	.byte	19                      # DW_FORM_ref4
	.byte	63                      # DW_AT_external
	.byte	25                      # DW_FORM_flag_present
	.byte	17                      # DW_AT_low_pc
	.byte	1                       # DW_FORM_addr
	.byte	18                      # DW_AT_high_pc
	.byte	1                       # DW_FORM_addr
	.byte	64                      # DW_AT_frame_base
	.byte	10                      # DW_FORM_block1
	.ascii	"\347\177"              # DW_AT_APPLE_omit_frame_ptr
	.byte	25                      # DW_FORM_flag_present
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	6                       # Abbreviation Code
	.byte	5                       # DW_TAG_formal_parameter
	.byte	0                       # DW_CHILDREN_no
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	11                      # DW_FORM_data1
	.byte	73                      # DW_AT_type
	.byte	19                      # DW_FORM_ref4
	.byte	2                       # DW_AT_location
	.byte	23                      # DW_FORM_sec_offset
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	7                       # Abbreviation Code
	.byte	52                      # DW_TAG_variable
	.byte	0                       # DW_CHILDREN_no
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	11                      # DW_FORM_data1
	.byte	73                      # DW_AT_type
	.byte	19                      # DW_FORM_ref4
	.byte	28                      # DW_AT_const_value
	.byte	13                      # DW_FORM_sdata
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	8                       # Abbreviation Code
	.byte	11                      # DW_TAG_lexical_block
	.byte	1                       # DW_CHILDREN_yes
	.byte	17                      # DW_AT_low_pc
	.byte	1                       # DW_FORM_addr
	.byte	18                      # DW_AT_high_pc
	.byte	1                       # DW_FORM_addr
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	9                       # Abbreviation Code
	.byte	46                      # DW_TAG_subprogram
	.byte	1                       # DW_CHILDREN_yes
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	11                      # DW_FORM_data1
	.byte	39                      # DW_AT_prototyped
	.byte	25                      # DW_FORM_flag_present
	.byte	63                      # DW_AT_external
	.byte	25                      # DW_FORM_flag_present
	.byte	17                      # DW_AT_low_pc
	.byte	1                       # DW_FORM_addr
	.byte	18                      # DW_AT_high_pc
	.byte	1                       # DW_FORM_addr
	.byte	64                      # DW_AT_frame_base
	.byte	10                      # DW_FORM_block1
	.ascii	"\347\177"              # DW_AT_APPLE_omit_frame_ptr
	.byte	25                      # DW_FORM_flag_present
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	10                      # Abbreviation Code
	.byte	52                      # DW_TAG_variable
	.byte	0                       # DW_CHILDREN_no
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	11                      # DW_FORM_data1
	.byte	73                      # DW_AT_type
	.byte	19                      # DW_FORM_ref4
	.byte	2                       # DW_AT_location
	.byte	23                      # DW_FORM_sec_offset
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	11                      # Abbreviation Code
	.byte	46                      # DW_TAG_subprogram
	.byte	1                       # DW_CHILDREN_yes
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	11                      # DW_FORM_data1
	.byte	73                      # DW_AT_type
	.byte	19                      # DW_FORM_ref4
	.byte	63                      # DW_AT_external
	.byte	25                      # DW_FORM_flag_present
	.byte	17                      # DW_AT_low_pc
	.byte	1                       # DW_FORM_addr
	.byte	18                      # DW_AT_high_pc
	.byte	1                       # DW_FORM_addr
	.byte	64                      # DW_AT_frame_base
	.byte	10                      # DW_FORM_block1
	.ascii	"\347\177"              # DW_AT_APPLE_omit_frame_ptr
	.byte	25                      # DW_FORM_flag_present
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	12                      # Abbreviation Code
	.byte	15                      # DW_TAG_pointer_type
	.byte	0                       # DW_CHILDREN_no
	.byte	73                      # DW_AT_type
	.byte	19                      # DW_FORM_ref4
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	13                      # Abbreviation Code
	.byte	15                      # DW_TAG_pointer_type
	.byte	0                       # DW_CHILDREN_no
	.byte	73                      # DW_AT_type
	.byte	16                      # DW_FORM_ref_addr
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	14                      # Abbreviation Code
	.byte	52                      # DW_TAG_variable
	.byte	0                       # DW_CHILDREN_no
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	73                      # DW_AT_type
	.byte	19                      # DW_FORM_ref4
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	11                      # DW_FORM_data1
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	15                      # Abbreviation Code
	.byte	52                      # DW_TAG_variable
	.byte	0                       # DW_CHILDREN_no
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	11                      # DW_FORM_data1
	.byte	73                      # DW_AT_type
	.byte	19                      # DW_FORM_ref4
	.byte	28                      # DW_AT_const_value
	.byte	10                      # DW_FORM_block1
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	16                      # Abbreviation Code
	.byte	52                      # DW_TAG_variable
	.byte	0                       # DW_CHILDREN_no
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	11                      # DW_FORM_data1
	.byte	73                      # DW_AT_type
	.byte	19                      # DW_FORM_ref4
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	17                      # Abbreviation Code
	.byte	46                      # DW_TAG_subprogram
	.byte	1                       # DW_CHILDREN_yes
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	5                       # DW_FORM_data2
	.byte	39                      # DW_AT_prototyped
	.byte	25                      # DW_FORM_flag_present
	.byte	73                      # DW_AT_type
	.byte	16                      # DW_FORM_ref_addr
	.byte	63                      # DW_AT_external
	.byte	25                      # DW_FORM_flag_present
	.byte	17                      # DW_AT_low_pc
	.byte	1                       # DW_FORM_addr
	.byte	18                      # DW_AT_high_pc
	.byte	1                       # DW_FORM_addr
	.byte	64                      # DW_AT_frame_base
	.byte	10                      # DW_FORM_block1
	.ascii	"\347\177"              # DW_AT_APPLE_omit_frame_ptr
	.byte	25                      # DW_FORM_flag_present
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	18                      # Abbreviation Code
	.byte	5                       # DW_TAG_formal_parameter
	.byte	0                       # DW_CHILDREN_no
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	5                       # DW_FORM_data2
	.byte	73                      # DW_AT_type
	.byte	16                      # DW_FORM_ref_addr
	.byte	2                       # DW_AT_location
	.byte	23                      # DW_FORM_sec_offset
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	19                      # Abbreviation Code
	.byte	5                       # DW_TAG_formal_parameter
	.byte	0                       # DW_CHILDREN_no
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	5                       # DW_FORM_data2
	.byte	73                      # DW_AT_type
	.byte	19                      # DW_FORM_ref4
	.byte	2                       # DW_AT_location
	.byte	23                      # DW_FORM_sec_offset
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	20                      # Abbreviation Code
	.byte	52                      # DW_TAG_variable
	.byte	0                       # DW_CHILDREN_no
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	5                       # DW_FORM_data2
	.byte	73                      # DW_AT_type
	.byte	16                      # DW_FORM_ref_addr
	.byte	2                       # DW_AT_location
	.byte	23                      # DW_FORM_sec_offset
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	21                      # Abbreviation Code
	.byte	52                      # DW_TAG_variable
	.byte	0                       # DW_CHILDREN_no
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	5                       # DW_FORM_data2
	.byte	73                      # DW_AT_type
	.byte	16                      # DW_FORM_ref_addr
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	22                      # Abbreviation Code
	.byte	52                      # DW_TAG_variable
	.byte	0                       # DW_CHILDREN_no
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	5                       # DW_FORM_data2
	.byte	73                      # DW_AT_type
	.byte	19                      # DW_FORM_ref4
	.byte	2                       # DW_AT_location
	.byte	23                      # DW_FORM_sec_offset
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	23                      # Abbreviation Code
	.byte	52                      # DW_TAG_variable
	.byte	0                       # DW_CHILDREN_no
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	5                       # DW_FORM_data2
	.byte	73                      # DW_AT_type
	.byte	16                      # DW_FORM_ref_addr
	.byte	28                      # DW_AT_const_value
	.byte	13                      # DW_FORM_sdata
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	24                      # Abbreviation Code
	.byte	46                      # DW_TAG_subprogram
	.byte	1                       # DW_CHILDREN_yes
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	5                       # DW_FORM_data2
	.byte	39                      # DW_AT_prototyped
	.byte	25                      # DW_FORM_flag_present
	.byte	63                      # DW_AT_external
	.byte	25                      # DW_FORM_flag_present
	.byte	17                      # DW_AT_low_pc
	.byte	1                       # DW_FORM_addr
	.byte	18                      # DW_AT_high_pc
	.byte	1                       # DW_FORM_addr
	.byte	64                      # DW_AT_frame_base
	.byte	10                      # DW_FORM_block1
	.ascii	"\347\177"              # DW_AT_APPLE_omit_frame_ptr
	.byte	25                      # DW_FORM_flag_present
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	0                       # EOM(3)
.L.debug_abbrev_end:
	.section	.debug_loc,"",@progbits
.Ldebug_loc0:
	.quad	.Lfunc_begin0
	.quad	.Ltmp22
.Lset0 = .Ltmp591-.Ltmp590              # Loc expr size
	.short	.Lset0
.Ltmp590:
	.byte	119                     # DW_OP_breg7
	.ascii	"\330\013"
.Ltmp591:
	.quad	0
	.quad	0
.Ldebug_loc2:
	.quad	.Lfunc_begin0
	.quad	.Ltmp22
.Lset1 = .Ltmp593-.Ltmp592              # Loc expr size
	.short	.Lset1
.Ltmp592:
	.byte	119                     # DW_OP_breg7
	.ascii	"\320\013"
.Ltmp593:
	.quad	0
	.quad	0
.Ldebug_loc4:
	.quad	.Lfunc_begin0
	.quad	.Ltmp22
.Lset2 = .Ltmp595-.Ltmp594              # Loc expr size
	.short	.Lset2
.Ltmp594:
	.byte	119                     # DW_OP_breg7
	.ascii	"\264\f"
.Ltmp595:
	.quad	0
	.quad	0
.Ldebug_loc6:
	.quad	.Lfunc_begin1
	.quad	.Ltmp60
.Lset3 = .Ltmp597-.Ltmp596              # Loc expr size
	.short	.Lset3
.Ltmp596:
	.byte	119                     # DW_OP_breg7
	.ascii	"\240\016"
.Ltmp597:
	.quad	0
	.quad	0
.Ldebug_loc8:
	.quad	.Lfunc_begin1
	.quad	.Ltmp60
.Lset4 = .Ltmp599-.Ltmp598              # Loc expr size
	.short	.Lset4
.Ltmp598:
	.byte	119                     # DW_OP_breg7
	.ascii	"\220\016"
.Ltmp599:
	.quad	0
	.quad	0
.Ldebug_loc10:
	.quad	.Lfunc_begin1
	.quad	.Ltmp51
.Lset5 = .Ltmp601-.Ltmp600              # Loc expr size
	.short	.Lset5
.Ltmp600:
	.byte	119                     # DW_OP_breg7
	.ascii	"\214\017"
.Ltmp601:
	.quad	0
	.quad	0
.Ldebug_loc12:
	.quad	.Ltmp52
	.quad	.Ltmp53
.Lset6 = .Ltmp603-.Ltmp602              # Loc expr size
	.short	.Lset6
.Ltmp602:
	.byte	119                     # DW_OP_breg7
	.ascii	"\270\013"
.Ltmp603:
	.quad	0
	.quad	0
.Ldebug_loc14:
	.quad	.Ltmp54
	.quad	.Ltmp55
.Lset7 = .Ltmp605-.Ltmp604              # Loc expr size
	.short	.Lset7
.Ltmp604:
	.byte	119                     # DW_OP_breg7
	.ascii	"\200\n"
.Ltmp605:
	.quad	0
	.quad	0
.Ldebug_loc16:
	.quad	.Ltmp56
	.quad	.Ltmp57
.Lset8 = .Ltmp607-.Ltmp606              # Loc expr size
	.short	.Lset8
.Ltmp606:
	.byte	119                     # DW_OP_breg7
	.ascii	"\310\005"
.Ltmp607:
	.quad	0
	.quad	0
.Ldebug_loc18:
	.quad	.Ltmp88
	.quad	.Ltmp89
.Lset9 = .Ltmp609-.Ltmp608              # Loc expr size
	.short	.Lset9
.Ltmp608:
	.byte	119                     # DW_OP_breg7
	.ascii	"\300\b"
.Ltmp609:
	.quad	0
	.quad	0
.Ldebug_loc20:
	.quad	.Ltmp90
	.quad	.Ltmp91
.Lset10 = .Ltmp611-.Ltmp610             # Loc expr size
	.short	.Lset10
.Ltmp610:
	.byte	119                     # DW_OP_breg7
	.ascii	"\250\007"
.Ltmp611:
	.quad	0
	.quad	0
.Ldebug_loc22:
	.quad	.Lfunc_begin3
	.quad	.Ltmp122
.Lset11 = .Ltmp613-.Ltmp612             # Loc expr size
	.short	.Lset11
.Ltmp612:
	.byte	119                     # DW_OP_breg7
	.ascii	"\340\n"
.Ltmp613:
	.quad	0
	.quad	0
.Ldebug_loc24:
	.quad	.Lfunc_begin3
	.quad	.Ltmp120
.Lset12 = .Ltmp615-.Ltmp614             # Loc expr size
	.short	.Lset12
.Ltmp614:
	.byte	119                     # DW_OP_breg7
	.ascii	"\260\n"
.Ltmp615:
	.quad	0
	.quad	0
.Ldebug_loc26:
	.quad	.Ltmp121
	.quad	.Ltmp122
.Lset13 = .Ltmp617-.Ltmp616             # Loc expr size
	.short	.Lset13
.Ltmp616:
	.byte	119                     # DW_OP_breg7
	.ascii	"\240\t"
.Ltmp617:
	.quad	.Ltmp130
	.quad	.Ltmp133
.Lset14 = .Ltmp619-.Ltmp618             # Loc expr size
	.short	.Lset14
.Ltmp618:
	.byte	119                     # DW_OP_breg7
	.ascii	"\350\001"
.Ltmp619:
	.quad	0
	.quad	0
.Ldebug_loc29:
	.quad	.Ltmp124
	.quad	.Ltmp125
.Lset15 = .Ltmp621-.Ltmp620             # Loc expr size
	.short	.Lset15
.Ltmp620:
	.byte	119                     # DW_OP_breg7
	.ascii	"\300\005"
.Ltmp621:
	.quad	.Ltmp125
	.quad	.Ltmp127
.Lset16 = .Ltmp623-.Ltmp622             # Loc expr size
	.short	.Lset16
.Ltmp622:
	.byte	119                     # DW_OP_breg7
	.ascii	"\270\005"
.Ltmp623:
	.quad	.Ltmp131
	.quad	.Ltmp133
.Lset17 = .Ltmp625-.Ltmp624             # Loc expr size
	.short	.Lset17
.Ltmp624:
	.byte	119                     # DW_OP_breg7
	.ascii	"\320\001"
.Ltmp625:
	.quad	0
	.quad	0
.Ldebug_loc33:
	.quad	.Ltmp126
	.quad	.Ltmp127
.Lset18 = .Ltmp627-.Ltmp626             # Loc expr size
	.short	.Lset18
.Ltmp626:
	.byte	119                     # DW_OP_breg7
	.ascii	"\260\005"
.Ltmp627:
	.quad	.Ltmp132
	.quad	.Ltmp133
.Lset19 = .Ltmp629-.Ltmp628             # Loc expr size
	.short	.Lset19
.Ltmp628:
	.byte	119                     # DW_OP_breg7
	.ascii	"\340\002"
.Ltmp629:
	.quad	0
	.quad	0
.Ldebug_loc36:
	.quad	.Ltmp128
	.quad	.Ltmp133
.Lset20 = .Ltmp631-.Ltmp630             # Loc expr size
	.short	.Lset20
.Ltmp630:
	.byte	119                     # DW_OP_breg7
	.ascii	"\200\002"
.Ltmp631:
	.quad	0
	.quad	0
.Ldebug_loc38:
	.quad	.Ltmp129
	.quad	.Ltmp133
.Lset21 = .Ltmp633-.Ltmp632             # Loc expr size
	.short	.Lset21
.Ltmp632:
	.byte	119                     # DW_OP_breg7
	.ascii	"\360\001"
.Ltmp633:
	.quad	0
	.quad	0
.Ldebug_loc40:
	.quad	.Lfunc_begin4
	.quad	.Ltmp158
.Lset22 = .Ltmp635-.Ltmp634             # Loc expr size
	.short	.Lset22
.Ltmp634:
	.byte	98                      # DW_OP_reg18
.Ltmp635:
	.quad	.Ltmp158
	.quad	.Ltmp159
.Lset23 = .Ltmp637-.Ltmp636             # Loc expr size
	.short	.Lset23
.Ltmp636:
	.byte	119                     # DW_OP_breg7
	.ascii	"\200\001"
.Ltmp637:
	.quad	0
	.quad	0
.Ldebug_loc43:
	.quad	.Lfunc_begin4
	.quad	.Ltmp157
.Lset24 = .Ltmp639-.Ltmp638             # Loc expr size
	.short	.Lset24
.Ltmp638:
	.byte	97                      # DW_OP_reg17
.Ltmp639:
	.quad	.Ltmp157
	.quad	.Lfunc_end4
.Lset25 = .Ltmp641-.Ltmp640             # Loc expr size
	.short	.Lset25
.Ltmp640:
	.byte	119                     # DW_OP_breg7
	.ascii	"\250\001"
.Ltmp641:
	.quad	0
	.quad	0
.Ldebug_loc46:
	.quad	.Lfunc_begin5
	.quad	.Ltmp189
.Lset26 = .Ltmp643-.Ltmp642             # Loc expr size
	.short	.Lset26
.Ltmp642:
	.byte	98                      # DW_OP_reg18
.Ltmp643:
	.quad	.Ltmp189
	.quad	.Ltmp190
.Lset27 = .Ltmp645-.Ltmp644             # Loc expr size
	.short	.Lset27
.Ltmp644:
	.byte	119                     # DW_OP_breg7
	.ascii	"\200\001"
.Ltmp645:
	.quad	0
	.quad	0
.Ldebug_loc49:
	.quad	.Lfunc_begin5
	.quad	.Ltmp188
.Lset28 = .Ltmp647-.Ltmp646             # Loc expr size
	.short	.Lset28
.Ltmp646:
	.byte	97                      # DW_OP_reg17
.Ltmp647:
	.quad	.Ltmp188
	.quad	.Lfunc_end5
.Lset29 = .Ltmp649-.Ltmp648             # Loc expr size
	.short	.Lset29
.Ltmp648:
	.byte	119                     # DW_OP_breg7
	.ascii	"\250\001"
.Ltmp649:
	.quad	0
	.quad	0
.Ldebug_loc52:
	.quad	.Lfunc_begin7
	.quad	.Ltmp230
.Lset30 = .Ltmp651-.Ltmp650             # Loc expr size
	.short	.Lset30
.Ltmp650:
	.byte	97                      # DW_OP_reg17
.Ltmp651:
	.quad	.Ltmp230
	.quad	.Ltmp231
.Lset31 = .Ltmp653-.Ltmp652             # Loc expr size
	.short	.Lset31
.Ltmp652:
	.byte	119                     # DW_OP_breg7
	.ascii	"\300\001"
.Ltmp653:
	.quad	0
	.quad	0
.Ldebug_loc55:
	.quad	.Lfunc_begin8
	.quad	.Ltmp259
.Lset32 = .Ltmp655-.Ltmp654             # Loc expr size
	.short	.Lset32
.Ltmp654:
	.byte	119                     # DW_OP_breg7
	.ascii	"\264\016"
.Ltmp655:
	.quad	0
	.quad	0
.Ldebug_loc57:
	.quad	.Lfunc_begin8
	.quad	.Ltmp259
.Lset33 = .Ltmp657-.Ltmp656             # Loc expr size
	.short	.Lset33
.Ltmp656:
	.byte	119                     # DW_OP_breg7
	.ascii	"\270\017"
.Ltmp657:
	.quad	0
	.quad	0
.Ldebug_loc59:
	.quad	.Lfunc_begin8
	.quad	.Ltmp259
.Lset34 = .Ltmp659-.Ltmp658             # Loc expr size
	.short	.Lset34
.Ltmp658:
	.byte	119                     # DW_OP_breg7
	.ascii	"\240\016"
.Ltmp659:
	.quad	0
	.quad	0
.Ldebug_loc61:
	.quad	.Lfunc_begin8
	.quad	.Ltmp259
.Lset35 = .Ltmp661-.Ltmp660             # Loc expr size
	.short	.Lset35
.Ltmp660:
	.byte	119                     # DW_OP_breg7
	.ascii	"\327\017"
.Ltmp661:
	.quad	0
	.quad	0
.Ldebug_loc63:
	.quad	.Lfunc_begin8
	.quad	.Ltmp257
.Lset36 = .Ltmp663-.Ltmp662             # Loc expr size
	.short	.Lset36
.Ltmp662:
	.byte	119                     # DW_OP_breg7
	.ascii	"\220\016"
.Ltmp663:
	.quad	0
	.quad	0
.Ldebug_loc65:
	.quad	.Ltmp261
	.quad	.Ltmp262
.Lset37 = .Ltmp665-.Ltmp664             # Loc expr size
	.short	.Lset37
.Ltmp664:
	.byte	119                     # DW_OP_breg7
	.ascii	"\240\t"
.Ltmp665:
	.quad	0
	.quad	0
.Ldebug_loc67:
	.quad	.Ltmp263
	.quad	.Ltmp265
.Lset38 = .Ltmp667-.Ltmp666             # Loc expr size
	.short	.Lset38
.Ltmp666:
	.byte	119                     # DW_OP_breg7
	.ascii	"\224\b"
.Ltmp667:
	.quad	0
	.quad	0
.Ldebug_loc69:
	.quad	.Lfunc_begin9
	.quad	.Ltmp293
.Lset39 = .Ltmp669-.Ltmp668             # Loc expr size
	.short	.Lset39
.Ltmp668:
	.byte	119                     # DW_OP_breg7
	.asciz	"\354\325"
.Ltmp669:
	.quad	0
	.quad	0
.Ldebug_loc71:
	.quad	.Lfunc_begin9
	.quad	.Ltmp293
.Lset40 = .Ltmp671-.Ltmp670             # Loc expr size
	.short	.Lset40
.Ltmp670:
	.byte	119                     # DW_OP_breg7
	.asciz	"\340\326"
.Ltmp671:
	.quad	0
	.quad	0
.Ldebug_loc73:
	.quad	.Lfunc_begin9
	.quad	.Ltmp293
.Lset41 = .Ltmp673-.Ltmp672             # Loc expr size
	.short	.Lset41
.Ltmp672:
	.byte	119                     # DW_OP_breg7
	.asciz	"\330\325"
.Ltmp673:
	.quad	0
	.quad	0
.Ldebug_loc75:
	.quad	.Lfunc_begin9
	.quad	.Ltmp293
.Lset42 = .Ltmp675-.Ltmp674             # Loc expr size
	.short	.Lset42
.Ltmp674:
	.byte	119                     # DW_OP_breg7
	.asciz	"\320\325"
.Ltmp675:
	.quad	0
	.quad	0
.Ldebug_loc77:
	.quad	.Lfunc_begin9
	.quad	.Ltmp293
.Lset43 = .Ltmp677-.Ltmp676             # Loc expr size
	.short	.Lset43
.Ltmp676:
	.byte	119                     # DW_OP_breg7
	.asciz	"\310\325"
.Ltmp677:
	.quad	0
	.quad	0
.Ldebug_loc79:
	.quad	.Ltmp292
	.quad	.Lfunc_end9
.Lset44 = .Ltmp679-.Ltmp678             # Loc expr size
	.short	.Lset44
.Ltmp678:
	.byte	16                      # DW_OP_constu
	.byte	0
.Ltmp679:
	.quad	0
	.quad	0
.Ldebug_loc82:
	.quad	.Ltmp311
	.quad	.Ltmp312
.Lset45 = .Ltmp681-.Ltmp680             # Loc expr size
	.short	.Lset45
.Ltmp680:
	.byte	119                     # DW_OP_breg7
	.asciz	"\260\305"
.Ltmp681:
	.quad	0
	.quad	0
.Ldebug_loc84:
	.quad	.Ltmp311
	.quad	.Ltmp332
.Lset46 = .Ltmp683-.Ltmp682             # Loc expr size
	.short	.Lset46
.Ltmp682:
.Ltmp683:
	.quad	.Ltmp332
	.quad	.Ltmp333
.Lset47 = .Ltmp685-.Ltmp684             # Loc expr size
	.short	.Lset47
.Ltmp684:
	.byte	119                     # DW_OP_breg7
	.ascii	"\2201"
.Ltmp685:
	.quad	.Ltmp337
	.quad	.Ltmp339
.Lset48 = .Ltmp687-.Ltmp686             # Loc expr size
	.short	.Lset48
.Ltmp686:
	.byte	119                     # DW_OP_breg7
	.ascii	"\220*"
.Ltmp687:
	.quad	.Ltmp359
	.quad	.Ltmp360
.Lset49 = .Ltmp689-.Ltmp688             # Loc expr size
	.short	.Lset49
.Ltmp688:
	.byte	119                     # DW_OP_breg7
	.ascii	"\230\023"
.Ltmp689:
	.quad	0
	.quad	0
.Ldebug_loc89:
	.quad	.Ltmp311
	.quad	.Ltmp314
.Lset50 = .Ltmp691-.Ltmp690             # Loc expr size
	.short	.Lset50
.Ltmp690:
.Ltmp691:
	.quad	.Ltmp314
	.quad	.Ltmp315
.Lset51 = .Ltmp693-.Ltmp692             # Loc expr size
	.short	.Lset51
.Ltmp692:
	.byte	119                     # DW_OP_breg7
	.asciz	"\250\302"
.Ltmp693:
	.quad	0
	.quad	0
.Ldebug_loc92:
	.quad	.Ltmp334
	.quad	.Ltmp335
.Lset52 = .Ltmp695-.Ltmp694             # Loc expr size
	.short	.Lset52
.Ltmp694:
	.byte	119                     # DW_OP_breg7
	.ascii	"\320-"
.Ltmp695:
	.quad	.Ltmp345
	.quad	.Ltmp348
.Lset53 = .Ltmp697-.Ltmp696             # Loc expr size
	.short	.Lset53
.Ltmp696:
	.byte	119                     # DW_OP_breg7
	.ascii	"\310\""
.Ltmp697:
	.quad	.Ltmp357
	.quad	.Ltmp358
.Lset54 = .Ltmp699-.Ltmp698             # Loc expr size
	.short	.Lset54
.Ltmp698:
	.byte	119                     # DW_OP_breg7
	.ascii	"\210\025"
.Ltmp699:
	.quad	.Ltmp366
	.quad	.Ltmp369
.Lset55 = .Ltmp701-.Ltmp700             # Loc expr size
	.short	.Lset55
.Ltmp700:
	.byte	119                     # DW_OP_breg7
	.ascii	"\200\f"
.Ltmp701:
	.quad	.Ltmp376
	.quad	.Ltmp378
.Lset56 = .Ltmp703-.Ltmp702             # Loc expr size
	.short	.Lset56
.Ltmp702:
	.byte	119                     # DW_OP_breg7
	.asciz	"\360"
.Ltmp703:
	.quad	0
	.quad	0
.Ldebug_loc98:
	.quad	.Ltmp336
	.quad	.Ltmp339
.Lset57 = .Ltmp705-.Ltmp704             # Loc expr size
	.short	.Lset57
.Ltmp704:
	.byte	119                     # DW_OP_breg7
	.ascii	"\260*"
.Ltmp705:
	.quad	.Ltmp346
	.quad	.Ltmp348
.Lset58 = .Ltmp707-.Ltmp706             # Loc expr size
	.short	.Lset58
.Ltmp706:
	.byte	119                     # DW_OP_breg7
	.ascii	"\200\""
.Ltmp707:
	.quad	.Ltmp350
	.quad	.Ltmp352
.Lset59 = .Ltmp709-.Ltmp708             # Loc expr size
	.short	.Lset59
.Ltmp708:
	.byte	119                     # DW_OP_breg7
	.ascii	"\330\034"
.Ltmp709:
	.quad	.Ltmp367
	.quad	.Ltmp369
.Lset60 = .Ltmp711-.Ltmp710             # Loc expr size
	.short	.Lset60
.Ltmp710:
	.byte	119                     # DW_OP_breg7
	.ascii	"\360\013"
.Ltmp711:
	.quad	0
	.quad	0
.Ldebug_loc103:
	.quad	.Lfunc_begin10
	.quad	.Ltmp403
.Lset61 = .Ltmp713-.Ltmp712             # Loc expr size
	.short	.Lset61
.Ltmp712:
	.byte	119                     # DW_OP_breg7
	.asciz	"\214\310"
.Ltmp713:
	.quad	0
	.quad	0
.Ldebug_loc105:
	.quad	.Lfunc_begin10
	.quad	.Ltmp403
.Lset62 = .Ltmp715-.Ltmp714             # Loc expr size
	.short	.Lset62
.Ltmp714:
	.byte	119                     # DW_OP_breg7
	.asciz	"\200\310"
.Ltmp715:
	.quad	0
	.quad	0
.Ldebug_loc107:
	.quad	.Lfunc_begin10
	.quad	.Ltmp403
.Lset63 = .Ltmp717-.Ltmp716             # Loc expr size
	.short	.Lset63
.Ltmp716:
	.byte	119                     # DW_OP_breg7
	.asciz	"\370\307"
.Ltmp717:
	.quad	0
	.quad	0
.Ldebug_loc109:
	.quad	.Ltmp402
	.quad	.Ltmp435
.Lset64 = .Ltmp719-.Ltmp718             # Loc expr size
	.short	.Lset64
.Ltmp718:
	.byte	16                      # DW_OP_constu
	.byte	0
.Ltmp719:
	.quad	.Ltmp435
	.quad	.Ltmp436
.Lset65 = .Ltmp721-.Ltmp720             # Loc expr size
	.short	.Lset65
.Ltmp720:
	.byte	119                     # DW_OP_breg7
	.ascii	"\204*"
.Ltmp721:
	.quad	0
	.quad	0
.Ldebug_loc112:
	.quad	.Ltmp406
	.quad	.Ltmp450
.Lset66 = .Ltmp723-.Ltmp722             # Loc expr size
	.short	.Lset66
.Ltmp722:
.Ltmp723:
	.quad	.Ltmp450
	.quad	.Ltmp451
.Lset67 = .Ltmp725-.Ltmp724             # Loc expr size
	.short	.Lset67
.Ltmp724:
	.byte	119                     # DW_OP_breg7
	.ascii	"\260\036"
.Ltmp725:
	.quad	0
	.quad	0
.Ldebug_loc115:
	.quad	.Ltmp406
	.quad	.Ltmp417
.Lset68 = .Ltmp727-.Ltmp726             # Loc expr size
	.short	.Lset68
.Ltmp726:
.Ltmp727:
	.quad	.Ltmp417
	.quad	.Ltmp420
.Lset69 = .Ltmp729-.Ltmp728             # Loc expr size
	.short	.Lset69
.Ltmp728:
	.byte	119                     # DW_OP_breg7
	.ascii	"\220:"
.Ltmp729:
	.quad	0
	.quad	0
.Ldebug_loc118:
	.quad	.Ltmp407
	.quad	.Ltmp500
.Lset70 = .Ltmp731-.Ltmp730             # Loc expr size
	.short	.Lset70
.Ltmp730:
	.byte	16                      # DW_OP_constu
	.byte	0
.Ltmp731:
	.quad	.Ltmp500
	.quad	.Ltmp501
.Lset71 = .Ltmp733-.Ltmp732             # Loc expr size
	.short	.Lset71
.Ltmp732:
	.byte	119                     # DW_OP_breg7
	.ascii	"\354\001"
.Ltmp733:
	.quad	0
	.quad	0
.Ldebug_loc121:
	.quad	.Ltmp414
	.quad	.Ltmp437
.Lset72 = .Ltmp735-.Ltmp734             # Loc expr size
	.short	.Lset72
.Ltmp734:
	.byte	16                      # DW_OP_constu
	.byte	0
.Ltmp735:
	.quad	.Ltmp437
	.quad	.Ltmp438
.Lset73 = .Ltmp737-.Ltmp736             # Loc expr size
	.short	.Lset73
.Ltmp736:
	.byte	119                     # DW_OP_breg7
	.ascii	"\244'"
.Ltmp737:
	.quad	0
	.quad	0
.Ldebug_loc124:
	.quad	.Ltmp415
	.quad	.Ltmp416
.Lset74 = .Ltmp739-.Ltmp738             # Loc expr size
	.short	.Lset74
.Ltmp738:
	.byte	119                     # DW_OP_breg7
	.ascii	"\220:"
.Ltmp739:
	.quad	.Ltmp445
	.quad	.Ltmp446
.Lset75 = .Ltmp741-.Ltmp740             # Loc expr size
	.short	.Lset75
.Ltmp740:
	.byte	119                     # DW_OP_breg7
	.ascii	"\210#"
.Ltmp741:
	.quad	.Ltmp459
	.quad	.Ltmp460
.Lset76 = .Ltmp743-.Ltmp742             # Loc expr size
	.short	.Lset76
.Ltmp742:
	.byte	119                     # DW_OP_breg7
	.ascii	"\350\035"
.Ltmp743:
	.quad	.Ltmp479
	.quad	.Ltmp480
.Lset77 = .Ltmp745-.Ltmp744             # Loc expr size
	.short	.Lset77
.Ltmp744:
	.byte	119                     # DW_OP_breg7
	.ascii	"\310\025"
.Ltmp745:
	.quad	0
	.quad	0
.Ldebug_loc129:
	.quad	.Ltmp418
	.quad	.Ltmp420
.Lset78 = .Ltmp747-.Ltmp746             # Loc expr size
	.short	.Lset78
.Ltmp746:
	.byte	119                     # DW_OP_breg7
	.ascii	"\2308"
.Ltmp747:
	.quad	0
	.quad	0
.Ldebug_loc131:
	.quad	.Ltmp419
	.quad	.Ltmp420
.Lset79 = .Ltmp749-.Ltmp748             # Loc expr size
	.short	.Lset79
.Ltmp748:
	.byte	119                     # DW_OP_breg7
	.ascii	"\2208"
.Ltmp749:
	.quad	0
	.quad	0
.Ldebug_loc133:
	.quad	.Ltmp422
	.quad	.Ltmp423
.Lset80 = .Ltmp751-.Ltmp750             # Loc expr size
	.short	.Lset80
.Ltmp750:
	.byte	119                     # DW_OP_breg7
	.ascii	"\314>"
.Ltmp751:
	.quad	.Ltmp426
	.quad	.Ltmp427
.Lset81 = .Ltmp753-.Ltmp752             # Loc expr size
	.short	.Lset81
.Ltmp752:
	.byte	119                     # DW_OP_breg7
	.ascii	"\3344"
.Ltmp753:
	.quad	0
	.quad	0
.Ldebug_loc136:
	.quad	.Ltmp439
	.quad	.Ltmp446
.Lset82 = .Ltmp755-.Ltmp754             # Loc expr size
	.short	.Lset82
.Ltmp754:
	.byte	119                     # DW_OP_breg7
	.ascii	"\220'"
.Ltmp755:
	.quad	.Ltmp459
	.quad	.Ltmp468
.Lset83 = .Ltmp757-.Ltmp756             # Loc expr size
	.short	.Lset83
.Ltmp756:
.Ltmp757:
	.quad	.Ltmp468
	.quad	.Ltmp469
.Lset84 = .Ltmp759-.Ltmp758             # Loc expr size
	.short	.Lset84
.Ltmp758:
	.byte	119                     # DW_OP_breg7
	.ascii	"\300\027"
.Ltmp759:
	.quad	0
	.quad	0
.Ldebug_loc140:
	.quad	.Ltmp440
	.quad	.Ltmp446
.Lset85 = .Ltmp761-.Ltmp760             # Loc expr size
	.short	.Lset85
.Ltmp760:
	.byte	119                     # DW_OP_breg7
	.ascii	"\210'"
.Ltmp761:
	.quad	.Ltmp452
	.quad	.Ltmp453
.Lset86 = .Ltmp763-.Ltmp762             # Loc expr size
	.short	.Lset86
.Ltmp762:
	.byte	119                     # DW_OP_breg7
	.ascii	"\240\036"
.Ltmp763:
	.quad	.Ltmp456
	.quad	.Ltmp457
.Lset87 = .Ltmp765-.Ltmp764             # Loc expr size
	.short	.Lset87
.Ltmp764:
	.byte	119                     # DW_OP_breg7
	.ascii	"\3606"
.Ltmp765:
	.quad	.Ltmp470
	.quad	.Ltmp471
.Lset88 = .Ltmp767-.Ltmp766             # Loc expr size
	.short	.Lset88
.Ltmp766:
	.byte	119                     # DW_OP_breg7
	.ascii	"\210\026"
.Ltmp767:
	.quad	.Ltmp476
	.quad	.Ltmp477
.Lset89 = .Ltmp769-.Ltmp768             # Loc expr size
	.short	.Lset89
.Ltmp768:
	.byte	119                     # DW_OP_breg7
	.ascii	"\3606"
.Ltmp769:
	.quad	0
	.quad	0
.Ldebug_loc146:
	.quad	.Ltmp441
	.quad	.Ltmp442
.Lset90 = .Ltmp771-.Ltmp770             # Loc expr size
	.short	.Lset90
.Ltmp770:
	.byte	119                     # DW_OP_breg7
	.ascii	"\350&"
.Ltmp771:
	.quad	.Ltmp464
	.quad	.Ltmp465
.Lset91 = .Ltmp773-.Ltmp772             # Loc expr size
	.short	.Lset91
.Ltmp772:
	.byte	119                     # DW_OP_breg7
	.ascii	"\260\031"
.Ltmp773:
	.quad	.Ltmp487
	.quad	.Ltmp488
.Lset92 = .Ltmp775-.Ltmp774             # Loc expr size
	.short	.Lset92
.Ltmp774:
	.byte	119                     # DW_OP_breg7
	.ascii	"\360\f"
.Ltmp775:
	.quad	0
	.quad	0
.Ldebug_loc150:
	.quad	.Ltmp443
	.quad	.Ltmp444
.Lset93 = .Ltmp777-.Ltmp776             # Loc expr size
	.short	.Lset93
.Ltmp776:
	.byte	119                     # DW_OP_breg7
	.ascii	"\240&"
.Ltmp777:
	.quad	.Ltmp466
	.quad	.Ltmp467
.Lset94 = .Ltmp779-.Ltmp778             # Loc expr size
	.short	.Lset94
.Ltmp778:
	.byte	119                     # DW_OP_breg7
	.ascii	"\300\030"
.Ltmp779:
	.quad	0
	.quad	0
.Ldebug_loc153:
	.quad	.Ltmp459
	.quad	.Ltmp460
.Lset95 = .Ltmp781-.Ltmp780             # Loc expr size
	.short	.Lset95
.Ltmp780:
	.byte	119                     # DW_OP_breg7
	.ascii	"\250-"
.Ltmp781:
	.quad	0
	.quad	0
.Ldebug_loc155:
	.quad	.Ltmp462
	.quad	.Ltmp463
.Lset96 = .Ltmp783-.Ltmp782             # Loc expr size
	.short	.Lset96
.Ltmp782:
	.byte	119                     # DW_OP_breg7
	.ascii	"\314\031"
.Ltmp783:
	.quad	.Ltmp487
	.quad	.Ltmp488
.Lset97 = .Ltmp785-.Ltmp784             # Loc expr size
	.short	.Lset97
.Ltmp784:
	.byte	119                     # DW_OP_breg7
	.ascii	"\314>"
.Ltmp785:
	.quad	.Ltmp498
	.quad	.Ltmp499
.Lset98 = .Ltmp787-.Ltmp786             # Loc expr size
	.short	.Lset98
.Ltmp786:
	.byte	119                     # DW_OP_breg7
	.ascii	"\204\004"
.Ltmp787:
	.quad	0
	.quad	0
.Ldebug_loc159:
	.quad	.Lfunc_begin11
	.quad	.Ltmp528
.Lset99 = .Ltmp789-.Ltmp788             # Loc expr size
	.short	.Lset99
.Ltmp788:
	.byte	119                     # DW_OP_breg7
	.ascii	"\324\026"
.Ltmp789:
	.quad	0
	.quad	0
.Ldebug_loc161:
	.quad	.Lfunc_begin11
	.quad	.Ltmp528
.Lset100 = .Ltmp791-.Ltmp790            # Loc expr size
	.short	.Lset100
.Ltmp790:
	.byte	119                     # DW_OP_breg7
	.ascii	"\310\026"
.Ltmp791:
	.quad	0
	.quad	0
.Ldebug_loc163:
	.quad	.Lfunc_begin11
	.quad	.Ltmp528
.Lset101 = .Ltmp793-.Ltmp792            # Loc expr size
	.short	.Lset101
.Ltmp792:
	.byte	119                     # DW_OP_breg7
	.ascii	"\300\026"
.Ltmp793:
	.quad	0
	.quad	0
.Ldebug_loc165:
	.quad	.Lfunc_begin11
	.quad	.Ltmp528
.Lset102 = .Ltmp795-.Ltmp794            # Loc expr size
	.short	.Lset102
.Ltmp794:
	.byte	119                     # DW_OP_breg7
	.ascii	"\364\027"
.Ltmp795:
	.quad	0
	.quad	0
.Ldebug_loc167:
	.quad	.Lfunc_begin11
	.quad	.Ltmp528
.Lset103 = .Ltmp797-.Ltmp796            # Loc expr size
	.short	.Lset103
.Ltmp796:
	.byte	119                     # DW_OP_breg7
	.ascii	"\270\026"
.Ltmp797:
	.quad	0
	.quad	0
.Ldebug_loc169:
	.quad	.Ltmp537
	.quad	.Ltmp538
.Lset104 = .Ltmp799-.Ltmp798            # Loc expr size
	.short	.Lset104
.Ltmp798:
	.byte	119                     # DW_OP_breg7
	.ascii	"\240\n"
.Ltmp799:
	.quad	.Ltmp539
	.quad	.Ltmp541
.Lset105 = .Ltmp801-.Ltmp800            # Loc expr size
	.short	.Lset105
.Ltmp800:
	.byte	119                     # DW_OP_breg7
	.ascii	"\350\007"
.Ltmp801:
	.quad	0
	.quad	0
.Ldebug_loc172:
	.quad	.Ltmp546
	.quad	.Ltmp547
.Lset106 = .Ltmp803-.Ltmp802            # Loc expr size
	.short	.Lset106
.Ltmp802:
	.byte	119                     # DW_OP_breg7
	.byte	20
.Ltmp803:
	.quad	0
	.quad	0
.Ldebug_loc174:
	.section	.debug_aranges,"",@progbits
	.long	44                      # Length of ARange Set
	.short	2                       # DWARF Arange version number
	.long	.L.debug_info_begin0    # Offset Into Debug Info Section
	.byte	8                       # Address Size (in bytes)
	.byte	0                       # Segment Size (in bytes)
	.byte	255
	.byte	255
	.byte	255
	.byte	255
	.quad	.Lfunc_begin0
.Lset107 = .Lfunc_begin3-.Lfunc_begin0
	.quad	.Lset107
	.quad	0                       # ARange terminator
	.quad	0
	.long	44                      # Length of ARange Set
	.short	2                       # DWARF Arange version number
	.long	.L.debug_info_begin1    # Offset Into Debug Info Section
	.byte	8                       # Address Size (in bytes)
	.byte	0                       # Segment Size (in bytes)
	.byte	255
	.byte	255
	.byte	255
	.byte	255
	.quad	.Lfunc_begin3
.Lset108 = .Ldebug_end0-.Lfunc_begin3
	.quad	.Lset108
	.quad	0                       # ARange terminator
	.quad	0
	.section	.debug_ranges,"",@progbits
	.section	.debug_macinfo,"",@progbits
	.section	.debug_pubnames,"",@progbits
.Lset109 = .Lpubnames_end1-.Lpubnames_begin1 # Length of Public Names Info
	.long	.Lset109
.Lpubnames_begin1:
	.short	2                       # DWARF Version
	.long	.L.debug_info_begin1    # Offset of Compilation Unit Info
.Lset110 = .L.debug_info_end1-.L.debug_info_begin1 # Compilation Unit Length
	.long	.Lset110
	.long	1119                    # DIE offset
	.asciz	"tred1"                 # External Name
	.long	196                     # DIE offset
	.asciz	"r8_epsilon"            # External Name
	.long	444                     # DIE offset
	.asciz	"rs"                    # External Name
	.long	943                     # DIE offset
	.asciz	"trbak1"                # External Name
	.long	599                     # DIE offset
	.asciz	"tqlrat"                # External Name
	.long	388                     # DIE offset
	.asciz	"r8_sign"               # External Name
	.long	61                      # DIE offset
	.asciz	"pythag"                # External Name
	.long	317                     # DIE offset
	.asciz	"r8_min"                # External Name
	.long	246                     # DIE offset
	.asciz	"r8_max"                # External Name
	.long	0                       # End Mark
.Lpubnames_end1:
.Lset111 = .Lpubnames_end0-.Lpubnames_begin0 # Length of Public Names Info
	.long	.Lset111
.Lpubnames_begin0:
	.short	2                       # DWARF Version
	.long	.L.debug_info_begin0    # Offset of Compilation Unit Info
.Lset112 = .L.debug_info_end0-.L.debug_info_begin0 # Compilation Unit Length
	.long	.Lset112
	.long	325                     # DIE offset
	.asciz	"main"                  # External Name
	.long	179                     # DIE offset
	.asciz	"store_kernel"          # External Name
	.long	62                      # DIE offset
	.asciz	"test_stores"           # External Name
	.long	0                       # End Mark
.Lpubnames_end0:
	.section	.debug_pubtypes,"",@progbits
.Lset113 = .Lpubtypes_end1-.Lpubtypes_begin1 # Length of Public Types Info
	.long	.Lset113
.Lpubtypes_begin1:
	.short	2                       # DWARF Version
	.long	.L.debug_info_begin1    # Offset of Compilation Unit Info
.Lset114 = .L.debug_info_end1-.L.debug_info_begin1 # Compilation Unit Length
	.long	.Lset114
	.long	54                      # DIE offset
	.asciz	"double"                # External Name
	.long	55                      # DIE offset
	.asciz	"int"                   # External Name
	.long	1359                    # DIE offset
	.asciz	"_Bool"                 # External Name
	.long	0                       # End Mark
.Lpubtypes_end1:
.Lset115 = .Lpubtypes_end0-.Lpubtypes_begin0 # Length of Public Types Info
	.long	.Lset115
.Lpubtypes_begin0:
	.short	2                       # DWARF Version
	.long	.L.debug_info_begin0    # Offset of Compilation Unit Info
.Lset116 = .L.debug_info_end0-.L.debug_info_begin0 # Compilation Unit Length
	.long	.Lset116
	.long	55                      # DIE offset
	.asciz	"int"                   # External Name
	.long	54                      # DIE offset
	.asciz	"double"                # External Name
	.long	0                       # End Mark
.Lpubtypes_end0:

	.ident	"clang version 3.4.2 (tags/RELEASE_34/dot2-final)"
	.ident	"clang version 3.4.2 (tags/RELEASE_34/dot2-final)"
	.ident	"clang version 3.4.2 (tags/RELEASE_34/dot2-final)"
	.section	".note.GNU-stack","",@progbits
