	.file	"full.llvm"
	.section	.debug_info,"",@progbits
.Lsection_info:
	.section	.debug_abbrev,"",@progbits
.Lsection_abbrev:
	.section	.debug_aranges,"",@progbits
	.section	.debug_macinfo,"",@progbits
	.section	.debug_line,"",@progbits
.Lsection_line:
	.section	.debug_loc,"",@progbits
	.section	.debug_pubnames,"",@progbits
	.section	.debug_pubtypes,"",@progbits
	.section	.debug_str,"MS",@progbits,1
.Linfo_string:
	.section	.debug_ranges,"",@progbits
.Ldebug_range:
	.section	.debug_loc,"",@progbits
.Lsection_debug_loc:
	.text
.Ltext_begin:
	.data
	.file	1 "mma_test_eigen.c"
	.file	2 "eispack.c"
	.text
	.globl	test_stores
	.align	16, 0x90
	.type	test_stores,@function
test_stores:                            # @test_stores
	.cfi_startproc
.Lfunc_begin0:
	.loc	1 16 0                  # mma_test_eigen.c:16:0
# BB#0:
	pushq	%rbp
.Ltmp7:
	.cfi_def_cfa_offset 16
	pushq	%r15
.Ltmp8:
	.cfi_def_cfa_offset 24
	pushq	%r14
.Ltmp9:
	.cfi_def_cfa_offset 32
	pushq	%r13
.Ltmp10:
	.cfi_def_cfa_offset 40
	pushq	%r12
.Ltmp11:
	.cfi_def_cfa_offset 48
	pushq	%rbx
.Ltmp12:
	.cfi_def_cfa_offset 56
	subq	$1592, %rsp             # imm = 0x638
.Ltmp13:
	.cfi_def_cfa_offset 1648
.Ltmp14:
	.cfi_offset %rbx, -56
.Ltmp15:
	.cfi_offset %r12, -48
.Ltmp16:
	.cfi_offset %r13, -40
.Ltmp17:
	.cfi_offset %r14, -32
.Ltmp18:
	.cfi_offset %r15, -24
.Ltmp19:
	.cfi_offset %rbp, -16
	movabsq	$0, %rax
	movabsq	$1, %rcx
	leaq	.L.str7, %r8
	leaq	.L.str9, %r9
	movabsq	$2, %r10
	leaq	.L.str13, %r11
	movabsq	$3, %rbx
	leaq	.L.str12, %r14
	movabsq	$18, %r15
	leaq	.L.str5, %r12
	leaq	.L.str6, %r13
	leaq	.L.str11, %rbp
	movl	%edx, 1588(%rsp)        # 4-byte Spill
	movl	$0, %edx
	movl	%edx, 1584(%rsp)        # 4-byte Spill
	movl	$1, %edx
	movq	%rax, 1576(%rsp)        # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 1568(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 1560(%rsp)        # 8-byte Spill
	leaq	.L.str10, %rax
	movq	%rax, 1552(%rsp)        # 8-byte Spill
	leaq	.L.str8, %rax
	movq	%rax, 1544(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 1536(%rsp)        # 8-byte Spill
	movabsq	$24601, %rax            # imm = 0x6019
	movq	%rax, 1528(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 1520(%rsp)        # 8-byte Spill
	leaq	.L.str20, %rax
	movq	%rax, 1512(%rsp)        # 8-byte Spill
	leaq	.L.str27, %rax
	.loc	1 16 0 prologue_end     # mma_test_eigen.c:16:0
.Ltmp20:
	movq	%rax, 1504(%rsp)        # 8-byte Spill
	movq	1528(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 1496(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	1520(%rsp), %rax        # 8-byte Reload
	movq	%rsi, 1488(%rsp)        # 8-byte Spill
	movq	%rax, %rsi
	movq	1496(%rsp), %rax        # 8-byte Reload
	movl	%edx, 1484(%rsp)        # 4-byte Spill
	movq	%rax, %rdx
	movq	%rcx, 1472(%rsp)        # 8-byte Spill
	movq	1504(%rsp), %rax        # 8-byte Reload
	movq	%r8, 1464(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	1576(%rsp), %rax        # 8-byte Reload
	movq	%r9, 1456(%rsp)         # 8-byte Spill
	movq	%rax, %r9
	movq	1456(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	movq	%r13, 1448(%rsp)        # 8-byte Spill
	movq	%rbp, 1440(%rsp)        # 8-byte Spill
	movq	%r12, 1432(%rsp)        # 8-byte Spill
	movq	%r15, 1424(%rsp)        # 8-byte Spill
	movq	%r14, 1416(%rsp)        # 8-byte Spill
	movq	%rbx, 1408(%rsp)        # 8-byte Spill
	movq	%r10, 1400(%rsp)        # 8-byte Spill
	movq	%r11, 1392(%rsp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movq	1528(%rsp), %rdi        # 8-byte Reload
	movq	1520(%rsp), %rsi        # 8-byte Reload
	movq	1488(%rsp), %rdx        # 8-byte Reload
	movq	1472(%rsp), %rcx        # 8-byte Reload
	movq	1512(%rsp), %r8         # 8-byte Reload
	movq	1576(%rsp), %r9         # 8-byte Reload
	movq	1456(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	1588(%rsp), %esi        # 4-byte Reload
	movl	%esi, %esi
	movl	%esi, %edx
	movq	1528(%rsp), %rdi        # 8-byte Reload
	movq	1560(%rsp), %rsi        # 8-byte Reload
	movq	1472(%rsp), %rcx        # 8-byte Reload
	movq	1552(%rsp), %r8         # 8-byte Reload
	movq	1576(%rsp), %r9         # 8-byte Reload
	movq	1456(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	#DEBUG_VALUE: test_stores:store_vals <- [RSP+1496]
	#DEBUG_VALUE: test_stores:store_loc <- [RSP+1488]
	#DEBUG_VALUE: test_stores:num_vals <- [RSP+1588]
.Ltmp21:
	#DEBUG_VALUE: test_stores:num_failures <- 0
	#DEBUG_VALUE: i <- 0
	.loc	1 18 0                  # mma_test_eigen.c:18:0
	movq	1424(%rsp), %rdi        # 8-byte Reload
	movq	1432(%rsp), %rsi        # 8-byte Reload
	movq	1448(%rsp), %rdx        # 8-byte Reload
	movq	1464(%rsp), %rcx        # 8-byte Reload
	movq	1536(%rsp), %r8         # 8-byte Reload
	movl	1584(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1400(%rsp), %rdi        # 8-byte Reload
	movq	1560(%rsp), %rsi        # 8-byte Reload
	movq	1576(%rsp), %rdx        # 8-byte Reload
	movq	1576(%rsp), %rcx        # 8-byte Reload
	movq	1544(%rsp), %r8         # 8-byte Reload
	movq	1576(%rsp), %r9         # 8-byte Reload
	movq	1456(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	1588(%rsp), %esi        # 4-byte Reload
	movl	%esi, %esi
	movl	%esi, %edx
	movq	1472(%rsp), %rdi        # 8-byte Reload
	movq	1560(%rsp), %rsi        # 8-byte Reload
	movq	1472(%rsp), %rcx        # 8-byte Reload
	movq	1552(%rsp), %r8         # 8-byte Reload
	movq	1576(%rsp), %r9         # 8-byte Reload
	movq	1456(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	1588(%rsp), %esi        # 4-byte Reload
	cmpl	$0, %esi
	setg	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	1568(%rsp), %rdi        # 8-byte Reload
	movq	1472(%rsp), %rsi        # 8-byte Reload
	movq	1472(%rsp), %rcx        # 8-byte Reload
	movq	1464(%rsp), %r8         # 8-byte Reload
	movq	1576(%rsp), %r9         # 8-byte Reload
	movq	1456(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 1391(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	1424(%rsp), %rdi        # 8-byte Reload
	movq	1432(%rsp), %rsi        # 8-byte Reload
	movq	1448(%rsp), %rdx        # 8-byte Reload
	movq	1440(%rsp), %rcx        # 8-byte Reload
	movq	1400(%rsp), %r8         # 8-byte Reload
	movl	1584(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1408(%rsp), %rdi        # 8-byte Reload
	movq	1576(%rsp), %rsi        # 8-byte Reload
	movq	1576(%rsp), %rdx        # 8-byte Reload
	movq	1472(%rsp), %rcx        # 8-byte Reload
	movq	1416(%rsp), %r8         # 8-byte Reload
	movq	1576(%rsp), %r9         # 8-byte Reload
	movq	1456(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1400(%rsp), %rdi        # 8-byte Reload
	movq	1576(%rsp), %rsi        # 8-byte Reload
	movq	1576(%rsp), %rdx        # 8-byte Reload
	movq	1472(%rsp), %rcx        # 8-byte Reload
	movq	1392(%rsp), %r8         # 8-byte Reload
	movq	1576(%rsp), %r9         # 8-byte Reload
	movq	1456(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	1391(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, %edx
	movq	1472(%rsp), %rdi        # 8-byte Reload
	movq	1472(%rsp), %rsi        # 8-byte Reload
	movq	1472(%rsp), %rcx        # 8-byte Reload
	movq	1464(%rsp), %r8         # 8-byte Reload
	movq	1576(%rsp), %r9         # 8-byte Reload
	movq	1456(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	1391(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	movq	1576(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 1376(%rsp)        # 8-byte Spill
	jne	.LBB0_1
	jmp	.LBB0_4
.Ltmp22:
.LBB0_1:                                # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	movq	1376(%rsp), %rax        # 8-byte Reload
	movabsq	$2, %rcx
	movabsq	$64, %rdx
	leaq	.L.str, %rsi
	movabsq	$0, %rdi
	leaq	.L.str8, %r8
	leaq	.L.str9, %r9
	movabsq	$1, %r10
	leaq	.L.str17, %r11
	movabsq	$5, %rbx
	leaq	fprintf, %r14
	leaq	.L.str24, %r15
	movabsq	$19, %r12
	leaq	.L.str5, %r13
	leaq	.L.str12, %rbp
	movq	%rax, 1368(%rsp)        # 8-byte Spill
	leaq	.L.str23, %rax
	movq	%rax, 1360(%rsp)        # 8-byte Spill
	movabsq	$49, %rax
	movq	%rsi, 1352(%rsp)        # 8-byte Spill
	movl	$0, %esi
	movl	%esi, 1348(%rsp)        # 4-byte Spill
	movl	$1, %esi
	movq	%rax, 1336(%rsp)        # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 1328(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 1320(%rsp)        # 8-byte Spill
	leaq	.L.str22, %rax
	movq	%rax, 1312(%rsp)        # 8-byte Spill
	leaq	.L.str14, %rax
	movq	%rax, 1304(%rsp)        # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, 1296(%rsp)        # 8-byte Spill
	leaq	.L.str21, %rax
	movq	%rax, 1288(%rsp)        # 8-byte Spill
	leaq	.L.str19, %rax
	movq	%rax, 1280(%rsp)        # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, 1272(%rsp)        # 8-byte Spill
	leaq	.L.str20, %rax
	movq	%rax, 1264(%rsp)        # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 1256(%rsp)        # 8-byte Spill
	leaq	stdout, %rax
	movq	%rax, 1248(%rsp)        # 8-byte Spill
	leaq	.L.str18, %rax
	movq	%rax, 1240(%rsp)        # 8-byte Spill
	leaq	.L.str16, %rax
	movq	%rax, 1232(%rsp)        # 8-byte Spill
	leaq	.L.str15, %rax
	movq	%rax, 1224(%rsp)        # 8-byte Spill
	leaq	.L.str6, %rax
	movq	%rax, 1216(%rsp)        # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 1208(%rsp)        # 8-byte Spill
	movabsq	$48, %rax
	.loc	1 19 0                  # mma_test_eigen.c:19:0
.Ltmp23:
	movq	%rax, 1200(%rsp)        # 8-byte Spill
	movq	1208(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 1192(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movl	%esi, 1188(%rsp)        # 4-byte Spill
	movq	%r13, %rsi
	movq	%rdx, 1176(%rsp)        # 8-byte Spill
	movq	%rbp, %rdx
	movq	1304(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 1168(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	1200(%rsp), %rax        # 8-byte Reload
	movq	%r8, 1160(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movl	1348(%rsp), %eax        # 4-byte Reload
	movq	%r9, 1152(%rsp)         # 8-byte Spill
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movq	%r15, 1144(%rsp)        # 8-byte Spill
	movq	%r12, 1136(%rsp)        # 8-byte Spill
	movq	%r13, 1128(%rsp)        # 8-byte Spill
	movq	%rbp, 1120(%rsp)        # 8-byte Spill
	movq	%r14, 1112(%rsp)        # 8-byte Spill
	movq	%rbx, 1104(%rsp)        # 8-byte Spill
	movq	%r10, 1096(%rsp)        # 8-byte Spill
	movq	%r11, 1088(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	1168(%rsp), %rdi        # 8-byte Reload
	movq	1176(%rsp), %rsi        # 8-byte Reload
	movq	1192(%rsp), %rdx        # 8-byte Reload
	movq	1192(%rsp), %rcx        # 8-byte Reload
	movq	1160(%rsp), %r8         # 8-byte Reload
	movq	1096(%rsp), %r9         # 8-byte Reload
	movq	1216(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1096(%rsp), %rdi        # 8-byte Reload
	movq	1176(%rsp), %rsi        # 8-byte Reload
	movq	1192(%rsp), %rdx        # 8-byte Reload
	movq	1096(%rsp), %rcx        # 8-byte Reload
	movq	1224(%rsp), %r8         # 8-byte Reload
	movq	1096(%rsp), %r9         # 8-byte Reload
	movq	1232(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1328(%rsp), %rdi        # 8-byte Reload
	movq	1176(%rsp), %rsi        # 8-byte Reload
	movq	1368(%rsp), %rdx        # 8-byte Reload
	movq	1096(%rsp), %rcx        # 8-byte Reload
	movq	1304(%rsp), %r8         # 8-byte Reload
	movq	1192(%rsp), %r9         # 8-byte Reload
	movq	1232(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	1128(%rsp), %rsi        # 8-byte Reload
	movq	1120(%rsp), %rdx        # 8-byte Reload
	movq	1088(%rsp), %rcx        # 8-byte Reload
	movq	1272(%rsp), %r8         # 8-byte Reload
	movl	1348(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1096(%rsp), %rdi        # 8-byte Reload
	movq	1176(%rsp), %rsi        # 8-byte Reload
	movq	1248(%rsp), %rdx        # 8-byte Reload
	movq	1096(%rsp), %rcx        # 8-byte Reload
	movq	1240(%rsp), %r8         # 8-byte Reload
	movq	1192(%rsp), %r9         # 8-byte Reload
	movq	1152(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	stdout, %rcx
	movq	1328(%rsp), %rdi        # 8-byte Reload
	movq	1176(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	1096(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 1080(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	1088(%rsp), %r8         # 8-byte Reload
	movq	1192(%rsp), %r9         # 8-byte Reload
	movq	1152(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	1128(%rsp), %rsi        # 8-byte Reload
	movq	1120(%rsp), %rdx        # 8-byte Reload
	movq	1280(%rsp), %rcx        # 8-byte Reload
	movq	1256(%rsp), %r8         # 8-byte Reload
	movl	1348(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1168(%rsp), %rdi        # 8-byte Reload
	movq	1176(%rsp), %rsi        # 8-byte Reload
	movq	1368(%rsp), %rdx        # 8-byte Reload
	movq	1096(%rsp), %rcx        # 8-byte Reload
	movq	1304(%rsp), %r8         # 8-byte Reload
	movq	1192(%rsp), %r9         # 8-byte Reload
	movq	1152(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1096(%rsp), %rdi        # 8-byte Reload
	movq	1176(%rsp), %rsi        # 8-byte Reload
	movq	1488(%rsp), %rdx        # 8-byte Reload
	movq	1096(%rsp), %rcx        # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movq	1192(%rsp), %r9         # 8-byte Reload
	movq	1152(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1368(%rsp), %rcx        # 8-byte Reload
	shlq	$2, %rcx
	movq	1488(%rsp), %rdx        # 8-byte Reload
	addq	%rcx, %rdx
	movq	1328(%rsp), %rdi        # 8-byte Reload
	movq	1176(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 1072(%rsp)        # 8-byte Spill
	movq	1096(%rsp), %rcx        # 8-byte Reload
	movq	1280(%rsp), %r8         # 8-byte Reload
	movq	1192(%rsp), %r9         # 8-byte Reload
	movq	1152(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	1128(%rsp), %rsi        # 8-byte Reload
	movq	1120(%rsp), %rdx        # 8-byte Reload
	movq	1288(%rsp), %rcx        # 8-byte Reload
	movq	1272(%rsp), %r8         # 8-byte Reload
	movl	1348(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1096(%rsp), %rdi        # 8-byte Reload
	movq	1176(%rsp), %rsi        # 8-byte Reload
	movq	1072(%rsp), %rdx        # 8-byte Reload
	movq	1096(%rsp), %rcx        # 8-byte Reload
	movq	1280(%rsp), %r8         # 8-byte Reload
	movq	1192(%rsp), %r9         # 8-byte Reload
	movq	1152(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1488(%rsp), %rcx        # 8-byte Reload
	movq	1368(%rsp), %rdx        # 8-byte Reload
	movl	(%rcx,%rdx,4), %eax
	movl	%eax, %esi
	movl	%esi, %edx
	movq	1328(%rsp), %rdi        # 8-byte Reload
	movq	1320(%rsp), %rsi        # 8-byte Reload
	movq	1096(%rsp), %rcx        # 8-byte Reload
	movq	1288(%rsp), %r8         # 8-byte Reload
	movq	1192(%rsp), %r9         # 8-byte Reload
	movq	1152(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, 1068(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	1128(%rsp), %rsi        # 8-byte Reload
	movq	1120(%rsp), %rdx        # 8-byte Reload
	movq	1312(%rsp), %rcx        # 8-byte Reload
	movq	1296(%rsp), %r8         # 8-byte Reload
	movl	1348(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1096(%rsp), %rdi        # 8-byte Reload
	movq	1176(%rsp), %rsi        # 8-byte Reload
	movq	1368(%rsp), %rdx        # 8-byte Reload
	movq	1096(%rsp), %rcx        # 8-byte Reload
	movq	1304(%rsp), %r8         # 8-byte Reload
	movq	1192(%rsp), %r9         # 8-byte Reload
	movq	1152(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1368(%rsp), %rcx        # 8-byte Reload
	movl	%ecx, %eax
	movl	%eax, %esi
	movl	%esi, %edx
	movq	1328(%rsp), %rdi        # 8-byte Reload
	movq	1320(%rsp), %rsi        # 8-byte Reload
	movq	1096(%rsp), %rcx        # 8-byte Reload
	movq	1312(%rsp), %r8         # 8-byte Reload
	movq	1192(%rsp), %r9         # 8-byte Reload
	movq	1152(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, 1064(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	1128(%rsp), %rsi        # 8-byte Reload
	movq	1120(%rsp), %rdx        # 8-byte Reload
	movq	1360(%rsp), %rcx        # 8-byte Reload
	movq	1336(%rsp), %r8         # 8-byte Reload
	movl	1348(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1104(%rsp), %rdi        # 8-byte Reload
	movq	1176(%rsp), %rsi        # 8-byte Reload
	movq	1112(%rsp), %rdx        # 8-byte Reload
	movq	1096(%rsp), %rcx        # 8-byte Reload
	movq	1144(%rsp), %r8         # 8-byte Reload
	movq	1192(%rsp), %r9         # 8-byte Reload
	movq	1152(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1096(%rsp), %rdi        # 8-byte Reload
	movq	1176(%rsp), %rsi        # 8-byte Reload
	movq	1080(%rsp), %rdx        # 8-byte Reload
	movq	1096(%rsp), %rcx        # 8-byte Reload
	movq	1088(%rsp), %r8         # 8-byte Reload
	movq	1192(%rsp), %r9         # 8-byte Reload
	movq	1152(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1168(%rsp), %rdi        # 8-byte Reload
	movq	1176(%rsp), %rsi        # 8-byte Reload
	movq	1352(%rsp), %rdx        # 8-byte Reload
	movq	1192(%rsp), %rcx        # 8-byte Reload
	movq	1160(%rsp), %r8         # 8-byte Reload
	movq	1192(%rsp), %r9         # 8-byte Reload
	movq	1152(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movl	$.L.str, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
                                        # kill: AL<def> AL<kill> EAX<kill>
	movq	1080(%rsp), %rdi        # 8-byte Reload
	movl	1064(%rsp), %edx        # 4-byte Reload
	movl	1068(%rsp), %ecx        # 4-byte Reload
	callq	fprintf
	movabsq	$2, %rsi
	movabsq	$64, %rdi
	leaq	.L.str1, %rdx
	movabsq	$0, %r8
	leaq	.L.str8, %r9
	leaq	.L.str9, %r10
	movabsq	$1, %r11
	leaq	.L.str25, %rbx
	movabsq	$5, %r14
	leaq	fprintf, %r15
	leaq	.L.str24, %r12
	movabsq	$20, %r13
	leaq	.L.str5, %rbp
	leaq	.L.str12, %rcx
	movq	%rcx, 1056(%rsp)        # 8-byte Spill
	leaq	.L.str30, %rcx
	movq	%rcx, 1048(%rsp)        # 8-byte Spill
	movabsq	$49, %rcx
	movl	%eax, 1044(%rsp)        # 4-byte Spill
	movl	$0, %eax
	movl	%eax, 1040(%rsp)        # 4-byte Spill
	movl	$1, %eax
	movq	%rcx, 1032(%rsp)        # 8-byte Spill
	movabsq	$19134, %rcx            # imm = 0x4ABE
	movq	%rcx, 1024(%rsp)        # 8-byte Spill
	movabsq	$32, %rcx
	movq	%rcx, 1016(%rsp)        # 8-byte Spill
	leaq	.L.str29, %rcx
	movq	%rcx, 1008(%rsp)        # 8-byte Spill
	leaq	.L.str14, %rcx
	movq	%rcx, 1000(%rsp)        # 8-byte Spill
	movabsq	$33, %rcx
	movq	%rcx, 992(%rsp)         # 8-byte Spill
	leaq	.L.str28, %rcx
	movq	%rcx, 984(%rsp)         # 8-byte Spill
	leaq	.L.str26, %rcx
	movq	%rcx, 976(%rsp)         # 8-byte Spill
	movabsq	$27, %rcx
	movq	%rcx, 968(%rsp)         # 8-byte Spill
	leaq	.L.str27, %rcx
	movq	%rcx, 960(%rsp)         # 8-byte Spill
	movabsq	$29, %rcx
	movq	%rcx, 952(%rsp)         # 8-byte Spill
	leaq	stdout, %rcx
	movq	%rcx, 944(%rsp)         # 8-byte Spill
	leaq	.L.str18, %rcx
	movq	%rcx, 936(%rsp)         # 8-byte Spill
	leaq	.L.str23, %rcx
	.loc	1 20 0                  # mma_test_eigen.c:20:0
	movl	%eax, 932(%rsp)         # 4-byte Spill
	movl	1044(%rsp), %eax        # 4-byte Reload
	movl	%eax, %eax
                                        # kill: RAX<def> EAX<kill>
	movq	%rax, 920(%rsp)         # 8-byte Spill
	movq	1024(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 912(%rsp)         # 8-byte Spill
	movq	%rax, %rdi
	movq	1016(%rsp), %rax        # 8-byte Reload
	movq	%rsi, 904(%rsp)         # 8-byte Spill
	movq	%rax, %rsi
	movq	920(%rsp), %rax         # 8-byte Reload
	movq	%rdx, 896(%rsp)         # 8-byte Spill
	movq	%rax, %rdx
	movq	%rcx, 888(%rsp)         # 8-byte Spill
	movq	%r11, %rcx
	movq	888(%rsp), %rax         # 8-byte Reload
	movq	%r8, 880(%rsp)          # 8-byte Spill
	movq	%rax, %r8
	movq	880(%rsp), %rax         # 8-byte Reload
	movq	%r9, 872(%rsp)          # 8-byte Spill
	movq	%rax, %r9
	movq	%r10, (%rsp)
	movq	%r12, 864(%rsp)         # 8-byte Spill
	movq	%rbp, 856(%rsp)         # 8-byte Spill
	movq	%r13, 848(%rsp)         # 8-byte Spill
	movq	%r15, 840(%rsp)         # 8-byte Spill
	movq	%r14, 832(%rsp)         # 8-byte Spill
	movq	%r10, 824(%rsp)         # 8-byte Spill
	movq	%r11, 816(%rsp)         # 8-byte Spill
	movq	%rbx, 808(%rsp)         # 8-byte Spill
	callq	trace_logger_log_int
	movq	848(%rsp), %rdi         # 8-byte Reload
	movq	856(%rsp), %rsi         # 8-byte Reload
	movq	1056(%rsp), %rdx        # 8-byte Reload
	movq	808(%rsp), %rcx         # 8-byte Reload
	movq	968(%rsp), %r8          # 8-byte Reload
	movl	1040(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	816(%rsp), %rdi         # 8-byte Reload
	movq	912(%rsp), %rsi         # 8-byte Reload
	movq	944(%rsp), %rdx         # 8-byte Reload
	movq	816(%rsp), %rcx         # 8-byte Reload
	movq	936(%rsp), %r8          # 8-byte Reload
	movq	880(%rsp), %r9          # 8-byte Reload
	movq	824(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	stdout, %rax
	movq	1024(%rsp), %rdi        # 8-byte Reload
	movq	912(%rsp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	movq	816(%rsp), %rcx         # 8-byte Reload
	movq	808(%rsp), %r8          # 8-byte Reload
	movq	880(%rsp), %r9          # 8-byte Reload
	movq	824(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 800(%rsp)         # 8-byte Spill
	callq	trace_logger_log_ptr
	movq	848(%rsp), %rdi         # 8-byte Reload
	movq	856(%rsp), %rsi         # 8-byte Reload
	movq	1056(%rsp), %rdx        # 8-byte Reload
	movq	976(%rsp), %rcx         # 8-byte Reload
	movq	952(%rsp), %r8          # 8-byte Reload
	movl	1040(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	904(%rsp), %rdi         # 8-byte Reload
	movq	912(%rsp), %rsi         # 8-byte Reload
	movq	1368(%rsp), %rdx        # 8-byte Reload
	movq	816(%rsp), %rcx         # 8-byte Reload
	movq	1000(%rsp), %r8         # 8-byte Reload
	movq	880(%rsp), %r9          # 8-byte Reload
	movq	824(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	816(%rsp), %rdi         # 8-byte Reload
	movq	912(%rsp), %rsi         # 8-byte Reload
	movq	1496(%rsp), %rdx        # 8-byte Reload
	movq	816(%rsp), %rcx         # 8-byte Reload
	movq	960(%rsp), %r8          # 8-byte Reload
	movq	880(%rsp), %r9          # 8-byte Reload
	movq	824(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1368(%rsp), %rax        # 8-byte Reload
	shlq	$2, %rax
	movq	1496(%rsp), %rcx        # 8-byte Reload
	addq	%rax, %rcx
	movq	1024(%rsp), %rdi        # 8-byte Reload
	movq	912(%rsp), %rsi         # 8-byte Reload
	movq	%rcx, %rdx
	movq	816(%rsp), %rax         # 8-byte Reload
	movq	%rcx, 792(%rsp)         # 8-byte Spill
	movq	%rax, %rcx
	movq	976(%rsp), %r8          # 8-byte Reload
	movq	880(%rsp), %r9          # 8-byte Reload
	movq	824(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	848(%rsp), %rdi         # 8-byte Reload
	movq	856(%rsp), %rsi         # 8-byte Reload
	movq	1056(%rsp), %rdx        # 8-byte Reload
	movq	984(%rsp), %rcx         # 8-byte Reload
	movq	968(%rsp), %r8          # 8-byte Reload
	movl	1040(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	816(%rsp), %rdi         # 8-byte Reload
	movq	912(%rsp), %rsi         # 8-byte Reload
	movq	792(%rsp), %rdx         # 8-byte Reload
	movq	816(%rsp), %rcx         # 8-byte Reload
	movq	976(%rsp), %r8          # 8-byte Reload
	movq	880(%rsp), %r9          # 8-byte Reload
	movq	824(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1496(%rsp), %rax        # 8-byte Reload
	movq	1368(%rsp), %rcx        # 8-byte Reload
	movl	(%rax,%rcx,4), %esi
	movl	%esi, %edi
	movl	%edi, %edx
	movq	1024(%rsp), %rdi        # 8-byte Reload
	movq	1016(%rsp), %r8         # 8-byte Reload
	movl	%esi, 788(%rsp)         # 4-byte Spill
	movq	%r8, %rsi
	movq	816(%rsp), %rcx         # 8-byte Reload
	movq	984(%rsp), %r8          # 8-byte Reload
	movq	880(%rsp), %r9          # 8-byte Reload
	movq	824(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	848(%rsp), %rdi         # 8-byte Reload
	movq	856(%rsp), %rsi         # 8-byte Reload
	movq	1056(%rsp), %rdx        # 8-byte Reload
	movq	1008(%rsp), %rcx        # 8-byte Reload
	movq	992(%rsp), %r8          # 8-byte Reload
	movl	1040(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	816(%rsp), %rdi         # 8-byte Reload
	movq	912(%rsp), %rsi         # 8-byte Reload
	movq	1368(%rsp), %rdx        # 8-byte Reload
	movq	816(%rsp), %rcx         # 8-byte Reload
	movq	1000(%rsp), %r8         # 8-byte Reload
	movq	880(%rsp), %r9          # 8-byte Reload
	movq	824(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1368(%rsp), %rax        # 8-byte Reload
	movl	%eax, %esi
	movl	%esi, %edi
	movl	%edi, %edx
	movq	1024(%rsp), %rdi        # 8-byte Reload
	movq	1016(%rsp), %rcx        # 8-byte Reload
	movl	%esi, 784(%rsp)         # 4-byte Spill
	movq	%rcx, %rsi
	movq	816(%rsp), %rcx         # 8-byte Reload
	movq	1008(%rsp), %r8         # 8-byte Reload
	movq	880(%rsp), %r9          # 8-byte Reload
	movq	824(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	848(%rsp), %rdi         # 8-byte Reload
	movq	856(%rsp), %rsi         # 8-byte Reload
	movq	1056(%rsp), %rdx        # 8-byte Reload
	movq	1048(%rsp), %rcx        # 8-byte Reload
	movq	1032(%rsp), %r8         # 8-byte Reload
	movl	1040(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	832(%rsp), %rdi         # 8-byte Reload
	movq	912(%rsp), %rsi         # 8-byte Reload
	movq	840(%rsp), %rdx         # 8-byte Reload
	movq	816(%rsp), %rcx         # 8-byte Reload
	movq	864(%rsp), %r8          # 8-byte Reload
	movq	880(%rsp), %r9          # 8-byte Reload
	movq	824(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	816(%rsp), %rdi         # 8-byte Reload
	movq	912(%rsp), %rsi         # 8-byte Reload
	movq	800(%rsp), %rdx         # 8-byte Reload
	movq	816(%rsp), %rcx         # 8-byte Reload
	movq	808(%rsp), %r8          # 8-byte Reload
	movq	880(%rsp), %r9          # 8-byte Reload
	movq	824(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	904(%rsp), %rdi         # 8-byte Reload
	movq	912(%rsp), %rsi         # 8-byte Reload
	movq	896(%rsp), %rdx         # 8-byte Reload
	movq	880(%rsp), %rcx         # 8-byte Reload
	movq	872(%rsp), %r8          # 8-byte Reload
	movq	880(%rsp), %r9          # 8-byte Reload
	movq	824(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$.L.str1, %esi
                                        # kill: RSI<def> ESI<kill>
	xorl	%edi, %edi
	movb	%dil, %al
	movq	800(%rsp), %rdi         # 8-byte Reload
	movl	784(%rsp), %edx         # 4-byte Reload
	movl	788(%rsp), %ecx         # 4-byte Reload
	callq	fprintf
	movabsq	$1, %rsi
	leaq	.L.str33, %rdi
	movabsq	$0, %r8
	leaq	.L.str9, %r9
	movabsq	$2, %r10
	leaq	.L.str35, %r11
	movabsq	$3, %rbx
	leaq	.L.str16, %r14
	movabsq	$21, %r15
	leaq	.L.str5, %r12
	leaq	.L.str12, %r13
	leaq	.L.str34, %rcx
	movl	$0, %edx
	movl	$1, %ebp
	movq	%rcx, 776(%rsp)         # 8-byte Spill
	movabsq	$19134, %rcx            # imm = 0x4ABE
	movq	%rcx, 768(%rsp)         # 8-byte Spill
	movabsq	$32, %rcx
	movq	%rcx, 760(%rsp)         # 8-byte Spill
	leaq	.L.str31, %rcx
	movq	%rcx, 752(%rsp)         # 8-byte Spill
	leaq	.L.str32, %rcx
	movq	%rcx, 744(%rsp)         # 8-byte Spill
	movabsq	$46, %rcx
	movq	%rcx, 736(%rsp)         # 8-byte Spill
	movabsq	$64, %rcx
	movq	%rcx, 728(%rsp)         # 8-byte Spill
	leaq	.L.str26, %rcx
	movq	%rcx, 720(%rsp)         # 8-byte Spill
	movabsq	$27, %rcx
	movq	%rcx, 712(%rsp)         # 8-byte Spill
	leaq	.L.str19, %rcx
	movq	%rcx, 704(%rsp)         # 8-byte Spill
	leaq	.L.str30, %rcx
	.loc	1 21 0                  # mma_test_eigen.c:21:0
.Ltmp24:
	movl	%eax, %eax
                                        # kill: RAX<def> EAX<kill>
	movq	%rax, 696(%rsp)         # 8-byte Spill
	movq	768(%rsp), %rax         # 8-byte Reload
	movq	%rdi, 688(%rsp)         # 8-byte Spill
	movq	%rax, %rdi
	movq	760(%rsp), %rax         # 8-byte Reload
	movq	%rsi, 680(%rsp)         # 8-byte Spill
	movq	%rax, %rsi
	movq	696(%rsp), %rax         # 8-byte Reload
	movl	%edx, 676(%rsp)         # 4-byte Spill
	movq	%rax, %rdx
	movq	680(%rsp), %rax         # 8-byte Reload
	movq	%rcx, 664(%rsp)         # 8-byte Spill
	movq	%rax, %rcx
	movq	664(%rsp), %rax         # 8-byte Reload
	movq	%r8, 656(%rsp)          # 8-byte Spill
	movq	%rax, %r8
	movq	656(%rsp), %rax         # 8-byte Reload
	movq	%r9, 648(%rsp)          # 8-byte Spill
	movq	%rax, %r9
	movq	648(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%ebp, 644(%rsp)         # 4-byte Spill
	movq	%r13, 632(%rsp)         # 8-byte Spill
	movq	%r12, 624(%rsp)         # 8-byte Spill
	movq	%r15, 616(%rsp)         # 8-byte Spill
	movq	%r10, 608(%rsp)         # 8-byte Spill
	movq	%r11, 600(%rsp)         # 8-byte Spill
	movq	%rbx, 592(%rsp)         # 8-byte Spill
	movq	%r14, 584(%rsp)         # 8-byte Spill
	callq	trace_logger_log_int
	movq	616(%rsp), %rdi         # 8-byte Reload
	movq	624(%rsp), %rsi         # 8-byte Reload
	movq	632(%rsp), %rdx         # 8-byte Reload
	movq	752(%rsp), %rcx         # 8-byte Reload
	movq	712(%rsp), %r8          # 8-byte Reload
	movl	676(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	680(%rsp), %rdi         # 8-byte Reload
	movq	728(%rsp), %rsi         # 8-byte Reload
	movq	1072(%rsp), %rdx        # 8-byte Reload
	movq	680(%rsp), %rcx         # 8-byte Reload
	movq	704(%rsp), %r8          # 8-byte Reload
	movq	656(%rsp), %r9          # 8-byte Reload
	movq	648(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1488(%rsp), %rax        # 8-byte Reload
	movq	1368(%rsp), %rcx        # 8-byte Reload
	movl	(%rax,%rcx,4), %ebp
	movl	%ebp, %esi
	movl	%esi, %edx
	movq	768(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	680(%rsp), %rcx         # 8-byte Reload
	movq	752(%rsp), %r8          # 8-byte Reload
	movq	656(%rsp), %r9          # 8-byte Reload
	movq	648(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 580(%rsp)         # 4-byte Spill
	callq	trace_logger_log_int
	movq	616(%rsp), %rdi         # 8-byte Reload
	movq	624(%rsp), %rsi         # 8-byte Reload
	movq	632(%rsp), %rdx         # 8-byte Reload
	movq	744(%rsp), %rcx         # 8-byte Reload
	movq	712(%rsp), %r8          # 8-byte Reload
	movl	676(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	680(%rsp), %rdi         # 8-byte Reload
	movq	728(%rsp), %rsi         # 8-byte Reload
	movq	792(%rsp), %rdx         # 8-byte Reload
	movq	680(%rsp), %rcx         # 8-byte Reload
	movq	720(%rsp), %r8          # 8-byte Reload
	movq	656(%rsp), %r9          # 8-byte Reload
	movq	648(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1496(%rsp), %rax        # 8-byte Reload
	movq	1368(%rsp), %rcx        # 8-byte Reload
	movl	(%rax,%rcx,4), %ebp
	movl	%ebp, %esi
	movl	%esi, %edx
	movq	768(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	680(%rsp), %rcx         # 8-byte Reload
	movq	744(%rsp), %r8          # 8-byte Reload
	movq	656(%rsp), %r9          # 8-byte Reload
	movq	648(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 576(%rsp)         # 4-byte Spill
	callq	trace_logger_log_int
	movq	616(%rsp), %rdi         # 8-byte Reload
	movq	624(%rsp), %rsi         # 8-byte Reload
	movq	632(%rsp), %rdx         # 8-byte Reload
	movq	688(%rsp), %rcx         # 8-byte Reload
	movq	736(%rsp), %r8          # 8-byte Reload
	movl	676(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	576(%rsp), %r9d         # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	608(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	680(%rsp), %rcx         # 8-byte Reload
	movq	744(%rsp), %r8          # 8-byte Reload
	movq	656(%rsp), %r9          # 8-byte Reload
	movq	648(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	580(%rsp), %ebp         # 4-byte Reload
	movl	%ebp, %esi
	movl	%esi, %edx
	movq	680(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	680(%rsp), %rcx         # 8-byte Reload
	movq	752(%rsp), %r8          # 8-byte Reload
	movq	656(%rsp), %r9          # 8-byte Reload
	movq	648(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	580(%rsp), %ebp         # 4-byte Reload
	movl	576(%rsp), %esi         # 4-byte Reload
	cmpl	%esi, %ebp
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	768(%rsp), %rdi         # 8-byte Reload
	movq	680(%rsp), %rsi         # 8-byte Reload
	movq	680(%rsp), %rcx         # 8-byte Reload
	movq	688(%rsp), %r8          # 8-byte Reload
	movq	656(%rsp), %r9          # 8-byte Reload
	movq	648(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 575(%rsp)          # 1-byte Spill
	callq	trace_logger_log_int
	movq	616(%rsp), %rdi         # 8-byte Reload
	movq	624(%rsp), %rsi         # 8-byte Reload
	movq	632(%rsp), %rdx         # 8-byte Reload
	movq	776(%rsp), %rcx         # 8-byte Reload
	movq	608(%rsp), %r8          # 8-byte Reload
	movl	676(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	592(%rsp), %rdi         # 8-byte Reload
	movq	656(%rsp), %rsi         # 8-byte Reload
	movq	656(%rsp), %rdx         # 8-byte Reload
	movq	680(%rsp), %rcx         # 8-byte Reload
	movq	584(%rsp), %r8          # 8-byte Reload
	movq	656(%rsp), %r9          # 8-byte Reload
	movq	648(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	608(%rsp), %rdi         # 8-byte Reload
	movq	656(%rsp), %rsi         # 8-byte Reload
	movq	656(%rsp), %rdx         # 8-byte Reload
	movq	680(%rsp), %rcx         # 8-byte Reload
	movq	600(%rsp), %r8          # 8-byte Reload
	movq	656(%rsp), %r9          # 8-byte Reload
	movq	648(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	575(%rsp), %al          # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	680(%rsp), %rdi         # 8-byte Reload
	movq	680(%rsp), %rsi         # 8-byte Reload
	movq	680(%rsp), %rcx         # 8-byte Reload
	movq	688(%rsp), %r8          # 8-byte Reload
	movq	656(%rsp), %r9          # 8-byte Reload
	movq	648(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	575(%rsp), %al          # 1-byte Reload
	testb	$1, %al
	jne	.LBB0_3
# BB#2:                                 #   in Loop: Header=BB0_1 Depth=1
	movabsq	$2, %rdi
	movabsq	$64, %rax
	leaq	.L.str2, %rdx
	movabsq	$0, %rcx
	leaq	.L.str8, %r8
	leaq	.L.str9, %rsi
	movabsq	$1, %r9
	leaq	.L.str36, %r10
	movabsq	$6, %r11
	leaq	fprintf, %rbx
	leaq	.L.str24, %r14
	movabsq	$22, %r15
	leaq	.L.str5, %r12
	leaq	.L.str35, %r13
	leaq	.L.str38, %rbp
	movq	%rax, 560(%rsp)         # 8-byte Spill
	movabsq	$49, %rax
	movq	%rsi, 552(%rsp)         # 8-byte Spill
	movl	$0, %esi
	movl	%esi, 548(%rsp)         # 4-byte Spill
	movl	$1, %esi
	movq	%rax, 536(%rsp)         # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 528(%rsp)         # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 520(%rsp)         # 8-byte Spill
	leaq	.L.str37, %rax
	movq	%rax, 512(%rsp)         # 8-byte Spill
	leaq	.L.str14, %rax
	movq	%rax, 504(%rsp)         # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, 496(%rsp)         # 8-byte Spill
	leaq	stdout, %rax
	movq	%rax, 488(%rsp)         # 8-byte Spill
	leaq	.L.str18, %rax
	movq	%rax, 480(%rsp)         # 8-byte Spill
	movabsq	$27, %rax
	.loc	1 22 0                  # mma_test_eigen.c:22:0
.Ltmp25:
	movq	%rdi, 472(%rsp)         # 8-byte Spill
	movq	%r15, %rdi
	movl	%esi, 468(%rsp)         # 4-byte Spill
	movq	%r12, %rsi
	movq	%rdx, 456(%rsp)         # 8-byte Spill
	movq	%r13, %rdx
	movq	%rcx, 448(%rsp)         # 8-byte Spill
	movq	%r10, %rcx
	movq	%r8, 440(%rsp)          # 8-byte Spill
	movq	%rax, %r8
	movl	548(%rsp), %eax         # 4-byte Reload
	movq	%r9, 432(%rsp)          # 8-byte Spill
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movq	%rbp, 424(%rsp)         # 8-byte Spill
	movq	%r14, 416(%rsp)         # 8-byte Spill
	movq	%r12, 408(%rsp)         # 8-byte Spill
	movq	%r15, 400(%rsp)         # 8-byte Spill
	movq	%rbx, 392(%rsp)         # 8-byte Spill
	movq	%r13, 384(%rsp)         # 8-byte Spill
	movq	%r10, 376(%rsp)         # 8-byte Spill
	movq	%r11, 368(%rsp)         # 8-byte Spill
	callq	trace_logger_log0
	movq	432(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	movq	488(%rsp), %rdx         # 8-byte Reload
	movq	432(%rsp), %rcx         # 8-byte Reload
	movq	480(%rsp), %r8          # 8-byte Reload
	movq	448(%rsp), %r9          # 8-byte Reload
	movq	552(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	stdout, %rcx
	movq	528(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	movq	%rcx, %rdx
	movq	432(%rsp), %r8          # 8-byte Reload
	movq	%rcx, 360(%rsp)         # 8-byte Spill
	movq	%r8, %rcx
	movq	376(%rsp), %r8          # 8-byte Reload
	movq	448(%rsp), %r9          # 8-byte Reload
	movq	552(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	400(%rsp), %rdi         # 8-byte Reload
	movq	408(%rsp), %rsi         # 8-byte Reload
	movq	384(%rsp), %rdx         # 8-byte Reload
	movq	512(%rsp), %rcx         # 8-byte Reload
	movq	496(%rsp), %r8          # 8-byte Reload
	movl	548(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	432(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	movq	1368(%rsp), %rdx        # 8-byte Reload
	movq	432(%rsp), %rcx         # 8-byte Reload
	movq	504(%rsp), %r8          # 8-byte Reload
	movq	448(%rsp), %r9          # 8-byte Reload
	movq	552(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1368(%rsp), %rcx        # 8-byte Reload
	movl	%ecx, %eax
	movl	%eax, %esi
	movl	%esi, %edx
	movq	528(%rsp), %rdi         # 8-byte Reload
	movq	520(%rsp), %rsi         # 8-byte Reload
	movq	432(%rsp), %rcx         # 8-byte Reload
	movq	512(%rsp), %r8          # 8-byte Reload
	movq	448(%rsp), %r9          # 8-byte Reload
	movq	552(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, 356(%rsp)         # 4-byte Spill
	callq	trace_logger_log_int
	movq	400(%rsp), %rdi         # 8-byte Reload
	movq	408(%rsp), %rsi         # 8-byte Reload
	movq	384(%rsp), %rdx         # 8-byte Reload
	movq	424(%rsp), %rcx         # 8-byte Reload
	movq	536(%rsp), %r8          # 8-byte Reload
	movl	548(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	368(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	movq	392(%rsp), %rdx         # 8-byte Reload
	movq	432(%rsp), %rcx         # 8-byte Reload
	movq	416(%rsp), %r8          # 8-byte Reload
	movq	448(%rsp), %r9          # 8-byte Reload
	movq	552(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	432(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	movq	360(%rsp), %rdx         # 8-byte Reload
	movq	432(%rsp), %rcx         # 8-byte Reload
	movq	376(%rsp), %r8          # 8-byte Reload
	movq	448(%rsp), %r9          # 8-byte Reload
	movq	552(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	472(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	movq	456(%rsp), %rdx         # 8-byte Reload
	movq	448(%rsp), %rcx         # 8-byte Reload
	movq	440(%rsp), %r8          # 8-byte Reload
	movq	448(%rsp), %r9          # 8-byte Reload
	movq	552(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movl	$.L.str2, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
                                        # kill: AL<def> AL<kill> EAX<kill>
	movq	360(%rsp), %rdi         # 8-byte Reload
	movl	356(%rsp), %edx         # 4-byte Reload
	movl	580(%rsp), %ecx         # 4-byte Reload
	movl	576(%rsp), %r8d         # 4-byte Reload
	callq	fprintf
	movabsq	$1, %rsi
	movabsq	$0, %rdi
	leaq	.L.str16, %r8
	leaq	.L.str9, %r9
	movabsq	$25, %r10
	leaq	.L.str5, %r11
	leaq	.L.str35, %rdx
	leaq	.L.str39, %rcx
	movabsq	$2, %rbx
	movl	$0, %ebp
	movl	$1, %r14d
	movabsq	$19134, %r15            # imm = 0x4ABE
	movabsq	$32, %r12
	leaq	.L.str38, %r13
	.loc	1 25 0                  # mma_test_eigen.c:25:0
	movl	%eax, %eax
                                        # kill: RAX<def> EAX<kill>
	movq	%rdi, 344(%rsp)         # 8-byte Spill
	movq	%r15, %rdi
	movq	%rsi, 336(%rsp)         # 8-byte Spill
	movq	%r12, %rsi
	movq	%rdx, 328(%rsp)         # 8-byte Spill
	movq	%rax, %rdx
	movq	336(%rsp), %rax         # 8-byte Reload
	movq	%rcx, 320(%rsp)         # 8-byte Spill
	movq	%rax, %rcx
	movq	%r8, 312(%rsp)          # 8-byte Spill
	movq	%r13, %r8
	movq	344(%rsp), %r15         # 8-byte Reload
	movq	%r9, 304(%rsp)          # 8-byte Spill
	movq	%r15, %r9
	movq	304(%rsp), %r12         # 8-byte Reload
	movq	%r12, (%rsp)
	movl	%r14d, 300(%rsp)        # 4-byte Spill
	movl	%ebp, 296(%rsp)         # 4-byte Spill
	movq	%rbx, 288(%rsp)         # 8-byte Spill
	movq	%r10, 280(%rsp)         # 8-byte Spill
	movq	%r11, 272(%rsp)         # 8-byte Spill
	callq	trace_logger_log_int
	movq	280(%rsp), %rdi         # 8-byte Reload
	movq	272(%rsp), %rsi         # 8-byte Reload
	movq	328(%rsp), %rdx         # 8-byte Reload
	movq	320(%rsp), %rcx         # 8-byte Reload
	movq	288(%rsp), %r8          # 8-byte Reload
	movl	296(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	336(%rsp), %rdi         # 8-byte Reload
	movq	344(%rsp), %rsi         # 8-byte Reload
	movq	344(%rsp), %rdx         # 8-byte Reload
	movq	336(%rsp), %rcx         # 8-byte Reload
	movq	312(%rsp), %r8          # 8-byte Reload
	movq	344(%rsp), %r9          # 8-byte Reload
	movq	304(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
.Ltmp26:
.LBB0_3:                                #   in Loop: Header=BB0_1 Depth=1
	movabsq	$1, %rax
	leaq	.L.str41, %rcx
	movabsq	$0, %rdx
	leaq	.L.str9, %rsi
	movabsq	$2, %rdi
	leaq	.L.str12, %r8
	movabsq	$3, %r9
	leaq	.L.str13, %r10
	movabsq	$18, %r11
	leaq	.L.str5, %rbx
	leaq	.L.str16, %r14
	leaq	.L.str42, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 264(%rsp)         # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 256(%rsp)         # 8-byte Spill
	leaq	.L.str40, %rax
	movq	%rax, 248(%rsp)         # 8-byte Spill
	leaq	.L.str10, %rax
	movq	%rax, 240(%rsp)         # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 232(%rsp)         # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 224(%rsp)         # 8-byte Spill
	leaq	.L.str15, %rax
	movq	%rax, 216(%rsp)         # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, 208(%rsp)         # 8-byte Spill
	leaq	.L.str14, %rax
	movq	%rax, 200(%rsp)         # 8-byte Spill
	leaq	.L.str8, %rax
	movq	%rax, 192(%rsp)         # 8-byte Spill
	movabsq	$8, %rax
	.loc	1 18 0                  # mma_test_eigen.c:18:0
	movq	%rdi, 184(%rsp)         # 8-byte Spill
	movq	%r11, %rdi
	movq	%rsi, 176(%rsp)         # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, 168(%rsp)         # 8-byte Spill
	movq	%r14, %rdx
	movq	%rax, 160(%rsp)         # 8-byte Spill
	movq	216(%rsp), %rax         # 8-byte Reload
	movq	%rcx, 152(%rsp)         # 8-byte Spill
	movq	%rax, %rcx
	movq	160(%rsp), %rax         # 8-byte Reload
	movq	%r8, 144(%rsp)          # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 136(%rsp)          # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r15, 128(%rsp)         # 8-byte Spill
	movl	%ebp, 124(%rsp)         # 4-byte Spill
	movl	%r12d, 120(%rsp)        # 4-byte Spill
	movq	%r13, 112(%rsp)         # 8-byte Spill
	movq	%r14, 104(%rsp)         # 8-byte Spill
	movq	%rbx, 96(%rsp)          # 8-byte Spill
	movq	%r10, 88(%rsp)          # 8-byte Spill
	movq	%r11, 80(%rsp)          # 8-byte Spill
	callq	trace_logger_log0
	movq	184(%rsp), %rdi         # 8-byte Reload
	movq	224(%rsp), %rsi         # 8-byte Reload
	movq	264(%rsp), %rdx         # 8-byte Reload
	movq	168(%rsp), %rcx         # 8-byte Reload
	movq	192(%rsp), %r8          # 8-byte Reload
	movq	168(%rsp), %r9          # 8-byte Reload
	movq	176(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	264(%rsp), %rdi         # 8-byte Reload
	movq	224(%rsp), %rsi         # 8-byte Reload
	movq	1368(%rsp), %rdx        # 8-byte Reload
	movq	264(%rsp), %rcx         # 8-byte Reload
	movq	200(%rsp), %r8          # 8-byte Reload
	movq	168(%rsp), %r9          # 8-byte Reload
	movq	176(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1368(%rsp), %rax        # 8-byte Reload
	addq	$1, %rax
	movq	112(%rsp), %rdi         # 8-byte Reload
	movq	224(%rsp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	movq	264(%rsp), %rcx         # 8-byte Reload
	movq	216(%rsp), %r8          # 8-byte Reload
	movq	168(%rsp), %r9          # 8-byte Reload
	movq	176(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 72(%rsp)          # 8-byte Spill
	callq	trace_logger_log_int
	movq	80(%rsp), %rdi          # 8-byte Reload
	movq	96(%rsp), %rsi          # 8-byte Reload
	movq	104(%rsp), %rdx         # 8-byte Reload
	movq	248(%rsp), %rcx         # 8-byte Reload
	movq	208(%rsp), %r8          # 8-byte Reload
	movl	124(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	264(%rsp), %rdi         # 8-byte Reload
	movq	224(%rsp), %rsi         # 8-byte Reload
	movq	72(%rsp), %rdx          # 8-byte Reload
	movq	264(%rsp), %rcx         # 8-byte Reload
	movq	216(%rsp), %r8          # 8-byte Reload
	movq	168(%rsp), %r9          # 8-byte Reload
	movq	176(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	72(%rsp), %rax          # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	112(%rsp), %rdi         # 8-byte Reload
	movq	256(%rsp), %rsi         # 8-byte Reload
	movq	264(%rsp), %rcx         # 8-byte Reload
	movq	248(%rsp), %r8          # 8-byte Reload
	movq	168(%rsp), %r9          # 8-byte Reload
	movq	176(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 68(%rsp)          # 4-byte Spill
	callq	trace_logger_log_int
	movq	80(%rsp), %rdi          # 8-byte Reload
	movq	96(%rsp), %rsi          # 8-byte Reload
	movq	104(%rsp), %rdx         # 8-byte Reload
	movq	152(%rsp), %rcx         # 8-byte Reload
	movq	232(%rsp), %r8          # 8-byte Reload
	movl	124(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	1588(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	184(%rsp), %rdi         # 8-byte Reload
	movq	256(%rsp), %rsi         # 8-byte Reload
	movq	264(%rsp), %rcx         # 8-byte Reload
	movq	240(%rsp), %r8          # 8-byte Reload
	movq	168(%rsp), %r9          # 8-byte Reload
	movq	176(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	68(%rsp), %ebp          # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	264(%rsp), %rdi         # 8-byte Reload
	movq	256(%rsp), %rsi         # 8-byte Reload
	movq	264(%rsp), %rcx         # 8-byte Reload
	movq	248(%rsp), %r8          # 8-byte Reload
	movq	168(%rsp), %r9          # 8-byte Reload
	movq	176(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	68(%rsp), %ebp          # 4-byte Reload
	movl	1588(%rsp), %r12d       # 4-byte Reload
	cmpl	%r12d, %ebp
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	112(%rsp), %rdi         # 8-byte Reload
	movq	264(%rsp), %rsi         # 8-byte Reload
	movq	264(%rsp), %rcx         # 8-byte Reload
	movq	152(%rsp), %r8          # 8-byte Reload
	movq	168(%rsp), %r9          # 8-byte Reload
	movq	176(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 67(%rsp)           # 1-byte Spill
	callq	trace_logger_log_int
	movq	80(%rsp), %rdi          # 8-byte Reload
	movq	96(%rsp), %rsi          # 8-byte Reload
	movq	104(%rsp), %rdx         # 8-byte Reload
	movq	128(%rsp), %rcx         # 8-byte Reload
	movq	184(%rsp), %r8          # 8-byte Reload
	movl	124(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	136(%rsp), %rdi         # 8-byte Reload
	movq	168(%rsp), %rsi         # 8-byte Reload
	movq	168(%rsp), %rdx         # 8-byte Reload
	movq	264(%rsp), %rcx         # 8-byte Reload
	movq	88(%rsp), %r8           # 8-byte Reload
	movq	168(%rsp), %r9          # 8-byte Reload
	movq	176(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	184(%rsp), %rdi         # 8-byte Reload
	movq	168(%rsp), %rsi         # 8-byte Reload
	movq	168(%rsp), %rdx         # 8-byte Reload
	movq	264(%rsp), %rcx         # 8-byte Reload
	movq	144(%rsp), %r8          # 8-byte Reload
	movq	168(%rsp), %r9          # 8-byte Reload
	movq	176(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	67(%rsp), %al           # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	264(%rsp), %rdi         # 8-byte Reload
	movq	264(%rsp), %rsi         # 8-byte Reload
	movq	264(%rsp), %rcx         # 8-byte Reload
	movq	152(%rsp), %r8          # 8-byte Reload
	movq	168(%rsp), %r9          # 8-byte Reload
	movq	176(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	67(%rsp), %al           # 1-byte Reload
	testb	$1, %al
	movq	72(%rsp), %rcx          # 8-byte Reload
	movq	%rcx, 1376(%rsp)        # 8-byte Spill
	jne	.LBB0_4
	jmp	.LBB0_1
.Ltmp27:
.LBB0_4:                                # %._crit_edge
	movl	$0, %eax
	movabsq	$1, %rcx
	movabsq	$32, %rsi
	movabsq	$0, %rdx
	leaq	.L.str8, %r8
	leaq	.L.str9, %rdi
	movabsq	$28, %r9
	leaq	.L.str5, %r10
	leaq	.L.str13, %r11
	leaq	.L.str43, %rbx
	movl	$1, %ebp
	.loc	1 28 0                  # mma_test_eigen.c:28:0
	movq	%rdi, 56(%rsp)          # 8-byte Spill
	movq	%r9, %rdi
	movq	%rsi, 48(%rsp)          # 8-byte Spill
	movq	%r10, %rsi
	movq	%rdx, 40(%rsp)          # 8-byte Spill
	movq	%r11, %rdx
	movq	%rcx, 32(%rsp)          # 8-byte Spill
	movq	%rbx, %rcx
	movq	32(%rsp), %r9           # 8-byte Reload
	movq	%r8, 24(%rsp)           # 8-byte Spill
	movq	%r9, %r8
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movl	%eax, 20(%rsp)          # 4-byte Spill
	movl	%ebp, 16(%rsp)          # 4-byte Spill
	callq	trace_logger_log0
	movq	32(%rsp), %rdi          # 8-byte Reload
	movq	48(%rsp), %rsi          # 8-byte Reload
	movq	40(%rsp), %rdx          # 8-byte Reload
	movq	40(%rsp), %rcx          # 8-byte Reload
	movq	24(%rsp), %r8           # 8-byte Reload
	movq	40(%rsp), %r9           # 8-byte Reload
	movq	56(%rsp), %r10          # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	20(%rsp), %eax          # 4-byte Reload
	addq	$1592, %rsp             # imm = 0x638
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
.Ltmp28:
.Ltmp29:
	.size	test_stores, .Ltmp29-test_stores
.Lfunc_end0:
	.cfi_endproc

	.section	.rodata.cst8,"aM",@progbits,8
	.align	8
.LCPI1_0:
	.quad	4607182418800017408     # double 1
.LCPI1_1:
	.quad	4611686018427387904     # double 2
.LCPI1_2:
	.quad	4613937818241073152     # double 3
.LCPI1_3:
	.quad	4652007308841189376     # double 1000
	.text
	.globl	store_kernel
	.align	16, 0x90
	.type	store_kernel,@function
store_kernel:                           # @store_kernel
	.cfi_startproc
.Lfunc_begin1:
	.loc	1 33 0                  # mma_test_eigen.c:33:0
# BB#0:
	pushq	%rbp
.Ltmp33:
	.cfi_def_cfa_offset 16
.Ltmp34:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp35:
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$1304, %rsp             # imm = 0x518
.Ltmp36:
	.cfi_offset %rbx, -56
.Ltmp37:
	.cfi_offset %r12, -48
.Ltmp38:
	.cfi_offset %r13, -40
.Ltmp39:
	.cfi_offset %r14, -32
.Ltmp40:
	.cfi_offset %r15, -24
	#DEBUG_VALUE: store_kernel:store_vals <- RDI
	#DEBUG_VALUE: store_kernel:store_loc <- RSI
	#DEBUG_VALUE: store_kernel:num_vals <- EDX
	movl	$0, %ecx
	movabsq	$5, %rax
	movabsq	$64, %r8
	movabsq	$1, %r9
	leaq	.L.str57, %r10
	movabsq	$0, %r11
	leaq	.L.str9, %rbx
	movabsq	$4, %r14
	leaq	.L.str8, %r15
	movabsq	$3, %r12
	leaq	.L.str56, %r13
	movq	%rax, -48(%rbp)         # 8-byte Spill
	movabsq	$2, %rax
	movq	%rax, -56(%rbp)         # 8-byte Spill
	leaq	.L.str46, %rax
	movq	%rax, -64(%rbp)         # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, -72(%rbp)         # 8-byte Spill
	leaq	.L.str10, %rax
	movq	%rax, -80(%rbp)         # 8-byte Spill
	movabsq	$6, %rax
	movq	%rax, -88(%rbp)         # 8-byte Spill
	leaq	rs, %rax
	movq	%rax, -96(%rbp)         # 8-byte Spill
	leaq	.L.str55, %rax
	movq	%rax, -104(%rbp)        # 8-byte Spill
	movabsq	$49, %rax
	movq	%rax, -112(%rbp)        # 8-byte Spill
	leaq	.L.str44, %rax
	movq	%rax, -120(%rbp)        # 8-byte Spill
	leaq	.L.str6, %rax
	movq	%rax, -128(%rbp)        # 8-byte Spill
	leaq	.L.str33, %rax
	movl	%ecx, -132(%rbp)        # 4-byte Spill
	movl	$1, %ecx
	vmovsd	.LCPI1_0, %xmm0
	movq	%rax, -144(%rbp)        # 8-byte Spill
	leaq	.L.str32, %rax
	movq	%rax, -152(%rbp)        # 8-byte Spill
	movabsq	$48, %rax
	movq	%rax, -160(%rbp)        # 8-byte Spill
	leaq	.L.str54, %rax
	movq	%rax, -168(%rbp)        # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, -176(%rbp)        # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, -184(%rbp)        # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, -192(%rbp)        # 8-byte Spill
	movabsq	$29, %rax
	vmovsd	.LCPI1_1, %xmm1
	movq	%rax, -200(%rbp)        # 8-byte Spill
	leaq	.L.str31, %rax
	movq	%rax, -208(%rbp)        # 8-byte Spill
	movabsq	$47, %rax
	movq	%rax, -216(%rbp)        # 8-byte Spill
	leaq	.L.str53, %rax
	movq	%rax, -224(%rbp)        # 8-byte Spill
	movabsq	$7, %rax
	vmovsd	.LCPI1_2, %xmm2
	movq	%rax, -232(%rbp)        # 8-byte Spill
	leaq	.L.str30, %rax
	movq	%rax, -240(%rbp)        # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, -248(%rbp)        # 8-byte Spill
	leaq	.L.str52, %rax
	movq	%rax, -256(%rbp)        # 8-byte Spill
	leaq	.L.str29, %rax
	movq	%rax, -264(%rbp)        # 8-byte Spill
	movabsq	$45, %rax
	movq	%rax, -272(%rbp)        # 8-byte Spill
	leaq	.L.str51, %rax
	movq	%rax, -280(%rbp)        # 8-byte Spill
	leaq	.L.str28, %rax
	movq	%rax, -288(%rbp)        # 8-byte Spill
	movabsq	$44, %rax
	movq	%rax, -296(%rbp)        # 8-byte Spill
	leaq	.L.str50, %rax
	movq	%rax, -304(%rbp)        # 8-byte Spill
	leaq	.L.str26, %rax
	movq	%rax, -312(%rbp)        # 8-byte Spill
	movabsq	$43, %rax
	movq	%rax, -320(%rbp)        # 8-byte Spill
	leaq	.L.str49, %rax
	movq	%rax, -328(%rbp)        # 8-byte Spill
	leaq	.L.str25, %rax
	movq	%rax, -336(%rbp)        # 8-byte Spill
	movabsq	$42, %rax
	movq	%rax, -344(%rbp)        # 8-byte Spill
	leaq	.L.str48, %rax
	movq	%rax, -352(%rbp)        # 8-byte Spill
	leaq	.L.str23, %rax
	movq	%rax, -360(%rbp)        # 8-byte Spill
	movabsq	$41, %rax
	movq	%rax, -368(%rbp)        # 8-byte Spill
	leaq	.L.str47, %rax
	movq	%rax, -376(%rbp)        # 8-byte Spill
	movabsq	$40, %rax
	movq	%rax, -384(%rbp)        # 8-byte Spill
	leaq	.L.str45, %rax
	movq	%rax, -392(%rbp)        # 8-byte Spill
	leaq	.L.str22, %rax
	.loc	1 33 0 prologue_end     # mma_test_eigen.c:33:0
.Ltmp41:
	movl	%ecx, -396(%rbp)        # 4-byte Spill
	movl	$.L.str44, %ecx
                                        # kill: RCX<def> ECX<kill>
	movl	%edx, -400(%rbp)        # 4-byte Spill
.Ltmp42:
	#DEBUG_VALUE: store_kernel:num_vals <- [RBP+-400]
	movl	$3, %edx
                                        # kill: RDX<def> EDX<kill>
	movq	%rdi, -408(%rbp)        # 8-byte Spill
.Ltmp43:
	#DEBUG_VALUE: store_kernel:store_vals <- [RBP+-408]
	movq	%rcx, %rdi
	movq	%rsi, -416(%rbp)        # 8-byte Spill
.Ltmp44:
	#DEBUG_VALUE: store_kernel:store_loc <- [RBP+-416]
	movq	%rdx, %rsi
	vmovsd	%xmm1, -424(%rbp)       # 8-byte Spill
	movq	%rdx, -432(%rbp)        # 8-byte Spill
	movq	%rcx, -440(%rbp)        # 8-byte Spill
	vmovsd	%xmm2, -448(%rbp)       # 8-byte Spill
	movq	%rax, -456(%rbp)        # 8-byte Spill
	movq	%r8, -464(%rbp)         # 8-byte Spill
	movq	%r9, -472(%rbp)         # 8-byte Spill
	movq	%r10, -480(%rbp)        # 8-byte Spill
	movq	%r11, -488(%rbp)        # 8-byte Spill
	movq	%rbx, -496(%rbp)        # 8-byte Spill
	movq	%r14, -504(%rbp)        # 8-byte Spill
	movq	%r15, -512(%rbp)        # 8-byte Spill
	movq	%r12, -520(%rbp)        # 8-byte Spill
	movq	%r13, -528(%rbp)        # 8-byte Spill
	vmovsd	%xmm0, -536(%rbp)       # 8-byte Spill
	callq	trace_logger_log_entry
	subq	$16, %rsp
	movq	%rsp, %rax
	movq	$.L.str9, (%rax)
	movl	$.L.str27, %esi
	movl	%esi, %r8d
	movl	$64, %esi
	movl	%esi, %eax
	movl	$1, %esi
	movl	%esi, %ecx
	xorl	%esi, %esi
	movl	%esi, %edx
	movq	%rcx, %rdi
	movq	%rax, %rsi
	movq	-408(%rbp), %r9         # 8-byte Reload
	movq	%rdx, -544(%rbp)        # 8-byte Spill
	movq	%r9, %rdx
	movq	%rcx, -552(%rbp)        # 8-byte Spill
	movq	-544(%rbp), %r9         # 8-byte Reload
	movq	%rax, -560(%rbp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rax
	movq	$.L.str9, (%rax)
	movl	$.L.str20, %esi
	movl	%esi, %r8d
	movl	$2, %esi
	movl	%esi, %eax
	movq	%rax, %rdi
	movq	-560(%rbp), %rsi        # 8-byte Reload
	movq	-416(%rbp), %rdx        # 8-byte Reload
	movq	-552(%rbp), %rcx        # 8-byte Reload
	movq	-544(%rbp), %r9         # 8-byte Reload
	movq	%rax, -568(%rbp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movl	-400(%rbp), %esi        # 4-byte Reload
	movl	%esi, %esi
	movl	%esi, %eax
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str9, (%rcx)
	movl	$.L.str10, %esi
	movl	%esi, %ecx
	movl	$32, %esi
	movl	%esi, %edx
	movq	-432(%rbp), %rdi        # 8-byte Reload
	movq	%rdx, %rsi
	movq	%rdx, -576(%rbp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	-552(%rbp), %r8         # 8-byte Reload
	movq	%rcx, -584(%rbp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	-584(%rbp), %r8         # 8-byte Reload
	movq	-544(%rbp), %r9         # 8-byte Reload
	movq	%rax, -592(%rbp)        # 8-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	.loc	1 34 0                  # mma_test_eigen.c:34:0
	subq	$16, %rsp
	movq	%rsp, %rax
	movl	$1, (%rax)
	movl	$.L.str6, %esi
	movl	%esi, %eax
	movl	$.L.str7, %esi
	movl	%esi, %ecx
	movl	$34, %esi
	movl	%esi, %edx
	movl	$12, %esi
	movl	%esi, %r8d
	movl	$1, %esi
	movq	%rdx, %rdi
	movq	-440(%rbp), %r9         # 8-byte Reload
	movl	%esi, -596(%rbp)        # 4-byte Spill
	movq	%r9, %rsi
	movq	%rdx, -608(%rbp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	%rcx, -616(%rbp)        # 8-byte Spill
	movl	-596(%rbp), %r9d        # 4-byte Reload
	movq	%rax, -624(%rbp)        # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rax
	movq	$.L.str9, (%rax)
	movq	-568(%rbp), %rdi        # 8-byte Reload
	movq	-576(%rbp), %rsi        # 8-byte Reload
	movq	-592(%rbp), %rdx        # 8-byte Reload
	movq	-552(%rbp), %rcx        # 8-byte Reload
	movq	-584(%rbp), %r8         # 8-byte Reload
	movq	-544(%rbp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rax
	movq	$.L.str9, (%rax)
	movq	-552(%rbp), %rdi        # 8-byte Reload
	movq	-576(%rbp), %rsi        # 8-byte Reload
	movq	-592(%rbp), %rdx        # 8-byte Reload
	movq	-552(%rbp), %rcx        # 8-byte Reload
	movq	-584(%rbp), %r8         # 8-byte Reload
	movq	-544(%rbp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-400(%rbp), %esi        # 4-byte Reload
	imull	%esi, %esi
	movl	%esi, %eax
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str9, (%rcx)
	movl	$19134, %esi            # imm = 0x4ABE
	movl	%esi, %ecx
	movq	%rcx, %rdi
	movq	-576(%rbp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	-552(%rbp), %r8         # 8-byte Reload
	movq	%rcx, -632(%rbp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	-616(%rbp), %r8         # 8-byte Reload
	movq	-544(%rbp), %r9         # 8-byte Reload
	movq	%rax, -640(%rbp)        # 8-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rax
	movl	$1, (%rax)
	movl	$.L.str17, %esi
	movl	%esi, %eax
	movq	-608(%rbp), %rdi        # 8-byte Reload
	movq	-440(%rbp), %rsi        # 8-byte Reload
	movq	-624(%rbp), %rdx        # 8-byte Reload
	movq	%rax, %rcx
	movq	-608(%rbp), %r8         # 8-byte Reload
	movl	-596(%rbp), %r9d        # 4-byte Reload
	movq	%rax, -648(%rbp)        # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rax
	movq	$.L.str9, (%rax)
	movq	-552(%rbp), %rdi        # 8-byte Reload
	movq	-576(%rbp), %rsi        # 8-byte Reload
	movq	-640(%rbp), %rdx        # 8-byte Reload
	movq	-552(%rbp), %rcx        # 8-byte Reload
	movq	-616(%rbp), %r8         # 8-byte Reload
	movq	-544(%rbp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rax
	movq	$.L.str9, (%rax)
	movq	-632(%rbp), %rdi        # 8-byte Reload
	movq	-560(%rbp), %rsi        # 8-byte Reload
	movq	-640(%rbp), %rdx        # 8-byte Reload
	movq	-552(%rbp), %rcx        # 8-byte Reload
	movq	-648(%rbp), %r8         # 8-byte Reload
	movq	-544(%rbp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rax
	movl	$1, (%rax)
	movl	$.L.str19, %esi
	movl	%esi, %eax
	movl	$26, %esi
	movl	%esi, %ecx
	movq	-608(%rbp), %rdi        # 8-byte Reload
	movq	-440(%rbp), %rsi        # 8-byte Reload
	movq	-624(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -656(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-656(%rbp), %r8         # 8-byte Reload
	movl	-596(%rbp), %r9d        # 4-byte Reload
	movq	%rax, -664(%rbp)        # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rax
	movq	$.L.str9, (%rax)
	movq	-552(%rbp), %rdi        # 8-byte Reload
	movq	-560(%rbp), %rsi        # 8-byte Reload
	movq	-640(%rbp), %rdx        # 8-byte Reload
	movq	-552(%rbp), %rcx        # 8-byte Reload
	movq	-648(%rbp), %r8         # 8-byte Reload
	movq	-544(%rbp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-640(%rbp), %rax        # 8-byte Reload
	leaq	15(,%rax,8), %rcx
	andq	$-16, %rcx
	movq	%rsp, %rdx
	subq	%rcx, %rdx
	movq	%rdx, %rsp
	subq	$16, %rsp
	movq	%rsp, %rsi
	movq	$.L.str9, (%rsi)
	movq	-632(%rbp), %rdi        # 8-byte Reload
	movq	-560(%rbp), %rsi        # 8-byte Reload
	movq	%rdx, -672(%rbp)        # 8-byte Spill
	movq	-552(%rbp), %r8         # 8-byte Reload
	movq	%rcx, -680(%rbp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	-664(%rbp), %r8         # 8-byte Reload
	movq	-544(%rbp), %r9         # 8-byte Reload
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	.loc	1 35 0                  # mma_test_eigen.c:35:0
	subq	$16, %rsp
	movq	%rsp, %rax
	movl	$1, (%rax)
	movl	$.L.str21, %esi
	movl	%esi, %eax
	movl	$35, %esi
	movl	%esi, %edi
	movq	-440(%rbp), %rsi        # 8-byte Reload
	movq	-624(%rbp), %rdx        # 8-byte Reload
	movq	%rax, %rcx
	movq	-656(%rbp), %r8         # 8-byte Reload
	movl	-596(%rbp), %r9d        # 4-byte Reload
	movq	%rax, -688(%rbp)        # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rax
	movq	$.L.str9, (%rax)
	movq	-552(%rbp), %rdi        # 8-byte Reload
	movq	-560(%rbp), %rsi        # 8-byte Reload
	movq	-640(%rbp), %rdx        # 8-byte Reload
	movq	-552(%rbp), %rcx        # 8-byte Reload
	movq	-648(%rbp), %r8         # 8-byte Reload
	movq	-544(%rbp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	%rsp, %rax
	movq	-680(%rbp), %rcx        # 8-byte Reload
	subq	%rcx, %rax
	movq	%rax, %rsp
	subq	$16, %rsp
	movq	%rsp, %rdx
	movq	$.L.str9, (%rdx)
	movq	-632(%rbp), %rdi        # 8-byte Reload
	movq	-560(%rbp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	-552(%rbp), %rcx        # 8-byte Reload
	movq	-688(%rbp), %r8         # 8-byte Reload
	movq	-544(%rbp), %r9         # 8-byte Reload
	movq	%rax, -696(%rbp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	.loc	1 36 0                  # mma_test_eigen.c:36:0
	subq	$16, %rsp
	movq	%rsp, %rax
	movl	$1, (%rax)
	movl	$.L.str22, %esi
	movl	%esi, %ecx
	movl	$36, %esi
	movl	%esi, %edi
	movq	-440(%rbp), %rsi        # 8-byte Reload
	movq	-624(%rbp), %rdx        # 8-byte Reload
	movq	-656(%rbp), %r8         # 8-byte Reload
	movl	-596(%rbp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rax
	movq	$.L.str9, (%rax)
	movq	-552(%rbp), %rdi        # 8-byte Reload
	movq	-560(%rbp), %rsi        # 8-byte Reload
	movq	-640(%rbp), %rdx        # 8-byte Reload
	movq	-552(%rbp), %rcx        # 8-byte Reload
	movq	-648(%rbp), %r8         # 8-byte Reload
	movq	-544(%rbp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	%rsp, %rax
	movq	-680(%rbp), %rcx        # 8-byte Reload
	subq	%rcx, %rax
	movq	%rax, %rsp
	subq	$16, %rsp
	movq	-184(%rbp), %rdi        # 8-byte Reload
	movq	-464(%rbp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	-472(%rbp), %rcx        # 8-byte Reload
	movq	-456(%rbp), %r8         # 8-byte Reload
	movq	-488(%rbp), %r9         # 8-byte Reload
	movq	-496(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, -704(%rbp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	addq	$16, %rsp
.Ltmp45:
	#DEBUG_VALUE: store_kernel:z <- [RBP+-704]
	.loc	1 40 0                  # mma_test_eigen.c:40:0
	subq	$16, %rsp
	movq	-384(%rbp), %rdi        # 8-byte Reload
	movq	-120(%rbp), %rsi        # 8-byte Reload
	movq	-128(%rbp), %rdx        # 8-byte Reload
	movq	-392(%rbp), %rcx        # 8-byte Reload
	movq	-176(%rbp), %r8         # 8-byte Reload
	movl	-396(%rbp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-56(%rbp), %rdi         # 8-byte Reload
	movq	-464(%rbp), %rsi        # 8-byte Reload
	movq	-672(%rbp), %rdx        # 8-byte Reload
	movq	-472(%rbp), %rcx        # 8-byte Reload
	movq	-64(%rbp), %r8          # 8-byte Reload
	movq	-488(%rbp), %r9         # 8-byte Reload
	movq	-496(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-472(%rbp), %rdi        # 8-byte Reload
	movq	-464(%rbp), %rsi        # 8-byte Reload
	vmovsd	-536(%rbp), %xmm0       # 8-byte Reload
	movq	-488(%rbp), %rdx        # 8-byte Reload
	movq	-512(%rbp), %rcx        # 8-byte Reload
	movq	-488(%rbp), %r8         # 8-byte Reload
	movq	-496(%rbp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	-672(%rbp), %rax        # 8-byte Reload
	vmovsd	-536(%rbp), %xmm0       # 8-byte Reload
	vmovsd	%xmm0, (%rax)
	.loc	1 41 0                  # mma_test_eigen.c:41:0
	subq	$16, %rsp
	movq	-368(%rbp), %rdi        # 8-byte Reload
	movq	-120(%rbp), %rsi        # 8-byte Reload
	movq	-128(%rbp), %rdx        # 8-byte Reload
	movq	-360(%rbp), %rcx        # 8-byte Reload
	movq	-200(%rbp), %r8         # 8-byte Reload
	movl	-396(%rbp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-56(%rbp), %rdi         # 8-byte Reload
	movq	-464(%rbp), %rsi        # 8-byte Reload
	movq	-472(%rbp), %rdx        # 8-byte Reload
	movq	-488(%rbp), %rcx        # 8-byte Reload
	movq	-512(%rbp), %r8         # 8-byte Reload
	movq	-488(%rbp), %r9         # 8-byte Reload
	movq	-496(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-472(%rbp), %rdi        # 8-byte Reload
	movq	-464(%rbp), %rsi        # 8-byte Reload
	movq	-672(%rbp), %rdx        # 8-byte Reload
	movq	-472(%rbp), %rcx        # 8-byte Reload
	movq	-64(%rbp), %r8          # 8-byte Reload
	movq	-488(%rbp), %r9         # 8-byte Reload
	movq	-496(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-672(%rbp), %rax        # 8-byte Reload
	addq	$8, %rax
	subq	$16, %rsp
	movq	-184(%rbp), %rdi        # 8-byte Reload
	movq	-464(%rbp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	-472(%rbp), %rcx        # 8-byte Reload
	movq	-360(%rbp), %r8         # 8-byte Reload
	movq	-488(%rbp), %r9         # 8-byte Reload
	movq	-496(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, -712(%rbp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-368(%rbp), %rdi        # 8-byte Reload
	movq	-120(%rbp), %rsi        # 8-byte Reload
	movq	-128(%rbp), %rdx        # 8-byte Reload
	movq	-376(%rbp), %rcx        # 8-byte Reload
	movq	-176(%rbp), %r8         # 8-byte Reload
	movl	-396(%rbp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-56(%rbp), %rdi         # 8-byte Reload
	movq	-464(%rbp), %rsi        # 8-byte Reload
	movq	-712(%rbp), %rdx        # 8-byte Reload
	movq	-472(%rbp), %rcx        # 8-byte Reload
	movq	-360(%rbp), %r8         # 8-byte Reload
	movq	-488(%rbp), %r9         # 8-byte Reload
	movq	-496(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-472(%rbp), %rdi        # 8-byte Reload
	movq	-464(%rbp), %rsi        # 8-byte Reload
	vmovsd	-424(%rbp), %xmm0       # 8-byte Reload
	movq	-488(%rbp), %rdx        # 8-byte Reload
	movq	-512(%rbp), %rcx        # 8-byte Reload
	movq	-488(%rbp), %r8         # 8-byte Reload
	movq	-496(%rbp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	-672(%rbp), %rax        # 8-byte Reload
	vmovsd	-424(%rbp), %xmm0       # 8-byte Reload
	vmovsd	%xmm0, 8(%rax)
	.loc	1 42 0                  # mma_test_eigen.c:42:0
	subq	$16, %rsp
	movq	-344(%rbp), %rdi        # 8-byte Reload
	movq	-120(%rbp), %rsi        # 8-byte Reload
	movq	-128(%rbp), %rdx        # 8-byte Reload
	movq	-336(%rbp), %rcx        # 8-byte Reload
	movq	-200(%rbp), %r8         # 8-byte Reload
	movl	-396(%rbp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-56(%rbp), %rdi         # 8-byte Reload
	movq	-464(%rbp), %rsi        # 8-byte Reload
	movq	-56(%rbp), %rdx         # 8-byte Reload
	movq	-488(%rbp), %rcx        # 8-byte Reload
	movq	-512(%rbp), %r8         # 8-byte Reload
	movq	-488(%rbp), %r9         # 8-byte Reload
	movq	-496(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-472(%rbp), %rdi        # 8-byte Reload
	movq	-464(%rbp), %rsi        # 8-byte Reload
	movq	-672(%rbp), %rdx        # 8-byte Reload
	movq	-472(%rbp), %rcx        # 8-byte Reload
	movq	-64(%rbp), %r8          # 8-byte Reload
	movq	-488(%rbp), %r9         # 8-byte Reload
	movq	-496(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-672(%rbp), %rax        # 8-byte Reload
	addq	$16, %rax
	subq	$16, %rsp
	movq	-184(%rbp), %rdi        # 8-byte Reload
	movq	-464(%rbp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	-472(%rbp), %rcx        # 8-byte Reload
	movq	-336(%rbp), %r8         # 8-byte Reload
	movq	-488(%rbp), %r9         # 8-byte Reload
	movq	-496(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, -720(%rbp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-344(%rbp), %rdi        # 8-byte Reload
	movq	-120(%rbp), %rsi        # 8-byte Reload
	movq	-128(%rbp), %rdx        # 8-byte Reload
	movq	-352(%rbp), %rcx        # 8-byte Reload
	movq	-176(%rbp), %r8         # 8-byte Reload
	movl	-396(%rbp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-56(%rbp), %rdi         # 8-byte Reload
	movq	-464(%rbp), %rsi        # 8-byte Reload
	movq	-720(%rbp), %rdx        # 8-byte Reload
	movq	-472(%rbp), %rcx        # 8-byte Reload
	movq	-336(%rbp), %r8         # 8-byte Reload
	movq	-488(%rbp), %r9         # 8-byte Reload
	movq	-496(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-472(%rbp), %rdi        # 8-byte Reload
	movq	-464(%rbp), %rsi        # 8-byte Reload
	vmovsd	-448(%rbp), %xmm0       # 8-byte Reload
	movq	-488(%rbp), %rdx        # 8-byte Reload
	movq	-512(%rbp), %rcx        # 8-byte Reload
	movq	-488(%rbp), %r8         # 8-byte Reload
	movq	-496(%rbp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	-672(%rbp), %rax        # 8-byte Reload
	vmovsd	-448(%rbp), %xmm0       # 8-byte Reload
	vmovsd	%xmm0, 16(%rax)
	.loc	1 43 0                  # mma_test_eigen.c:43:0
	subq	$16, %rsp
	movq	-320(%rbp), %rdi        # 8-byte Reload
	movq	-120(%rbp), %rsi        # 8-byte Reload
	movq	-128(%rbp), %rdx        # 8-byte Reload
	movq	-312(%rbp), %rcx        # 8-byte Reload
	movq	-200(%rbp), %r8         # 8-byte Reload
	movl	-396(%rbp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-56(%rbp), %rdi         # 8-byte Reload
	movq	-464(%rbp), %rsi        # 8-byte Reload
	movq	-520(%rbp), %rdx        # 8-byte Reload
	movq	-488(%rbp), %rcx        # 8-byte Reload
	movq	-512(%rbp), %r8         # 8-byte Reload
	movq	-488(%rbp), %r9         # 8-byte Reload
	movq	-496(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-472(%rbp), %rdi        # 8-byte Reload
	movq	-464(%rbp), %rsi        # 8-byte Reload
	movq	-672(%rbp), %rdx        # 8-byte Reload
	movq	-472(%rbp), %rcx        # 8-byte Reload
	movq	-64(%rbp), %r8          # 8-byte Reload
	movq	-488(%rbp), %r9         # 8-byte Reload
	movq	-496(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-672(%rbp), %rax        # 8-byte Reload
	addq	$24, %rax
	subq	$16, %rsp
	movq	-184(%rbp), %rdi        # 8-byte Reload
	movq	-464(%rbp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	-472(%rbp), %rcx        # 8-byte Reload
	movq	-312(%rbp), %r8         # 8-byte Reload
	movq	-488(%rbp), %r9         # 8-byte Reload
	movq	-496(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, -728(%rbp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-320(%rbp), %rdi        # 8-byte Reload
	movq	-120(%rbp), %rsi        # 8-byte Reload
	movq	-128(%rbp), %rdx        # 8-byte Reload
	movq	-328(%rbp), %rcx        # 8-byte Reload
	movq	-176(%rbp), %r8         # 8-byte Reload
	movl	-396(%rbp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-56(%rbp), %rdi         # 8-byte Reload
	movq	-464(%rbp), %rsi        # 8-byte Reload
	movq	-728(%rbp), %rdx        # 8-byte Reload
	movq	-472(%rbp), %rcx        # 8-byte Reload
	movq	-312(%rbp), %r8         # 8-byte Reload
	movq	-488(%rbp), %r9         # 8-byte Reload
	movq	-496(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-472(%rbp), %rdi        # 8-byte Reload
	movq	-464(%rbp), %rsi        # 8-byte Reload
	vmovsd	-424(%rbp), %xmm0       # 8-byte Reload
	movq	-488(%rbp), %rdx        # 8-byte Reload
	movq	-512(%rbp), %rcx        # 8-byte Reload
	movq	-488(%rbp), %r8         # 8-byte Reload
	movq	-496(%rbp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	-672(%rbp), %rax        # 8-byte Reload
	vmovsd	-424(%rbp), %xmm0       # 8-byte Reload
	vmovsd	%xmm0, 24(%rax)
	.loc	1 44 0                  # mma_test_eigen.c:44:0
	subq	$16, %rsp
	movq	-296(%rbp), %rdi        # 8-byte Reload
	movq	-120(%rbp), %rsi        # 8-byte Reload
	movq	-128(%rbp), %rdx        # 8-byte Reload
	movq	-288(%rbp), %rcx        # 8-byte Reload
	movq	-200(%rbp), %r8         # 8-byte Reload
	movl	-396(%rbp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-56(%rbp), %rdi         # 8-byte Reload
	movq	-464(%rbp), %rsi        # 8-byte Reload
	movq	-504(%rbp), %rdx        # 8-byte Reload
	movq	-488(%rbp), %rcx        # 8-byte Reload
	movq	-512(%rbp), %r8         # 8-byte Reload
	movq	-488(%rbp), %r9         # 8-byte Reload
	movq	-496(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-472(%rbp), %rdi        # 8-byte Reload
	movq	-464(%rbp), %rsi        # 8-byte Reload
	movq	-672(%rbp), %rdx        # 8-byte Reload
	movq	-472(%rbp), %rcx        # 8-byte Reload
	movq	-64(%rbp), %r8          # 8-byte Reload
	movq	-488(%rbp), %r9         # 8-byte Reload
	movq	-496(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-672(%rbp), %rax        # 8-byte Reload
	addq	$32, %rax
	subq	$16, %rsp
	movq	-184(%rbp), %rdi        # 8-byte Reload
	movq	-464(%rbp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	-472(%rbp), %rcx        # 8-byte Reload
	movq	-288(%rbp), %r8         # 8-byte Reload
	movq	-488(%rbp), %r9         # 8-byte Reload
	movq	-496(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, -736(%rbp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-296(%rbp), %rdi        # 8-byte Reload
	movq	-120(%rbp), %rsi        # 8-byte Reload
	movq	-128(%rbp), %rdx        # 8-byte Reload
	movq	-304(%rbp), %rcx        # 8-byte Reload
	movq	-176(%rbp), %r8         # 8-byte Reload
	movl	-396(%rbp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-56(%rbp), %rdi         # 8-byte Reload
	movq	-464(%rbp), %rsi        # 8-byte Reload
	movq	-736(%rbp), %rdx        # 8-byte Reload
	movq	-472(%rbp), %rcx        # 8-byte Reload
	movq	-288(%rbp), %r8         # 8-byte Reload
	movq	-488(%rbp), %r9         # 8-byte Reload
	movq	-496(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-472(%rbp), %rdi        # 8-byte Reload
	movq	-464(%rbp), %rsi        # 8-byte Reload
	vmovsd	-536(%rbp), %xmm0       # 8-byte Reload
	movq	-488(%rbp), %rdx        # 8-byte Reload
	movq	-512(%rbp), %rcx        # 8-byte Reload
	movq	-488(%rbp), %r8         # 8-byte Reload
	movq	-496(%rbp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	-672(%rbp), %rax        # 8-byte Reload
	vmovsd	-536(%rbp), %xmm0       # 8-byte Reload
	vmovsd	%xmm0, 32(%rax)
	.loc	1 45 0                  # mma_test_eigen.c:45:0
	subq	$16, %rsp
	movq	-272(%rbp), %rdi        # 8-byte Reload
	movq	-120(%rbp), %rsi        # 8-byte Reload
	movq	-128(%rbp), %rdx        # 8-byte Reload
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	-200(%rbp), %r8         # 8-byte Reload
	movl	-396(%rbp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-56(%rbp), %rdi         # 8-byte Reload
	movq	-464(%rbp), %rsi        # 8-byte Reload
	movq	-48(%rbp), %rdx         # 8-byte Reload
	movq	-488(%rbp), %rcx        # 8-byte Reload
	movq	-512(%rbp), %r8         # 8-byte Reload
	movq	-488(%rbp), %r9         # 8-byte Reload
	movq	-496(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-472(%rbp), %rdi        # 8-byte Reload
	movq	-464(%rbp), %rsi        # 8-byte Reload
	movq	-672(%rbp), %rdx        # 8-byte Reload
	movq	-472(%rbp), %rcx        # 8-byte Reload
	movq	-64(%rbp), %r8          # 8-byte Reload
	movq	-488(%rbp), %r9         # 8-byte Reload
	movq	-496(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-672(%rbp), %rax        # 8-byte Reload
	addq	$40, %rax
	subq	$16, %rsp
	movq	-184(%rbp), %rdi        # 8-byte Reload
	movq	-464(%rbp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	-472(%rbp), %rcx        # 8-byte Reload
	movq	-264(%rbp), %r8         # 8-byte Reload
	movq	-488(%rbp), %r9         # 8-byte Reload
	movq	-496(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, -744(%rbp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-272(%rbp), %rdi        # 8-byte Reload
	movq	-120(%rbp), %rsi        # 8-byte Reload
	movq	-128(%rbp), %rdx        # 8-byte Reload
	movq	-280(%rbp), %rcx        # 8-byte Reload
	movq	-176(%rbp), %r8         # 8-byte Reload
	movl	-396(%rbp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-56(%rbp), %rdi         # 8-byte Reload
	movq	-464(%rbp), %rsi        # 8-byte Reload
	movq	-744(%rbp), %rdx        # 8-byte Reload
	movq	-472(%rbp), %rcx        # 8-byte Reload
	movq	-264(%rbp), %r8         # 8-byte Reload
	movq	-488(%rbp), %r9         # 8-byte Reload
	movq	-496(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-472(%rbp), %rdi        # 8-byte Reload
	movq	-464(%rbp), %rsi        # 8-byte Reload
	vmovsd	-424(%rbp), %xmm0       # 8-byte Reload
	movq	-488(%rbp), %rdx        # 8-byte Reload
	movq	-512(%rbp), %rcx        # 8-byte Reload
	movq	-488(%rbp), %r8         # 8-byte Reload
	movq	-496(%rbp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	-672(%rbp), %rax        # 8-byte Reload
	vmovsd	-424(%rbp), %xmm0       # 8-byte Reload
	vmovsd	%xmm0, 40(%rax)
	.loc	1 46 0                  # mma_test_eigen.c:46:0
	subq	$16, %rsp
	movq	-248(%rbp), %rdi        # 8-byte Reload
	movq	-120(%rbp), %rsi        # 8-byte Reload
	movq	-128(%rbp), %rdx        # 8-byte Reload
	movq	-240(%rbp), %rcx        # 8-byte Reload
	movq	-200(%rbp), %r8         # 8-byte Reload
	movl	-396(%rbp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-56(%rbp), %rdi         # 8-byte Reload
	movq	-464(%rbp), %rsi        # 8-byte Reload
	movq	-88(%rbp), %rdx         # 8-byte Reload
	movq	-488(%rbp), %rcx        # 8-byte Reload
	movq	-512(%rbp), %r8         # 8-byte Reload
	movq	-488(%rbp), %r9         # 8-byte Reload
	movq	-496(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-472(%rbp), %rdi        # 8-byte Reload
	movq	-464(%rbp), %rsi        # 8-byte Reload
	movq	-672(%rbp), %rdx        # 8-byte Reload
	movq	-472(%rbp), %rcx        # 8-byte Reload
	movq	-64(%rbp), %r8          # 8-byte Reload
	movq	-488(%rbp), %r9         # 8-byte Reload
	movq	-496(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-672(%rbp), %rax        # 8-byte Reload
	addq	$48, %rax
	subq	$16, %rsp
	movq	-184(%rbp), %rdi        # 8-byte Reload
	movq	-464(%rbp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	-472(%rbp), %rcx        # 8-byte Reload
	movq	-240(%rbp), %r8         # 8-byte Reload
	movq	-488(%rbp), %r9         # 8-byte Reload
	movq	-496(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, -752(%rbp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-248(%rbp), %rdi        # 8-byte Reload
	movq	-120(%rbp), %rsi        # 8-byte Reload
	movq	-128(%rbp), %rdx        # 8-byte Reload
	movq	-256(%rbp), %rcx        # 8-byte Reload
	movq	-176(%rbp), %r8         # 8-byte Reload
	movl	-396(%rbp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-56(%rbp), %rdi         # 8-byte Reload
	movq	-464(%rbp), %rsi        # 8-byte Reload
	movq	-752(%rbp), %rdx        # 8-byte Reload
	movq	-472(%rbp), %rcx        # 8-byte Reload
	movq	-240(%rbp), %r8         # 8-byte Reload
	movq	-488(%rbp), %r9         # 8-byte Reload
	movq	-496(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-472(%rbp), %rdi        # 8-byte Reload
	movq	-464(%rbp), %rsi        # 8-byte Reload
	vmovsd	-448(%rbp), %xmm0       # 8-byte Reload
	movq	-488(%rbp), %rdx        # 8-byte Reload
	movq	-512(%rbp), %rcx        # 8-byte Reload
	movq	-488(%rbp), %r8         # 8-byte Reload
	movq	-496(%rbp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	-672(%rbp), %rax        # 8-byte Reload
	vmovsd	-448(%rbp), %xmm0       # 8-byte Reload
	vmovsd	%xmm0, 48(%rax)
	.loc	1 47 0                  # mma_test_eigen.c:47:0
	subq	$16, %rsp
	movq	-216(%rbp), %rdi        # 8-byte Reload
	movq	-120(%rbp), %rsi        # 8-byte Reload
	movq	-128(%rbp), %rdx        # 8-byte Reload
	movq	-208(%rbp), %rcx        # 8-byte Reload
	movq	-200(%rbp), %r8         # 8-byte Reload
	movl	-396(%rbp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-56(%rbp), %rdi         # 8-byte Reload
	movq	-464(%rbp), %rsi        # 8-byte Reload
	movq	-232(%rbp), %rdx        # 8-byte Reload
	movq	-488(%rbp), %rcx        # 8-byte Reload
	movq	-512(%rbp), %r8         # 8-byte Reload
	movq	-488(%rbp), %r9         # 8-byte Reload
	movq	-496(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-472(%rbp), %rdi        # 8-byte Reload
	movq	-464(%rbp), %rsi        # 8-byte Reload
	movq	-672(%rbp), %rdx        # 8-byte Reload
	movq	-472(%rbp), %rcx        # 8-byte Reload
	movq	-64(%rbp), %r8          # 8-byte Reload
	movq	-488(%rbp), %r9         # 8-byte Reload
	movq	-496(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-672(%rbp), %rax        # 8-byte Reload
	addq	$56, %rax
	subq	$16, %rsp
	movq	-184(%rbp), %rdi        # 8-byte Reload
	movq	-464(%rbp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	-472(%rbp), %rcx        # 8-byte Reload
	movq	-208(%rbp), %r8         # 8-byte Reload
	movq	-488(%rbp), %r9         # 8-byte Reload
	movq	-496(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, -760(%rbp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-216(%rbp), %rdi        # 8-byte Reload
	movq	-120(%rbp), %rsi        # 8-byte Reload
	movq	-128(%rbp), %rdx        # 8-byte Reload
	movq	-224(%rbp), %rcx        # 8-byte Reload
	movq	-176(%rbp), %r8         # 8-byte Reload
	movl	-396(%rbp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-56(%rbp), %rdi         # 8-byte Reload
	movq	-464(%rbp), %rsi        # 8-byte Reload
	movq	-760(%rbp), %rdx        # 8-byte Reload
	movq	-472(%rbp), %rcx        # 8-byte Reload
	movq	-208(%rbp), %r8         # 8-byte Reload
	movq	-488(%rbp), %r9         # 8-byte Reload
	movq	-496(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-472(%rbp), %rdi        # 8-byte Reload
	movq	-464(%rbp), %rsi        # 8-byte Reload
	vmovsd	-424(%rbp), %xmm0       # 8-byte Reload
	movq	-488(%rbp), %rdx        # 8-byte Reload
	movq	-512(%rbp), %rcx        # 8-byte Reload
	movq	-488(%rbp), %r8         # 8-byte Reload
	movq	-496(%rbp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	-672(%rbp), %rax        # 8-byte Reload
	vmovsd	-424(%rbp), %xmm0       # 8-byte Reload
	vmovsd	%xmm0, 56(%rax)
	.loc	1 48 0                  # mma_test_eigen.c:48:0
	subq	$16, %rsp
	movq	-160(%rbp), %rdi        # 8-byte Reload
	movq	-120(%rbp), %rsi        # 8-byte Reload
	movq	-128(%rbp), %rdx        # 8-byte Reload
	movq	-152(%rbp), %rcx        # 8-byte Reload
	movq	-200(%rbp), %r8         # 8-byte Reload
	movl	-396(%rbp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-56(%rbp), %rdi         # 8-byte Reload
	movq	-464(%rbp), %rsi        # 8-byte Reload
	movq	-192(%rbp), %rdx        # 8-byte Reload
	movq	-488(%rbp), %rcx        # 8-byte Reload
	movq	-512(%rbp), %r8         # 8-byte Reload
	movq	-488(%rbp), %r9         # 8-byte Reload
	movq	-496(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-472(%rbp), %rdi        # 8-byte Reload
	movq	-464(%rbp), %rsi        # 8-byte Reload
	movq	-672(%rbp), %rdx        # 8-byte Reload
	movq	-472(%rbp), %rcx        # 8-byte Reload
	movq	-64(%rbp), %r8          # 8-byte Reload
	movq	-488(%rbp), %r9         # 8-byte Reload
	movq	-496(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-672(%rbp), %rax        # 8-byte Reload
	addq	$64, %rax
	subq	$16, %rsp
	movq	-184(%rbp), %rdi        # 8-byte Reload
	movq	-464(%rbp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	-472(%rbp), %rcx        # 8-byte Reload
	movq	-152(%rbp), %r8         # 8-byte Reload
	movq	-488(%rbp), %r9         # 8-byte Reload
	movq	-496(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, -768(%rbp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-160(%rbp), %rdi        # 8-byte Reload
	movq	-120(%rbp), %rsi        # 8-byte Reload
	movq	-128(%rbp), %rdx        # 8-byte Reload
	movq	-168(%rbp), %rcx        # 8-byte Reload
	movq	-176(%rbp), %r8         # 8-byte Reload
	movl	-396(%rbp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-56(%rbp), %rdi         # 8-byte Reload
	movq	-464(%rbp), %rsi        # 8-byte Reload
	movq	-768(%rbp), %rdx        # 8-byte Reload
	movq	-472(%rbp), %rcx        # 8-byte Reload
	movq	-152(%rbp), %r8         # 8-byte Reload
	movq	-488(%rbp), %r9         # 8-byte Reload
	movq	-496(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-472(%rbp), %rdi        # 8-byte Reload
	movq	-464(%rbp), %rsi        # 8-byte Reload
	vmovsd	-536(%rbp), %xmm0       # 8-byte Reload
	movq	-488(%rbp), %rdx        # 8-byte Reload
	movq	-512(%rbp), %rcx        # 8-byte Reload
	movq	-488(%rbp), %r8         # 8-byte Reload
	movq	-496(%rbp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	-672(%rbp), %rax        # 8-byte Reload
	vmovsd	-536(%rbp), %xmm0       # 8-byte Reload
	vmovsd	%xmm0, 64(%rax)
	.loc	1 49 0                  # mma_test_eigen.c:49:0
	subq	$16, %rsp
	movq	-112(%rbp), %rdi        # 8-byte Reload
	movq	-120(%rbp), %rsi        # 8-byte Reload
	movq	-128(%rbp), %rdx        # 8-byte Reload
	movq	-144(%rbp), %rcx        # 8-byte Reload
	movq	-112(%rbp), %r8         # 8-byte Reload
	movl	-396(%rbp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-88(%rbp), %rdi         # 8-byte Reload
	movq	-464(%rbp), %rsi        # 8-byte Reload
	movq	-96(%rbp), %rdx         # 8-byte Reload
	movq	-472(%rbp), %rcx        # 8-byte Reload
	movq	-104(%rbp), %r8         # 8-byte Reload
	movq	-488(%rbp), %r9         # 8-byte Reload
	movq	-496(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movl	-400(%rbp), %esi        # 4-byte Reload
	movl	%esi, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-472(%rbp), %rdi        # 8-byte Reload
	movq	-72(%rbp), %rsi         # 8-byte Reload
	movq	-472(%rbp), %rcx        # 8-byte Reload
	movq	-80(%rbp), %r8          # 8-byte Reload
	movq	-488(%rbp), %r9         # 8-byte Reload
	movq	-496(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-56(%rbp), %rdi         # 8-byte Reload
	movq	-464(%rbp), %rsi        # 8-byte Reload
	movq	-672(%rbp), %rdx        # 8-byte Reload
	movq	-472(%rbp), %rcx        # 8-byte Reload
	movq	-64(%rbp), %r8          # 8-byte Reload
	movq	-488(%rbp), %r9         # 8-byte Reload
	movq	-496(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-520(%rbp), %rdi        # 8-byte Reload
	movq	-464(%rbp), %rsi        # 8-byte Reload
	movq	-696(%rbp), %rdx        # 8-byte Reload
	movq	-472(%rbp), %rcx        # 8-byte Reload
	movq	-528(%rbp), %r8         # 8-byte Reload
	movq	-488(%rbp), %r9         # 8-byte Reload
	movq	-496(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-504(%rbp), %rdi        # 8-byte Reload
	movq	-472(%rbp), %rsi        # 8-byte Reload
	movq	-488(%rbp), %rdx        # 8-byte Reload
	movq	-488(%rbp), %rcx        # 8-byte Reload
	movq	-512(%rbp), %r8         # 8-byte Reload
	movq	-488(%rbp), %r9         # 8-byte Reload
	movq	-496(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-48(%rbp), %rdi         # 8-byte Reload
	movq	-464(%rbp), %rsi        # 8-byte Reload
	movq	-704(%rbp), %rdx        # 8-byte Reload
	movq	-472(%rbp), %rcx        # 8-byte Reload
	movq	-480(%rbp), %r8         # 8-byte Reload
	movq	-488(%rbp), %r9         # 8-byte Reload
	movq	-496(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movl	-400(%rbp), %edi        # 4-byte Reload
	movq	-672(%rbp), %rsi        # 8-byte Reload
	movq	-696(%rbp), %rdx        # 8-byte Reload
	movl	-132(%rbp), %ecx        # 4-byte Reload
	movq	-704(%rbp), %r8         # 8-byte Reload
	callq	rs
	movabsq	$0, %rdx
	movabsq	$1, %rsi
	leaq	.L.str58, %r8
	leaq	.L.str9, %r9
	movabsq	$2, %r10
	leaq	.L.str13, %r11
	movabsq	$3, %rdi
	leaq	.L.str12, %rbx
	movabsq	$50, %r14
	leaq	.L.str44, %r15
	leaq	.L.str6, %r12
	leaq	.L.str59, %rcx
	movl	$1, %r13d
	movq	%rcx, -776(%rbp)        # 8-byte Spill
	movabsq	$19134, %rcx            # imm = 0x4ABE
	movq	%rcx, -784(%rbp)        # 8-byte Spill
	movabsq	$32, %rcx
	movq	%rcx, -792(%rbp)        # 8-byte Spill
	leaq	.L.str10, %rcx
	movq	%rcx, -800(%rbp)        # 8-byte Spill
	leaq	.L.str8, %rcx
	movq	%rcx, -808(%rbp)        # 8-byte Spill
	movabsq	$46, %rcx
	movq	%rcx, -816(%rbp)        # 8-byte Spill
	leaq	.L.str33, %rcx
	.loc	1 50 0                  # mma_test_eigen.c:50:0
.Ltmp46:
	movl	%eax, %eax
                                        # kill: RAX<def> EAX<kill>
	subq	$16, %rsp
	movq	%rax, -824(%rbp)        # 8-byte Spill
	movq	-784(%rbp), %rax        # 8-byte Reload
	movq	%rdi, -832(%rbp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	-792(%rbp), %rax        # 8-byte Reload
	movq	%rsi, -840(%rbp)        # 8-byte Spill
	movq	%rax, %rsi
	movq	-824(%rbp), %rax        # 8-byte Reload
	movq	%rdx, -848(%rbp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	-840(%rbp), %rax        # 8-byte Reload
	movq	%rcx, -856(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-856(%rbp), %rax        # 8-byte Reload
	movq	%r8, -864(%rbp)         # 8-byte Spill
	movq	%rax, %r8
	movq	-848(%rbp), %rax        # 8-byte Reload
	movq	%r9, -872(%rbp)         # 8-byte Spill
	movq	%rax, %r9
	movq	-872(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%r13d, -876(%rbp)       # 4-byte Spill
	movq	%r12, -888(%rbp)        # 8-byte Spill
	movq	%r15, -896(%rbp)        # 8-byte Spill
	movq	%r14, -904(%rbp)        # 8-byte Spill
	movq	%rbx, -912(%rbp)        # 8-byte Spill
	movq	%r10, -920(%rbp)        # 8-byte Spill
	movq	%r11, -928(%rbp)        # 8-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
.Ltmp47:
	#DEBUG_VALUE: i <- 0
	subq	$16, %rsp
	movq	-904(%rbp), %rdi        # 8-byte Reload
	movq	-896(%rbp), %rsi        # 8-byte Reload
	movq	-888(%rbp), %rdx        # 8-byte Reload
	movq	-864(%rbp), %rcx        # 8-byte Reload
	movq	-816(%rbp), %r8         # 8-byte Reload
	movl	-876(%rbp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-920(%rbp), %rdi        # 8-byte Reload
	movq	-792(%rbp), %rsi        # 8-byte Reload
	movq	-848(%rbp), %rdx        # 8-byte Reload
	movq	-848(%rbp), %rcx        # 8-byte Reload
	movq	-808(%rbp), %r8         # 8-byte Reload
	movq	-848(%rbp), %r9         # 8-byte Reload
	movq	-872(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-400(%rbp), %r13d       # 4-byte Reload
	movl	%r13d, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-840(%rbp), %rdi        # 8-byte Reload
	movq	-792(%rbp), %rsi        # 8-byte Reload
	movq	-840(%rbp), %rcx        # 8-byte Reload
	movq	-800(%rbp), %r8         # 8-byte Reload
	movq	-848(%rbp), %r9         # 8-byte Reload
	movq	-872(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-400(%rbp), %r13d       # 4-byte Reload
	cmpl	$0, %r13d
	setg	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	subq	$16, %rsp
	movq	-784(%rbp), %rdi        # 8-byte Reload
	movq	-840(%rbp), %rsi        # 8-byte Reload
	movq	-840(%rbp), %rcx        # 8-byte Reload
	movq	-864(%rbp), %r8         # 8-byte Reload
	movq	-848(%rbp), %r9         # 8-byte Reload
	movq	-872(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, -929(%rbp)         # 1-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-904(%rbp), %rdi        # 8-byte Reload
	movq	-896(%rbp), %rsi        # 8-byte Reload
	movq	-888(%rbp), %rdx        # 8-byte Reload
	movq	-776(%rbp), %rcx        # 8-byte Reload
	movq	-920(%rbp), %r8         # 8-byte Reload
	movl	-876(%rbp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-832(%rbp), %rdi        # 8-byte Reload
	movq	-848(%rbp), %rsi        # 8-byte Reload
	movq	-848(%rbp), %rdx        # 8-byte Reload
	movq	-840(%rbp), %rcx        # 8-byte Reload
	movq	-912(%rbp), %r8         # 8-byte Reload
	movq	-848(%rbp), %r9         # 8-byte Reload
	movq	-872(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-920(%rbp), %rdi        # 8-byte Reload
	movq	-848(%rbp), %rsi        # 8-byte Reload
	movq	-848(%rbp), %rdx        # 8-byte Reload
	movq	-840(%rbp), %rcx        # 8-byte Reload
	movq	-928(%rbp), %r8         # 8-byte Reload
	movq	-848(%rbp), %r9         # 8-byte Reload
	movq	-872(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-929(%rbp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %r13d
	movl	%r13d, %edx
	subq	$16, %rsp
	movq	-840(%rbp), %rdi        # 8-byte Reload
	movq	-840(%rbp), %rsi        # 8-byte Reload
	movq	-840(%rbp), %rcx        # 8-byte Reload
	movq	-864(%rbp), %r8         # 8-byte Reload
	movq	-848(%rbp), %r9         # 8-byte Reload
	movq	-872(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-929(%rbp), %al         # 1-byte Reload
	testb	$1, %al
	movq	-848(%rbp), %rcx        # 8-byte Reload
	movq	%rcx, -944(%rbp)        # 8-byte Spill
	jne	.LBB1_1
	jmp	.LBB1_2
.Ltmp48:
.LBB1_1:                                # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	movq	-944(%rbp), %rax        # 8-byte Reload
	movabsq	$1, %rcx
	leaq	.L.str41, %rdx
	movabsq	$0, %rsi
	leaq	.L.str9, %rdi
	movabsq	$2, %r8
	leaq	.L.str12, %r9
	movabsq	$3, %r10
	leaq	.L.str13, %r11
	movabsq	$50, %rbx
	leaq	.L.str44, %r14
	leaq	.L.str62, %r15
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, -952(%rbp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, -960(%rbp)        # 8-byte Spill
	leaq	.L.str40, %rax
	movq	%rax, -968(%rbp)        # 8-byte Spill
	leaq	.L.str10, %rax
	movq	%rax, -976(%rbp)        # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, -984(%rbp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, -992(%rbp)        # 8-byte Spill
	leaq	.L.str15, %rax
	movq	%rax, -1000(%rbp)       # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, -1008(%rbp)       # 8-byte Spill
	leaq	.L.str14, %rax
	movq	%rax, -1016(%rbp)       # 8-byte Spill
	leaq	.L.str8, %rax
	movq	%rax, -1024(%rbp)       # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, -1032(%rbp)       # 8-byte Spill
	leaq	.L.str60, %rax
	movq	%rax, -1040(%rbp)       # 8-byte Spill
	leaq	.L.str61, %rax
	movq	%rax, -1048(%rbp)       # 8-byte Spill
	movabsq	$52, %rax
	movq	%rax, -1056(%rbp)       # 8-byte Spill
	leaq	.L.str34, %rax
	movq	%rax, -1064(%rbp)       # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, -1072(%rbp)       # 8-byte Spill
	leaq	.L.str20, %rax
	movq	%rax, -1080(%rbp)       # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, -1088(%rbp)       # 8-byte Spill
	leaq	.L.str38, %rax
	movq	%rax, -1096(%rbp)       # 8-byte Spill
	movabsq	$37, %rax
	movq	%rax, -1104(%rbp)       # 8-byte Spill
	movabsq	$1000, %rax             # imm = 0x3E8
	vmovsd	.LCPI1_3, %xmm0
	movq	%rax, -1112(%rbp)       # 8-byte Spill
	leaq	.L.str37, %rax
	movq	%rax, -1120(%rbp)       # 8-byte Spill
	movabsq	$13, %rax
	movq	%rax, -1128(%rbp)       # 8-byte Spill
	leaq	.L.str36, %rax
	movq	%rax, -1136(%rbp)       # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, -1144(%rbp)       # 8-byte Spill
	leaq	.L.str56, %rax
	movq	%rax, -1152(%rbp)       # 8-byte Spill
	leaq	.L.str6, %rax
	movq	%rax, -1160(%rbp)       # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, -1168(%rbp)       # 8-byte Spill
	movabsq	$48, %rax
	.loc	1 52 0                  # mma_test_eigen.c:52:0
.Ltmp49:
	subq	$16, %rsp
	movq	%rax, -1176(%rbp)       # 8-byte Spill
	movq	-1168(%rbp), %rax       # 8-byte Reload
	movq	%rdi, -1184(%rbp)       # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, -1192(%rbp)       # 8-byte Spill
	movq	%r14, %rsi
	movq	%rdx, -1200(%rbp)       # 8-byte Spill
	movq	%r9, %rdx
	movq	-1016(%rbp), %rax       # 8-byte Reload
	movq	%rcx, -1208(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-1176(%rbp), %rax       # 8-byte Reload
	movq	%r8, -1216(%rbp)        # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, -1224(%rbp)        # 8-byte Spill
	movl	%r12d, %r9d
	movl	$1, (%rsp)
	movq	%r15, -1232(%rbp)       # 8-byte Spill
	movl	%r12d, -1236(%rbp)      # 4-byte Spill
	movq	%r13, -1248(%rbp)       # 8-byte Spill
	vmovsd	%xmm0, -1256(%rbp)      # 8-byte Spill
	movq	%r14, -1264(%rbp)       # 8-byte Spill
	movq	%rbx, -1272(%rbp)       # 8-byte Spill
	movq	%r10, -1280(%rbp)       # 8-byte Spill
	movq	%r11, -1288(%rbp)       # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1216(%rbp), %rdi       # 8-byte Reload
	movq	-992(%rbp), %rsi        # 8-byte Reload
	movq	-1192(%rbp), %rdx       # 8-byte Reload
	movq	-1192(%rbp), %rcx       # 8-byte Reload
	movq	-1024(%rbp), %r8        # 8-byte Reload
	movq	-1208(%rbp), %r9        # 8-byte Reload
	movq	-1160(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1208(%rbp), %rdi       # 8-byte Reload
	movq	-992(%rbp), %rsi        # 8-byte Reload
	movq	-1192(%rbp), %rdx       # 8-byte Reload
	movq	-1208(%rbp), %rcx       # 8-byte Reload
	movq	-1000(%rbp), %r8        # 8-byte Reload
	movq	-1208(%rbp), %r9        # 8-byte Reload
	movq	-1224(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1248(%rbp), %rdi       # 8-byte Reload
	movq	-992(%rbp), %rsi        # 8-byte Reload
	movq	-952(%rbp), %rdx        # 8-byte Reload
	movq	-1208(%rbp), %rcx       # 8-byte Reload
	movq	-1016(%rbp), %r8        # 8-byte Reload
	movq	-1192(%rbp), %r9        # 8-byte Reload
	movq	-1224(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1056(%rbp), %rdi       # 8-byte Reload
	movq	-1264(%rbp), %rsi       # 8-byte Reload
	movq	-1224(%rbp), %rdx       # 8-byte Reload
	movq	-1136(%rbp), %rcx       # 8-byte Reload
	movq	-1088(%rbp), %r8        # 8-byte Reload
	movl	-1236(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1216(%rbp), %rdi       # 8-byte Reload
	movq	-992(%rbp), %rsi        # 8-byte Reload
	movq	-952(%rbp), %rdx        # 8-byte Reload
	movq	-1208(%rbp), %rcx       # 8-byte Reload
	movq	-1016(%rbp), %r8        # 8-byte Reload
	movq	-1192(%rbp), %r9        # 8-byte Reload
	movq	-1184(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1208(%rbp), %rdi       # 8-byte Reload
	movq	-992(%rbp), %rsi        # 8-byte Reload
	movq	-696(%rbp), %rdx        # 8-byte Reload
	movq	-1208(%rbp), %rcx       # 8-byte Reload
	movq	-1152(%rbp), %r8        # 8-byte Reload
	movq	-1192(%rbp), %r9        # 8-byte Reload
	movq	-1184(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-952(%rbp), %rax        # 8-byte Reload
	shlq	$3, %rax
	movq	-696(%rbp), %rcx        # 8-byte Reload
	addq	%rax, %rcx
	subq	$16, %rsp
	movq	-1248(%rbp), %rdi       # 8-byte Reload
	movq	-992(%rbp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	-1208(%rbp), %rax       # 8-byte Reload
	movq	%rcx, -1296(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-1136(%rbp), %r8        # 8-byte Reload
	movq	-1192(%rbp), %r9        # 8-byte Reload
	movq	-1184(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1056(%rbp), %rdi       # 8-byte Reload
	movq	-1264(%rbp), %rsi       # 8-byte Reload
	movq	-1224(%rbp), %rdx       # 8-byte Reload
	movq	-1120(%rbp), %rcx       # 8-byte Reload
	movq	-1144(%rbp), %r8        # 8-byte Reload
	movl	-1236(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1208(%rbp), %rdi       # 8-byte Reload
	movq	-992(%rbp), %rsi        # 8-byte Reload
	movq	-1296(%rbp), %rdx       # 8-byte Reload
	movq	-1208(%rbp), %rcx       # 8-byte Reload
	movq	-1136(%rbp), %r8        # 8-byte Reload
	movq	-1192(%rbp), %r9        # 8-byte Reload
	movq	-1184(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-696(%rbp), %rax        # 8-byte Reload
	movq	-952(%rbp), %rcx        # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
	movq	-1248(%rbp), %rdi       # 8-byte Reload
	movq	-992(%rbp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, -1304(%rbp)      # 8-byte Spill
	movq	-1208(%rbp), %rdx       # 8-byte Reload
	movq	-1120(%rbp), %rcx       # 8-byte Reload
	movq	-1192(%rbp), %r8        # 8-byte Reload
	movq	-1184(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_double
	subq	$16, %rsp
	movq	-1056(%rbp), %rdi       # 8-byte Reload
	movq	-1264(%rbp), %rsi       # 8-byte Reload
	movq	-1224(%rbp), %rdx       # 8-byte Reload
	movq	-1096(%rbp), %rcx       # 8-byte Reload
	movq	-1128(%rbp), %r8        # 8-byte Reload
	movl	-1236(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movq	-1216(%rbp), %rdi       # 8-byte Reload
	movq	-992(%rbp), %rsi        # 8-byte Reload
	vmovsd	-1256(%rbp), %xmm0      # 8-byte Reload
	movq	-1192(%rbp), %rdx       # 8-byte Reload
	movq	-1024(%rbp), %rcx       # 8-byte Reload
	movq	-1192(%rbp), %r8        # 8-byte Reload
	movq	-1184(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_double
	movq	-1208(%rbp), %rdi       # 8-byte Reload
	movq	-992(%rbp), %rsi        # 8-byte Reload
	vmovsd	-1304(%rbp), %xmm0      # 8-byte Reload
	movq	-1208(%rbp), %rdx       # 8-byte Reload
	movq	-1120(%rbp), %rcx       # 8-byte Reload
	movq	-1192(%rbp), %r8        # 8-byte Reload
	movq	-1184(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	-1304(%rbp), %xmm0      # 8-byte Reload
	vmovsd	-1256(%rbp), %xmm1      # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	-1248(%rbp), %rdi       # 8-byte Reload
	movq	-992(%rbp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	-1208(%rbp), %rdx       # 8-byte Reload
	movq	-1096(%rbp), %rcx       # 8-byte Reload
	movq	-1192(%rbp), %r8        # 8-byte Reload
	movq	-1184(%rbp), %r9        # 8-byte Reload
	vmovsd	%xmm2, -1312(%rbp)      # 8-byte Spill
	callq	trace_logger_log_double
	subq	$16, %rsp
	movq	-1056(%rbp), %rdi       # 8-byte Reload
	movq	-1264(%rbp), %rsi       # 8-byte Reload
	movq	-1224(%rbp), %rdx       # 8-byte Reload
	movq	-1040(%rbp), %rcx       # 8-byte Reload
	movq	-1104(%rbp), %r8        # 8-byte Reload
	movl	-1236(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movq	-1208(%rbp), %rdi       # 8-byte Reload
	movq	-992(%rbp), %rsi        # 8-byte Reload
	vmovsd	-1312(%rbp), %xmm0      # 8-byte Reload
	movq	-1208(%rbp), %rdx       # 8-byte Reload
	movq	-1096(%rbp), %rcx       # 8-byte Reload
	movq	-1192(%rbp), %r8        # 8-byte Reload
	movq	-1184(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	-1312(%rbp), %xmm0      # 8-byte Reload
	vcvttsd2si	%xmm0, %r12d
	movl	%r12d, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-1248(%rbp), %rdi       # 8-byte Reload
	movq	-960(%rbp), %rsi        # 8-byte Reload
	movq	-1208(%rbp), %rcx       # 8-byte Reload
	movq	-1040(%rbp), %r8        # 8-byte Reload
	movq	-1192(%rbp), %r9        # 8-byte Reload
	movq	-1184(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%r12d, -1316(%rbp)      # 4-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1056(%rbp), %rdi       # 8-byte Reload
	movq	-1264(%rbp), %rsi       # 8-byte Reload
	movq	-1224(%rbp), %rdx       # 8-byte Reload
	movq	-1048(%rbp), %rcx       # 8-byte Reload
	movq	-1088(%rbp), %r8        # 8-byte Reload
	movl	-1236(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1216(%rbp), %rdi       # 8-byte Reload
	movq	-992(%rbp), %rsi        # 8-byte Reload
	movq	-952(%rbp), %rdx        # 8-byte Reload
	movq	-1208(%rbp), %rcx       # 8-byte Reload
	movq	-1016(%rbp), %r8        # 8-byte Reload
	movq	-1192(%rbp), %r9        # 8-byte Reload
	movq	-1184(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1208(%rbp), %rdi       # 8-byte Reload
	movq	-992(%rbp), %rsi        # 8-byte Reload
	movq	-416(%rbp), %rdx        # 8-byte Reload
	movq	-1208(%rbp), %rcx       # 8-byte Reload
	movq	-1080(%rbp), %r8        # 8-byte Reload
	movq	-1192(%rbp), %r9        # 8-byte Reload
	movq	-1184(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-952(%rbp), %rax        # 8-byte Reload
	shlq	$2, %rax
	movq	-416(%rbp), %rcx        # 8-byte Reload
	addq	%rax, %rcx
	subq	$16, %rsp
	movq	-1248(%rbp), %rdi       # 8-byte Reload
	movq	-992(%rbp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	-1208(%rbp), %rax       # 8-byte Reload
	movq	%rcx, -1328(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-1048(%rbp), %r8        # 8-byte Reload
	movq	-1192(%rbp), %r9        # 8-byte Reload
	movq	-1184(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1056(%rbp), %rdi       # 8-byte Reload
	movq	-1264(%rbp), %rsi       # 8-byte Reload
	movq	-1224(%rbp), %rdx       # 8-byte Reload
	movq	-1064(%rbp), %rcx       # 8-byte Reload
	movq	-1072(%rbp), %r8        # 8-byte Reload
	movl	-1236(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1216(%rbp), %rdi       # 8-byte Reload
	movq	-992(%rbp), %rsi        # 8-byte Reload
	movq	-1328(%rbp), %rdx       # 8-byte Reload
	movq	-1208(%rbp), %rcx       # 8-byte Reload
	movq	-1048(%rbp), %r8        # 8-byte Reload
	movq	-1192(%rbp), %r9        # 8-byte Reload
	movq	-1184(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movl	-1316(%rbp), %r12d      # 4-byte Reload
	movl	%r12d, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-1208(%rbp), %rdi       # 8-byte Reload
	movq	-960(%rbp), %rsi        # 8-byte Reload
	movq	-1208(%rbp), %rcx       # 8-byte Reload
	movq	-1040(%rbp), %r8        # 8-byte Reload
	movq	-1192(%rbp), %r9        # 8-byte Reload
	movq	-1184(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-416(%rbp), %rax        # 8-byte Reload
	movq	-952(%rbp), %rcx        # 8-byte Reload
	movl	-1316(%rbp), %r12d      # 4-byte Reload
	movl	%r12d, (%rax,%rcx,4)
.Ltmp50:
	.loc	1 50 0                  # mma_test_eigen.c:50:0
	subq	$16, %rsp
	movq	-1272(%rbp), %rdi       # 8-byte Reload
	movq	-1264(%rbp), %rsi       # 8-byte Reload
	movq	-1224(%rbp), %rdx       # 8-byte Reload
	movq	-1000(%rbp), %rcx       # 8-byte Reload
	movq	-1032(%rbp), %r8        # 8-byte Reload
	movl	-1236(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1216(%rbp), %rdi       # 8-byte Reload
	movq	-992(%rbp), %rsi        # 8-byte Reload
	movq	-1208(%rbp), %rdx       # 8-byte Reload
	movq	-1192(%rbp), %rcx       # 8-byte Reload
	movq	-1024(%rbp), %r8        # 8-byte Reload
	movq	-1192(%rbp), %r9        # 8-byte Reload
	movq	-1184(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1208(%rbp), %rdi       # 8-byte Reload
	movq	-992(%rbp), %rsi        # 8-byte Reload
	movq	-952(%rbp), %rdx        # 8-byte Reload
	movq	-1208(%rbp), %rcx       # 8-byte Reload
	movq	-1016(%rbp), %r8        # 8-byte Reload
	movq	-1192(%rbp), %r9        # 8-byte Reload
	movq	-1184(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-952(%rbp), %rax        # 8-byte Reload
	addq	$1, %rax
	subq	$16, %rsp
	movq	-1248(%rbp), %rdi       # 8-byte Reload
	movq	-992(%rbp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	-1208(%rbp), %rcx       # 8-byte Reload
	movq	-1000(%rbp), %r8        # 8-byte Reload
	movq	-1192(%rbp), %r9        # 8-byte Reload
	movq	-1184(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, -1336(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1272(%rbp), %rdi       # 8-byte Reload
	movq	-1264(%rbp), %rsi       # 8-byte Reload
	movq	-1224(%rbp), %rdx       # 8-byte Reload
	movq	-968(%rbp), %rcx        # 8-byte Reload
	movq	-1008(%rbp), %r8        # 8-byte Reload
	movl	-1236(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1208(%rbp), %rdi       # 8-byte Reload
	movq	-992(%rbp), %rsi        # 8-byte Reload
	movq	-1336(%rbp), %rdx       # 8-byte Reload
	movq	-1208(%rbp), %rcx       # 8-byte Reload
	movq	-1000(%rbp), %r8        # 8-byte Reload
	movq	-1192(%rbp), %r9        # 8-byte Reload
	movq	-1184(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-1336(%rbp), %rax       # 8-byte Reload
	movl	%eax, %r12d
	movl	%r12d, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-1248(%rbp), %rdi       # 8-byte Reload
	movq	-960(%rbp), %rsi        # 8-byte Reload
	movq	-1208(%rbp), %rcx       # 8-byte Reload
	movq	-968(%rbp), %r8         # 8-byte Reload
	movq	-1192(%rbp), %r9        # 8-byte Reload
	movq	-1184(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%r12d, -1340(%rbp)      # 4-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1272(%rbp), %rdi       # 8-byte Reload
	movq	-1264(%rbp), %rsi       # 8-byte Reload
	movq	-1224(%rbp), %rdx       # 8-byte Reload
	movq	-1200(%rbp), %rcx       # 8-byte Reload
	movq	-984(%rbp), %r8         # 8-byte Reload
	movl	-1236(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movl	-400(%rbp), %r9d        # 4-byte Reload
	movl	%r9d, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-1216(%rbp), %rdi       # 8-byte Reload
	movq	-960(%rbp), %rsi        # 8-byte Reload
	movq	-1208(%rbp), %rcx       # 8-byte Reload
	movq	-976(%rbp), %r8         # 8-byte Reload
	movq	-1192(%rbp), %r9        # 8-byte Reload
	movq	-1184(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-1340(%rbp), %r12d      # 4-byte Reload
	movl	%r12d, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-1208(%rbp), %rdi       # 8-byte Reload
	movq	-960(%rbp), %rsi        # 8-byte Reload
	movq	-1208(%rbp), %rcx       # 8-byte Reload
	movq	-968(%rbp), %r8         # 8-byte Reload
	movq	-1192(%rbp), %r9        # 8-byte Reload
	movq	-1184(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-1340(%rbp), %r12d      # 4-byte Reload
	movl	-400(%rbp), %esi        # 4-byte Reload
	cmpl	%esi, %r12d
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	subq	$16, %rsp
	movq	-1248(%rbp), %rdi       # 8-byte Reload
	movq	-1208(%rbp), %rsi       # 8-byte Reload
	movq	-1208(%rbp), %rcx       # 8-byte Reload
	movq	-1200(%rbp), %r8        # 8-byte Reload
	movq	-1192(%rbp), %r9        # 8-byte Reload
	movq	-1184(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, -1341(%rbp)        # 1-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1272(%rbp), %rdi       # 8-byte Reload
	movq	-1264(%rbp), %rsi       # 8-byte Reload
	movq	-1224(%rbp), %rdx       # 8-byte Reload
	movq	-1232(%rbp), %rcx       # 8-byte Reload
	movq	-1216(%rbp), %r8        # 8-byte Reload
	movl	-1236(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1280(%rbp), %rdi       # 8-byte Reload
	movq	-1192(%rbp), %rsi       # 8-byte Reload
	movq	-1192(%rbp), %rdx       # 8-byte Reload
	movq	-1208(%rbp), %rcx       # 8-byte Reload
	movq	-1288(%rbp), %r8        # 8-byte Reload
	movq	-1192(%rbp), %r9        # 8-byte Reload
	movq	-1184(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1216(%rbp), %rdi       # 8-byte Reload
	movq	-1192(%rbp), %rsi       # 8-byte Reload
	movq	-1192(%rbp), %rdx       # 8-byte Reload
	movq	-1208(%rbp), %rcx       # 8-byte Reload
	movq	-1224(%rbp), %r8        # 8-byte Reload
	movq	-1192(%rbp), %r9        # 8-byte Reload
	movq	-1184(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-1341(%rbp), %al        # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-1208(%rbp), %rdi       # 8-byte Reload
	movq	-1208(%rbp), %rsi       # 8-byte Reload
	movq	-1208(%rbp), %rcx       # 8-byte Reload
	movq	-1200(%rbp), %r8        # 8-byte Reload
	movq	-1192(%rbp), %r9        # 8-byte Reload
	movq	-1184(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-1341(%rbp), %al        # 1-byte Reload
	testb	$1, %al
	movq	-1336(%rbp), %rcx       # 8-byte Reload
	movq	%rcx, -944(%rbp)        # 8-byte Spill
	jne	.LBB1_2
	jmp	.LBB1_1
.Ltmp51:
.LBB1_2:                                # %._crit_edge
	movabsq	$54, %rdi
	leaq	.L.str44, %rsi
	leaq	.L.str13, %rdx
	leaq	.L.str43, %rcx
	movabsq	$1, %r8
	movl	$1, %r9d
	.loc	1 54 0                  # mma_test_eigen.c:54:0
	subq	$16, %rsp
	movl	$1, (%rsp)
	callq	trace_logger_log0
	leaq	-40(%rbp), %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
.Ltmp52:
.Ltmp53:
	.size	store_kernel, .Ltmp53-store_kernel
.Lfunc_end1:
	.cfi_endproc

	.globl	main
	.align	16, 0x90
	.type	main,@function
main:                                   # @main
	.cfi_startproc
.Lfunc_begin2:
	.loc	1 56 0                  # mma_test_eigen.c:56:0
# BB#0:
	pushq	%rbp
.Ltmp61:
	.cfi_def_cfa_offset 16
	pushq	%r15
.Ltmp62:
	.cfi_def_cfa_offset 24
	pushq	%r14
.Ltmp63:
	.cfi_def_cfa_offset 32
	pushq	%r13
.Ltmp64:
	.cfi_def_cfa_offset 40
	pushq	%r12
.Ltmp65:
	.cfi_def_cfa_offset 48
	pushq	%rbx
.Ltmp66:
	.cfi_def_cfa_offset 56
	subq	$1352, %rsp             # imm = 0x548
.Ltmp67:
	.cfi_def_cfa_offset 1408
.Ltmp68:
	.cfi_offset %rbx, -56
.Ltmp69:
	.cfi_offset %r12, -48
.Ltmp70:
	.cfi_offset %r13, -40
.Ltmp71:
	.cfi_offset %r14, -32
.Ltmp72:
	.cfi_offset %r15, -24
.Ltmp73:
	.cfi_offset %rbp, -16
	leaq	.L.str73, %rdi
	movabsq	$21, %rsi
	.loc	1 58 0 prologue_end     # mma_test_eigen.c:58:0
.Ltmp74:
	callq	trace_logger_write_labelmap
	movabsq	$1, %rsi
	movabsq	$64, %rdi
	movabsq	$12, %rdx
	movabsq	$0, %rax
	leaq	.L.str8, %r8
	leaq	.L.str9, %rcx
	movabsq	$2, %r9
	leaq	malloc, %r10
	leaq	.L.str64, %r11
	movabsq	$59, %rbx
	leaq	.L.str63, %r14
	leaq	.L.str6, %r15
	leaq	.L.str7, %r12
	movabsq	$49, %r13
	movl	$0, %ebp
	movq	%rsi, 1344(%rsp)        # 8-byte Spill
	movl	$1, %esi
.Ltmp75:
	#DEBUG_VALUE: main:num_vals <- 3
	.loc	1 59 0                  # mma_test_eigen.c:59:0
	movq	%rdi, 1336(%rsp)        # 8-byte Spill
	movq	%rbx, %rdi
	movl	%esi, 1332(%rsp)        # 4-byte Spill
	movq	%r14, %rsi
	movq	%rdx, 1320(%rsp)        # 8-byte Spill
	movq	%r15, %rdx
	movq	%rcx, 1312(%rsp)        # 8-byte Spill
	movq	%r12, %rcx
	movq	%r8, 1304(%rsp)         # 8-byte Spill
	movq	%r13, %r8
	movq	%r9, 1296(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r11, 1288(%rsp)        # 8-byte Spill
	movq	%rax, 1280(%rsp)        # 8-byte Spill
	movq	%r10, 1272(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	1296(%rsp), %rdi        # 8-byte Reload
	movq	1336(%rsp), %rsi        # 8-byte Reload
	movq	1272(%rsp), %rdx        # 8-byte Reload
	movq	1344(%rsp), %rcx        # 8-byte Reload
	movq	1288(%rsp), %r8         # 8-byte Reload
	movq	1280(%rsp), %r9         # 8-byte Reload
	movq	1312(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1344(%rsp), %rdi        # 8-byte Reload
	movq	1336(%rsp), %rsi        # 8-byte Reload
	movq	1320(%rsp), %rdx        # 8-byte Reload
	movq	1280(%rsp), %rcx        # 8-byte Reload
	movq	1304(%rsp), %r8         # 8-byte Reload
	movq	1280(%rsp), %r9         # 8-byte Reload
	movq	1312(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$12, %ebp
	movl	%ebp, %edi
	callq	malloc
	movabsq	$1, %rcx
	movabsq	$64, %rdx
	movabsq	$12, %rsi
	movabsq	$0, %rdi
	leaq	.L.str8, %r8
	leaq	.L.str9, %r9
	movabsq	$2, %r10
	leaq	malloc, %r11
	leaq	.L.str64, %rbx
	movabsq	$60, %r14
	leaq	.L.str63, %r15
	leaq	.L.str6, %r12
	leaq	.L.str19, %r13
	movabsq	$49, %rbp
	movq	%rsi, 1264(%rsp)        # 8-byte Spill
	movl	$0, %esi
	movl	%esi, 1260(%rsp)        # 4-byte Spill
	movl	$1, %esi
	movq	%rax, 1248(%rsp)        # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 1240(%rsp)        # 8-byte Spill
	leaq	.L.str17, %rax
	movq	%rax, 1232(%rsp)        # 8-byte Spill
	leaq	.L.str7, %rax
	movq	%rax, 1224(%rsp)        # 8-byte Spill
	movabsq	$59, %rax
	movq	%rax, 1216(%rsp)        # 8-byte Spill
	movabsq	$44, %rax
	movq	%rax, 1208(%rsp)        # 8-byte Spill
	movq	1240(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 1200(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movl	%esi, 1196(%rsp)        # 4-byte Spill
	movq	%rdx, %rsi
	movq	1248(%rsp), %rax        # 8-byte Reload
	movq	%rdx, 1184(%rsp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	%rcx, 1176(%rsp)        # 8-byte Spill
	movq	1224(%rsp), %rax        # 8-byte Reload
	movq	%r8, 1168(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	1200(%rsp), %rax        # 8-byte Reload
	movq	%r9, 1160(%rsp)         # 8-byte Spill
	movq	%rax, %r9
	movq	1160(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	movq	%r15, 1152(%rsp)        # 8-byte Spill
	movq	%r12, 1144(%rsp)        # 8-byte Spill
	movq	%r13, 1136(%rsp)        # 8-byte Spill
	movq	%rbp, 1128(%rsp)        # 8-byte Spill
	movq	%r14, 1120(%rsp)        # 8-byte Spill
	movq	%rbx, 1112(%rsp)        # 8-byte Spill
	movq	%r10, 1104(%rsp)        # 8-byte Spill
	movq	%r11, 1096(%rsp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movq	1216(%rsp), %rdi        # 8-byte Reload
	movq	1152(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	1232(%rsp), %rcx        # 8-byte Reload
	movq	1208(%rsp), %r8         # 8-byte Reload
	movl	1260(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1176(%rsp), %rdi        # 8-byte Reload
	movq	1184(%rsp), %rsi        # 8-byte Reload
	movq	1248(%rsp), %rdx        # 8-byte Reload
	movq	1176(%rsp), %rcx        # 8-byte Reload
	movq	1224(%rsp), %r8         # 8-byte Reload
	movq	1200(%rsp), %r9         # 8-byte Reload
	movq	1160(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1248(%rsp), %rax        # 8-byte Reload
	movq	1240(%rsp), %rdi        # 8-byte Reload
	movq	1184(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	1176(%rsp), %rcx        # 8-byte Reload
	movq	1232(%rsp), %r8         # 8-byte Reload
	movq	1200(%rsp), %r9         # 8-byte Reload
	movq	1160(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 1088(%rsp)        # 8-byte Spill
	callq	trace_logger_log_ptr
.Ltmp76:
	#DEBUG_VALUE: main:store_vals <- [RSP+1088]
	.loc	1 60 0                  # mma_test_eigen.c:60:0
	movq	1120(%rsp), %rdi        # 8-byte Reload
	movq	1152(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	1136(%rsp), %rcx        # 8-byte Reload
	movq	1128(%rsp), %r8         # 8-byte Reload
	movl	1260(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1104(%rsp), %rdi        # 8-byte Reload
	movq	1184(%rsp), %rsi        # 8-byte Reload
	movq	1096(%rsp), %rdx        # 8-byte Reload
	movq	1176(%rsp), %rcx        # 8-byte Reload
	movq	1112(%rsp), %r8         # 8-byte Reload
	movq	1200(%rsp), %r9         # 8-byte Reload
	movq	1160(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1176(%rsp), %rdi        # 8-byte Reload
	movq	1184(%rsp), %rsi        # 8-byte Reload
	movq	1264(%rsp), %rdx        # 8-byte Reload
	movq	1200(%rsp), %rcx        # 8-byte Reload
	movq	1168(%rsp), %r8         # 8-byte Reload
	movq	1200(%rsp), %r9         # 8-byte Reload
	movq	1160(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$12, %esi
	movl	%esi, %edi
	callq	malloc
.Ltmp77:
	movabsq	$0, %rcx
	movabsq	$1, %rdx
	leaq	.L.str66, %r8
	leaq	.L.str9, %rdi
	movabsq	$61, %r9
	leaq	.L.str63, %r10
	leaq	.L.str6, %r11
	leaq	.L.str65, %rbx
	movabsq	$2, %r14
	movl	$0, %esi
	movl	$1, %ebp
	movabsq	$19134, %r15            # imm = 0x4ABE
	movabsq	$64, %r12
	leaq	.L.str21, %r13
	movq	%rax, 1080(%rsp)        # 8-byte Spill
	leaq	.L.str19, %rax
	movq	%rax, 1072(%rsp)        # 8-byte Spill
	movabsq	$60, %rax
	movq	%rax, 1064(%rsp)        # 8-byte Spill
	movabsq	$44, %rax
	movq	%rdi, 1056(%rsp)        # 8-byte Spill
	movq	%r15, %rdi
	movl	%esi, 1052(%rsp)        # 4-byte Spill
	movq	%r12, %rsi
	movq	%rax, 1040(%rsp)        # 8-byte Spill
	movq	1080(%rsp), %rax        # 8-byte Reload
	movq	%rdx, 1032(%rsp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	1032(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 1024(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	1072(%rsp), %rax        # 8-byte Reload
	movq	%r8, 1016(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	1024(%rsp), %rax        # 8-byte Reload
	movq	%r9, 1008(%rsp)         # 8-byte Spill
	movq	%rax, %r9
	movq	1056(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%ebp, 1004(%rsp)        # 4-byte Spill
	movq	%r15, 992(%rsp)         # 8-byte Spill
	movq	%r12, 984(%rsp)         # 8-byte Spill
	movq	%r13, 976(%rsp)         # 8-byte Spill
	movq	%r14, 968(%rsp)         # 8-byte Spill
	movq	%r10, 960(%rsp)         # 8-byte Spill
	movq	%r11, 952(%rsp)         # 8-byte Spill
	movq	%rbx, 944(%rsp)         # 8-byte Spill
	callq	trace_logger_log_ptr
	movq	1064(%rsp), %rdi        # 8-byte Reload
	movq	960(%rsp), %rsi         # 8-byte Reload
	movq	952(%rsp), %rdx         # 8-byte Reload
	movq	976(%rsp), %rcx         # 8-byte Reload
	movq	1040(%rsp), %r8         # 8-byte Reload
	movl	1052(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1032(%rsp), %rdi        # 8-byte Reload
	movq	984(%rsp), %rsi         # 8-byte Reload
	movq	1080(%rsp), %rdx        # 8-byte Reload
	movq	1032(%rsp), %rcx        # 8-byte Reload
	movq	1072(%rsp), %r8         # 8-byte Reload
	movq	1024(%rsp), %r9         # 8-byte Reload
	movq	1056(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1080(%rsp), %rax        # 8-byte Reload
	movq	992(%rsp), %rdi         # 8-byte Reload
	movq	984(%rsp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	movq	1032(%rsp), %rcx        # 8-byte Reload
	movq	976(%rsp), %r8          # 8-byte Reload
	movq	1024(%rsp), %r9         # 8-byte Reload
	movq	1056(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 936(%rsp)         # 8-byte Spill
	callq	trace_logger_log_ptr
.Ltmp78:
	#DEBUG_VALUE: main:store_loc <- [RSP+936]
	#DEBUG_VALUE: i <- 0
	.loc	1 61 0                  # mma_test_eigen.c:61:0
	movq	1008(%rsp), %rdi        # 8-byte Reload
	movq	960(%rsp), %rsi         # 8-byte Reload
	movq	952(%rsp), %rdx         # 8-byte Reload
	movq	944(%rsp), %rcx         # 8-byte Reload
	movq	968(%rsp), %r8          # 8-byte Reload
	movl	1052(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1032(%rsp), %rdi        # 8-byte Reload
	movq	1024(%rsp), %rsi        # 8-byte Reload
	movq	1024(%rsp), %rdx        # 8-byte Reload
	movq	1032(%rsp), %rcx        # 8-byte Reload
	movq	1016(%rsp), %r8         # 8-byte Reload
	movq	1024(%rsp), %r9         # 8-byte Reload
	movq	1056(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1024(%rsp), %rax        # 8-byte Reload
	movq	%rax, 928(%rsp)         # 8-byte Spill
.Ltmp79:
.LBB2_1:                                # =>This Inner Loop Header: Depth=1
	movq	928(%rsp), %rax         # 8-byte Reload
	movabsq	$1, %rcx
	leaq	.L.str41, %rdx
	movabsq	$0, %rsi
	leaq	.L.str9, %rdi
	movabsq	$2, %r8
	leaq	.L.str66, %r9
	movabsq	$3, %r10
	leaq	.L.str70, %r11
	movabsq	$61, %rbx
	leaq	.L.str63, %r14
	leaq	.L.str69, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 920(%rsp)         # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 912(%rsp)         # 8-byte Spill
	leaq	.L.str15, %rax
	movq	%rax, 904(%rsp)         # 8-byte Spill
	leaq	.L.str8, %rax
	movq	%rax, 896(%rsp)         # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 888(%rsp)         # 8-byte Spill
	leaq	.L.str14, %rax
	movq	%rax, 880(%rsp)         # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, 872(%rsp)         # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 864(%rsp)         # 8-byte Spill
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
	movq	%rax, 856(%rsp)         # 8-byte Spill
	leaq	.L.str26, %rax
	movq	%rax, 848(%rsp)         # 8-byte Spill
	movabsq	$63, %rax
	movq	%rax, 840(%rsp)         # 8-byte Spill
	leaq	.L.str68, %rax
	movq	%rax, 832(%rsp)         # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, 824(%rsp)         # 8-byte Spill
	leaq	.L.str21, %rax
	movq	%rax, 816(%rsp)         # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 808(%rsp)         # 8-byte Spill
	leaq	.L.str25, %rax
	movq	%rax, 800(%rsp)         # 8-byte Spill
	leaq	.L.str23, %rax
	movq	%rax, 792(%rsp)         # 8-byte Spill
	movabsq	$62, %rax
	movq	%rax, 784(%rsp)         # 8-byte Spill
	leaq	.L.str67, %rax
	movq	%rax, 776(%rsp)         # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, 768(%rsp)         # 8-byte Spill
	leaq	.L.str17, %rax
	movq	%rax, 760(%rsp)         # 8-byte Spill
	leaq	.L.str6, %rax
	movq	%rax, 752(%rsp)         # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 744(%rsp)         # 8-byte Spill
	movabsq	$48, %rax
	.loc	1 62 0                  # mma_test_eigen.c:62:0
.Ltmp80:
	movq	%rax, 736(%rsp)         # 8-byte Spill
	movq	744(%rsp), %rax         # 8-byte Reload
	movq	%rdi, 728(%rsp)         # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 720(%rsp)         # 8-byte Spill
	movq	%r14, %rsi
	movq	%rdx, 712(%rsp)         # 8-byte Spill
	movq	%r9, %rdx
	movq	880(%rsp), %rax         # 8-byte Reload
	movq	%rcx, 704(%rsp)         # 8-byte Spill
	movq	%rax, %rcx
	movq	736(%rsp), %rax         # 8-byte Reload
	movq	%r8, 696(%rsp)          # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 688(%rsp)          # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r15, 680(%rsp)         # 8-byte Spill
	movl	%ebp, 676(%rsp)         # 4-byte Spill
	movl	%r12d, 672(%rsp)        # 4-byte Spill
	movq	%r13, 664(%rsp)         # 8-byte Spill
	movq	%r14, 656(%rsp)         # 8-byte Spill
	movq	%rbx, 648(%rsp)         # 8-byte Spill
	movq	%r10, 640(%rsp)         # 8-byte Spill
	movq	%r11, 632(%rsp)         # 8-byte Spill
	callq	trace_logger_log0
	movq	696(%rsp), %rdi         # 8-byte Reload
	movq	912(%rsp), %rsi         # 8-byte Reload
	movq	720(%rsp), %rdx         # 8-byte Reload
	movq	704(%rsp), %rcx         # 8-byte Reload
	movq	904(%rsp), %r8          # 8-byte Reload
	movq	704(%rsp), %r9          # 8-byte Reload
	movq	688(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	704(%rsp), %rdi         # 8-byte Reload
	movq	912(%rsp), %rsi         # 8-byte Reload
	movq	720(%rsp), %rdx         # 8-byte Reload
	movq	720(%rsp), %rcx         # 8-byte Reload
	movq	896(%rsp), %r8          # 8-byte Reload
	movq	704(%rsp), %r9          # 8-byte Reload
	movq	752(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	664(%rsp), %rdi         # 8-byte Reload
	movq	912(%rsp), %rsi         # 8-byte Reload
	movq	920(%rsp), %rdx         # 8-byte Reload
	movq	704(%rsp), %rcx         # 8-byte Reload
	movq	880(%rsp), %r8          # 8-byte Reload
	movq	720(%rsp), %r9          # 8-byte Reload
	movq	752(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	784(%rsp), %rdi         # 8-byte Reload
	movq	656(%rsp), %rsi         # 8-byte Reload
	movq	688(%rsp), %rdx         # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	808(%rsp), %r8          # 8-byte Reload
	movl	676(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	696(%rsp), %rdi         # 8-byte Reload
	movq	912(%rsp), %rsi         # 8-byte Reload
	movq	920(%rsp), %rdx         # 8-byte Reload
	movq	704(%rsp), %rcx         # 8-byte Reload
	movq	880(%rsp), %r8          # 8-byte Reload
	movq	720(%rsp), %r9          # 8-byte Reload
	movq	728(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	704(%rsp), %rdi         # 8-byte Reload
	movq	912(%rsp), %rsi         # 8-byte Reload
	movq	1088(%rsp), %rdx        # 8-byte Reload
	movq	704(%rsp), %rcx         # 8-byte Reload
	movq	760(%rsp), %r8          # 8-byte Reload
	movq	720(%rsp), %r9          # 8-byte Reload
	movq	728(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	920(%rsp), %rax         # 8-byte Reload
	shlq	$2, %rax
	movq	1088(%rsp), %rcx        # 8-byte Reload
	addq	%rax, %rcx
	movq	664(%rsp), %rdi         # 8-byte Reload
	movq	912(%rsp), %rsi         # 8-byte Reload
	movq	%rcx, %rdx
	movq	704(%rsp), %rax         # 8-byte Reload
	movq	%rcx, 624(%rsp)         # 8-byte Spill
	movq	%rax, %rcx
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	720(%rsp), %r9          # 8-byte Reload
	movq	728(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	784(%rsp), %rdi         # 8-byte Reload
	movq	656(%rsp), %rsi         # 8-byte Reload
	movq	688(%rsp), %rdx         # 8-byte Reload
	movq	800(%rsp), %rcx         # 8-byte Reload
	movq	768(%rsp), %r8          # 8-byte Reload
	movl	676(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	704(%rsp), %rdi         # 8-byte Reload
	movq	912(%rsp), %rsi         # 8-byte Reload
	movq	920(%rsp), %rdx         # 8-byte Reload
	movq	704(%rsp), %rcx         # 8-byte Reload
	movq	880(%rsp), %r8          # 8-byte Reload
	movq	720(%rsp), %r9          # 8-byte Reload
	movq	728(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	920(%rsp), %rax         # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	664(%rsp), %rdi         # 8-byte Reload
	movq	864(%rsp), %rsi         # 8-byte Reload
	movq	704(%rsp), %rcx         # 8-byte Reload
	movq	800(%rsp), %r8          # 8-byte Reload
	movq	720(%rsp), %r9          # 8-byte Reload
	movq	728(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 620(%rsp)         # 4-byte Spill
	callq	trace_logger_log_int
	movq	784(%rsp), %rdi         # 8-byte Reload
	movq	656(%rsp), %rsi         # 8-byte Reload
	movq	688(%rsp), %rdx         # 8-byte Reload
	movq	776(%rsp), %rcx         # 8-byte Reload
	movq	824(%rsp), %r8          # 8-byte Reload
	movl	676(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	696(%rsp), %rdi         # 8-byte Reload
	movq	912(%rsp), %rsi         # 8-byte Reload
	movq	624(%rsp), %rdx         # 8-byte Reload
	movq	704(%rsp), %rcx         # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	720(%rsp), %r9          # 8-byte Reload
	movq	728(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	620(%rsp), %ebp         # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	704(%rsp), %rdi         # 8-byte Reload
	movq	864(%rsp), %rsi         # 8-byte Reload
	movq	704(%rsp), %rcx         # 8-byte Reload
	movq	800(%rsp), %r8          # 8-byte Reload
	movq	720(%rsp), %r9          # 8-byte Reload
	movq	728(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1088(%rsp), %rax        # 8-byte Reload
	movq	920(%rsp), %rcx         # 8-byte Reload
	movl	620(%rsp), %ebp         # 4-byte Reload
	movl	%ebp, (%rax,%rcx,4)
	.loc	1 63 0                  # mma_test_eigen.c:63:0
	movq	840(%rsp), %rdi         # 8-byte Reload
	movq	656(%rsp), %rsi         # 8-byte Reload
	movq	688(%rsp), %rdx         # 8-byte Reload
	movq	848(%rsp), %rcx         # 8-byte Reload
	movq	808(%rsp), %r8          # 8-byte Reload
	movl	676(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	696(%rsp), %rdi         # 8-byte Reload
	movq	912(%rsp), %rsi         # 8-byte Reload
	movq	920(%rsp), %rdx         # 8-byte Reload
	movq	704(%rsp), %rcx         # 8-byte Reload
	movq	880(%rsp), %r8          # 8-byte Reload
	movq	720(%rsp), %r9          # 8-byte Reload
	movq	728(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	704(%rsp), %rdi         # 8-byte Reload
	movq	912(%rsp), %rsi         # 8-byte Reload
	movq	936(%rsp), %rdx         # 8-byte Reload
	movq	704(%rsp), %rcx         # 8-byte Reload
	movq	816(%rsp), %r8          # 8-byte Reload
	movq	720(%rsp), %r9          # 8-byte Reload
	movq	728(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	920(%rsp), %rax         # 8-byte Reload
	shlq	$2, %rax
	movq	936(%rsp), %rcx         # 8-byte Reload
	addq	%rax, %rcx
	movq	664(%rsp), %rdi         # 8-byte Reload
	movq	912(%rsp), %rsi         # 8-byte Reload
	movq	%rcx, %rdx
	movq	704(%rsp), %rax         # 8-byte Reload
	movq	%rcx, 608(%rsp)         # 8-byte Spill
	movq	%rax, %rcx
	movq	848(%rsp), %r8          # 8-byte Reload
	movq	720(%rsp), %r9          # 8-byte Reload
	movq	728(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	840(%rsp), %rdi         # 8-byte Reload
	movq	656(%rsp), %rsi         # 8-byte Reload
	movq	688(%rsp), %rdx         # 8-byte Reload
	movq	832(%rsp), %rcx         # 8-byte Reload
	movq	824(%rsp), %r8          # 8-byte Reload
	movl	676(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	696(%rsp), %rdi         # 8-byte Reload
	movq	912(%rsp), %rsi         # 8-byte Reload
	movq	608(%rsp), %rdx         # 8-byte Reload
	movq	704(%rsp), %rcx         # 8-byte Reload
	movq	848(%rsp), %r8          # 8-byte Reload
	movq	720(%rsp), %r9          # 8-byte Reload
	movq	728(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	704(%rsp), %rdi         # 8-byte Reload
	movq	864(%rsp), %rsi         # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	720(%rsp), %rcx         # 8-byte Reload
	movq	896(%rsp), %r8          # 8-byte Reload
	movq	720(%rsp), %r9          # 8-byte Reload
	movq	728(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	936(%rsp), %rax         # 8-byte Reload
	movq	920(%rsp), %rcx         # 8-byte Reload
	movl	$-1, (%rax,%rcx,4)
.Ltmp81:
	.loc	1 61 0                  # mma_test_eigen.c:61:0
	movq	648(%rsp), %rdi         # 8-byte Reload
	movq	656(%rsp), %rsi         # 8-byte Reload
	movq	688(%rsp), %rdx         # 8-byte Reload
	movq	904(%rsp), %rcx         # 8-byte Reload
	movq	872(%rsp), %r8          # 8-byte Reload
	movl	676(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	696(%rsp), %rdi         # 8-byte Reload
	movq	912(%rsp), %rsi         # 8-byte Reload
	movq	704(%rsp), %rdx         # 8-byte Reload
	movq	720(%rsp), %rcx         # 8-byte Reload
	movq	896(%rsp), %r8          # 8-byte Reload
	movq	720(%rsp), %r9          # 8-byte Reload
	movq	728(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	704(%rsp), %rdi         # 8-byte Reload
	movq	912(%rsp), %rsi         # 8-byte Reload
	movq	920(%rsp), %rdx         # 8-byte Reload
	movq	704(%rsp), %rcx         # 8-byte Reload
	movq	880(%rsp), %r8          # 8-byte Reload
	movq	720(%rsp), %r9          # 8-byte Reload
	movq	728(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	920(%rsp), %rax         # 8-byte Reload
	addq	$1, %rax
	movq	664(%rsp), %rdi         # 8-byte Reload
	movq	912(%rsp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	movq	704(%rsp), %rcx         # 8-byte Reload
	movq	904(%rsp), %r8          # 8-byte Reload
	movq	720(%rsp), %r9          # 8-byte Reload
	movq	728(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 600(%rsp)         # 8-byte Spill
	callq	trace_logger_log_int
	movq	648(%rsp), %rdi         # 8-byte Reload
	movq	656(%rsp), %rsi         # 8-byte Reload
	movq	688(%rsp), %rdx         # 8-byte Reload
	movq	712(%rsp), %rcx         # 8-byte Reload
	movq	888(%rsp), %r8          # 8-byte Reload
	movl	676(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	696(%rsp), %rdi         # 8-byte Reload
	movq	912(%rsp), %rsi         # 8-byte Reload
	movq	640(%rsp), %rdx         # 8-byte Reload
	movq	720(%rsp), %rcx         # 8-byte Reload
	movq	896(%rsp), %r8          # 8-byte Reload
	movq	720(%rsp), %r9          # 8-byte Reload
	movq	728(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	704(%rsp), %rdi         # 8-byte Reload
	movq	912(%rsp), %rsi         # 8-byte Reload
	movq	600(%rsp), %rdx         # 8-byte Reload
	movq	704(%rsp), %rcx         # 8-byte Reload
	movq	904(%rsp), %r8          # 8-byte Reload
	movq	720(%rsp), %r9          # 8-byte Reload
	movq	728(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	600(%rsp), %rax         # 8-byte Reload
	cmpq	$3, %rax
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ebp
	movl	%ebp, %edx
	movq	664(%rsp), %rdi         # 8-byte Reload
	movq	704(%rsp), %rsi         # 8-byte Reload
	movq	704(%rsp), %rcx         # 8-byte Reload
	movq	712(%rsp), %r8          # 8-byte Reload
	movq	720(%rsp), %r9          # 8-byte Reload
	movq	728(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 599(%rsp)          # 1-byte Spill
	callq	trace_logger_log_int
	movq	648(%rsp), %rdi         # 8-byte Reload
	movq	656(%rsp), %rsi         # 8-byte Reload
	movq	688(%rsp), %rdx         # 8-byte Reload
	movq	680(%rsp), %rcx         # 8-byte Reload
	movq	696(%rsp), %r8          # 8-byte Reload
	movl	676(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	640(%rsp), %rdi         # 8-byte Reload
	movq	720(%rsp), %rsi         # 8-byte Reload
	movq	720(%rsp), %rdx         # 8-byte Reload
	movq	704(%rsp), %rcx         # 8-byte Reload
	movq	632(%rsp), %r8          # 8-byte Reload
	movq	720(%rsp), %r9          # 8-byte Reload
	movq	728(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	696(%rsp), %rdi         # 8-byte Reload
	movq	720(%rsp), %rsi         # 8-byte Reload
	movq	720(%rsp), %rdx         # 8-byte Reload
	movq	704(%rsp), %rcx         # 8-byte Reload
	movq	688(%rsp), %r8          # 8-byte Reload
	movq	720(%rsp), %r9          # 8-byte Reload
	movq	728(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	599(%rsp), %al          # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	704(%rsp), %rdi         # 8-byte Reload
	movq	704(%rsp), %rsi         # 8-byte Reload
	movq	704(%rsp), %rcx         # 8-byte Reload
	movq	712(%rsp), %r8          # 8-byte Reload
	movq	720(%rsp), %r9          # 8-byte Reload
	movq	728(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	599(%rsp), %al          # 1-byte Reload
	testb	$1, %al
	movq	600(%rsp), %rcx         # 8-byte Reload
	movq	%rcx, 928(%rsp)         # 8-byte Spill
	jne	.LBB2_2
	jmp	.LBB2_1
.Ltmp82:
.LBB2_2:
	movabsq	$3, %rax
	movabsq	$32, %rsi
	movabsq	$0, %rcx
	leaq	.L.str8, %rdx
	leaq	.L.str9, %rdi
	movabsq	$2, %r8
	movabsq	$64, %r9
	movabsq	$1, %r10
	leaq	.L.str21, %r11
                                        # implicit-def: RBX
	movabsq	$4, %r14
	leaq	store_kernel, %r15
	leaq	.L.str44, %r12
	movabsq	$66, %r13
	leaq	.L.str63, %rbp
	movq	%rax, 584(%rsp)         # 8-byte Spill
	leaq	.L.str70, %rax
	movq	%rax, 576(%rsp)         # 8-byte Spill
	leaq	.L.str71, %rax
	movq	%rax, 568(%rsp)         # 8-byte Spill
	movabsq	$49, %rax
	movq	%rsi, 560(%rsp)         # 8-byte Spill
	movl	$0, %esi
	movl	%esi, 556(%rsp)         # 4-byte Spill
	movl	$1, %esi
	.loc	1 66 0                  # mma_test_eigen.c:66:0
	movq	%rdi, 544(%rsp)         # 8-byte Spill
	movq	%r13, %rdi
	movl	%esi, 540(%rsp)         # 4-byte Spill
	movq	%rbp, %rsi
	movq	576(%rsp), %r13         # 8-byte Reload
	movq	%rdx, 528(%rsp)         # 8-byte Spill
	movq	%r13, %rdx
	movq	568(%rsp), %rbp         # 8-byte Reload
	movq	%rcx, 520(%rsp)         # 8-byte Spill
	movq	%rbp, %rcx
	movq	%r8, 512(%rsp)          # 8-byte Spill
	movq	%rax, %r8
	movl	556(%rsp), %ebp         # 4-byte Reload
	movq	%r9, 504(%rsp)          # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r14, 496(%rsp)         # 8-byte Spill
	movq	%r15, 488(%rsp)         # 8-byte Spill
	movq	%r12, 480(%rsp)         # 8-byte Spill
	movq	%rbx, 472(%rsp)         # 8-byte Spill
	movq	%r11, 464(%rsp)         # 8-byte Spill
	movq	%r10, 456(%rsp)         # 8-byte Spill
	callq	trace_logger_log0
	movq	496(%rsp), %rdi         # 8-byte Reload
	movq	504(%rsp), %rsi         # 8-byte Reload
	movq	488(%rsp), %rdx         # 8-byte Reload
	movq	456(%rsp), %rcx         # 8-byte Reload
	movq	480(%rsp), %r8          # 8-byte Reload
	movq	520(%rsp), %r9          # 8-byte Reload
	movq	544(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	456(%rsp), %rdi         # 8-byte Reload
	movq	504(%rsp), %rsi         # 8-byte Reload
	movq	472(%rsp), %rdx         # 8-byte Reload
	movq	520(%rsp), %rcx         # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	520(%rsp), %r9          # 8-byte Reload
	movq	544(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	512(%rsp), %rdi         # 8-byte Reload
	movq	504(%rsp), %rsi         # 8-byte Reload
	movq	936(%rsp), %rdx         # 8-byte Reload
	movq	456(%rsp), %rcx         # 8-byte Reload
	movq	464(%rsp), %r8          # 8-byte Reload
	movq	520(%rsp), %r9          # 8-byte Reload
	movq	544(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	584(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	movq	584(%rsp), %rdx         # 8-byte Reload
	movq	520(%rsp), %rcx         # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	520(%rsp), %r9          # 8-byte Reload
	movq	544(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$3, %edx
                                        # implicit-def: RDI
	movq	936(%rsp), %rsi         # 8-byte Reload
	callq	store_kernel
	movabsq	$3, %rax
	movabsq	$32, %rsi
	movabsq	$0, %rcx
	leaq	.L.str8, %r8
	leaq	.L.str9, %rdi
	movabsq	$2, %r9
	movabsq	$64, %r10
	movabsq	$1, %r11
	leaq	.L.str21, %rbx
	leaq	.L.str17, %r14
	movabsq	$4, %r15
	leaq	test_stores, %rdx
	leaq	.L.str5, %r12
	movabsq	$78, %r13
	leaq	.L.str63, %rbp
	movq	%rax, 448(%rsp)         # 8-byte Spill
	leaq	.L.str70, %rax
	movq	%rax, 440(%rsp)         # 8-byte Spill
	leaq	.L.str29, %rax
	movq	%rax, 432(%rsp)         # 8-byte Spill
	movabsq	$49, %rax
	movq	%rsi, 424(%rsp)         # 8-byte Spill
	movl	$0, %esi
	movl	%esi, 420(%rsp)         # 4-byte Spill
	movl	$1, %esi
	.loc	1 78 0                  # mma_test_eigen.c:78:0
	movq	%rdi, 408(%rsp)         # 8-byte Spill
	movq	%r13, %rdi
	movl	%esi, 404(%rsp)         # 4-byte Spill
	movq	%rbp, %rsi
	movq	440(%rsp), %r13         # 8-byte Reload
	movq	%rdx, 392(%rsp)         # 8-byte Spill
	movq	%r13, %rdx
	movq	432(%rsp), %rbp         # 8-byte Reload
	movq	%rcx, 384(%rsp)         # 8-byte Spill
	movq	%rbp, %rcx
	movq	%r8, 376(%rsp)          # 8-byte Spill
	movq	%rax, %r8
	movl	420(%rsp), %ebp         # 4-byte Reload
	movq	%r9, 368(%rsp)          # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r15, 360(%rsp)         # 8-byte Spill
	movq	%r14, 352(%rsp)         # 8-byte Spill
	movq	%r12, 344(%rsp)         # 8-byte Spill
	movq	%rbx, 336(%rsp)         # 8-byte Spill
	movq	%r10, 328(%rsp)         # 8-byte Spill
	movq	%r11, 320(%rsp)         # 8-byte Spill
	callq	trace_logger_log0
	movq	360(%rsp), %rdi         # 8-byte Reload
	movq	328(%rsp), %rsi         # 8-byte Reload
	movq	392(%rsp), %rdx         # 8-byte Reload
	movq	320(%rsp), %rcx         # 8-byte Reload
	movq	344(%rsp), %r8          # 8-byte Reload
	movq	384(%rsp), %r9          # 8-byte Reload
	movq	408(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	320(%rsp), %rdi         # 8-byte Reload
	movq	328(%rsp), %rsi         # 8-byte Reload
	movq	1088(%rsp), %rdx        # 8-byte Reload
	movq	320(%rsp), %rcx         # 8-byte Reload
	movq	352(%rsp), %r8          # 8-byte Reload
	movq	384(%rsp), %r9          # 8-byte Reload
	movq	408(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	368(%rsp), %rdi         # 8-byte Reload
	movq	328(%rsp), %rsi         # 8-byte Reload
	movq	936(%rsp), %rdx         # 8-byte Reload
	movq	320(%rsp), %rcx         # 8-byte Reload
	movq	336(%rsp), %r8          # 8-byte Reload
	movq	384(%rsp), %r9          # 8-byte Reload
	movq	408(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	448(%rsp), %rdi         # 8-byte Reload
	movq	424(%rsp), %rsi         # 8-byte Reload
	movq	448(%rsp), %rdx         # 8-byte Reload
	movq	384(%rsp), %rcx         # 8-byte Reload
	movq	376(%rsp), %r8          # 8-byte Reload
	movq	384(%rsp), %r9          # 8-byte Reload
	movq	408(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$3, %edx
	movq	1088(%rsp), %rdi        # 8-byte Reload
	movq	936(%rsp), %rsi         # 8-byte Reload
	callq	test_stores
	movabsq	$2, %rdi
	movabsq	$64, %rcx
	leaq	.L.str4, %rdx
	movabsq	$0, %rsi
	leaq	.L.str8, %r8
	leaq	.L.str9, %r9
	movabsq	$1, %r10
	leaq	.L.str30, %r11
	movabsq	$3, %rbx
	leaq	fprintf, %r14
	leaq	.L.str24, %r15
	movabsq	$83, %r12
	leaq	.L.str63, %r13
	leaq	.L.str70, %rbp
	movq	%rcx, 312(%rsp)         # 8-byte Spill
	leaq	.L.str31, %rcx
	movq	%rcx, 304(%rsp)         # 8-byte Spill
	movabsq	$49, %rcx
	movl	%eax, 300(%rsp)         # 4-byte Spill
	movl	$0, %eax
	movl	%eax, 296(%rsp)         # 4-byte Spill
	movl	$1, %eax
	movq	%rcx, 288(%rsp)         # 8-byte Spill
	movabsq	$19134, %rcx            # imm = 0x4ABE
	movq	%rcx, 280(%rsp)         # 8-byte Spill
	leaq	stdout, %rcx
	movq	%rcx, 272(%rsp)         # 8-byte Spill
	leaq	.L.str18, %rcx
	movq	%rcx, 264(%rsp)         # 8-byte Spill
	movabsq	$80, %rcx
	movq	%rcx, 256(%rsp)         # 8-byte Spill
	movabsq	$27, %rcx
	movq	%rcx, 248(%rsp)         # 8-byte Spill
	movabsq	$32, %rcx
	movq	%rcx, 240(%rsp)         # 8-byte Spill
	leaq	.L.str29, %rcx
	movl	%eax, 236(%rsp)         # 4-byte Spill
	movl	300(%rsp), %eax         # 4-byte Reload
	movl	%eax, %eax
                                        # kill: RAX<def> EAX<kill>
	movq	%rax, 224(%rsp)         # 8-byte Spill
	movq	280(%rsp), %rax         # 8-byte Reload
	movq	%rdi, 216(%rsp)         # 8-byte Spill
	movq	%rax, %rdi
	movq	240(%rsp), %rax         # 8-byte Reload
	movq	%rsi, 208(%rsp)         # 8-byte Spill
	movq	%rax, %rsi
	movq	224(%rsp), %rax         # 8-byte Reload
	movq	%rdx, 200(%rsp)         # 8-byte Spill
	movq	%rax, %rdx
	movq	%rcx, 192(%rsp)         # 8-byte Spill
	movq	%r10, %rcx
	movq	192(%rsp), %rax         # 8-byte Reload
	movq	%r8, 184(%rsp)          # 8-byte Spill
	movq	%rax, %r8
	movq	208(%rsp), %rax         # 8-byte Reload
	movq	%r9, 176(%rsp)          # 8-byte Spill
	movq	%rax, %r9
	movq	176(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	movq	%rbp, 168(%rsp)         # 8-byte Spill
	movq	%r15, 160(%rsp)         # 8-byte Spill
	movq	%r12, 152(%rsp)         # 8-byte Spill
	movq	%r13, 144(%rsp)         # 8-byte Spill
	movq	%r14, 136(%rsp)         # 8-byte Spill
	movq	%rbx, 128(%rsp)         # 8-byte Spill
	movq	%r10, 120(%rsp)         # 8-byte Spill
	movq	%r11, 112(%rsp)         # 8-byte Spill
	callq	trace_logger_log_int
.Ltmp83:
	#DEBUG_VALUE: main:num_failures <- 0
	.loc	1 80 0                  # mma_test_eigen.c:80:0
	movq	256(%rsp), %rdi         # 8-byte Reload
	movq	144(%rsp), %rsi         # 8-byte Reload
	movq	168(%rsp), %rdx         # 8-byte Reload
	movq	112(%rsp), %rcx         # 8-byte Reload
	movq	248(%rsp), %r8          # 8-byte Reload
	movl	296(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	120(%rsp), %rdi         # 8-byte Reload
	movq	312(%rsp), %rsi         # 8-byte Reload
	movq	272(%rsp), %rdx         # 8-byte Reload
	movq	120(%rsp), %rcx         # 8-byte Reload
	movq	264(%rsp), %r8          # 8-byte Reload
	movq	208(%rsp), %r9          # 8-byte Reload
	movq	176(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	stdout, %rax
.Ltmp84:
	.loc	1 83 0                  # mma_test_eigen.c:83:0
	movq	280(%rsp), %rdi         # 8-byte Reload
	movq	312(%rsp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	movq	120(%rsp), %rcx         # 8-byte Reload
	movq	112(%rsp), %r8          # 8-byte Reload
	movq	208(%rsp), %r9          # 8-byte Reload
	movq	176(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 104(%rsp)         # 8-byte Spill
	callq	trace_logger_log_ptr
	movq	152(%rsp), %rdi         # 8-byte Reload
	movq	144(%rsp), %rsi         # 8-byte Reload
	movq	168(%rsp), %rdx         # 8-byte Reload
	movq	304(%rsp), %rcx         # 8-byte Reload
	movq	288(%rsp), %r8          # 8-byte Reload
	movl	296(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	128(%rsp), %rdi         # 8-byte Reload
	movq	312(%rsp), %rsi         # 8-byte Reload
	movq	136(%rsp), %rdx         # 8-byte Reload
	movq	120(%rsp), %rcx         # 8-byte Reload
	movq	160(%rsp), %r8          # 8-byte Reload
	movq	208(%rsp), %r9          # 8-byte Reload
	movq	176(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	120(%rsp), %rdi         # 8-byte Reload
	movq	312(%rsp), %rsi         # 8-byte Reload
	movq	104(%rsp), %rdx         # 8-byte Reload
	movq	120(%rsp), %rcx         # 8-byte Reload
	movq	112(%rsp), %r8          # 8-byte Reload
	movq	208(%rsp), %r9          # 8-byte Reload
	movq	176(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	216(%rsp), %rdi         # 8-byte Reload
	movq	312(%rsp), %rsi         # 8-byte Reload
	movq	200(%rsp), %rdx         # 8-byte Reload
	movq	208(%rsp), %rcx         # 8-byte Reload
	movq	184(%rsp), %r8          # 8-byte Reload
	movq	208(%rsp), %r9          # 8-byte Reload
	movq	176(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$.L.str4, %esi
                                        # kill: RSI<def> ESI<kill>
	xorl	%edi, %edi
	movb	%dil, %al
	movq	104(%rsp), %rdi         # 8-byte Reload
	callq	fprintf
	movl	$0, %esi
	movabsq	$1, %rcx
	movabsq	$32, %rdx
	movabsq	$0, %rdi
	leaq	.L.str8, %r8
	leaq	.L.str9, %r9
	movabsq	$85, %r10
	leaq	.L.str63, %r11
	leaq	.L.str70, %rbx
	leaq	.L.str72, %r14
	movl	$1, %ebp
	movabsq	$19134, %r15            # imm = 0x4ABE
	leaq	.L.str31, %r12
	.loc	1 85 0                  # mma_test_eigen.c:85:0
	movl	%eax, %eax
	movl	%eax, %r13d
	movq	%rdi, 96(%rsp)          # 8-byte Spill
	movq	%r15, %rdi
	movl	%esi, 92(%rsp)          # 4-byte Spill
	movq	%rdx, %rsi
	movq	%rdx, 80(%rsp)          # 8-byte Spill
	movq	%r13, %rdx
	movq	%rcx, 72(%rsp)          # 8-byte Spill
	movq	%r8, 64(%rsp)           # 8-byte Spill
	movq	%r12, %r8
	movq	96(%rsp), %r15          # 8-byte Reload
	movq	%r9, 56(%rsp)           # 8-byte Spill
	movq	%r15, %r9
	movq	56(%rsp), %r12          # 8-byte Reload
	movq	%r12, (%rsp)
	movq	%r10, 48(%rsp)          # 8-byte Spill
	movl	%ebp, 44(%rsp)          # 4-byte Spill
	movq	%r11, 32(%rsp)          # 8-byte Spill
	movq	%rbx, 24(%rsp)          # 8-byte Spill
	movq	%r14, 16(%rsp)          # 8-byte Spill
	callq	trace_logger_log_int
	movq	48(%rsp), %rdi          # 8-byte Reload
	movq	32(%rsp), %rsi          # 8-byte Reload
	movq	24(%rsp), %rdx          # 8-byte Reload
	movq	16(%rsp), %rcx          # 8-byte Reload
	movq	72(%rsp), %r8           # 8-byte Reload
	movl	92(%rsp), %r9d          # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	72(%rsp), %rdi          # 8-byte Reload
	movq	80(%rsp), %rsi          # 8-byte Reload
	movq	96(%rsp), %rdx          # 8-byte Reload
	movq	96(%rsp), %rcx          # 8-byte Reload
	movq	64(%rsp), %r8           # 8-byte Reload
	movq	96(%rsp), %r9           # 8-byte Reload
	movq	56(%rsp), %r10          # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	92(%rsp), %eax          # 4-byte Reload
	addq	$1352, %rsp             # imm = 0x548
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
.Ltmp85:
.Ltmp86:
	.size	main, .Ltmp86-main
.Lfunc_end2:
	.cfi_endproc

	.section	.rodata.cst16,"aM",@progbits,16
	.align	16
.LCPI3_0:
	.quad	9223372036854775807     # double nan
	.quad	9223372036854775807     # double nan
	.section	.rodata.cst8,"aM",@progbits,8
	.align	8
.LCPI3_1:
	.quad	4616189618054758400     # double 4
.LCPI3_2:
	.quad	4607182418800017408     # double 1
.LCPI3_3:
	.quad	4611686018427387904     # double 2
	.text
	.globl	pythag
	.align	16, 0x90
	.type	pythag,@function
pythag:                                 # @pythag
	.cfi_startproc
.Lfunc_begin3:
	.loc	2 70 0                  # eispack.c:70:0
# BB#0:
	pushq	%rbp
.Ltmp94:
	.cfi_def_cfa_offset 16
	pushq	%r15
.Ltmp95:
	.cfi_def_cfa_offset 24
	pushq	%r14
.Ltmp96:
	.cfi_def_cfa_offset 32
	pushq	%r13
.Ltmp97:
	.cfi_def_cfa_offset 40
	pushq	%r12
.Ltmp98:
	.cfi_def_cfa_offset 48
	pushq	%rbx
.Ltmp99:
	.cfi_def_cfa_offset 56
	subq	$1464, %rsp             # imm = 0x5B8
.Ltmp100:
	.cfi_def_cfa_offset 1520
.Ltmp101:
	.cfi_offset %rbx, -56
.Ltmp102:
	.cfi_offset %r12, -48
.Ltmp103:
	.cfi_offset %r13, -40
.Ltmp104:
	.cfi_offset %r14, -32
.Ltmp105:
	.cfi_offset %r15, -24
.Ltmp106:
	.cfi_offset %rbp, -16
	movabsq	$2, %rax
	movabsq	$64, %rcx
	movabsq	$1, %rdx
	leaq	.L.str983, %rsi
	movabsq	$0, %rdi
	leaq	.L.str781, %r8
	leaq	.L.str579, %r9
	movabsq	$3, %r10
	leaq	r8_max, %r11
	leaq	.L.str1286, %rbx
	movabsq	$77, %r14
	leaq	.L.str377, %r15
	leaq	.L.str478, %r12
	leaq	.L.str1185, %r13
	movabsq	$49, %rbp
	movq	%rsi, 1456(%rsp)        # 8-byte Spill
	movl	$0, %esi
	movl	%esi, 1452(%rsp)        # 4-byte Spill
	movl	$1, %esi
	movq	%rax, 1440(%rsp)        # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 1432(%rsp)        # 8-byte Spill
	leaq	.L.str1084, %rax
	movq	%rax, 1424(%rsp)        # 8-byte Spill
	leaq	fabs, %rax
	movq	%rax, 1416(%rsp)        # 8-byte Spill
	leaq	.L.str680, %rax
	movq	%rax, 1408(%rsp)        # 8-byte Spill
	leaq	.L.str882, %rax
	movq	%rax, 1400(%rsp)        # 8-byte Spill
	movabsq	$24601, %rax            # imm = 0x6019
	.loc	2 11 0 prologue_end     # eispack.c:11:0
.Ltmp107:
	movq	%rdi, 1392(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movl	%esi, 1388(%rsp)        # 4-byte Spill
	movq	%rcx, %rsi
	vmovsd	%xmm0, 1376(%rsp)       # 8-byte Spill
	movq	%rdx, 1368(%rsp)        # 8-byte Spill
	movq	%rax, 1360(%rsp)        # 8-byte Spill
	movq	1400(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 1352(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	1392(%rsp), %rax        # 8-byte Reload
	movq	%r8, 1344(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	1344(%rsp), %rax        # 8-byte Reload
	movq	%r9, 1336(%rsp)         # 8-byte Spill
	movq	%rax, %r9
	vmovsd	%xmm1, 1328(%rsp)       # 8-byte Spill
	movq	%r12, 1320(%rsp)        # 8-byte Spill
	movq	%r14, 1312(%rsp)        # 8-byte Spill
	movq	%r15, 1304(%rsp)        # 8-byte Spill
	movq	%r13, 1296(%rsp)        # 8-byte Spill
	movq	%rbp, 1288(%rsp)        # 8-byte Spill
	movq	%rbx, 1280(%rsp)        # 8-byte Spill
	movq	%r11, 1272(%rsp)        # 8-byte Spill
	movq	%r10, 1264(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	1360(%rsp), %rdi        # 8-byte Reload
	movq	1352(%rsp), %rsi        # 8-byte Reload
	vmovsd	1328(%rsp), %xmm0       # 8-byte Reload
	movq	1368(%rsp), %rdx        # 8-byte Reload
	movq	1424(%rsp), %rcx        # 8-byte Reload
	movq	1392(%rsp), %r8         # 8-byte Reload
	movq	1344(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	#DEBUG_VALUE: pythag:a <- [RSP+1376]
	#DEBUG_VALUE: pythag:b <- [RSP+1328]
	.loc	2 77 0                  # eispack.c:77:0
	movq	1312(%rsp), %rdi        # 8-byte Reload
	movq	1304(%rsp), %rsi        # 8-byte Reload
	movq	1320(%rsp), %rdx        # 8-byte Reload
	movq	1336(%rsp), %rcx        # 8-byte Reload
	movq	1288(%rsp), %r8         # 8-byte Reload
	movl	1452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1440(%rsp), %rdi        # 8-byte Reload
	movq	1352(%rsp), %rsi        # 8-byte Reload
	movq	1416(%rsp), %rdx        # 8-byte Reload
	movq	1368(%rsp), %rcx        # 8-byte Reload
	movq	1408(%rsp), %r8         # 8-byte Reload
	movq	1392(%rsp), %r9         # 8-byte Reload
	movq	1344(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1368(%rsp), %rdi        # 8-byte Reload
	movq	1352(%rsp), %rsi        # 8-byte Reload
	vmovsd	1376(%rsp), %xmm0       # 8-byte Reload
	movq	1368(%rsp), %rdx        # 8-byte Reload
	movq	1400(%rsp), %rcx        # 8-byte Reload
	movq	1392(%rsp), %r8         # 8-byte Reload
	movq	1344(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	.LCPI3_0(%rip), %xmm0
	vmovsd	1376(%rsp), %xmm1       # 8-byte Reload
	vandpd	%xmm0, %xmm1, %xmm0
	movq	1432(%rsp), %rdi        # 8-byte Reload
	movq	1352(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 1256(%rsp)       # 8-byte Spill
	movq	1368(%rsp), %rdx        # 8-byte Reload
	movq	1336(%rsp), %rcx        # 8-byte Reload
	movq	1392(%rsp), %r8         # 8-byte Reload
	movq	1344(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1312(%rsp), %rdi        # 8-byte Reload
	movq	1304(%rsp), %rsi        # 8-byte Reload
	movq	1320(%rsp), %rdx        # 8-byte Reload
	movq	1456(%rsp), %rcx        # 8-byte Reload
	movq	1288(%rsp), %r8         # 8-byte Reload
	movl	1452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1440(%rsp), %rdi        # 8-byte Reload
	movq	1352(%rsp), %rsi        # 8-byte Reload
	movq	1416(%rsp), %rdx        # 8-byte Reload
	movq	1368(%rsp), %rcx        # 8-byte Reload
	movq	1408(%rsp), %r8         # 8-byte Reload
	movq	1392(%rsp), %r9         # 8-byte Reload
	movq	1344(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1368(%rsp), %rdi        # 8-byte Reload
	movq	1352(%rsp), %rsi        # 8-byte Reload
	vmovsd	1328(%rsp), %xmm0       # 8-byte Reload
	movq	1368(%rsp), %rdx        # 8-byte Reload
	movq	1424(%rsp), %rcx        # 8-byte Reload
	movq	1392(%rsp), %r8         # 8-byte Reload
	movq	1344(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	.LCPI3_0(%rip), %xmm0
	vmovsd	1328(%rsp), %xmm1       # 8-byte Reload
	vandpd	%xmm0, %xmm1, %xmm0
	movq	1432(%rsp), %rdi        # 8-byte Reload
	movq	1352(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 1248(%rsp)       # 8-byte Spill
	movq	1368(%rsp), %rdx        # 8-byte Reload
	movq	1456(%rsp), %rcx        # 8-byte Reload
	movq	1392(%rsp), %r8         # 8-byte Reload
	movq	1344(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1312(%rsp), %rdi        # 8-byte Reload
	movq	1304(%rsp), %rsi        # 8-byte Reload
	movq	1320(%rsp), %rdx        # 8-byte Reload
	movq	1296(%rsp), %rcx        # 8-byte Reload
	movq	1288(%rsp), %r8         # 8-byte Reload
	movl	1452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1264(%rsp), %rdi        # 8-byte Reload
	movq	1352(%rsp), %rsi        # 8-byte Reload
	movq	1272(%rsp), %rdx        # 8-byte Reload
	movq	1368(%rsp), %rcx        # 8-byte Reload
	movq	1280(%rsp), %r8         # 8-byte Reload
	movq	1392(%rsp), %r9         # 8-byte Reload
	movq	1344(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1368(%rsp), %rdi        # 8-byte Reload
	movq	1352(%rsp), %rsi        # 8-byte Reload
	vmovsd	1256(%rsp), %xmm0       # 8-byte Reload
	movq	1368(%rsp), %rdx        # 8-byte Reload
	movq	1336(%rsp), %rcx        # 8-byte Reload
	movq	1392(%rsp), %r8         # 8-byte Reload
	movq	1344(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1440(%rsp), %rdi        # 8-byte Reload
	movq	1352(%rsp), %rsi        # 8-byte Reload
	vmovsd	1248(%rsp), %xmm0       # 8-byte Reload
	movq	1368(%rsp), %rdx        # 8-byte Reload
	movq	1456(%rsp), %rcx        # 8-byte Reload
	movq	1392(%rsp), %r8         # 8-byte Reload
	movq	1344(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	1256(%rsp), %xmm0       # 8-byte Reload
	vmovsd	1248(%rsp), %xmm1       # 8-byte Reload
	callq	r8_max
.Ltmp108:
	movabsq	$1, %rax
	leaq	.L.str1387, %rcx
	movabsq	$0, %rdx
	leaq	.L.str781, %rsi
	movabsq	$2, %rdi
	leaq	.L.str1791, %r8
	movabsq	$3, %r9
	leaq	.L.str1690, %r10
	movabsq	$79, %r11
	leaq	.L.str377, %rbx
	leaq	.L.str478, %r14
	leaq	.L.str1589, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	vxorps	%xmm1, %xmm1, %xmm1
	movq	%rax, 1240(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 1232(%rsp)        # 8-byte Spill
	leaq	.L.str1185, %rax
	movq	%rax, 1224(%rsp)        # 8-byte Spill
	leaq	.L.str1488, %rax
	movq	%rax, 1216(%rsp)        # 8-byte Spill
	movabsq	$47, %rax
	movq	%rdi, 1208(%rsp)        # 8-byte Spill
	movq	%r13, %rdi
	movq	%rax, 1200(%rsp)        # 8-byte Spill
	movq	1232(%rsp), %rax        # 8-byte Reload
	movq	%rsi, 1192(%rsp)        # 8-byte Spill
	movq	%rax, %rsi
	vmovsd	%xmm0, 1184(%rsp)       # 8-byte Spill
	movq	1240(%rsp), %rax        # 8-byte Reload
	movq	%rdx, 1176(%rsp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	1224(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 1168(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	1176(%rsp), %rax        # 8-byte Reload
	movq	%r8, 1160(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	1192(%rsp), %rax        # 8-byte Reload
	movq	%r9, 1152(%rsp)         # 8-byte Spill
	movq	%rax, %r9
	movl	%r12d, 1148(%rsp)       # 4-byte Spill
	movq	%r15, 1136(%rsp)        # 8-byte Spill
	movl	%ebp, 1132(%rsp)        # 4-byte Spill
	movq	%r13, 1120(%rsp)        # 8-byte Spill
	vmovsd	%xmm1, 1112(%rsp)       # 8-byte Spill
	movq	%r14, 1104(%rsp)        # 8-byte Spill
	movq	%rbx, 1096(%rsp)        # 8-byte Spill
	movq	%r10, 1088(%rsp)        # 8-byte Spill
	movq	%r11, 1080(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
.Ltmp109:
	#DEBUG_VALUE: pythag:p <- [RSP+1184]
	.loc	2 79 0                  # eispack.c:79:0
	movq	1080(%rsp), %rdi        # 8-byte Reload
	movq	1096(%rsp), %rsi        # 8-byte Reload
	movq	1104(%rsp), %rdx        # 8-byte Reload
	movq	1168(%rsp), %rcx        # 8-byte Reload
	movq	1200(%rsp), %r8         # 8-byte Reload
	movl	1132(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1208(%rsp), %rdi        # 8-byte Reload
	movq	1232(%rsp), %rsi        # 8-byte Reload
	vmovsd	1112(%rsp), %xmm0       # 8-byte Reload
	movq	1176(%rsp), %rdx        # 8-byte Reload
	movq	1216(%rsp), %rcx        # 8-byte Reload
	movq	1176(%rsp), %r8         # 8-byte Reload
	movq	1192(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1240(%rsp), %rdi        # 8-byte Reload
	movq	1232(%rsp), %rsi        # 8-byte Reload
	vmovsd	1184(%rsp), %xmm0       # 8-byte Reload
	movq	1240(%rsp), %rdx        # 8-byte Reload
	movq	1224(%rsp), %rcx        # 8-byte Reload
	movq	1176(%rsp), %r8         # 8-byte Reload
	movq	1192(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	1184(%rsp), %xmm0       # 8-byte Reload
	vmovsd	1112(%rsp), %xmm1       # 8-byte Reload
	vucomisd	%xmm1, %xmm0
	setne	%al
	setp	%cl
	orb	%al, %cl
	movb	%cl, %al
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	1120(%rsp), %rdi        # 8-byte Reload
	movq	1240(%rsp), %rsi        # 8-byte Reload
	movq	1240(%rsp), %r8         # 8-byte Reload
	movb	%cl, 1079(%rsp)         # 1-byte Spill
	movq	%r8, %rcx
	movq	1168(%rsp), %r8         # 8-byte Reload
	movq	1176(%rsp), %r9         # 8-byte Reload
	movq	1192(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1080(%rsp), %rdi        # 8-byte Reload
	movq	1096(%rsp), %rsi        # 8-byte Reload
	movq	1104(%rsp), %rdx        # 8-byte Reload
	movq	1136(%rsp), %rcx        # 8-byte Reload
	movq	1208(%rsp), %r8         # 8-byte Reload
	movl	1132(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1152(%rsp), %rdi        # 8-byte Reload
	movq	1176(%rsp), %rsi        # 8-byte Reload
	movq	1176(%rsp), %rdx        # 8-byte Reload
	movq	1240(%rsp), %rcx        # 8-byte Reload
	movq	1088(%rsp), %r8         # 8-byte Reload
	movq	1176(%rsp), %r9         # 8-byte Reload
	movq	1192(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1208(%rsp), %rdi        # 8-byte Reload
	movq	1176(%rsp), %rsi        # 8-byte Reload
	movq	1176(%rsp), %rdx        # 8-byte Reload
	movq	1240(%rsp), %rcx        # 8-byte Reload
	movq	1160(%rsp), %r8         # 8-byte Reload
	movq	1176(%rsp), %r9         # 8-byte Reload
	movq	1192(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	1079(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	1240(%rsp), %rdi        # 8-byte Reload
	movq	1240(%rsp), %rsi        # 8-byte Reload
	movq	1240(%rsp), %rcx        # 8-byte Reload
	movq	1168(%rsp), %r8         # 8-byte Reload
	movq	1176(%rsp), %r9         # 8-byte Reload
	movq	1192(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	1079(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	vmovsd	1184(%rsp), %xmm0       # 8-byte Reload
	vmovsd	%xmm0, 1064(%rsp)       # 8-byte Spill
	jne	.LBB3_1
	jmp	.LBB3_3
.Ltmp110:
.LBB3_1:
	movabsq	$2, %rdi
	movabsq	$64, %rax
	movabsq	$1, %rcx
	leaq	.L.str983, %rdx
	movabsq	$0, %rsi
	leaq	.L.str781, %r8
	leaq	.L.str579, %r9
	movabsq	$3, %r10
	leaq	r8_min, %r11
	leaq	.L.str1993, %rbx
	movabsq	$81, %r14
	leaq	.L.str377, %r15
	leaq	.L.str1690, %r12
	leaq	.L.str1892, %r13
	movabsq	$49, %rbp
	movq	%rsi, 1056(%rsp)        # 8-byte Spill
	movl	$0, %esi
	movl	%esi, 1052(%rsp)        # 4-byte Spill
	movl	$1, %esi
	.loc	2 81 0                  # eispack.c:81:0
.Ltmp111:
	movq	%rdi, 1040(%rsp)        # 8-byte Spill
	movq	%r14, %rdi
	movl	%esi, 1036(%rsp)        # 4-byte Spill
	movq	%r15, %rsi
	movq	%rdx, 1024(%rsp)        # 8-byte Spill
	movq	%r12, %rdx
	movq	%rcx, 1016(%rsp)        # 8-byte Spill
	movq	%r13, %rcx
	movq	%r8, 1008(%rsp)         # 8-byte Spill
	movq	%rbp, %r8
	movl	1052(%rsp), %ebp        # 4-byte Reload
	movq	%r9, 1000(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r11, 992(%rsp)         # 8-byte Spill
	movq	%rax, 984(%rsp)         # 8-byte Spill
	movq	%r10, 976(%rsp)         # 8-byte Spill
	movq	%rbx, 968(%rsp)         # 8-byte Spill
	callq	trace_logger_log0
	movq	976(%rsp), %rdi         # 8-byte Reload
	movq	984(%rsp), %rsi         # 8-byte Reload
	movq	992(%rsp), %rdx         # 8-byte Reload
	movq	1016(%rsp), %rcx        # 8-byte Reload
	movq	968(%rsp), %r8          # 8-byte Reload
	movq	1056(%rsp), %r9         # 8-byte Reload
	movq	1008(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1016(%rsp), %rdi        # 8-byte Reload
	movq	984(%rsp), %rsi         # 8-byte Reload
	vmovsd	1256(%rsp), %xmm0       # 8-byte Reload
	movq	1016(%rsp), %rdx        # 8-byte Reload
	movq	1000(%rsp), %rcx        # 8-byte Reload
	movq	1056(%rsp), %r8         # 8-byte Reload
	movq	1008(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1040(%rsp), %rdi        # 8-byte Reload
	movq	984(%rsp), %rsi         # 8-byte Reload
	vmovsd	1248(%rsp), %xmm0       # 8-byte Reload
	movq	1016(%rsp), %rdx        # 8-byte Reload
	movq	1024(%rsp), %rcx        # 8-byte Reload
	movq	1056(%rsp), %r8         # 8-byte Reload
	movq	1008(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	1256(%rsp), %xmm0       # 8-byte Reload
	vmovsd	1248(%rsp), %xmm1       # 8-byte Reload
	callq	r8_min
	movabsq	$1, %rax
	leaq	.L.str2397, %rcx
	movabsq	$0, %rdx
	leaq	.L.str781, %rsi
	movabsq	$2, %rdi
	leaq	.L.str2599, %r8
	movabsq	$3, %r9
	leaq	.L.str1791, %r10
	movabsq	$88, %r11
	leaq	.L.str377, %rbx
	leaq	.L.str1690, %r14
	leaq	.L.str2498, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 960(%rsp)         # 8-byte Spill
	movabsq	$4, %rax
	vmovsd	.LCPI3_1, %xmm1
	movq	%rax, 952(%rsp)         # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 944(%rsp)         # 8-byte Spill
	leaq	.L.str2296, %rax
	movq	%rax, 936(%rsp)         # 8-byte Spill
	leaq	.L.str1488, %rax
	movq	%rax, 928(%rsp)         # 8-byte Spill
	movabsq	$47, %rax
	movq	%rax, 920(%rsp)         # 8-byte Spill
	leaq	.L.str2195, %rax
	movq	%rax, 912(%rsp)         # 8-byte Spill
	movabsq	$86, %rax
	movq	%rax, 904(%rsp)         # 8-byte Spill
	movabsq	$9, %rax
	movq	%rax, 896(%rsp)         # 8-byte Spill
	leaq	.L.str2094, %rax
	movq	%rax, 888(%rsp)         # 8-byte Spill
	movabsq	$82, %rax
	movq	%rax, 880(%rsp)         # 8-byte Spill
	movabsq	$13, %rax
	movq	%rax, 872(%rsp)         # 8-byte Spill
	leaq	.L.str1892, %rax
	movq	%rax, 864(%rsp)         # 8-byte Spill
	leaq	.L.str1185, %rax
	movq	%rax, 856(%rsp)         # 8-byte Spill
	movabsq	$81, %rax
	movq	%rax, 848(%rsp)         # 8-byte Spill
	movabsq	$16, %rax
	movq	%rdi, 840(%rsp)         # 8-byte Spill
	movq	%r13, %rdi
	movq	%rax, 832(%rsp)         # 8-byte Spill
	movq	944(%rsp), %rax         # 8-byte Reload
	movq	%rsi, 824(%rsp)         # 8-byte Spill
	movq	%rax, %rsi
	vmovsd	%xmm0, 816(%rsp)        # 8-byte Spill
	movq	960(%rsp), %rax         # 8-byte Reload
	movq	%rdx, 808(%rsp)         # 8-byte Spill
	movq	%rax, %rdx
	movq	864(%rsp), %rax         # 8-byte Reload
	movq	%rcx, 800(%rsp)         # 8-byte Spill
	movq	%rax, %rcx
	movq	808(%rsp), %rax         # 8-byte Reload
	movq	%r8, 792(%rsp)          # 8-byte Spill
	movq	%rax, %r8
	movq	824(%rsp), %rax         # 8-byte Reload
	movq	%r9, 784(%rsp)          # 8-byte Spill
	movq	%rax, %r9
	movl	%r12d, 780(%rsp)        # 4-byte Spill
	movq	%r15, 768(%rsp)         # 8-byte Spill
	movl	%ebp, 764(%rsp)         # 4-byte Spill
	movq	%r13, 752(%rsp)         # 8-byte Spill
	vmovsd	%xmm1, 744(%rsp)        # 8-byte Spill
	movq	%r14, 736(%rsp)         # 8-byte Spill
	movq	%rbx, 728(%rsp)         # 8-byte Spill
	movq	%r10, 720(%rsp)         # 8-byte Spill
	movq	%r11, 712(%rsp)         # 8-byte Spill
	callq	trace_logger_log_double
	movq	848(%rsp), %rdi         # 8-byte Reload
	movq	728(%rsp), %rsi         # 8-byte Reload
	movq	736(%rsp), %rdx         # 8-byte Reload
	movq	888(%rsp), %rcx         # 8-byte Reload
	movq	832(%rsp), %r8          # 8-byte Reload
	movl	764(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	840(%rsp), %rdi         # 8-byte Reload
	movq	944(%rsp), %rsi         # 8-byte Reload
	vmovsd	1184(%rsp), %xmm0       # 8-byte Reload
	movq	960(%rsp), %rdx         # 8-byte Reload
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	808(%rsp), %r8          # 8-byte Reload
	movq	824(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	960(%rsp), %rdi         # 8-byte Reload
	movq	944(%rsp), %rsi         # 8-byte Reload
	vmovsd	816(%rsp), %xmm0        # 8-byte Reload
	movq	960(%rsp), %rdx         # 8-byte Reload
	movq	864(%rsp), %rcx         # 8-byte Reload
	movq	808(%rsp), %r8          # 8-byte Reload
	movq	824(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	816(%rsp), %xmm0        # 8-byte Reload
	vmovsd	1184(%rsp), %xmm1       # 8-byte Reload
	vdivsd	%xmm1, %xmm0, %xmm2
	movq	752(%rsp), %rdi         # 8-byte Reload
	movq	944(%rsp), %rsi         # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	960(%rsp), %rdx         # 8-byte Reload
	movq	888(%rsp), %rcx         # 8-byte Reload
	movq	808(%rsp), %r8          # 8-byte Reload
	movq	824(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 704(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
.Ltmp112:
	#DEBUG_VALUE: pythag:r <- [RSP+704]
	.loc	2 82 0                  # eispack.c:82:0
	movq	880(%rsp), %rdi         # 8-byte Reload
	movq	728(%rsp), %rsi         # 8-byte Reload
	movq	736(%rsp), %rdx         # 8-byte Reload
	movq	912(%rsp), %rcx         # 8-byte Reload
	movq	872(%rsp), %r8          # 8-byte Reload
	movl	764(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	840(%rsp), %rdi         # 8-byte Reload
	movq	944(%rsp), %rsi         # 8-byte Reload
	vmovsd	704(%rsp), %xmm0        # 8-byte Reload
	movq	960(%rsp), %rdx         # 8-byte Reload
	movq	888(%rsp), %rcx         # 8-byte Reload
	movq	808(%rsp), %r8          # 8-byte Reload
	movq	824(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	960(%rsp), %rdi         # 8-byte Reload
	movq	944(%rsp), %rsi         # 8-byte Reload
	vmovsd	704(%rsp), %xmm0        # 8-byte Reload
	movq	960(%rsp), %rdx         # 8-byte Reload
	movq	888(%rsp), %rcx         # 8-byte Reload
	movq	808(%rsp), %r8          # 8-byte Reload
	movq	824(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	704(%rsp), %xmm0        # 8-byte Reload
	vmulsd	%xmm0, %xmm0, %xmm1
	movq	752(%rsp), %rdi         # 8-byte Reload
	movq	944(%rsp), %rsi         # 8-byte Reload
	vmovaps	%xmm1, %xmm0
	movq	960(%rsp), %rdx         # 8-byte Reload
	movq	912(%rsp), %rcx         # 8-byte Reload
	movq	808(%rsp), %r8          # 8-byte Reload
	movq	824(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm1, 696(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
.Ltmp113:
	#DEBUG_VALUE: pythag:r <- [RSP+696]
	.loc	2 86 0                  # eispack.c:86:0
	movq	904(%rsp), %rdi         # 8-byte Reload
	movq	728(%rsp), %rsi         # 8-byte Reload
	movq	736(%rsp), %rdx         # 8-byte Reload
	movq	936(%rsp), %rcx         # 8-byte Reload
	movq	896(%rsp), %r8          # 8-byte Reload
	movl	764(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	840(%rsp), %rdi         # 8-byte Reload
	movq	944(%rsp), %rsi         # 8-byte Reload
	vmovsd	744(%rsp), %xmm0        # 8-byte Reload
	movq	808(%rsp), %rdx         # 8-byte Reload
	movq	928(%rsp), %rcx         # 8-byte Reload
	movq	808(%rsp), %r8          # 8-byte Reload
	movq	824(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	960(%rsp), %rdi         # 8-byte Reload
	movq	944(%rsp), %rsi         # 8-byte Reload
	vmovsd	696(%rsp), %xmm0        # 8-byte Reload
	movq	960(%rsp), %rdx         # 8-byte Reload
	movq	912(%rsp), %rcx         # 8-byte Reload
	movq	808(%rsp), %r8          # 8-byte Reload
	movq	824(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	696(%rsp), %xmm0        # 8-byte Reload
	vmovsd	744(%rsp), %xmm1        # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
	movq	752(%rsp), %rdi         # 8-byte Reload
	movq	944(%rsp), %rsi         # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	960(%rsp), %rdx         # 8-byte Reload
	movq	936(%rsp), %rcx         # 8-byte Reload
	movq	808(%rsp), %r8          # 8-byte Reload
	movq	824(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 688(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
.Ltmp114:
	#DEBUG_VALUE: pythag:t <- [RSP+688]
	.loc	2 88 0                  # eispack.c:88:0
	movq	712(%rsp), %rdi         # 8-byte Reload
	movq	728(%rsp), %rsi         # 8-byte Reload
	movq	736(%rsp), %rdx         # 8-byte Reload
	movq	800(%rsp), %rcx         # 8-byte Reload
	movq	920(%rsp), %r8          # 8-byte Reload
	movl	764(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	840(%rsp), %rdi         # 8-byte Reload
	movq	944(%rsp), %rsi         # 8-byte Reload
	vmovsd	744(%rsp), %xmm0        # 8-byte Reload
	movq	808(%rsp), %rdx         # 8-byte Reload
	movq	928(%rsp), %rcx         # 8-byte Reload
	movq	808(%rsp), %r8          # 8-byte Reload
	movq	824(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	960(%rsp), %rdi         # 8-byte Reload
	movq	944(%rsp), %rsi         # 8-byte Reload
	vmovsd	688(%rsp), %xmm0        # 8-byte Reload
	movq	960(%rsp), %rdx         # 8-byte Reload
	movq	936(%rsp), %rcx         # 8-byte Reload
	movq	808(%rsp), %r8          # 8-byte Reload
	movq	824(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	688(%rsp), %xmm0        # 8-byte Reload
	vmovsd	744(%rsp), %xmm1        # 8-byte Reload
	vucomisd	%xmm1, %xmm0
	sete	%al
	setnp	%cl
	andb	%al, %cl
	movb	%cl, %al
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	752(%rsp), %rdi         # 8-byte Reload
	movq	960(%rsp), %rsi         # 8-byte Reload
	movq	960(%rsp), %r8          # 8-byte Reload
	movb	%cl, 687(%rsp)          # 1-byte Spill
	movq	%r8, %rcx
	movq	800(%rsp), %r8          # 8-byte Reload
	movq	808(%rsp), %r9          # 8-byte Reload
	movq	824(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	712(%rsp), %rdi         # 8-byte Reload
	movq	728(%rsp), %rsi         # 8-byte Reload
	movq	736(%rsp), %rdx         # 8-byte Reload
	movq	768(%rsp), %rcx         # 8-byte Reload
	movq	840(%rsp), %r8          # 8-byte Reload
	movl	764(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	784(%rsp), %rdi         # 8-byte Reload
	movq	808(%rsp), %rsi         # 8-byte Reload
	movq	808(%rsp), %rdx         # 8-byte Reload
	movq	960(%rsp), %rcx         # 8-byte Reload
	movq	720(%rsp), %r8          # 8-byte Reload
	movq	808(%rsp), %r9          # 8-byte Reload
	movq	824(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	840(%rsp), %rdi         # 8-byte Reload
	movq	808(%rsp), %rsi         # 8-byte Reload
	movq	808(%rsp), %rdx         # 8-byte Reload
	movq	960(%rsp), %rcx         # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	808(%rsp), %r9          # 8-byte Reload
	movq	824(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	687(%rsp), %al          # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	960(%rsp), %rdi         # 8-byte Reload
	movq	960(%rsp), %rsi         # 8-byte Reload
	movq	960(%rsp), %rcx         # 8-byte Reload
	movq	800(%rsp), %r8          # 8-byte Reload
	movq	808(%rsp), %r9          # 8-byte Reload
	movq	824(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	687(%rsp), %al          # 1-byte Reload
	testb	$1, %al
	vmovsd	688(%rsp), %xmm0        # 8-byte Reload
	vmovsd	1184(%rsp), %xmm1       # 8-byte Reload
	vmovsd	696(%rsp), %xmm2        # 8-byte Reload
	vmovsd	1184(%rsp), %xmm3       # 8-byte Reload
	vmovsd	%xmm0, 672(%rsp)        # 8-byte Spill
	vmovsd	%xmm1, 664(%rsp)        # 8-byte Spill
	vmovsd	%xmm2, 656(%rsp)        # 8-byte Spill
	vmovsd	%xmm3, 1064(%rsp)       # 8-byte Spill
	jne	.LBB3_3
.Ltmp115:
.LBB3_2:                                # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	vmovsd	656(%rsp), %xmm0        # 8-byte Reload
	vmovsd	664(%rsp), %xmm1        # 8-byte Reload
	vmovsd	672(%rsp), %xmm2        # 8-byte Reload
	movabsq	$1, %rax
	leaq	.L.str37111, %rcx
	movabsq	$0, %rdx
	leaq	.L.str781, %rsi
	movabsq	$2, %rdi
	leaq	.L.str2599, %r8
	movabsq	$3, %r9
	leaq	.L.str1791, %r10
	movabsq	$88, %r11
	leaq	.L.str377, %rbx
	leaq	.L.str38112, %r14
	movl	$0, %ebp
	movl	$1, %r15d
	movabsq	$19134, %r12            # imm = 0x4ABE
	movabsq	$4, %r13
	vmovsd	.LCPI3_1, %xmm3
	movq	%rax, 648(%rsp)         # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 640(%rsp)         # 8-byte Spill
	leaq	.L.str27101, %rax
	movq	%rax, 632(%rsp)         # 8-byte Spill
	leaq	.L.str1488, %rax
	movq	%rax, 624(%rsp)         # 8-byte Spill
	movabsq	$47, %rax
	movq	%rax, 616(%rsp)         # 8-byte Spill
	leaq	.L.str31105, %rax
	movq	%rax, 608(%rsp)         # 8-byte Spill
	movabsq	$86, %rax
	movq	%rax, 600(%rsp)         # 8-byte Spill
	movabsq	$9, %rax
	movq	%rax, 592(%rsp)         # 8-byte Spill
	leaq	.L.str30104, %rax
	movq	%rax, 584(%rsp)         # 8-byte Spill
	leaq	.L.str36110, %rax
	movq	%rax, 576(%rsp)         # 8-byte Spill
	movabsq	$96, %rax
	movq	%rax, 568(%rsp)         # 8-byte Spill
	movabsq	$13, %rax
	movq	%rax, 560(%rsp)         # 8-byte Spill
	leaq	.L.str35109, %rax
	movq	%rax, 552(%rsp)         # 8-byte Spill
	leaq	.L.str32106, %rax
	movq	%rax, 544(%rsp)         # 8-byte Spill
	leaq	.L.str34108, %rax
	movq	%rax, 536(%rsp)         # 8-byte Spill
	movabsq	$16, %rax
	movq	%rax, 528(%rsp)         # 8-byte Spill
	leaq	.L.str29103, %rax
	movq	%rax, 520(%rsp)         # 8-byte Spill
	leaq	.L.str28102, %rax
	movq	%rax, 512(%rsp)         # 8-byte Spill
	movabsq	$95, %rax
	vmovsd	.LCPI3_2, %xmm4
	movq	%rax, 504(%rsp)         # 8-byte Spill
	leaq	.L.str33107, %rax
	movq	%rax, 496(%rsp)         # 8-byte Spill
	movabsq	$94, %rax
	vmovsd	.LCPI3_3, %xmm5
	movq	%rax, 488(%rsp)         # 8-byte Spill
	leaq	.L.str26100, %rax
	movq	%rax, 480(%rsp)         # 8-byte Spill
	movabsq	$93, %rax
	movq	%rax, 472(%rsp)         # 8-byte Spill
	leaq	.L.str2195, %rax
	movq	%rax, 464(%rsp)         # 8-byte Spill
	leaq	.L.str1690, %rax
	movq	%rax, 456(%rsp)         # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 448(%rsp)         # 8-byte Spill
	movabsq	$48, %rax
	movq	%rax, 440(%rsp)         # 8-byte Spill
	leaq	.L.str1185, %rax
	movq	%rax, 432(%rsp)         # 8-byte Spill
	leaq	.L.str2296, %rax
	.loc	2 93 0                  # eispack.c:93:0
	movq	%rax, 424(%rsp)         # 8-byte Spill
	movq	448(%rsp), %rax         # 8-byte Reload
	movq	%rdi, 416(%rsp)         # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 408(%rsp)         # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, 400(%rsp)         # 8-byte Spill
	movq	%r8, %rdx
	movq	480(%rsp), %rax         # 8-byte Reload
	movq	%rcx, 392(%rsp)         # 8-byte Spill
	movq	%rax, %rcx
	movq	440(%rsp), %rax         # 8-byte Reload
	movq	%r8, 384(%rsp)          # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 376(%rsp)          # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	vmovsd	%xmm0, 368(%rsp)        # 8-byte Spill
	vmovsd	%xmm1, 360(%rsp)        # 8-byte Spill
	vmovsd	%xmm2, 352(%rsp)        # 8-byte Spill
	movq	%r13, 344(%rsp)         # 8-byte Spill
	vmovsd	%xmm3, 336(%rsp)        # 8-byte Spill
	vmovsd	%xmm4, 328(%rsp)        # 8-byte Spill
	vmovsd	%xmm5, 320(%rsp)        # 8-byte Spill
	movq	%r12, 312(%rsp)         # 8-byte Spill
	movl	%r15d, 308(%rsp)        # 4-byte Spill
	movq	%r10, 296(%rsp)         # 8-byte Spill
	movq	%r11, 288(%rsp)         # 8-byte Spill
	movq	%rbx, 280(%rsp)         # 8-byte Spill
	movq	%r14, 272(%rsp)         # 8-byte Spill
	movl	%ebp, 268(%rsp)         # 4-byte Spill
	callq	trace_logger_log0
	movq	416(%rsp), %rdi         # 8-byte Reload
	movq	640(%rsp), %rsi         # 8-byte Reload
	movq	400(%rsp), %rdx         # 8-byte Reload
	movq	648(%rsp), %rcx         # 8-byte Reload
	movq	424(%rsp), %r8          # 8-byte Reload
	movq	648(%rsp), %r9          # 8-byte Reload
	movq	456(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	648(%rsp), %rdi         # 8-byte Reload
	movq	640(%rsp), %rsi         # 8-byte Reload
	movq	400(%rsp), %rdx         # 8-byte Reload
	movq	648(%rsp), %rcx         # 8-byte Reload
	movq	632(%rsp), %r8          # 8-byte Reload
	movq	648(%rsp), %r9          # 8-byte Reload
	movq	384(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	312(%rsp), %rdi         # 8-byte Reload
	movq	640(%rsp), %rsi         # 8-byte Reload
	vmovsd	352(%rsp), %xmm0        # 8-byte Reload
	movq	648(%rsp), %rdx         # 8-byte Reload
	movq	480(%rsp), %rcx         # 8-byte Reload
	movq	400(%rsp), %r8          # 8-byte Reload
	movq	384(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	448(%rsp), %rdi         # 8-byte Reload
	movq	280(%rsp), %rsi         # 8-byte Reload
	movq	384(%rsp), %rdx         # 8-byte Reload
	movq	512(%rsp), %rcx         # 8-byte Reload
	movq	440(%rsp), %r8          # 8-byte Reload
	movl	268(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	416(%rsp), %rdi         # 8-byte Reload
	movq	640(%rsp), %rsi         # 8-byte Reload
	movq	400(%rsp), %rdx         # 8-byte Reload
	movq	648(%rsp), %rcx         # 8-byte Reload
	movq	432(%rsp), %r8          # 8-byte Reload
	movq	648(%rsp), %r9          # 8-byte Reload
	movq	456(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	648(%rsp), %rdi         # 8-byte Reload
	movq	640(%rsp), %rsi         # 8-byte Reload
	movq	400(%rsp), %rdx         # 8-byte Reload
	movq	648(%rsp), %rcx         # 8-byte Reload
	movq	520(%rsp), %r8          # 8-byte Reload
	movq	648(%rsp), %r9          # 8-byte Reload
	movq	384(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	312(%rsp), %rdi         # 8-byte Reload
	movq	640(%rsp), %rsi         # 8-byte Reload
	vmovsd	360(%rsp), %xmm0        # 8-byte Reload
	movq	648(%rsp), %rdx         # 8-byte Reload
	movq	512(%rsp), %rcx         # 8-byte Reload
	movq	400(%rsp), %r8          # 8-byte Reload
	movq	384(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	448(%rsp), %rdi         # 8-byte Reload
	movq	280(%rsp), %rsi         # 8-byte Reload
	movq	384(%rsp), %rdx         # 8-byte Reload
	movq	584(%rsp), %rcx         # 8-byte Reload
	movq	440(%rsp), %r8          # 8-byte Reload
	movl	268(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	416(%rsp), %rdi         # 8-byte Reload
	movq	640(%rsp), %rsi         # 8-byte Reload
	movq	400(%rsp), %rdx         # 8-byte Reload
	movq	648(%rsp), %rcx         # 8-byte Reload
	movq	464(%rsp), %r8          # 8-byte Reload
	movq	648(%rsp), %r9          # 8-byte Reload
	movq	456(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	648(%rsp), %rdi         # 8-byte Reload
	movq	640(%rsp), %rsi         # 8-byte Reload
	movq	400(%rsp), %rdx         # 8-byte Reload
	movq	648(%rsp), %rcx         # 8-byte Reload
	movq	608(%rsp), %r8          # 8-byte Reload
	movq	648(%rsp), %r9          # 8-byte Reload
	movq	384(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	312(%rsp), %rdi         # 8-byte Reload
	movq	640(%rsp), %rsi         # 8-byte Reload
	vmovsd	368(%rsp), %xmm0        # 8-byte Reload
	movq	648(%rsp), %rdx         # 8-byte Reload
	movq	584(%rsp), %rcx         # 8-byte Reload
	movq	400(%rsp), %r8          # 8-byte Reload
	movq	384(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	472(%rsp), %rdi         # 8-byte Reload
	movq	280(%rsp), %rsi         # 8-byte Reload
	movq	384(%rsp), %rdx         # 8-byte Reload
	movq	544(%rsp), %rcx         # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movl	268(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	416(%rsp), %rdi         # 8-byte Reload
	movq	640(%rsp), %rsi         # 8-byte Reload
	vmovsd	352(%rsp), %xmm0        # 8-byte Reload
	movq	648(%rsp), %rdx         # 8-byte Reload
	movq	480(%rsp), %rcx         # 8-byte Reload
	movq	400(%rsp), %r8          # 8-byte Reload
	movq	408(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	648(%rsp), %rdi         # 8-byte Reload
	movq	640(%rsp), %rsi         # 8-byte Reload
	vmovsd	368(%rsp), %xmm0        # 8-byte Reload
	movq	648(%rsp), %rdx         # 8-byte Reload
	movq	584(%rsp), %rcx         # 8-byte Reload
	movq	400(%rsp), %r8          # 8-byte Reload
	movq	408(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	368(%rsp), %xmm0        # 8-byte Reload
	vmovsd	352(%rsp), %xmm1        # 8-byte Reload
	vdivsd	%xmm1, %xmm0, %xmm2
	movq	312(%rsp), %rdi         # 8-byte Reload
	movq	640(%rsp), %rsi         # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	648(%rsp), %rdx         # 8-byte Reload
	movq	544(%rsp), %rcx         # 8-byte Reload
	movq	400(%rsp), %r8          # 8-byte Reload
	movq	408(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 256(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
.Ltmp116:
	#DEBUG_VALUE: pythag:s <- [RSP+256]
	.loc	2 94 0                  # eispack.c:94:0
	movq	488(%rsp), %rdi         # 8-byte Reload
	movq	280(%rsp), %rsi         # 8-byte Reload
	movq	384(%rsp), %rdx         # 8-byte Reload
	movq	496(%rsp), %rcx         # 8-byte Reload
	movq	560(%rsp), %r8          # 8-byte Reload
	movl	268(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	416(%rsp), %rdi         # 8-byte Reload
	movq	640(%rsp), %rsi         # 8-byte Reload
	vmovsd	320(%rsp), %xmm0        # 8-byte Reload
	movq	400(%rsp), %rdx         # 8-byte Reload
	movq	624(%rsp), %rcx         # 8-byte Reload
	movq	400(%rsp), %r8          # 8-byte Reload
	movq	408(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	648(%rsp), %rdi         # 8-byte Reload
	movq	640(%rsp), %rsi         # 8-byte Reload
	vmovsd	256(%rsp), %xmm0        # 8-byte Reload
	movq	648(%rsp), %rdx         # 8-byte Reload
	movq	544(%rsp), %rcx         # 8-byte Reload
	movq	400(%rsp), %r8          # 8-byte Reload
	movq	408(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	256(%rsp), %xmm0        # 8-byte Reload
	vmovsd	320(%rsp), %xmm1        # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	312(%rsp), %rdi         # 8-byte Reload
	movq	640(%rsp), %rsi         # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	648(%rsp), %rdx         # 8-byte Reload
	movq	496(%rsp), %rcx         # 8-byte Reload
	movq	400(%rsp), %r8          # 8-byte Reload
	movq	408(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 248(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	488(%rsp), %rdi         # 8-byte Reload
	movq	280(%rsp), %rsi         # 8-byte Reload
	movq	384(%rsp), %rdx         # 8-byte Reload
	movq	536(%rsp), %rcx         # 8-byte Reload
	movq	592(%rsp), %r8          # 8-byte Reload
	movl	268(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	416(%rsp), %rdi         # 8-byte Reload
	movq	640(%rsp), %rsi         # 8-byte Reload
	vmovsd	328(%rsp), %xmm0        # 8-byte Reload
	movq	400(%rsp), %rdx         # 8-byte Reload
	movq	624(%rsp), %rcx         # 8-byte Reload
	movq	400(%rsp), %r8          # 8-byte Reload
	movq	408(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	648(%rsp), %rdi         # 8-byte Reload
	movq	640(%rsp), %rsi         # 8-byte Reload
	vmovsd	248(%rsp), %xmm0        # 8-byte Reload
	movq	648(%rsp), %rdx         # 8-byte Reload
	movq	496(%rsp), %rcx         # 8-byte Reload
	movq	400(%rsp), %r8          # 8-byte Reload
	movq	408(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	248(%rsp), %xmm0        # 8-byte Reload
	vmovsd	328(%rsp), %xmm1        # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
	movq	312(%rsp), %rdi         # 8-byte Reload
	movq	640(%rsp), %rsi         # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	648(%rsp), %rdx         # 8-byte Reload
	movq	536(%rsp), %rcx         # 8-byte Reload
	movq	400(%rsp), %r8          # 8-byte Reload
	movq	408(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 240(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
.Ltmp117:
	#DEBUG_VALUE: pythag:u <- [RSP+240]
	.loc	2 95 0                  # eispack.c:95:0
	movq	504(%rsp), %rdi         # 8-byte Reload
	movq	280(%rsp), %rsi         # 8-byte Reload
	movq	384(%rsp), %rdx         # 8-byte Reload
	movq	520(%rsp), %rcx         # 8-byte Reload
	movq	560(%rsp), %r8          # 8-byte Reload
	movl	268(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	416(%rsp), %rdi         # 8-byte Reload
	movq	640(%rsp), %rsi         # 8-byte Reload
	vmovsd	240(%rsp), %xmm0        # 8-byte Reload
	movq	648(%rsp), %rdx         # 8-byte Reload
	movq	536(%rsp), %rcx         # 8-byte Reload
	movq	400(%rsp), %r8          # 8-byte Reload
	movq	408(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	648(%rsp), %rdi         # 8-byte Reload
	movq	640(%rsp), %rsi         # 8-byte Reload
	vmovsd	360(%rsp), %xmm0        # 8-byte Reload
	movq	648(%rsp), %rdx         # 8-byte Reload
	movq	512(%rsp), %rcx         # 8-byte Reload
	movq	400(%rsp), %r8          # 8-byte Reload
	movq	408(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	360(%rsp), %xmm0        # 8-byte Reload
	vmovsd	240(%rsp), %xmm1        # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	312(%rsp), %rdi         # 8-byte Reload
	movq	640(%rsp), %rsi         # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	648(%rsp), %rdx         # 8-byte Reload
	movq	520(%rsp), %rcx         # 8-byte Reload
	movq	400(%rsp), %r8          # 8-byte Reload
	movq	408(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 232(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
.Ltmp118:
	#DEBUG_VALUE: pythag:p <- [RSP+232]
	.loc	2 96 0                  # eispack.c:96:0
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	280(%rsp), %rsi         # 8-byte Reload
	movq	384(%rsp), %rdx         # 8-byte Reload
	movq	552(%rsp), %rcx         # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movl	268(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	416(%rsp), %rdi         # 8-byte Reload
	movq	640(%rsp), %rsi         # 8-byte Reload
	vmovsd	240(%rsp), %xmm0        # 8-byte Reload
	movq	648(%rsp), %rdx         # 8-byte Reload
	movq	536(%rsp), %rcx         # 8-byte Reload
	movq	400(%rsp), %r8          # 8-byte Reload
	movq	408(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	648(%rsp), %rdi         # 8-byte Reload
	movq	640(%rsp), %rsi         # 8-byte Reload
	vmovsd	256(%rsp), %xmm0        # 8-byte Reload
	movq	648(%rsp), %rdx         # 8-byte Reload
	movq	544(%rsp), %rcx         # 8-byte Reload
	movq	400(%rsp), %r8          # 8-byte Reload
	movq	408(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	256(%rsp), %xmm0        # 8-byte Reload
	vmovsd	240(%rsp), %xmm1        # 8-byte Reload
	vdivsd	%xmm1, %xmm0, %xmm2
	movq	312(%rsp), %rdi         # 8-byte Reload
	movq	640(%rsp), %rsi         # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	648(%rsp), %rdx         # 8-byte Reload
	movq	552(%rsp), %rcx         # 8-byte Reload
	movq	400(%rsp), %r8          # 8-byte Reload
	movq	408(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 224(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	280(%rsp), %rsi         # 8-byte Reload
	movq	384(%rsp), %rdx         # 8-byte Reload
	movq	576(%rsp), %rcx         # 8-byte Reload
	movq	560(%rsp), %r8          # 8-byte Reload
	movl	268(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	416(%rsp), %rdi         # 8-byte Reload
	movq	640(%rsp), %rsi         # 8-byte Reload
	vmovsd	224(%rsp), %xmm0        # 8-byte Reload
	movq	648(%rsp), %rdx         # 8-byte Reload
	movq	552(%rsp), %rcx         # 8-byte Reload
	movq	400(%rsp), %r8          # 8-byte Reload
	movq	408(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	648(%rsp), %rdi         # 8-byte Reload
	movq	640(%rsp), %rsi         # 8-byte Reload
	vmovsd	224(%rsp), %xmm0        # 8-byte Reload
	movq	648(%rsp), %rdx         # 8-byte Reload
	movq	552(%rsp), %rcx         # 8-byte Reload
	movq	400(%rsp), %r8          # 8-byte Reload
	movq	408(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	224(%rsp), %xmm0        # 8-byte Reload
	vmulsd	%xmm0, %xmm0, %xmm1
	movq	312(%rsp), %rdi         # 8-byte Reload
	movq	640(%rsp), %rsi         # 8-byte Reload
	vmovaps	%xmm1, %xmm0
	movq	648(%rsp), %rdx         # 8-byte Reload
	movq	576(%rsp), %rcx         # 8-byte Reload
	movq	400(%rsp), %r8          # 8-byte Reload
	movq	408(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm1, 216(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	280(%rsp), %rsi         # 8-byte Reload
	movq	384(%rsp), %rdx         # 8-byte Reload
	movq	608(%rsp), %rcx         # 8-byte Reload
	movq	560(%rsp), %r8          # 8-byte Reload
	movl	268(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	416(%rsp), %rdi         # 8-byte Reload
	movq	640(%rsp), %rsi         # 8-byte Reload
	vmovsd	216(%rsp), %xmm0        # 8-byte Reload
	movq	648(%rsp), %rdx         # 8-byte Reload
	movq	576(%rsp), %rcx         # 8-byte Reload
	movq	400(%rsp), %r8          # 8-byte Reload
	movq	408(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	648(%rsp), %rdi         # 8-byte Reload
	movq	640(%rsp), %rsi         # 8-byte Reload
	vmovsd	368(%rsp), %xmm0        # 8-byte Reload
	movq	648(%rsp), %rdx         # 8-byte Reload
	movq	584(%rsp), %rcx         # 8-byte Reload
	movq	400(%rsp), %r8          # 8-byte Reload
	movq	408(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	368(%rsp), %xmm0        # 8-byte Reload
	vmovsd	216(%rsp), %xmm1        # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	312(%rsp), %rdi         # 8-byte Reload
	movq	640(%rsp), %rsi         # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	648(%rsp), %rdx         # 8-byte Reload
	movq	608(%rsp), %rcx         # 8-byte Reload
	movq	400(%rsp), %r8          # 8-byte Reload
	movq	408(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 208(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
.Ltmp119:
	#DEBUG_VALUE: pythag:r <- [RSP+208]
	.loc	2 86 0                  # eispack.c:86:0
	movq	600(%rsp), %rdi         # 8-byte Reload
	movq	280(%rsp), %rsi         # 8-byte Reload
	movq	384(%rsp), %rdx         # 8-byte Reload
	movq	632(%rsp), %rcx         # 8-byte Reload
	movq	592(%rsp), %r8          # 8-byte Reload
	movl	268(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	416(%rsp), %rdi         # 8-byte Reload
	movq	640(%rsp), %rsi         # 8-byte Reload
	vmovsd	336(%rsp), %xmm0        # 8-byte Reload
	movq	400(%rsp), %rdx         # 8-byte Reload
	movq	624(%rsp), %rcx         # 8-byte Reload
	movq	400(%rsp), %r8          # 8-byte Reload
	movq	408(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	648(%rsp), %rdi         # 8-byte Reload
	movq	640(%rsp), %rsi         # 8-byte Reload
	vmovsd	208(%rsp), %xmm0        # 8-byte Reload
	movq	648(%rsp), %rdx         # 8-byte Reload
	movq	608(%rsp), %rcx         # 8-byte Reload
	movq	400(%rsp), %r8          # 8-byte Reload
	movq	408(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	208(%rsp), %xmm0        # 8-byte Reload
	vmovsd	336(%rsp), %xmm1        # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
	movq	312(%rsp), %rdi         # 8-byte Reload
	movq	640(%rsp), %rsi         # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	648(%rsp), %rdx         # 8-byte Reload
	movq	632(%rsp), %rcx         # 8-byte Reload
	movq	400(%rsp), %r8          # 8-byte Reload
	movq	408(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 200(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
.Ltmp120:
	#DEBUG_VALUE: pythag:t <- [RSP+352]
	.loc	2 88 0                  # eispack.c:88:0
	movq	288(%rsp), %rdi         # 8-byte Reload
	movq	280(%rsp), %rsi         # 8-byte Reload
	movq	384(%rsp), %rdx         # 8-byte Reload
	movq	392(%rsp), %rcx         # 8-byte Reload
	movq	616(%rsp), %r8          # 8-byte Reload
	movl	268(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	416(%rsp), %rdi         # 8-byte Reload
	movq	640(%rsp), %rsi         # 8-byte Reload
	vmovsd	336(%rsp), %xmm0        # 8-byte Reload
	movq	400(%rsp), %rdx         # 8-byte Reload
	movq	624(%rsp), %rcx         # 8-byte Reload
	movq	400(%rsp), %r8          # 8-byte Reload
	movq	408(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	648(%rsp), %rdi         # 8-byte Reload
	movq	640(%rsp), %rsi         # 8-byte Reload
	vmovsd	200(%rsp), %xmm0        # 8-byte Reload
	movq	648(%rsp), %rdx         # 8-byte Reload
	movq	632(%rsp), %rcx         # 8-byte Reload
	movq	400(%rsp), %r8          # 8-byte Reload
	movq	408(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	200(%rsp), %xmm0        # 8-byte Reload
	vmovsd	336(%rsp), %xmm1        # 8-byte Reload
	vucomisd	%xmm1, %xmm0
	sete	%al
	setnp	%cl
	andb	%al, %cl
	movb	%cl, %al
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	312(%rsp), %rdi         # 8-byte Reload
	movq	648(%rsp), %rsi         # 8-byte Reload
	movq	648(%rsp), %r8          # 8-byte Reload
	movb	%cl, 199(%rsp)          # 1-byte Spill
	movq	%r8, %rcx
	movq	392(%rsp), %r8          # 8-byte Reload
	movq	400(%rsp), %r9          # 8-byte Reload
	movq	408(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	288(%rsp), %rdi         # 8-byte Reload
	movq	280(%rsp), %rsi         # 8-byte Reload
	movq	384(%rsp), %rdx         # 8-byte Reload
	movq	272(%rsp), %rcx         # 8-byte Reload
	movq	416(%rsp), %r8          # 8-byte Reload
	movl	268(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	376(%rsp), %rdi         # 8-byte Reload
	movq	400(%rsp), %rsi         # 8-byte Reload
	movq	400(%rsp), %rdx         # 8-byte Reload
	movq	648(%rsp), %rcx         # 8-byte Reload
	movq	296(%rsp), %r8          # 8-byte Reload
	movq	400(%rsp), %r9          # 8-byte Reload
	movq	408(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	416(%rsp), %rdi         # 8-byte Reload
	movq	400(%rsp), %rsi         # 8-byte Reload
	movq	400(%rsp), %rdx         # 8-byte Reload
	movq	648(%rsp), %rcx         # 8-byte Reload
	movq	384(%rsp), %r8          # 8-byte Reload
	movq	400(%rsp), %r9          # 8-byte Reload
	movq	408(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	199(%rsp), %al          # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	648(%rsp), %rdi         # 8-byte Reload
	movq	648(%rsp), %rsi         # 8-byte Reload
	movq	648(%rsp), %rcx         # 8-byte Reload
	movq	392(%rsp), %r8          # 8-byte Reload
	movq	400(%rsp), %r9          # 8-byte Reload
	movq	408(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	199(%rsp), %al          # 1-byte Reload
	testb	$1, %al
	vmovsd	200(%rsp), %xmm0        # 8-byte Reload
	vmovsd	232(%rsp), %xmm1        # 8-byte Reload
	vmovsd	208(%rsp), %xmm2        # 8-byte Reload
	vmovsd	232(%rsp), %xmm3        # 8-byte Reload
	vmovsd	%xmm0, 672(%rsp)        # 8-byte Spill
	vmovsd	%xmm1, 664(%rsp)        # 8-byte Spill
	vmovsd	%xmm2, 656(%rsp)        # 8-byte Spill
	vmovsd	%xmm3, 1064(%rsp)       # 8-byte Spill
	jne	.LBB3_3
	jmp	.LBB3_2
.Ltmp121:
.LBB3_3:                                # %.loopexit
	vmovsd	1064(%rsp), %xmm0       # 8-byte Reload
	movabsq	$1, %rax
	movabsq	$64, %rcx
	leaq	.L.str39113, %rdx
	movabsq	$0, %rsi
	leaq	.L.str781, %r9
	movabsq	$99, %rdi
	leaq	.L.str377, %r8
	leaq	.L.str1791, %r10
	leaq	.L.str40114, %r11
	movl	$0, %ebx
	movl	$1, %ebp
	movabsq	$19134, %r14            # imm = 0x4ABE
	leaq	.L.str478, %r15
	leaq	.L.str1185, %r12
	movabsq	$2, %r13
	movq	%rax, 184(%rsp)         # 8-byte Spill
	leaq	.L.str1690, %rax
	movq	%rax, 176(%rsp)         # 8-byte Spill
	movabsq	$3, %rax
	movq	%rax, 168(%rsp)         # 8-byte Spill
	leaq	.L.str29103, %rax
	movq	%rax, 160(%rsp)         # 8-byte Spill
	leaq	.L.str2599, %rax
	movq	%rax, 152(%rsp)         # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 144(%rsp)         # 8-byte Spill
	movabsq	$48, %rax
	.loc	2 99 0                  # eispack.c:99:0
	movq	%rax, 136(%rsp)         # 8-byte Spill
	movq	144(%rsp), %rax         # 8-byte Reload
	movq	%rdi, 128(%rsp)         # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 120(%rsp)         # 8-byte Spill
	movq	%r8, %rsi
	movq	%rdx, 112(%rsp)         # 8-byte Spill
	movq	%r10, %rdx
	movq	112(%rsp), %rax         # 8-byte Reload
	movq	%rcx, 104(%rsp)         # 8-byte Spill
	movq	%rax, %rcx
	movq	136(%rsp), %rax         # 8-byte Reload
	movq	%r8, 96(%rsp)           # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 88(%rsp)           # 8-byte Spill
	movl	%ebx, %r9d
	movl	$1, (%rsp)
	vmovsd	%xmm0, 80(%rsp)         # 8-byte Spill
	movq	%r14, 72(%rsp)          # 8-byte Spill
	movq	%r15, 64(%rsp)          # 8-byte Spill
	movq	%r12, 56(%rsp)          # 8-byte Spill
	movl	%ebx, 52(%rsp)          # 4-byte Spill
	movq	%r13, 40(%rsp)          # 8-byte Spill
	movl	%ebp, 36(%rsp)          # 4-byte Spill
	movq	%r10, 24(%rsp)          # 8-byte Spill
	movq	%r11, 16(%rsp)          # 8-byte Spill
	callq	trace_logger_log0
	movq	168(%rsp), %rdi         # 8-byte Reload
	movq	104(%rsp), %rsi         # 8-byte Reload
	movq	120(%rsp), %rdx         # 8-byte Reload
	movq	184(%rsp), %rcx         # 8-byte Reload
	movq	160(%rsp), %r8          # 8-byte Reload
	movq	184(%rsp), %r9          # 8-byte Reload
	movq	152(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	40(%rsp), %rdi          # 8-byte Reload
	movq	104(%rsp), %rsi         # 8-byte Reload
	movq	120(%rsp), %rdx         # 8-byte Reload
	movq	184(%rsp), %rcx         # 8-byte Reload
	movq	56(%rsp), %r8           # 8-byte Reload
	movq	184(%rsp), %r9          # 8-byte Reload
	movq	176(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	184(%rsp), %rdi         # 8-byte Reload
	movq	104(%rsp), %rsi         # 8-byte Reload
	movq	120(%rsp), %rdx         # 8-byte Reload
	movq	184(%rsp), %rcx         # 8-byte Reload
	movq	56(%rsp), %r8           # 8-byte Reload
	movq	184(%rsp), %r9          # 8-byte Reload
	movq	64(%rsp), %rax          # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	72(%rsp), %rdi          # 8-byte Reload
	movq	104(%rsp), %rsi         # 8-byte Reload
	vmovsd	80(%rsp), %xmm0         # 8-byte Reload
	movq	184(%rsp), %rdx         # 8-byte Reload
	movq	112(%rsp), %rcx         # 8-byte Reload
	movq	120(%rsp), %r8          # 8-byte Reload
	movq	64(%rsp), %r9           # 8-byte Reload
	callq	trace_logger_log_double
	movq	128(%rsp), %rdi         # 8-byte Reload
	movq	96(%rsp), %rsi          # 8-byte Reload
	movq	24(%rsp), %rdx          # 8-byte Reload
	movq	16(%rsp), %rcx          # 8-byte Reload
	movq	184(%rsp), %r8          # 8-byte Reload
	movl	52(%rsp), %r9d          # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	184(%rsp), %rdi         # 8-byte Reload
	movq	104(%rsp), %rsi         # 8-byte Reload
	vmovsd	80(%rsp), %xmm0         # 8-byte Reload
	movq	184(%rsp), %rdx         # 8-byte Reload
	movq	112(%rsp), %rcx         # 8-byte Reload
	movq	120(%rsp), %r8          # 8-byte Reload
	movq	88(%rsp), %r9           # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	80(%rsp), %xmm0         # 8-byte Reload
	addq	$1464, %rsp             # imm = 0x5B8
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
.Ltmp122:
.Ltmp123:
	.size	pythag, .Ltmp123-pythag
.Lfunc_end3:
	.cfi_endproc

	.globl	r8_max
	.align	16, 0x90
	.type	r8_max,@function
r8_max:                                 # @r8_max
	.cfi_startproc
.Lfunc_begin4:
	.loc	2 169 0                 # eispack.c:169:0
# BB#0:
	pushq	%rbp
.Ltmp131:
	.cfi_def_cfa_offset 16
	pushq	%r15
.Ltmp132:
	.cfi_def_cfa_offset 24
	pushq	%r14
.Ltmp133:
	.cfi_def_cfa_offset 32
	pushq	%r13
.Ltmp134:
	.cfi_def_cfa_offset 40
	pushq	%r12
.Ltmp135:
	.cfi_def_cfa_offset 48
	pushq	%rbx
.Ltmp136:
	.cfi_def_cfa_offset 56
	subq	$232, %rsp
.Ltmp137:
	.cfi_def_cfa_offset 288
.Ltmp138:
	.cfi_offset %rbx, -56
.Ltmp139:
	.cfi_offset %r12, -48
.Ltmp140:
	.cfi_offset %r13, -40
.Ltmp141:
	.cfi_offset %r14, -32
.Ltmp142:
	.cfi_offset %r15, -24
.Ltmp143:
	.cfi_offset %rbp, -16
	#DEBUG_VALUE: r8_max:y <- XMM1
	#DEBUG_VALUE: r8_max:x <- XMM0
	movabsq	$1, %rax
	movabsq	$64, %rcx
	leaq	.L.str43117, %rdx
	movabsq	$0, %rsi
	leaq	.L.str781, %rdi
	movabsq	$180, %r8
	leaq	.L.str1286, %r9
	leaq	.L.str478, %r10
	leaq	.L.str44118, %r11
	movl	$0, %ebx
	movl	$1, %ebp
	movabsq	$19134, %r14            # imm = 0x4ABE
	.loc	2 143 0 prologue_end    # eispack.c:143:0
.Ltmp144:
	movl	$.L.str41115, %r15d
	movl	%r15d, %r12d
	movl	$.L.str781, %r15d
	movl	%r15d, %r13d
	movl	$24601, %r15d           # imm = 0x6019
                                        # kill: R15<def> R15D<kill>
	movq	%rsi, 224(%rsp)         # 8-byte Spill
	movl	$64, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, 216(%rsp)         # 8-byte Spill
	movl	$1, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, 208(%rsp)         # 8-byte Spill
	xorl	%esi, %esi
	movq	%rax, 200(%rsp)         # 8-byte Spill
	movl	%esi, %eax
	movq	%rdi, 192(%rsp)         # 8-byte Spill
	movq	%r15, %rdi
	movq	%rax, 184(%rsp)         # 8-byte Spill
	movq	216(%rsp), %rax         # 8-byte Reload
	movl	%esi, 180(%rsp)         # 4-byte Spill
	movq	%rax, %rsi
	vmovsd	%xmm0, 168(%rsp)        # 8-byte Spill
.Ltmp145:
	#DEBUG_VALUE: r8_max:x <- [RSP+168]
	movq	208(%rsp), %rax         # 8-byte Reload
	movq	%rdx, 160(%rsp)         # 8-byte Spill
	movq	%rax, %rdx
	movq	%rcx, 152(%rsp)         # 8-byte Spill
	movq	%r12, %rcx
	movq	184(%rsp), %rax         # 8-byte Reload
	movq	%r8, 144(%rsp)          # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 136(%rsp)          # 8-byte Spill
	movq	%r13, %r9
	vmovsd	%xmm1, 128(%rsp)        # 8-byte Spill
.Ltmp146:
	#DEBUG_VALUE: r8_max:y <- [RSP+128]
	movq	%r12, 120(%rsp)         # 8-byte Spill
	movl	%ebp, 116(%rsp)         # 4-byte Spill
	movq	%r14, 104(%rsp)         # 8-byte Spill
	movq	%r15, 96(%rsp)          # 8-byte Spill
	movq	%r13, 88(%rsp)          # 8-byte Spill
	movl	%ebx, 84(%rsp)          # 4-byte Spill
	movq	%r11, 72(%rsp)          # 8-byte Spill
	movq	%r10, 64(%rsp)          # 8-byte Spill
	callq	trace_logger_log_double
.Ltmp147:
	movl	$.L.str42116, %ebx
	movl	%ebx, %eax
	movq	96(%rsp), %rdi          # 8-byte Reload
	movq	216(%rsp), %rsi         # 8-byte Reload
	vmovsd	128(%rsp), %xmm0        # 8-byte Reload
	movq	208(%rsp), %rdx         # 8-byte Reload
	movq	%rax, %rcx
	movq	184(%rsp), %r8          # 8-byte Reload
	movq	88(%rsp), %r9           # 8-byte Reload
	movq	%rax, 56(%rsp)          # 8-byte Spill
	callq	trace_logger_log_double
	.loc	2 172 0                 # eispack.c:172:0
.Ltmp148:
	movq	%rsp, %rax
	movl	$1, (%rax)
	movl	$.L.str1286, %ebx
	movl	%ebx, %eax
	movl	$.L.str478, %ebx
	movl	%ebx, %ecx
	movl	$.L.str579, %ebx
	movl	%ebx, %edx
	movl	$172, %ebx
	movl	%ebx, %edi
	movl	$47, %ebx
	movl	%ebx, %r8d
	movq	%rax, %rsi
	movq	%rdx, 48(%rsp)          # 8-byte Spill
	movq	%rcx, %rdx
	movq	48(%rsp), %r9           # 8-byte Reload
	movq	%rcx, 40(%rsp)          # 8-byte Spill
	movq	%r9, %rcx
	movl	180(%rsp), %r9d         # 4-byte Reload
	movq	%rax, 32(%rsp)          # 8-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %eax
	movq	%rax, %rdi
	movq	216(%rsp), %rsi         # 8-byte Reload
	vmovsd	168(%rsp), %xmm0        # 8-byte Reload
	movq	208(%rsp), %rdx         # 8-byte Reload
	movq	120(%rsp), %rcx         # 8-byte Reload
	movq	184(%rsp), %r8          # 8-byte Reload
	movq	88(%rsp), %r9           # 8-byte Reload
	movq	%rax, 24(%rsp)          # 8-byte Spill
	callq	trace_logger_log_double
	movq	208(%rsp), %rdi         # 8-byte Reload
	movq	216(%rsp), %rsi         # 8-byte Reload
	vmovsd	128(%rsp), %xmm0        # 8-byte Reload
	movq	208(%rsp), %rdx         # 8-byte Reload
	movq	56(%rsp), %rcx          # 8-byte Reload
	movq	184(%rsp), %r8          # 8-byte Reload
	movq	88(%rsp), %r9           # 8-byte Reload
	callq	trace_logger_log_double
.Ltmp149:
	.loc	2 143 0                 # eispack.c:143:0
	vmovsd	168(%rsp), %xmm0        # 8-byte Reload
	vmovsd	128(%rsp), %xmm1        # 8-byte Reload
	vucomisd	%xmm1, %xmm0
	.loc	2 172 0                 # eispack.c:172:0
.Ltmp150:
	seta	%al
	.loc	2 175 0                 # eispack.c:175:0
.Ltmp151:
	movzbl	%al, %ebx
	movl	%ebx, %ecx
	movq	%rsp, %rdx
	movq	$.L.str781, (%rdx)
	movl	$19134, %ebx            # imm = 0x4ABE
	movl	%ebx, %edi
	movq	208(%rsp), %rsi         # 8-byte Reload
	movq	%rcx, %rdx
	movq	208(%rsp), %r8          # 8-byte Reload
	movq	%rcx, 16(%rsp)          # 8-byte Spill
	movq	%r8, %rcx
	movq	48(%rsp), %r8           # 8-byte Reload
	movq	184(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_int
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str43117, %ebx
	movl	%ebx, %ecx
	movl	$175, %ebx
	movl	%ebx, %edi
	movl	$50, %ebx
	movl	%ebx, %r8d
	movq	32(%rsp), %rsi          # 8-byte Reload
	movq	40(%rsp), %rdx          # 8-byte Reload
	movl	180(%rsp), %r9d         # 4-byte Reload
	callq	trace_logger_log0
	movl	$3, %r9d
	movl	%r9d, %edi
	movq	216(%rsp), %rsi         # 8-byte Reload
	vmovsd	128(%rsp), %xmm0        # 8-byte Reload
	movq	208(%rsp), %rdx         # 8-byte Reload
	movq	56(%rsp), %rcx          # 8-byte Reload
	movq	184(%rsp), %r8          # 8-byte Reload
	movq	88(%rsp), %r9           # 8-byte Reload
	callq	trace_logger_log_double
	movq	24(%rsp), %rdi          # 8-byte Reload
	movq	216(%rsp), %rsi         # 8-byte Reload
	vmovsd	168(%rsp), %xmm0        # 8-byte Reload
	movq	208(%rsp), %rdx         # 8-byte Reload
	movq	120(%rsp), %rcx         # 8-byte Reload
	movq	184(%rsp), %r8          # 8-byte Reload
	movq	88(%rsp), %r9           # 8-byte Reload
	callq	trace_logger_log_double
	movq	%rsp, %rcx
	movq	$.L.str781, (%rcx)
	movq	208(%rsp), %rdi         # 8-byte Reload
	movq	208(%rsp), %rsi         # 8-byte Reload
	movq	16(%rsp), %rdx          # 8-byte Reload
	movq	208(%rsp), %rcx         # 8-byte Reload
	movq	48(%rsp), %r8           # 8-byte Reload
	movq	184(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_int
	vmovsd	168(%rsp), %xmm0        # 8-byte Reload
	vmovsd	128(%rsp), %xmm1        # 8-byte Reload
	vmaxsd	%xmm1, %xmm0, %xmm2
.Ltmp152:
	.loc	2 180 0                 # eispack.c:180:0
	movq	104(%rsp), %rdi         # 8-byte Reload
	movq	152(%rsp), %rsi         # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	200(%rsp), %rdx         # 8-byte Reload
	movq	160(%rsp), %rcx         # 8-byte Reload
	movq	224(%rsp), %r8          # 8-byte Reload
	movq	192(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 8(%rsp)          # 8-byte Spill
	callq	trace_logger_log_double
	movq	144(%rsp), %rdi         # 8-byte Reload
	movq	136(%rsp), %rsi         # 8-byte Reload
	movq	64(%rsp), %rdx          # 8-byte Reload
	movq	72(%rsp), %rcx          # 8-byte Reload
	movq	200(%rsp), %r8          # 8-byte Reload
	movl	84(%rsp), %r9d          # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	200(%rsp), %rdi         # 8-byte Reload
	movq	152(%rsp), %rsi         # 8-byte Reload
	vmovsd	8(%rsp), %xmm0          # 8-byte Reload
	movq	200(%rsp), %rdx         # 8-byte Reload
	movq	160(%rsp), %rcx         # 8-byte Reload
	movq	224(%rsp), %r8          # 8-byte Reload
	movq	192(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	8(%rsp), %xmm0          # 8-byte Reload
	addq	$232, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
.Ltmp153:
.Ltmp154:
	.size	r8_max, .Ltmp154-r8_max
.Lfunc_end4:
	.cfi_endproc

	.globl	r8_min
	.align	16, 0x90
	.type	r8_min,@function
r8_min:                                 # @r8_min
	.cfi_startproc
.Lfunc_begin5:
	.loc	2 210 0                 # eispack.c:210:0
# BB#0:
	pushq	%rbp
.Ltmp162:
	.cfi_def_cfa_offset 16
	pushq	%r15
.Ltmp163:
	.cfi_def_cfa_offset 24
	pushq	%r14
.Ltmp164:
	.cfi_def_cfa_offset 32
	pushq	%r13
.Ltmp165:
	.cfi_def_cfa_offset 40
	pushq	%r12
.Ltmp166:
	.cfi_def_cfa_offset 48
	pushq	%rbx
.Ltmp167:
	.cfi_def_cfa_offset 56
	subq	$232, %rsp
.Ltmp168:
	.cfi_def_cfa_offset 288
.Ltmp169:
	.cfi_offset %rbx, -56
.Ltmp170:
	.cfi_offset %r12, -48
.Ltmp171:
	.cfi_offset %r13, -40
.Ltmp172:
	.cfi_offset %r14, -32
.Ltmp173:
	.cfi_offset %r15, -24
.Ltmp174:
	.cfi_offset %rbp, -16
	#DEBUG_VALUE: r8_min:y <- XMM1
	#DEBUG_VALUE: r8_min:x <- XMM0
	movabsq	$1, %rax
	movabsq	$64, %rcx
	leaq	.L.str45119, %rdx
	movabsq	$0, %rsi
	leaq	.L.str781, %rdi
	movabsq	$221, %r8
	leaq	.L.str1993, %r9
	leaq	.L.str478, %r10
	leaq	.L.str44118, %r11
	movl	$0, %ebx
	movl	$1, %ebp
	movabsq	$19134, %r14            # imm = 0x4ABE
	.loc	2 184 0 prologue_end    # eispack.c:184:0
.Ltmp175:
	movl	$.L.str41115, %r15d
	movl	%r15d, %r12d
	movl	$.L.str781, %r15d
	movl	%r15d, %r13d
	movl	$24601, %r15d           # imm = 0x6019
                                        # kill: R15<def> R15D<kill>
	movq	%rsi, 224(%rsp)         # 8-byte Spill
	movl	$64, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, 216(%rsp)         # 8-byte Spill
	movl	$1, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, 208(%rsp)         # 8-byte Spill
	xorl	%esi, %esi
	movq	%rax, 200(%rsp)         # 8-byte Spill
	movl	%esi, %eax
	movq	%rdi, 192(%rsp)         # 8-byte Spill
	movq	%r15, %rdi
	movq	%rax, 184(%rsp)         # 8-byte Spill
	movq	216(%rsp), %rax         # 8-byte Reload
	movl	%esi, 180(%rsp)         # 4-byte Spill
	movq	%rax, %rsi
	vmovsd	%xmm0, 168(%rsp)        # 8-byte Spill
.Ltmp176:
	#DEBUG_VALUE: r8_min:x <- [RSP+168]
	movq	208(%rsp), %rax         # 8-byte Reload
	movq	%rdx, 160(%rsp)         # 8-byte Spill
	movq	%rax, %rdx
	movq	%rcx, 152(%rsp)         # 8-byte Spill
	movq	%r12, %rcx
	movq	184(%rsp), %rax         # 8-byte Reload
	movq	%r8, 144(%rsp)          # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 136(%rsp)          # 8-byte Spill
	movq	%r13, %r9
	vmovsd	%xmm1, 128(%rsp)        # 8-byte Spill
.Ltmp177:
	#DEBUG_VALUE: r8_min:y <- [RSP+128]
	movq	%r12, 120(%rsp)         # 8-byte Spill
	movl	%ebp, 116(%rsp)         # 4-byte Spill
	movq	%r14, 104(%rsp)         # 8-byte Spill
	movq	%r15, 96(%rsp)          # 8-byte Spill
	movq	%r13, 88(%rsp)          # 8-byte Spill
	movl	%ebx, 84(%rsp)          # 4-byte Spill
	movq	%r11, 72(%rsp)          # 8-byte Spill
	movq	%r10, 64(%rsp)          # 8-byte Spill
	callq	trace_logger_log_double
.Ltmp178:
	movl	$.L.str42116, %ebx
	movl	%ebx, %eax
	movq	96(%rsp), %rdi          # 8-byte Reload
	movq	216(%rsp), %rsi         # 8-byte Reload
	vmovsd	128(%rsp), %xmm0        # 8-byte Reload
	movq	208(%rsp), %rdx         # 8-byte Reload
	movq	%rax, %rcx
	movq	184(%rsp), %r8          # 8-byte Reload
	movq	88(%rsp), %r9           # 8-byte Reload
	movq	%rax, 56(%rsp)          # 8-byte Spill
	callq	trace_logger_log_double
	.loc	2 213 0                 # eispack.c:213:0
.Ltmp179:
	movq	%rsp, %rax
	movl	$1, (%rax)
	movl	$.L.str1993, %ebx
	movl	%ebx, %eax
	movl	$.L.str478, %ebx
	movl	%ebx, %ecx
	movl	$.L.str579, %ebx
	movl	%ebx, %edx
	movl	$213, %ebx
	movl	%ebx, %edi
	movl	$47, %ebx
	movl	%ebx, %r8d
	movq	%rax, %rsi
	movq	%rdx, 48(%rsp)          # 8-byte Spill
	movq	%rcx, %rdx
	movq	48(%rsp), %r9           # 8-byte Reload
	movq	%rcx, 40(%rsp)          # 8-byte Spill
	movq	%r9, %rcx
	movl	180(%rsp), %r9d         # 4-byte Reload
	movq	%rax, 32(%rsp)          # 8-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %eax
	movq	%rax, %rdi
	movq	216(%rsp), %rsi         # 8-byte Reload
	vmovsd	168(%rsp), %xmm0        # 8-byte Reload
	movq	208(%rsp), %rdx         # 8-byte Reload
	movq	120(%rsp), %rcx         # 8-byte Reload
	movq	184(%rsp), %r8          # 8-byte Reload
	movq	88(%rsp), %r9           # 8-byte Reload
	movq	%rax, 24(%rsp)          # 8-byte Spill
	callq	trace_logger_log_double
	movq	208(%rsp), %rdi         # 8-byte Reload
	movq	216(%rsp), %rsi         # 8-byte Reload
	vmovsd	128(%rsp), %xmm0        # 8-byte Reload
	movq	208(%rsp), %rdx         # 8-byte Reload
	movq	56(%rsp), %rcx          # 8-byte Reload
	movq	184(%rsp), %r8          # 8-byte Reload
	movq	88(%rsp), %r9           # 8-byte Reload
	callq	trace_logger_log_double
.Ltmp180:
	.loc	2 184 0                 # eispack.c:184:0
	vmovsd	168(%rsp), %xmm0        # 8-byte Reload
	vmovsd	128(%rsp), %xmm1        # 8-byte Reload
	vucomisd	%xmm1, %xmm0
	.loc	2 213 0                 # eispack.c:213:0
.Ltmp181:
	seta	%al
	.loc	2 216 0                 # eispack.c:216:0
.Ltmp182:
	movzbl	%al, %ebx
	movl	%ebx, %ecx
	movq	%rsp, %rdx
	movq	$.L.str781, (%rdx)
	movl	$19134, %ebx            # imm = 0x4ABE
	movl	%ebx, %edi
	movq	208(%rsp), %rsi         # 8-byte Reload
	movq	%rcx, %rdx
	movq	208(%rsp), %r8          # 8-byte Reload
	movq	%rcx, 16(%rsp)          # 8-byte Spill
	movq	%r8, %rcx
	movq	48(%rsp), %r8           # 8-byte Reload
	movq	184(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_int
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str45119, %ebx
	movl	%ebx, %ecx
	movl	$216, %ebx
	movl	%ebx, %edi
	movl	$50, %ebx
	movl	%ebx, %r8d
	movq	32(%rsp), %rsi          # 8-byte Reload
	movq	40(%rsp), %rdx          # 8-byte Reload
	movl	180(%rsp), %r9d         # 4-byte Reload
	callq	trace_logger_log0
	movl	$3, %r9d
	movl	%r9d, %edi
	movq	216(%rsp), %rsi         # 8-byte Reload
	vmovsd	168(%rsp), %xmm0        # 8-byte Reload
	movq	208(%rsp), %rdx         # 8-byte Reload
	movq	120(%rsp), %rcx         # 8-byte Reload
	movq	184(%rsp), %r8          # 8-byte Reload
	movq	88(%rsp), %r9           # 8-byte Reload
	callq	trace_logger_log_double
	movq	24(%rsp), %rdi          # 8-byte Reload
	movq	216(%rsp), %rsi         # 8-byte Reload
	vmovsd	128(%rsp), %xmm0        # 8-byte Reload
	movq	208(%rsp), %rdx         # 8-byte Reload
	movq	56(%rsp), %rcx          # 8-byte Reload
	movq	184(%rsp), %r8          # 8-byte Reload
	movq	88(%rsp), %r9           # 8-byte Reload
	callq	trace_logger_log_double
	movq	%rsp, %rcx
	movq	$.L.str781, (%rcx)
	movq	208(%rsp), %rdi         # 8-byte Reload
	movq	208(%rsp), %rsi         # 8-byte Reload
	movq	16(%rsp), %rdx          # 8-byte Reload
	movq	208(%rsp), %rcx         # 8-byte Reload
	movq	48(%rsp), %r8           # 8-byte Reload
	movq	184(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_int
	vmovsd	128(%rsp), %xmm0        # 8-byte Reload
	vmovsd	168(%rsp), %xmm1        # 8-byte Reload
	vminsd	%xmm1, %xmm0, %xmm2
.Ltmp183:
	.loc	2 221 0                 # eispack.c:221:0
	movq	104(%rsp), %rdi         # 8-byte Reload
	movq	152(%rsp), %rsi         # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	200(%rsp), %rdx         # 8-byte Reload
	movq	160(%rsp), %rcx         # 8-byte Reload
	movq	224(%rsp), %r8          # 8-byte Reload
	movq	192(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 8(%rsp)          # 8-byte Spill
	callq	trace_logger_log_double
	movq	144(%rsp), %rdi         # 8-byte Reload
	movq	136(%rsp), %rsi         # 8-byte Reload
	movq	64(%rsp), %rdx          # 8-byte Reload
	movq	72(%rsp), %rcx          # 8-byte Reload
	movq	200(%rsp), %r8          # 8-byte Reload
	movl	84(%rsp), %r9d          # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	200(%rsp), %rdi         # 8-byte Reload
	movq	152(%rsp), %rsi         # 8-byte Reload
	vmovsd	8(%rsp), %xmm0          # 8-byte Reload
	movq	200(%rsp), %rdx         # 8-byte Reload
	movq	160(%rsp), %rcx         # 8-byte Reload
	movq	224(%rsp), %r8          # 8-byte Reload
	movq	192(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	8(%rsp), %xmm0          # 8-byte Reload
	addq	$232, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
.Ltmp184:
.Ltmp185:
	.size	r8_min, .Ltmp185-r8_min
.Lfunc_end5:
	.cfi_endproc

	.section	.rodata.cst8,"aM",@progbits,8
	.align	8
.LCPI6_0:
	.quad	4372995238176751616     # double 2.2204460492503131E-16
	.text
	.globl	r8_epsilon
	.align	16, 0x90
	.type	r8_epsilon,@function
r8_epsilon:                             # @r8_epsilon
	.cfi_startproc
.Lfunc_begin6:
	.loc	2 135 0                 # eispack.c:135:0
# BB#0:
	pushq	%rbp
.Ltmp189:
	.cfi_def_cfa_offset 16
	pushq	%rbx
.Ltmp190:
	.cfi_def_cfa_offset 24
	subq	$72, %rsp
.Ltmp191:
	.cfi_def_cfa_offset 96
.Ltmp192:
	.cfi_offset %rbx, -24
.Ltmp193:
	.cfi_offset %rbp, -16
	vmovsd	.LCPI6_0, %xmm0
	movabsq	$1, %rax
	movabsq	$64, %rsi
	movabsq	$0, %rcx
	leaq	.L.str1488, %rdx
	leaq	.L.str781, %r9
	movabsq	$138, %rdi
	leaq	.L.str46120, %r8
	leaq	.L.str478, %r10
	leaq	.L.str47121, %r11
	movl	$0, %ebx
	movl	$1, %ebp
.Ltmp194:
	#DEBUG_VALUE: r8_epsilon:value <- 2.220446e-16
	.loc	2 138 0 prologue_end    # eispack.c:138:0
	movq	%rsi, 64(%rsp)          # 8-byte Spill
	movq	%r8, %rsi
	movq	%rdx, 56(%rsp)          # 8-byte Spill
	movq	%r10, %rdx
	movq	%rcx, 48(%rsp)          # 8-byte Spill
	movq	%r11, %rcx
	movq	%rax, %r8
	movq	%r9, 40(%rsp)           # 8-byte Spill
	movl	%ebx, %r9d
	movl	$1, (%rsp)
	vmovsd	%xmm0, 32(%rsp)         # 8-byte Spill
	movq	%rax, 24(%rsp)          # 8-byte Spill
	movl	%ebp, 20(%rsp)          # 4-byte Spill
	callq	trace_logger_log0
	movq	24(%rsp), %rdi          # 8-byte Reload
	movq	64(%rsp), %rsi          # 8-byte Reload
	vmovsd	32(%rsp), %xmm0         # 8-byte Reload
	movq	48(%rsp), %rdx          # 8-byte Reload
	movq	56(%rsp), %rcx          # 8-byte Reload
	movq	48(%rsp), %r8           # 8-byte Reload
	movq	40(%rsp), %r9           # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	32(%rsp), %xmm0         # 8-byte Reload
	addq	$72, %rsp
	popq	%rbx
	popq	%rbp
	ret
.Ltmp195:
.Ltmp196:
	.size	r8_epsilon, .Ltmp196-r8_epsilon
.Lfunc_end6:
	.cfi_endproc

	.section	.rodata.cst8,"aM",@progbits,8
	.align	8
.LCPI7_0:
	.quad	-4616189618054758400    # double -1
.LCPI7_1:
	.quad	4607182418800017408     # double 1
	.text
	.globl	r8_sign
	.align	16, 0x90
	.type	r8_sign,@function
r8_sign:                                # @r8_sign
	.cfi_startproc
.Lfunc_begin7:
	.loc	2 251 0                 # eispack.c:251:0
# BB#0:
	pushq	%rbp
.Ltmp204:
	.cfi_def_cfa_offset 16
	pushq	%r15
.Ltmp205:
	.cfi_def_cfa_offset 24
	pushq	%r14
.Ltmp206:
	.cfi_def_cfa_offset 32
	pushq	%r13
.Ltmp207:
	.cfi_def_cfa_offset 40
	pushq	%r12
.Ltmp208:
	.cfi_def_cfa_offset 48
	pushq	%rbx
.Ltmp209:
	.cfi_def_cfa_offset 56
	subq	$248, %rsp
.Ltmp210:
	.cfi_def_cfa_offset 304
.Ltmp211:
	.cfi_offset %rbx, -56
.Ltmp212:
	.cfi_offset %r12, -48
.Ltmp213:
	.cfi_offset %r13, -40
.Ltmp214:
	.cfi_offset %r14, -32
.Ltmp215:
	.cfi_offset %r15, -24
.Ltmp216:
	.cfi_offset %rbp, -16
	#DEBUG_VALUE: r8_sign:x <- XMM0
	movabsq	$1, %rax
	movabsq	$64, %rcx
	leaq	.L.str49123, %rdx
	movabsq	$0, %rsi
	leaq	.L.str781, %rdi
	movabsq	$262, %r8               # imm = 0x106
	leaq	.L.str48122, %r9
	leaq	.L.str478, %r10
	leaq	.L.str47121, %r11
	movl	$0, %ebx
	movl	$1, %ebp
	movabsq	$19134, %r14            # imm = 0x4ABE
	.loc	2 225 0 prologue_end    # eispack.c:225:0
.Ltmp217:
	movl	$.L.str41115, %r15d
	movl	%r15d, %r12d
	movl	$.L.str781, %r15d
	movl	%r15d, %r13d
	movl	$24601, %r15d           # imm = 0x6019
                                        # kill: R15<def> R15D<kill>
	movq	%rsi, 240(%rsp)         # 8-byte Spill
	movl	$64, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, 232(%rsp)         # 8-byte Spill
	movl	$1, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, 224(%rsp)         # 8-byte Spill
	xorl	%esi, %esi
	movq	%rax, 216(%rsp)         # 8-byte Spill
	movl	%esi, %eax
	movq	%rdi, 208(%rsp)         # 8-byte Spill
	movq	%r15, %rdi
	movq	232(%rsp), %r15         # 8-byte Reload
	movl	%esi, 204(%rsp)         # 4-byte Spill
	movq	%r15, %rsi
	vmovsd	%xmm0, 192(%rsp)        # 8-byte Spill
.Ltmp218:
	#DEBUG_VALUE: r8_sign:x <- [RSP+192]
	movq	224(%rsp), %r15         # 8-byte Reload
	movq	%rdx, 184(%rsp)         # 8-byte Spill
	movq	%r15, %rdx
	movq	%rcx, 176(%rsp)         # 8-byte Spill
	movq	%r12, %rcx
	movq	%r8, 168(%rsp)          # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 160(%rsp)          # 8-byte Spill
	movq	%r13, %r9
	movq	%r12, 152(%rsp)         # 8-byte Spill
	movq	%rax, 144(%rsp)         # 8-byte Spill
	movl	%ebp, 140(%rsp)         # 4-byte Spill
	movq	%r14, 128(%rsp)         # 8-byte Spill
	movq	%r13, 120(%rsp)         # 8-byte Spill
	movl	%ebx, 116(%rsp)         # 4-byte Spill
	movq	%r11, 104(%rsp)         # 8-byte Spill
	movq	%r10, 96(%rsp)          # 8-byte Spill
	callq	trace_logger_log_double
.Ltmp219:
	.loc	2 254 0                 # eispack.c:254:0
	movq	%rsp, %rax
	movl	$1, (%rax)
	movl	$.L.str48122, %ebx
	movl	%ebx, %eax
	movl	$.L.str478, %ebx
	movl	%ebx, %ecx
	movl	$.L.str579, %ebx
	movl	%ebx, %edx
	movl	$254, %ebx
	movl	%ebx, %edi
	movl	$47, %ebx
	movl	%ebx, %r8d
	movq	%rax, %rsi
	movq	%rdx, 88(%rsp)          # 8-byte Spill
	movq	%rcx, %rdx
	movq	88(%rsp), %r9           # 8-byte Reload
	movq	%rcx, 80(%rsp)          # 8-byte Spill
	movq	%r9, %rcx
	movl	204(%rsp), %r9d         # 4-byte Reload
	movq	%rax, 72(%rsp)          # 8-byte Spill
	callq	trace_logger_log0
	movl	$.L.str1488, %r9d
	movl	%r9d, %eax
	movl	$2, %r9d
	movl	%r9d, %ecx
	vxorps	%xmm0, %xmm0, %xmm0
	movq	%rcx, %rdi
	movq	232(%rsp), %rsi         # 8-byte Reload
	vmovsd	%xmm0, 64(%rsp)         # 8-byte Spill
	movq	144(%rsp), %rdx         # 8-byte Reload
	movq	%rcx, 56(%rsp)          # 8-byte Spill
	movq	%rax, %rcx
	movq	144(%rsp), %r8          # 8-byte Reload
	movq	120(%rsp), %r9          # 8-byte Reload
	movq	%rax, 48(%rsp)          # 8-byte Spill
	callq	trace_logger_log_double
	movq	224(%rsp), %rdi         # 8-byte Reload
	movq	232(%rsp), %rsi         # 8-byte Reload
	vmovsd	192(%rsp), %xmm0        # 8-byte Reload
	movq	224(%rsp), %rdx         # 8-byte Reload
	movq	152(%rsp), %rcx         # 8-byte Reload
	movq	144(%rsp), %r8          # 8-byte Reload
	movq	120(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	64(%rsp), %xmm0         # 8-byte Reload
	vmovsd	192(%rsp), %xmm1        # 8-byte Reload
	vucomisd	%xmm1, %xmm0
	seta	%al
	.loc	2 257 0                 # eispack.c:257:0
.Ltmp220:
	movzbl	%al, %ebx
	movl	%ebx, %ecx
	movq	%rsp, %rdx
	movq	$.L.str781, (%rdx)
	vmovsd	.LCPI7_0(%rip), %xmm2
	vmovsd	.LCPI7_1(%rip), %xmm3
	vmovaps	%xmm2, %xmm4
	movq	%rcx, 40(%rsp)          # 8-byte Spill
	vmovsd	%xmm2, 32(%rsp)         # 8-byte Spill
	vmovsd	%xmm3, 24(%rsp)         # 8-byte Spill
	vmovsd	%xmm4, 16(%rsp)         # 8-byte Spill
	ja	.LBB7_2
# BB#1:
	vmovsd	24(%rsp), %xmm0         # 8-byte Reload
	vmovsd	%xmm0, 16(%rsp)         # 8-byte Spill
.LBB7_2:
	vmovsd	16(%rsp), %xmm0         # 8-byte Reload
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movq	224(%rsp), %rsi         # 8-byte Reload
	movq	40(%rsp), %rdx          # 8-byte Reload
	movq	224(%rsp), %rcx         # 8-byte Reload
	movq	88(%rsp), %r8           # 8-byte Reload
	movq	144(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm0, 8(%rsp)          # 8-byte Spill
	callq	trace_logger_log_int
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str49123, %eax
	movl	%eax, %ecx
	movl	$257, %eax              # imm = 0x101
	movl	%eax, %edi
	movl	$50, %eax
	movl	%eax, %r8d
	movq	72(%rsp), %rsi          # 8-byte Reload
	movq	80(%rsp), %rdx          # 8-byte Reload
	movl	204(%rsp), %r9d         # 4-byte Reload
	callq	trace_logger_log0
	movl	$3, %eax
	movl	%eax, %edi
	movq	232(%rsp), %rsi         # 8-byte Reload
	vmovsd	24(%rsp), %xmm0         # 8-byte Reload
	movq	144(%rsp), %rdx         # 8-byte Reload
	movq	48(%rsp), %rcx          # 8-byte Reload
	movq	144(%rsp), %r8          # 8-byte Reload
	movq	120(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	56(%rsp), %rdi          # 8-byte Reload
	movq	232(%rsp), %rsi         # 8-byte Reload
	vmovsd	32(%rsp), %xmm0         # 8-byte Reload
	movq	144(%rsp), %rdx         # 8-byte Reload
	movq	48(%rsp), %rcx          # 8-byte Reload
	movq	144(%rsp), %r8          # 8-byte Reload
	movq	120(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	%rsp, %rcx
	movq	$.L.str781, (%rcx)
	movq	224(%rsp), %rdi         # 8-byte Reload
	movq	224(%rsp), %rsi         # 8-byte Reload
	movq	40(%rsp), %rdx          # 8-byte Reload
	movq	224(%rsp), %rcx         # 8-byte Reload
	movq	88(%rsp), %r8           # 8-byte Reload
	movq	144(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_int
.Ltmp221:
	.loc	2 262 0                 # eispack.c:262:0
	movq	128(%rsp), %rdi         # 8-byte Reload
	movq	176(%rsp), %rsi         # 8-byte Reload
	vmovsd	8(%rsp), %xmm0          # 8-byte Reload
	movq	216(%rsp), %rdx         # 8-byte Reload
	movq	184(%rsp), %rcx         # 8-byte Reload
	movq	240(%rsp), %r8          # 8-byte Reload
	movq	208(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	168(%rsp), %rdi         # 8-byte Reload
	movq	160(%rsp), %rsi         # 8-byte Reload
	movq	96(%rsp), %rdx          # 8-byte Reload
	movq	104(%rsp), %rcx         # 8-byte Reload
	movq	216(%rsp), %r8          # 8-byte Reload
	movl	116(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	216(%rsp), %rdi         # 8-byte Reload
	movq	176(%rsp), %rsi         # 8-byte Reload
	vmovsd	8(%rsp), %xmm0          # 8-byte Reload
	movq	216(%rsp), %rdx         # 8-byte Reload
	movq	184(%rsp), %rcx         # 8-byte Reload
	movq	240(%rsp), %r8          # 8-byte Reload
	movq	208(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	8(%rsp), %xmm0          # 8-byte Reload
	addq	$248, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
.Ltmp222:
.Ltmp223:
	.size	r8_sign, .Ltmp223-r8_sign
.Lfunc_end7:
	.cfi_endproc

	.globl	rs
	.align	16, 0x90
	.type	rs,@function
rs:                                     # @rs
	.cfi_startproc
.Lfunc_begin8:
	.loc	2 331 0                 # eispack.c:331:0
# BB#0:
	pushq	%rbp
.Ltmp227:
	.cfi_def_cfa_offset 16
.Ltmp228:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp229:
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$1528, %rsp             # imm = 0x5F8
.Ltmp230:
	.cfi_offset %rbx, -56
.Ltmp231:
	.cfi_offset %r12, -48
.Ltmp232:
	.cfi_offset %r13, -40
.Ltmp233:
	.cfi_offset %r14, -32
.Ltmp234:
	.cfi_offset %r15, -24
	movb	%cl, %al
	#DEBUG_VALUE: rs:matz <- AL
	#DEBUG_VALUE: rs:z <- R8
	#DEBUG_VALUE: rs:w <- RDX
	#DEBUG_VALUE: rs:a <- RSI
	#DEBUG_VALUE: rs:n <- EDI
	movabsq	$1, %r9
	leaq	.L.str55129, %r10
	movabsq	$0, %r11
	leaq	.L.str781, %rbx
	movabsq	$2, %r14
	leaq	.L.str54128, %r15
	movabsq	$3, %r12
	leaq	.L.str53127, %r13
	movabsq	$340, %rcx              # imm = 0x154
	movb	%al, -41(%rbp)          # 1-byte Spill
.Ltmp235:
	#DEBUG_VALUE: rs:matz <- [RBP+-41]
	leaq	.L.str50124, %rax
	movq	%rax, -56(%rbp)         # 8-byte Spill
	leaq	.L.str478, %rax
	movq	%rax, -64(%rbp)         # 8-byte Spill
	leaq	.L.str52126, %rax
	movq	%rsi, -72(%rbp)         # 8-byte Spill
.Ltmp236:
	#DEBUG_VALUE: rs:a <- [RBP+-72]
	movl	$0, %esi
	movl	%esi, -76(%rbp)         # 4-byte Spill
	movl	$1, %esi
	movq	%rax, -88(%rbp)         # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, -96(%rbp)         # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, -104(%rbp)        # 8-byte Spill
	leaq	.L.str1185, %rax
	.loc	2 267 0 prologue_end    # eispack.c:267:0
.Ltmp237:
	movl	%esi, -108(%rbp)        # 4-byte Spill
	movl	%edi, %esi
                                        # kill: RSI<def> ESI<kill>
	subq	$16, %rsp
	movq	%rax, -120(%rbp)        # 8-byte Spill
	movq	%rsp, %rax
	movq	$.L.str781, (%rax)
	movl	$.L.str51125, %eax
                                        # kill: RAX<def> EAX<kill>
	movq	%rsi, -128(%rbp)        # 8-byte Spill
	movl	$24601, %esi            # imm = 0x6019
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, -136(%rbp)        # 8-byte Spill
	movl	$32, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, -144(%rbp)        # 8-byte Spill
	movl	$1, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, -152(%rbp)        # 8-byte Spill
	xorl	%esi, %esi
	movq	%rax, -160(%rbp)        # 8-byte Spill
	movl	%esi, %eax
	movq	%rax, -168(%rbp)        # 8-byte Spill
	movq	-136(%rbp), %rax        # 8-byte Reload
	movl	%edi, -172(%rbp)        # 4-byte Spill
.Ltmp238:
	#DEBUG_VALUE: rs:n <- [RBP+-172]
	movq	%rax, %rdi
	movq	-144(%rbp), %rax        # 8-byte Reload
	movl	%esi, -176(%rbp)        # 4-byte Spill
	movq	%rax, %rsi
	movq	-128(%rbp), %rax        # 8-byte Reload
	movq	%rdx, -184(%rbp)        # 8-byte Spill
.Ltmp239:
	#DEBUG_VALUE: rs:w <- [RBP+-184]
	movq	%rax, %rdx
	movq	-152(%rbp), %rax        # 8-byte Reload
	movq	%rcx, -192(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-160(%rbp), %rax        # 8-byte Reload
	movq	%r8, -200(%rbp)         # 8-byte Spill
.Ltmp240:
	#DEBUG_VALUE: rs:z <- [RBP+-200]
	movq	%rax, %r8
	movq	-168(%rbp), %rax        # 8-byte Reload
	movq	%r9, -208(%rbp)         # 8-byte Spill
	movq	%rax, %r9
	movq	%r15, -216(%rbp)        # 8-byte Spill
	movq	%r14, -224(%rbp)        # 8-byte Spill
	movq	%r12, -232(%rbp)        # 8-byte Spill
	movq	%r13, -240(%rbp)        # 8-byte Spill
	movq	%rbx, -248(%rbp)        # 8-byte Spill
	movq	%r10, -256(%rbp)        # 8-byte Spill
	movq	%r11, -264(%rbp)        # 8-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rax
	movq	$.L.str781, (%rax)
	movl	$.L.str882, %esi
	movl	%esi, %r8d
	movl	$64, %esi
	movl	%esi, %eax
	movq	-136(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rsi
	movq	-72(%rbp), %rdx         # 8-byte Reload
	movq	-152(%rbp), %rcx        # 8-byte Reload
	movq	-168(%rbp), %r9         # 8-byte Reload
	movq	%rax, -272(%rbp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rax
	movq	$.L.str781, (%rax)
	movl	$.L.str58132, %esi
	movl	%esi, %r8d
	movq	-136(%rbp), %rdi        # 8-byte Reload
	movq	-272(%rbp), %rsi        # 8-byte Reload
	movq	-184(%rbp), %rdx        # 8-byte Reload
	movq	-152(%rbp), %rcx        # 8-byte Reload
	movq	-168(%rbp), %r9         # 8-byte Reload
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movb	-41(%rbp), %al          # 1-byte Reload
	movzbl	%al, %eax
	movl	%eax, %ecx
	andq	$1, %rcx
	subq	$16, %rsp
	movq	%rsp, %rdx
	movq	$.L.str781, (%rdx)
	movl	$.L.str55129, %eax
	movl	%eax, %r8d
	movq	-136(%rbp), %rdi        # 8-byte Reload
	movq	-152(%rbp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	-152(%rbp), %rcx        # 8-byte Reload
	movq	-168(%rbp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str781, (%rcx)
	movl	$.L.str69143, %eax
	movl	%eax, %r8d
	movq	-136(%rbp), %rdi        # 8-byte Reload
	movq	-272(%rbp), %rsi        # 8-byte Reload
	movq	-200(%rbp), %rdx        # 8-byte Reload
	movq	-152(%rbp), %rcx        # 8-byte Reload
	movq	-168(%rbp), %r9         # 8-byte Reload
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	.loc	2 334 0                 # eispack.c:334:0
	subq	$16, %rsp
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str50124, %eax
	movl	%eax, %ecx
	movl	$.L.str478, %eax
	movl	%eax, %edx
	movl	$.L.str579, %eax
	movl	%eax, %esi
	movl	$334, %eax              # imm = 0x14E
	movl	%eax, %edi
	movl	$34, %eax
	movl	%eax, %r8d
	movq	%rdi, -280(%rbp)        # 8-byte Spill
	movq	%rsi, -288(%rbp)        # 8-byte Spill
	movq	%rcx, %rsi
	movq	%rdx, -296(%rbp)        # 8-byte Spill
	movq	-288(%rbp), %r9         # 8-byte Reload
	movq	%rcx, -304(%rbp)        # 8-byte Spill
	movq	%r9, %rcx
	movl	-176(%rbp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str781, (%rcx)
	movq	-152(%rbp), %rdi        # 8-byte Reload
	movq	-144(%rbp), %rsi        # 8-byte Reload
	movq	-128(%rbp), %rdx        # 8-byte Reload
	movq	-152(%rbp), %rcx        # 8-byte Reload
	movq	-160(%rbp), %r8         # 8-byte Reload
	movq	-168(%rbp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str781, (%rcx)
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %ecx
	movq	%rcx, %rdi
	movq	-272(%rbp), %rsi        # 8-byte Reload
	movq	-128(%rbp), %rdx        # 8-byte Reload
	movq	-152(%rbp), %r8         # 8-byte Reload
	movq	%rcx, -312(%rbp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	-288(%rbp), %r8         # 8-byte Reload
	movq	-168(%rbp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str983, %eax
	movl	%eax, %ecx
	movl	$26, %eax
	movl	%eax, %edx
	movq	-280(%rbp), %rdi        # 8-byte Reload
	movq	-304(%rbp), %rsi        # 8-byte Reload
	movq	-296(%rbp), %r8         # 8-byte Reload
	movq	%rdx, -320(%rbp)        # 8-byte Spill
	movq	%r8, %rdx
	movq	%rcx, -328(%rbp)        # 8-byte Spill
	movq	-320(%rbp), %r8         # 8-byte Reload
	movl	-176(%rbp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str781, (%rcx)
	movq	-152(%rbp), %rdi        # 8-byte Reload
	movq	-272(%rbp), %rsi        # 8-byte Reload
	movq	-128(%rbp), %rdx        # 8-byte Reload
	movq	-152(%rbp), %rcx        # 8-byte Reload
	movq	-288(%rbp), %r8         # 8-byte Reload
	movq	-168(%rbp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-128(%rbp), %rcx        # 8-byte Reload
	leaq	15(,%rcx,8), %rdx
	andq	$-16, %rdx
	movq	%rsp, %rsi
	subq	%rdx, %rsi
	movq	%rsi, %rsp
	subq	$16, %rsp
	movq	%rsp, %rdi
	movq	$.L.str781, (%rdi)
	movq	-312(%rbp), %rdi        # 8-byte Reload
	movq	-272(%rbp), %r8         # 8-byte Reload
	movq	%rsi, -336(%rbp)        # 8-byte Spill
	movq	%r8, %rsi
	movq	-336(%rbp), %r9         # 8-byte Reload
	movq	%rdx, -344(%rbp)        # 8-byte Spill
	movq	%r9, %rdx
	movq	-152(%rbp), %rcx        # 8-byte Reload
	movq	-328(%rbp), %r8         # 8-byte Reload
	movq	-168(%rbp), %r9         # 8-byte Reload
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	.loc	2 335 0                 # eispack.c:335:0
	subq	$16, %rsp
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str1185, %eax
	movl	%eax, %ecx
	movl	$335, %eax              # imm = 0x14F
	movl	%eax, %edi
	movq	-304(%rbp), %rsi        # 8-byte Reload
	movq	-296(%rbp), %rdx        # 8-byte Reload
	movq	-320(%rbp), %r8         # 8-byte Reload
	movl	-176(%rbp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str781, (%rcx)
	movq	-152(%rbp), %rdi        # 8-byte Reload
	movq	-272(%rbp), %rsi        # 8-byte Reload
	movq	-128(%rbp), %rdx        # 8-byte Reload
	movq	-152(%rbp), %rcx        # 8-byte Reload
	movq	-288(%rbp), %r8         # 8-byte Reload
	movq	-168(%rbp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	%rsp, %rcx
	movq	-344(%rbp), %rdx        # 8-byte Reload
	subq	%rdx, %rcx
	movq	%rcx, %rsp
	subq	$16, %rsp
	movq	-96(%rbp), %rdi         # 8-byte Reload
	movq	-104(%rbp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	-208(%rbp), %r8         # 8-byte Reload
	movq	%rcx, -352(%rbp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	-120(%rbp), %r8         # 8-byte Reload
	movq	-264(%rbp), %r9         # 8-byte Reload
	movq	-248(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
.Ltmp241:
	#DEBUG_VALUE: rs:fv2 <- [RBP+-352]
	.loc	2 340 0                 # eispack.c:340:0
	subq	$16, %rsp
	movq	-192(%rbp), %rdi        # 8-byte Reload
	movq	-56(%rbp), %rsi         # 8-byte Reload
	movq	-64(%rbp), %rdx         # 8-byte Reload
	movq	-88(%rbp), %rcx         # 8-byte Reload
	movq	-224(%rbp), %r8         # 8-byte Reload
	movl	-76(%rbp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-232(%rbp), %rdi        # 8-byte Reload
	movq	-264(%rbp), %rsi        # 8-byte Reload
	movq	-264(%rbp), %rdx        # 8-byte Reload
	movq	-208(%rbp), %rcx        # 8-byte Reload
	movq	-240(%rbp), %r8         # 8-byte Reload
	movq	-264(%rbp), %r9         # 8-byte Reload
	movq	-248(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-224(%rbp), %rdi        # 8-byte Reload
	movq	-264(%rbp), %rsi        # 8-byte Reload
	movq	-264(%rbp), %rdx        # 8-byte Reload
	movq	-208(%rbp), %rcx        # 8-byte Reload
	movq	-216(%rbp), %r8         # 8-byte Reload
	movq	-264(%rbp), %r9         # 8-byte Reload
	movq	-248(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-41(%rbp), %al          # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, %edx
	subq	$16, %rsp
	movq	-208(%rbp), %rdi        # 8-byte Reload
	movq	-208(%rbp), %rsi        # 8-byte Reload
	movq	-208(%rbp), %rcx        # 8-byte Reload
	movq	-256(%rbp), %r8         # 8-byte Reload
	movq	-264(%rbp), %r9         # 8-byte Reload
	movq	-248(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-41(%rbp), %al          # 1-byte Reload
	testb	$1, %al
                                        # implicit-def: EAX
	movl	%eax, -356(%rbp)        # 4-byte Spill
	jne	.LBB8_3
.Ltmp242:
# BB#1:
	movabsq	$5, %rdi
	movabsq	$64, %rax
	movabsq	$1, %rcx
	leaq	.L.str60134, %r8
	movabsq	$0, %rdx
	leaq	.L.str781, %rsi
	movabsq	$4, %r9
	leaq	.L.str59133, %r10
	movabsq	$3, %r11
	leaq	.L.str58132, %rbx
	movabsq	$2, %r14
	leaq	.L.str882, %r15
	movabsq	$32, %r12
	leaq	.L.str51125, %r13
	movq	%rax, -368(%rbp)        # 8-byte Spill
	movabsq	$6, %rax
	movq	%rax, -376(%rbp)        # 8-byte Spill
	leaq	tred1, %rax
	movq	%rax, -384(%rbp)        # 8-byte Spill
	leaq	.L.str57131, %rax
	movq	%rax, -392(%rbp)        # 8-byte Spill
	movabsq	$344, %rax              # imm = 0x158
	movq	%rax, -400(%rbp)        # 8-byte Spill
	leaq	.L.str50124, %rax
	movq	%rax, -408(%rbp)        # 8-byte Spill
	leaq	.L.str54128, %rax
	movq	%rax, -416(%rbp)        # 8-byte Spill
	leaq	.L.str56130, %rax
	movq	%rax, -424(%rbp)        # 8-byte Spill
	movabsq	$49, %rax
	movq	%rsi, -432(%rbp)        # 8-byte Spill
	movl	$0, %esi
	movl	%esi, -436(%rbp)        # 4-byte Spill
	movl	$1, %esi
	.loc	2 344 0                 # eispack.c:344:0
.Ltmp243:
	subq	$16, %rsp
	movq	%rax, -448(%rbp)        # 8-byte Spill
	movq	-400(%rbp), %rax        # 8-byte Reload
	movq	%rdi, -456(%rbp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	-408(%rbp), %rax        # 8-byte Reload
	movl	%esi, -460(%rbp)        # 4-byte Spill
	movq	%rax, %rsi
	movq	-416(%rbp), %rax        # 8-byte Reload
	movq	%rdx, -472(%rbp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	-424(%rbp), %rax        # 8-byte Reload
	movq	%rcx, -480(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-448(%rbp), %rax        # 8-byte Reload
	movq	%r8, -488(%rbp)         # 8-byte Spill
	movq	%rax, %r8
	movl	-436(%rbp), %eax        # 4-byte Reload
	movq	%r9, -496(%rbp)         # 8-byte Spill
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movq	%r13, -504(%rbp)        # 8-byte Spill
	movq	%r14, -512(%rbp)        # 8-byte Spill
	movq	%rbx, -520(%rbp)        # 8-byte Spill
	movq	%r15, -528(%rbp)        # 8-byte Spill
	movq	%r12, -536(%rbp)        # 8-byte Spill
	movq	%r11, -544(%rbp)        # 8-byte Spill
	movq	%r10, -552(%rbp)        # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-376(%rbp), %rdi        # 8-byte Reload
	movq	-368(%rbp), %rsi        # 8-byte Reload
	movq	-384(%rbp), %rdx        # 8-byte Reload
	movq	-480(%rbp), %rcx        # 8-byte Reload
	movq	-392(%rbp), %r8         # 8-byte Reload
	movq	-472(%rbp), %r9         # 8-byte Reload
	movq	-432(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movl	-172(%rbp), %eax        # 4-byte Reload
	movl	%eax, %eax
	movl	%eax, %edx
	subq	$16, %rsp
	movq	-480(%rbp), %rdi        # 8-byte Reload
	movq	-536(%rbp), %rsi        # 8-byte Reload
	movq	-480(%rbp), %rcx        # 8-byte Reload
	movq	-504(%rbp), %r8         # 8-byte Reload
	movq	-472(%rbp), %r9         # 8-byte Reload
	movq	-432(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-512(%rbp), %rdi        # 8-byte Reload
	movq	-368(%rbp), %rsi        # 8-byte Reload
	movq	-72(%rbp), %rdx         # 8-byte Reload
	movq	-480(%rbp), %rcx        # 8-byte Reload
	movq	-528(%rbp), %r8         # 8-byte Reload
	movq	-472(%rbp), %r9         # 8-byte Reload
	movq	-432(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-544(%rbp), %rdi        # 8-byte Reload
	movq	-368(%rbp), %rsi        # 8-byte Reload
	movq	-184(%rbp), %rdx        # 8-byte Reload
	movq	-480(%rbp), %rcx        # 8-byte Reload
	movq	-520(%rbp), %r8         # 8-byte Reload
	movq	-472(%rbp), %r9         # 8-byte Reload
	movq	-432(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-496(%rbp), %rdi        # 8-byte Reload
	movq	-368(%rbp), %rsi        # 8-byte Reload
	movq	-336(%rbp), %rdx        # 8-byte Reload
	movq	-480(%rbp), %rcx        # 8-byte Reload
	movq	-552(%rbp), %r8         # 8-byte Reload
	movq	-472(%rbp), %r9         # 8-byte Reload
	movq	-432(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-456(%rbp), %rdi        # 8-byte Reload
	movq	-368(%rbp), %rsi        # 8-byte Reload
	movq	-352(%rbp), %rdx        # 8-byte Reload
	movq	-480(%rbp), %rcx        # 8-byte Reload
	movq	-488(%rbp), %r8         # 8-byte Reload
	movq	-472(%rbp), %r9         # 8-byte Reload
	movq	-432(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movl	-172(%rbp), %edi        # 4-byte Reload
	movq	-72(%rbp), %rsi         # 8-byte Reload
	movq	-184(%rbp), %rdx        # 8-byte Reload
	movq	-336(%rbp), %rcx        # 8-byte Reload
	movq	-352(%rbp), %r8         # 8-byte Reload
	callq	tred1
	movabsq	$3, %rdi
	movabsq	$64, %rcx
	movabsq	$1, %rdx
	leaq	.L.str60134, %r8
	movabsq	$0, %rsi
	leaq	.L.str781, %r9
	movabsq	$2, %r10
	leaq	.L.str58132, %r11
	movabsq	$32, %rbx
	leaq	.L.str51125, %r14
	movabsq	$4, %r15
	leaq	tqlrat, %r12
	leaq	.L.str62136, %r13
	movabsq	$346, %rax              # imm = 0x15A
	movq	%rax, -560(%rbp)        # 8-byte Spill
	leaq	.L.str50124, %rax
	movq	%rax, -568(%rbp)        # 8-byte Spill
	leaq	.L.str54128, %rax
	movq	%rax, -576(%rbp)        # 8-byte Spill
	leaq	.L.str61135, %rax
	movq	%rax, -584(%rbp)        # 8-byte Spill
	movabsq	$49, %rax
	movq	%rsi, -592(%rbp)        # 8-byte Spill
	movl	$0, %esi
	movl	%esi, -596(%rbp)        # 4-byte Spill
	movl	$1, %esi
	.loc	2 346 0                 # eispack.c:346:0
	subq	$16, %rsp
	movq	%rax, -608(%rbp)        # 8-byte Spill
	movq	-560(%rbp), %rax        # 8-byte Reload
	movq	%rdi, -616(%rbp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	-568(%rbp), %rax        # 8-byte Reload
	movl	%esi, -620(%rbp)        # 4-byte Spill
	movq	%rax, %rsi
	movq	-576(%rbp), %rax        # 8-byte Reload
	movq	%rdx, -632(%rbp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	-584(%rbp), %rax        # 8-byte Reload
	movq	%rcx, -640(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-608(%rbp), %rax        # 8-byte Reload
	movq	%r8, -648(%rbp)         # 8-byte Spill
	movq	%rax, %r8
	movl	-596(%rbp), %eax        # 4-byte Reload
	movq	%r9, -656(%rbp)         # 8-byte Spill
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movq	%r15, -664(%rbp)        # 8-byte Spill
	movq	%r12, -672(%rbp)        # 8-byte Spill
	movq	%r14, -680(%rbp)        # 8-byte Spill
	movq	%r13, -688(%rbp)        # 8-byte Spill
	movq	%rbx, -696(%rbp)        # 8-byte Spill
	movq	%r10, -704(%rbp)        # 8-byte Spill
	movq	%r11, -712(%rbp)        # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-664(%rbp), %rdi        # 8-byte Reload
	movq	-640(%rbp), %rsi        # 8-byte Reload
	movq	-672(%rbp), %rdx        # 8-byte Reload
	movq	-632(%rbp), %rcx        # 8-byte Reload
	movq	-688(%rbp), %r8         # 8-byte Reload
	movq	-592(%rbp), %r9         # 8-byte Reload
	movq	-656(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movl	-172(%rbp), %eax        # 4-byte Reload
	movl	%eax, %eax
	movl	%eax, %edx
	subq	$16, %rsp
	movq	-632(%rbp), %rdi        # 8-byte Reload
	movq	-696(%rbp), %rsi        # 8-byte Reload
	movq	-632(%rbp), %rcx        # 8-byte Reload
	movq	-680(%rbp), %r8         # 8-byte Reload
	movq	-592(%rbp), %r9         # 8-byte Reload
	movq	-656(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-704(%rbp), %rdi        # 8-byte Reload
	movq	-640(%rbp), %rsi        # 8-byte Reload
	movq	-184(%rbp), %rdx        # 8-byte Reload
	movq	-632(%rbp), %rcx        # 8-byte Reload
	movq	-712(%rbp), %r8         # 8-byte Reload
	movq	-592(%rbp), %r9         # 8-byte Reload
	movq	-656(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-616(%rbp), %rdi        # 8-byte Reload
	movq	-640(%rbp), %rsi        # 8-byte Reload
	movq	-352(%rbp), %rdx        # 8-byte Reload
	movq	-632(%rbp), %rcx        # 8-byte Reload
	movq	-648(%rbp), %r8         # 8-byte Reload
	movq	-592(%rbp), %r9         # 8-byte Reload
	movq	-656(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movl	-172(%rbp), %edi        # 4-byte Reload
	movq	-184(%rbp), %rsi        # 8-byte Reload
	movq	-352(%rbp), %rdx        # 8-byte Reload
	callq	tqlrat
	movl	$0, %edi
	movabsq	$1, %rcx
	leaq	.L.str1892, %rdx
	movabsq	$0, %rsi
	leaq	.L.str781, %r8
	movabsq	$2, %r9
	leaq	.L.str64138, %r10
	movabsq	$3, %r11
	leaq	.L.str53127, %rbx
	movabsq	$348, %r14              # imm = 0x15C
	leaq	.L.str50124, %r15
	leaq	.L.str54128, %r12
	leaq	.L.str63137, %r13
	movl	%eax, -716(%rbp)        # 4-byte Spill
	movl	$1, %eax
	movq	%rcx, -728(%rbp)        # 8-byte Spill
	movabsq	$19134, %rcx            # imm = 0x4ABE
	movq	%rcx, -736(%rbp)        # 8-byte Spill
	movabsq	$32, %rcx
	movq	%rcx, -744(%rbp)        # 8-byte Spill
	leaq	.L.str61135, %rcx
	movq	%rcx, -752(%rbp)        # 8-byte Spill
	leaq	.L.str1488, %rcx
	movq	%rcx, -760(%rbp)        # 8-byte Spill
	movabsq	$46, %rcx
	movl	%eax, -764(%rbp)        # 4-byte Spill
	movl	-716(%rbp), %eax        # 4-byte Reload
	movl	%eax, %eax
                                        # kill: RAX<def> EAX<kill>
	subq	$16, %rsp
	movq	%rax, -776(%rbp)        # 8-byte Spill
	movq	-736(%rbp), %rax        # 8-byte Reload
	movl	%edi, -780(%rbp)        # 4-byte Spill
	movq	%rax, %rdi
	movq	-744(%rbp), %rax        # 8-byte Reload
	movq	%rsi, -792(%rbp)        # 8-byte Spill
	movq	%rax, %rsi
	movq	-776(%rbp), %rax        # 8-byte Reload
	movq	%rdx, -800(%rbp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	-728(%rbp), %rax        # 8-byte Reload
	movq	%rcx, -808(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-752(%rbp), %rax        # 8-byte Reload
	movq	%r8, -816(%rbp)         # 8-byte Spill
	movq	%rax, %r8
	movq	-792(%rbp), %rax        # 8-byte Reload
	movq	%r9, -824(%rbp)         # 8-byte Spill
	movq	%rax, %r9
	movq	-816(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	movq	%r13, -832(%rbp)        # 8-byte Spill
	movq	%r14, -840(%rbp)        # 8-byte Spill
	movq	%r15, -848(%rbp)        # 8-byte Spill
	movq	%r12, -856(%rbp)        # 8-byte Spill
	movq	%rbx, -864(%rbp)        # 8-byte Spill
	movq	%r11, -872(%rbp)        # 8-byte Spill
	movq	%r10, -880(%rbp)        # 8-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
.Ltmp244:
	#DEBUG_VALUE: rs:ierr <- [RBP+-716]
	.loc	2 348 0                 # eispack.c:348:0
	subq	$16, %rsp
	movq	-840(%rbp), %rdi        # 8-byte Reload
	movq	-848(%rbp), %rsi        # 8-byte Reload
	movq	-856(%rbp), %rdx        # 8-byte Reload
	movq	-800(%rbp), %rcx        # 8-byte Reload
	movq	-808(%rbp), %r8         # 8-byte Reload
	movl	-780(%rbp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-824(%rbp), %rdi        # 8-byte Reload
	movq	-744(%rbp), %rsi        # 8-byte Reload
	movq	-792(%rbp), %rdx        # 8-byte Reload
	movq	-792(%rbp), %rcx        # 8-byte Reload
	movq	-760(%rbp), %r8         # 8-byte Reload
	movq	-792(%rbp), %r9         # 8-byte Reload
	movq	-816(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-716(%rbp), %esi        # 4-byte Reload
	movl	%esi, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-728(%rbp), %rdi        # 8-byte Reload
	movq	-744(%rbp), %rsi        # 8-byte Reload
	movq	-728(%rbp), %rcx        # 8-byte Reload
	movq	-752(%rbp), %r8         # 8-byte Reload
	movq	-792(%rbp), %r9         # 8-byte Reload
	movq	-816(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-716(%rbp), %esi        # 4-byte Reload
	cmpl	$0, %esi
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	subq	$16, %rsp
	movq	-736(%rbp), %rdi        # 8-byte Reload
	movq	-728(%rbp), %rsi        # 8-byte Reload
	movq	-728(%rbp), %rcx        # 8-byte Reload
	movq	-800(%rbp), %r8         # 8-byte Reload
	movq	-792(%rbp), %r9         # 8-byte Reload
	movq	-816(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, -881(%rbp)         # 1-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-840(%rbp), %rdi        # 8-byte Reload
	movq	-848(%rbp), %rsi        # 8-byte Reload
	movq	-856(%rbp), %rdx        # 8-byte Reload
	movq	-832(%rbp), %rcx        # 8-byte Reload
	movq	-824(%rbp), %r8         # 8-byte Reload
	movl	-780(%rbp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-872(%rbp), %rdi        # 8-byte Reload
	movq	-792(%rbp), %rsi        # 8-byte Reload
	movq	-792(%rbp), %rdx        # 8-byte Reload
	movq	-728(%rbp), %rcx        # 8-byte Reload
	movq	-864(%rbp), %r8         # 8-byte Reload
	movq	-792(%rbp), %r9         # 8-byte Reload
	movq	-816(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-824(%rbp), %rdi        # 8-byte Reload
	movq	-792(%rbp), %rsi        # 8-byte Reload
	movq	-792(%rbp), %rdx        # 8-byte Reload
	movq	-728(%rbp), %rcx        # 8-byte Reload
	movq	-880(%rbp), %r8         # 8-byte Reload
	movq	-792(%rbp), %r9         # 8-byte Reload
	movq	-816(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-881(%rbp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, %edx
	subq	$16, %rsp
	movq	-728(%rbp), %rdi        # 8-byte Reload
	movq	-728(%rbp), %rsi        # 8-byte Reload
	movq	-728(%rbp), %rcx        # 8-byte Reload
	movq	-800(%rbp), %r8         # 8-byte Reload
	movq	-792(%rbp), %r9         # 8-byte Reload
	movq	-816(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-881(%rbp), %al         # 1-byte Reload
	testb	$1, %al
	movl	-780(%rbp), %eax        # 4-byte Reload
	movl	%eax, -356(%rbp)        # 4-byte Spill
	jne	.LBB8_3
.Ltmp245:
# BB#2:
	movabsq	$1, %rax
	movabsq	$64, %rcx
	leaq	.L.str74, %rdx
	movabsq	$0, %rsi
	leaq	.L.str1488, %r8
	leaq	.L.str781, %rdi
	movabsq	$2, %r9
	leaq	printf, %r10
	leaq	.L.str65139, %r11
	movabsq	$352, %rbx              # imm = 0x160
	leaq	.L.str50124, %r14
	leaq	.L.str64138, %r15
	leaq	.L.str2195, %r12
	movabsq	$49, %r13
	movq	%rsi, -896(%rbp)        # 8-byte Spill
	movl	$0, %esi
	movl	%esi, -900(%rbp)        # 4-byte Spill
	movl	$1, %esi
	.loc	2 352 0                 # eispack.c:352:0
.Ltmp246:
	subq	$16, %rsp
	movq	%rdi, -912(%rbp)        # 8-byte Spill
	movq	%rbx, %rdi
	movl	%esi, -916(%rbp)        # 4-byte Spill
	movq	%r14, %rsi
	movq	%rdx, -928(%rbp)        # 8-byte Spill
	movq	%r15, %rdx
	movq	%rcx, -936(%rbp)        # 8-byte Spill
	movq	%r12, %rcx
	movq	%r8, -944(%rbp)         # 8-byte Spill
	movq	%r13, %r8
	movl	-900(%rbp), %r14d       # 4-byte Reload
	movq	%r9, -952(%rbp)         # 8-byte Spill
	movl	%r14d, %r9d
	movl	$1, (%rsp)
	movq	%rax, -960(%rbp)        # 8-byte Spill
	movq	%r11, -968(%rbp)        # 8-byte Spill
	movq	%r10, -976(%rbp)        # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-952(%rbp), %rdi        # 8-byte Reload
	movq	-936(%rbp), %rsi        # 8-byte Reload
	movq	-976(%rbp), %rdx        # 8-byte Reload
	movq	-960(%rbp), %rcx        # 8-byte Reload
	movq	-968(%rbp), %r8         # 8-byte Reload
	movq	-896(%rbp), %r9         # 8-byte Reload
	movq	-912(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-960(%rbp), %rdi        # 8-byte Reload
	movq	-936(%rbp), %rsi        # 8-byte Reload
	movq	-928(%rbp), %rdx        # 8-byte Reload
	movq	-896(%rbp), %rcx        # 8-byte Reload
	movq	-944(%rbp), %r8         # 8-byte Reload
	movq	-896(%rbp), %r9         # 8-byte Reload
	movq	-912(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movl	$.L.str74, %r14d
	movl	%r14d, %edi
	xorl	%r14d, %r14d
	movb	%r14b, %al
	callq	printf
	movabsq	$1, %rcx
	movabsq	$64, %rdx
	leaq	.L.str175, %rsi
	movabsq	$0, %rdi
	leaq	.L.str1488, %r8
	leaq	.L.str781, %r9
	movabsq	$2, %r10
	leaq	printf, %r11
	leaq	.L.str65139, %rbx
	movabsq	$353, %r15              # imm = 0x161
	leaq	.L.str50124, %r12
	leaq	.L.str64138, %r13
	leaq	.L.str2296, %r14
	movq	%rcx, -984(%rbp)        # 8-byte Spill
	movabsq	$49, %rcx
	movl	%eax, -988(%rbp)        # 4-byte Spill
	movl	$0, %eax
	movl	%eax, -992(%rbp)        # 4-byte Spill
	movl	$1, %eax
	movq	%rcx, -1000(%rbp)       # 8-byte Spill
	movabsq	$19134, %rcx            # imm = 0x4ABE
	movq	%rcx, -1008(%rbp)       # 8-byte Spill
	movabsq	$32, %rcx
	movq	%rcx, -1016(%rbp)       # 8-byte Spill
	leaq	.L.str2195, %rcx
	.loc	2 353 0                 # eispack.c:353:0
	movl	%eax, -1020(%rbp)       # 4-byte Spill
	movl	-988(%rbp), %eax        # 4-byte Reload
	movl	%eax, %eax
                                        # kill: RAX<def> EAX<kill>
	subq	$16, %rsp
	movq	%rax, -1032(%rbp)       # 8-byte Spill
	movq	-1008(%rbp), %rax       # 8-byte Reload
	movq	%rdi, -1040(%rbp)       # 8-byte Spill
	movq	%rax, %rdi
	movq	-1016(%rbp), %rax       # 8-byte Reload
	movq	%rsi, -1048(%rbp)       # 8-byte Spill
	movq	%rax, %rsi
	movq	-1032(%rbp), %rax       # 8-byte Reload
	movq	%rdx, -1056(%rbp)       # 8-byte Spill
	movq	%rax, %rdx
	movq	-984(%rbp), %rax        # 8-byte Reload
	movq	%rcx, -1064(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-1064(%rbp), %rax       # 8-byte Reload
	movq	%r8, -1072(%rbp)        # 8-byte Spill
	movq	%rax, %r8
	movq	-1040(%rbp), %rax       # 8-byte Reload
	movq	%r9, -1080(%rbp)        # 8-byte Spill
	movq	%rax, %r9
	movq	-1080(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	movq	%r14, -1088(%rbp)       # 8-byte Spill
	movq	%r15, -1096(%rbp)       # 8-byte Spill
	movq	%r12, -1104(%rbp)       # 8-byte Spill
	movq	%r13, -1112(%rbp)       # 8-byte Spill
	movq	%rbx, -1120(%rbp)       # 8-byte Spill
	movq	%r11, -1128(%rbp)       # 8-byte Spill
	movq	%r10, -1136(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1096(%rbp), %rdi       # 8-byte Reload
	movq	-1104(%rbp), %rsi       # 8-byte Reload
	movq	-1112(%rbp), %rdx       # 8-byte Reload
	movq	-1088(%rbp), %rcx       # 8-byte Reload
	movq	-1000(%rbp), %r8        # 8-byte Reload
	movl	-992(%rbp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1136(%rbp), %rdi       # 8-byte Reload
	movq	-1056(%rbp), %rsi       # 8-byte Reload
	movq	-1128(%rbp), %rdx       # 8-byte Reload
	movq	-984(%rbp), %rcx        # 8-byte Reload
	movq	-1120(%rbp), %r8        # 8-byte Reload
	movq	-1040(%rbp), %r9        # 8-byte Reload
	movq	-1080(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-984(%rbp), %rdi        # 8-byte Reload
	movq	-1056(%rbp), %rsi       # 8-byte Reload
	movq	-1048(%rbp), %rdx       # 8-byte Reload
	movq	-1040(%rbp), %rcx       # 8-byte Reload
	movq	-1072(%rbp), %r8        # 8-byte Reload
	movq	-1040(%rbp), %r9        # 8-byte Reload
	movq	-1080(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movl	$.L.str175, %esi
	movl	%esi, %edi
	xorl	%esi, %esi
	movb	%sil, %al
	callq	printf
	movabsq	$1, %rcx
	movabsq	$64, %rdx
	leaq	.L.str276, %rdi
	movabsq	$0, %r8
	leaq	.L.str1488, %r9
	leaq	.L.str781, %r10
	movabsq	$2, %r11
	leaq	printf, %rbx
	leaq	.L.str65139, %r14
	movabsq	$354, %r15              # imm = 0x162
	leaq	.L.str50124, %rsi
	leaq	.L.str64138, %r12
	leaq	.L.str2397, %r13
	movq	%rcx, -1144(%rbp)       # 8-byte Spill
	movabsq	$49, %rcx
	movl	%eax, -1148(%rbp)       # 4-byte Spill
	movl	$0, %eax
	movl	%eax, -1152(%rbp)       # 4-byte Spill
	movl	$1, %eax
	movq	%rcx, -1160(%rbp)       # 8-byte Spill
	movabsq	$19134, %rcx            # imm = 0x4ABE
	movq	%rcx, -1168(%rbp)       # 8-byte Spill
	movabsq	$32, %rcx
	movq	%rcx, -1176(%rbp)       # 8-byte Spill
	leaq	.L.str2296, %rcx
	.loc	2 354 0                 # eispack.c:354:0
	movl	%eax, -1180(%rbp)       # 4-byte Spill
	movl	-1148(%rbp), %eax       # 4-byte Reload
	movl	%eax, %eax
                                        # kill: RAX<def> EAX<kill>
	subq	$16, %rsp
	movq	%rax, -1192(%rbp)       # 8-byte Spill
	movq	-1168(%rbp), %rax       # 8-byte Reload
	movq	%rdi, -1200(%rbp)       # 8-byte Spill
	movq	%rax, %rdi
	movq	-1176(%rbp), %rax       # 8-byte Reload
	movq	%rsi, -1208(%rbp)       # 8-byte Spill
	movq	%rax, %rsi
	movq	-1192(%rbp), %rax       # 8-byte Reload
	movq	%rdx, -1216(%rbp)       # 8-byte Spill
	movq	%rax, %rdx
	movq	-1144(%rbp), %rax       # 8-byte Reload
	movq	%rcx, -1224(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-1224(%rbp), %rax       # 8-byte Reload
	movq	%r8, -1232(%rbp)        # 8-byte Spill
	movq	%rax, %r8
	movq	-1232(%rbp), %rax       # 8-byte Reload
	movq	%r9, -1240(%rbp)        # 8-byte Spill
	movq	%rax, %r9
	movq	%r10, (%rsp)
	movq	%r13, -1248(%rbp)       # 8-byte Spill
	movq	%r15, -1256(%rbp)       # 8-byte Spill
	movq	%r12, -1264(%rbp)       # 8-byte Spill
	movq	%r14, -1272(%rbp)       # 8-byte Spill
	movq	%rbx, -1280(%rbp)       # 8-byte Spill
	movq	%r10, -1288(%rbp)       # 8-byte Spill
	movq	%r11, -1296(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1256(%rbp), %rdi       # 8-byte Reload
	movq	-1208(%rbp), %rsi       # 8-byte Reload
	movq	-1264(%rbp), %rdx       # 8-byte Reload
	movq	-1248(%rbp), %rcx       # 8-byte Reload
	movq	-1160(%rbp), %r8        # 8-byte Reload
	movl	-1152(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1296(%rbp), %rdi       # 8-byte Reload
	movq	-1216(%rbp), %rsi       # 8-byte Reload
	movq	-1280(%rbp), %rdx       # 8-byte Reload
	movq	-1144(%rbp), %rcx       # 8-byte Reload
	movq	-1272(%rbp), %r8        # 8-byte Reload
	movq	-1232(%rbp), %r9        # 8-byte Reload
	movq	-1288(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1144(%rbp), %rdi       # 8-byte Reload
	movq	-1216(%rbp), %rsi       # 8-byte Reload
	movq	-1200(%rbp), %rdx       # 8-byte Reload
	movq	-1232(%rbp), %rcx       # 8-byte Reload
	movq	-1240(%rbp), %r8        # 8-byte Reload
	movq	-1232(%rbp), %r9        # 8-byte Reload
	movq	-1288(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movl	$.L.str276, %esi
	movl	%esi, %edi
	xorl	%esi, %esi
	movb	%sil, %al
	callq	printf
	movabsq	$1, %rcx
	movabsq	$0, %rdx
	leaq	.L.str53127, %r8
	leaq	.L.str781, %rdi
	movabsq	$355, %r9               # imm = 0x163
	leaq	.L.str50124, %rsi
	leaq	.L.str64138, %r10
	leaq	.L.str66140, %r11
	movabsq	$2, %rbx
	movl	$0, %r14d
	movl	$1, %r15d
	movabsq	$19134, %r12            # imm = 0x4ABE
	movabsq	$32, %r13
	movq	%rcx, -1304(%rbp)       # 8-byte Spill
	leaq	.L.str2397, %rcx
	.loc	2 355 0                 # eispack.c:355:0
	movl	%eax, %eax
                                        # kill: RAX<def> EAX<kill>
	subq	$16, %rsp
	movq	%rdi, -1312(%rbp)       # 8-byte Spill
	movq	%r12, %rdi
	movq	%rsi, -1320(%rbp)       # 8-byte Spill
	movq	%r13, %rsi
	movq	%rdx, -1328(%rbp)       # 8-byte Spill
	movq	%rax, %rdx
	movq	-1304(%rbp), %rax       # 8-byte Reload
	movq	%rcx, -1336(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-1336(%rbp), %r12       # 8-byte Reload
	movq	%r8, -1344(%rbp)        # 8-byte Spill
	movq	%r12, %r8
	movq	-1328(%rbp), %r13       # 8-byte Reload
	movq	%r9, -1352(%rbp)        # 8-byte Spill
	movq	%r13, %r9
	movq	-1312(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%r15d, -1356(%rbp)      # 4-byte Spill
	movq	%r11, -1368(%rbp)       # 8-byte Spill
	movq	%rbx, -1376(%rbp)       # 8-byte Spill
	movl	%r14d, -1380(%rbp)      # 4-byte Spill
	movq	%r10, -1392(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1352(%rbp), %rdi       # 8-byte Reload
	movq	-1320(%rbp), %rsi       # 8-byte Reload
	movq	-1392(%rbp), %rdx       # 8-byte Reload
	movq	-1368(%rbp), %rcx       # 8-byte Reload
	movq	-1376(%rbp), %r8        # 8-byte Reload
	movl	-1380(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1304(%rbp), %rdi       # 8-byte Reload
	movq	-1328(%rbp), %rsi       # 8-byte Reload
	movq	-1328(%rbp), %rdx       # 8-byte Reload
	movq	-1304(%rbp), %rcx       # 8-byte Reload
	movq	-1344(%rbp), %r8        # 8-byte Reload
	movq	-1328(%rbp), %r9        # 8-byte Reload
	movq	-1312(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-716(%rbp), %r14d       # 4-byte Reload
	movl	%r14d, -356(%rbp)       # 4-byte Spill
.Ltmp247:
.LBB8_3:
	movl	-356(%rbp), %eax        # 4-byte Reload
	movabsq	$1, %rcx
	movabsq	$32, %rdx
	leaq	.L.str67141, %rsi
	movabsq	$0, %rdi
	leaq	.L.str781, %r8
	movabsq	$363, %r9               # imm = 0x16B
	leaq	.L.str50124, %r10
	leaq	.L.str53127, %r11
	leaq	.L.str68142, %rbx
	movl	$0, %r14d
	movl	$1, %r15d
	movabsq	$19134, %r12            # imm = 0x4ABE
	leaq	.L.str64138, %r13
	movq	%rcx, -1400(%rbp)       # 8-byte Spill
	leaq	.L.str61135, %rcx
	movq	%rcx, -1408(%rbp)       # 8-byte Spill
	movabsq	$2, %rcx
	movq	%rcx, -1416(%rbp)       # 8-byte Spill
	leaq	.L.str1488, %rcx
	movq	%rcx, -1424(%rbp)       # 8-byte Spill
	leaq	.L.str478, %rcx
	movq	%rcx, -1432(%rbp)       # 8-byte Spill
	movabsq	$3, %rcx
	movq	%rcx, -1440(%rbp)       # 8-byte Spill
	leaq	.L.str54128, %rcx
	movq	%rcx, -1448(%rbp)       # 8-byte Spill
	movabsq	$-1, %rcx
	movq	%rcx, -1456(%rbp)       # 8-byte Spill
	movabsq	$48, %rcx
	.loc	2 363 0                 # eispack.c:363:0
	subq	$16, %rsp
	movq	%rcx, -1464(%rbp)       # 8-byte Spill
	movq	-1456(%rbp), %rcx       # 8-byte Reload
	movq	%rdi, -1472(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	%rsi, -1480(%rbp)       # 8-byte Spill
	movq	%r10, %rsi
	movq	%rdx, -1488(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-1480(%rbp), %rcx       # 8-byte Reload
	movq	%r8, -1496(%rbp)        # 8-byte Spill
	movq	-1464(%rbp), %r8        # 8-byte Reload
	movq	%r9, -1504(%rbp)        # 8-byte Spill
	movl	%r14d, %r9d
	movl	$1, (%rsp)
	movl	%eax, -1508(%rbp)       # 4-byte Spill
	movl	%r14d, -1512(%rbp)      # 4-byte Spill
	movl	%r15d, -1516(%rbp)      # 4-byte Spill
	movq	%r12, -1528(%rbp)       # 8-byte Spill
	movq	%r13, -1536(%rbp)       # 8-byte Spill
	movq	%rbx, -1544(%rbp)       # 8-byte Spill
	movq	%r11, -1552(%rbp)       # 8-byte Spill
	movq	%r10, -1560(%rbp)       # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1440(%rbp), %rdi       # 8-byte Reload
	movq	-1488(%rbp), %rsi       # 8-byte Reload
	movq	-1472(%rbp), %rdx       # 8-byte Reload
	movq	-1472(%rbp), %rcx       # 8-byte Reload
	movq	-1424(%rbp), %r8        # 8-byte Reload
	movq	-1400(%rbp), %r9        # 8-byte Reload
	movq	-1448(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1416(%rbp), %rdi       # 8-byte Reload
	movq	-1488(%rbp), %rsi       # 8-byte Reload
	movq	-1472(%rbp), %rdx       # 8-byte Reload
	movq	-1472(%rbp), %rcx       # 8-byte Reload
	movq	-1424(%rbp), %r8        # 8-byte Reload
	movq	-1400(%rbp), %r9        # 8-byte Reload
	movq	-1432(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1400(%rbp), %rdi       # 8-byte Reload
	movq	-1488(%rbp), %rsi       # 8-byte Reload
	movq	-1472(%rbp), %rdx       # 8-byte Reload
	movq	-1400(%rbp), %rcx       # 8-byte Reload
	movq	-1408(%rbp), %r8        # 8-byte Reload
	movq	-1400(%rbp), %r9        # 8-byte Reload
	movq	-1536(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-1508(%rbp), %eax       # 4-byte Reload
	movl	%eax, %r14d
	movl	%r14d, %edx
	subq	$16, %rsp
	movq	-1528(%rbp), %rdi       # 8-byte Reload
	movq	-1488(%rbp), %rsi       # 8-byte Reload
	movq	-1400(%rbp), %rcx       # 8-byte Reload
	movq	-1480(%rbp), %r8        # 8-byte Reload
	movq	-1472(%rbp), %r9        # 8-byte Reload
	movq	-1536(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1504(%rbp), %rdi       # 8-byte Reload
	movq	-1560(%rbp), %rsi       # 8-byte Reload
	movq	-1552(%rbp), %rdx       # 8-byte Reload
	movq	-1544(%rbp), %rcx       # 8-byte Reload
	movq	-1400(%rbp), %r8        # 8-byte Reload
	movl	-1512(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movl	-1508(%rbp), %eax       # 4-byte Reload
	movl	%eax, %r9d
	movl	%r9d, %edx
	subq	$16, %rsp
	movq	-1400(%rbp), %rdi       # 8-byte Reload
	movq	-1488(%rbp), %rsi       # 8-byte Reload
	movq	-1400(%rbp), %rcx       # 8-byte Reload
	movq	-1480(%rbp), %r8        # 8-byte Reload
	movq	-1472(%rbp), %r9        # 8-byte Reload
	movq	-1496(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-1508(%rbp), %eax       # 4-byte Reload
	leaq	-40(%rbp), %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
.Ltmp248:
.Ltmp249:
	.size	rs, .Ltmp249-rs
.Lfunc_end8:
	.cfi_endproc

	.section	.rodata.cst16,"aM",@progbits,16
	.align	16
.LCPI9_0:
	.quad	9223372036854775807     # double nan
	.quad	9223372036854775807     # double nan
	.section	.rodata.cst8,"aM",@progbits,8
	.align	8
.LCPI9_1:
	.quad	-9223372036854775808    # double -0
	.text
	.globl	tred1
	.align	16, 0x90
	.type	tred1,@function
tred1:                                  # @tred1
	.cfi_startproc
.Lfunc_begin9:
	.loc	2 767 0                 # eispack.c:767:0
# BB#0:
	pushq	%rbp
.Ltmp257:
	.cfi_def_cfa_offset 16
	pushq	%r15
.Ltmp258:
	.cfi_def_cfa_offset 24
	pushq	%r14
.Ltmp259:
	.cfi_def_cfa_offset 32
	pushq	%r13
.Ltmp260:
	.cfi_def_cfa_offset 40
	pushq	%r12
.Ltmp261:
	.cfi_def_cfa_offset 48
	pushq	%rbx
.Ltmp262:
	.cfi_def_cfa_offset 56
	subq	$11128, %rsp            # imm = 0x2B78
.Ltmp263:
	.cfi_def_cfa_offset 11184
.Ltmp264:
	.cfi_offset %rbx, -56
.Ltmp265:
	.cfi_offset %r12, -48
.Ltmp266:
	.cfi_offset %r13, -40
.Ltmp267:
	.cfi_offset %r14, -32
.Ltmp268:
	.cfi_offset %r15, -24
.Ltmp269:
	.cfi_offset %rbp, -16
	movabsq	$1, %rax
	leaq	.L.str579, %r9
	movabsq	$0, %r10
	leaq	.L.str781, %r11
	movabsq	$2, %rbx
	leaq	.L.str72146, %r14
	movabsq	$3, %r15
	leaq	.L.str71145, %r12
	movabsq	$778, %r13              # imm = 0x30A
	leaq	.L.str57131, %rbp
	movq	%rax, 11120(%rsp)       # 8-byte Spill
	leaq	.L.str478, %rax
	movq	%rax, 11112(%rsp)       # 8-byte Spill
	leaq	.L.str70144, %rax
	movq	%rsi, 11104(%rsp)       # 8-byte Spill
	movl	$0, %esi
	movl	%esi, 11100(%rsp)       # 4-byte Spill
	movl	$1, %esi
	movq	%rax, 11088(%rsp)       # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 11080(%rsp)       # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 11072(%rsp)       # 8-byte Spill
	leaq	.L.str51125, %rax
	movq	%rax, 11064(%rsp)       # 8-byte Spill
	leaq	.L.str1488, %rax
	movq	%rax, 11056(%rsp)       # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 11048(%rsp)       # 8-byte Spill
	movabsq	$24601, %rax            # imm = 0x6019
	movq	%rax, 11040(%rsp)       # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 11032(%rsp)       # 8-byte Spill
	leaq	.L.str160, %rax
	movq	%rax, 11024(%rsp)       # 8-byte Spill
	leaq	.L.str157, %rax
	movq	%rax, 11016(%rsp)       # 8-byte Spill
	leaq	.L.str82, %rax
	movq	%rax, 11008(%rsp)       # 8-byte Spill
	leaq	.L.str882, %rax
	.loc	2 699 0 prologue_end    # eispack.c:699:0
.Ltmp270:
	movl	%esi, 11004(%rsp)       # 4-byte Spill
	movl	%edi, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rax, 10992(%rsp)       # 8-byte Spill
	movq	11040(%rsp), %rax       # 8-byte Reload
	movl	%edi, 10988(%rsp)       # 4-byte Spill
	movq	%rax, %rdi
	movq	11072(%rsp), %rax       # 8-byte Reload
	movq	%rsi, 10976(%rsp)       # 8-byte Spill
	movq	%rax, %rsi
	movq	10976(%rsp), %rax       # 8-byte Reload
	movq	%rdx, 10968(%rsp)       # 8-byte Spill
	movq	%rax, %rdx
	movq	11120(%rsp), %rax       # 8-byte Reload
	movq	%rcx, 10960(%rsp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	11064(%rsp), %rax       # 8-byte Reload
	movq	%r8, 10952(%rsp)        # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 10944(%rsp)        # 8-byte Spill
	movq	%r10, %r9
	movq	%r11, (%rsp)
	movq	%r15, 10936(%rsp)       # 8-byte Spill
	movq	%r12, 10928(%rsp)       # 8-byte Spill
	movq	%rbp, 10920(%rsp)       # 8-byte Spill
	movq	%r13, 10912(%rsp)       # 8-byte Spill
	movq	%r14, 10904(%rsp)       # 8-byte Spill
	movq	%rbx, 10896(%rsp)       # 8-byte Spill
	movq	%r10, 10888(%rsp)       # 8-byte Spill
	movq	%r11, 10880(%rsp)       # 8-byte Spill
	callq	trace_logger_log_int
	movq	11040(%rsp), %rdi       # 8-byte Reload
	movq	11032(%rsp), %rsi       # 8-byte Reload
	movq	11104(%rsp), %rdx       # 8-byte Reload
	movq	11120(%rsp), %rcx       # 8-byte Reload
	movq	10992(%rsp), %r8        # 8-byte Reload
	movq	10888(%rsp), %r9        # 8-byte Reload
	movq	10880(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	11040(%rsp), %rdi       # 8-byte Reload
	movq	11032(%rsp), %rsi       # 8-byte Reload
	movq	10968(%rsp), %rdx       # 8-byte Reload
	movq	11120(%rsp), %rcx       # 8-byte Reload
	movq	11008(%rsp), %r8        # 8-byte Reload
	movq	10888(%rsp), %r9        # 8-byte Reload
	movq	10880(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	11040(%rsp), %rdi       # 8-byte Reload
	movq	11032(%rsp), %rsi       # 8-byte Reload
	movq	10960(%rsp), %rdx       # 8-byte Reload
	movq	11120(%rsp), %rcx       # 8-byte Reload
	movq	11016(%rsp), %r8        # 8-byte Reload
	movq	10888(%rsp), %r9        # 8-byte Reload
	movq	10880(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	11040(%rsp), %rdi       # 8-byte Reload
	movq	11032(%rsp), %rsi       # 8-byte Reload
	movq	10952(%rsp), %rdx       # 8-byte Reload
	movq	11120(%rsp), %rcx       # 8-byte Reload
	movq	11024(%rsp), %r8        # 8-byte Reload
	movq	10888(%rsp), %r9        # 8-byte Reload
	movq	10880(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	#DEBUG_VALUE: tred1:n <- [RSP+10988]
	#DEBUG_VALUE: tred1:a <- [RSP+11104]
	#DEBUG_VALUE: tred1:d <- [RSP+10968]
	#DEBUG_VALUE: tred1:e <- [RSP+10960]
	#DEBUG_VALUE: tred1:e2 <- [RSP+10952]
.Ltmp271:
	#DEBUG_VALUE: tred1:j <- 0
	.loc	2 778 0                 # eispack.c:778:0
	movq	10912(%rsp), %rdi       # 8-byte Reload
	movq	10920(%rsp), %rsi       # 8-byte Reload
	movq	11112(%rsp), %rdx       # 8-byte Reload
	movq	10944(%rsp), %rcx       # 8-byte Reload
	movq	11048(%rsp), %r8        # 8-byte Reload
	movl	11100(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	10896(%rsp), %rdi       # 8-byte Reload
	movq	11072(%rsp), %rsi       # 8-byte Reload
	movq	10888(%rsp), %rdx       # 8-byte Reload
	movq	10888(%rsp), %rcx       # 8-byte Reload
	movq	11056(%rsp), %r8        # 8-byte Reload
	movq	10888(%rsp), %r9        # 8-byte Reload
	movq	10880(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	10988(%rsp), %esi       # 4-byte Reload
	movl	%esi, %esi
	movl	%esi, %edx
	movq	11120(%rsp), %rdi       # 8-byte Reload
	movq	11072(%rsp), %rsi       # 8-byte Reload
	movq	11120(%rsp), %rcx       # 8-byte Reload
	movq	11064(%rsp), %r8        # 8-byte Reload
	movq	10888(%rsp), %r9        # 8-byte Reload
	movq	10880(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	10988(%rsp), %esi       # 4-byte Reload
	cmpl	$0, %esi
	setg	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	11080(%rsp), %rdi       # 8-byte Reload
	movq	11120(%rsp), %rsi       # 8-byte Reload
	movq	11120(%rsp), %rcx       # 8-byte Reload
	movq	10944(%rsp), %r8        # 8-byte Reload
	movq	10888(%rsp), %r9        # 8-byte Reload
	movq	10880(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 10879(%rsp)        # 1-byte Spill
	callq	trace_logger_log_int
	movq	10912(%rsp), %rdi       # 8-byte Reload
	movq	10920(%rsp), %rsi       # 8-byte Reload
	movq	11112(%rsp), %rdx       # 8-byte Reload
	movq	11088(%rsp), %rcx       # 8-byte Reload
	movq	10896(%rsp), %r8        # 8-byte Reload
	movl	11100(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	10936(%rsp), %rdi       # 8-byte Reload
	movq	10888(%rsp), %rsi       # 8-byte Reload
	movq	10888(%rsp), %rdx       # 8-byte Reload
	movq	11120(%rsp), %rcx       # 8-byte Reload
	movq	10928(%rsp), %r8        # 8-byte Reload
	movq	10888(%rsp), %r9        # 8-byte Reload
	movq	10880(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	10896(%rsp), %rdi       # 8-byte Reload
	movq	10888(%rsp), %rsi       # 8-byte Reload
	movq	10888(%rsp), %rdx       # 8-byte Reload
	movq	11120(%rsp), %rcx       # 8-byte Reload
	movq	10904(%rsp), %r8        # 8-byte Reload
	movq	10888(%rsp), %r9        # 8-byte Reload
	movq	10880(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	10879(%rsp), %al        # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, %edx
	movq	11120(%rsp), %rdi       # 8-byte Reload
	movq	11120(%rsp), %rsi       # 8-byte Reload
	movq	11120(%rsp), %rcx       # 8-byte Reload
	movq	10944(%rsp), %r8        # 8-byte Reload
	movq	10888(%rsp), %r9        # 8-byte Reload
	movq	10880(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	10879(%rsp), %al        # 1-byte Reload
	testb	$1, %al
	jne	.LBB9_1
	jmp	.LBB9_36
.Ltmp272:
.LBB9_1:                                # %.lr.ph58
	movabsq	$0, %rax
	movabsq	$1, %rcx
	leaq	.L.str74148, %r8
	leaq	.L.str781, %rdx
	movabsq	$778, %rdi              # imm = 0x30A
	leaq	.L.str57131, %rsi
	leaq	.L.str71145, %r9
	leaq	.L.str73147, %r10
	movabsq	$2, %r11
	movl	$0, %ebx
	movl	$1, %ebp
	movabsq	$19134, %r14            # imm = 0x4ABE
	movabsq	$32, %r15
	leaq	.L.str983, %r12
	leaq	.L.str51125, %r13
	movq	%rax, 10864(%rsp)       # 8-byte Spill
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
	movq	%rax, 10856(%rsp)       # 8-byte Spill
	leaq	.L.str1488, %rax
	movq	%rax, 10848(%rsp)       # 8-byte Spill
	movabsq	$780, %rax              # imm = 0x30C
	movq	%rax, 10840(%rsp)       # 8-byte Spill
	movabsq	$8, %rax
	.loc	2 780 0                 # eispack.c:780:0
.Ltmp273:
	movq	%rax, 10832(%rsp)       # 8-byte Spill
	movq	10840(%rsp), %rax       # 8-byte Reload
	movq	%rdi, 10824(%rsp)       # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 10816(%rsp)       # 8-byte Spill
	movq	%rdx, 10808(%rsp)       # 8-byte Spill
	movq	%r9, %rdx
	movq	%rcx, 10800(%rsp)       # 8-byte Spill
	movq	%r12, %rcx
	movq	10832(%rsp), %rax       # 8-byte Reload
	movq	%r8, 10792(%rsp)        # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 10784(%rsp)        # 8-byte Spill
	movl	%ebx, %r9d
	movl	$1, (%rsp)
	movq	%r14, 10776(%rsp)       # 8-byte Spill
	movl	%ebp, 10772(%rsp)       # 4-byte Spill
	movq	%r15, 10760(%rsp)       # 8-byte Spill
	movq	%r13, 10752(%rsp)       # 8-byte Spill
	movq	%r12, 10744(%rsp)       # 8-byte Spill
	movl	%ebx, 10740(%rsp)       # 4-byte Spill
	movq	%r10, 10728(%rsp)       # 8-byte Spill
	movq	%r11, 10720(%rsp)       # 8-byte Spill
	callq	trace_logger_log0
	movq	10720(%rsp), %rdi       # 8-byte Reload
	movq	10760(%rsp), %rsi       # 8-byte Reload
	movq	10856(%rsp), %rdx       # 8-byte Reload
	movq	10864(%rsp), %rcx       # 8-byte Reload
	movq	10848(%rsp), %r8        # 8-byte Reload
	movq	10864(%rsp), %r9        # 8-byte Reload
	movq	10808(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	10988(%rsp), %ebx       # 4-byte Reload
	movl	%ebx, %ebp
	movl	%ebp, %edx
	movq	10800(%rsp), %rdi       # 8-byte Reload
	movq	10760(%rsp), %rsi       # 8-byte Reload
	movq	10800(%rsp), %rcx       # 8-byte Reload
	movq	10752(%rsp), %r8        # 8-byte Reload
	movq	10864(%rsp), %r9        # 8-byte Reload
	movq	10808(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	10988(%rsp), %ebx       # 4-byte Reload
	addl	$4294967295, %ebx       # imm = 0xFFFFFFFF
.Ltmp274:
	.loc	2 778 0                 # eispack.c:778:0
	movl	%ebx, %ebp
	movl	%ebp, %edx
	movq	10776(%rsp), %rdi       # 8-byte Reload
	movq	10760(%rsp), %rsi       # 8-byte Reload
	movq	10800(%rsp), %rcx       # 8-byte Reload
	movq	10744(%rsp), %r8        # 8-byte Reload
	movq	10864(%rsp), %r9        # 8-byte Reload
	movq	10808(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%ebx, 10716(%rsp)       # 4-byte Spill
	callq	trace_logger_log_int
	movq	10824(%rsp), %rdi       # 8-byte Reload
	movq	10816(%rsp), %rsi       # 8-byte Reload
	movq	10784(%rsp), %rdx       # 8-byte Reload
	movq	10728(%rsp), %rcx       # 8-byte Reload
	movq	10720(%rsp), %r8        # 8-byte Reload
	movl	10740(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	10800(%rsp), %rdi       # 8-byte Reload
	movq	10864(%rsp), %rsi       # 8-byte Reload
	movq	10864(%rsp), %rdx       # 8-byte Reload
	movq	10800(%rsp), %rcx       # 8-byte Reload
	movq	10792(%rsp), %r8        # 8-byte Reload
	movq	10864(%rsp), %r9        # 8-byte Reload
	movq	10808(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	10864(%rsp), %rax       # 8-byte Reload
	movq	%rax, 10704(%rsp)       # 8-byte Spill
	jmp	.LBB9_4
.Ltmp275:
.LBB9_2:                                # %.preheader53
	movabsq	$1, %rax
	leaq	.L.str1185, %rcx
	movabsq	$0, %rdx
	leaq	.L.str781, %rsi
	movabsq	$2, %rdi
	leaq	.L.str72146, %r8
	movabsq	$3, %r9
	leaq	.L.str77, %r10
	movabsq	$783, %r11              # imm = 0x30F
	leaq	.L.str57131, %rbx
	leaq	.L.str75, %r14
	leaq	.L.str76, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 10696(%rsp)       # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 10688(%rsp)       # 8-byte Spill
	leaq	.L.str51125, %rax
	movq	%rax, 10680(%rsp)       # 8-byte Spill
	leaq	.L.str1488, %rax
	movq	%rax, 10672(%rsp)       # 8-byte Spill
	movabsq	$46, %rax
	.loc	2 783 0                 # eispack.c:783:0
.Ltmp276:
	movq	%rdi, 10664(%rsp)       # 8-byte Spill
	movq	%r11, %rdi
	movq	%rsi, 10656(%rsp)       # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, 10648(%rsp)       # 8-byte Spill
	movq	%r14, %rdx
	movq	%rcx, 10640(%rsp)       # 8-byte Spill
	movq	%r8, 10632(%rsp)        # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 10624(%rsp)        # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r14, 10616(%rsp)       # 8-byte Spill
	movq	%r15, 10608(%rsp)       # 8-byte Spill
	movl	%ebp, 10604(%rsp)       # 4-byte Spill
	movl	%r12d, 10600(%rsp)      # 4-byte Spill
	movq	%r13, 10592(%rsp)       # 8-byte Spill
	movq	%rbx, 10584(%rsp)       # 8-byte Spill
	movq	%r11, 10576(%rsp)       # 8-byte Spill
	movq	%r10, 10568(%rsp)       # 8-byte Spill
	callq	trace_logger_log0
	movq	10664(%rsp), %rdi       # 8-byte Reload
	movq	10688(%rsp), %rsi       # 8-byte Reload
	movq	10648(%rsp), %rdx       # 8-byte Reload
	movq	10648(%rsp), %rcx       # 8-byte Reload
	movq	10672(%rsp), %r8        # 8-byte Reload
	movq	10648(%rsp), %r9        # 8-byte Reload
	movq	10656(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	10988(%rsp), %ebp       # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	10696(%rsp), %rdi       # 8-byte Reload
	movq	10688(%rsp), %rsi       # 8-byte Reload
	movq	10696(%rsp), %rcx       # 8-byte Reload
	movq	10680(%rsp), %r8        # 8-byte Reload
	movq	10648(%rsp), %r9        # 8-byte Reload
	movq	10656(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	10988(%rsp), %ebp       # 4-byte Reload
	cmpl	$0, %ebp
	setg	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %r12d
	movl	%r12d, %edx
	movq	10592(%rsp), %rdi       # 8-byte Reload
	movq	10696(%rsp), %rsi       # 8-byte Reload
	movq	10696(%rsp), %rcx       # 8-byte Reload
	movq	10640(%rsp), %r8        # 8-byte Reload
	movq	10648(%rsp), %r9        # 8-byte Reload
	movq	10656(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 10567(%rsp)        # 1-byte Spill
	callq	trace_logger_log_int
	movq	10576(%rsp), %rdi       # 8-byte Reload
	movq	10584(%rsp), %rsi       # 8-byte Reload
	movq	10616(%rsp), %rdx       # 8-byte Reload
	movq	10608(%rsp), %rcx       # 8-byte Reload
	movq	10664(%rsp), %r8        # 8-byte Reload
	movl	10604(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	10624(%rsp), %rdi       # 8-byte Reload
	movq	10648(%rsp), %rsi       # 8-byte Reload
	movq	10648(%rsp), %rdx       # 8-byte Reload
	movq	10696(%rsp), %rcx       # 8-byte Reload
	movq	10568(%rsp), %r8        # 8-byte Reload
	movq	10648(%rsp), %r9        # 8-byte Reload
	movq	10656(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	10664(%rsp), %rdi       # 8-byte Reload
	movq	10648(%rsp), %rsi       # 8-byte Reload
	movq	10648(%rsp), %rdx       # 8-byte Reload
	movq	10696(%rsp), %rcx       # 8-byte Reload
	movq	10632(%rsp), %r8        # 8-byte Reload
	movq	10648(%rsp), %r9        # 8-byte Reload
	movq	10656(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	10567(%rsp), %al        # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	10696(%rsp), %rdi       # 8-byte Reload
	movq	10696(%rsp), %rsi       # 8-byte Reload
	movq	10696(%rsp), %rcx       # 8-byte Reload
	movq	10640(%rsp), %r8        # 8-byte Reload
	movq	10648(%rsp), %r9        # 8-byte Reload
	movq	10656(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	10567(%rsp), %al        # 1-byte Reload
	testb	$1, %al
	jne	.LBB9_3
	jmp	.LBB9_36
.LBB9_3:                                # %.lr.ph55
	movabsq	$0, %rax
	movabsq	$1, %rcx
	leaq	.L.str79, %r8
	leaq	.L.str781, %rdx
	movabsq	$783, %rdi              # imm = 0x30F
	leaq	.L.str57131, %rsi
	leaq	.L.str77, %r9
	leaq	.L.str78, %r10
	movabsq	$2, %r11
	movl	$0, %ebx
	movl	$1, %ebp
	movabsq	$19134, %r14            # imm = 0x4ABE
	movabsq	$32, %r15
	leaq	.L.str1387, %r12
	leaq	.L.str51125, %r13
	movq	%rax, 10552(%rsp)       # 8-byte Spill
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
	movq	%rax, 10544(%rsp)       # 8-byte Spill
	leaq	.L.str1488, %rax
	movq	%rax, 10536(%rsp)       # 8-byte Spill
	movabsq	$785, %rax              # imm = 0x311
	movq	%rax, 10528(%rsp)       # 8-byte Spill
	movabsq	$8, %rax
	.loc	2 785 0                 # eispack.c:785:0
.Ltmp277:
	movq	%rax, 10520(%rsp)       # 8-byte Spill
	movq	10528(%rsp), %rax       # 8-byte Reload
	movq	%rdi, 10512(%rsp)       # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 10504(%rsp)       # 8-byte Spill
	movq	%rdx, 10496(%rsp)       # 8-byte Spill
	movq	%r9, %rdx
	movq	%rcx, 10488(%rsp)       # 8-byte Spill
	movq	%r12, %rcx
	movq	10520(%rsp), %rax       # 8-byte Reload
	movq	%r8, 10480(%rsp)        # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 10472(%rsp)        # 8-byte Spill
	movl	%ebx, %r9d
	movl	$1, (%rsp)
	movq	%r14, 10464(%rsp)       # 8-byte Spill
	movl	%ebp, 10460(%rsp)       # 4-byte Spill
	movq	%r15, 10448(%rsp)       # 8-byte Spill
	movq	%r13, 10440(%rsp)       # 8-byte Spill
	movq	%r12, 10432(%rsp)       # 8-byte Spill
	movl	%ebx, 10428(%rsp)       # 4-byte Spill
	movq	%r10, 10416(%rsp)       # 8-byte Spill
	movq	%r11, 10408(%rsp)       # 8-byte Spill
	callq	trace_logger_log0
	movq	10408(%rsp), %rdi       # 8-byte Reload
	movq	10448(%rsp), %rsi       # 8-byte Reload
	movq	10544(%rsp), %rdx       # 8-byte Reload
	movq	10552(%rsp), %rcx       # 8-byte Reload
	movq	10536(%rsp), %r8        # 8-byte Reload
	movq	10552(%rsp), %r9        # 8-byte Reload
	movq	10496(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	10988(%rsp), %ebx       # 4-byte Reload
	movl	%ebx, %ebp
	movl	%ebp, %edx
	movq	10488(%rsp), %rdi       # 8-byte Reload
	movq	10448(%rsp), %rsi       # 8-byte Reload
	movq	10488(%rsp), %rcx       # 8-byte Reload
	movq	10440(%rsp), %r8        # 8-byte Reload
	movq	10552(%rsp), %r9        # 8-byte Reload
	movq	10496(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	10988(%rsp), %ebx       # 4-byte Reload
	addl	$4294967295, %ebx       # imm = 0xFFFFFFFF
.Ltmp278:
	.loc	2 783 0                 # eispack.c:783:0
	movl	%ebx, %ebp
	movl	%ebp, %edx
	movq	10464(%rsp), %rdi       # 8-byte Reload
	movq	10448(%rsp), %rsi       # 8-byte Reload
	movq	10488(%rsp), %rcx       # 8-byte Reload
	movq	10432(%rsp), %r8        # 8-byte Reload
	movq	10552(%rsp), %r9        # 8-byte Reload
	movq	10496(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%ebx, 10404(%rsp)       # 4-byte Spill
	callq	trace_logger_log_int
	movq	10512(%rsp), %rdi       # 8-byte Reload
	movq	10504(%rsp), %rsi       # 8-byte Reload
	movq	10472(%rsp), %rdx       # 8-byte Reload
	movq	10416(%rsp), %rcx       # 8-byte Reload
	movq	10408(%rsp), %r8        # 8-byte Reload
	movl	10428(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	10488(%rsp), %rdi       # 8-byte Reload
	movq	10552(%rsp), %rsi       # 8-byte Reload
	movq	10552(%rsp), %rdx       # 8-byte Reload
	movq	10488(%rsp), %rcx       # 8-byte Reload
	movq	10480(%rsp), %r8        # 8-byte Reload
	movq	10552(%rsp), %r9        # 8-byte Reload
	movq	10496(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	10552(%rsp), %rax       # 8-byte Reload
	movq	%rax, 10392(%rsp)       # 8-byte Spill
	jmp	.LBB9_7
.Ltmp279:
.LBB9_4:                                # =>This Inner Loop Header: Depth=1
	movq	10704(%rsp), %rax       # 8-byte Reload
	movabsq	$1, %rcx
	leaq	.L.str85, %rdx
	movabsq	$0, %rsi
	leaq	.L.str781, %rdi
	movabsq	$2, %r8
	leaq	.L.str74148, %r9
	movabsq	$3, %r10
	leaq	.L.str75, %r11
	movabsq	$778, %rbx              # imm = 0x30A
	leaq	.L.str57131, %r14
	leaq	.L.str86, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 10384(%rsp)       # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 10376(%rsp)       # 8-byte Spill
	leaq	.L.str84, %rax
	movq	%rax, 10368(%rsp)       # 8-byte Spill
	leaq	.L.str51125, %rax
	movq	%rax, 10360(%rsp)       # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 10352(%rsp)       # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 10344(%rsp)       # 8-byte Spill
	leaq	.L.str81, %rax
	movq	%rax, 10336(%rsp)       # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, 10328(%rsp)       # 8-byte Spill
	leaq	.L.str80, %rax
	movq	%rax, 10320(%rsp)       # 8-byte Spill
	leaq	.L.str1488, %rax
	movq	%rax, 10312(%rsp)       # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, 10304(%rsp)       # 8-byte Spill
	leaq	.L.str26100, %rax
	movq	%rax, 10296(%rsp)       # 8-byte Spill
	leaq	.L.str32106, %rax
	movq	%rax, 10288(%rsp)       # 8-byte Spill
	movabsq	$780, %rax              # imm = 0x30C
	movq	%rax, 10280(%rsp)       # 8-byte Spill
	leaq	.L.str83, %rax
	movq	%rax, 10272(%rsp)       # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, 10264(%rsp)       # 8-byte Spill
	leaq	.L.str82, %rax
	movq	%rax, 10256(%rsp)       # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 10248(%rsp)       # 8-byte Spill
	leaq	.L.str2397, %rax
	movq	%rax, 10240(%rsp)       # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, 10232(%rsp)       # 8-byte Spill
	leaq	.L.str882, %rax
	movq	%rax, 10224(%rsp)       # 8-byte Spill
	leaq	.L.str2296, %rax
	movq	%rax, 10216(%rsp)       # 8-byte Spill
	leaq	.L.str2195, %rax
	movq	%rax, 10208(%rsp)       # 8-byte Spill
	movabsq	$35, %rax
	movq	%rax, 10200(%rsp)       # 8-byte Spill
	leaq	.L.str983, %rax
	movq	%rax, 10192(%rsp)       # 8-byte Spill
	leaq	.L.str2094, %rax
	movq	%rax, 10184(%rsp)       # 8-byte Spill
	leaq	.L.str1892, %rax
	movq	%rax, 10176(%rsp)       # 8-byte Spill
	movabsq	$12, %rax
	movq	%rax, 10168(%rsp)       # 8-byte Spill
	leaq	.L.str71145, %rax
	movq	%rax, 10160(%rsp)       # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 10152(%rsp)       # 8-byte Spill
	movabsq	$48, %rax
	.loc	2 780 0                 # eispack.c:780:0
.Ltmp280:
	movq	%rax, 10144(%rsp)       # 8-byte Spill
	movq	10152(%rsp), %rax       # 8-byte Reload
	movq	%rdi, 10136(%rsp)       # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 10128(%rsp)       # 8-byte Spill
	movq	%r14, %rsi
	movq	%rdx, 10120(%rsp)       # 8-byte Spill
	movq	%r9, %rdx
	movq	10320(%rsp), %rax       # 8-byte Reload
	movq	%rcx, 10112(%rsp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	10144(%rsp), %rax       # 8-byte Reload
	movq	%r8, 10104(%rsp)        # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 10096(%rsp)        # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r15, 10088(%rsp)       # 8-byte Spill
	movl	%ebp, 10084(%rsp)       # 4-byte Spill
	movl	%r12d, 10080(%rsp)      # 4-byte Spill
	movq	%r13, 10072(%rsp)       # 8-byte Spill
	movq	%r14, 10064(%rsp)       # 8-byte Spill
	movq	%rbx, 10056(%rsp)       # 8-byte Spill
	movq	%r10, 10048(%rsp)       # 8-byte Spill
	movq	%r11, 10040(%rsp)       # 8-byte Spill
	callq	trace_logger_log0
	movq	10104(%rsp), %rdi       # 8-byte Reload
	movq	10344(%rsp), %rsi       # 8-byte Reload
	movq	10128(%rsp), %rdx       # 8-byte Reload
	movq	10112(%rsp), %rcx       # 8-byte Reload
	movq	10336(%rsp), %r8        # 8-byte Reload
	movq	10112(%rsp), %r9        # 8-byte Reload
	movq	10096(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	10112(%rsp), %rdi       # 8-byte Reload
	movq	10344(%rsp), %rsi       # 8-byte Reload
	movq	10128(%rsp), %rdx       # 8-byte Reload
	movq	10128(%rsp), %rcx       # 8-byte Reload
	movq	10312(%rsp), %r8        # 8-byte Reload
	movq	10112(%rsp), %r9        # 8-byte Reload
	movq	10160(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	10072(%rsp), %rdi       # 8-byte Reload
	movq	10344(%rsp), %rsi       # 8-byte Reload
	movq	10384(%rsp), %rdx       # 8-byte Reload
	movq	10112(%rsp), %rcx       # 8-byte Reload
	movq	10320(%rsp), %r8        # 8-byte Reload
	movq	10128(%rsp), %r9        # 8-byte Reload
	movq	10160(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	10280(%rsp), %rdi       # 8-byte Reload
	movq	10064(%rsp), %rsi       # 8-byte Reload
	movq	10096(%rsp), %rdx       # 8-byte Reload
	movq	10176(%rsp), %rcx       # 8-byte Reload
	movq	10328(%rsp), %r8        # 8-byte Reload
	movl	10084(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	10112(%rsp), %rdi       # 8-byte Reload
	movq	10344(%rsp), %rsi       # 8-byte Reload
	movq	10384(%rsp), %rdx       # 8-byte Reload
	movq	10112(%rsp), %rcx       # 8-byte Reload
	movq	10320(%rsp), %r8        # 8-byte Reload
	movq	10128(%rsp), %r9        # 8-byte Reload
	movq	10136(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	10384(%rsp), %rax       # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	10072(%rsp), %rdi       # 8-byte Reload
	movq	10376(%rsp), %rsi       # 8-byte Reload
	movq	10112(%rsp), %rcx       # 8-byte Reload
	movq	10176(%rsp), %r8        # 8-byte Reload
	movq	10128(%rsp), %r9        # 8-byte Reload
	movq	10136(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 10036(%rsp)       # 4-byte Spill
	callq	trace_logger_log_int
	movq	10280(%rsp), %rdi       # 8-byte Reload
	movq	10064(%rsp), %rsi       # 8-byte Reload
	movq	10096(%rsp), %rdx       # 8-byte Reload
	movq	10184(%rsp), %rcx       # 8-byte Reload
	movq	10168(%rsp), %r8        # 8-byte Reload
	movl	10084(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	10988(%rsp), %r9d       # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	10104(%rsp), %rdi       # 8-byte Reload
	movq	10376(%rsp), %rsi       # 8-byte Reload
	movq	10112(%rsp), %rcx       # 8-byte Reload
	movq	10360(%rsp), %r8        # 8-byte Reload
	movq	10128(%rsp), %r9        # 8-byte Reload
	movq	10136(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	10036(%rsp), %ebp       # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	10112(%rsp), %rdi       # 8-byte Reload
	movq	10376(%rsp), %rsi       # 8-byte Reload
	movq	10112(%rsp), %rcx       # 8-byte Reload
	movq	10176(%rsp), %r8        # 8-byte Reload
	movq	10128(%rsp), %r9        # 8-byte Reload
	movq	10136(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	10036(%rsp), %ebp       # 4-byte Reload
	movl	10988(%rsp), %r12d      # 4-byte Reload
	imull	%r12d, %ebp
	movl	%ebp, %esi
	movl	%esi, %edx
	movq	10072(%rsp), %rdi       # 8-byte Reload
	movq	10376(%rsp), %rsi       # 8-byte Reload
	movq	10112(%rsp), %rcx       # 8-byte Reload
	movq	10184(%rsp), %r8        # 8-byte Reload
	movq	10128(%rsp), %r9        # 8-byte Reload
	movq	10136(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%ebp, 10032(%rsp)       # 4-byte Spill
	callq	trace_logger_log_int
	movq	10280(%rsp), %rdi       # 8-byte Reload
	movq	10064(%rsp), %rsi       # 8-byte Reload
	movq	10096(%rsp), %rdx       # 8-byte Reload
	movq	10208(%rsp), %rcx       # 8-byte Reload
	movq	10304(%rsp), %r8        # 8-byte Reload
	movl	10084(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	10032(%rsp), %r9d       # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	10104(%rsp), %rdi       # 8-byte Reload
	movq	10376(%rsp), %rsi       # 8-byte Reload
	movq	10112(%rsp), %rcx       # 8-byte Reload
	movq	10184(%rsp), %r8        # 8-byte Reload
	movq	10128(%rsp), %r9        # 8-byte Reload
	movq	10136(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	10716(%rsp), %ebp       # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	10112(%rsp), %rdi       # 8-byte Reload
	movq	10376(%rsp), %rsi       # 8-byte Reload
	movq	10112(%rsp), %rcx       # 8-byte Reload
	movq	10192(%rsp), %r8        # 8-byte Reload
	movq	10128(%rsp), %r9        # 8-byte Reload
	movq	10136(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	10716(%rsp), %ebp       # 4-byte Reload
	movl	10032(%rsp), %r12d      # 4-byte Reload
	addl	%r12d, %ebp
	movl	%ebp, %esi
	movl	%esi, %edx
	movq	10072(%rsp), %rdi       # 8-byte Reload
	movq	10376(%rsp), %rsi       # 8-byte Reload
	movq	10112(%rsp), %rcx       # 8-byte Reload
	movq	10208(%rsp), %r8        # 8-byte Reload
	movq	10128(%rsp), %r9        # 8-byte Reload
	movq	10136(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%ebp, 10028(%rsp)       # 4-byte Spill
	callq	trace_logger_log_int
	movq	10280(%rsp), %rdi       # 8-byte Reload
	movq	10064(%rsp), %rsi       # 8-byte Reload
	movq	10096(%rsp), %rdx       # 8-byte Reload
	movq	10216(%rsp), %rcx       # 8-byte Reload
	movq	10200(%rsp), %r8        # 8-byte Reload
	movl	10084(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	10028(%rsp), %r9d       # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	10112(%rsp), %rdi       # 8-byte Reload
	movq	10376(%rsp), %rsi       # 8-byte Reload
	movq	10112(%rsp), %rcx       # 8-byte Reload
	movq	10208(%rsp), %r8        # 8-byte Reload
	movq	10128(%rsp), %r9        # 8-byte Reload
	movq	10136(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	10028(%rsp), %ebp       # 4-byte Reload
	movslq	%ebp, %rax
	movq	10072(%rsp), %rdi       # 8-byte Reload
	movq	10344(%rsp), %rsi       # 8-byte Reload
	movq	%rax, %rdx
	movq	10112(%rsp), %rcx       # 8-byte Reload
	movq	10216(%rsp), %r8        # 8-byte Reload
	movq	10128(%rsp), %r9        # 8-byte Reload
	movq	10136(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 10016(%rsp)       # 8-byte Spill
	callq	trace_logger_log_int
	movq	10280(%rsp), %rdi       # 8-byte Reload
	movq	10064(%rsp), %rsi       # 8-byte Reload
	movq	10096(%rsp), %rdx       # 8-byte Reload
	movq	10240(%rsp), %rcx       # 8-byte Reload
	movq	10248(%rsp), %r8        # 8-byte Reload
	movl	10084(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	10104(%rsp), %rdi       # 8-byte Reload
	movq	10344(%rsp), %rsi       # 8-byte Reload
	movq	10016(%rsp), %rdx       # 8-byte Reload
	movq	10112(%rsp), %rcx       # 8-byte Reload
	movq	10216(%rsp), %r8        # 8-byte Reload
	movq	10128(%rsp), %r9        # 8-byte Reload
	movq	10136(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	10112(%rsp), %rdi       # 8-byte Reload
	movq	10344(%rsp), %rsi       # 8-byte Reload
	movq	11104(%rsp), %rdx       # 8-byte Reload
	movq	10112(%rsp), %rcx       # 8-byte Reload
	movq	10224(%rsp), %r8        # 8-byte Reload
	movq	10128(%rsp), %r9        # 8-byte Reload
	movq	10136(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	10016(%rsp), %rax       # 8-byte Reload
	shlq	$3, %rax
	movq	11104(%rsp), %rcx       # 8-byte Reload
	addq	%rax, %rcx
	movq	10072(%rsp), %rdi       # 8-byte Reload
	movq	10344(%rsp), %rsi       # 8-byte Reload
	movq	%rcx, %rdx
	movq	10112(%rsp), %rax       # 8-byte Reload
	movq	%rcx, 10008(%rsp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	10240(%rsp), %r8        # 8-byte Reload
	movq	10128(%rsp), %r9        # 8-byte Reload
	movq	10136(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	10280(%rsp), %rdi       # 8-byte Reload
	movq	10064(%rsp), %rsi       # 8-byte Reload
	movq	10096(%rsp), %rdx       # 8-byte Reload
	movq	10296(%rsp), %rcx       # 8-byte Reload
	movq	10232(%rsp), %r8        # 8-byte Reload
	movl	10084(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	10112(%rsp), %rdi       # 8-byte Reload
	movq	10344(%rsp), %rsi       # 8-byte Reload
	movq	10008(%rsp), %rdx       # 8-byte Reload
	movq	10112(%rsp), %rcx       # 8-byte Reload
	movq	10240(%rsp), %r8        # 8-byte Reload
	movq	10128(%rsp), %r9        # 8-byte Reload
	movq	10136(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	11104(%rsp), %rax       # 8-byte Reload
	movq	10016(%rsp), %rcx       # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
	movq	10072(%rsp), %rdi       # 8-byte Reload
	movq	10344(%rsp), %rsi       # 8-byte Reload
	vmovsd	%xmm0, 10000(%rsp)      # 8-byte Spill
	movq	10112(%rsp), %rdx       # 8-byte Reload
	movq	10296(%rsp), %rcx       # 8-byte Reload
	movq	10128(%rsp), %r8        # 8-byte Reload
	movq	10136(%rsp), %r9        # 8-byte Reload
	callq	trace_logger_log_double
	movq	10280(%rsp), %rdi       # 8-byte Reload
	movq	10064(%rsp), %rsi       # 8-byte Reload
	movq	10096(%rsp), %rdx       # 8-byte Reload
	movq	10288(%rsp), %rcx       # 8-byte Reload
	movq	10248(%rsp), %r8        # 8-byte Reload
	movl	10084(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	10104(%rsp), %rdi       # 8-byte Reload
	movq	10344(%rsp), %rsi       # 8-byte Reload
	movq	10384(%rsp), %rdx       # 8-byte Reload
	movq	10112(%rsp), %rcx       # 8-byte Reload
	movq	10320(%rsp), %r8        # 8-byte Reload
	movq	10128(%rsp), %r9        # 8-byte Reload
	movq	10136(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	10112(%rsp), %rdi       # 8-byte Reload
	movq	10344(%rsp), %rsi       # 8-byte Reload
	movq	10968(%rsp), %rdx       # 8-byte Reload
	movq	10112(%rsp), %rcx       # 8-byte Reload
	movq	10256(%rsp), %r8        # 8-byte Reload
	movq	10128(%rsp), %r9        # 8-byte Reload
	movq	10136(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	10384(%rsp), %rax       # 8-byte Reload
	shlq	$3, %rax
	movq	10968(%rsp), %rcx       # 8-byte Reload
	addq	%rax, %rcx
	movq	10072(%rsp), %rdi       # 8-byte Reload
	movq	10344(%rsp), %rsi       # 8-byte Reload
	movq	%rcx, %rdx
	movq	10112(%rsp), %rax       # 8-byte Reload
	movq	%rcx, 9992(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	10288(%rsp), %r8        # 8-byte Reload
	movq	10128(%rsp), %r9        # 8-byte Reload
	movq	10136(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	10280(%rsp), %rdi       # 8-byte Reload
	movq	10064(%rsp), %rsi       # 8-byte Reload
	movq	10096(%rsp), %rdx       # 8-byte Reload
	movq	10272(%rsp), %rcx       # 8-byte Reload
	movq	10264(%rsp), %r8        # 8-byte Reload
	movl	10084(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	10104(%rsp), %rdi       # 8-byte Reload
	movq	10344(%rsp), %rsi       # 8-byte Reload
	movq	9992(%rsp), %rdx        # 8-byte Reload
	movq	10112(%rsp), %rcx       # 8-byte Reload
	movq	10288(%rsp), %r8        # 8-byte Reload
	movq	10128(%rsp), %r9        # 8-byte Reload
	movq	10136(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	10112(%rsp), %rdi       # 8-byte Reload
	movq	10344(%rsp), %rsi       # 8-byte Reload
	vmovsd	10000(%rsp), %xmm0      # 8-byte Reload
	movq	10112(%rsp), %rdx       # 8-byte Reload
	movq	10296(%rsp), %rcx       # 8-byte Reload
	movq	10128(%rsp), %r8        # 8-byte Reload
	movq	10136(%rsp), %r9        # 8-byte Reload
	callq	trace_logger_log_double
	movq	10968(%rsp), %rax       # 8-byte Reload
	movq	10384(%rsp), %rcx       # 8-byte Reload
	vmovsd	10000(%rsp), %xmm0      # 8-byte Reload
	vmovsd	%xmm0, (%rax,%rcx,8)
.Ltmp281:
	.loc	2 778 0                 # eispack.c:778:0
	movq	10056(%rsp), %rdi       # 8-byte Reload
	movq	10064(%rsp), %rsi       # 8-byte Reload
	movq	10096(%rsp), %rdx       # 8-byte Reload
	movq	10336(%rsp), %rcx       # 8-byte Reload
	movq	10304(%rsp), %r8        # 8-byte Reload
	movl	10084(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	10104(%rsp), %rdi       # 8-byte Reload
	movq	10344(%rsp), %rsi       # 8-byte Reload
	movq	10112(%rsp), %rdx       # 8-byte Reload
	movq	10128(%rsp), %rcx       # 8-byte Reload
	movq	10312(%rsp), %r8        # 8-byte Reload
	movq	10128(%rsp), %r9        # 8-byte Reload
	movq	10136(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	10112(%rsp), %rdi       # 8-byte Reload
	movq	10344(%rsp), %rsi       # 8-byte Reload
	movq	10384(%rsp), %rdx       # 8-byte Reload
	movq	10112(%rsp), %rcx       # 8-byte Reload
	movq	10320(%rsp), %r8        # 8-byte Reload
	movq	10128(%rsp), %r9        # 8-byte Reload
	movq	10136(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	10384(%rsp), %rax       # 8-byte Reload
	addq	$1, %rax
	movq	10072(%rsp), %rdi       # 8-byte Reload
	movq	10344(%rsp), %rsi       # 8-byte Reload
	movq	%rax, %rdx
	movq	10112(%rsp), %rcx       # 8-byte Reload
	movq	10336(%rsp), %r8        # 8-byte Reload
	movq	10128(%rsp), %r9        # 8-byte Reload
	movq	10136(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 9984(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	10056(%rsp), %rdi       # 8-byte Reload
	movq	10064(%rsp), %rsi       # 8-byte Reload
	movq	10096(%rsp), %rdx       # 8-byte Reload
	movq	10368(%rsp), %rcx       # 8-byte Reload
	movq	10328(%rsp), %r8        # 8-byte Reload
	movl	10084(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	10112(%rsp), %rdi       # 8-byte Reload
	movq	10344(%rsp), %rsi       # 8-byte Reload
	movq	9984(%rsp), %rdx        # 8-byte Reload
	movq	10112(%rsp), %rcx       # 8-byte Reload
	movq	10336(%rsp), %r8        # 8-byte Reload
	movq	10128(%rsp), %r9        # 8-byte Reload
	movq	10136(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	9984(%rsp), %rax        # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	10072(%rsp), %rdi       # 8-byte Reload
	movq	10376(%rsp), %rsi       # 8-byte Reload
	movq	10112(%rsp), %rcx       # 8-byte Reload
	movq	10368(%rsp), %r8        # 8-byte Reload
	movq	10128(%rsp), %r9        # 8-byte Reload
	movq	10136(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 9980(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	10056(%rsp), %rdi       # 8-byte Reload
	movq	10064(%rsp), %rsi       # 8-byte Reload
	movq	10096(%rsp), %rdx       # 8-byte Reload
	movq	10120(%rsp), %rcx       # 8-byte Reload
	movq	10352(%rsp), %r8        # 8-byte Reload
	movl	10084(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	10988(%rsp), %r9d       # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	10104(%rsp), %rdi       # 8-byte Reload
	movq	10376(%rsp), %rsi       # 8-byte Reload
	movq	10112(%rsp), %rcx       # 8-byte Reload
	movq	10360(%rsp), %r8        # 8-byte Reload
	movq	10128(%rsp), %r9        # 8-byte Reload
	movq	10136(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	9980(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	10112(%rsp), %rdi       # 8-byte Reload
	movq	10376(%rsp), %rsi       # 8-byte Reload
	movq	10112(%rsp), %rcx       # 8-byte Reload
	movq	10368(%rsp), %r8        # 8-byte Reload
	movq	10128(%rsp), %r9        # 8-byte Reload
	movq	10136(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	9980(%rsp), %ebp        # 4-byte Reload
	movl	10988(%rsp), %r12d      # 4-byte Reload
	cmpl	%r12d, %ebp
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	10072(%rsp), %rdi       # 8-byte Reload
	movq	10112(%rsp), %rsi       # 8-byte Reload
	movq	10112(%rsp), %rcx       # 8-byte Reload
	movq	10120(%rsp), %r8        # 8-byte Reload
	movq	10128(%rsp), %r9        # 8-byte Reload
	movq	10136(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 9979(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	10056(%rsp), %rdi       # 8-byte Reload
	movq	10064(%rsp), %rsi       # 8-byte Reload
	movq	10096(%rsp), %rdx       # 8-byte Reload
	movq	10088(%rsp), %rcx       # 8-byte Reload
	movq	10104(%rsp), %r8        # 8-byte Reload
	movl	10084(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	10048(%rsp), %rdi       # 8-byte Reload
	movq	10128(%rsp), %rsi       # 8-byte Reload
	movq	10128(%rsp), %rdx       # 8-byte Reload
	movq	10112(%rsp), %rcx       # 8-byte Reload
	movq	10040(%rsp), %r8        # 8-byte Reload
	movq	10128(%rsp), %r9        # 8-byte Reload
	movq	10136(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	10104(%rsp), %rdi       # 8-byte Reload
	movq	10128(%rsp), %rsi       # 8-byte Reload
	movq	10128(%rsp), %rdx       # 8-byte Reload
	movq	10112(%rsp), %rcx       # 8-byte Reload
	movq	10096(%rsp), %r8        # 8-byte Reload
	movq	10128(%rsp), %r9        # 8-byte Reload
	movq	10136(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	9979(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	10112(%rsp), %rdi       # 8-byte Reload
	movq	10112(%rsp), %rsi       # 8-byte Reload
	movq	10112(%rsp), %rcx       # 8-byte Reload
	movq	10120(%rsp), %r8        # 8-byte Reload
	movq	10128(%rsp), %r9        # 8-byte Reload
	movq	10136(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	9979(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	movq	9984(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 10704(%rsp)       # 8-byte Spill
	jne	.LBB9_2
	jmp	.LBB9_4
.Ltmp282:
.LBB9_5:                                # %.preheader47
	movabsq	$1, %rax
	leaq	.L.str33107, %rcx
	movabsq	$0, %rdx
	leaq	.L.str781, %rsi
	movabsq	$2, %rdi
	leaq	.L.str72146, %r8
	movabsq	$3, %r9
	leaq	.L.str89, %r10
	movabsq	$788, %r11              # imm = 0x314
	leaq	.L.str57131, %rbx
	leaq	.L.str87, %r14
	leaq	.L.str88, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 9968(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 9960(%rsp)        # 8-byte Spill
	leaq	.L.str51125, %rax
	movq	%rax, 9952(%rsp)        # 8-byte Spill
	leaq	.L.str1488, %rax
	movq	%rax, 9944(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	.loc	2 788 0                 # eispack.c:788:0
.Ltmp283:
	movq	%rdi, 9936(%rsp)        # 8-byte Spill
	movq	%r11, %rdi
	movq	%rsi, 9928(%rsp)        # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, 9920(%rsp)        # 8-byte Spill
	movq	%r14, %rdx
	movq	%rcx, 9912(%rsp)        # 8-byte Spill
	movq	%r8, 9904(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 9896(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r14, 9888(%rsp)        # 8-byte Spill
	movq	%r15, 9880(%rsp)        # 8-byte Spill
	movl	%ebp, 9876(%rsp)        # 4-byte Spill
	movl	%r12d, 9872(%rsp)       # 4-byte Spill
	movq	%r13, 9864(%rsp)        # 8-byte Spill
	movq	%rbx, 9856(%rsp)        # 8-byte Spill
	movq	%r11, 9848(%rsp)        # 8-byte Spill
	movq	%r10, 9840(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	9936(%rsp), %rdi        # 8-byte Reload
	movq	9960(%rsp), %rsi        # 8-byte Reload
	movq	9920(%rsp), %rdx        # 8-byte Reload
	movq	9920(%rsp), %rcx        # 8-byte Reload
	movq	9944(%rsp), %r8         # 8-byte Reload
	movq	9920(%rsp), %r9         # 8-byte Reload
	movq	9928(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	10988(%rsp), %ebp       # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	9968(%rsp), %rdi        # 8-byte Reload
	movq	9960(%rsp), %rsi        # 8-byte Reload
	movq	9968(%rsp), %rcx        # 8-byte Reload
	movq	9952(%rsp), %r8         # 8-byte Reload
	movq	9920(%rsp), %r9         # 8-byte Reload
	movq	9928(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	10988(%rsp), %ebp       # 4-byte Reload
	cmpl	$0, %ebp
	setg	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %r12d
	movl	%r12d, %edx
	movq	9864(%rsp), %rdi        # 8-byte Reload
	movq	9968(%rsp), %rsi        # 8-byte Reload
	movq	9968(%rsp), %rcx        # 8-byte Reload
	movq	9912(%rsp), %r8         # 8-byte Reload
	movq	9920(%rsp), %r9         # 8-byte Reload
	movq	9928(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 9839(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	9848(%rsp), %rdi        # 8-byte Reload
	movq	9856(%rsp), %rsi        # 8-byte Reload
	movq	9888(%rsp), %rdx        # 8-byte Reload
	movq	9880(%rsp), %rcx        # 8-byte Reload
	movq	9936(%rsp), %r8         # 8-byte Reload
	movl	9876(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	9896(%rsp), %rdi        # 8-byte Reload
	movq	9920(%rsp), %rsi        # 8-byte Reload
	movq	9920(%rsp), %rdx        # 8-byte Reload
	movq	9968(%rsp), %rcx        # 8-byte Reload
	movq	9840(%rsp), %r8         # 8-byte Reload
	movq	9920(%rsp), %r9         # 8-byte Reload
	movq	9928(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	9936(%rsp), %rdi        # 8-byte Reload
	movq	9920(%rsp), %rsi        # 8-byte Reload
	movq	9920(%rsp), %rdx        # 8-byte Reload
	movq	9968(%rsp), %rcx        # 8-byte Reload
	movq	9904(%rsp), %r8         # 8-byte Reload
	movq	9920(%rsp), %r9         # 8-byte Reload
	movq	9928(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	9839(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	9968(%rsp), %rdi        # 8-byte Reload
	movq	9968(%rsp), %rsi        # 8-byte Reload
	movq	9968(%rsp), %rcx        # 8-byte Reload
	movq	9912(%rsp), %r8         # 8-byte Reload
	movq	9920(%rsp), %r9         # 8-byte Reload
	movq	9928(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	9839(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB9_6
	jmp	.LBB9_36
.LBB9_6:                                # %.lr.ph51
	movabsq	$1, %rax
	movabsq	$0, %rcx
	leaq	.L.str91, %r8
	leaq	.L.str781, %rdx
	movabsq	$788, %rdi              # imm = 0x314
	leaq	.L.str57131, %rsi
	leaq	.L.str89, %r9
	leaq	.L.str90, %r10
	movabsq	$2, %r11
	movl	$0, %ebx
	movl	$1, %ebp
	movabsq	$19134, %r14            # imm = 0x4ABE
	movabsq	$64, %r15
	leaq	.L.str34108, %r12
	movabsq	$32, %r13
	movq	%rax, 9824(%rsp)        # 8-byte Spill
	leaq	.L.str51125, %rax
	movq	%rax, 9816(%rsp)        # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 9808(%rsp)        # 8-byte Spill
	movabsq	$35, %rax
	movq	%rax, 9800(%rsp)        # 8-byte Spill
	movq	9808(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 9792(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 9784(%rsp)        # 8-byte Spill
	movq	%rdx, 9776(%rsp)        # 8-byte Spill
	movq	%r9, %rdx
	movq	%rcx, 9768(%rsp)        # 8-byte Spill
	movq	%r12, %rcx
	movq	9800(%rsp), %rax        # 8-byte Reload
	movq	%r8, 9760(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 9752(%rsp)         # 8-byte Spill
	movl	%ebx, %r9d
	movl	$1, (%rsp)
	movq	%r14, 9744(%rsp)        # 8-byte Spill
	movl	%ebp, 9740(%rsp)        # 4-byte Spill
	movq	%r15, 9728(%rsp)        # 8-byte Spill
	movq	%r13, 9720(%rsp)        # 8-byte Spill
	movq	%r12, 9712(%rsp)        # 8-byte Spill
	movl	%ebx, 9708(%rsp)        # 4-byte Spill
	movq	%r10, 9696(%rsp)        # 8-byte Spill
	movq	%r11, 9688(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movl	10988(%rsp), %r9d       # 4-byte Reload
	movl	%r9d, %ebx
	movl	%ebx, %edx
	movq	9824(%rsp), %rdi        # 8-byte Reload
	movq	9720(%rsp), %rsi        # 8-byte Reload
	movq	9824(%rsp), %rcx        # 8-byte Reload
	movq	9816(%rsp), %r8         # 8-byte Reload
	movq	9768(%rsp), %r9         # 8-byte Reload
	movq	9776(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	10988(%rsp), %ebx       # 4-byte Reload
	movslq	%ebx, %rax
	movq	9744(%rsp), %rdi        # 8-byte Reload
	movq	9728(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	9824(%rsp), %rcx        # 8-byte Reload
	movq	9712(%rsp), %r8         # 8-byte Reload
	movq	9768(%rsp), %r9         # 8-byte Reload
	movq	9776(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 9680(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	9792(%rsp), %rdi        # 8-byte Reload
	movq	9784(%rsp), %rsi        # 8-byte Reload
	movq	9752(%rsp), %rdx        # 8-byte Reload
	movq	9696(%rsp), %rcx        # 8-byte Reload
	movq	9688(%rsp), %r8         # 8-byte Reload
	movl	9708(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	9824(%rsp), %rdi        # 8-byte Reload
	movq	9768(%rsp), %rsi        # 8-byte Reload
	movq	9768(%rsp), %rdx        # 8-byte Reload
	movq	9824(%rsp), %rcx        # 8-byte Reload
	movq	9760(%rsp), %r8         # 8-byte Reload
	movq	9768(%rsp), %r9         # 8-byte Reload
	movq	9776(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	9680(%rsp), %rax        # 8-byte Reload
	movl	10988(%rsp), %ebx       # 4-byte Reload
	movl	10988(%rsp), %ebp       # 4-byte Reload
	movq	%rax, 9672(%rsp)        # 8-byte Spill
	movl	%ebx, 9668(%rsp)        # 4-byte Spill
	movl	%ebp, 9664(%rsp)        # 4-byte Spill
	jmp	.LBB9_8
.Ltmp284:
.LBB9_7:                                # =>This Inner Loop Header: Depth=1
	movq	10392(%rsp), %rax       # 8-byte Reload
	movabsq	$1, %rcx
	leaq	.L.str101, %rdx
	movabsq	$0, %rsi
	leaq	.L.str781, %rdi
	movabsq	$2, %r8
	leaq	.L.str79, %r9
	movabsq	$3, %r10
	leaq	.L.str87, %r11
	movabsq	$783, %rbx              # imm = 0x30F
	leaq	.L.str57131, %r14
	leaq	.L.str102, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 9656(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 9648(%rsp)        # 8-byte Spill
	leaq	.L.str100, %rax
	movq	%rax, 9640(%rsp)        # 8-byte Spill
	leaq	.L.str51125, %rax
	movq	%rax, 9632(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 9624(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 9616(%rsp)        # 8-byte Spill
	leaq	.L.str93, %rax
	movq	%rax, 9608(%rsp)        # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, 9600(%rsp)        # 8-byte Spill
	leaq	.L.str92, %rax
	movq	%rax, 9592(%rsp)        # 8-byte Spill
	leaq	.L.str1488, %rax
	movq	%rax, 9584(%rsp)        # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, 9576(%rsp)        # 8-byte Spill
	leaq	.L.str95, %rax
	movq	%rax, 9568(%rsp)        # 8-byte Spill
	leaq	.L.str98, %rax
	movq	%rax, 9560(%rsp)        # 8-byte Spill
	movabsq	$785, %rax              # imm = 0x311
	movq	%rax, 9552(%rsp)        # 8-byte Spill
	leaq	.L.str99, %rax
	movq	%rax, 9544(%rsp)        # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, 9536(%rsp)        # 8-byte Spill
	leaq	.L.str882, %rax
	movq	%rax, 9528(%rsp)        # 8-byte Spill
	leaq	.L.str97, %rax
	movq	%rax, 9520(%rsp)        # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 9512(%rsp)        # 8-byte Spill
	leaq	.L.str96, %rax
	movq	%rax, 9504(%rsp)        # 8-byte Spill
	movabsq	$35, %rax
	movq	%rax, 9496(%rsp)        # 8-byte Spill
	leaq	.L.str1387, %rax
	movq	%rax, 9488(%rsp)        # 8-byte Spill
	leaq	.L.str36110, %rax
	movq	%rax, 9480(%rsp)        # 8-byte Spill
	leaq	.L.str94, %rax
	movq	%rax, 9472(%rsp)        # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, 9464(%rsp)        # 8-byte Spill
	leaq	.L.str37111, %rax
	movq	%rax, 9456(%rsp)        # 8-byte Spill
	leaq	.L.str27101, %rax
	movq	%rax, 9448(%rsp)        # 8-byte Spill
	leaq	.L.str31105, %rax
	movq	%rax, 9440(%rsp)        # 8-byte Spill
	leaq	.L.str35109, %rax
	movq	%rax, 9432(%rsp)        # 8-byte Spill
	movabsq	$12, %rax
	movq	%rax, 9424(%rsp)        # 8-byte Spill
	leaq	.L.str77, %rax
	movq	%rax, 9416(%rsp)        # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 9408(%rsp)        # 8-byte Spill
	movabsq	$48, %rax
	.loc	2 785 0                 # eispack.c:785:0
.Ltmp285:
	movq	%rax, 9400(%rsp)        # 8-byte Spill
	movq	9408(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 9392(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 9384(%rsp)        # 8-byte Spill
	movq	%r14, %rsi
	movq	%rdx, 9376(%rsp)        # 8-byte Spill
	movq	%r9, %rdx
	movq	9592(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 9368(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	9400(%rsp), %rax        # 8-byte Reload
	movq	%r8, 9360(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 9352(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r15, 9344(%rsp)        # 8-byte Spill
	movl	%ebp, 9340(%rsp)        # 4-byte Spill
	movl	%r12d, 9336(%rsp)       # 4-byte Spill
	movq	%r13, 9328(%rsp)        # 8-byte Spill
	movq	%r14, 9320(%rsp)        # 8-byte Spill
	movq	%rbx, 9312(%rsp)        # 8-byte Spill
	movq	%r10, 9304(%rsp)        # 8-byte Spill
	movq	%r11, 9296(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	9360(%rsp), %rdi        # 8-byte Reload
	movq	9616(%rsp), %rsi        # 8-byte Reload
	movq	9384(%rsp), %rdx        # 8-byte Reload
	movq	9368(%rsp), %rcx        # 8-byte Reload
	movq	9608(%rsp), %r8         # 8-byte Reload
	movq	9368(%rsp), %r9         # 8-byte Reload
	movq	9352(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	9368(%rsp), %rdi        # 8-byte Reload
	movq	9616(%rsp), %rsi        # 8-byte Reload
	movq	9384(%rsp), %rdx        # 8-byte Reload
	movq	9384(%rsp), %rcx        # 8-byte Reload
	movq	9584(%rsp), %r8         # 8-byte Reload
	movq	9368(%rsp), %r9         # 8-byte Reload
	movq	9416(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	9328(%rsp), %rdi        # 8-byte Reload
	movq	9616(%rsp), %rsi        # 8-byte Reload
	movq	9656(%rsp), %rdx        # 8-byte Reload
	movq	9368(%rsp), %rcx        # 8-byte Reload
	movq	9592(%rsp), %r8         # 8-byte Reload
	movq	9384(%rsp), %r9         # 8-byte Reload
	movq	9416(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	9552(%rsp), %rdi        # 8-byte Reload
	movq	9320(%rsp), %rsi        # 8-byte Reload
	movq	9352(%rsp), %rdx        # 8-byte Reload
	movq	9432(%rsp), %rcx        # 8-byte Reload
	movq	9600(%rsp), %r8         # 8-byte Reload
	movl	9340(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	9368(%rsp), %rdi        # 8-byte Reload
	movq	9616(%rsp), %rsi        # 8-byte Reload
	movq	9656(%rsp), %rdx        # 8-byte Reload
	movq	9368(%rsp), %rcx        # 8-byte Reload
	movq	9592(%rsp), %r8         # 8-byte Reload
	movq	9384(%rsp), %r9         # 8-byte Reload
	movq	9392(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	9656(%rsp), %rax        # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	9328(%rsp), %rdi        # 8-byte Reload
	movq	9648(%rsp), %rsi        # 8-byte Reload
	movq	9368(%rsp), %rcx        # 8-byte Reload
	movq	9432(%rsp), %r8         # 8-byte Reload
	movq	9384(%rsp), %r9         # 8-byte Reload
	movq	9392(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 9292(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	9552(%rsp), %rdi        # 8-byte Reload
	movq	9320(%rsp), %rsi        # 8-byte Reload
	movq	9352(%rsp), %rdx        # 8-byte Reload
	movq	9480(%rsp), %rcx        # 8-byte Reload
	movq	9424(%rsp), %r8         # 8-byte Reload
	movl	9340(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	10988(%rsp), %r9d       # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	9360(%rsp), %rdi        # 8-byte Reload
	movq	9648(%rsp), %rsi        # 8-byte Reload
	movq	9368(%rsp), %rcx        # 8-byte Reload
	movq	9632(%rsp), %r8         # 8-byte Reload
	movq	9384(%rsp), %r9         # 8-byte Reload
	movq	9392(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	9292(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	9368(%rsp), %rdi        # 8-byte Reload
	movq	9648(%rsp), %rsi        # 8-byte Reload
	movq	9368(%rsp), %rcx        # 8-byte Reload
	movq	9432(%rsp), %r8         # 8-byte Reload
	movq	9384(%rsp), %r9         # 8-byte Reload
	movq	9392(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	9292(%rsp), %ebp        # 4-byte Reload
	movl	10988(%rsp), %r12d      # 4-byte Reload
	imull	%r12d, %ebp
	movl	%ebp, %esi
	movl	%esi, %edx
	movq	9328(%rsp), %rdi        # 8-byte Reload
	movq	9648(%rsp), %rsi        # 8-byte Reload
	movq	9368(%rsp), %rcx        # 8-byte Reload
	movq	9480(%rsp), %r8         # 8-byte Reload
	movq	9384(%rsp), %r9         # 8-byte Reload
	movq	9392(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%ebp, 9288(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	9552(%rsp), %rdi        # 8-byte Reload
	movq	9320(%rsp), %rsi        # 8-byte Reload
	movq	9352(%rsp), %rdx        # 8-byte Reload
	movq	9440(%rsp), %rcx        # 8-byte Reload
	movq	9600(%rsp), %r8         # 8-byte Reload
	movl	9340(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	9368(%rsp), %rdi        # 8-byte Reload
	movq	9616(%rsp), %rsi        # 8-byte Reload
	movq	9656(%rsp), %rdx        # 8-byte Reload
	movq	9368(%rsp), %rcx        # 8-byte Reload
	movq	9592(%rsp), %r8         # 8-byte Reload
	movq	9384(%rsp), %r9         # 8-byte Reload
	movq	9392(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	9656(%rsp), %rax        # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	9328(%rsp), %rdi        # 8-byte Reload
	movq	9648(%rsp), %rsi        # 8-byte Reload
	movq	9368(%rsp), %rcx        # 8-byte Reload
	movq	9440(%rsp), %r8         # 8-byte Reload
	movq	9384(%rsp), %r9         # 8-byte Reload
	movq	9392(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 9284(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	9552(%rsp), %rdi        # 8-byte Reload
	movq	9320(%rsp), %rsi        # 8-byte Reload
	movq	9352(%rsp), %rdx        # 8-byte Reload
	movq	9448(%rsp), %rcx        # 8-byte Reload
	movq	9576(%rsp), %r8         # 8-byte Reload
	movl	9340(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	9284(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	9360(%rsp), %rdi        # 8-byte Reload
	movq	9648(%rsp), %rsi        # 8-byte Reload
	movq	9368(%rsp), %rcx        # 8-byte Reload
	movq	9440(%rsp), %r8         # 8-byte Reload
	movq	9384(%rsp), %r9         # 8-byte Reload
	movq	9392(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	9288(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	9368(%rsp), %rdi        # 8-byte Reload
	movq	9648(%rsp), %rsi        # 8-byte Reload
	movq	9368(%rsp), %rcx        # 8-byte Reload
	movq	9480(%rsp), %r8         # 8-byte Reload
	movq	9384(%rsp), %r9         # 8-byte Reload
	movq	9392(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	9288(%rsp), %ebp        # 4-byte Reload
	movl	9284(%rsp), %r12d       # 4-byte Reload
	addl	%r12d, %ebp
	movl	%ebp, %esi
	movl	%esi, %edx
	movq	9328(%rsp), %rdi        # 8-byte Reload
	movq	9648(%rsp), %rsi        # 8-byte Reload
	movq	9368(%rsp), %rcx        # 8-byte Reload
	movq	9448(%rsp), %r8         # 8-byte Reload
	movq	9384(%rsp), %r9         # 8-byte Reload
	movq	9392(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%ebp, 9280(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	9552(%rsp), %rdi        # 8-byte Reload
	movq	9320(%rsp), %rsi        # 8-byte Reload
	movq	9352(%rsp), %rdx        # 8-byte Reload
	movq	9456(%rsp), %rcx        # 8-byte Reload
	movq	9496(%rsp), %r8         # 8-byte Reload
	movl	9340(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	9280(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	9368(%rsp), %rdi        # 8-byte Reload
	movq	9648(%rsp), %rsi        # 8-byte Reload
	movq	9368(%rsp), %rcx        # 8-byte Reload
	movq	9448(%rsp), %r8         # 8-byte Reload
	movq	9384(%rsp), %r9         # 8-byte Reload
	movq	9392(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	9280(%rsp), %ebp        # 4-byte Reload
	movslq	%ebp, %rax
	movq	9328(%rsp), %rdi        # 8-byte Reload
	movq	9616(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	9368(%rsp), %rcx        # 8-byte Reload
	movq	9456(%rsp), %r8         # 8-byte Reload
	movq	9384(%rsp), %r9         # 8-byte Reload
	movq	9392(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 9272(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	9552(%rsp), %rdi        # 8-byte Reload
	movq	9320(%rsp), %rsi        # 8-byte Reload
	movq	9352(%rsp), %rdx        # 8-byte Reload
	movq	9472(%rsp), %rcx        # 8-byte Reload
	movq	9512(%rsp), %r8         # 8-byte Reload
	movl	9340(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	9360(%rsp), %rdi        # 8-byte Reload
	movq	9616(%rsp), %rsi        # 8-byte Reload
	movq	9272(%rsp), %rdx        # 8-byte Reload
	movq	9368(%rsp), %rcx        # 8-byte Reload
	movq	9456(%rsp), %r8         # 8-byte Reload
	movq	9384(%rsp), %r9         # 8-byte Reload
	movq	9392(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	9368(%rsp), %rdi        # 8-byte Reload
	movq	9616(%rsp), %rsi        # 8-byte Reload
	movq	11104(%rsp), %rdx       # 8-byte Reload
	movq	9368(%rsp), %rcx        # 8-byte Reload
	movq	9528(%rsp), %r8         # 8-byte Reload
	movq	9384(%rsp), %r9         # 8-byte Reload
	movq	9392(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	9272(%rsp), %rax        # 8-byte Reload
	shlq	$3, %rax
	movq	11104(%rsp), %rcx       # 8-byte Reload
	addq	%rax, %rcx
	movq	9328(%rsp), %rdi        # 8-byte Reload
	movq	9616(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	9368(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 9264(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	9472(%rsp), %r8         # 8-byte Reload
	movq	9384(%rsp), %r9         # 8-byte Reload
	movq	9392(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	9552(%rsp), %rdi        # 8-byte Reload
	movq	9320(%rsp), %rsi        # 8-byte Reload
	movq	9352(%rsp), %rdx        # 8-byte Reload
	movq	9568(%rsp), %rcx        # 8-byte Reload
	movq	9464(%rsp), %r8         # 8-byte Reload
	movl	9340(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	9368(%rsp), %rdi        # 8-byte Reload
	movq	9616(%rsp), %rsi        # 8-byte Reload
	movq	9264(%rsp), %rdx        # 8-byte Reload
	movq	9368(%rsp), %rcx        # 8-byte Reload
	movq	9472(%rsp), %r8         # 8-byte Reload
	movq	9384(%rsp), %r9         # 8-byte Reload
	movq	9392(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	11104(%rsp), %rax       # 8-byte Reload
	movq	9272(%rsp), %rcx        # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
	movq	9328(%rsp), %rdi        # 8-byte Reload
	movq	9616(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 9256(%rsp)       # 8-byte Spill
	movq	9368(%rsp), %rdx        # 8-byte Reload
	movq	9568(%rsp), %rcx        # 8-byte Reload
	movq	9384(%rsp), %r8         # 8-byte Reload
	movq	9392(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	9552(%rsp), %rdi        # 8-byte Reload
	movq	9320(%rsp), %rsi        # 8-byte Reload
	movq	9352(%rsp), %rdx        # 8-byte Reload
	movq	9504(%rsp), %rcx        # 8-byte Reload
	movq	9576(%rsp), %r8         # 8-byte Reload
	movl	9340(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	9288(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	9360(%rsp), %rdi        # 8-byte Reload
	movq	9648(%rsp), %rsi        # 8-byte Reload
	movq	9368(%rsp), %rcx        # 8-byte Reload
	movq	9480(%rsp), %r8         # 8-byte Reload
	movq	9384(%rsp), %r9         # 8-byte Reload
	movq	9392(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	10404(%rsp), %ebp       # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	9368(%rsp), %rdi        # 8-byte Reload
	movq	9648(%rsp), %rsi        # 8-byte Reload
	movq	9368(%rsp), %rcx        # 8-byte Reload
	movq	9488(%rsp), %r8         # 8-byte Reload
	movq	9384(%rsp), %r9         # 8-byte Reload
	movq	9392(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	10404(%rsp), %ebp       # 4-byte Reload
	movl	9288(%rsp), %r12d       # 4-byte Reload
	addl	%r12d, %ebp
	movl	%ebp, %esi
	movl	%esi, %edx
	movq	9328(%rsp), %rdi        # 8-byte Reload
	movq	9648(%rsp), %rsi        # 8-byte Reload
	movq	9368(%rsp), %rcx        # 8-byte Reload
	movq	9504(%rsp), %r8         # 8-byte Reload
	movq	9384(%rsp), %r9         # 8-byte Reload
	movq	9392(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%ebp, 9252(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	9552(%rsp), %rdi        # 8-byte Reload
	movq	9320(%rsp), %rsi        # 8-byte Reload
	movq	9352(%rsp), %rdx        # 8-byte Reload
	movq	9520(%rsp), %rcx        # 8-byte Reload
	movq	9496(%rsp), %r8         # 8-byte Reload
	movl	9340(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	9252(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	9368(%rsp), %rdi        # 8-byte Reload
	movq	9648(%rsp), %rsi        # 8-byte Reload
	movq	9368(%rsp), %rcx        # 8-byte Reload
	movq	9504(%rsp), %r8         # 8-byte Reload
	movq	9384(%rsp), %r9         # 8-byte Reload
	movq	9392(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	9252(%rsp), %ebp        # 4-byte Reload
	movslq	%ebp, %rax
	movq	9328(%rsp), %rdi        # 8-byte Reload
	movq	9616(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	9368(%rsp), %rcx        # 8-byte Reload
	movq	9520(%rsp), %r8         # 8-byte Reload
	movq	9384(%rsp), %r9         # 8-byte Reload
	movq	9392(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 9240(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	9552(%rsp), %rdi        # 8-byte Reload
	movq	9320(%rsp), %rsi        # 8-byte Reload
	movq	9352(%rsp), %rdx        # 8-byte Reload
	movq	9560(%rsp), %rcx        # 8-byte Reload
	movq	9512(%rsp), %r8         # 8-byte Reload
	movl	9340(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	9360(%rsp), %rdi        # 8-byte Reload
	movq	9616(%rsp), %rsi        # 8-byte Reload
	movq	9240(%rsp), %rdx        # 8-byte Reload
	movq	9368(%rsp), %rcx        # 8-byte Reload
	movq	9520(%rsp), %r8         # 8-byte Reload
	movq	9384(%rsp), %r9         # 8-byte Reload
	movq	9392(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	9368(%rsp), %rdi        # 8-byte Reload
	movq	9616(%rsp), %rsi        # 8-byte Reload
	movq	11104(%rsp), %rdx       # 8-byte Reload
	movq	9368(%rsp), %rcx        # 8-byte Reload
	movq	9528(%rsp), %r8         # 8-byte Reload
	movq	9384(%rsp), %r9         # 8-byte Reload
	movq	9392(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	9240(%rsp), %rax        # 8-byte Reload
	shlq	$3, %rax
	movq	11104(%rsp), %rcx       # 8-byte Reload
	addq	%rax, %rcx
	movq	9328(%rsp), %rdi        # 8-byte Reload
	movq	9616(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	9368(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 9232(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	9560(%rsp), %r8         # 8-byte Reload
	movq	9384(%rsp), %r9         # 8-byte Reload
	movq	9392(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	9552(%rsp), %rdi        # 8-byte Reload
	movq	9320(%rsp), %rsi        # 8-byte Reload
	movq	9352(%rsp), %rdx        # 8-byte Reload
	movq	9544(%rsp), %rcx        # 8-byte Reload
	movq	9536(%rsp), %r8         # 8-byte Reload
	movl	9340(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	9360(%rsp), %rdi        # 8-byte Reload
	movq	9616(%rsp), %rsi        # 8-byte Reload
	movq	9232(%rsp), %rdx        # 8-byte Reload
	movq	9368(%rsp), %rcx        # 8-byte Reload
	movq	9560(%rsp), %r8         # 8-byte Reload
	movq	9384(%rsp), %r9         # 8-byte Reload
	movq	9392(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	9368(%rsp), %rdi        # 8-byte Reload
	movq	9616(%rsp), %rsi        # 8-byte Reload
	vmovsd	9256(%rsp), %xmm0       # 8-byte Reload
	movq	9368(%rsp), %rdx        # 8-byte Reload
	movq	9568(%rsp), %rcx        # 8-byte Reload
	movq	9384(%rsp), %r8         # 8-byte Reload
	movq	9392(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	11104(%rsp), %rax       # 8-byte Reload
	movq	9240(%rsp), %rcx        # 8-byte Reload
	vmovsd	9256(%rsp), %xmm0       # 8-byte Reload
	vmovsd	%xmm0, (%rax,%rcx,8)
.Ltmp286:
	.loc	2 783 0                 # eispack.c:783:0
	movq	9312(%rsp), %rdi        # 8-byte Reload
	movq	9320(%rsp), %rsi        # 8-byte Reload
	movq	9352(%rsp), %rdx        # 8-byte Reload
	movq	9608(%rsp), %rcx        # 8-byte Reload
	movq	9576(%rsp), %r8         # 8-byte Reload
	movl	9340(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	9360(%rsp), %rdi        # 8-byte Reload
	movq	9616(%rsp), %rsi        # 8-byte Reload
	movq	9368(%rsp), %rdx        # 8-byte Reload
	movq	9384(%rsp), %rcx        # 8-byte Reload
	movq	9584(%rsp), %r8         # 8-byte Reload
	movq	9384(%rsp), %r9         # 8-byte Reload
	movq	9392(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	9368(%rsp), %rdi        # 8-byte Reload
	movq	9616(%rsp), %rsi        # 8-byte Reload
	movq	9656(%rsp), %rdx        # 8-byte Reload
	movq	9368(%rsp), %rcx        # 8-byte Reload
	movq	9592(%rsp), %r8         # 8-byte Reload
	movq	9384(%rsp), %r9         # 8-byte Reload
	movq	9392(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	9656(%rsp), %rax        # 8-byte Reload
	addq	$1, %rax
	movq	9328(%rsp), %rdi        # 8-byte Reload
	movq	9616(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	9368(%rsp), %rcx        # 8-byte Reload
	movq	9608(%rsp), %r8         # 8-byte Reload
	movq	9384(%rsp), %r9         # 8-byte Reload
	movq	9392(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 9224(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	9312(%rsp), %rdi        # 8-byte Reload
	movq	9320(%rsp), %rsi        # 8-byte Reload
	movq	9352(%rsp), %rdx        # 8-byte Reload
	movq	9640(%rsp), %rcx        # 8-byte Reload
	movq	9600(%rsp), %r8         # 8-byte Reload
	movl	9340(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	9368(%rsp), %rdi        # 8-byte Reload
	movq	9616(%rsp), %rsi        # 8-byte Reload
	movq	9224(%rsp), %rdx        # 8-byte Reload
	movq	9368(%rsp), %rcx        # 8-byte Reload
	movq	9608(%rsp), %r8         # 8-byte Reload
	movq	9384(%rsp), %r9         # 8-byte Reload
	movq	9392(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	9224(%rsp), %rax        # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	9328(%rsp), %rdi        # 8-byte Reload
	movq	9648(%rsp), %rsi        # 8-byte Reload
	movq	9368(%rsp), %rcx        # 8-byte Reload
	movq	9640(%rsp), %r8         # 8-byte Reload
	movq	9384(%rsp), %r9         # 8-byte Reload
	movq	9392(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 9220(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	9312(%rsp), %rdi        # 8-byte Reload
	movq	9320(%rsp), %rsi        # 8-byte Reload
	movq	9352(%rsp), %rdx        # 8-byte Reload
	movq	9376(%rsp), %rcx        # 8-byte Reload
	movq	9624(%rsp), %r8         # 8-byte Reload
	movl	9340(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	10988(%rsp), %r9d       # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	9360(%rsp), %rdi        # 8-byte Reload
	movq	9648(%rsp), %rsi        # 8-byte Reload
	movq	9368(%rsp), %rcx        # 8-byte Reload
	movq	9632(%rsp), %r8         # 8-byte Reload
	movq	9384(%rsp), %r9         # 8-byte Reload
	movq	9392(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	9220(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	9368(%rsp), %rdi        # 8-byte Reload
	movq	9648(%rsp), %rsi        # 8-byte Reload
	movq	9368(%rsp), %rcx        # 8-byte Reload
	movq	9640(%rsp), %r8         # 8-byte Reload
	movq	9384(%rsp), %r9         # 8-byte Reload
	movq	9392(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	9220(%rsp), %ebp        # 4-byte Reload
	movl	10988(%rsp), %r12d      # 4-byte Reload
	cmpl	%r12d, %ebp
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	9328(%rsp), %rdi        # 8-byte Reload
	movq	9368(%rsp), %rsi        # 8-byte Reload
	movq	9368(%rsp), %rcx        # 8-byte Reload
	movq	9376(%rsp), %r8         # 8-byte Reload
	movq	9384(%rsp), %r9         # 8-byte Reload
	movq	9392(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 9219(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	9312(%rsp), %rdi        # 8-byte Reload
	movq	9320(%rsp), %rsi        # 8-byte Reload
	movq	9352(%rsp), %rdx        # 8-byte Reload
	movq	9344(%rsp), %rcx        # 8-byte Reload
	movq	9360(%rsp), %r8         # 8-byte Reload
	movl	9340(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	9304(%rsp), %rdi        # 8-byte Reload
	movq	9384(%rsp), %rsi        # 8-byte Reload
	movq	9384(%rsp), %rdx        # 8-byte Reload
	movq	9368(%rsp), %rcx        # 8-byte Reload
	movq	9296(%rsp), %r8         # 8-byte Reload
	movq	9384(%rsp), %r9         # 8-byte Reload
	movq	9392(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	9360(%rsp), %rdi        # 8-byte Reload
	movq	9384(%rsp), %rsi        # 8-byte Reload
	movq	9384(%rsp), %rdx        # 8-byte Reload
	movq	9368(%rsp), %rcx        # 8-byte Reload
	movq	9352(%rsp), %r8         # 8-byte Reload
	movq	9384(%rsp), %r9         # 8-byte Reload
	movq	9392(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	9219(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	9368(%rsp), %rdi        # 8-byte Reload
	movq	9368(%rsp), %rsi        # 8-byte Reload
	movq	9368(%rsp), %rcx        # 8-byte Reload
	movq	9376(%rsp), %r8         # 8-byte Reload
	movq	9384(%rsp), %r9         # 8-byte Reload
	movq	9392(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	9219(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	movq	9224(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 10392(%rsp)       # 8-byte Spill
	jne	.LBB9_5
	jmp	.LBB9_7
.Ltmp287:
.LBB9_8:                                # =>This Loop Header: Depth=1
                                        #     Child Loop BB9_9 Depth 2
                                        #     Child Loop BB9_13 Depth 2
                                        #     Child Loop BB9_16 Depth 2
                                        #     Child Loop BB9_18 Depth 2
                                        #     Child Loop BB9_20 Depth 2
                                        #     Child Loop BB9_22 Depth 2
                                        #       Child Loop BB9_24 Depth 3
                                        #     Child Loop BB9_27 Depth 2
                                        #     Child Loop BB9_29 Depth 2
                                        #     Child Loop BB9_31 Depth 2
                                        #       Child Loop BB9_32 Depth 3
                                        #     Child Loop BB9_35 Depth 2
	movl	9664(%rsp), %eax        # 4-byte Reload
	movl	9668(%rsp), %ecx        # 4-byte Reload
	movq	9672(%rsp), %rdx        # 8-byte Reload
	movabsq	$0, %rsi
	vxorps	%xmm0, %xmm0, %xmm0
	movabsq	$1, %rdi
	leaq	.L.str111, %r8
	leaq	.L.str781, %r9
	movabsq	$2, %r10
	leaq	.L.str114, %r11
	movabsq	$3, %rbx
	leaq	.L.str113, %r14
	movabsq	$796, %r15              # imm = 0x31C
	leaq	.L.str57131, %r12
	leaq	.L.str91, %r13
	leaq	.L.str112, %rbp
	movl	%eax, 9212(%rsp)        # 4-byte Spill
	movl	$0, %eax
	movl	%eax, 9208(%rsp)        # 4-byte Spill
	movl	$1, %eax
	movq	%rdx, 9200(%rsp)        # 8-byte Spill
	movabsq	$19134, %rdx            # imm = 0x4ABE
	movq	%rdx, 9192(%rsp)        # 8-byte Spill
	movabsq	$32, %rdx
	movq	%rdx, 9184(%rsp)        # 8-byte Spill
	leaq	.L.str110, %rdx
	movq	%rdx, 9176(%rsp)        # 8-byte Spill
	leaq	.L.str1488, %rdx
	movq	%rdx, 9168(%rsp)        # 8-byte Spill
	movabsq	$46, %rdx
	movq	%rdx, 9160(%rsp)        # 8-byte Spill
	leaq	.L.str108, %rdx
	movq	%rdx, 9152(%rsp)        # 8-byte Spill
	movabsq	$4294967294, %rdx       # imm = 0xFFFFFFFE
	movq	%rdx, 9144(%rsp)        # 8-byte Spill
	movabsq	$790, %rdx              # imm = 0x316
	movq	%rdx, 9136(%rsp)        # 8-byte Spill
	movabsq	$8, %rdx
	movq	%rdx, 9128(%rsp)        # 8-byte Spill
	leaq	.L.str109, %rdx
	movq	%rdx, 9120(%rsp)        # 8-byte Spill
	movabsq	$4294967295, %rdx       # imm = 0xFFFFFFFF
	movq	%rdx, 9112(%rsp)        # 8-byte Spill
	movabsq	$788, %rdx              # imm = 0x314
	movq	%rdx, 9104(%rsp)        # 8-byte Spill
	movabsq	$64, %rdx
	movq	%rdx, 9096(%rsp)        # 8-byte Spill
	leaq	.L.str104, %rdx
	movq	%rdx, 9088(%rsp)        # 8-byte Spill
	leaq	.L.str103, %rdx
	movq	%rdx, 9080(%rsp)        # 8-byte Spill
	movabsq	$-1, %rdx
	movq	%rdx, 9072(%rsp)        # 8-byte Spill
	leaq	.L.str107, %rdx
	movq	%rdx, 9064(%rsp)        # 8-byte Spill
	leaq	.L.str106, %rdx
	movq	%rdx, 9056(%rsp)        # 8-byte Spill
	leaq	.L.str89, %rdx
	movq	%rdx, 9048(%rsp)        # 8-byte Spill
	leaq	.L.str51125, %rdx
	movq	%rdx, 9040(%rsp)        # 8-byte Spill
	leaq	.L.str105, %rdx
	movq	%rdx, 9032(%rsp)        # 8-byte Spill
	movabsq	$48, %rdx
	movq	%rdx, 9024(%rsp)        # 8-byte Spill
	leaq	.L.str34108, %rdx
	.loc	2 788 0                 # eispack.c:788:0
.Ltmp288:
	movq	%rdx, 9016(%rsp)        # 8-byte Spill
	movq	9072(%rsp), %rdx        # 8-byte Reload
	movq	%rdi, 9008(%rsp)        # 8-byte Spill
	movq	%rdx, %rdi
	movq	%rsi, 9000(%rsp)        # 8-byte Spill
	movq	%r12, %rsi
	movq	%r13, %rdx
	movq	%r8, 8992(%rsp)         # 8-byte Spill
	movq	9080(%rsp), %r8         # 8-byte Reload
	movl	%ecx, 8988(%rsp)        # 4-byte Spill
	movq	%r8, %rcx
	movq	9024(%rsp), %r8         # 8-byte Reload
	movl	%eax, 8984(%rsp)        # 4-byte Spill
	movl	9208(%rsp), %eax        # 4-byte Reload
	movq	%r9, 8976(%rsp)         # 8-byte Spill
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movq	%r15, 8968(%rsp)        # 8-byte Spill
	movq	%r12, 8960(%rsp)        # 8-byte Spill
	movq	%r13, 8952(%rsp)        # 8-byte Spill
	vmovsd	%xmm0, 8944(%rsp)       # 8-byte Spill
	movq	%rbp, 8936(%rsp)        # 8-byte Spill
	movq	%r14, 8928(%rsp)        # 8-byte Spill
	movq	%rbx, 8920(%rsp)        # 8-byte Spill
	movq	%r10, 8912(%rsp)        # 8-byte Spill
	movq	%r11, 8904(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	8912(%rsp), %rdi        # 8-byte Reload
	movq	9096(%rsp), %rsi        # 8-byte Reload
	movq	9000(%rsp), %rdx        # 8-byte Reload
	movq	9008(%rsp), %rcx        # 8-byte Reload
	movq	9088(%rsp), %r8         # 8-byte Reload
	movq	9008(%rsp), %r9         # 8-byte Reload
	movq	9032(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	9008(%rsp), %rdi        # 8-byte Reload
	movq	9096(%rsp), %rsi        # 8-byte Reload
	movq	9000(%rsp), %rdx        # 8-byte Reload
	movq	9008(%rsp), %rcx        # 8-byte Reload
	movq	9016(%rsp), %r8         # 8-byte Reload
	movq	9008(%rsp), %r9         # 8-byte Reload
	movq	9048(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	9192(%rsp), %rdi        # 8-byte Reload
	movq	9096(%rsp), %rsi        # 8-byte Reload
	movq	9200(%rsp), %rdx        # 8-byte Reload
	movq	9008(%rsp), %rcx        # 8-byte Reload
	movq	9080(%rsp), %r8         # 8-byte Reload
	movq	9000(%rsp), %r9         # 8-byte Reload
	movq	9048(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	9072(%rsp), %rdi        # 8-byte Reload
	movq	8960(%rsp), %rsi        # 8-byte Reload
	movq	8952(%rsp), %rdx        # 8-byte Reload
	movq	9056(%rsp), %rcx        # 8-byte Reload
	movq	9024(%rsp), %r8         # 8-byte Reload
	movl	9208(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	8912(%rsp), %rdi        # 8-byte Reload
	movq	9184(%rsp), %rsi        # 8-byte Reload
	movq	9000(%rsp), %rdx        # 8-byte Reload
	movq	9008(%rsp), %rcx        # 8-byte Reload
	movq	9064(%rsp), %r8         # 8-byte Reload
	movq	9008(%rsp), %r9         # 8-byte Reload
	movq	9032(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	10988(%rsp), %eax       # 4-byte Reload
	movl	%eax, %eax
	movl	%eax, %edx
	movq	9008(%rsp), %rdi        # 8-byte Reload
	movq	9184(%rsp), %rsi        # 8-byte Reload
	movq	9008(%rsp), %rcx        # 8-byte Reload
	movq	9040(%rsp), %r8         # 8-byte Reload
	movq	9008(%rsp), %r9         # 8-byte Reload
	movq	9048(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	8988(%rsp), %eax        # 4-byte Reload
	movl	%eax, %eax
	movl	%eax, %edx
	movq	9192(%rsp), %rdi        # 8-byte Reload
	movq	9184(%rsp), %rsi        # 8-byte Reload
	movq	9008(%rsp), %rcx        # 8-byte Reload
	movq	9056(%rsp), %r8         # 8-byte Reload
	movq	9000(%rsp), %r9         # 8-byte Reload
	movq	9048(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	9072(%rsp), %rdi        # 8-byte Reload
	movq	8960(%rsp), %rsi        # 8-byte Reload
	movq	8952(%rsp), %rdx        # 8-byte Reload
	movq	9152(%rsp), %rcx        # 8-byte Reload
	movq	9024(%rsp), %r8         # 8-byte Reload
	movl	9208(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	8912(%rsp), %rdi        # 8-byte Reload
	movq	9184(%rsp), %rsi        # 8-byte Reload
	movq	9000(%rsp), %rdx        # 8-byte Reload
	movq	9008(%rsp), %rcx        # 8-byte Reload
	movq	9120(%rsp), %r8         # 8-byte Reload
	movq	9008(%rsp), %r9         # 8-byte Reload
	movq	9032(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	10988(%rsp), %eax       # 4-byte Reload
	movl	%eax, %eax
	movl	%eax, %edx
	movq	9008(%rsp), %rdi        # 8-byte Reload
	movq	9184(%rsp), %rsi        # 8-byte Reload
	movq	9008(%rsp), %rcx        # 8-byte Reload
	movq	9040(%rsp), %r8         # 8-byte Reload
	movq	9008(%rsp), %r9         # 8-byte Reload
	movq	9048(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	9212(%rsp), %eax        # 4-byte Reload
	movl	%eax, %eax
	movl	%eax, %edx
	movq	9192(%rsp), %rdi        # 8-byte Reload
	movq	9184(%rsp), %rsi        # 8-byte Reload
	movq	9008(%rsp), %rcx        # 8-byte Reload
	movq	9152(%rsp), %r8         # 8-byte Reload
	movq	9000(%rsp), %r9         # 8-byte Reload
	movq	9048(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	9104(%rsp), %rdi        # 8-byte Reload
	movq	8960(%rsp), %rsi        # 8-byte Reload
	movq	8952(%rsp), %rdx        # 8-byte Reload
	movq	9064(%rsp), %rcx        # 8-byte Reload
	movq	9128(%rsp), %r8         # 8-byte Reload
	movl	9208(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	8912(%rsp), %rdi        # 8-byte Reload
	movq	9184(%rsp), %rsi        # 8-byte Reload
	movq	9112(%rsp), %rdx        # 8-byte Reload
	movq	9000(%rsp), %rcx        # 8-byte Reload
	movq	9168(%rsp), %r8         # 8-byte Reload
	movq	9000(%rsp), %r9         # 8-byte Reload
	movq	8976(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	8988(%rsp), %eax        # 4-byte Reload
	movl	%eax, %eax
	movl	%eax, %edx
	movq	9008(%rsp), %rdi        # 8-byte Reload
	movq	9184(%rsp), %rsi        # 8-byte Reload
	movq	9008(%rsp), %rcx        # 8-byte Reload
	movq	9056(%rsp), %r8         # 8-byte Reload
	movq	9000(%rsp), %r9         # 8-byte Reload
	movq	8976(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	8988(%rsp), %eax        # 4-byte Reload
	addl	$4294967295, %eax       # imm = 0xFFFFFFFF
	movl	%eax, %esi
	movl	%esi, %edx
	movq	9192(%rsp), %rdi        # 8-byte Reload
	movq	9184(%rsp), %rsi        # 8-byte Reload
	movq	9008(%rsp), %rcx        # 8-byte Reload
	movq	9064(%rsp), %r8         # 8-byte Reload
	movq	9000(%rsp), %r9         # 8-byte Reload
	movq	8976(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, 8900(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	9104(%rsp), %rdi        # 8-byte Reload
	movq	8960(%rsp), %rsi        # 8-byte Reload
	movq	8952(%rsp), %rdx        # 8-byte Reload
	movq	9088(%rsp), %rcx        # 8-byte Reload
	movq	9128(%rsp), %r8         # 8-byte Reload
	movl	9208(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	8912(%rsp), %rdi        # 8-byte Reload
	movq	9096(%rsp), %rsi        # 8-byte Reload
	movq	9072(%rsp), %rdx        # 8-byte Reload
	movq	9000(%rsp), %rcx        # 8-byte Reload
	movq	9168(%rsp), %r8         # 8-byte Reload
	movq	9000(%rsp), %r9         # 8-byte Reload
	movq	8976(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	9008(%rsp), %rdi        # 8-byte Reload
	movq	9096(%rsp), %rsi        # 8-byte Reload
	movq	9200(%rsp), %rdx        # 8-byte Reload
	movq	9008(%rsp), %rcx        # 8-byte Reload
	movq	9080(%rsp), %r8         # 8-byte Reload
	movq	9000(%rsp), %r9         # 8-byte Reload
	movq	8976(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	9200(%rsp), %rcx        # 8-byte Reload
	addq	$-1, %rcx
	movq	9192(%rsp), %rdi        # 8-byte Reload
	movq	9096(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	9008(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 8888(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	9088(%rsp), %r8         # 8-byte Reload
	movq	9000(%rsp), %r9         # 8-byte Reload
	movq	8976(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	9104(%rsp), %rdi        # 8-byte Reload
	movq	8960(%rsp), %rsi        # 8-byte Reload
	movq	8952(%rsp), %rdx        # 8-byte Reload
	movq	9120(%rsp), %rcx        # 8-byte Reload
	movq	9128(%rsp), %r8         # 8-byte Reload
	movl	9208(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	8912(%rsp), %rdi        # 8-byte Reload
	movq	9184(%rsp), %rsi        # 8-byte Reload
	movq	9112(%rsp), %rdx        # 8-byte Reload
	movq	9000(%rsp), %rcx        # 8-byte Reload
	movq	9168(%rsp), %r8         # 8-byte Reload
	movq	9000(%rsp), %r9         # 8-byte Reload
	movq	8976(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	9212(%rsp), %eax        # 4-byte Reload
	movl	%eax, %eax
	movl	%eax, %edx
	movq	9008(%rsp), %rdi        # 8-byte Reload
	movq	9184(%rsp), %rsi        # 8-byte Reload
	movq	9008(%rsp), %rcx        # 8-byte Reload
	movq	9152(%rsp), %r8         # 8-byte Reload
	movq	9000(%rsp), %r9         # 8-byte Reload
	movq	8976(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	9212(%rsp), %eax        # 4-byte Reload
	addl	$4294967295, %eax       # imm = 0xFFFFFFFF
	.loc	2 790 0                 # eispack.c:790:0
.Ltmp289:
	movl	%eax, %esi
	movl	%esi, %edx
	movq	9192(%rsp), %rdi        # 8-byte Reload
	movq	9184(%rsp), %rsi        # 8-byte Reload
	movq	9008(%rsp), %rcx        # 8-byte Reload
	movq	9120(%rsp), %r8         # 8-byte Reload
	movq	9000(%rsp), %r9         # 8-byte Reload
	movq	8976(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, 8884(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	9136(%rsp), %rdi        # 8-byte Reload
	movq	8960(%rsp), %rsi        # 8-byte Reload
	movq	8952(%rsp), %rdx        # 8-byte Reload
	movq	9176(%rsp), %rcx        # 8-byte Reload
	movq	9128(%rsp), %r8         # 8-byte Reload
	movl	9208(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	8912(%rsp), %rdi        # 8-byte Reload
	movq	9184(%rsp), %rsi        # 8-byte Reload
	movq	9144(%rsp), %rdx        # 8-byte Reload
	movq	9000(%rsp), %rcx        # 8-byte Reload
	movq	9168(%rsp), %r8         # 8-byte Reload
	movq	9000(%rsp), %r9         # 8-byte Reload
	movq	8976(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	9212(%rsp), %eax        # 4-byte Reload
	movl	%eax, %eax
	movl	%eax, %edx
	movq	9008(%rsp), %rdi        # 8-byte Reload
	movq	9184(%rsp), %rsi        # 8-byte Reload
	movq	9008(%rsp), %rcx        # 8-byte Reload
	movq	9152(%rsp), %r8         # 8-byte Reload
	movq	9000(%rsp), %r9         # 8-byte Reload
	movq	8976(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	9212(%rsp), %eax        # 4-byte Reload
	addl	$4294967294, %eax       # imm = 0xFFFFFFFE
	movl	%eax, %esi
	movl	%esi, %edx
	movq	9192(%rsp), %rdi        # 8-byte Reload
	movq	9184(%rsp), %rsi        # 8-byte Reload
	movq	9008(%rsp), %rcx        # 8-byte Reload
	movq	9176(%rsp), %r8         # 8-byte Reload
	movq	9000(%rsp), %r9         # 8-byte Reload
	movq	8976(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, 8880(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
.Ltmp290:
	#DEBUG_VALUE: tred1:l <- [RSP+8880]
	#DEBUG_VALUE: tred1:h <- 0.000000e+00
	#DEBUG_VALUE: tred1:scale <- 0.000000e+00
	#DEBUG_VALUE: tred1:k <- 0
	.loc	2 796 0                 # eispack.c:796:0
	movq	8968(%rsp), %rdi        # 8-byte Reload
	movq	8960(%rsp), %rsi        # 8-byte Reload
	movq	8952(%rsp), %rdx        # 8-byte Reload
	movq	8992(%rsp), %rcx        # 8-byte Reload
	movq	9160(%rsp), %r8         # 8-byte Reload
	movl	9208(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	8912(%rsp), %rdi        # 8-byte Reload
	movq	9184(%rsp), %rsi        # 8-byte Reload
	movq	9000(%rsp), %rdx        # 8-byte Reload
	movq	9000(%rsp), %rcx        # 8-byte Reload
	movq	9168(%rsp), %r8         # 8-byte Reload
	movq	9000(%rsp), %r9         # 8-byte Reload
	movq	8976(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	8880(%rsp), %eax        # 4-byte Reload
	movl	%eax, %eax
	movl	%eax, %edx
	movq	9008(%rsp), %rdi        # 8-byte Reload
	movq	9184(%rsp), %rsi        # 8-byte Reload
	movq	9008(%rsp), %rcx        # 8-byte Reload
	movq	9176(%rsp), %r8         # 8-byte Reload
	movq	9000(%rsp), %r9         # 8-byte Reload
	movq	8976(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	8880(%rsp), %eax        # 4-byte Reload
	cmpl	$0, %eax
	setl	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	9192(%rsp), %rdi        # 8-byte Reload
	movq	9008(%rsp), %rsi        # 8-byte Reload
	movq	9008(%rsp), %rcx        # 8-byte Reload
	movq	8992(%rsp), %r8         # 8-byte Reload
	movq	9000(%rsp), %r9         # 8-byte Reload
	movq	8976(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 8879(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	8968(%rsp), %rdi        # 8-byte Reload
	movq	8960(%rsp), %rsi        # 8-byte Reload
	movq	8952(%rsp), %rdx        # 8-byte Reload
	movq	8936(%rsp), %rcx        # 8-byte Reload
	movq	8912(%rsp), %r8         # 8-byte Reload
	movl	9208(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	8920(%rsp), %rdi        # 8-byte Reload
	movq	9000(%rsp), %rsi        # 8-byte Reload
	movq	9000(%rsp), %rdx        # 8-byte Reload
	movq	9008(%rsp), %rcx        # 8-byte Reload
	movq	8928(%rsp), %r8         # 8-byte Reload
	movq	9000(%rsp), %r9         # 8-byte Reload
	movq	8976(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	8912(%rsp), %rdi        # 8-byte Reload
	movq	9000(%rsp), %rsi        # 8-byte Reload
	movq	9000(%rsp), %rdx        # 8-byte Reload
	movq	9008(%rsp), %rcx        # 8-byte Reload
	movq	8904(%rsp), %r8         # 8-byte Reload
	movq	9000(%rsp), %r9         # 8-byte Reload
	movq	8976(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	8879(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, %edx
	movq	9008(%rsp), %rdi        # 8-byte Reload
	movq	9008(%rsp), %rsi        # 8-byte Reload
	movq	9008(%rsp), %rcx        # 8-byte Reload
	movq	8992(%rsp), %r8         # 8-byte Reload
	movq	9000(%rsp), %r9         # 8-byte Reload
	movq	8976(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	8879(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	movq	9000(%rsp), %rcx        # 8-byte Reload
	vmovsd	8944(%rsp), %xmm0       # 8-byte Reload
	movq	%rcx, 8864(%rsp)        # 8-byte Spill
	vmovsd	%xmm0, 8856(%rsp)       # 8-byte Spill
	jne	.LBB9_14
.Ltmp291:
.LBB9_9:                                # %.lr.ph
                                        #   Parent Loop BB9_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vmovsd	8856(%rsp), %xmm0       # 8-byte Reload
	movq	8864(%rsp), %rax        # 8-byte Reload
	movabsq	$1, %rcx
	leaq	.L.str123, %rdx
	movabsq	$0, %rsi
	leaq	.L.str781, %rdi
	movabsq	$2, %r8
	leaq	.L.str114, %r9
	movabsq	$3, %r10
	leaq	.L.str125, %r11
	movabsq	$796, %rbx              # imm = 0x31C
	leaq	.L.str57131, %r14
	leaq	.L.str124, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 8848(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 8840(%rsp)        # 8-byte Spill
	leaq	.L.str122, %rax
	movq	%rax, 8832(%rsp)        # 8-byte Spill
	leaq	.L.str107, %rax
	movq	%rax, 8824(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 8816(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 8808(%rsp)        # 8-byte Spill
	leaq	.L.str116, %rax
	movq	%rax, 8800(%rsp)        # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, 8792(%rsp)        # 8-byte Spill
	leaq	.L.str115, %rax
	movq	%rax, 8784(%rsp)        # 8-byte Spill
	leaq	.L.str1488, %rax
	movq	%rax, 8776(%rsp)        # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, 8768(%rsp)        # 8-byte Spill
	leaq	.L.str118, %rax
	movq	%rax, 8760(%rsp)        # 8-byte Spill
	leaq	.L.str117, %rax
	movq	%rax, 8752(%rsp)        # 8-byte Spill
	leaq	.L.str121, %rax
	movq	%rax, 8744(%rsp)        # 8-byte Spill
	movabsq	$798, %rax              # imm = 0x31E
	movq	%rax, 8736(%rsp)        # 8-byte Spill
	movabsq	$9, %rax
	movq	%rax, 8728(%rsp)        # 8-byte Spill
	leaq	.L.str120, %rax
	movq	%rax, 8720(%rsp)        # 8-byte Spill
	leaq	fabs, %rax
	movq	%rax, 8712(%rsp)        # 8-byte Spill
	leaq	.L.str680, %rax
	movq	%rax, 8704(%rsp)        # 8-byte Spill
	movabsq	$49, %rax
	movq	%rax, 8696(%rsp)        # 8-byte Spill
	leaq	.L.str119, %rax
	movq	%rax, 8688(%rsp)        # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, 8680(%rsp)        # 8-byte Spill
	leaq	.L.str82, %rax
	movq	%rax, 8672(%rsp)        # 8-byte Spill
	movabsq	$29, %rax
	vxorps	%xmm1, %xmm1, %xmm1
	movq	%rax, 8664(%rsp)        # 8-byte Spill
	leaq	.L.str91, %rax
	movq	%rax, 8656(%rsp)        # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 8648(%rsp)        # 8-byte Spill
	movabsq	$48, %rax
	.loc	2 798 0                 # eispack.c:798:0
.Ltmp292:
	movq	%rax, 8640(%rsp)        # 8-byte Spill
	movq	8648(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 8632(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 8624(%rsp)        # 8-byte Spill
	movq	%r14, %rsi
	movq	%rdx, 8616(%rsp)        # 8-byte Spill
	movq	%r9, %rdx
	movq	8784(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 8608(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	8640(%rsp), %rax        # 8-byte Reload
	movq	%r8, 8600(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 8592(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	vmovsd	%xmm0, 8584(%rsp)       # 8-byte Spill
	movl	%ebp, 8580(%rsp)        # 4-byte Spill
	movl	%r12d, 8576(%rsp)       # 4-byte Spill
	movq	%r13, 8568(%rsp)        # 8-byte Spill
	vmovsd	%xmm1, 8560(%rsp)       # 8-byte Spill
	movq	%r15, 8552(%rsp)        # 8-byte Spill
	movq	%r14, 8544(%rsp)        # 8-byte Spill
	movq	%r10, 8536(%rsp)        # 8-byte Spill
	movq	%r11, 8528(%rsp)        # 8-byte Spill
	movq	%rbx, 8520(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	8600(%rsp), %rdi        # 8-byte Reload
	movq	8808(%rsp), %rsi        # 8-byte Reload
	movq	8624(%rsp), %rdx        # 8-byte Reload
	movq	8624(%rsp), %rcx        # 8-byte Reload
	movq	8776(%rsp), %r8         # 8-byte Reload
	movq	8608(%rsp), %r9         # 8-byte Reload
	movq	8656(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	8608(%rsp), %rdi        # 8-byte Reload
	movq	8808(%rsp), %rsi        # 8-byte Reload
	movq	8624(%rsp), %rdx        # 8-byte Reload
	movq	8608(%rsp), %rcx        # 8-byte Reload
	movq	8800(%rsp), %r8         # 8-byte Reload
	movq	8608(%rsp), %r9         # 8-byte Reload
	movq	8592(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	8568(%rsp), %rdi        # 8-byte Reload
	movq	8808(%rsp), %rsi        # 8-byte Reload
	movq	8848(%rsp), %rdx        # 8-byte Reload
	movq	8608(%rsp), %rcx        # 8-byte Reload
	movq	8784(%rsp), %r8         # 8-byte Reload
	movq	8624(%rsp), %r9         # 8-byte Reload
	movq	8592(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	8648(%rsp), %rdi        # 8-byte Reload
	movq	8544(%rsp), %rsi        # 8-byte Reload
	movq	8592(%rsp), %rdx        # 8-byte Reload
	movq	8752(%rsp), %rcx        # 8-byte Reload
	movq	8640(%rsp), %r8         # 8-byte Reload
	movl	8580(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	8600(%rsp), %rdi        # 8-byte Reload
	movq	8808(%rsp), %rsi        # 8-byte Reload
	vmovsd	8560(%rsp), %xmm0       # 8-byte Reload
	movq	8624(%rsp), %rdx        # 8-byte Reload
	movq	8776(%rsp), %rcx        # 8-byte Reload
	movq	8608(%rsp), %r8         # 8-byte Reload
	movq	8656(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	8608(%rsp), %rdi        # 8-byte Reload
	movq	8808(%rsp), %rsi        # 8-byte Reload
	movq	8624(%rsp), %rdx        # 8-byte Reload
	movq	8608(%rsp), %rcx        # 8-byte Reload
	movq	8760(%rsp), %r8         # 8-byte Reload
	movq	8608(%rsp), %r9         # 8-byte Reload
	movq	8592(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	8568(%rsp), %rdi        # 8-byte Reload
	movq	8808(%rsp), %rsi        # 8-byte Reload
	vmovsd	8584(%rsp), %xmm0       # 8-byte Reload
	movq	8608(%rsp), %rdx        # 8-byte Reload
	movq	8752(%rsp), %rcx        # 8-byte Reload
	movq	8624(%rsp), %r8         # 8-byte Reload
	movq	8592(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	8736(%rsp), %rdi        # 8-byte Reload
	movq	8544(%rsp), %rsi        # 8-byte Reload
	movq	8592(%rsp), %rdx        # 8-byte Reload
	movq	8688(%rsp), %rcx        # 8-byte Reload
	movq	8664(%rsp), %r8         # 8-byte Reload
	movl	8580(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	8600(%rsp), %rdi        # 8-byte Reload
	movq	8808(%rsp), %rsi        # 8-byte Reload
	movq	8848(%rsp), %rdx        # 8-byte Reload
	movq	8608(%rsp), %rcx        # 8-byte Reload
	movq	8784(%rsp), %r8         # 8-byte Reload
	movq	8624(%rsp), %r9         # 8-byte Reload
	movq	8632(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	8608(%rsp), %rdi        # 8-byte Reload
	movq	8808(%rsp), %rsi        # 8-byte Reload
	movq	10968(%rsp), %rdx       # 8-byte Reload
	movq	8608(%rsp), %rcx        # 8-byte Reload
	movq	8672(%rsp), %r8         # 8-byte Reload
	movq	8624(%rsp), %r9         # 8-byte Reload
	movq	8632(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	8848(%rsp), %rax        # 8-byte Reload
	shlq	$3, %rax
	movq	10968(%rsp), %rcx       # 8-byte Reload
	addq	%rax, %rcx
	movq	8568(%rsp), %rdi        # 8-byte Reload
	movq	8808(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	8608(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 8512(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	8688(%rsp), %r8         # 8-byte Reload
	movq	8624(%rsp), %r9         # 8-byte Reload
	movq	8632(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	8736(%rsp), %rdi        # 8-byte Reload
	movq	8544(%rsp), %rsi        # 8-byte Reload
	movq	8592(%rsp), %rdx        # 8-byte Reload
	movq	8720(%rsp), %rcx        # 8-byte Reload
	movq	8680(%rsp), %r8         # 8-byte Reload
	movl	8580(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	8608(%rsp), %rdi        # 8-byte Reload
	movq	8808(%rsp), %rsi        # 8-byte Reload
	movq	8512(%rsp), %rdx        # 8-byte Reload
	movq	8608(%rsp), %rcx        # 8-byte Reload
	movq	8688(%rsp), %r8         # 8-byte Reload
	movq	8624(%rsp), %r9         # 8-byte Reload
	movq	8632(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	10968(%rsp), %rax       # 8-byte Reload
	movq	8848(%rsp), %rcx        # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
	movq	8568(%rsp), %rdi        # 8-byte Reload
	movq	8808(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 8504(%rsp)       # 8-byte Spill
	movq	8608(%rsp), %rdx        # 8-byte Reload
	movq	8720(%rsp), %rcx        # 8-byte Reload
	movq	8624(%rsp), %r8         # 8-byte Reload
	movq	8632(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	8736(%rsp), %rdi        # 8-byte Reload
	movq	8544(%rsp), %rsi        # 8-byte Reload
	movq	8592(%rsp), %rdx        # 8-byte Reload
	movq	8744(%rsp), %rcx        # 8-byte Reload
	movq	8696(%rsp), %r8         # 8-byte Reload
	movl	8580(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	8600(%rsp), %rdi        # 8-byte Reload
	movq	8808(%rsp), %rsi        # 8-byte Reload
	movq	8712(%rsp), %rdx        # 8-byte Reload
	movq	8608(%rsp), %rcx        # 8-byte Reload
	movq	8704(%rsp), %r8         # 8-byte Reload
	movq	8624(%rsp), %r9         # 8-byte Reload
	movq	8632(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	8608(%rsp), %rdi        # 8-byte Reload
	movq	8808(%rsp), %rsi        # 8-byte Reload
	vmovsd	8504(%rsp), %xmm0       # 8-byte Reload
	movq	8608(%rsp), %rdx        # 8-byte Reload
	movq	8720(%rsp), %rcx        # 8-byte Reload
	movq	8624(%rsp), %r8         # 8-byte Reload
	movq	8632(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	.LCPI9_0(%rip), %xmm0
	vmovsd	8504(%rsp), %xmm1       # 8-byte Reload
	vandpd	%xmm0, %xmm1, %xmm0
	movq	8568(%rsp), %rdi        # 8-byte Reload
	movq	8808(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 8496(%rsp)       # 8-byte Spill
	movq	8608(%rsp), %rdx        # 8-byte Reload
	movq	8744(%rsp), %rcx        # 8-byte Reload
	movq	8624(%rsp), %r8         # 8-byte Reload
	movq	8632(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	8736(%rsp), %rdi        # 8-byte Reload
	movq	8544(%rsp), %rsi        # 8-byte Reload
	movq	8592(%rsp), %rdx        # 8-byte Reload
	movq	8760(%rsp), %rcx        # 8-byte Reload
	movq	8728(%rsp), %r8         # 8-byte Reload
	movl	8580(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	8600(%rsp), %rdi        # 8-byte Reload
	movq	8808(%rsp), %rsi        # 8-byte Reload
	vmovsd	8496(%rsp), %xmm0       # 8-byte Reload
	movq	8608(%rsp), %rdx        # 8-byte Reload
	movq	8744(%rsp), %rcx        # 8-byte Reload
	movq	8624(%rsp), %r8         # 8-byte Reload
	movq	8632(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	8608(%rsp), %rdi        # 8-byte Reload
	movq	8808(%rsp), %rsi        # 8-byte Reload
	vmovsd	8584(%rsp), %xmm0       # 8-byte Reload
	movq	8608(%rsp), %rdx        # 8-byte Reload
	movq	8752(%rsp), %rcx        # 8-byte Reload
	movq	8624(%rsp), %r8         # 8-byte Reload
	movq	8632(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	8584(%rsp), %xmm0       # 8-byte Reload
	vmovsd	8496(%rsp), %xmm1       # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
	movq	8568(%rsp), %rdi        # 8-byte Reload
	movq	8808(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	8608(%rsp), %rdx        # 8-byte Reload
	movq	8760(%rsp), %rcx        # 8-byte Reload
	movq	8624(%rsp), %r8         # 8-byte Reload
	movq	8632(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 8488(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
.Ltmp293:
	#DEBUG_VALUE: tred1:scale <- [RSP+8488]
	.loc	2 796 0                 # eispack.c:796:0
	movq	8520(%rsp), %rdi        # 8-byte Reload
	movq	8544(%rsp), %rsi        # 8-byte Reload
	movq	8592(%rsp), %rdx        # 8-byte Reload
	movq	8800(%rsp), %rcx        # 8-byte Reload
	movq	8768(%rsp), %r8         # 8-byte Reload
	movl	8580(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	8600(%rsp), %rdi        # 8-byte Reload
	movq	8808(%rsp), %rsi        # 8-byte Reload
	movq	8608(%rsp), %rdx        # 8-byte Reload
	movq	8624(%rsp), %rcx        # 8-byte Reload
	movq	8776(%rsp), %r8         # 8-byte Reload
	movq	8624(%rsp), %r9         # 8-byte Reload
	movq	8632(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	8608(%rsp), %rdi        # 8-byte Reload
	movq	8808(%rsp), %rsi        # 8-byte Reload
	movq	8848(%rsp), %rdx        # 8-byte Reload
	movq	8608(%rsp), %rcx        # 8-byte Reload
	movq	8784(%rsp), %r8         # 8-byte Reload
	movq	8624(%rsp), %r9         # 8-byte Reload
	movq	8632(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	8848(%rsp), %rax        # 8-byte Reload
	addq	$1, %rax
	movq	8568(%rsp), %rdi        # 8-byte Reload
	movq	8808(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	8608(%rsp), %rcx        # 8-byte Reload
	movq	8800(%rsp), %r8         # 8-byte Reload
	movq	8624(%rsp), %r9         # 8-byte Reload
	movq	8632(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 8480(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	8520(%rsp), %rdi        # 8-byte Reload
	movq	8544(%rsp), %rsi        # 8-byte Reload
	movq	8592(%rsp), %rdx        # 8-byte Reload
	movq	8832(%rsp), %rcx        # 8-byte Reload
	movq	8792(%rsp), %r8         # 8-byte Reload
	movl	8580(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	8608(%rsp), %rdi        # 8-byte Reload
	movq	8808(%rsp), %rsi        # 8-byte Reload
	movq	8480(%rsp), %rdx        # 8-byte Reload
	movq	8608(%rsp), %rcx        # 8-byte Reload
	movq	8800(%rsp), %r8         # 8-byte Reload
	movq	8624(%rsp), %r9         # 8-byte Reload
	movq	8632(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	8480(%rsp), %rax        # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	8568(%rsp), %rdi        # 8-byte Reload
	movq	8840(%rsp), %rsi        # 8-byte Reload
	movq	8608(%rsp), %rcx        # 8-byte Reload
	movq	8832(%rsp), %r8         # 8-byte Reload
	movq	8624(%rsp), %r9         # 8-byte Reload
	movq	8632(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 8476(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	8520(%rsp), %rdi        # 8-byte Reload
	movq	8544(%rsp), %rsi        # 8-byte Reload
	movq	8592(%rsp), %rdx        # 8-byte Reload
	movq	8616(%rsp), %rcx        # 8-byte Reload
	movq	8816(%rsp), %r8         # 8-byte Reload
	movl	8580(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	8900(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	8600(%rsp), %rdi        # 8-byte Reload
	movq	8840(%rsp), %rsi        # 8-byte Reload
	movq	8608(%rsp), %rcx        # 8-byte Reload
	movq	8824(%rsp), %r8         # 8-byte Reload
	movq	8624(%rsp), %r9         # 8-byte Reload
	movq	8632(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	8476(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	8608(%rsp), %rdi        # 8-byte Reload
	movq	8840(%rsp), %rsi        # 8-byte Reload
	movq	8608(%rsp), %rcx        # 8-byte Reload
	movq	8832(%rsp), %r8         # 8-byte Reload
	movq	8624(%rsp), %r9         # 8-byte Reload
	movq	8632(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	8476(%rsp), %ebp        # 4-byte Reload
	movl	8900(%rsp), %r12d       # 4-byte Reload
	cmpl	%r12d, %ebp
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	8568(%rsp), %rdi        # 8-byte Reload
	movq	8608(%rsp), %rsi        # 8-byte Reload
	movq	8608(%rsp), %rcx        # 8-byte Reload
	movq	8616(%rsp), %r8         # 8-byte Reload
	movq	8624(%rsp), %r9         # 8-byte Reload
	movq	8632(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 8475(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	8520(%rsp), %rdi        # 8-byte Reload
	movq	8544(%rsp), %rsi        # 8-byte Reload
	movq	8592(%rsp), %rdx        # 8-byte Reload
	movq	8552(%rsp), %rcx        # 8-byte Reload
	movq	8600(%rsp), %r8         # 8-byte Reload
	movl	8580(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	8536(%rsp), %rdi        # 8-byte Reload
	movq	8624(%rsp), %rsi        # 8-byte Reload
	movq	8624(%rsp), %rdx        # 8-byte Reload
	movq	8608(%rsp), %rcx        # 8-byte Reload
	movq	8528(%rsp), %r8         # 8-byte Reload
	movq	8624(%rsp), %r9         # 8-byte Reload
	movq	8632(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	8600(%rsp), %rdi        # 8-byte Reload
	movq	8624(%rsp), %rsi        # 8-byte Reload
	movq	8624(%rsp), %rdx        # 8-byte Reload
	movq	8608(%rsp), %rcx        # 8-byte Reload
	movq	8592(%rsp), %r8         # 8-byte Reload
	movq	8624(%rsp), %r9         # 8-byte Reload
	movq	8632(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	8475(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	8608(%rsp), %rdi        # 8-byte Reload
	movq	8608(%rsp), %rsi        # 8-byte Reload
	movq	8608(%rsp), %rcx        # 8-byte Reload
	movq	8616(%rsp), %r8         # 8-byte Reload
	movq	8624(%rsp), %r9         # 8-byte Reload
	movq	8632(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	8475(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	movq	8480(%rsp), %rcx        # 8-byte Reload
	vmovsd	8488(%rsp), %xmm0       # 8-byte Reload
	movq	%rcx, 8864(%rsp)        # 8-byte Spill
	vmovsd	%xmm0, 8856(%rsp)       # 8-byte Spill
	jne	.LBB9_10
	jmp	.LBB9_9
.Ltmp294:
.LBB9_10:                               # %._crit_edge
                                        #   in Loop: Header=BB9_8 Depth=1
	movabsq	$1, %rax
	leaq	.L.str126, %rcx
	movabsq	$0, %rdx
	leaq	.L.str781, %rsi
	movabsq	$2, %rdi
	leaq	.L.str130, %r8
	movabsq	$3, %r9
	leaq	.L.str129, %r10
	movabsq	$801, %r11              # imm = 0x321
	leaq	.L.str57131, %rbx
	leaq	.L.str125, %r14
	leaq	.L.str128, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 8464(%rsp)        # 8-byte Spill
	leaq	.L.str127, %rax
	movq	%rax, 8456(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 8448(%rsp)        # 8-byte Spill
	leaq	.L.str110, %rax
	movq	%rax, 8440(%rsp)        # 8-byte Spill
	leaq	.L.str1488, %rax
	movq	%rax, 8432(%rsp)        # 8-byte Spill
	movabsq	$803, %rax              # imm = 0x323
	movq	%rax, 8424(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	vxorps	%xmm0, %xmm0, %xmm0
	movq	%rax, 8416(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 8408(%rsp)        # 8-byte Spill
	leaq	.L.str118, %rax
	movq	%rax, 8400(%rsp)        # 8-byte Spill
	movabsq	$47, %rax
	.loc	2 801 0                 # eispack.c:801:0
.Ltmp295:
	movq	%rdi, 8392(%rsp)        # 8-byte Spill
	movq	%r11, %rdi
	movq	%rsi, 8384(%rsp)        # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, 8376(%rsp)        # 8-byte Spill
	movq	%r14, %rdx
	movq	%rcx, 8368(%rsp)        # 8-byte Spill
	movq	%r8, 8360(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 8352(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r15, 8344(%rsp)        # 8-byte Spill
	movl	%ebp, 8340(%rsp)        # 4-byte Spill
	movl	%r12d, 8336(%rsp)       # 4-byte Spill
	movq	%r13, 8328(%rsp)        # 8-byte Spill
	vmovsd	%xmm0, 8320(%rsp)       # 8-byte Spill
	movq	%r14, 8312(%rsp)        # 8-byte Spill
	movq	%rbx, 8304(%rsp)        # 8-byte Spill
	movq	%r10, 8296(%rsp)        # 8-byte Spill
	movq	%r11, 8288(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	8392(%rsp), %rdi        # 8-byte Reload
	movq	8408(%rsp), %rsi        # 8-byte Reload
	vmovsd	8320(%rsp), %xmm0       # 8-byte Reload
	movq	8376(%rsp), %rdx        # 8-byte Reload
	movq	8432(%rsp), %rcx        # 8-byte Reload
	movq	8376(%rsp), %r8         # 8-byte Reload
	movq	8384(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	8464(%rsp), %rdi        # 8-byte Reload
	movq	8408(%rsp), %rsi        # 8-byte Reload
	vmovsd	8488(%rsp), %xmm0       # 8-byte Reload
	movq	8464(%rsp), %rdx        # 8-byte Reload
	movq	8400(%rsp), %rcx        # 8-byte Reload
	movq	8376(%rsp), %r8         # 8-byte Reload
	movq	8384(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	8488(%rsp), %xmm0       # 8-byte Reload
	vmovsd	8320(%rsp), %xmm1       # 8-byte Reload
	vucomisd	%xmm1, %xmm0
	sete	%al
	setnp	%cl
	andb	%al, %cl
	.loc	2 803 0                 # eispack.c:803:0
.Ltmp296:
	movb	%cl, %al
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	8328(%rsp), %rdi        # 8-byte Reload
	movq	8464(%rsp), %rsi        # 8-byte Reload
	movq	8464(%rsp), %r8         # 8-byte Reload
	movb	%cl, 8287(%rsp)         # 1-byte Spill
	movq	%r8, %rcx
	movq	8368(%rsp), %r8         # 8-byte Reload
	movq	8376(%rsp), %r9         # 8-byte Reload
	movq	8384(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	8424(%rsp), %rdi        # 8-byte Reload
	movq	8304(%rsp), %rsi        # 8-byte Reload
	movq	8312(%rsp), %rdx        # 8-byte Reload
	movq	8456(%rsp), %rcx        # 8-byte Reload
	movq	8416(%rsp), %r8         # 8-byte Reload
	movl	8340(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	8392(%rsp), %rdi        # 8-byte Reload
	movq	8448(%rsp), %rsi        # 8-byte Reload
	movq	8376(%rsp), %rdx        # 8-byte Reload
	movq	8376(%rsp), %rcx        # 8-byte Reload
	movq	8432(%rsp), %r8         # 8-byte Reload
	movq	8376(%rsp), %r9         # 8-byte Reload
	movq	8384(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	8880(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	8464(%rsp), %rdi        # 8-byte Reload
	movq	8448(%rsp), %rsi        # 8-byte Reload
	movq	8464(%rsp), %rcx        # 8-byte Reload
	movq	8440(%rsp), %r8         # 8-byte Reload
	movq	8376(%rsp), %r9         # 8-byte Reload
	movq	8384(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	8880(%rsp), %ebp        # 4-byte Reload
	cmpl	$0, %ebp
	setl	%al
.Ltmp297:
	.loc	2 801 0                 # eispack.c:801:0
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %r12d
	movl	%r12d, %edx
	movq	8328(%rsp), %rdi        # 8-byte Reload
	movq	8464(%rsp), %rsi        # 8-byte Reload
	movq	8464(%rsp), %rcx        # 8-byte Reload
	movq	8456(%rsp), %r8         # 8-byte Reload
	movq	8376(%rsp), %r9         # 8-byte Reload
	movq	8384(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 8286(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	8288(%rsp), %rdi        # 8-byte Reload
	movq	8304(%rsp), %rsi        # 8-byte Reload
	movq	8312(%rsp), %rdx        # 8-byte Reload
	movq	8344(%rsp), %rcx        # 8-byte Reload
	movq	8392(%rsp), %r8         # 8-byte Reload
	movl	8340(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	8352(%rsp), %rdi        # 8-byte Reload
	movq	8376(%rsp), %rsi        # 8-byte Reload
	movq	8376(%rsp), %rdx        # 8-byte Reload
	movq	8464(%rsp), %rcx        # 8-byte Reload
	movq	8296(%rsp), %r8         # 8-byte Reload
	movq	8376(%rsp), %r9         # 8-byte Reload
	movq	8384(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	8392(%rsp), %rdi        # 8-byte Reload
	movq	8376(%rsp), %rsi        # 8-byte Reload
	movq	8376(%rsp), %rdx        # 8-byte Reload
	movq	8464(%rsp), %rcx        # 8-byte Reload
	movq	8360(%rsp), %r8         # 8-byte Reload
	movq	8376(%rsp), %r9         # 8-byte Reload
	movq	8384(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	8287(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	8464(%rsp), %rdi        # 8-byte Reload
	movq	8464(%rsp), %rsi        # 8-byte Reload
	movq	8464(%rsp), %rcx        # 8-byte Reload
	movq	8368(%rsp), %r8         # 8-byte Reload
	movq	8376(%rsp), %r9         # 8-byte Reload
	movq	8384(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	8287(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB9_11
	jmp	.LBB9_12
.LBB9_11:                               # %.preheader43
                                        #   in Loop: Header=BB9_8 Depth=1
	movabsq	$0, %rax
	movabsq	$1, %rcx
	leaq	.L.str127, %r8
	leaq	.L.str781, %rdx
	movabsq	$2, %rsi
	leaq	.L.str132, %rdi
	movabsq	$3, %r9
	leaq	.L.str113, %r10
	movabsq	$803, %r11              # imm = 0x323
	leaq	.L.str57131, %rbx
	leaq	.L.str129, %r14
	leaq	.L.str131, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	.loc	2 803 0                 # eispack.c:803:0
.Ltmp298:
	movq	%rdi, 8272(%rsp)        # 8-byte Spill
	movq	%r11, %rdi
	movq	%rsi, 8264(%rsp)        # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, 8256(%rsp)        # 8-byte Spill
	movq	%r14, %rdx
	movq	%rcx, 8248(%rsp)        # 8-byte Spill
	movq	%r15, %rcx
	movq	8264(%rsp), %r11        # 8-byte Reload
	movq	%r8, 8240(%rsp)         # 8-byte Spill
	movq	%r11, %r8
	movq	%r9, 8232(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%rax, 8224(%rsp)        # 8-byte Spill
	movq	%r10, 8216(%rsp)        # 8-byte Spill
	movl	%r12d, 8212(%rsp)       # 4-byte Spill
	callq	trace_logger_log0
	movq	8232(%rsp), %rdi        # 8-byte Reload
	movq	8224(%rsp), %rsi        # 8-byte Reload
	movq	8224(%rsp), %rdx        # 8-byte Reload
	movq	8248(%rsp), %rcx        # 8-byte Reload
	movq	8216(%rsp), %r8         # 8-byte Reload
	movq	8224(%rsp), %r9         # 8-byte Reload
	movq	8256(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	8264(%rsp), %rdi        # 8-byte Reload
	movq	8224(%rsp), %rsi        # 8-byte Reload
	movq	8224(%rsp), %rdx        # 8-byte Reload
	movq	8248(%rsp), %rcx        # 8-byte Reload
	movq	8272(%rsp), %r8         # 8-byte Reload
	movq	8224(%rsp), %r9         # 8-byte Reload
	movq	8256(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movb	8286(%rsp), %r13b       # 1-byte Reload
	andb	$1, %r13b
	movzbl	%r13b, %ebp
	movl	%ebp, %edx
	movq	8248(%rsp), %rdi        # 8-byte Reload
	movq	8248(%rsp), %rsi        # 8-byte Reload
	movq	8248(%rsp), %rcx        # 8-byte Reload
	movq	8240(%rsp), %r8         # 8-byte Reload
	movq	8224(%rsp), %r9         # 8-byte Reload
	movq	8256(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movb	8286(%rsp), %r13b       # 1-byte Reload
	testb	$1, %r13b
	movq	8224(%rsp), %rax        # 8-byte Reload
	movq	%rax, 8200(%rsp)        # 8-byte Spill
	jne	.LBB9_14
	jmp	.LBB9_13
.Ltmp299:
.LBB9_12:                               # %.preheader
                                        #   in Loop: Header=BB9_8 Depth=1
	vxorps	%xmm0, %xmm0, %xmm0
	movabsq	$0, %rax
	movabsq	$1, %rcx
	leaq	.L.str127, %r8
	leaq	.L.str781, %rdx
	movabsq	$2, %rsi
	leaq	.L.str135, %rdi
	movabsq	$3, %r9
	leaq	.L.str134, %r10
	movabsq	$815, %r11              # imm = 0x32F
	leaq	.L.str57131, %rbx
	leaq	.L.str130, %r14
	leaq	.L.str133, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	.loc	2 815 0                 # eispack.c:815:0
.Ltmp300:
	movq	%rdi, 8192(%rsp)        # 8-byte Spill
	movq	%r11, %rdi
	movq	%rsi, 8184(%rsp)        # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, 8176(%rsp)        # 8-byte Spill
	movq	%r14, %rdx
	movq	%rcx, 8168(%rsp)        # 8-byte Spill
	movq	%r15, %rcx
	movq	8184(%rsp), %r11        # 8-byte Reload
	movq	%r8, 8160(%rsp)         # 8-byte Spill
	movq	%r11, %r8
	movq	%r9, 8152(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	vmovsd	%xmm0, 8144(%rsp)       # 8-byte Spill
	movq	%rax, 8136(%rsp)        # 8-byte Spill
	movq	%r10, 8128(%rsp)        # 8-byte Spill
	movl	%r12d, 8124(%rsp)       # 4-byte Spill
	callq	trace_logger_log0
	movq	8152(%rsp), %rdi        # 8-byte Reload
	movq	8136(%rsp), %rsi        # 8-byte Reload
	movq	8136(%rsp), %rdx        # 8-byte Reload
	movq	8168(%rsp), %rcx        # 8-byte Reload
	movq	8128(%rsp), %r8         # 8-byte Reload
	movq	8136(%rsp), %r9         # 8-byte Reload
	movq	8176(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	8184(%rsp), %rdi        # 8-byte Reload
	movq	8136(%rsp), %rsi        # 8-byte Reload
	movq	8136(%rsp), %rdx        # 8-byte Reload
	movq	8168(%rsp), %rcx        # 8-byte Reload
	movq	8192(%rsp), %r8         # 8-byte Reload
	movq	8136(%rsp), %r9         # 8-byte Reload
	movq	8176(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movb	8286(%rsp), %r13b       # 1-byte Reload
	andb	$1, %r13b
	movzbl	%r13b, %ebp
	movl	%ebp, %edx
	movq	8168(%rsp), %rdi        # 8-byte Reload
	movq	8168(%rsp), %rsi        # 8-byte Reload
	movq	8168(%rsp), %rcx        # 8-byte Reload
	movq	8160(%rsp), %r8         # 8-byte Reload
	movq	8136(%rsp), %r9         # 8-byte Reload
	movq	8176(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movb	8286(%rsp), %r13b       # 1-byte Reload
	testb	$1, %r13b
	movq	8136(%rsp), %rax        # 8-byte Reload
	vmovsd	8144(%rsp), %xmm0       # 8-byte Reload
	movq	%rax, 8112(%rsp)        # 8-byte Spill
	vmovsd	%xmm0, 8104(%rsp)       # 8-byte Spill
	jne	.LBB9_19
	jmp	.LBB9_16
.Ltmp301:
.LBB9_13:                               # %.lr.ph45
                                        #   Parent Loop BB9_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	8200(%rsp), %rax        # 8-byte Reload
	movabsq	$1, %rcx
	leaq	.L.str154, %rdx
	movabsq	$0, %rsi
	leaq	.L.str781, %rdi
	movabsq	$2, %r8
	leaq	.L.str132, %r9
	movabsq	$3, %r10
	leaq	.L.str113, %r11
	movabsq	$803, %rbx              # imm = 0x323
	leaq	.L.str57131, %r14
	leaq	.L.str155, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 8096(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 8088(%rsp)        # 8-byte Spill
	leaq	.L.str153, %rax
	movq	%rax, 8080(%rsp)        # 8-byte Spill
	leaq	.L.str107, %rax
	movq	%rax, 8072(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 8064(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 8056(%rsp)        # 8-byte Spill
	leaq	.L.str137, %rax
	movq	%rax, 8048(%rsp)        # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, 8040(%rsp)        # 8-byte Spill
	leaq	.L.str136, %rax
	movq	%rax, 8032(%rsp)        # 8-byte Spill
	leaq	.L.str1488, %rax
	movq	%rax, 8024(%rsp)        # 8-byte Spill
	movabsq	$8, %rax
	vxorps	%xmm0, %xmm0, %xmm0
	movq	%rax, 8016(%rsp)        # 8-byte Spill
	leaq	.L.str149, %rax
	movq	%rax, 8008(%rsp)        # 8-byte Spill
	movabsq	$807, %rax              # imm = 0x327
	movq	%rax, 8000(%rsp)        # 8-byte Spill
	leaq	.L.str152, %rax
	movq	%rax, 7992(%rsp)        # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, 7984(%rsp)        # 8-byte Spill
	leaq	.L.str150, %rax
	movq	%rax, 7976(%rsp)        # 8-byte Spill
	leaq	.L.str142, %rax
	movq	%rax, 7968(%rsp)        # 8-byte Spill
	movabsq	$806, %rax              # imm = 0x326
	movq	%rax, 7960(%rsp)        # 8-byte Spill
	leaq	.L.str151, %rax
	movq	%rax, 7952(%rsp)        # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, 7944(%rsp)        # 8-byte Spill
	leaq	.L.str882, %rax
	movq	%rax, 7936(%rsp)        # 8-byte Spill
	leaq	.L.str148, %rax
	movq	%rax, 7928(%rsp)        # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 7920(%rsp)        # 8-byte Spill
	leaq	.L.str147, %rax
	movq	%rax, 7912(%rsp)        # 8-byte Spill
	movabsq	$35, %rax
	movq	%rax, 7904(%rsp)        # 8-byte Spill
	leaq	.L.str139, %rax
	movq	%rax, 7896(%rsp)        # 8-byte Spill
	leaq	.L.str146, %rax
	movq	%rax, 7888(%rsp)        # 8-byte Spill
	leaq	.L.str104, %rax
	movq	%rax, 7880(%rsp)        # 8-byte Spill
	leaq	.L.str143, %rax
	movq	%rax, 7872(%rsp)        # 8-byte Spill
	leaq	.L.str144, %rax
	movq	%rax, 7864(%rsp)        # 8-byte Spill
	movabsq	$805, %rax              # imm = 0x325
	movq	%rax, 7856(%rsp)        # 8-byte Spill
	leaq	.L.str145, %rax
	movq	%rax, 7848(%rsp)        # 8-byte Spill
	leaq	.L.str82, %rax
	movq	%rax, 7840(%rsp)        # 8-byte Spill
	leaq	.L.str141, %rax
	movq	%rax, 7832(%rsp)        # 8-byte Spill
	leaq	.L.str140, %rax
	movq	%rax, 7824(%rsp)        # 8-byte Spill
	leaq	.L.str110, %rax
	movq	%rax, 7816(%rsp)        # 8-byte Spill
	leaq	.L.str138, %rax
	movq	%rax, 7808(%rsp)        # 8-byte Spill
	leaq	.L.str51125, %rax
	movq	%rax, 7800(%rsp)        # 8-byte Spill
	movabsq	$12, %rax
	movq	%rax, 7792(%rsp)        # 8-byte Spill
	leaq	.L.str129, %rax
	movq	%rax, 7784(%rsp)        # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 7776(%rsp)        # 8-byte Spill
	movabsq	$48, %rax
	.loc	2 805 0                 # eispack.c:805:0
.Ltmp302:
	movq	%rax, 7768(%rsp)        # 8-byte Spill
	movq	7776(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 7760(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 7752(%rsp)        # 8-byte Spill
	movq	%r14, %rsi
	movq	%rdx, 7744(%rsp)        # 8-byte Spill
	movq	%r9, %rdx
	movq	8032(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 7736(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	7768(%rsp), %rax        # 8-byte Reload
	movq	%r8, 7728(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 7720(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movl	%ebp, 7716(%rsp)        # 4-byte Spill
	movl	%r12d, 7712(%rsp)       # 4-byte Spill
	movq	%r13, 7704(%rsp)        # 8-byte Spill
	vmovsd	%xmm0, 7696(%rsp)       # 8-byte Spill
	movq	%r15, 7688(%rsp)        # 8-byte Spill
	movq	%r14, 7680(%rsp)        # 8-byte Spill
	movq	%r10, 7672(%rsp)        # 8-byte Spill
	movq	%r11, 7664(%rsp)        # 8-byte Spill
	movq	%rbx, 7656(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	7728(%rsp), %rdi        # 8-byte Reload
	movq	8056(%rsp), %rsi        # 8-byte Reload
	movq	7752(%rsp), %rdx        # 8-byte Reload
	movq	7752(%rsp), %rcx        # 8-byte Reload
	movq	8024(%rsp), %r8         # 8-byte Reload
	movq	7736(%rsp), %r9         # 8-byte Reload
	movq	7784(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	7736(%rsp), %rdi        # 8-byte Reload
	movq	8056(%rsp), %rsi        # 8-byte Reload
	movq	7752(%rsp), %rdx        # 8-byte Reload
	movq	7736(%rsp), %rcx        # 8-byte Reload
	movq	8048(%rsp), %r8         # 8-byte Reload
	movq	7736(%rsp), %r9         # 8-byte Reload
	movq	7720(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	7704(%rsp), %rdi        # 8-byte Reload
	movq	8056(%rsp), %rsi        # 8-byte Reload
	movq	8096(%rsp), %rdx        # 8-byte Reload
	movq	7736(%rsp), %rcx        # 8-byte Reload
	movq	8032(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7720(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	7856(%rsp), %rdi        # 8-byte Reload
	movq	7680(%rsp), %rsi        # 8-byte Reload
	movq	7720(%rsp), %rdx        # 8-byte Reload
	movq	7808(%rsp), %rcx        # 8-byte Reload
	movq	8040(%rsp), %r8         # 8-byte Reload
	movl	7716(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	7736(%rsp), %rdi        # 8-byte Reload
	movq	8056(%rsp), %rsi        # 8-byte Reload
	movq	8096(%rsp), %rdx        # 8-byte Reload
	movq	7736(%rsp), %rcx        # 8-byte Reload
	movq	8032(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7760(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	8096(%rsp), %rax        # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	7704(%rsp), %rdi        # 8-byte Reload
	movq	8088(%rsp), %rsi        # 8-byte Reload
	movq	7736(%rsp), %rcx        # 8-byte Reload
	movq	7808(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7760(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 7652(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	7856(%rsp), %rdi        # 8-byte Reload
	movq	7680(%rsp), %rsi        # 8-byte Reload
	movq	7720(%rsp), %rdx        # 8-byte Reload
	movq	7896(%rsp), %rcx        # 8-byte Reload
	movq	7792(%rsp), %r8         # 8-byte Reload
	movl	7716(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	10988(%rsp), %r9d       # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	7728(%rsp), %rdi        # 8-byte Reload
	movq	8088(%rsp), %rsi        # 8-byte Reload
	movq	7736(%rsp), %rcx        # 8-byte Reload
	movq	7800(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7760(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	7652(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	7736(%rsp), %rdi        # 8-byte Reload
	movq	8088(%rsp), %rsi        # 8-byte Reload
	movq	7736(%rsp), %rcx        # 8-byte Reload
	movq	7808(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7760(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	7652(%rsp), %ebp        # 4-byte Reload
	movl	10988(%rsp), %r12d      # 4-byte Reload
	imull	%r12d, %ebp
	movl	%ebp, %esi
	movl	%esi, %edx
	movq	7704(%rsp), %rdi        # 8-byte Reload
	movq	8088(%rsp), %rsi        # 8-byte Reload
	movq	7736(%rsp), %rcx        # 8-byte Reload
	movq	7896(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7760(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%ebp, 7648(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	7856(%rsp), %rdi        # 8-byte Reload
	movq	7680(%rsp), %rsi        # 8-byte Reload
	movq	7720(%rsp), %rdx        # 8-byte Reload
	movq	7824(%rsp), %rcx        # 8-byte Reload
	movq	8016(%rsp), %r8         # 8-byte Reload
	movl	7716(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	8880(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	7728(%rsp), %rdi        # 8-byte Reload
	movq	8088(%rsp), %rsi        # 8-byte Reload
	movq	7736(%rsp), %rcx        # 8-byte Reload
	movq	7816(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7760(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	7648(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	7736(%rsp), %rdi        # 8-byte Reload
	movq	8088(%rsp), %rsi        # 8-byte Reload
	movq	7736(%rsp), %rcx        # 8-byte Reload
	movq	7896(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7760(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	7648(%rsp), %ebp        # 4-byte Reload
	movl	8880(%rsp), %r12d       # 4-byte Reload
	addl	%r12d, %ebp
	movl	%ebp, %esi
	movl	%esi, %edx
	movq	7704(%rsp), %rdi        # 8-byte Reload
	movq	8088(%rsp), %rsi        # 8-byte Reload
	movq	7736(%rsp), %rcx        # 8-byte Reload
	movq	7824(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7760(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%ebp, 7644(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	7856(%rsp), %rdi        # 8-byte Reload
	movq	7680(%rsp), %rsi        # 8-byte Reload
	movq	7720(%rsp), %rdx        # 8-byte Reload
	movq	7832(%rsp), %rcx        # 8-byte Reload
	movq	7904(%rsp), %r8         # 8-byte Reload
	movl	7716(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	7644(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	7736(%rsp), %rdi        # 8-byte Reload
	movq	8088(%rsp), %rsi        # 8-byte Reload
	movq	7736(%rsp), %rcx        # 8-byte Reload
	movq	7824(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7760(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	7644(%rsp), %ebp        # 4-byte Reload
	movslq	%ebp, %rax
	movq	7704(%rsp), %rdi        # 8-byte Reload
	movq	8056(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	7736(%rsp), %rcx        # 8-byte Reload
	movq	7832(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7760(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 7632(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	7856(%rsp), %rdi        # 8-byte Reload
	movq	7680(%rsp), %rsi        # 8-byte Reload
	movq	7720(%rsp), %rdx        # 8-byte Reload
	movq	7968(%rsp), %rcx        # 8-byte Reload
	movq	7920(%rsp), %r8         # 8-byte Reload
	movl	7716(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	7728(%rsp), %rdi        # 8-byte Reload
	movq	8056(%rsp), %rsi        # 8-byte Reload
	movq	7632(%rsp), %rdx        # 8-byte Reload
	movq	7736(%rsp), %rcx        # 8-byte Reload
	movq	7832(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7760(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	7736(%rsp), %rdi        # 8-byte Reload
	movq	8056(%rsp), %rsi        # 8-byte Reload
	movq	11104(%rsp), %rdx       # 8-byte Reload
	movq	7736(%rsp), %rcx        # 8-byte Reload
	movq	7936(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7760(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	7632(%rsp), %rax        # 8-byte Reload
	shlq	$3, %rax
	movq	11104(%rsp), %rcx       # 8-byte Reload
	addq	%rax, %rcx
	movq	7704(%rsp), %rdi        # 8-byte Reload
	movq	8056(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	7736(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 7624(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	7968(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7760(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	7856(%rsp), %rdi        # 8-byte Reload
	movq	7680(%rsp), %rsi        # 8-byte Reload
	movq	7720(%rsp), %rdx        # 8-byte Reload
	movq	7872(%rsp), %rcx        # 8-byte Reload
	movq	7944(%rsp), %r8         # 8-byte Reload
	movl	7716(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	7736(%rsp), %rdi        # 8-byte Reload
	movq	8056(%rsp), %rsi        # 8-byte Reload
	movq	7624(%rsp), %rdx        # 8-byte Reload
	movq	7736(%rsp), %rcx        # 8-byte Reload
	movq	7968(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7760(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	11104(%rsp), %rax       # 8-byte Reload
	movq	7632(%rsp), %rcx        # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
	movq	7704(%rsp), %rdi        # 8-byte Reload
	movq	8056(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 7616(%rsp)       # 8-byte Spill
	movq	7736(%rsp), %rdx        # 8-byte Reload
	movq	7872(%rsp), %rcx        # 8-byte Reload
	movq	7752(%rsp), %r8         # 8-byte Reload
	movq	7760(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	7856(%rsp), %rdi        # 8-byte Reload
	movq	7680(%rsp), %rsi        # 8-byte Reload
	movq	7720(%rsp), %rdx        # 8-byte Reload
	movq	7864(%rsp), %rcx        # 8-byte Reload
	movq	7920(%rsp), %r8         # 8-byte Reload
	movl	7716(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	7728(%rsp), %rdi        # 8-byte Reload
	movq	8056(%rsp), %rsi        # 8-byte Reload
	movq	8096(%rsp), %rdx        # 8-byte Reload
	movq	7736(%rsp), %rcx        # 8-byte Reload
	movq	8032(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7760(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	7736(%rsp), %rdi        # 8-byte Reload
	movq	8056(%rsp), %rsi        # 8-byte Reload
	movq	10968(%rsp), %rdx       # 8-byte Reload
	movq	7736(%rsp), %rcx        # 8-byte Reload
	movq	7840(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7760(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	8096(%rsp), %rax        # 8-byte Reload
	shlq	$3, %rax
	movq	10968(%rsp), %rcx       # 8-byte Reload
	addq	%rax, %rcx
	movq	7704(%rsp), %rdi        # 8-byte Reload
	movq	8056(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	7736(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 7608(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	7864(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7760(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	7856(%rsp), %rdi        # 8-byte Reload
	movq	7680(%rsp), %rsi        # 8-byte Reload
	movq	7720(%rsp), %rdx        # 8-byte Reload
	movq	7848(%rsp), %rcx        # 8-byte Reload
	movq	7984(%rsp), %r8         # 8-byte Reload
	movl	7716(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	7728(%rsp), %rdi        # 8-byte Reload
	movq	8056(%rsp), %rsi        # 8-byte Reload
	movq	7608(%rsp), %rdx        # 8-byte Reload
	movq	7736(%rsp), %rcx        # 8-byte Reload
	movq	7864(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7760(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	7736(%rsp), %rdi        # 8-byte Reload
	movq	8056(%rsp), %rsi        # 8-byte Reload
	vmovsd	7616(%rsp), %xmm0       # 8-byte Reload
	movq	7736(%rsp), %rdx        # 8-byte Reload
	movq	7872(%rsp), %rcx        # 8-byte Reload
	movq	7752(%rsp), %r8         # 8-byte Reload
	movq	7760(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	10968(%rsp), %rax       # 8-byte Reload
	movq	8096(%rsp), %rcx        # 8-byte Reload
	vmovsd	7616(%rsp), %xmm0       # 8-byte Reload
	vmovsd	%xmm0, (%rax,%rcx,8)
	.loc	2 806 0                 # eispack.c:806:0
	movq	7960(%rsp), %rdi        # 8-byte Reload
	movq	7680(%rsp), %rsi        # 8-byte Reload
	movq	7720(%rsp), %rdx        # 8-byte Reload
	movq	7888(%rsp), %rcx        # 8-byte Reload
	movq	8040(%rsp), %r8         # 8-byte Reload
	movl	7716(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	7736(%rsp), %rdi        # 8-byte Reload
	movq	8056(%rsp), %rsi        # 8-byte Reload
	movq	8888(%rsp), %rdx        # 8-byte Reload
	movq	7736(%rsp), %rcx        # 8-byte Reload
	movq	7880(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7760(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	8888(%rsp), %rax        # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	7704(%rsp), %rdi        # 8-byte Reload
	movq	8088(%rsp), %rsi        # 8-byte Reload
	movq	7736(%rsp), %rcx        # 8-byte Reload
	movq	7888(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7760(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 7604(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	7960(%rsp), %rdi        # 8-byte Reload
	movq	7680(%rsp), %rsi        # 8-byte Reload
	movq	7720(%rsp), %rdx        # 8-byte Reload
	movq	7912(%rsp), %rcx        # 8-byte Reload
	movq	8016(%rsp), %r8         # 8-byte Reload
	movl	7716(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	7604(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	7728(%rsp), %rdi        # 8-byte Reload
	movq	8088(%rsp), %rsi        # 8-byte Reload
	movq	7736(%rsp), %rcx        # 8-byte Reload
	movq	7888(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7760(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	7648(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	7736(%rsp), %rdi        # 8-byte Reload
	movq	8088(%rsp), %rsi        # 8-byte Reload
	movq	7736(%rsp), %rcx        # 8-byte Reload
	movq	7896(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7760(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	7648(%rsp), %ebp        # 4-byte Reload
	movl	7604(%rsp), %r12d       # 4-byte Reload
	addl	%r12d, %ebp
	movl	%ebp, %esi
	movl	%esi, %edx
	movq	7704(%rsp), %rdi        # 8-byte Reload
	movq	8088(%rsp), %rsi        # 8-byte Reload
	movq	7736(%rsp), %rcx        # 8-byte Reload
	movq	7912(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7760(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%ebp, 7600(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	7960(%rsp), %rdi        # 8-byte Reload
	movq	7680(%rsp), %rsi        # 8-byte Reload
	movq	7720(%rsp), %rdx        # 8-byte Reload
	movq	7928(%rsp), %rcx        # 8-byte Reload
	movq	7904(%rsp), %r8         # 8-byte Reload
	movl	7716(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	7600(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	7736(%rsp), %rdi        # 8-byte Reload
	movq	8088(%rsp), %rsi        # 8-byte Reload
	movq	7736(%rsp), %rcx        # 8-byte Reload
	movq	7912(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7760(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	7600(%rsp), %ebp        # 4-byte Reload
	movslq	%ebp, %rax
	movq	7704(%rsp), %rdi        # 8-byte Reload
	movq	8056(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	7736(%rsp), %rcx        # 8-byte Reload
	movq	7928(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7760(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 7592(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	7960(%rsp), %rdi        # 8-byte Reload
	movq	7680(%rsp), %rsi        # 8-byte Reload
	movq	7720(%rsp), %rdx        # 8-byte Reload
	movq	8008(%rsp), %rcx        # 8-byte Reload
	movq	7920(%rsp), %r8         # 8-byte Reload
	movl	7716(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	7728(%rsp), %rdi        # 8-byte Reload
	movq	8056(%rsp), %rsi        # 8-byte Reload
	movq	7592(%rsp), %rdx        # 8-byte Reload
	movq	7736(%rsp), %rcx        # 8-byte Reload
	movq	7928(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7760(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	7736(%rsp), %rdi        # 8-byte Reload
	movq	8056(%rsp), %rsi        # 8-byte Reload
	movq	11104(%rsp), %rdx       # 8-byte Reload
	movq	7736(%rsp), %rcx        # 8-byte Reload
	movq	7936(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7760(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	7592(%rsp), %rax        # 8-byte Reload
	shlq	$3, %rax
	movq	11104(%rsp), %rcx       # 8-byte Reload
	addq	%rax, %rcx
	movq	7704(%rsp), %rdi        # 8-byte Reload
	movq	8056(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	7736(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 7584(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	8008(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7760(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	7960(%rsp), %rdi        # 8-byte Reload
	movq	7680(%rsp), %rsi        # 8-byte Reload
	movq	7720(%rsp), %rdx        # 8-byte Reload
	movq	7976(%rsp), %rcx        # 8-byte Reload
	movq	7944(%rsp), %r8         # 8-byte Reload
	movl	7716(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	7736(%rsp), %rdi        # 8-byte Reload
	movq	8056(%rsp), %rsi        # 8-byte Reload
	movq	7584(%rsp), %rdx        # 8-byte Reload
	movq	7736(%rsp), %rcx        # 8-byte Reload
	movq	8008(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7760(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	11104(%rsp), %rax       # 8-byte Reload
	movq	7592(%rsp), %rcx        # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
	movq	7704(%rsp), %rdi        # 8-byte Reload
	movq	8056(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 7576(%rsp)       # 8-byte Spill
	movq	7736(%rsp), %rdx        # 8-byte Reload
	movq	7976(%rsp), %rcx        # 8-byte Reload
	movq	7752(%rsp), %r8         # 8-byte Reload
	movq	7760(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	7960(%rsp), %rdi        # 8-byte Reload
	movq	7680(%rsp), %rsi        # 8-byte Reload
	movq	7720(%rsp), %rdx        # 8-byte Reload
	movq	7952(%rsp), %rcx        # 8-byte Reload
	movq	7984(%rsp), %r8         # 8-byte Reload
	movl	7716(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	7728(%rsp), %rdi        # 8-byte Reload
	movq	8056(%rsp), %rsi        # 8-byte Reload
	movq	7624(%rsp), %rdx        # 8-byte Reload
	movq	7736(%rsp), %rcx        # 8-byte Reload
	movq	7968(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7760(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	7736(%rsp), %rdi        # 8-byte Reload
	movq	8056(%rsp), %rsi        # 8-byte Reload
	vmovsd	7576(%rsp), %xmm0       # 8-byte Reload
	movq	7736(%rsp), %rdx        # 8-byte Reload
	movq	7976(%rsp), %rcx        # 8-byte Reload
	movq	7752(%rsp), %r8         # 8-byte Reload
	movq	7760(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	11104(%rsp), %rax       # 8-byte Reload
	movq	7632(%rsp), %rcx        # 8-byte Reload
	vmovsd	7576(%rsp), %xmm0       # 8-byte Reload
	vmovsd	%xmm0, (%rax,%rcx,8)
	.loc	2 807 0                 # eispack.c:807:0
	movq	8000(%rsp), %rdi        # 8-byte Reload
	movq	7680(%rsp), %rsi        # 8-byte Reload
	movq	7720(%rsp), %rdx        # 8-byte Reload
	movq	7992(%rsp), %rcx        # 8-byte Reload
	movq	7984(%rsp), %r8         # 8-byte Reload
	movl	7716(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	7728(%rsp), %rdi        # 8-byte Reload
	movq	8056(%rsp), %rsi        # 8-byte Reload
	movq	7584(%rsp), %rdx        # 8-byte Reload
	movq	7736(%rsp), %rcx        # 8-byte Reload
	movq	8008(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7760(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	7736(%rsp), %rdi        # 8-byte Reload
	movq	8056(%rsp), %rsi        # 8-byte Reload
	vmovsd	7696(%rsp), %xmm0       # 8-byte Reload
	movq	7752(%rsp), %rdx        # 8-byte Reload
	movq	8024(%rsp), %rcx        # 8-byte Reload
	movq	7752(%rsp), %r8         # 8-byte Reload
	movq	7760(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	11104(%rsp), %rax       # 8-byte Reload
	movq	7592(%rsp), %rcx        # 8-byte Reload
	vmovsd	7696(%rsp), %xmm0       # 8-byte Reload
	vmovsd	%xmm0, (%rax,%rcx,8)
.Ltmp303:
	.loc	2 803 0                 # eispack.c:803:0
	movq	7656(%rsp), %rdi        # 8-byte Reload
	movq	7680(%rsp), %rsi        # 8-byte Reload
	movq	7720(%rsp), %rdx        # 8-byte Reload
	movq	8048(%rsp), %rcx        # 8-byte Reload
	movq	8016(%rsp), %r8         # 8-byte Reload
	movl	7716(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	7728(%rsp), %rdi        # 8-byte Reload
	movq	8056(%rsp), %rsi        # 8-byte Reload
	movq	7736(%rsp), %rdx        # 8-byte Reload
	movq	7752(%rsp), %rcx        # 8-byte Reload
	movq	8024(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7760(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	7736(%rsp), %rdi        # 8-byte Reload
	movq	8056(%rsp), %rsi        # 8-byte Reload
	movq	8096(%rsp), %rdx        # 8-byte Reload
	movq	7736(%rsp), %rcx        # 8-byte Reload
	movq	8032(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7760(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	8096(%rsp), %rax        # 8-byte Reload
	addq	$1, %rax
	movq	7704(%rsp), %rdi        # 8-byte Reload
	movq	8056(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	7736(%rsp), %rcx        # 8-byte Reload
	movq	8048(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7760(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 7568(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	7656(%rsp), %rdi        # 8-byte Reload
	movq	7680(%rsp), %rsi        # 8-byte Reload
	movq	7720(%rsp), %rdx        # 8-byte Reload
	movq	8080(%rsp), %rcx        # 8-byte Reload
	movq	8040(%rsp), %r8         # 8-byte Reload
	movl	7716(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	7736(%rsp), %rdi        # 8-byte Reload
	movq	8056(%rsp), %rsi        # 8-byte Reload
	movq	7568(%rsp), %rdx        # 8-byte Reload
	movq	7736(%rsp), %rcx        # 8-byte Reload
	movq	8048(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7760(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	7568(%rsp), %rax        # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	7704(%rsp), %rdi        # 8-byte Reload
	movq	8088(%rsp), %rsi        # 8-byte Reload
	movq	7736(%rsp), %rcx        # 8-byte Reload
	movq	8080(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7760(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 7564(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	7656(%rsp), %rdi        # 8-byte Reload
	movq	7680(%rsp), %rsi        # 8-byte Reload
	movq	7720(%rsp), %rdx        # 8-byte Reload
	movq	7744(%rsp), %rcx        # 8-byte Reload
	movq	8064(%rsp), %r8         # 8-byte Reload
	movl	7716(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	8900(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	7728(%rsp), %rdi        # 8-byte Reload
	movq	8088(%rsp), %rsi        # 8-byte Reload
	movq	7736(%rsp), %rcx        # 8-byte Reload
	movq	8072(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7760(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	7564(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	7736(%rsp), %rdi        # 8-byte Reload
	movq	8088(%rsp), %rsi        # 8-byte Reload
	movq	7736(%rsp), %rcx        # 8-byte Reload
	movq	8080(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7760(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	7564(%rsp), %ebp        # 4-byte Reload
	movl	8900(%rsp), %r12d       # 4-byte Reload
	cmpl	%r12d, %ebp
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	7704(%rsp), %rdi        # 8-byte Reload
	movq	7736(%rsp), %rsi        # 8-byte Reload
	movq	7736(%rsp), %rcx        # 8-byte Reload
	movq	7744(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7760(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 7563(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	7656(%rsp), %rdi        # 8-byte Reload
	movq	7680(%rsp), %rsi        # 8-byte Reload
	movq	7720(%rsp), %rdx        # 8-byte Reload
	movq	7688(%rsp), %rcx        # 8-byte Reload
	movq	7728(%rsp), %r8         # 8-byte Reload
	movl	7716(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	7672(%rsp), %rdi        # 8-byte Reload
	movq	7752(%rsp), %rsi        # 8-byte Reload
	movq	7752(%rsp), %rdx        # 8-byte Reload
	movq	7736(%rsp), %rcx        # 8-byte Reload
	movq	7664(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7760(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	7728(%rsp), %rdi        # 8-byte Reload
	movq	7752(%rsp), %rsi        # 8-byte Reload
	movq	7752(%rsp), %rdx        # 8-byte Reload
	movq	7736(%rsp), %rcx        # 8-byte Reload
	movq	7720(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7760(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	7563(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	7736(%rsp), %rdi        # 8-byte Reload
	movq	7736(%rsp), %rsi        # 8-byte Reload
	movq	7736(%rsp), %rcx        # 8-byte Reload
	movq	7744(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7760(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	7563(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	movq	7568(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 8200(%rsp)        # 8-byte Spill
	jne	.LBB9_14
	jmp	.LBB9_13
.Ltmp304:
.LBB9_14:                               # %._crit_edge46
                                        #   in Loop: Header=BB9_8 Depth=1
	movabsq	$1, %rax
	movabsq	$0, %rcx
	leaq	.L.str105, %r8
	leaq	.L.str781, %rdx
	movabsq	$812, %rdi              # imm = 0x32C
	leaq	.L.str57131, %rsi
	leaq	.L.str113, %r9
	leaq	.L.str162, %r10
	movabsq	$2, %r11
	movl	$0, %ebx
	movl	$1, %ebp
	vxorps	%xmm0, %xmm0, %xmm0
	movabsq	$64, %r14
	leaq	.L.str1488, %r15
	leaq	.L.str159, %r12
	movabsq	$811, %r13              # imm = 0x32B
	movq	%rax, 7552(%rsp)        # 8-byte Spill
	leaq	.L.str161, %rax
	movq	%rax, 7544(%rsp)        # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, 7536(%rsp)        # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 7528(%rsp)        # 8-byte Spill
	leaq	.L.str160, %rax
	movq	%rax, 7520(%rsp)        # 8-byte Spill
	leaq	.L.str104, %rax
	movq	%rax, 7512(%rsp)        # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 7504(%rsp)        # 8-byte Spill
	leaq	.L.str156, %rax
	movq	%rax, 7496(%rsp)        # 8-byte Spill
	movabsq	$810, %rax              # imm = 0x32A
	movq	%rax, 7488(%rsp)        # 8-byte Spill
	leaq	.L.str158, %rax
	movq	%rax, 7480(%rsp)        # 8-byte Spill
	leaq	.L.str157, %rax
	.loc	2 810 0                 # eispack.c:810:0
	movq	%rax, 7472(%rsp)        # 8-byte Spill
	movq	7488(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 7464(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 7456(%rsp)        # 8-byte Spill
	movq	%rdx, 7448(%rsp)        # 8-byte Spill
	movq	%r9, %rdx
	movq	7496(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 7440(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	7504(%rsp), %rax        # 8-byte Reload
	movq	%r8, 7432(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 7424(%rsp)         # 8-byte Spill
	movl	%ebx, %r9d
	movl	$1, (%rsp)
	movq	%r14, 7416(%rsp)        # 8-byte Spill
	vmovsd	%xmm0, 7408(%rsp)       # 8-byte Spill
	movq	%r15, 7400(%rsp)        # 8-byte Spill
	movq	%r13, 7392(%rsp)        # 8-byte Spill
	movq	%r12, 7384(%rsp)        # 8-byte Spill
	movl	%ebp, 7380(%rsp)        # 4-byte Spill
	movq	%r10, 7368(%rsp)        # 8-byte Spill
	movq	%r11, 7360(%rsp)        # 8-byte Spill
	movl	%ebx, 7356(%rsp)        # 4-byte Spill
	callq	trace_logger_log0
	movq	7360(%rsp), %rdi        # 8-byte Reload
	movq	7416(%rsp), %rsi        # 8-byte Reload
	movq	8888(%rsp), %rdx        # 8-byte Reload
	movq	7552(%rsp), %rcx        # 8-byte Reload
	movq	7512(%rsp), %r8         # 8-byte Reload
	movq	7440(%rsp), %r9         # 8-byte Reload
	movq	7448(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	7552(%rsp), %rdi        # 8-byte Reload
	movq	7416(%rsp), %rsi        # 8-byte Reload
	movq	10960(%rsp), %rdx       # 8-byte Reload
	movq	7552(%rsp), %rcx        # 8-byte Reload
	movq	7472(%rsp), %r8         # 8-byte Reload
	movq	7440(%rsp), %r9         # 8-byte Reload
	movq	7448(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	8888(%rsp), %rax        # 8-byte Reload
	shlq	$3, %rax
	movq	10960(%rsp), %rcx       # 8-byte Reload
	addq	%rax, %rcx
	movq	7528(%rsp), %rdi        # 8-byte Reload
	movq	7416(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	7552(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 7344(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	7496(%rsp), %r8         # 8-byte Reload
	movq	7440(%rsp), %r9         # 8-byte Reload
	movq	7448(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	7488(%rsp), %rdi        # 8-byte Reload
	movq	7456(%rsp), %rsi        # 8-byte Reload
	movq	7424(%rsp), %rdx        # 8-byte Reload
	movq	7480(%rsp), %rcx        # 8-byte Reload
	movq	7536(%rsp), %r8         # 8-byte Reload
	movl	7356(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	7360(%rsp), %rdi        # 8-byte Reload
	movq	7416(%rsp), %rsi        # 8-byte Reload
	movq	7344(%rsp), %rdx        # 8-byte Reload
	movq	7552(%rsp), %rcx        # 8-byte Reload
	movq	7496(%rsp), %r8         # 8-byte Reload
	movq	7440(%rsp), %r9         # 8-byte Reload
	movq	7448(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	7552(%rsp), %rdi        # 8-byte Reload
	movq	7416(%rsp), %rsi        # 8-byte Reload
	vmovsd	7408(%rsp), %xmm0       # 8-byte Reload
	movq	7440(%rsp), %rdx        # 8-byte Reload
	movq	7400(%rsp), %rcx        # 8-byte Reload
	movq	7440(%rsp), %r8         # 8-byte Reload
	movq	7448(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	10960(%rsp), %rax       # 8-byte Reload
	movq	8888(%rsp), %rcx        # 8-byte Reload
	vmovsd	7408(%rsp), %xmm0       # 8-byte Reload
	vmovsd	%xmm0, (%rax,%rcx,8)
	.loc	2 811 0                 # eispack.c:811:0
	movq	7392(%rsp), %rdi        # 8-byte Reload
	movq	7456(%rsp), %rsi        # 8-byte Reload
	movq	7424(%rsp), %rdx        # 8-byte Reload
	movq	7384(%rsp), %rcx        # 8-byte Reload
	movq	7504(%rsp), %r8         # 8-byte Reload
	movl	7356(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	7360(%rsp), %rdi        # 8-byte Reload
	movq	7416(%rsp), %rsi        # 8-byte Reload
	movq	8888(%rsp), %rdx        # 8-byte Reload
	movq	7552(%rsp), %rcx        # 8-byte Reload
	movq	7512(%rsp), %r8         # 8-byte Reload
	movq	7440(%rsp), %r9         # 8-byte Reload
	movq	7448(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	7552(%rsp), %rdi        # 8-byte Reload
	movq	7416(%rsp), %rsi        # 8-byte Reload
	movq	10952(%rsp), %rdx       # 8-byte Reload
	movq	7552(%rsp), %rcx        # 8-byte Reload
	movq	7520(%rsp), %r8         # 8-byte Reload
	movq	7440(%rsp), %r9         # 8-byte Reload
	movq	7448(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	8888(%rsp), %rax        # 8-byte Reload
	shlq	$3, %rax
	movq	10952(%rsp), %rcx       # 8-byte Reload
	addq	%rax, %rcx
	movq	7528(%rsp), %rdi        # 8-byte Reload
	movq	7416(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	7552(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 7336(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	7384(%rsp), %r8         # 8-byte Reload
	movq	7440(%rsp), %r9         # 8-byte Reload
	movq	7448(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	7392(%rsp), %rdi        # 8-byte Reload
	movq	7456(%rsp), %rsi        # 8-byte Reload
	movq	7424(%rsp), %rdx        # 8-byte Reload
	movq	7544(%rsp), %rcx        # 8-byte Reload
	movq	7536(%rsp), %r8         # 8-byte Reload
	movl	7356(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	7360(%rsp), %rdi        # 8-byte Reload
	movq	7416(%rsp), %rsi        # 8-byte Reload
	movq	7336(%rsp), %rdx        # 8-byte Reload
	movq	7552(%rsp), %rcx        # 8-byte Reload
	movq	7384(%rsp), %r8         # 8-byte Reload
	movq	7440(%rsp), %r9         # 8-byte Reload
	movq	7448(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	7552(%rsp), %rdi        # 8-byte Reload
	movq	7416(%rsp), %rsi        # 8-byte Reload
	vmovsd	7408(%rsp), %xmm0       # 8-byte Reload
	movq	7440(%rsp), %rdx        # 8-byte Reload
	movq	7400(%rsp), %rcx        # 8-byte Reload
	movq	7440(%rsp), %r8         # 8-byte Reload
	movq	7448(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	10952(%rsp), %rax       # 8-byte Reload
	movq	8888(%rsp), %rcx        # 8-byte Reload
	vmovsd	7408(%rsp), %xmm0       # 8-byte Reload
	vmovsd	%xmm0, (%rax,%rcx,8)
	.loc	2 812 0                 # eispack.c:812:0
	movq	7464(%rsp), %rdi        # 8-byte Reload
	movq	7456(%rsp), %rsi        # 8-byte Reload
	movq	7424(%rsp), %rdx        # 8-byte Reload
	movq	7368(%rsp), %rcx        # 8-byte Reload
	movq	7360(%rsp), %r8         # 8-byte Reload
	movl	7356(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	7552(%rsp), %rdi        # 8-byte Reload
	movq	7440(%rsp), %rsi        # 8-byte Reload
	movq	7440(%rsp), %rdx        # 8-byte Reload
	movq	7552(%rsp), %rcx        # 8-byte Reload
	movq	7432(%rsp), %r8         # 8-byte Reload
	movq	7440(%rsp), %r9         # 8-byte Reload
	movq	7448(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
.Ltmp305:
.LBB9_15:                               # %.backedge
                                        #   in Loop: Header=BB9_8 Depth=1
	movabsq	$1, %rax
	leaq	.L.str164, %rcx
	movabsq	$0, %rdx
	leaq	.L.str781, %rsi
	movabsq	$2, %rdi
	leaq	.L.str72146, %r8
	movabsq	$3, %r9
	leaq	.L.str91, %r10
	movabsq	$788, %r11              # imm = 0x314
	leaq	.L.str57131, %rbx
	leaq	.L.str105, %r14
	leaq	.L.str165, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 7328(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 7320(%rsp)        # 8-byte Spill
	leaq	.L.str163, %rax
	movq	%rax, 7312(%rsp)        # 8-byte Spill
	leaq	.L.str1488, %rax
	movq	%rax, 7304(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 7296(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 7288(%rsp)        # 8-byte Spill
	leaq	.L.str104, %rax
	movq	%rax, 7280(%rsp)        # 8-byte Spill
	movabsq	$33, %rax
	.loc	2 788 0                 # eispack.c:788:0
	movq	%rdi, 7272(%rsp)        # 8-byte Spill
	movq	%r11, %rdi
	movq	%rsi, 7264(%rsp)        # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, 7256(%rsp)        # 8-byte Spill
	movq	%r14, %rdx
	movq	%rax, 7248(%rsp)        # 8-byte Spill
	movq	7312(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 7240(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	7248(%rsp), %rax        # 8-byte Reload
	movq	%r8, 7232(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 7224(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r15, 7216(%rsp)        # 8-byte Spill
	movl	%ebp, 7212(%rsp)        # 4-byte Spill
	movl	%r12d, 7208(%rsp)       # 4-byte Spill
	movq	%r13, 7200(%rsp)        # 8-byte Spill
	movq	%r14, 7192(%rsp)        # 8-byte Spill
	movq	%rbx, 7184(%rsp)        # 8-byte Spill
	movq	%r10, 7176(%rsp)        # 8-byte Spill
	movq	%r11, 7168(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	7328(%rsp), %rdi        # 8-byte Reload
	movq	7288(%rsp), %rsi        # 8-byte Reload
	movq	8888(%rsp), %rdx        # 8-byte Reload
	movq	7328(%rsp), %rcx        # 8-byte Reload
	movq	7280(%rsp), %r8         # 8-byte Reload
	movq	7256(%rsp), %r9         # 8-byte Reload
	movq	7264(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	8888(%rsp), %rax        # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	7200(%rsp), %rdi        # 8-byte Reload
	movq	7320(%rsp), %rsi        # 8-byte Reload
	movq	7328(%rsp), %rcx        # 8-byte Reload
	movq	7312(%rsp), %r8         # 8-byte Reload
	movq	7256(%rsp), %r9         # 8-byte Reload
	movq	7264(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 7164(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	7168(%rsp), %rdi        # 8-byte Reload
	movq	7184(%rsp), %rsi        # 8-byte Reload
	movq	7192(%rsp), %rdx        # 8-byte Reload
	movq	7240(%rsp), %rcx        # 8-byte Reload
	movq	7296(%rsp), %r8         # 8-byte Reload
	movl	7212(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	7272(%rsp), %rdi        # 8-byte Reload
	movq	7320(%rsp), %rsi        # 8-byte Reload
	movq	7256(%rsp), %rdx        # 8-byte Reload
	movq	7256(%rsp), %rcx        # 8-byte Reload
	movq	7304(%rsp), %r8         # 8-byte Reload
	movq	7256(%rsp), %r9         # 8-byte Reload
	movq	7264(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	7164(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	7328(%rsp), %rdi        # 8-byte Reload
	movq	7320(%rsp), %rsi        # 8-byte Reload
	movq	7328(%rsp), %rcx        # 8-byte Reload
	movq	7312(%rsp), %r8         # 8-byte Reload
	movq	7256(%rsp), %r9         # 8-byte Reload
	movq	7264(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	7164(%rsp), %ebp        # 4-byte Reload
	cmpl	$0, %ebp
	setg	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %r12d
	movl	%r12d, %edx
	movq	7200(%rsp), %rdi        # 8-byte Reload
	movq	7328(%rsp), %rsi        # 8-byte Reload
	movq	7328(%rsp), %rcx        # 8-byte Reload
	movq	7240(%rsp), %r8         # 8-byte Reload
	movq	7256(%rsp), %r9         # 8-byte Reload
	movq	7264(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 7163(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	7168(%rsp), %rdi        # 8-byte Reload
	movq	7184(%rsp), %rsi        # 8-byte Reload
	movq	7192(%rsp), %rdx        # 8-byte Reload
	movq	7216(%rsp), %rcx        # 8-byte Reload
	movq	7272(%rsp), %r8         # 8-byte Reload
	movl	7212(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	7224(%rsp), %rdi        # 8-byte Reload
	movq	7256(%rsp), %rsi        # 8-byte Reload
	movq	7256(%rsp), %rdx        # 8-byte Reload
	movq	7328(%rsp), %rcx        # 8-byte Reload
	movq	7176(%rsp), %r8         # 8-byte Reload
	movq	7256(%rsp), %r9         # 8-byte Reload
	movq	7264(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	7272(%rsp), %rdi        # 8-byte Reload
	movq	7256(%rsp), %rsi        # 8-byte Reload
	movq	7256(%rsp), %rdx        # 8-byte Reload
	movq	7328(%rsp), %rcx        # 8-byte Reload
	movq	7232(%rsp), %r8         # 8-byte Reload
	movq	7256(%rsp), %r9         # 8-byte Reload
	movq	7264(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	7163(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	7328(%rsp), %rdi        # 8-byte Reload
	movq	7328(%rsp), %rsi        # 8-byte Reload
	movq	7328(%rsp), %rcx        # 8-byte Reload
	movq	7240(%rsp), %r8         # 8-byte Reload
	movq	7256(%rsp), %r9         # 8-byte Reload
	movq	7264(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	7163(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	movq	8888(%rsp), %rcx        # 8-byte Reload
	movl	8900(%rsp), %ebp        # 4-byte Reload
	movl	8884(%rsp), %r12d       # 4-byte Reload
	movq	%rcx, 9672(%rsp)        # 8-byte Spill
	movl	%ebp, 9668(%rsp)        # 4-byte Spill
	movl	%r12d, 9664(%rsp)       # 4-byte Spill
	jne	.LBB9_8
	jmp	.LBB9_36
.LBB9_16:                               # %.lr.ph4
                                        #   Parent Loop BB9_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	8112(%rsp), %rax        # 8-byte Reload
	movabsq	$1, %rcx
	leaq	.L.str173, %rdx
	movabsq	$0, %rsi
	leaq	.L.str781, %rdi
	movabsq	$2, %r8
	leaq	.L.str135, %r9
	movabsq	$3, %r10
	leaq	.L.str175149, %r11
	movabsq	$815, %rbx              # imm = 0x32F
	leaq	.L.str57131, %r14
	leaq	.L.str174, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 7152(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 7144(%rsp)        # 8-byte Spill
	leaq	.L.str172, %rax
	movq	%rax, 7136(%rsp)        # 8-byte Spill
	leaq	.L.str107, %rax
	movq	%rax, 7128(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 7120(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 7112(%rsp)        # 8-byte Spill
	leaq	.L.str167, %rax
	movq	%rax, 7104(%rsp)        # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, 7096(%rsp)        # 8-byte Spill
	leaq	.L.str166, %rax
	movq	%rax, 7088(%rsp)        # 8-byte Spill
	leaq	.L.str1488, %rax
	movq	%rax, 7080(%rsp)        # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, 7072(%rsp)        # 8-byte Spill
	leaq	.L.str170, %rax
	movq	%rax, 7064(%rsp)        # 8-byte Spill
	leaq	.L.str168, %rax
	movq	%rax, 7056(%rsp)        # 8-byte Spill
	movabsq	$817, %rax              # imm = 0x331
	movq	%rax, 7048(%rsp)        # 8-byte Spill
	leaq	.L.str171, %rax
	movq	%rax, 7040(%rsp)        # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, 7032(%rsp)        # 8-byte Spill
	leaq	.L.str169, %rax
	movq	%rax, 7024(%rsp)        # 8-byte Spill
	leaq	.L.str118, %rax
	movq	%rax, 7016(%rsp)        # 8-byte Spill
	movabsq	$16, %rax
	movq	%rax, 7008(%rsp)        # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, 7000(%rsp)        # 8-byte Spill
	leaq	.L.str82, %rax
	movq	%rax, 6992(%rsp)        # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 6984(%rsp)        # 8-byte Spill
	leaq	.L.str130, %rax
	movq	%rax, 6976(%rsp)        # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 6968(%rsp)        # 8-byte Spill
	movabsq	$48, %rax
	.loc	2 817 0                 # eispack.c:817:0
.Ltmp306:
	movq	%rax, 6960(%rsp)        # 8-byte Spill
	movq	6968(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 6952(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 6944(%rsp)        # 8-byte Spill
	movq	%r14, %rsi
	movq	%rdx, 6936(%rsp)        # 8-byte Spill
	movq	%r9, %rdx
	movq	7088(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 6928(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	6960(%rsp), %rax        # 8-byte Reload
	movq	%r8, 6920(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 6912(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r15, 6904(%rsp)        # 8-byte Spill
	movl	%ebp, 6900(%rsp)        # 4-byte Spill
	movl	%r12d, 6896(%rsp)       # 4-byte Spill
	movq	%r13, 6888(%rsp)        # 8-byte Spill
	movq	%r14, 6880(%rsp)        # 8-byte Spill
	movq	%rbx, 6872(%rsp)        # 8-byte Spill
	movq	%r10, 6864(%rsp)        # 8-byte Spill
	movq	%r11, 6856(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	6920(%rsp), %rdi        # 8-byte Reload
	movq	7112(%rsp), %rsi        # 8-byte Reload
	movq	6944(%rsp), %rdx        # 8-byte Reload
	movq	6944(%rsp), %rcx        # 8-byte Reload
	movq	7080(%rsp), %r8         # 8-byte Reload
	movq	6928(%rsp), %r9         # 8-byte Reload
	movq	6976(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	6928(%rsp), %rdi        # 8-byte Reload
	movq	7112(%rsp), %rsi        # 8-byte Reload
	movq	6944(%rsp), %rdx        # 8-byte Reload
	movq	6928(%rsp), %rcx        # 8-byte Reload
	movq	7104(%rsp), %r8         # 8-byte Reload
	movq	6928(%rsp), %r9         # 8-byte Reload
	movq	6912(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	6888(%rsp), %rdi        # 8-byte Reload
	movq	7112(%rsp), %rsi        # 8-byte Reload
	movq	7152(%rsp), %rdx        # 8-byte Reload
	movq	6928(%rsp), %rcx        # 8-byte Reload
	movq	7088(%rsp), %r8         # 8-byte Reload
	movq	6944(%rsp), %r9         # 8-byte Reload
	movq	6912(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	7048(%rsp), %rdi        # 8-byte Reload
	movq	6880(%rsp), %rsi        # 8-byte Reload
	movq	6912(%rsp), %rdx        # 8-byte Reload
	movq	7056(%rsp), %rcx        # 8-byte Reload
	movq	6984(%rsp), %r8         # 8-byte Reload
	movl	6900(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	6920(%rsp), %rdi        # 8-byte Reload
	movq	7112(%rsp), %rsi        # 8-byte Reload
	movq	7152(%rsp), %rdx        # 8-byte Reload
	movq	6928(%rsp), %rcx        # 8-byte Reload
	movq	7088(%rsp), %r8         # 8-byte Reload
	movq	6944(%rsp), %r9         # 8-byte Reload
	movq	6952(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	6928(%rsp), %rdi        # 8-byte Reload
	movq	7112(%rsp), %rsi        # 8-byte Reload
	movq	10968(%rsp), %rdx       # 8-byte Reload
	movq	6928(%rsp), %rcx        # 8-byte Reload
	movq	6992(%rsp), %r8         # 8-byte Reload
	movq	6944(%rsp), %r9         # 8-byte Reload
	movq	6952(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	7152(%rsp), %rax        # 8-byte Reload
	shlq	$3, %rax
	movq	10968(%rsp), %rcx       # 8-byte Reload
	addq	%rax, %rcx
	movq	6888(%rsp), %rdi        # 8-byte Reload
	movq	7112(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	6928(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 6848(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	7056(%rsp), %r8         # 8-byte Reload
	movq	6944(%rsp), %r9         # 8-byte Reload
	movq	6952(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	7048(%rsp), %rdi        # 8-byte Reload
	movq	6880(%rsp), %rsi        # 8-byte Reload
	movq	6912(%rsp), %rdx        # 8-byte Reload
	movq	7024(%rsp), %rcx        # 8-byte Reload
	movq	7000(%rsp), %r8         # 8-byte Reload
	movl	6900(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	6928(%rsp), %rdi        # 8-byte Reload
	movq	7112(%rsp), %rsi        # 8-byte Reload
	movq	6848(%rsp), %rdx        # 8-byte Reload
	movq	6928(%rsp), %rcx        # 8-byte Reload
	movq	7056(%rsp), %r8         # 8-byte Reload
	movq	6944(%rsp), %r9         # 8-byte Reload
	movq	6952(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	10968(%rsp), %rax       # 8-byte Reload
	movq	7152(%rsp), %rcx        # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
	movq	6888(%rsp), %rdi        # 8-byte Reload
	movq	7112(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 6840(%rsp)       # 8-byte Spill
	movq	6928(%rsp), %rdx        # 8-byte Reload
	movq	7024(%rsp), %rcx        # 8-byte Reload
	movq	6944(%rsp), %r8         # 8-byte Reload
	movq	6952(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	7048(%rsp), %rdi        # 8-byte Reload
	movq	6880(%rsp), %rsi        # 8-byte Reload
	movq	6912(%rsp), %rdx        # 8-byte Reload
	movq	7064(%rsp), %rcx        # 8-byte Reload
	movq	7008(%rsp), %r8         # 8-byte Reload
	movl	6900(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	6920(%rsp), %rdi        # 8-byte Reload
	movq	7112(%rsp), %rsi        # 8-byte Reload
	vmovsd	8488(%rsp), %xmm0       # 8-byte Reload
	movq	6928(%rsp), %rdx        # 8-byte Reload
	movq	7016(%rsp), %rcx        # 8-byte Reload
	movq	6944(%rsp), %r8         # 8-byte Reload
	movq	6952(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	6928(%rsp), %rdi        # 8-byte Reload
	movq	7112(%rsp), %rsi        # 8-byte Reload
	vmovsd	6840(%rsp), %xmm0       # 8-byte Reload
	movq	6928(%rsp), %rdx        # 8-byte Reload
	movq	7024(%rsp), %rcx        # 8-byte Reload
	movq	6944(%rsp), %r8         # 8-byte Reload
	movq	6952(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	6840(%rsp), %xmm0       # 8-byte Reload
	vmovsd	8488(%rsp), %xmm1       # 8-byte Reload
	vdivsd	%xmm1, %xmm0, %xmm2
	movq	6888(%rsp), %rdi        # 8-byte Reload
	movq	7112(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	6928(%rsp), %rdx        # 8-byte Reload
	movq	7064(%rsp), %rcx        # 8-byte Reload
	movq	6944(%rsp), %r8         # 8-byte Reload
	movq	6952(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 6832(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	7048(%rsp), %rdi        # 8-byte Reload
	movq	6880(%rsp), %rsi        # 8-byte Reload
	movq	6912(%rsp), %rdx        # 8-byte Reload
	movq	7040(%rsp), %rcx        # 8-byte Reload
	movq	7032(%rsp), %r8         # 8-byte Reload
	movl	6900(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	6920(%rsp), %rdi        # 8-byte Reload
	movq	7112(%rsp), %rsi        # 8-byte Reload
	movq	6848(%rsp), %rdx        # 8-byte Reload
	movq	6928(%rsp), %rcx        # 8-byte Reload
	movq	7056(%rsp), %r8         # 8-byte Reload
	movq	6944(%rsp), %r9         # 8-byte Reload
	movq	6952(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	6928(%rsp), %rdi        # 8-byte Reload
	movq	7112(%rsp), %rsi        # 8-byte Reload
	vmovsd	6832(%rsp), %xmm0       # 8-byte Reload
	movq	6928(%rsp), %rdx        # 8-byte Reload
	movq	7064(%rsp), %rcx        # 8-byte Reload
	movq	6944(%rsp), %r8         # 8-byte Reload
	movq	6952(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	10968(%rsp), %rax       # 8-byte Reload
	movq	7152(%rsp), %rcx        # 8-byte Reload
	vmovsd	6832(%rsp), %xmm0       # 8-byte Reload
	vmovsd	%xmm0, (%rax,%rcx,8)
.Ltmp307:
	.loc	2 815 0                 # eispack.c:815:0
	movq	6872(%rsp), %rdi        # 8-byte Reload
	movq	6880(%rsp), %rsi        # 8-byte Reload
	movq	6912(%rsp), %rdx        # 8-byte Reload
	movq	7104(%rsp), %rcx        # 8-byte Reload
	movq	7072(%rsp), %r8         # 8-byte Reload
	movl	6900(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	6920(%rsp), %rdi        # 8-byte Reload
	movq	7112(%rsp), %rsi        # 8-byte Reload
	movq	6928(%rsp), %rdx        # 8-byte Reload
	movq	6944(%rsp), %rcx        # 8-byte Reload
	movq	7080(%rsp), %r8         # 8-byte Reload
	movq	6944(%rsp), %r9         # 8-byte Reload
	movq	6952(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	6928(%rsp), %rdi        # 8-byte Reload
	movq	7112(%rsp), %rsi        # 8-byte Reload
	movq	7152(%rsp), %rdx        # 8-byte Reload
	movq	6928(%rsp), %rcx        # 8-byte Reload
	movq	7088(%rsp), %r8         # 8-byte Reload
	movq	6944(%rsp), %r9         # 8-byte Reload
	movq	6952(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	7152(%rsp), %rax        # 8-byte Reload
	addq	$1, %rax
	movq	6888(%rsp), %rdi        # 8-byte Reload
	movq	7112(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	6928(%rsp), %rcx        # 8-byte Reload
	movq	7104(%rsp), %r8         # 8-byte Reload
	movq	6944(%rsp), %r9         # 8-byte Reload
	movq	6952(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 6824(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	6872(%rsp), %rdi        # 8-byte Reload
	movq	6880(%rsp), %rsi        # 8-byte Reload
	movq	6912(%rsp), %rdx        # 8-byte Reload
	movq	7136(%rsp), %rcx        # 8-byte Reload
	movq	7096(%rsp), %r8         # 8-byte Reload
	movl	6900(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	6928(%rsp), %rdi        # 8-byte Reload
	movq	7112(%rsp), %rsi        # 8-byte Reload
	movq	6824(%rsp), %rdx        # 8-byte Reload
	movq	6928(%rsp), %rcx        # 8-byte Reload
	movq	7104(%rsp), %r8         # 8-byte Reload
	movq	6944(%rsp), %r9         # 8-byte Reload
	movq	6952(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	6824(%rsp), %rax        # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	6888(%rsp), %rdi        # 8-byte Reload
	movq	7144(%rsp), %rsi        # 8-byte Reload
	movq	6928(%rsp), %rcx        # 8-byte Reload
	movq	7136(%rsp), %r8         # 8-byte Reload
	movq	6944(%rsp), %r9         # 8-byte Reload
	movq	6952(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 6820(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	6872(%rsp), %rdi        # 8-byte Reload
	movq	6880(%rsp), %rsi        # 8-byte Reload
	movq	6912(%rsp), %rdx        # 8-byte Reload
	movq	6936(%rsp), %rcx        # 8-byte Reload
	movq	7120(%rsp), %r8         # 8-byte Reload
	movl	6900(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	8900(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	6920(%rsp), %rdi        # 8-byte Reload
	movq	7144(%rsp), %rsi        # 8-byte Reload
	movq	6928(%rsp), %rcx        # 8-byte Reload
	movq	7128(%rsp), %r8         # 8-byte Reload
	movq	6944(%rsp), %r9         # 8-byte Reload
	movq	6952(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	6820(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	6928(%rsp), %rdi        # 8-byte Reload
	movq	7144(%rsp), %rsi        # 8-byte Reload
	movq	6928(%rsp), %rcx        # 8-byte Reload
	movq	7136(%rsp), %r8         # 8-byte Reload
	movq	6944(%rsp), %r9         # 8-byte Reload
	movq	6952(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	6820(%rsp), %ebp        # 4-byte Reload
	movl	8900(%rsp), %r12d       # 4-byte Reload
	cmpl	%r12d, %ebp
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	6888(%rsp), %rdi        # 8-byte Reload
	movq	6928(%rsp), %rsi        # 8-byte Reload
	movq	6928(%rsp), %rcx        # 8-byte Reload
	movq	6936(%rsp), %r8         # 8-byte Reload
	movq	6944(%rsp), %r9         # 8-byte Reload
	movq	6952(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 6819(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	6872(%rsp), %rdi        # 8-byte Reload
	movq	6880(%rsp), %rsi        # 8-byte Reload
	movq	6912(%rsp), %rdx        # 8-byte Reload
	movq	6904(%rsp), %rcx        # 8-byte Reload
	movq	6920(%rsp), %r8         # 8-byte Reload
	movl	6900(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	6864(%rsp), %rdi        # 8-byte Reload
	movq	6944(%rsp), %rsi        # 8-byte Reload
	movq	6944(%rsp), %rdx        # 8-byte Reload
	movq	6928(%rsp), %rcx        # 8-byte Reload
	movq	6856(%rsp), %r8         # 8-byte Reload
	movq	6944(%rsp), %r9         # 8-byte Reload
	movq	6952(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	6920(%rsp), %rdi        # 8-byte Reload
	movq	6944(%rsp), %rsi        # 8-byte Reload
	movq	6944(%rsp), %rdx        # 8-byte Reload
	movq	6928(%rsp), %rcx        # 8-byte Reload
	movq	6912(%rsp), %r8         # 8-byte Reload
	movq	6944(%rsp), %r9         # 8-byte Reload
	movq	6952(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	6819(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	6928(%rsp), %rdi        # 8-byte Reload
	movq	6928(%rsp), %rsi        # 8-byte Reload
	movq	6928(%rsp), %rcx        # 8-byte Reload
	movq	6936(%rsp), %r8         # 8-byte Reload
	movq	6944(%rsp), %r9         # 8-byte Reload
	movq	6952(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	6819(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	movq	6824(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 8112(%rsp)        # 8-byte Spill
	jne	.LBB9_17
	jmp	.LBB9_16
.Ltmp308:
.LBB9_17:                               # %.loopexit
                                        #   in Loop: Header=BB9_8 Depth=1
	vxorps	%xmm0, %xmm0, %xmm0
	movabsq	$0, %rax
	movabsq	$1, %rcx
	leaq	.L.str176, %rdx
	leaq	.L.str781, %rsi
	movabsq	$2, %rdi
	leaq	.L.str178, %r8
	movabsq	$3, %r9
	leaq	.L.str134, %r10
	movabsq	$820, %r11              # imm = 0x334
	leaq	.L.str57131, %rbx
	leaq	.L.str175149, %r14
	leaq	.L.str177, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 6808(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 6800(%rsp)        # 8-byte Spill
	leaq	.L.str110, %rax
	movq	%rax, 6792(%rsp)        # 8-byte Spill
	leaq	.L.str1488, %rax
	movq	%rax, 6784(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	.loc	2 820 0                 # eispack.c:820:0
.Ltmp309:
	movq	%rdi, 6776(%rsp)        # 8-byte Spill
	movq	%r11, %rdi
	movq	%rsi, 6768(%rsp)        # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, 6760(%rsp)        # 8-byte Spill
	movq	%r14, %rdx
	movq	%rax, 6752(%rsp)        # 8-byte Spill
	movq	6760(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 6744(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	6752(%rsp), %rax        # 8-byte Reload
	movq	%r8, 6736(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 6728(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	vmovsd	%xmm0, 6720(%rsp)       # 8-byte Spill
	movq	%r15, 6712(%rsp)        # 8-byte Spill
	movl	%ebp, 6708(%rsp)        # 4-byte Spill
	movl	%r12d, 6704(%rsp)       # 4-byte Spill
	movq	%r13, 6696(%rsp)        # 8-byte Spill
	movq	%r14, 6688(%rsp)        # 8-byte Spill
	movq	%rbx, 6680(%rsp)        # 8-byte Spill
	movq	%r10, 6672(%rsp)        # 8-byte Spill
	movq	%r11, 6664(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	6776(%rsp), %rdi        # 8-byte Reload
	movq	6800(%rsp), %rsi        # 8-byte Reload
	movq	6808(%rsp), %rdx        # 8-byte Reload
	movq	6808(%rsp), %rcx        # 8-byte Reload
	movq	6784(%rsp), %r8         # 8-byte Reload
	movq	6808(%rsp), %r9         # 8-byte Reload
	movq	6768(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	8880(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	6744(%rsp), %rdi        # 8-byte Reload
	movq	6800(%rsp), %rsi        # 8-byte Reload
	movq	6744(%rsp), %rcx        # 8-byte Reload
	movq	6792(%rsp), %r8         # 8-byte Reload
	movq	6808(%rsp), %r9         # 8-byte Reload
	movq	6768(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	8880(%rsp), %ebp        # 4-byte Reload
	cmpl	$0, %ebp
	setl	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %r12d
	movl	%r12d, %edx
	movq	6696(%rsp), %rdi        # 8-byte Reload
	movq	6744(%rsp), %rsi        # 8-byte Reload
	movq	6744(%rsp), %rcx        # 8-byte Reload
	movq	6760(%rsp), %r8         # 8-byte Reload
	movq	6808(%rsp), %r9         # 8-byte Reload
	movq	6768(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 6663(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	6664(%rsp), %rdi        # 8-byte Reload
	movq	6680(%rsp), %rsi        # 8-byte Reload
	movq	6688(%rsp), %rdx        # 8-byte Reload
	movq	6712(%rsp), %rcx        # 8-byte Reload
	movq	6776(%rsp), %r8         # 8-byte Reload
	movl	6708(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	6728(%rsp), %rdi        # 8-byte Reload
	movq	6808(%rsp), %rsi        # 8-byte Reload
	movq	6808(%rsp), %rdx        # 8-byte Reload
	movq	6744(%rsp), %rcx        # 8-byte Reload
	movq	6672(%rsp), %r8         # 8-byte Reload
	movq	6808(%rsp), %r9         # 8-byte Reload
	movq	6768(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	6776(%rsp), %rdi        # 8-byte Reload
	movq	6808(%rsp), %rsi        # 8-byte Reload
	movq	6808(%rsp), %rdx        # 8-byte Reload
	movq	6744(%rsp), %rcx        # 8-byte Reload
	movq	6736(%rsp), %r8         # 8-byte Reload
	movq	6808(%rsp), %r9         # 8-byte Reload
	movq	6768(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	6663(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	6744(%rsp), %rdi        # 8-byte Reload
	movq	6744(%rsp), %rsi        # 8-byte Reload
	movq	6744(%rsp), %rcx        # 8-byte Reload
	movq	6760(%rsp), %r8         # 8-byte Reload
	movq	6808(%rsp), %r9         # 8-byte Reload
	movq	6768(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	6663(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	movq	6808(%rsp), %rcx        # 8-byte Reload
	vmovsd	6720(%rsp), %xmm0       # 8-byte Reload
	vmovsd	6720(%rsp), %xmm1       # 8-byte Reload
	movq	%rcx, 6648(%rsp)        # 8-byte Spill
	vmovsd	%xmm0, 6640(%rsp)       # 8-byte Spill
	vmovsd	%xmm1, 8104(%rsp)       # 8-byte Spill
	jne	.LBB9_19
.LBB9_18:                               # %.lr.ph7
                                        #   Parent Loop BB9_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vmovsd	6640(%rsp), %xmm0       # 8-byte Reload
	movq	6648(%rsp), %rax        # 8-byte Reload
	movabsq	$1, %rcx
	leaq	.L.str187, %rdx
	movabsq	$0, %rsi
	leaq	.L.str781, %rdi
	movabsq	$2, %r8
	leaq	.L.str178, %r9
	movabsq	$3, %r10
	leaq	.L.str134, %r11
	movabsq	$820, %rbx              # imm = 0x334
	leaq	.L.str57131, %r14
	leaq	.L.str188, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 6632(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 6624(%rsp)        # 8-byte Spill
	leaq	.L.str186, %rax
	movq	%rax, 6616(%rsp)        # 8-byte Spill
	leaq	.L.str107, %rax
	movq	%rax, 6608(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 6600(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 6592(%rsp)        # 8-byte Spill
	leaq	.L.str180, %rax
	movq	%rax, 6584(%rsp)        # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, 6576(%rsp)        # 8-byte Spill
	leaq	.L.str179, %rax
	movq	%rax, 6568(%rsp)        # 8-byte Spill
	leaq	.L.str1488, %rax
	movq	%rax, 6560(%rsp)        # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, 6552(%rsp)        # 8-byte Spill
	leaq	.L.str182, %rax
	movq	%rax, 6544(%rsp)        # 8-byte Spill
	leaq	.L.str181, %rax
	movq	%rax, 6536(%rsp)        # 8-byte Spill
	leaq	.L.str185, %rax
	movq	%rax, 6528(%rsp)        # 8-byte Spill
	movabsq	$822, %rax              # imm = 0x336
	movq	%rax, 6520(%rsp)        # 8-byte Spill
	movabsq	$9, %rax
	movq	%rax, 6512(%rsp)        # 8-byte Spill
	leaq	.L.str184, %rax
	movq	%rax, 6504(%rsp)        # 8-byte Spill
	movabsq	$13, %rax
	movq	%rax, 6496(%rsp)        # 8-byte Spill
	leaq	.L.str183, %rax
	movq	%rax, 6488(%rsp)        # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, 6480(%rsp)        # 8-byte Spill
	leaq	.L.str82, %rax
	movq	%rax, 6472(%rsp)        # 8-byte Spill
	movabsq	$29, %rax
	vxorps	%xmm1, %xmm1, %xmm1
	movq	%rax, 6464(%rsp)        # 8-byte Spill
	leaq	.L.str175149, %rax
	movq	%rax, 6456(%rsp)        # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 6448(%rsp)        # 8-byte Spill
	movabsq	$48, %rax
	.loc	2 822 0                 # eispack.c:822:0
.Ltmp310:
	movq	%rax, 6440(%rsp)        # 8-byte Spill
	movq	6448(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 6432(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 6424(%rsp)        # 8-byte Spill
	movq	%r14, %rsi
	movq	%rdx, 6416(%rsp)        # 8-byte Spill
	movq	%r9, %rdx
	movq	6568(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 6408(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	6440(%rsp), %rax        # 8-byte Reload
	movq	%r8, 6400(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 6392(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	vmovsd	%xmm0, 6384(%rsp)       # 8-byte Spill
	movl	%ebp, 6380(%rsp)        # 4-byte Spill
	movl	%r12d, 6376(%rsp)       # 4-byte Spill
	movq	%r13, 6368(%rsp)        # 8-byte Spill
	vmovsd	%xmm1, 6360(%rsp)       # 8-byte Spill
	movq	%r15, 6352(%rsp)        # 8-byte Spill
	movq	%r14, 6344(%rsp)        # 8-byte Spill
	movq	%r10, 6336(%rsp)        # 8-byte Spill
	movq	%r11, 6328(%rsp)        # 8-byte Spill
	movq	%rbx, 6320(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	6400(%rsp), %rdi        # 8-byte Reload
	movq	6592(%rsp), %rsi        # 8-byte Reload
	movq	6424(%rsp), %rdx        # 8-byte Reload
	movq	6424(%rsp), %rcx        # 8-byte Reload
	movq	6560(%rsp), %r8         # 8-byte Reload
	movq	6408(%rsp), %r9         # 8-byte Reload
	movq	6456(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	6408(%rsp), %rdi        # 8-byte Reload
	movq	6592(%rsp), %rsi        # 8-byte Reload
	movq	6424(%rsp), %rdx        # 8-byte Reload
	movq	6408(%rsp), %rcx        # 8-byte Reload
	movq	6584(%rsp), %r8         # 8-byte Reload
	movq	6408(%rsp), %r9         # 8-byte Reload
	movq	6392(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	6368(%rsp), %rdi        # 8-byte Reload
	movq	6592(%rsp), %rsi        # 8-byte Reload
	movq	6632(%rsp), %rdx        # 8-byte Reload
	movq	6408(%rsp), %rcx        # 8-byte Reload
	movq	6568(%rsp), %r8         # 8-byte Reload
	movq	6424(%rsp), %r9         # 8-byte Reload
	movq	6392(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	6448(%rsp), %rdi        # 8-byte Reload
	movq	6344(%rsp), %rsi        # 8-byte Reload
	movq	6392(%rsp), %rdx        # 8-byte Reload
	movq	6536(%rsp), %rcx        # 8-byte Reload
	movq	6440(%rsp), %r8         # 8-byte Reload
	movl	6380(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	6400(%rsp), %rdi        # 8-byte Reload
	movq	6592(%rsp), %rsi        # 8-byte Reload
	vmovsd	6360(%rsp), %xmm0       # 8-byte Reload
	movq	6424(%rsp), %rdx        # 8-byte Reload
	movq	6560(%rsp), %rcx        # 8-byte Reload
	movq	6408(%rsp), %r8         # 8-byte Reload
	movq	6456(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	6408(%rsp), %rdi        # 8-byte Reload
	movq	6592(%rsp), %rsi        # 8-byte Reload
	movq	6424(%rsp), %rdx        # 8-byte Reload
	movq	6408(%rsp), %rcx        # 8-byte Reload
	movq	6544(%rsp), %r8         # 8-byte Reload
	movq	6408(%rsp), %r9         # 8-byte Reload
	movq	6392(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	6368(%rsp), %rdi        # 8-byte Reload
	movq	6592(%rsp), %rsi        # 8-byte Reload
	vmovsd	6384(%rsp), %xmm0       # 8-byte Reload
	movq	6408(%rsp), %rdx        # 8-byte Reload
	movq	6536(%rsp), %rcx        # 8-byte Reload
	movq	6424(%rsp), %r8         # 8-byte Reload
	movq	6392(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	6520(%rsp), %rdi        # 8-byte Reload
	movq	6344(%rsp), %rsi        # 8-byte Reload
	movq	6392(%rsp), %rdx        # 8-byte Reload
	movq	6488(%rsp), %rcx        # 8-byte Reload
	movq	6464(%rsp), %r8         # 8-byte Reload
	movl	6380(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	6400(%rsp), %rdi        # 8-byte Reload
	movq	6592(%rsp), %rsi        # 8-byte Reload
	movq	6632(%rsp), %rdx        # 8-byte Reload
	movq	6408(%rsp), %rcx        # 8-byte Reload
	movq	6568(%rsp), %r8         # 8-byte Reload
	movq	6424(%rsp), %r9         # 8-byte Reload
	movq	6432(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	6408(%rsp), %rdi        # 8-byte Reload
	movq	6592(%rsp), %rsi        # 8-byte Reload
	movq	10968(%rsp), %rdx       # 8-byte Reload
	movq	6408(%rsp), %rcx        # 8-byte Reload
	movq	6472(%rsp), %r8         # 8-byte Reload
	movq	6424(%rsp), %r9         # 8-byte Reload
	movq	6432(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	6632(%rsp), %rax        # 8-byte Reload
	shlq	$3, %rax
	movq	10968(%rsp), %rcx       # 8-byte Reload
	addq	%rax, %rcx
	movq	6368(%rsp), %rdi        # 8-byte Reload
	movq	6592(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	6408(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 6312(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	6488(%rsp), %r8         # 8-byte Reload
	movq	6424(%rsp), %r9         # 8-byte Reload
	movq	6432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	6520(%rsp), %rdi        # 8-byte Reload
	movq	6344(%rsp), %rsi        # 8-byte Reload
	movq	6392(%rsp), %rdx        # 8-byte Reload
	movq	6504(%rsp), %rcx        # 8-byte Reload
	movq	6480(%rsp), %r8         # 8-byte Reload
	movl	6380(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	6408(%rsp), %rdi        # 8-byte Reload
	movq	6592(%rsp), %rsi        # 8-byte Reload
	movq	6312(%rsp), %rdx        # 8-byte Reload
	movq	6408(%rsp), %rcx        # 8-byte Reload
	movq	6488(%rsp), %r8         # 8-byte Reload
	movq	6424(%rsp), %r9         # 8-byte Reload
	movq	6432(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	10968(%rsp), %rax       # 8-byte Reload
	movq	6632(%rsp), %rcx        # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
	movq	6368(%rsp), %rdi        # 8-byte Reload
	movq	6592(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 6304(%rsp)       # 8-byte Spill
	movq	6408(%rsp), %rdx        # 8-byte Reload
	movq	6504(%rsp), %rcx        # 8-byte Reload
	movq	6424(%rsp), %r8         # 8-byte Reload
	movq	6432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	6520(%rsp), %rdi        # 8-byte Reload
	movq	6344(%rsp), %rsi        # 8-byte Reload
	movq	6392(%rsp), %rdx        # 8-byte Reload
	movq	6528(%rsp), %rcx        # 8-byte Reload
	movq	6496(%rsp), %r8         # 8-byte Reload
	movl	6380(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	6400(%rsp), %rdi        # 8-byte Reload
	movq	6592(%rsp), %rsi        # 8-byte Reload
	vmovsd	6304(%rsp), %xmm0       # 8-byte Reload
	movq	6408(%rsp), %rdx        # 8-byte Reload
	movq	6504(%rsp), %rcx        # 8-byte Reload
	movq	6424(%rsp), %r8         # 8-byte Reload
	movq	6432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	6408(%rsp), %rdi        # 8-byte Reload
	movq	6592(%rsp), %rsi        # 8-byte Reload
	vmovsd	6304(%rsp), %xmm0       # 8-byte Reload
	movq	6408(%rsp), %rdx        # 8-byte Reload
	movq	6504(%rsp), %rcx        # 8-byte Reload
	movq	6424(%rsp), %r8         # 8-byte Reload
	movq	6432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	6304(%rsp), %xmm0       # 8-byte Reload
	vmulsd	%xmm0, %xmm0, %xmm1
	movq	6368(%rsp), %rdi        # 8-byte Reload
	movq	6592(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm1, %xmm0
	movq	6408(%rsp), %rdx        # 8-byte Reload
	movq	6528(%rsp), %rcx        # 8-byte Reload
	movq	6424(%rsp), %r8         # 8-byte Reload
	movq	6432(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm1, 6296(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	6520(%rsp), %rdi        # 8-byte Reload
	movq	6344(%rsp), %rsi        # 8-byte Reload
	movq	6392(%rsp), %rdx        # 8-byte Reload
	movq	6544(%rsp), %rcx        # 8-byte Reload
	movq	6512(%rsp), %r8         # 8-byte Reload
	movl	6380(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	6400(%rsp), %rdi        # 8-byte Reload
	movq	6592(%rsp), %rsi        # 8-byte Reload
	vmovsd	6296(%rsp), %xmm0       # 8-byte Reload
	movq	6408(%rsp), %rdx        # 8-byte Reload
	movq	6528(%rsp), %rcx        # 8-byte Reload
	movq	6424(%rsp), %r8         # 8-byte Reload
	movq	6432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	6408(%rsp), %rdi        # 8-byte Reload
	movq	6592(%rsp), %rsi        # 8-byte Reload
	vmovsd	6384(%rsp), %xmm0       # 8-byte Reload
	movq	6408(%rsp), %rdx        # 8-byte Reload
	movq	6536(%rsp), %rcx        # 8-byte Reload
	movq	6424(%rsp), %r8         # 8-byte Reload
	movq	6432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	6384(%rsp), %xmm0       # 8-byte Reload
	vmovsd	6296(%rsp), %xmm1       # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
	movq	6368(%rsp), %rdi        # 8-byte Reload
	movq	6592(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	6408(%rsp), %rdx        # 8-byte Reload
	movq	6544(%rsp), %rcx        # 8-byte Reload
	movq	6424(%rsp), %r8         # 8-byte Reload
	movq	6432(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 6288(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
.Ltmp311:
	#DEBUG_VALUE: tred1:h <- [RSP+6288]
	.loc	2 820 0                 # eispack.c:820:0
	movq	6320(%rsp), %rdi        # 8-byte Reload
	movq	6344(%rsp), %rsi        # 8-byte Reload
	movq	6392(%rsp), %rdx        # 8-byte Reload
	movq	6584(%rsp), %rcx        # 8-byte Reload
	movq	6552(%rsp), %r8         # 8-byte Reload
	movl	6380(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	6400(%rsp), %rdi        # 8-byte Reload
	movq	6592(%rsp), %rsi        # 8-byte Reload
	movq	6408(%rsp), %rdx        # 8-byte Reload
	movq	6424(%rsp), %rcx        # 8-byte Reload
	movq	6560(%rsp), %r8         # 8-byte Reload
	movq	6424(%rsp), %r9         # 8-byte Reload
	movq	6432(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	6408(%rsp), %rdi        # 8-byte Reload
	movq	6592(%rsp), %rsi        # 8-byte Reload
	movq	6632(%rsp), %rdx        # 8-byte Reload
	movq	6408(%rsp), %rcx        # 8-byte Reload
	movq	6568(%rsp), %r8         # 8-byte Reload
	movq	6424(%rsp), %r9         # 8-byte Reload
	movq	6432(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	6632(%rsp), %rax        # 8-byte Reload
	addq	$1, %rax
	movq	6368(%rsp), %rdi        # 8-byte Reload
	movq	6592(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	6408(%rsp), %rcx        # 8-byte Reload
	movq	6584(%rsp), %r8         # 8-byte Reload
	movq	6424(%rsp), %r9         # 8-byte Reload
	movq	6432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 6280(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	6320(%rsp), %rdi        # 8-byte Reload
	movq	6344(%rsp), %rsi        # 8-byte Reload
	movq	6392(%rsp), %rdx        # 8-byte Reload
	movq	6616(%rsp), %rcx        # 8-byte Reload
	movq	6576(%rsp), %r8         # 8-byte Reload
	movl	6380(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	6408(%rsp), %rdi        # 8-byte Reload
	movq	6592(%rsp), %rsi        # 8-byte Reload
	movq	6280(%rsp), %rdx        # 8-byte Reload
	movq	6408(%rsp), %rcx        # 8-byte Reload
	movq	6584(%rsp), %r8         # 8-byte Reload
	movq	6424(%rsp), %r9         # 8-byte Reload
	movq	6432(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	6280(%rsp), %rax        # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	6368(%rsp), %rdi        # 8-byte Reload
	movq	6624(%rsp), %rsi        # 8-byte Reload
	movq	6408(%rsp), %rcx        # 8-byte Reload
	movq	6616(%rsp), %r8         # 8-byte Reload
	movq	6424(%rsp), %r9         # 8-byte Reload
	movq	6432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 6276(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	6320(%rsp), %rdi        # 8-byte Reload
	movq	6344(%rsp), %rsi        # 8-byte Reload
	movq	6392(%rsp), %rdx        # 8-byte Reload
	movq	6416(%rsp), %rcx        # 8-byte Reload
	movq	6600(%rsp), %r8         # 8-byte Reload
	movl	6380(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	8900(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	6400(%rsp), %rdi        # 8-byte Reload
	movq	6624(%rsp), %rsi        # 8-byte Reload
	movq	6408(%rsp), %rcx        # 8-byte Reload
	movq	6608(%rsp), %r8         # 8-byte Reload
	movq	6424(%rsp), %r9         # 8-byte Reload
	movq	6432(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	6276(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	6408(%rsp), %rdi        # 8-byte Reload
	movq	6624(%rsp), %rsi        # 8-byte Reload
	movq	6408(%rsp), %rcx        # 8-byte Reload
	movq	6616(%rsp), %r8         # 8-byte Reload
	movq	6424(%rsp), %r9         # 8-byte Reload
	movq	6432(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	6276(%rsp), %ebp        # 4-byte Reload
	movl	8900(%rsp), %r12d       # 4-byte Reload
	cmpl	%r12d, %ebp
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	6368(%rsp), %rdi        # 8-byte Reload
	movq	6408(%rsp), %rsi        # 8-byte Reload
	movq	6408(%rsp), %rcx        # 8-byte Reload
	movq	6416(%rsp), %r8         # 8-byte Reload
	movq	6424(%rsp), %r9         # 8-byte Reload
	movq	6432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 6275(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	6320(%rsp), %rdi        # 8-byte Reload
	movq	6344(%rsp), %rsi        # 8-byte Reload
	movq	6392(%rsp), %rdx        # 8-byte Reload
	movq	6352(%rsp), %rcx        # 8-byte Reload
	movq	6400(%rsp), %r8         # 8-byte Reload
	movl	6380(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	6336(%rsp), %rdi        # 8-byte Reload
	movq	6424(%rsp), %rsi        # 8-byte Reload
	movq	6424(%rsp), %rdx        # 8-byte Reload
	movq	6408(%rsp), %rcx        # 8-byte Reload
	movq	6328(%rsp), %r8         # 8-byte Reload
	movq	6424(%rsp), %r9         # 8-byte Reload
	movq	6432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	6400(%rsp), %rdi        # 8-byte Reload
	movq	6424(%rsp), %rsi        # 8-byte Reload
	movq	6424(%rsp), %rdx        # 8-byte Reload
	movq	6408(%rsp), %rcx        # 8-byte Reload
	movq	6392(%rsp), %r8         # 8-byte Reload
	movq	6424(%rsp), %r9         # 8-byte Reload
	movq	6432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	6275(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	6408(%rsp), %rdi        # 8-byte Reload
	movq	6408(%rsp), %rsi        # 8-byte Reload
	movq	6408(%rsp), %rcx        # 8-byte Reload
	movq	6416(%rsp), %r8         # 8-byte Reload
	movq	6424(%rsp), %r9         # 8-byte Reload
	movq	6432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	6275(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	movq	6280(%rsp), %rcx        # 8-byte Reload
	vmovsd	6288(%rsp), %xmm0       # 8-byte Reload
	vmovsd	6288(%rsp), %xmm1       # 8-byte Reload
	movq	%rcx, 6648(%rsp)        # 8-byte Spill
	vmovsd	%xmm0, 6640(%rsp)       # 8-byte Spill
	vmovsd	%xmm1, 8104(%rsp)       # 8-byte Spill
	jne	.LBB9_19
	jmp	.LBB9_18
.Ltmp312:
.LBB9_19:                               # %._crit_edge8
                                        #   in Loop: Header=BB9_8 Depth=1
	vmovsd	8104(%rsp), %xmm0       # 8-byte Reload
	movabsq	$1, %rax
	movabsq	$64, %rcx
	leaq	.L.str196, %rdx
	movabsq	$0, %rsi
	leaq	.L.str781, %rdi
	movabsq	$2, %r8
	leaq	r8_sign, %r9
	leaq	.L.str48122, %r10
	movabsq	$827, %r11              # imm = 0x33B
	leaq	.L.str57131, %rbx
	leaq	.L.str134, %r14
	leaq	.L.str199, %r15
	movabsq	$49, %r12
	movl	$0, %ebp
	movl	$1, %r13d
	movq	%rax, 6264(%rsp)        # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 6256(%rsp)        # 8-byte Spill
	leaq	.L.str197, %rax
	movq	%rax, 6248(%rsp)        # 8-byte Spill
	leaq	.L.str189, %rax
	movq	%rax, 6240(%rsp)        # 8-byte Spill
	leaq	sqrt, %rax
	movq	%rax, 6232(%rsp)        # 8-byte Spill
	leaq	.L.str198, %rax
	movq	%rax, 6224(%rsp)        # 8-byte Spill
	leaq	.L.str195, %rax
	movq	%rax, 6216(%rsp)        # 8-byte Spill
	movabsq	$826, %rax              # imm = 0x33A
	movq	%rax, 6208(%rsp)        # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, 6200(%rsp)        # 8-byte Spill
	leaq	.L.str82, %rax
	movq	%rax, 6192(%rsp)        # 8-byte Spill
	leaq	.L.str194, %rax
	movq	%rax, 6184(%rsp)        # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 6176(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 6168(%rsp)        # 8-byte Spill
	leaq	.L.str110, %rax
	movq	%rax, 6160(%rsp)        # 8-byte Spill
	movabsq	$35, %rax
	movq	%rax, 6152(%rsp)        # 8-byte Spill
	leaq	.L.str191, %rax
	movq	%rax, 6144(%rsp)        # 8-byte Spill
	leaq	.L.str192, %rax
	movq	%rax, 6136(%rsp)        # 8-byte Spill
	movabsq	$825, %rax              # imm = 0x339
	movq	%rax, 6128(%rsp)        # 8-byte Spill
	leaq	.L.str193, %rax
	movq	%rax, 6120(%rsp)        # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, 6112(%rsp)        # 8-byte Spill
	leaq	.L.str160, %rax
	movq	%rax, 6104(%rsp)        # 8-byte Spill
	leaq	.L.str104, %rax
	movq	%rax, 6096(%rsp)        # 8-byte Spill
	leaq	.L.str118, %rax
	movq	%rax, 6088(%rsp)        # 8-byte Spill
	leaq	.L.str190, %rax
	movq	%rax, 6080(%rsp)        # 8-byte Spill
	movabsq	$13, %rax
	movq	%rax, 6072(%rsp)        # 8-byte Spill
	leaq	.L.str175149, %rax
	vxorps	%xmm1, %xmm1, %xmm1
	movq	%rax, 6064(%rsp)        # 8-byte Spill
	leaq	.L.str1488, %rax
	movq	%rax, 6056(%rsp)        # 8-byte Spill
	leaq	.L.str182, %rax
	movq	%rax, 6048(%rsp)        # 8-byte Spill
	leaq	.L.str178, %rax
	movq	%rax, 6040(%rsp)        # 8-byte Spill
	movabsq	$3, %rax
	movq	%rax, 6032(%rsp)        # 8-byte Spill
	leaq	.L.str130, %rax
	movq	%rax, 6024(%rsp)        # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 6016(%rsp)        # 8-byte Spill
	movabsq	$48, %rax
	.loc	2 825 0                 # eispack.c:825:0
	movq	%rax, 6008(%rsp)        # 8-byte Spill
	movq	6016(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 6000(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 5992(%rsp)        # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, 5984(%rsp)        # 8-byte Spill
	movq	%r14, %rdx
	movq	6240(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 5976(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	6008(%rsp), %rax        # 8-byte Reload
	movq	%r8, 5968(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 5960(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	vmovsd	%xmm0, 5952(%rsp)       # 8-byte Spill
	movq	%r12, 5944(%rsp)        # 8-byte Spill
	movl	%ebp, 5940(%rsp)        # 4-byte Spill
	movl	%r13d, 5936(%rsp)       # 4-byte Spill
	vmovsd	%xmm1, 5928(%rsp)       # 8-byte Spill
	movq	%r15, 5920(%rsp)        # 8-byte Spill
	movq	%r14, 5912(%rsp)        # 8-byte Spill
	movq	%r10, 5904(%rsp)        # 8-byte Spill
	movq	%r11, 5896(%rsp)        # 8-byte Spill
	movq	%rbx, 5888(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	6032(%rsp), %rdi        # 8-byte Reload
	movq	5976(%rsp), %rsi        # 8-byte Reload
	vmovsd	5928(%rsp), %xmm0       # 8-byte Reload
	movq	5992(%rsp), %rdx        # 8-byte Reload
	movq	6056(%rsp), %rcx        # 8-byte Reload
	movq	6264(%rsp), %r8         # 8-byte Reload
	movq	6024(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	5968(%rsp), %rdi        # 8-byte Reload
	movq	5976(%rsp), %rsi        # 8-byte Reload
	movq	5992(%rsp), %rdx        # 8-byte Reload
	movq	6264(%rsp), %rcx        # 8-byte Reload
	movq	6048(%rsp), %r8         # 8-byte Reload
	movq	6264(%rsp), %r9         # 8-byte Reload
	movq	6040(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	6264(%rsp), %rdi        # 8-byte Reload
	movq	5976(%rsp), %rsi        # 8-byte Reload
	vmovsd	5928(%rsp), %xmm0       # 8-byte Reload
	movq	5992(%rsp), %rdx        # 8-byte Reload
	movq	6056(%rsp), %rcx        # 8-byte Reload
	movq	6264(%rsp), %r8         # 8-byte Reload
	movq	6064(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	6256(%rsp), %rdi        # 8-byte Reload
	movq	5976(%rsp), %rsi        # 8-byte Reload
	vmovsd	5952(%rsp), %xmm0       # 8-byte Reload
	movq	6264(%rsp), %rdx        # 8-byte Reload
	movq	6240(%rsp), %rcx        # 8-byte Reload
	movq	5992(%rsp), %r8         # 8-byte Reload
	movq	6064(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	6128(%rsp), %rdi        # 8-byte Reload
	movq	5888(%rsp), %rsi        # 8-byte Reload
	movq	5912(%rsp), %rdx        # 8-byte Reload
	movq	6080(%rsp), %rcx        # 8-byte Reload
	movq	6072(%rsp), %r8         # 8-byte Reload
	movl	5940(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	5968(%rsp), %rdi        # 8-byte Reload
	movq	5976(%rsp), %rsi        # 8-byte Reload
	vmovsd	5952(%rsp), %xmm0       # 8-byte Reload
	movq	6264(%rsp), %rdx        # 8-byte Reload
	movq	6240(%rsp), %rcx        # 8-byte Reload
	movq	5992(%rsp), %r8         # 8-byte Reload
	movq	6000(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	6264(%rsp), %rdi        # 8-byte Reload
	movq	5976(%rsp), %rsi        # 8-byte Reload
	vmovsd	8488(%rsp), %xmm0       # 8-byte Reload
	movq	6264(%rsp), %rdx        # 8-byte Reload
	movq	6088(%rsp), %rcx        # 8-byte Reload
	movq	5992(%rsp), %r8         # 8-byte Reload
	movq	6000(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	8488(%rsp), %xmm0       # 8-byte Reload
	vmovsd	5952(%rsp), %xmm1       # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	6256(%rsp), %rdi        # 8-byte Reload
	movq	5976(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	6264(%rsp), %rdx        # 8-byte Reload
	movq	6080(%rsp), %rcx        # 8-byte Reload
	movq	5992(%rsp), %r8         # 8-byte Reload
	movq	6000(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 5880(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	6128(%rsp), %rdi        # 8-byte Reload
	movq	5888(%rsp), %rsi        # 8-byte Reload
	movq	5912(%rsp), %rdx        # 8-byte Reload
	movq	6144(%rsp), %rcx        # 8-byte Reload
	movq	6072(%rsp), %r8         # 8-byte Reload
	movl	5940(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	5968(%rsp), %rdi        # 8-byte Reload
	movq	5976(%rsp), %rsi        # 8-byte Reload
	vmovsd	5880(%rsp), %xmm0       # 8-byte Reload
	movq	6264(%rsp), %rdx        # 8-byte Reload
	movq	6080(%rsp), %rcx        # 8-byte Reload
	movq	5992(%rsp), %r8         # 8-byte Reload
	movq	6000(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	6264(%rsp), %rdi        # 8-byte Reload
	movq	5976(%rsp), %rsi        # 8-byte Reload
	vmovsd	8488(%rsp), %xmm0       # 8-byte Reload
	movq	6264(%rsp), %rdx        # 8-byte Reload
	movq	6088(%rsp), %rcx        # 8-byte Reload
	movq	5992(%rsp), %r8         # 8-byte Reload
	movq	6000(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	8488(%rsp), %xmm0       # 8-byte Reload
	vmovsd	5880(%rsp), %xmm1       # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	6256(%rsp), %rdi        # 8-byte Reload
	movq	5976(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	6264(%rsp), %rdx        # 8-byte Reload
	movq	6144(%rsp), %rcx        # 8-byte Reload
	movq	5992(%rsp), %r8         # 8-byte Reload
	movq	6000(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 5872(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	6128(%rsp), %rdi        # 8-byte Reload
	movq	5888(%rsp), %rsi        # 8-byte Reload
	movq	5912(%rsp), %rdx        # 8-byte Reload
	movq	6136(%rsp), %rcx        # 8-byte Reload
	movq	6176(%rsp), %r8         # 8-byte Reload
	movl	5940(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	5968(%rsp), %rdi        # 8-byte Reload
	movq	5976(%rsp), %rsi        # 8-byte Reload
	movq	8888(%rsp), %rdx        # 8-byte Reload
	movq	6264(%rsp), %rcx        # 8-byte Reload
	movq	6096(%rsp), %r8         # 8-byte Reload
	movq	5992(%rsp), %r9         # 8-byte Reload
	movq	6000(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	6264(%rsp), %rdi        # 8-byte Reload
	movq	5976(%rsp), %rsi        # 8-byte Reload
	movq	10952(%rsp), %rdx       # 8-byte Reload
	movq	6264(%rsp), %rcx        # 8-byte Reload
	movq	6104(%rsp), %r8         # 8-byte Reload
	movq	5992(%rsp), %r9         # 8-byte Reload
	movq	6000(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	8888(%rsp), %rax        # 8-byte Reload
	shlq	$3, %rax
	movq	10952(%rsp), %rcx       # 8-byte Reload
	addq	%rax, %rcx
	movq	6256(%rsp), %rdi        # 8-byte Reload
	movq	5976(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	6264(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 5864(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	6136(%rsp), %r8         # 8-byte Reload
	movq	5992(%rsp), %r9         # 8-byte Reload
	movq	6000(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	6128(%rsp), %rdi        # 8-byte Reload
	movq	5888(%rsp), %rsi        # 8-byte Reload
	movq	5912(%rsp), %rdx        # 8-byte Reload
	movq	6120(%rsp), %rcx        # 8-byte Reload
	movq	6112(%rsp), %r8         # 8-byte Reload
	movl	5940(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	5968(%rsp), %rdi        # 8-byte Reload
	movq	5976(%rsp), %rsi        # 8-byte Reload
	movq	5864(%rsp), %rdx        # 8-byte Reload
	movq	6264(%rsp), %rcx        # 8-byte Reload
	movq	6136(%rsp), %r8         # 8-byte Reload
	movq	5992(%rsp), %r9         # 8-byte Reload
	movq	6000(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	6264(%rsp), %rdi        # 8-byte Reload
	movq	5976(%rsp), %rsi        # 8-byte Reload
	vmovsd	5872(%rsp), %xmm0       # 8-byte Reload
	movq	6264(%rsp), %rdx        # 8-byte Reload
	movq	6144(%rsp), %rcx        # 8-byte Reload
	movq	5992(%rsp), %r8         # 8-byte Reload
	movq	6000(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	10952(%rsp), %rax       # 8-byte Reload
	movq	8888(%rsp), %rcx        # 8-byte Reload
	vmovsd	5872(%rsp), %xmm0       # 8-byte Reload
	vmovsd	%xmm0, (%rax,%rcx,8)
	.loc	2 826 0                 # eispack.c:826:0
	movq	6208(%rsp), %rdi        # 8-byte Reload
	movq	5888(%rsp), %rsi        # 8-byte Reload
	movq	5912(%rsp), %rdx        # 8-byte Reload
	movq	6184(%rsp), %rcx        # 8-byte Reload
	movq	6152(%rsp), %r8         # 8-byte Reload
	movl	5940(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	8880(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	6264(%rsp), %rdi        # 8-byte Reload
	movq	6168(%rsp), %rsi        # 8-byte Reload
	movq	6264(%rsp), %rcx        # 8-byte Reload
	movq	6160(%rsp), %r8         # 8-byte Reload
	movq	5992(%rsp), %r9         # 8-byte Reload
	movq	6000(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	8880(%rsp), %ebp        # 4-byte Reload
	movslq	%ebp, %rax
	movq	6256(%rsp), %rdi        # 8-byte Reload
	movq	5976(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	6264(%rsp), %rcx        # 8-byte Reload
	movq	6184(%rsp), %r8         # 8-byte Reload
	movq	5992(%rsp), %r9         # 8-byte Reload
	movq	6000(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 5856(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	6208(%rsp), %rdi        # 8-byte Reload
	movq	5888(%rsp), %rsi        # 8-byte Reload
	movq	5912(%rsp), %rdx        # 8-byte Reload
	movq	6216(%rsp), %rcx        # 8-byte Reload
	movq	6176(%rsp), %r8         # 8-byte Reload
	movl	5940(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	5968(%rsp), %rdi        # 8-byte Reload
	movq	5976(%rsp), %rsi        # 8-byte Reload
	movq	5856(%rsp), %rdx        # 8-byte Reload
	movq	6264(%rsp), %rcx        # 8-byte Reload
	movq	6184(%rsp), %r8         # 8-byte Reload
	movq	5992(%rsp), %r9         # 8-byte Reload
	movq	6000(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	6264(%rsp), %rdi        # 8-byte Reload
	movq	5976(%rsp), %rsi        # 8-byte Reload
	movq	10968(%rsp), %rdx       # 8-byte Reload
	movq	6264(%rsp), %rcx        # 8-byte Reload
	movq	6192(%rsp), %r8         # 8-byte Reload
	movq	5992(%rsp), %r9         # 8-byte Reload
	movq	6000(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	5856(%rsp), %rax        # 8-byte Reload
	shlq	$3, %rax
	movq	10968(%rsp), %rcx       # 8-byte Reload
	addq	%rax, %rcx
	movq	6256(%rsp), %rdi        # 8-byte Reload
	movq	5976(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	6264(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 5848(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	6216(%rsp), %r8         # 8-byte Reload
	movq	5992(%rsp), %r9         # 8-byte Reload
	movq	6000(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	6208(%rsp), %rdi        # 8-byte Reload
	movq	5888(%rsp), %rsi        # 8-byte Reload
	movq	5912(%rsp), %rdx        # 8-byte Reload
	movq	5984(%rsp), %rcx        # 8-byte Reload
	movq	6200(%rsp), %r8         # 8-byte Reload
	movl	5940(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	6264(%rsp), %rdi        # 8-byte Reload
	movq	5976(%rsp), %rsi        # 8-byte Reload
	movq	5848(%rsp), %rdx        # 8-byte Reload
	movq	6264(%rsp), %rcx        # 8-byte Reload
	movq	6216(%rsp), %r8         # 8-byte Reload
	movq	5992(%rsp), %r9         # 8-byte Reload
	movq	6000(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	10968(%rsp), %rax       # 8-byte Reload
	movq	5856(%rsp), %rcx        # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
	movq	6256(%rsp), %rdi        # 8-byte Reload
	movq	5976(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 5840(%rsp)       # 8-byte Spill
	movq	6264(%rsp), %rdx        # 8-byte Reload
	movq	5984(%rsp), %rcx        # 8-byte Reload
	movq	5992(%rsp), %r8         # 8-byte Reload
	movq	6000(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
.Ltmp313:
	#DEBUG_VALUE: tred1:f <- [RSP+5840]
	.loc	2 827 0                 # eispack.c:827:0
	movq	5896(%rsp), %rdi        # 8-byte Reload
	movq	5888(%rsp), %rsi        # 8-byte Reload
	movq	5912(%rsp), %rdx        # 8-byte Reload
	movq	6248(%rsp), %rcx        # 8-byte Reload
	movq	5944(%rsp), %r8         # 8-byte Reload
	movl	5940(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	5968(%rsp), %rdi        # 8-byte Reload
	movq	5976(%rsp), %rsi        # 8-byte Reload
	movq	6232(%rsp), %rdx        # 8-byte Reload
	movq	6264(%rsp), %rcx        # 8-byte Reload
	movq	6224(%rsp), %r8         # 8-byte Reload
	movq	5992(%rsp), %r9         # 8-byte Reload
	movq	6000(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	6264(%rsp), %rdi        # 8-byte Reload
	movq	5976(%rsp), %rsi        # 8-byte Reload
	vmovsd	5952(%rsp), %xmm0       # 8-byte Reload
	movq	6264(%rsp), %rdx        # 8-byte Reload
	movq	6240(%rsp), %rcx        # 8-byte Reload
	movq	5992(%rsp), %r8         # 8-byte Reload
	movq	6000(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	5952(%rsp), %xmm0       # 8-byte Reload
	callq	sqrt
.Ltmp314:
	movq	6256(%rsp), %rdi        # 8-byte Reload
	movq	5976(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 5832(%rsp)       # 8-byte Spill
	movq	6264(%rsp), %rdx        # 8-byte Reload
	movq	6248(%rsp), %rcx        # 8-byte Reload
	movq	5992(%rsp), %r8         # 8-byte Reload
	movq	6000(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	5896(%rsp), %rdi        # 8-byte Reload
	movq	5888(%rsp), %rsi        # 8-byte Reload
	movq	5912(%rsp), %rdx        # 8-byte Reload
	movq	5920(%rsp), %rcx        # 8-byte Reload
	movq	5944(%rsp), %r8         # 8-byte Reload
	movl	5940(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	5968(%rsp), %rdi        # 8-byte Reload
	movq	5976(%rsp), %rsi        # 8-byte Reload
	movq	5960(%rsp), %rdx        # 8-byte Reload
	movq	6264(%rsp), %rcx        # 8-byte Reload
	movq	5904(%rsp), %r8         # 8-byte Reload
	movq	5992(%rsp), %r9         # 8-byte Reload
	movq	6000(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	6264(%rsp), %rdi        # 8-byte Reload
	movq	5976(%rsp), %rsi        # 8-byte Reload
	vmovsd	5840(%rsp), %xmm0       # 8-byte Reload
	movq	6264(%rsp), %rdx        # 8-byte Reload
	movq	5984(%rsp), %rcx        # 8-byte Reload
	movq	5992(%rsp), %r8         # 8-byte Reload
	movq	6000(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	5840(%rsp), %xmm0       # 8-byte Reload
	callq	r8_sign
	movabsq	$0, %rax
	movabsq	$1, %rcx
	leaq	.L.str209, %rdx
	leaq	.L.str781, %rsi
	movabsq	$2, %rdi
	leaq	.L.str105, %r8
	movabsq	$3, %r9
	leaq	.L.str211, %r10
	movabsq	$832, %r11              # imm = 0x340
	leaq	.L.str57131, %rbx
	leaq	.L.str134, %r14
	leaq	.L.str210, %r15
	movl	$0, %ebp
	movl	$1, %r13d
	movabsq	$19134, %r12            # imm = 0x4ABE
	movq	%rax, 5824(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 5816(%rsp)        # 8-byte Spill
	leaq	.L.str110, %rax
	movq	%rax, 5808(%rsp)        # 8-byte Spill
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
	movq	%rax, 5800(%rsp)        # 8-byte Spill
	leaq	.L.str1488, %rax
	movq	%rax, 5792(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 5784(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 5776(%rsp)        # 8-byte Spill
	leaq	.L.str207, %rax
	movq	%rax, 5768(%rsp)        # 8-byte Spill
	leaq	.L.str195, %rax
	movq	%rax, 5760(%rsp)        # 8-byte Spill
	movabsq	$830, %rax              # imm = 0x33E
	movq	%rax, 5752(%rsp)        # 8-byte Spill
	leaq	.L.str208, %rax
	movq	%rax, 5744(%rsp)        # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, 5736(%rsp)        # 8-byte Spill
	leaq	.L.str196, %rax
	movq	%rax, 5728(%rsp)        # 8-byte Spill
	leaq	.L.str200, %rax
	movq	%rax, 5720(%rsp)        # 8-byte Spill
	movabsq	$9, %rax
	movq	%rax, 5712(%rsp)        # 8-byte Spill
	leaq	.L.str206, %rax
	movq	%rax, 5704(%rsp)        # 8-byte Spill
	leaq	.L.str189, %rax
	movq	%rax, 5696(%rsp)        # 8-byte Spill
	leaq	.L.str205, %rax
	movq	%rax, 5688(%rsp)        # 8-byte Spill
	movabsq	$829, %rax              # imm = 0x33D
	movq	%rax, 5680(%rsp)        # 8-byte Spill
	movabsq	$11, %rax
	movq	%rax, 5672(%rsp)        # 8-byte Spill
	leaq	.L.str201, %rax
	movq	%rax, 5664(%rsp)        # 8-byte Spill
	movabsq	$13, %rax
	movq	%rax, 5656(%rsp)        # 8-byte Spill
	leaq	.L.str202, %rax
	movq	%rax, 5648(%rsp)        # 8-byte Spill
	leaq	.L.str203, %rax
	movq	%rax, 5640(%rsp)        # 8-byte Spill
	movabsq	$828, %rax              # imm = 0x33C
	movq	%rax, 5632(%rsp)        # 8-byte Spill
	leaq	.L.str204, %rax
	movq	%rax, 5624(%rsp)        # 8-byte Spill
	leaq	.L.str157, %rax
	movq	%rax, 5616(%rsp)        # 8-byte Spill
	leaq	.L.str104, %rax
	movq	%rax, 5608(%rsp)        # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 5600(%rsp)        # 8-byte Spill
	leaq	.L.str118, %rax
	vmovsd	.LCPI9_1, %xmm1
	movq	%rax, 5592(%rsp)        # 8-byte Spill
	movabsq	$827, %rax              # imm = 0x33B
	movq	%rax, 5584(%rsp)        # 8-byte Spill
	leaq	.L.str197, %rax
	movq	%rax, 5576(%rsp)        # 8-byte Spill
	leaq	.L.str199, %rax
	movq	%rdi, 5568(%rsp)        # 8-byte Spill
	movq	%r12, %rdi
	movq	%rax, 5560(%rsp)        # 8-byte Spill
	movq	5776(%rsp), %rax        # 8-byte Reload
	movq	%rsi, 5552(%rsp)        # 8-byte Spill
	movq	%rax, %rsi
	vmovsd	%xmm0, 5544(%rsp)       # 8-byte Spill
	movq	%rdx, 5536(%rsp)        # 8-byte Spill
	movq	%rcx, %rdx
	movq	5560(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 5528(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	5824(%rsp), %rax        # 8-byte Reload
	movq	%r8, 5520(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	5552(%rsp), %rax        # 8-byte Reload
	movq	%r9, 5512(%rsp)         # 8-byte Spill
	movq	%rax, %r9
	movl	%r13d, 5508(%rsp)       # 4-byte Spill
	movq	%r15, 5496(%rsp)        # 8-byte Spill
	movl	%ebp, 5492(%rsp)        # 4-byte Spill
	movq	%r12, 5480(%rsp)        # 8-byte Spill
	vmovsd	%xmm1, 5472(%rsp)       # 8-byte Spill
	movq	%r14, 5464(%rsp)        # 8-byte Spill
	movq	%rbx, 5456(%rsp)        # 8-byte Spill
	movq	%r10, 5448(%rsp)        # 8-byte Spill
	movq	%r11, 5440(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	5584(%rsp), %rdi        # 8-byte Reload
	movq	5456(%rsp), %rsi        # 8-byte Reload
	movq	5464(%rsp), %rdx        # 8-byte Reload
	movq	5720(%rsp), %rcx        # 8-byte Reload
	movq	5656(%rsp), %r8         # 8-byte Reload
	movl	5492(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	5568(%rsp), %rdi        # 8-byte Reload
	movq	5776(%rsp), %rsi        # 8-byte Reload
	vmovsd	5544(%rsp), %xmm0       # 8-byte Reload
	movq	5528(%rsp), %rdx        # 8-byte Reload
	movq	5560(%rsp), %rcx        # 8-byte Reload
	movq	5824(%rsp), %r8         # 8-byte Reload
	movq	5552(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	5528(%rsp), %rdi        # 8-byte Reload
	movq	5776(%rsp), %rsi        # 8-byte Reload
	vmovsd	5832(%rsp), %xmm0       # 8-byte Reload
	movq	5528(%rsp), %rdx        # 8-byte Reload
	movq	5576(%rsp), %rcx        # 8-byte Reload
	movq	5824(%rsp), %r8         # 8-byte Reload
	movq	5552(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	5832(%rsp), %xmm0       # 8-byte Reload
	vmovsd	5544(%rsp), %xmm1       # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	5480(%rsp), %rdi        # 8-byte Reload
	movq	5776(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	5528(%rsp), %rdx        # 8-byte Reload
	movq	5720(%rsp), %rcx        # 8-byte Reload
	movq	5824(%rsp), %r8         # 8-byte Reload
	movq	5552(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 5432(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	5584(%rsp), %rdi        # 8-byte Reload
	movq	5456(%rsp), %rsi        # 8-byte Reload
	movq	5464(%rsp), %rdx        # 8-byte Reload
	movq	5664(%rsp), %rcx        # 8-byte Reload
	movq	5672(%rsp), %r8         # 8-byte Reload
	movl	5492(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	5568(%rsp), %rdi        # 8-byte Reload
	movq	5776(%rsp), %rsi        # 8-byte Reload
	vmovsd	5432(%rsp), %xmm0       # 8-byte Reload
	movq	5528(%rsp), %rdx        # 8-byte Reload
	movq	5720(%rsp), %rcx        # 8-byte Reload
	movq	5824(%rsp), %r8         # 8-byte Reload
	movq	5552(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	5528(%rsp), %rdi        # 8-byte Reload
	movq	5776(%rsp), %rsi        # 8-byte Reload
	vmovsd	5472(%rsp), %xmm0       # 8-byte Reload
	movq	5824(%rsp), %rdx        # 8-byte Reload
	movq	5792(%rsp), %rcx        # 8-byte Reload
	movq	5824(%rsp), %r8         # 8-byte Reload
	movq	5552(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	5432(%rsp), %xmm0       # 8-byte Reload
	vmovq	%xmm0, %rax
	movabsq	$-9223372036854775808, %rcx # imm = 0x8000000000000000
	xorq	%rcx, %rax
	vmovq	%rax, %xmm1
	movq	5480(%rsp), %rdi        # 8-byte Reload
	movq	5776(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm1, %xmm0
	movq	5528(%rsp), %rdx        # 8-byte Reload
	movq	5664(%rsp), %rcx        # 8-byte Reload
	movq	5824(%rsp), %r8         # 8-byte Reload
	movq	5552(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm1, 5424(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
.Ltmp315:
	#DEBUG_VALUE: tred1:g <- [RSP+5424]
	.loc	2 828 0                 # eispack.c:828:0
	movq	5632(%rsp), %rdi        # 8-byte Reload
	movq	5456(%rsp), %rsi        # 8-byte Reload
	movq	5464(%rsp), %rdx        # 8-byte Reload
	movq	5648(%rsp), %rcx        # 8-byte Reload
	movq	5656(%rsp), %r8         # 8-byte Reload
	movl	5492(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	5568(%rsp), %rdi        # 8-byte Reload
	movq	5776(%rsp), %rsi        # 8-byte Reload
	vmovsd	5424(%rsp), %xmm0       # 8-byte Reload
	movq	5528(%rsp), %rdx        # 8-byte Reload
	movq	5664(%rsp), %rcx        # 8-byte Reload
	movq	5824(%rsp), %r8         # 8-byte Reload
	movq	5552(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	5528(%rsp), %rdi        # 8-byte Reload
	movq	5776(%rsp), %rsi        # 8-byte Reload
	vmovsd	8488(%rsp), %xmm0       # 8-byte Reload
	movq	5528(%rsp), %rdx        # 8-byte Reload
	movq	5592(%rsp), %rcx        # 8-byte Reload
	movq	5824(%rsp), %r8         # 8-byte Reload
	movq	5552(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	8488(%rsp), %xmm0       # 8-byte Reload
	vmovsd	5424(%rsp), %xmm1       # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	5480(%rsp), %rdi        # 8-byte Reload
	movq	5776(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	5528(%rsp), %rdx        # 8-byte Reload
	movq	5648(%rsp), %rcx        # 8-byte Reload
	movq	5824(%rsp), %r8         # 8-byte Reload
	movq	5552(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 5416(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	5632(%rsp), %rdi        # 8-byte Reload
	movq	5456(%rsp), %rsi        # 8-byte Reload
	movq	5464(%rsp), %rdx        # 8-byte Reload
	movq	5640(%rsp), %rcx        # 8-byte Reload
	movq	5600(%rsp), %r8         # 8-byte Reload
	movl	5492(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	5568(%rsp), %rdi        # 8-byte Reload
	movq	5776(%rsp), %rsi        # 8-byte Reload
	movq	8888(%rsp), %rdx        # 8-byte Reload
	movq	5528(%rsp), %rcx        # 8-byte Reload
	movq	5608(%rsp), %r8         # 8-byte Reload
	movq	5824(%rsp), %r9         # 8-byte Reload
	movq	5552(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	5528(%rsp), %rdi        # 8-byte Reload
	movq	5776(%rsp), %rsi        # 8-byte Reload
	movq	10960(%rsp), %rdx       # 8-byte Reload
	movq	5528(%rsp), %rcx        # 8-byte Reload
	movq	5616(%rsp), %r8         # 8-byte Reload
	movq	5824(%rsp), %r9         # 8-byte Reload
	movq	5552(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	8888(%rsp), %rax        # 8-byte Reload
	shlq	$3, %rax
	movq	10960(%rsp), %rcx       # 8-byte Reload
	addq	%rax, %rcx
	movq	5480(%rsp), %rdi        # 8-byte Reload
	movq	5776(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	5528(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 5408(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	5640(%rsp), %r8         # 8-byte Reload
	movq	5824(%rsp), %r9         # 8-byte Reload
	movq	5552(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	5632(%rsp), %rdi        # 8-byte Reload
	movq	5456(%rsp), %rsi        # 8-byte Reload
	movq	5464(%rsp), %rdx        # 8-byte Reload
	movq	5624(%rsp), %rcx        # 8-byte Reload
	movq	5736(%rsp), %r8         # 8-byte Reload
	movl	5492(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	5568(%rsp), %rdi        # 8-byte Reload
	movq	5776(%rsp), %rsi        # 8-byte Reload
	movq	5408(%rsp), %rdx        # 8-byte Reload
	movq	5528(%rsp), %rcx        # 8-byte Reload
	movq	5640(%rsp), %r8         # 8-byte Reload
	movq	5824(%rsp), %r9         # 8-byte Reload
	movq	5552(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	5528(%rsp), %rdi        # 8-byte Reload
	movq	5776(%rsp), %rsi        # 8-byte Reload
	vmovsd	5416(%rsp), %xmm0       # 8-byte Reload
	movq	5528(%rsp), %rdx        # 8-byte Reload
	movq	5648(%rsp), %rcx        # 8-byte Reload
	movq	5824(%rsp), %r8         # 8-byte Reload
	movq	5552(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	10960(%rsp), %rax       # 8-byte Reload
	movq	8888(%rsp), %rcx        # 8-byte Reload
	vmovsd	5416(%rsp), %xmm0       # 8-byte Reload
	vmovsd	%xmm0, (%rax,%rcx,8)
	.loc	2 829 0                 # eispack.c:829:0
	movq	5680(%rsp), %rdi        # 8-byte Reload
	movq	5456(%rsp), %rsi        # 8-byte Reload
	movq	5464(%rsp), %rdx        # 8-byte Reload
	movq	5688(%rsp), %rcx        # 8-byte Reload
	movq	5656(%rsp), %r8         # 8-byte Reload
	movl	5492(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	5568(%rsp), %rdi        # 8-byte Reload
	movq	5776(%rsp), %rsi        # 8-byte Reload
	vmovsd	5424(%rsp), %xmm0       # 8-byte Reload
	movq	5528(%rsp), %rdx        # 8-byte Reload
	movq	5664(%rsp), %rcx        # 8-byte Reload
	movq	5824(%rsp), %r8         # 8-byte Reload
	movq	5552(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	5528(%rsp), %rdi        # 8-byte Reload
	movq	5776(%rsp), %rsi        # 8-byte Reload
	vmovsd	5840(%rsp), %xmm0       # 8-byte Reload
	movq	5528(%rsp), %rdx        # 8-byte Reload
	movq	5728(%rsp), %rcx        # 8-byte Reload
	movq	5824(%rsp), %r8         # 8-byte Reload
	movq	5552(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	5840(%rsp), %xmm0       # 8-byte Reload
	vmovsd	5424(%rsp), %xmm1       # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	5480(%rsp), %rdi        # 8-byte Reload
	movq	5776(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	5528(%rsp), %rdx        # 8-byte Reload
	movq	5688(%rsp), %rcx        # 8-byte Reload
	movq	5824(%rsp), %r8         # 8-byte Reload
	movq	5552(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 5400(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	5680(%rsp), %rdi        # 8-byte Reload
	movq	5456(%rsp), %rsi        # 8-byte Reload
	movq	5464(%rsp), %rdx        # 8-byte Reload
	movq	5704(%rsp), %rcx        # 8-byte Reload
	movq	5672(%rsp), %r8         # 8-byte Reload
	movl	5492(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	5568(%rsp), %rdi        # 8-byte Reload
	movq	5776(%rsp), %rsi        # 8-byte Reload
	vmovsd	5400(%rsp), %xmm0       # 8-byte Reload
	movq	5528(%rsp), %rdx        # 8-byte Reload
	movq	5688(%rsp), %rcx        # 8-byte Reload
	movq	5824(%rsp), %r8         # 8-byte Reload
	movq	5552(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	5528(%rsp), %rdi        # 8-byte Reload
	movq	5776(%rsp), %rsi        # 8-byte Reload
	vmovsd	5952(%rsp), %xmm0       # 8-byte Reload
	movq	5528(%rsp), %rdx        # 8-byte Reload
	movq	5696(%rsp), %rcx        # 8-byte Reload
	movq	5824(%rsp), %r8         # 8-byte Reload
	movq	5552(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	5952(%rsp), %xmm0       # 8-byte Reload
	vmovsd	5400(%rsp), %xmm1       # 8-byte Reload
	vsubsd	%xmm1, %xmm0, %xmm2
	movq	5480(%rsp), %rdi        # 8-byte Reload
	movq	5776(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	5528(%rsp), %rdx        # 8-byte Reload
	movq	5704(%rsp), %rcx        # 8-byte Reload
	movq	5824(%rsp), %r8         # 8-byte Reload
	movq	5552(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 5392(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
.Ltmp316:
	#DEBUG_VALUE: tred1:h <- [RSP+5392]
	.loc	2 830 0                 # eispack.c:830:0
	movq	5752(%rsp), %rdi        # 8-byte Reload
	movq	5456(%rsp), %rsi        # 8-byte Reload
	movq	5464(%rsp), %rdx        # 8-byte Reload
	movq	5768(%rsp), %rcx        # 8-byte Reload
	movq	5712(%rsp), %r8         # 8-byte Reload
	movl	5492(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	5568(%rsp), %rdi        # 8-byte Reload
	movq	5776(%rsp), %rsi        # 8-byte Reload
	vmovsd	5432(%rsp), %xmm0       # 8-byte Reload
	movq	5528(%rsp), %rdx        # 8-byte Reload
	movq	5720(%rsp), %rcx        # 8-byte Reload
	movq	5824(%rsp), %r8         # 8-byte Reload
	movq	5552(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	5528(%rsp), %rdi        # 8-byte Reload
	movq	5776(%rsp), %rsi        # 8-byte Reload
	vmovsd	5840(%rsp), %xmm0       # 8-byte Reload
	movq	5528(%rsp), %rdx        # 8-byte Reload
	movq	5728(%rsp), %rcx        # 8-byte Reload
	movq	5824(%rsp), %r8         # 8-byte Reload
	movq	5552(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	5840(%rsp), %xmm0       # 8-byte Reload
	vmovsd	5432(%rsp), %xmm1       # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
	movq	5480(%rsp), %rdi        # 8-byte Reload
	movq	5776(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	5528(%rsp), %rdx        # 8-byte Reload
	movq	5768(%rsp), %rcx        # 8-byte Reload
	movq	5824(%rsp), %r8         # 8-byte Reload
	movq	5552(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 5384(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	5752(%rsp), %rdi        # 8-byte Reload
	movq	5456(%rsp), %rsi        # 8-byte Reload
	movq	5464(%rsp), %rdx        # 8-byte Reload
	movq	5744(%rsp), %rcx        # 8-byte Reload
	movq	5736(%rsp), %r8         # 8-byte Reload
	movl	5492(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	5568(%rsp), %rdi        # 8-byte Reload
	movq	5776(%rsp), %rsi        # 8-byte Reload
	movq	5848(%rsp), %rdx        # 8-byte Reload
	movq	5528(%rsp), %rcx        # 8-byte Reload
	movq	5760(%rsp), %r8         # 8-byte Reload
	movq	5824(%rsp), %r9         # 8-byte Reload
	movq	5552(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	5528(%rsp), %rdi        # 8-byte Reload
	movq	5776(%rsp), %rsi        # 8-byte Reload
	vmovsd	5384(%rsp), %xmm0       # 8-byte Reload
	movq	5528(%rsp), %rdx        # 8-byte Reload
	movq	5768(%rsp), %rcx        # 8-byte Reload
	movq	5824(%rsp), %r8         # 8-byte Reload
	movq	5552(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	10968(%rsp), %rax       # 8-byte Reload
	movq	5856(%rsp), %rcx        # 8-byte Reload
	vmovsd	5384(%rsp), %xmm0       # 8-byte Reload
	vmovsd	%xmm0, (%rax,%rcx,8)
	.loc	2 832 0                 # eispack.c:832:0
.Ltmp317:
	movq	5440(%rsp), %rdi        # 8-byte Reload
	movq	5456(%rsp), %rsi        # 8-byte Reload
	movq	5464(%rsp), %rdx        # 8-byte Reload
	movq	5536(%rsp), %rcx        # 8-byte Reload
	movq	5784(%rsp), %r8         # 8-byte Reload
	movl	5492(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	5568(%rsp), %rdi        # 8-byte Reload
	movq	5816(%rsp), %rsi        # 8-byte Reload
	movq	5800(%rsp), %rdx        # 8-byte Reload
	movq	5824(%rsp), %rcx        # 8-byte Reload
	movq	5792(%rsp), %r8         # 8-byte Reload
	movq	5824(%rsp), %r9         # 8-byte Reload
	movq	5552(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	8880(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r13d
	movl	%r13d, %edx
	movq	5528(%rsp), %rdi        # 8-byte Reload
	movq	5816(%rsp), %rsi        # 8-byte Reload
	movq	5528(%rsp), %rcx        # 8-byte Reload
	movq	5808(%rsp), %r8         # 8-byte Reload
	movq	5824(%rsp), %r9         # 8-byte Reload
	movq	5552(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	8880(%rsp), %ebp        # 4-byte Reload
	cmpl	$-1, %ebp
	setg	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %r13d
	movl	%r13d, %edx
	movq	5480(%rsp), %rdi        # 8-byte Reload
	movq	5528(%rsp), %rsi        # 8-byte Reload
	movq	5528(%rsp), %rcx        # 8-byte Reload
	movq	5536(%rsp), %r8         # 8-byte Reload
	movq	5824(%rsp), %r9         # 8-byte Reload
	movq	5552(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 5383(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	5440(%rsp), %rdi        # 8-byte Reload
	movq	5456(%rsp), %rsi        # 8-byte Reload
	movq	5464(%rsp), %rdx        # 8-byte Reload
	movq	5496(%rsp), %rcx        # 8-byte Reload
	movq	5568(%rsp), %r8         # 8-byte Reload
	movl	5492(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	5512(%rsp), %rdi        # 8-byte Reload
	movq	5824(%rsp), %rsi        # 8-byte Reload
	movq	5824(%rsp), %rdx        # 8-byte Reload
	movq	5528(%rsp), %rcx        # 8-byte Reload
	movq	5448(%rsp), %r8         # 8-byte Reload
	movq	5824(%rsp), %r9         # 8-byte Reload
	movq	5552(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	5568(%rsp), %rdi        # 8-byte Reload
	movq	5824(%rsp), %rsi        # 8-byte Reload
	movq	5824(%rsp), %rdx        # 8-byte Reload
	movq	5528(%rsp), %rcx        # 8-byte Reload
	movq	5520(%rsp), %r8         # 8-byte Reload
	movq	5824(%rsp), %r9         # 8-byte Reload
	movq	5552(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	5383(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	5528(%rsp), %rdi        # 8-byte Reload
	movq	5528(%rsp), %rsi        # 8-byte Reload
	movq	5528(%rsp), %rcx        # 8-byte Reload
	movq	5536(%rsp), %r8         # 8-byte Reload
	movq	5824(%rsp), %r9         # 8-byte Reload
	movq	5552(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	5383(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	movq	5824(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 5368(%rsp)        # 8-byte Spill
	jne	.LBB9_20
	jmp	.LBB9_15
.Ltmp318:
.LBB9_20:                               # %.lr.ph13
                                        #   Parent Loop BB9_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	5368(%rsp), %rax        # 8-byte Reload
	movabsq	$1, %rcx
	leaq	.L.str217, %rdx
	movabsq	$0, %rsi
	leaq	.L.str781, %rdi
	movabsq	$2, %r8
	leaq	.L.str211, %r9
	movabsq	$3, %r10
	leaq	.L.str219, %r11
	movabsq	$837, %rbx              # imm = 0x345
	leaq	.L.str57131, %r14
	leaq	.L.str218, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 5360(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 5352(%rsp)        # 8-byte Spill
	leaq	.L.str216, %rax
	movq	%rax, 5344(%rsp)        # 8-byte Spill
	leaq	.L.str107, %rax
	movq	%rax, 5336(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 5328(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 5320(%rsp)        # 8-byte Spill
	leaq	.L.str213, %rax
	movq	%rax, 5312(%rsp)        # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, 5304(%rsp)        # 8-byte Spill
	leaq	.L.str212, %rax
	movq	%rax, 5296(%rsp)        # 8-byte Spill
	leaq	.L.str1488, %rax
	movq	%rax, 5288(%rsp)        # 8-byte Spill
	movabsq	$8, %rax
	vxorps	%xmm0, %xmm0, %xmm0
	movq	%rax, 5280(%rsp)        # 8-byte Spill
	leaq	.L.str214, %rax
	movq	%rax, 5272(%rsp)        # 8-byte Spill
	movabsq	$839, %rax              # imm = 0x347
	movq	%rax, 5264(%rsp)        # 8-byte Spill
	leaq	.L.str215, %rax
	movq	%rax, 5256(%rsp)        # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, 5248(%rsp)        # 8-byte Spill
	leaq	.L.str157, %rax
	movq	%rax, 5240(%rsp)        # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 5232(%rsp)        # 8-byte Spill
	leaq	.L.str134, %rax
	movq	%rax, 5224(%rsp)        # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 5216(%rsp)        # 8-byte Spill
	movabsq	$48, %rax
	.loc	2 839 0                 # eispack.c:839:0
.Ltmp319:
	movq	%rax, 5208(%rsp)        # 8-byte Spill
	movq	5216(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 5200(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 5192(%rsp)        # 8-byte Spill
	movq	%r14, %rsi
	movq	%rdx, 5184(%rsp)        # 8-byte Spill
	movq	%r9, %rdx
	movq	5296(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 5176(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	5208(%rsp), %rax        # 8-byte Reload
	movq	%r8, 5168(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 5160(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movl	%ebp, 5156(%rsp)        # 4-byte Spill
	movl	%r12d, 5152(%rsp)       # 4-byte Spill
	movq	%r13, 5144(%rsp)        # 8-byte Spill
	vmovsd	%xmm0, 5136(%rsp)       # 8-byte Spill
	movq	%r15, 5128(%rsp)        # 8-byte Spill
	movq	%r14, 5120(%rsp)        # 8-byte Spill
	movq	%r10, 5112(%rsp)        # 8-byte Spill
	movq	%r11, 5104(%rsp)        # 8-byte Spill
	movq	%rbx, 5096(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	5168(%rsp), %rdi        # 8-byte Reload
	movq	5320(%rsp), %rsi        # 8-byte Reload
	movq	5192(%rsp), %rdx        # 8-byte Reload
	movq	5192(%rsp), %rcx        # 8-byte Reload
	movq	5288(%rsp), %r8         # 8-byte Reload
	movq	5176(%rsp), %r9         # 8-byte Reload
	movq	5224(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	5176(%rsp), %rdi        # 8-byte Reload
	movq	5320(%rsp), %rsi        # 8-byte Reload
	movq	5192(%rsp), %rdx        # 8-byte Reload
	movq	5176(%rsp), %rcx        # 8-byte Reload
	movq	5312(%rsp), %r8         # 8-byte Reload
	movq	5176(%rsp), %r9         # 8-byte Reload
	movq	5160(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	5144(%rsp), %rdi        # 8-byte Reload
	movq	5320(%rsp), %rsi        # 8-byte Reload
	movq	5360(%rsp), %rdx        # 8-byte Reload
	movq	5176(%rsp), %rcx        # 8-byte Reload
	movq	5296(%rsp), %r8         # 8-byte Reload
	movq	5192(%rsp), %r9         # 8-byte Reload
	movq	5160(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	5264(%rsp), %rdi        # 8-byte Reload
	movq	5120(%rsp), %rsi        # 8-byte Reload
	movq	5160(%rsp), %rdx        # 8-byte Reload
	movq	5272(%rsp), %rcx        # 8-byte Reload
	movq	5232(%rsp), %r8         # 8-byte Reload
	movl	5156(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	5168(%rsp), %rdi        # 8-byte Reload
	movq	5320(%rsp), %rsi        # 8-byte Reload
	movq	5360(%rsp), %rdx        # 8-byte Reload
	movq	5176(%rsp), %rcx        # 8-byte Reload
	movq	5296(%rsp), %r8         # 8-byte Reload
	movq	5192(%rsp), %r9         # 8-byte Reload
	movq	5200(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	5176(%rsp), %rdi        # 8-byte Reload
	movq	5320(%rsp), %rsi        # 8-byte Reload
	movq	10960(%rsp), %rdx       # 8-byte Reload
	movq	5176(%rsp), %rcx        # 8-byte Reload
	movq	5240(%rsp), %r8         # 8-byte Reload
	movq	5192(%rsp), %r9         # 8-byte Reload
	movq	5200(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	5360(%rsp), %rax        # 8-byte Reload
	shlq	$3, %rax
	movq	10960(%rsp), %rcx       # 8-byte Reload
	addq	%rax, %rcx
	movq	5144(%rsp), %rdi        # 8-byte Reload
	movq	5320(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	5176(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 5088(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	5272(%rsp), %r8         # 8-byte Reload
	movq	5192(%rsp), %r9         # 8-byte Reload
	movq	5200(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	5264(%rsp), %rdi        # 8-byte Reload
	movq	5120(%rsp), %rsi        # 8-byte Reload
	movq	5160(%rsp), %rdx        # 8-byte Reload
	movq	5256(%rsp), %rcx        # 8-byte Reload
	movq	5248(%rsp), %r8         # 8-byte Reload
	movl	5156(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	5168(%rsp), %rdi        # 8-byte Reload
	movq	5320(%rsp), %rsi        # 8-byte Reload
	movq	5088(%rsp), %rdx        # 8-byte Reload
	movq	5176(%rsp), %rcx        # 8-byte Reload
	movq	5272(%rsp), %r8         # 8-byte Reload
	movq	5192(%rsp), %r9         # 8-byte Reload
	movq	5200(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	5176(%rsp), %rdi        # 8-byte Reload
	movq	5320(%rsp), %rsi        # 8-byte Reload
	vmovsd	5136(%rsp), %xmm0       # 8-byte Reload
	movq	5192(%rsp), %rdx        # 8-byte Reload
	movq	5288(%rsp), %rcx        # 8-byte Reload
	movq	5192(%rsp), %r8         # 8-byte Reload
	movq	5200(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	10960(%rsp), %rax       # 8-byte Reload
	movq	5360(%rsp), %rcx        # 8-byte Reload
	vmovsd	5136(%rsp), %xmm0       # 8-byte Reload
	vmovsd	%xmm0, (%rax,%rcx,8)
.Ltmp320:
	.loc	2 837 0                 # eispack.c:837:0
	movq	5096(%rsp), %rdi        # 8-byte Reload
	movq	5120(%rsp), %rsi        # 8-byte Reload
	movq	5160(%rsp), %rdx        # 8-byte Reload
	movq	5312(%rsp), %rcx        # 8-byte Reload
	movq	5280(%rsp), %r8         # 8-byte Reload
	movl	5156(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	5168(%rsp), %rdi        # 8-byte Reload
	movq	5320(%rsp), %rsi        # 8-byte Reload
	movq	5176(%rsp), %rdx        # 8-byte Reload
	movq	5192(%rsp), %rcx        # 8-byte Reload
	movq	5288(%rsp), %r8         # 8-byte Reload
	movq	5192(%rsp), %r9         # 8-byte Reload
	movq	5200(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	5176(%rsp), %rdi        # 8-byte Reload
	movq	5320(%rsp), %rsi        # 8-byte Reload
	movq	5360(%rsp), %rdx        # 8-byte Reload
	movq	5176(%rsp), %rcx        # 8-byte Reload
	movq	5296(%rsp), %r8         # 8-byte Reload
	movq	5192(%rsp), %r9         # 8-byte Reload
	movq	5200(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	5360(%rsp), %rax        # 8-byte Reload
	addq	$1, %rax
	movq	5144(%rsp), %rdi        # 8-byte Reload
	movq	5320(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	5176(%rsp), %rcx        # 8-byte Reload
	movq	5312(%rsp), %r8         # 8-byte Reload
	movq	5192(%rsp), %r9         # 8-byte Reload
	movq	5200(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 5080(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	5096(%rsp), %rdi        # 8-byte Reload
	movq	5120(%rsp), %rsi        # 8-byte Reload
	movq	5160(%rsp), %rdx        # 8-byte Reload
	movq	5344(%rsp), %rcx        # 8-byte Reload
	movq	5304(%rsp), %r8         # 8-byte Reload
	movl	5156(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	5176(%rsp), %rdi        # 8-byte Reload
	movq	5320(%rsp), %rsi        # 8-byte Reload
	movq	5080(%rsp), %rdx        # 8-byte Reload
	movq	5176(%rsp), %rcx        # 8-byte Reload
	movq	5312(%rsp), %r8         # 8-byte Reload
	movq	5192(%rsp), %r9         # 8-byte Reload
	movq	5200(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	5080(%rsp), %rax        # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	5144(%rsp), %rdi        # 8-byte Reload
	movq	5352(%rsp), %rsi        # 8-byte Reload
	movq	5176(%rsp), %rcx        # 8-byte Reload
	movq	5344(%rsp), %r8         # 8-byte Reload
	movq	5192(%rsp), %r9         # 8-byte Reload
	movq	5200(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 5076(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	5096(%rsp), %rdi        # 8-byte Reload
	movq	5120(%rsp), %rsi        # 8-byte Reload
	movq	5160(%rsp), %rdx        # 8-byte Reload
	movq	5184(%rsp), %rcx        # 8-byte Reload
	movq	5328(%rsp), %r8         # 8-byte Reload
	movl	5156(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	8900(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	5168(%rsp), %rdi        # 8-byte Reload
	movq	5352(%rsp), %rsi        # 8-byte Reload
	movq	5176(%rsp), %rcx        # 8-byte Reload
	movq	5336(%rsp), %r8         # 8-byte Reload
	movq	5192(%rsp), %r9         # 8-byte Reload
	movq	5200(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	5076(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	5176(%rsp), %rdi        # 8-byte Reload
	movq	5352(%rsp), %rsi        # 8-byte Reload
	movq	5176(%rsp), %rcx        # 8-byte Reload
	movq	5344(%rsp), %r8         # 8-byte Reload
	movq	5192(%rsp), %r9         # 8-byte Reload
	movq	5200(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	5076(%rsp), %ebp        # 4-byte Reload
	movl	8900(%rsp), %r12d       # 4-byte Reload
	cmpl	%r12d, %ebp
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	5144(%rsp), %rdi        # 8-byte Reload
	movq	5176(%rsp), %rsi        # 8-byte Reload
	movq	5176(%rsp), %rcx        # 8-byte Reload
	movq	5184(%rsp), %r8         # 8-byte Reload
	movq	5192(%rsp), %r9         # 8-byte Reload
	movq	5200(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 5075(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	5096(%rsp), %rdi        # 8-byte Reload
	movq	5120(%rsp), %rsi        # 8-byte Reload
	movq	5160(%rsp), %rdx        # 8-byte Reload
	movq	5128(%rsp), %rcx        # 8-byte Reload
	movq	5168(%rsp), %r8         # 8-byte Reload
	movl	5156(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	5112(%rsp), %rdi        # 8-byte Reload
	movq	5192(%rsp), %rsi        # 8-byte Reload
	movq	5192(%rsp), %rdx        # 8-byte Reload
	movq	5176(%rsp), %rcx        # 8-byte Reload
	movq	5104(%rsp), %r8         # 8-byte Reload
	movq	5192(%rsp), %r9         # 8-byte Reload
	movq	5200(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	5168(%rsp), %rdi        # 8-byte Reload
	movq	5192(%rsp), %rsi        # 8-byte Reload
	movq	5192(%rsp), %rdx        # 8-byte Reload
	movq	5176(%rsp), %rcx        # 8-byte Reload
	movq	5160(%rsp), %r8         # 8-byte Reload
	movq	5192(%rsp), %r9         # 8-byte Reload
	movq	5200(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	5075(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	5176(%rsp), %rdi        # 8-byte Reload
	movq	5176(%rsp), %rsi        # 8-byte Reload
	movq	5176(%rsp), %rcx        # 8-byte Reload
	movq	5184(%rsp), %r8         # 8-byte Reload
	movq	5192(%rsp), %r9         # 8-byte Reload
	movq	5200(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	5075(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	movq	5080(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 5368(%rsp)        # 8-byte Spill
	jne	.LBB9_21
	jmp	.LBB9_20
.Ltmp321:
.LBB9_21:                               # %.loopexit11
                                        #   in Loop: Header=BB9_8 Depth=1
	movabsq	$0, %rax
	movabsq	$1, %rcx
	leaq	.L.str220, %rdx
	leaq	.L.str781, %rsi
	movabsq	$2, %rdi
	leaq	.L.str222, %r8
	movabsq	$3, %r9
	leaq	.L.str105, %r10
	movabsq	$842, %r11              # imm = 0x34A
	leaq	.L.str57131, %rbx
	leaq	.L.str219, %r14
	leaq	.L.str221, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 5064(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 5056(%rsp)        # 8-byte Spill
	leaq	.L.str110, %rax
	movq	%rax, 5048(%rsp)        # 8-byte Spill
	leaq	.L.str1488, %rax
	movq	%rax, 5040(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	.loc	2 842 0                 # eispack.c:842:0
.Ltmp322:
	movq	%rdi, 5032(%rsp)        # 8-byte Spill
	movq	%r11, %rdi
	movq	%rsi, 5024(%rsp)        # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, 5016(%rsp)        # 8-byte Spill
	movq	%r14, %rdx
	movq	%rax, 5008(%rsp)        # 8-byte Spill
	movq	5016(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 5000(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	5008(%rsp), %rax        # 8-byte Reload
	movq	%r8, 4992(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 4984(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r15, 4976(%rsp)        # 8-byte Spill
	movl	%ebp, 4972(%rsp)        # 4-byte Spill
	movl	%r12d, 4968(%rsp)       # 4-byte Spill
	movq	%r13, 4960(%rsp)        # 8-byte Spill
	movq	%r14, 4952(%rsp)        # 8-byte Spill
	movq	%rbx, 4944(%rsp)        # 8-byte Spill
	movq	%r10, 4936(%rsp)        # 8-byte Spill
	movq	%r11, 4928(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	5032(%rsp), %rdi        # 8-byte Reload
	movq	5056(%rsp), %rsi        # 8-byte Reload
	movq	5064(%rsp), %rdx        # 8-byte Reload
	movq	5064(%rsp), %rcx        # 8-byte Reload
	movq	5040(%rsp), %r8         # 8-byte Reload
	movq	5064(%rsp), %r9         # 8-byte Reload
	movq	5024(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	8880(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	5000(%rsp), %rdi        # 8-byte Reload
	movq	5056(%rsp), %rsi        # 8-byte Reload
	movq	5000(%rsp), %rcx        # 8-byte Reload
	movq	5048(%rsp), %r8         # 8-byte Reload
	movq	5064(%rsp), %r9         # 8-byte Reload
	movq	5024(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	8880(%rsp), %ebp        # 4-byte Reload
	cmpl	$0, %ebp
	setl	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %r12d
	movl	%r12d, %edx
	movq	4960(%rsp), %rdi        # 8-byte Reload
	movq	5000(%rsp), %rsi        # 8-byte Reload
	movq	5000(%rsp), %rcx        # 8-byte Reload
	movq	5016(%rsp), %r8         # 8-byte Reload
	movq	5064(%rsp), %r9         # 8-byte Reload
	movq	5024(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 4927(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	4928(%rsp), %rdi        # 8-byte Reload
	movq	4944(%rsp), %rsi        # 8-byte Reload
	movq	4952(%rsp), %rdx        # 8-byte Reload
	movq	4976(%rsp), %rcx        # 8-byte Reload
	movq	5032(%rsp), %r8         # 8-byte Reload
	movl	4972(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	4984(%rsp), %rdi        # 8-byte Reload
	movq	5064(%rsp), %rsi        # 8-byte Reload
	movq	5064(%rsp), %rdx        # 8-byte Reload
	movq	5000(%rsp), %rcx        # 8-byte Reload
	movq	4936(%rsp), %r8         # 8-byte Reload
	movq	5064(%rsp), %r9         # 8-byte Reload
	movq	5024(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	5032(%rsp), %rdi        # 8-byte Reload
	movq	5064(%rsp), %rsi        # 8-byte Reload
	movq	5064(%rsp), %rdx        # 8-byte Reload
	movq	5000(%rsp), %rcx        # 8-byte Reload
	movq	4992(%rsp), %r8         # 8-byte Reload
	movq	5064(%rsp), %r9         # 8-byte Reload
	movq	5024(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	4927(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	5000(%rsp), %rdi        # 8-byte Reload
	movq	5000(%rsp), %rsi        # 8-byte Reload
	movq	5000(%rsp), %rcx        # 8-byte Reload
	movq	5016(%rsp), %r8         # 8-byte Reload
	movq	5064(%rsp), %r9         # 8-byte Reload
	movq	5024(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	4927(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	movq	5064(%rsp), %rcx        # 8-byte Reload
	movq	5000(%rsp), %rdx        # 8-byte Reload
	movq	%rcx, 4912(%rsp)        # 8-byte Spill
	movq	%rdx, 4904(%rsp)        # 8-byte Spill
	jne	.LBB9_15
.LBB9_22:                               # %.lr.ph22
                                        #   Parent Loop BB9_8 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB9_24 Depth 3
	movq	4904(%rsp), %rax        # 8-byte Reload
	movq	4912(%rsp), %rcx        # 8-byte Reload
	movabsq	$1, %rdx
	leaq	.L.str242, %rsi
	movabsq	$0, %rdi
	leaq	.L.str781, %r8
	movabsq	$2, %r9
	leaq	.L.str225, %r10
	movabsq	$3, %r11
	leaq	.L.str244, %rbx
	movabsq	$847, %r14              # imm = 0x34F
	leaq	.L.str57131, %r15
	leaq	.L.str222, %r12
	leaq	.L.str243, %r13
	movl	$0, %ebp
	movq	%rsi, 4896(%rsp)        # 8-byte Spill
	movl	$1, %esi
	movq	%rax, 4888(%rsp)        # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 4880(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 4872(%rsp)        # 8-byte Spill
	leaq	.L.str241, %rax
	movq	%rax, 4864(%rsp)        # 8-byte Spill
	leaq	.L.str110, %rax
	movq	%rax, 4856(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 4848(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 4840(%rsp)        # 8-byte Spill
	leaq	.L.str223, %rax
	movq	%rax, 4832(%rsp)        # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, 4824(%rsp)        # 8-byte Spill
	leaq	.L.str224, %rax
	movq	%rax, 4816(%rsp)        # 8-byte Spill
	leaq	.L.str1488, %rax
	movq	%rax, 4808(%rsp)        # 8-byte Spill
	movabsq	$842, %rax              # imm = 0x34A
	movq	%rax, 4800(%rsp)        # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, 4792(%rsp)        # 8-byte Spill
	leaq	.L.str240, %rax
	movq	%rax, 4784(%rsp)        # 8-byte Spill
	leaq	.L.str231, %rax
	movq	%rax, 4776(%rsp)        # 8-byte Spill
	leaq	.L.str239, %rax
	movq	%rax, 4768(%rsp)        # 8-byte Spill
	movabsq	$845, %rax              # imm = 0x34D
	movq	%rax, 4760(%rsp)        # 8-byte Spill
	movabsq	$9, %rax
	movq	%rax, 4752(%rsp)        # 8-byte Spill
	leaq	.L.str229, %rax
	movq	%rax, 4744(%rsp)        # 8-byte Spill
	leaq	.L.str238, %rax
	movq	%rax, 4736(%rsp)        # 8-byte Spill
	movabsq	$13, %rax
	movq	%rax, 4728(%rsp)        # 8-byte Spill
	leaq	.L.str237, %rax
	movq	%rax, 4720(%rsp)        # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, 4712(%rsp)        # 8-byte Spill
	leaq	.L.str882, %rax
	movq	%rax, 4704(%rsp)        # 8-byte Spill
	leaq	.L.str236, %rax
	movq	%rax, 4696(%rsp)        # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 4688(%rsp)        # 8-byte Spill
	leaq	.L.str235, %rax
	movq	%rax, 4680(%rsp)        # 8-byte Spill
	movabsq	$35, %rax
	movq	%rax, 4672(%rsp)        # 8-byte Spill
	leaq	.L.str233, %rax
	movq	%rax, 4664(%rsp)        # 8-byte Spill
	leaq	.L.str234, %rax
	movq	%rax, 4656(%rsp)        # 8-byte Spill
	leaq	.L.str232, %rax
	movq	%rax, 4648(%rsp)        # 8-byte Spill
	leaq	.L.str51125, %rax
	movq	%rax, 4640(%rsp)        # 8-byte Spill
	movabsq	$12, %rax
	movq	%rax, 4632(%rsp)        # 8-byte Spill
	leaq	.L.str230, %rax
	movq	%rax, 4624(%rsp)        # 8-byte Spill
	leaq	.L.str157, %rax
	movq	%rax, 4616(%rsp)        # 8-byte Spill
	leaq	.L.str228, %rax
	movq	%rax, 4608(%rsp)        # 8-byte Spill
	movabsq	$844, %rax              # imm = 0x34C
	movq	%rax, 4600(%rsp)        # 8-byte Spill
	leaq	.L.str82, %rax
	movq	%rax, 4592(%rsp)        # 8-byte Spill
	leaq	.L.str226, %rax
	movq	%rax, 4584(%rsp)        # 8-byte Spill
	leaq	.L.str227, %rax
	movq	%rax, 4576(%rsp)        # 8-byte Spill
	leaq	.L.str219, %rax
	movq	%rax, 4568(%rsp)        # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 4560(%rsp)        # 8-byte Spill
	movabsq	$48, %rax
	.loc	2 844 0                 # eispack.c:844:0
.Ltmp323:
	movq	%rax, 4552(%rsp)        # 8-byte Spill
	movq	4560(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 4544(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movl	%esi, 4540(%rsp)        # 4-byte Spill
	movq	%r15, %rsi
	movq	%rdx, 4528(%rsp)        # 8-byte Spill
	movq	%r12, %rdx
	movq	4832(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 4520(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	4552(%rsp), %rax        # 8-byte Reload
	movq	%r8, 4512(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 4504(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r15, 4496(%rsp)        # 8-byte Spill
	movq	%r12, 4488(%rsp)        # 8-byte Spill
	movq	%r13, 4480(%rsp)        # 8-byte Spill
	movl	%ebp, 4476(%rsp)        # 4-byte Spill
	movq	%r14, 4464(%rsp)        # 8-byte Spill
	movq	%rbx, 4456(%rsp)        # 8-byte Spill
	movq	%r10, 4448(%rsp)        # 8-byte Spill
	movq	%r11, 4440(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	4504(%rsp), %rdi        # 8-byte Reload
	movq	4840(%rsp), %rsi        # 8-byte Reload
	movq	4544(%rsp), %rdx        # 8-byte Reload
	movq	4544(%rsp), %rcx        # 8-byte Reload
	movq	4808(%rsp), %r8         # 8-byte Reload
	movq	4528(%rsp), %r9         # 8-byte Reload
	movq	4568(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	4528(%rsp), %rdi        # 8-byte Reload
	movq	4840(%rsp), %rsi        # 8-byte Reload
	movq	4544(%rsp), %rdx        # 8-byte Reload
	movq	4528(%rsp), %rcx        # 8-byte Reload
	movq	4816(%rsp), %r8         # 8-byte Reload
	movq	4528(%rsp), %r9         # 8-byte Reload
	movq	4448(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	4880(%rsp), %rdi        # 8-byte Reload
	movq	4840(%rsp), %rsi        # 8-byte Reload
	movq	4520(%rsp), %rdx        # 8-byte Reload
	movq	4528(%rsp), %rcx        # 8-byte Reload
	movq	4832(%rsp), %r8         # 8-byte Reload
	movq	4544(%rsp), %r9         # 8-byte Reload
	movq	4448(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	4560(%rsp), %rdi        # 8-byte Reload
	movq	4496(%rsp), %rsi        # 8-byte Reload
	movq	4488(%rsp), %rdx        # 8-byte Reload
	movq	4584(%rsp), %rcx        # 8-byte Reload
	movq	4552(%rsp), %r8         # 8-byte Reload
	movl	4476(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	4504(%rsp), %rdi        # 8-byte Reload
	movq	4840(%rsp), %rsi        # 8-byte Reload
	movq	4528(%rsp), %rdx        # 8-byte Reload
	movq	4544(%rsp), %rcx        # 8-byte Reload
	movq	4808(%rsp), %r8         # 8-byte Reload
	movq	4528(%rsp), %r9         # 8-byte Reload
	movq	4568(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	4528(%rsp), %rdi        # 8-byte Reload
	movq	4840(%rsp), %rsi        # 8-byte Reload
	movq	4544(%rsp), %rdx        # 8-byte Reload
	movq	4528(%rsp), %rcx        # 8-byte Reload
	movq	4576(%rsp), %r8         # 8-byte Reload
	movq	4528(%rsp), %r9         # 8-byte Reload
	movq	4448(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	4880(%rsp), %rdi        # 8-byte Reload
	movq	4840(%rsp), %rsi        # 8-byte Reload
	movq	4888(%rsp), %rdx        # 8-byte Reload
	movq	4528(%rsp), %rcx        # 8-byte Reload
	movq	4584(%rsp), %r8         # 8-byte Reload
	movq	4544(%rsp), %r9         # 8-byte Reload
	movq	4448(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	4600(%rsp), %rdi        # 8-byte Reload
	movq	4496(%rsp), %rsi        # 8-byte Reload
	movq	4488(%rsp), %rdx        # 8-byte Reload
	movq	4608(%rsp), %rcx        # 8-byte Reload
	movq	4688(%rsp), %r8         # 8-byte Reload
	movl	4476(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	4504(%rsp), %rdi        # 8-byte Reload
	movq	4840(%rsp), %rsi        # 8-byte Reload
	movq	4520(%rsp), %rdx        # 8-byte Reload
	movq	4528(%rsp), %rcx        # 8-byte Reload
	movq	4832(%rsp), %r8         # 8-byte Reload
	movq	4544(%rsp), %r9         # 8-byte Reload
	movq	4512(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	4528(%rsp), %rdi        # 8-byte Reload
	movq	4840(%rsp), %rsi        # 8-byte Reload
	movq	10968(%rsp), %rdx       # 8-byte Reload
	movq	4528(%rsp), %rcx        # 8-byte Reload
	movq	4592(%rsp), %r8         # 8-byte Reload
	movq	4544(%rsp), %r9         # 8-byte Reload
	movq	4512(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	4520(%rsp), %rax        # 8-byte Reload
	shlq	$3, %rax
	movq	10968(%rsp), %rcx       # 8-byte Reload
	addq	%rax, %rcx
	movq	4880(%rsp), %rdi        # 8-byte Reload
	movq	4840(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	4528(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 4432(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	4608(%rsp), %r8         # 8-byte Reload
	movq	4544(%rsp), %r9         # 8-byte Reload
	movq	4512(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	4600(%rsp), %rdi        # 8-byte Reload
	movq	4496(%rsp), %rsi        # 8-byte Reload
	movq	4488(%rsp), %rdx        # 8-byte Reload
	movq	4744(%rsp), %rcx        # 8-byte Reload
	movq	4712(%rsp), %r8         # 8-byte Reload
	movl	4476(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	4528(%rsp), %rdi        # 8-byte Reload
	movq	4840(%rsp), %rsi        # 8-byte Reload
	movq	4432(%rsp), %rdx        # 8-byte Reload
	movq	4528(%rsp), %rcx        # 8-byte Reload
	movq	4608(%rsp), %r8         # 8-byte Reload
	movq	4544(%rsp), %r9         # 8-byte Reload
	movq	4512(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	10968(%rsp), %rax       # 8-byte Reload
	movq	4520(%rsp), %rcx        # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
	movq	4880(%rsp), %rdi        # 8-byte Reload
	movq	4840(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 4424(%rsp)       # 8-byte Spill
	movq	4528(%rsp), %rdx        # 8-byte Reload
	movq	4744(%rsp), %rcx        # 8-byte Reload
	movq	4544(%rsp), %r8         # 8-byte Reload
	movq	4512(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
.Ltmp324:
	#DEBUG_VALUE: tred1:f <- [RSP+4424]
	.loc	2 845 0                 # eispack.c:845:0
	movq	4760(%rsp), %rdi        # 8-byte Reload
	movq	4496(%rsp), %rsi        # 8-byte Reload
	movq	4488(%rsp), %rdx        # 8-byte Reload
	movq	4624(%rsp), %rcx        # 8-byte Reload
	movq	4688(%rsp), %r8         # 8-byte Reload
	movl	4476(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	4504(%rsp), %rdi        # 8-byte Reload
	movq	4840(%rsp), %rsi        # 8-byte Reload
	movq	4520(%rsp), %rdx        # 8-byte Reload
	movq	4528(%rsp), %rcx        # 8-byte Reload
	movq	4832(%rsp), %r8         # 8-byte Reload
	movq	4544(%rsp), %r9         # 8-byte Reload
	movq	4512(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	4528(%rsp), %rdi        # 8-byte Reload
	movq	4840(%rsp), %rsi        # 8-byte Reload
	movq	10960(%rsp), %rdx       # 8-byte Reload
	movq	4528(%rsp), %rcx        # 8-byte Reload
	movq	4616(%rsp), %r8         # 8-byte Reload
	movq	4544(%rsp), %r9         # 8-byte Reload
	movq	4512(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	4520(%rsp), %rax        # 8-byte Reload
	shlq	$3, %rax
	movq	10960(%rsp), %rcx       # 8-byte Reload
	addq	%rax, %rcx
	movq	4880(%rsp), %rdi        # 8-byte Reload
	movq	4840(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	4528(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 4416(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	4624(%rsp), %r8         # 8-byte Reload
	movq	4544(%rsp), %r9         # 8-byte Reload
	movq	4512(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	4760(%rsp), %rdi        # 8-byte Reload
	movq	4496(%rsp), %rsi        # 8-byte Reload
	movq	4488(%rsp), %rdx        # 8-byte Reload
	movq	4776(%rsp), %rcx        # 8-byte Reload
	movq	4712(%rsp), %r8         # 8-byte Reload
	movl	4476(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	4528(%rsp), %rdi        # 8-byte Reload
	movq	4840(%rsp), %rsi        # 8-byte Reload
	movq	4416(%rsp), %rdx        # 8-byte Reload
	movq	4528(%rsp), %rcx        # 8-byte Reload
	movq	4624(%rsp), %r8         # 8-byte Reload
	movq	4544(%rsp), %r9         # 8-byte Reload
	movq	4512(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	10960(%rsp), %rax       # 8-byte Reload
	movq	4520(%rsp), %rcx        # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
	movq	4880(%rsp), %rdi        # 8-byte Reload
	movq	4840(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 4408(%rsp)       # 8-byte Spill
	movq	4528(%rsp), %rdx        # 8-byte Reload
	movq	4776(%rsp), %rcx        # 8-byte Reload
	movq	4544(%rsp), %r8         # 8-byte Reload
	movq	4512(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	4760(%rsp), %rdi        # 8-byte Reload
	movq	4496(%rsp), %rsi        # 8-byte Reload
	movq	4488(%rsp), %rdx        # 8-byte Reload
	movq	4648(%rsp), %rcx        # 8-byte Reload
	movq	4824(%rsp), %r8         # 8-byte Reload
	movl	4476(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	4528(%rsp), %rdi        # 8-byte Reload
	movq	4840(%rsp), %rsi        # 8-byte Reload
	movq	4520(%rsp), %rdx        # 8-byte Reload
	movq	4528(%rsp), %rcx        # 8-byte Reload
	movq	4832(%rsp), %r8         # 8-byte Reload
	movq	4544(%rsp), %r9         # 8-byte Reload
	movq	4512(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	4520(%rsp), %rax        # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %esi
	movl	%esi, %edx
	movq	4880(%rsp), %rdi        # 8-byte Reload
	movq	4872(%rsp), %rsi        # 8-byte Reload
	movq	4528(%rsp), %rcx        # 8-byte Reload
	movq	4648(%rsp), %r8         # 8-byte Reload
	movq	4544(%rsp), %r9         # 8-byte Reload
	movq	4512(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 4404(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	4760(%rsp), %rdi        # 8-byte Reload
	movq	4496(%rsp), %rsi        # 8-byte Reload
	movq	4488(%rsp), %rdx        # 8-byte Reload
	movq	4664(%rsp), %rcx        # 8-byte Reload
	movq	4632(%rsp), %r8         # 8-byte Reload
	movl	4476(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	10988(%rsp), %r9d       # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	4504(%rsp), %rdi        # 8-byte Reload
	movq	4872(%rsp), %rsi        # 8-byte Reload
	movq	4528(%rsp), %rcx        # 8-byte Reload
	movq	4640(%rsp), %r8         # 8-byte Reload
	movq	4544(%rsp), %r9         # 8-byte Reload
	movq	4512(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	4404(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %esi
	movl	%esi, %edx
	movq	4528(%rsp), %rdi        # 8-byte Reload
	movq	4872(%rsp), %rsi        # 8-byte Reload
	movq	4528(%rsp), %rcx        # 8-byte Reload
	movq	4648(%rsp), %r8         # 8-byte Reload
	movq	4544(%rsp), %r9         # 8-byte Reload
	movq	4512(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	4404(%rsp), %ebp        # 4-byte Reload
	movl	10988(%rsp), %esi       # 4-byte Reload
	imull	%esi, %ebp
	movl	%ebp, %esi
	movl	%esi, %edx
	movq	4880(%rsp), %rdi        # 8-byte Reload
	movq	4872(%rsp), %rsi        # 8-byte Reload
	movq	4528(%rsp), %rcx        # 8-byte Reload
	movq	4664(%rsp), %r8         # 8-byte Reload
	movq	4544(%rsp), %r9         # 8-byte Reload
	movq	4512(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%ebp, 4400(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	4760(%rsp), %rdi        # 8-byte Reload
	movq	4496(%rsp), %rsi        # 8-byte Reload
	movq	4488(%rsp), %rdx        # 8-byte Reload
	movq	4656(%rsp), %rcx        # 8-byte Reload
	movq	4824(%rsp), %r8         # 8-byte Reload
	movl	4476(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	4528(%rsp), %rdi        # 8-byte Reload
	movq	4840(%rsp), %rsi        # 8-byte Reload
	movq	4520(%rsp), %rdx        # 8-byte Reload
	movq	4528(%rsp), %rcx        # 8-byte Reload
	movq	4832(%rsp), %r8         # 8-byte Reload
	movq	4544(%rsp), %r9         # 8-byte Reload
	movq	4512(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	4520(%rsp), %rax        # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %esi
	movl	%esi, %edx
	movq	4880(%rsp), %rdi        # 8-byte Reload
	movq	4872(%rsp), %rsi        # 8-byte Reload
	movq	4528(%rsp), %rcx        # 8-byte Reload
	movq	4656(%rsp), %r8         # 8-byte Reload
	movq	4544(%rsp), %r9         # 8-byte Reload
	movq	4512(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 4396(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	4760(%rsp), %rdi        # 8-byte Reload
	movq	4496(%rsp), %rsi        # 8-byte Reload
	movq	4488(%rsp), %rdx        # 8-byte Reload
	movq	4680(%rsp), %rcx        # 8-byte Reload
	movq	4792(%rsp), %r8         # 8-byte Reload
	movl	4476(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	4396(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	4504(%rsp), %rdi        # 8-byte Reload
	movq	4872(%rsp), %rsi        # 8-byte Reload
	movq	4528(%rsp), %rcx        # 8-byte Reload
	movq	4656(%rsp), %r8         # 8-byte Reload
	movq	4544(%rsp), %r9         # 8-byte Reload
	movq	4512(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	4400(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %esi
	movl	%esi, %edx
	movq	4528(%rsp), %rdi        # 8-byte Reload
	movq	4872(%rsp), %rsi        # 8-byte Reload
	movq	4528(%rsp), %rcx        # 8-byte Reload
	movq	4664(%rsp), %r8         # 8-byte Reload
	movq	4544(%rsp), %r9         # 8-byte Reload
	movq	4512(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	4400(%rsp), %ebp        # 4-byte Reload
	movl	4396(%rsp), %esi        # 4-byte Reload
	addl	%esi, %ebp
	movl	%ebp, %esi
	movl	%esi, %edx
	movq	4880(%rsp), %rdi        # 8-byte Reload
	movq	4872(%rsp), %rsi        # 8-byte Reload
	movq	4528(%rsp), %rcx        # 8-byte Reload
	movq	4680(%rsp), %r8         # 8-byte Reload
	movq	4544(%rsp), %r9         # 8-byte Reload
	movq	4512(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%ebp, 4392(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	4760(%rsp), %rdi        # 8-byte Reload
	movq	4496(%rsp), %rsi        # 8-byte Reload
	movq	4488(%rsp), %rdx        # 8-byte Reload
	movq	4696(%rsp), %rcx        # 8-byte Reload
	movq	4672(%rsp), %r8         # 8-byte Reload
	movl	4476(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	4392(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	4528(%rsp), %rdi        # 8-byte Reload
	movq	4872(%rsp), %rsi        # 8-byte Reload
	movq	4528(%rsp), %rcx        # 8-byte Reload
	movq	4680(%rsp), %r8         # 8-byte Reload
	movq	4544(%rsp), %r9         # 8-byte Reload
	movq	4512(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	4392(%rsp), %ebp        # 4-byte Reload
	movslq	%ebp, %rax
	movq	4880(%rsp), %rdi        # 8-byte Reload
	movq	4840(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	4528(%rsp), %rcx        # 8-byte Reload
	movq	4696(%rsp), %r8         # 8-byte Reload
	movq	4544(%rsp), %r9         # 8-byte Reload
	movq	4512(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 4384(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	4760(%rsp), %rdi        # 8-byte Reload
	movq	4496(%rsp), %rsi        # 8-byte Reload
	movq	4488(%rsp), %rdx        # 8-byte Reload
	movq	4720(%rsp), %rcx        # 8-byte Reload
	movq	4688(%rsp), %r8         # 8-byte Reload
	movl	4476(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	4504(%rsp), %rdi        # 8-byte Reload
	movq	4840(%rsp), %rsi        # 8-byte Reload
	movq	4384(%rsp), %rdx        # 8-byte Reload
	movq	4528(%rsp), %rcx        # 8-byte Reload
	movq	4696(%rsp), %r8         # 8-byte Reload
	movq	4544(%rsp), %r9         # 8-byte Reload
	movq	4512(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	4528(%rsp), %rdi        # 8-byte Reload
	movq	4840(%rsp), %rsi        # 8-byte Reload
	movq	11104(%rsp), %rdx       # 8-byte Reload
	movq	4528(%rsp), %rcx        # 8-byte Reload
	movq	4704(%rsp), %r8         # 8-byte Reload
	movq	4544(%rsp), %r9         # 8-byte Reload
	movq	4512(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	4384(%rsp), %rax        # 8-byte Reload
	shlq	$3, %rax
	movq	11104(%rsp), %rcx       # 8-byte Reload
	addq	%rax, %rcx
	movq	4880(%rsp), %rdi        # 8-byte Reload
	movq	4840(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	4528(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 4376(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	4720(%rsp), %r8         # 8-byte Reload
	movq	4544(%rsp), %r9         # 8-byte Reload
	movq	4512(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	4760(%rsp), %rdi        # 8-byte Reload
	movq	4496(%rsp), %rsi        # 8-byte Reload
	movq	4488(%rsp), %rdx        # 8-byte Reload
	movq	4736(%rsp), %rcx        # 8-byte Reload
	movq	4712(%rsp), %r8         # 8-byte Reload
	movl	4476(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	4528(%rsp), %rdi        # 8-byte Reload
	movq	4840(%rsp), %rsi        # 8-byte Reload
	movq	4376(%rsp), %rdx        # 8-byte Reload
	movq	4528(%rsp), %rcx        # 8-byte Reload
	movq	4720(%rsp), %r8         # 8-byte Reload
	movq	4544(%rsp), %r9         # 8-byte Reload
	movq	4512(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	11104(%rsp), %rax       # 8-byte Reload
	movq	4384(%rsp), %rcx        # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
	movq	4880(%rsp), %rdi        # 8-byte Reload
	movq	4840(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 4368(%rsp)       # 8-byte Spill
	movq	4528(%rsp), %rdx        # 8-byte Reload
	movq	4736(%rsp), %rcx        # 8-byte Reload
	movq	4544(%rsp), %r8         # 8-byte Reload
	movq	4512(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	4760(%rsp), %rdi        # 8-byte Reload
	movq	4496(%rsp), %rsi        # 8-byte Reload
	movq	4488(%rsp), %rdx        # 8-byte Reload
	movq	4768(%rsp), %rcx        # 8-byte Reload
	movq	4728(%rsp), %r8         # 8-byte Reload
	movl	4476(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	4504(%rsp), %rdi        # 8-byte Reload
	movq	4840(%rsp), %rsi        # 8-byte Reload
	vmovsd	4368(%rsp), %xmm0       # 8-byte Reload
	movq	4528(%rsp), %rdx        # 8-byte Reload
	movq	4736(%rsp), %rcx        # 8-byte Reload
	movq	4544(%rsp), %r8         # 8-byte Reload
	movq	4512(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	4528(%rsp), %rdi        # 8-byte Reload
	movq	4840(%rsp), %rsi        # 8-byte Reload
	vmovsd	4424(%rsp), %xmm0       # 8-byte Reload
	movq	4528(%rsp), %rdx        # 8-byte Reload
	movq	4744(%rsp), %rcx        # 8-byte Reload
	movq	4544(%rsp), %r8         # 8-byte Reload
	movq	4512(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	4424(%rsp), %xmm0       # 8-byte Reload
	vmovsd	4368(%rsp), %xmm1       # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	4880(%rsp), %rdi        # 8-byte Reload
	movq	4840(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	4528(%rsp), %rdx        # 8-byte Reload
	movq	4768(%rsp), %rcx        # 8-byte Reload
	movq	4544(%rsp), %r8         # 8-byte Reload
	movq	4512(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 4360(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	4760(%rsp), %rdi        # 8-byte Reload
	movq	4496(%rsp), %rsi        # 8-byte Reload
	movq	4488(%rsp), %rdx        # 8-byte Reload
	movq	4784(%rsp), %rcx        # 8-byte Reload
	movq	4752(%rsp), %r8         # 8-byte Reload
	movl	4476(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	4504(%rsp), %rdi        # 8-byte Reload
	movq	4840(%rsp), %rsi        # 8-byte Reload
	vmovsd	4360(%rsp), %xmm0       # 8-byte Reload
	movq	4528(%rsp), %rdx        # 8-byte Reload
	movq	4768(%rsp), %rcx        # 8-byte Reload
	movq	4544(%rsp), %r8         # 8-byte Reload
	movq	4512(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	4528(%rsp), %rdi        # 8-byte Reload
	movq	4840(%rsp), %rsi        # 8-byte Reload
	vmovsd	4408(%rsp), %xmm0       # 8-byte Reload
	movq	4528(%rsp), %rdx        # 8-byte Reload
	movq	4776(%rsp), %rcx        # 8-byte Reload
	movq	4544(%rsp), %r8         # 8-byte Reload
	movq	4512(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	4408(%rsp), %xmm0       # 8-byte Reload
	vmovsd	4360(%rsp), %xmm1       # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
	movq	4880(%rsp), %rdi        # 8-byte Reload
	movq	4840(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	4528(%rsp), %rdx        # 8-byte Reload
	movq	4784(%rsp), %rcx        # 8-byte Reload
	movq	4544(%rsp), %r8         # 8-byte Reload
	movq	4512(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 4352(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
.Ltmp325:
	#DEBUG_VALUE: tred1:g <- [RSP+4352]
	.loc	2 842 0                 # eispack.c:842:0
	movq	4800(%rsp), %rdi        # 8-byte Reload
	movq	4496(%rsp), %rsi        # 8-byte Reload
	movq	4488(%rsp), %rdx        # 8-byte Reload
	movq	4816(%rsp), %rcx        # 8-byte Reload
	movq	4792(%rsp), %r8         # 8-byte Reload
	movl	4476(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	4504(%rsp), %rdi        # 8-byte Reload
	movq	4840(%rsp), %rsi        # 8-byte Reload
	movq	4528(%rsp), %rdx        # 8-byte Reload
	movq	4544(%rsp), %rcx        # 8-byte Reload
	movq	4808(%rsp), %r8         # 8-byte Reload
	movq	4544(%rsp), %r9         # 8-byte Reload
	movq	4512(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	4528(%rsp), %rdi        # 8-byte Reload
	movq	4840(%rsp), %rsi        # 8-byte Reload
	movq	4520(%rsp), %rdx        # 8-byte Reload
	movq	4528(%rsp), %rcx        # 8-byte Reload
	movq	4832(%rsp), %r8         # 8-byte Reload
	movq	4544(%rsp), %r9         # 8-byte Reload
	movq	4512(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	4520(%rsp), %rax        # 8-byte Reload
	addq	$1, %rax
	.loc	2 847 0                 # eispack.c:847:0
.Ltmp326:
	movq	4880(%rsp), %rdi        # 8-byte Reload
	movq	4840(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	4528(%rsp), %rcx        # 8-byte Reload
	movq	4816(%rsp), %r8         # 8-byte Reload
	movq	4544(%rsp), %r9         # 8-byte Reload
	movq	4512(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 4344(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	4464(%rsp), %rdi        # 8-byte Reload
	movq	4496(%rsp), %rsi        # 8-byte Reload
	movq	4488(%rsp), %rdx        # 8-byte Reload
	movq	4864(%rsp), %rcx        # 8-byte Reload
	movq	4824(%rsp), %r8         # 8-byte Reload
	movl	4476(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	4528(%rsp), %rdi        # 8-byte Reload
	movq	4840(%rsp), %rsi        # 8-byte Reload
	movq	4520(%rsp), %rdx        # 8-byte Reload
	movq	4528(%rsp), %rcx        # 8-byte Reload
	movq	4832(%rsp), %r8         # 8-byte Reload
	movq	4544(%rsp), %r9         # 8-byte Reload
	movq	4512(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	4520(%rsp), %rax        # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %esi
	movl	%esi, %edx
	movq	4880(%rsp), %rdi        # 8-byte Reload
	movq	4872(%rsp), %rsi        # 8-byte Reload
	movq	4528(%rsp), %rcx        # 8-byte Reload
	movq	4864(%rsp), %r8         # 8-byte Reload
	movq	4544(%rsp), %r9         # 8-byte Reload
	movq	4512(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 4340(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	4464(%rsp), %rdi        # 8-byte Reload
	movq	4496(%rsp), %rsi        # 8-byte Reload
	movq	4488(%rsp), %rdx        # 8-byte Reload
	movq	4896(%rsp), %rcx        # 8-byte Reload
	movq	4848(%rsp), %r8         # 8-byte Reload
	movl	4476(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	8880(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	4504(%rsp), %rdi        # 8-byte Reload
	movq	4872(%rsp), %rsi        # 8-byte Reload
	movq	4528(%rsp), %rcx        # 8-byte Reload
	movq	4856(%rsp), %r8         # 8-byte Reload
	movq	4544(%rsp), %r9         # 8-byte Reload
	movq	4512(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	4340(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %esi
	movl	%esi, %edx
	movq	4528(%rsp), %rdi        # 8-byte Reload
	movq	4872(%rsp), %rsi        # 8-byte Reload
	movq	4528(%rsp), %rcx        # 8-byte Reload
	movq	4864(%rsp), %r8         # 8-byte Reload
	movq	4544(%rsp), %r9         # 8-byte Reload
	movq	4512(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	4340(%rsp), %ebp        # 4-byte Reload
	movl	8880(%rsp), %esi        # 4-byte Reload
	cmpl	%esi, %ebp
	setl	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	4880(%rsp), %rdi        # 8-byte Reload
	movq	4528(%rsp), %rsi        # 8-byte Reload
	movq	4528(%rsp), %rcx        # 8-byte Reload
	movq	4896(%rsp), %r8         # 8-byte Reload
	movq	4544(%rsp), %r9         # 8-byte Reload
	movq	4512(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 4339(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	4464(%rsp), %rdi        # 8-byte Reload
	movq	4496(%rsp), %rsi        # 8-byte Reload
	movq	4488(%rsp), %rdx        # 8-byte Reload
	movq	4480(%rsp), %rcx        # 8-byte Reload
	movq	4504(%rsp), %r8         # 8-byte Reload
	movl	4476(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	4440(%rsp), %rdi        # 8-byte Reload
	movq	4544(%rsp), %rsi        # 8-byte Reload
	movq	4544(%rsp), %rdx        # 8-byte Reload
	movq	4528(%rsp), %rcx        # 8-byte Reload
	movq	4456(%rsp), %r8         # 8-byte Reload
	movq	4544(%rsp), %r9         # 8-byte Reload
	movq	4512(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	4504(%rsp), %rdi        # 8-byte Reload
	movq	4544(%rsp), %rsi        # 8-byte Reload
	movq	4544(%rsp), %rdx        # 8-byte Reload
	movq	4528(%rsp), %rcx        # 8-byte Reload
	movq	4448(%rsp), %r8         # 8-byte Reload
	movq	4544(%rsp), %r9         # 8-byte Reload
	movq	4512(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	4339(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	4528(%rsp), %rdi        # 8-byte Reload
	movq	4528(%rsp), %rsi        # 8-byte Reload
	movq	4528(%rsp), %rcx        # 8-byte Reload
	movq	4896(%rsp), %r8         # 8-byte Reload
	movq	4544(%rsp), %r9         # 8-byte Reload
	movq	4512(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	4339(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	vmovsd	4352(%rsp), %xmm0       # 8-byte Reload
	vmovsd	%xmm0, 4328(%rsp)       # 8-byte Spill
	jne	.LBB9_23
	jmp	.LBB9_25
.Ltmp327:
.LBB9_23:                               # %.lr.ph17
                                        #   in Loop: Header=BB9_22 Depth=2
	movabsq	$1, %rax
	movabsq	$0, %rcx
	leaq	.L.str247, %r8
	leaq	.L.str781, %rdx
	movabsq	$847, %rsi              # imm = 0x34F
	leaq	.L.str57131, %rdi
	leaq	.L.str244, %r9
	leaq	.L.str246, %r10
	movabsq	$2, %r11
	movl	$0, %ebx
	movl	$1, %ebp
	movabsq	$19134, %r14            # imm = 0x4ABE
	movabsq	$64, %r15
	leaq	.L.str245, %r12
	movabsq	$32, %r13
	movq	%rax, 4320(%rsp)        # 8-byte Spill
	leaq	.L.str233, %rax
	movq	%rax, 4312(%rsp)        # 8-byte Spill
	movabsq	$35, %rax
	movq	%rdi, 4304(%rsp)        # 8-byte Spill
	movq	%rsi, %rdi
	movq	%rax, 4296(%rsp)        # 8-byte Spill
	movq	4304(%rsp), %rax        # 8-byte Reload
	movq	%rsi, 4288(%rsp)        # 8-byte Spill
	movq	%rax, %rsi
	movq	%rdx, 4280(%rsp)        # 8-byte Spill
	movq	%r9, %rdx
	movq	%rcx, 4272(%rsp)        # 8-byte Spill
	movq	%r12, %rcx
	movq	4296(%rsp), %rax        # 8-byte Reload
	movq	%r8, 4264(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 4256(%rsp)         # 8-byte Spill
	movl	%ebx, %r9d
	movl	$1, (%rsp)
	movq	%r14, 4248(%rsp)        # 8-byte Spill
	movl	%ebp, 4244(%rsp)        # 4-byte Spill
	movq	%r15, 4232(%rsp)        # 8-byte Spill
	movq	%r12, 4224(%rsp)        # 8-byte Spill
	movq	%r13, 4216(%rsp)        # 8-byte Spill
	movl	%ebx, 4212(%rsp)        # 4-byte Spill
	movq	%r10, 4200(%rsp)        # 8-byte Spill
	movq	%r11, 4192(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movl	4400(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebx
	movl	%ebx, %edx
	movq	4320(%rsp), %rdi        # 8-byte Reload
	movq	4216(%rsp), %rsi        # 8-byte Reload
	movq	4320(%rsp), %rcx        # 8-byte Reload
	movq	4312(%rsp), %r8         # 8-byte Reload
	movq	4272(%rsp), %r9         # 8-byte Reload
	movq	4280(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	4400(%rsp), %ebx        # 4-byte Reload
	movslq	%ebx, %rax
	movq	4248(%rsp), %rdi        # 8-byte Reload
	movq	4232(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	4320(%rsp), %rcx        # 8-byte Reload
	movq	4224(%rsp), %r8         # 8-byte Reload
	movq	4272(%rsp), %r9         # 8-byte Reload
	movq	4280(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 4184(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	4288(%rsp), %rdi        # 8-byte Reload
	movq	4304(%rsp), %rsi        # 8-byte Reload
	movq	4256(%rsp), %rdx        # 8-byte Reload
	movq	4200(%rsp), %rcx        # 8-byte Reload
	movq	4192(%rsp), %r8         # 8-byte Reload
	movl	4212(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	4320(%rsp), %rdi        # 8-byte Reload
	movq	4272(%rsp), %rsi        # 8-byte Reload
	movq	4272(%rsp), %rdx        # 8-byte Reload
	movq	4320(%rsp), %rcx        # 8-byte Reload
	movq	4264(%rsp), %r8         # 8-byte Reload
	movq	4272(%rsp), %r9         # 8-byte Reload
	movq	4280(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	4888(%rsp), %rax        # 8-byte Reload
	vmovsd	4352(%rsp), %xmm0       # 8-byte Reload
	movq	%rax, 4176(%rsp)        # 8-byte Spill
	vmovsd	%xmm0, 4168(%rsp)       # 8-byte Spill
.LBB9_24:                               #   Parent Loop BB9_8 Depth=1
                                        #     Parent Loop BB9_22 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	vmovsd	4168(%rsp), %xmm0       # 8-byte Reload
	movq	4176(%rsp), %rax        # 8-byte Reload
	movabsq	$1, %rcx
	leaq	.L.str264, %rdx
	movabsq	$0, %rsi
	leaq	.L.str781, %rdi
	movabsq	$2, %r8
	leaq	.L.str247, %r9
	movabsq	$3, %r10
	leaq	.L.str225, %r11
	movabsq	$847, %rbx              # imm = 0x34F
	leaq	.L.str57131, %r14
	leaq	.L.str265, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 4160(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 4152(%rsp)        # 8-byte Spill
	leaq	.L.str263, %rax
	movq	%rax, 4144(%rsp)        # 8-byte Spill
	leaq	.L.str107, %rax
	movq	%rax, 4136(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 4128(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 4120(%rsp)        # 8-byte Spill
	leaq	.L.str249, %rax
	movq	%rax, 4112(%rsp)        # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, 4104(%rsp)        # 8-byte Spill
	leaq	.L.str248, %rax
	movq	%rax, 4096(%rsp)        # 8-byte Spill
	leaq	.L.str1488, %rax
	movq	%rax, 4088(%rsp)        # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, 4080(%rsp)        # 8-byte Spill
	leaq	.L.str261, %rax
	movq	%rax, 4072(%rsp)        # 8-byte Spill
	leaq	.L.str258, %rax
	movq	%rax, 4064(%rsp)        # 8-byte Spill
	movabsq	$850, %rax              # imm = 0x352
	movq	%rax, 4056(%rsp)        # 8-byte Spill
	leaq	.L.str262, %rax
	movq	%rax, 4048(%rsp)        # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, 4040(%rsp)        # 8-byte Spill
	leaq	.L.str260, %rax
	movq	%rax, 4032(%rsp)        # 8-byte Spill
	leaq	.L.str259, %rax
	movq	%rax, 4024(%rsp)        # 8-byte Spill
	movabsq	$9, %rax
	movq	%rax, 4016(%rsp)        # 8-byte Spill
	leaq	.L.str229, %rax
	movq	%rax, 4008(%rsp)        # 8-byte Spill
	leaq	.L.str254, %rax
	movq	%rax, 4000(%rsp)        # 8-byte Spill
	movabsq	$13, %rax
	movq	%rax, 3992(%rsp)        # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, 3984(%rsp)        # 8-byte Spill
	leaq	.L.str157, %rax
	movq	%rax, 3976(%rsp)        # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 3968(%rsp)        # 8-byte Spill
	leaq	.L.str251, %rax
	movq	%rax, 3960(%rsp)        # 8-byte Spill
	leaq	.L.str250, %rax
	movq	%rax, 3952(%rsp)        # 8-byte Spill
	leaq	.L.str257, %rax
	movq	%rax, 3944(%rsp)        # 8-byte Spill
	movabsq	$849, %rax              # imm = 0x351
	movq	%rax, 3936(%rsp)        # 8-byte Spill
	leaq	.L.str256, %rax
	movq	%rax, 3928(%rsp)        # 8-byte Spill
	leaq	.L.str255, %rax
	movq	%rax, 3920(%rsp)        # 8-byte Spill
	leaq	.L.str82, %rax
	movq	%rax, 3912(%rsp)        # 8-byte Spill
	leaq	.L.str253, %rax
	movq	%rax, 3904(%rsp)        # 8-byte Spill
	leaq	.L.str882, %rax
	movq	%rax, 3896(%rsp)        # 8-byte Spill
	leaq	.L.str252, %rax
	movq	%rax, 3888(%rsp)        # 8-byte Spill
	leaq	.L.str245, %rax
	movq	%rax, 3880(%rsp)        # 8-byte Spill
	leaq	.L.str240, %rax
	movq	%rax, 3872(%rsp)        # 8-byte Spill
	leaq	.L.str244, %rax
	movq	%rax, 3864(%rsp)        # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 3856(%rsp)        # 8-byte Spill
	movabsq	$48, %rax
	movq	%rax, 3848(%rsp)        # 8-byte Spill
	leaq	.L.str226, %rax
	.loc	2 849 0                 # eispack.c:849:0
.Ltmp328:
	movq	%rax, 3840(%rsp)        # 8-byte Spill
	movq	3856(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 3832(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 3824(%rsp)        # 8-byte Spill
	movq	%r14, %rsi
	movq	%rdx, 3816(%rsp)        # 8-byte Spill
	movq	%r9, %rdx
	movq	4096(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 3808(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	3848(%rsp), %rax        # 8-byte Reload
	movq	%r8, 3800(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 3792(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	vmovsd	%xmm0, 3784(%rsp)       # 8-byte Spill
	movq	%r15, 3776(%rsp)        # 8-byte Spill
	movl	%ebp, 3772(%rsp)        # 4-byte Spill
	movl	%r12d, 3768(%rsp)       # 4-byte Spill
	movq	%r13, 3760(%rsp)        # 8-byte Spill
	movq	%r14, 3752(%rsp)        # 8-byte Spill
	movq	%rbx, 3744(%rsp)        # 8-byte Spill
	movq	%r10, 3736(%rsp)        # 8-byte Spill
	movq	%r11, 3728(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	3800(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	movq	3824(%rsp), %rdx        # 8-byte Reload
	movq	3808(%rsp), %rcx        # 8-byte Reload
	movq	3840(%rsp), %r8         # 8-byte Reload
	movq	3808(%rsp), %r9         # 8-byte Reload
	movq	3864(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3808(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	movq	3824(%rsp), %rdx        # 8-byte Reload
	movq	3808(%rsp), %rcx        # 8-byte Reload
	movq	4112(%rsp), %r8         # 8-byte Reload
	movq	3808(%rsp), %r9         # 8-byte Reload
	movq	3792(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3760(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	movq	4160(%rsp), %rdx        # 8-byte Reload
	movq	3808(%rsp), %rcx        # 8-byte Reload
	movq	4096(%rsp), %r8         # 8-byte Reload
	movq	3824(%rsp), %r9         # 8-byte Reload
	movq	3792(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3856(%rsp), %rdi        # 8-byte Reload
	movq	3752(%rsp), %rsi        # 8-byte Reload
	movq	3792(%rsp), %rdx        # 8-byte Reload
	movq	3952(%rsp), %rcx        # 8-byte Reload
	movq	3848(%rsp), %r8         # 8-byte Reload
	movl	3772(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3800(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	movq	3824(%rsp), %rdx        # 8-byte Reload
	movq	3808(%rsp), %rcx        # 8-byte Reload
	movq	3872(%rsp), %r8         # 8-byte Reload
	movq	3808(%rsp), %r9         # 8-byte Reload
	movq	3864(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3808(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	movq	3824(%rsp), %rdx        # 8-byte Reload
	movq	3808(%rsp), %rcx        # 8-byte Reload
	movq	3960(%rsp), %r8         # 8-byte Reload
	movq	3808(%rsp), %r9         # 8-byte Reload
	movq	3792(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3760(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	vmovsd	3784(%rsp), %xmm0       # 8-byte Reload
	movq	3808(%rsp), %rdx        # 8-byte Reload
	movq	3952(%rsp), %rcx        # 8-byte Reload
	movq	3824(%rsp), %r8         # 8-byte Reload
	movq	3792(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	3936(%rsp), %rdi        # 8-byte Reload
	movq	3752(%rsp), %rsi        # 8-byte Reload
	movq	3792(%rsp), %rdx        # 8-byte Reload
	movq	3888(%rsp), %rcx        # 8-byte Reload
	movq	4080(%rsp), %r8         # 8-byte Reload
	movl	3772(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3800(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	movq	4184(%rsp), %rdx        # 8-byte Reload
	movq	3808(%rsp), %rcx        # 8-byte Reload
	movq	3880(%rsp), %r8         # 8-byte Reload
	movq	3824(%rsp), %r9         # 8-byte Reload
	movq	3832(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3808(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	movq	4160(%rsp), %rdx        # 8-byte Reload
	movq	3808(%rsp), %rcx        # 8-byte Reload
	movq	4096(%rsp), %r8         # 8-byte Reload
	movq	3824(%rsp), %r9         # 8-byte Reload
	movq	3832(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	4160(%rsp), %rax        # 8-byte Reload
	movq	4184(%rsp), %rcx        # 8-byte Reload
	addq	%rcx, %rax
	movq	3760(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	3808(%rsp), %rcx        # 8-byte Reload
	movq	3888(%rsp), %r8         # 8-byte Reload
	movq	3824(%rsp), %r9         # 8-byte Reload
	movq	3832(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 3720(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	3936(%rsp), %rdi        # 8-byte Reload
	movq	3752(%rsp), %rsi        # 8-byte Reload
	movq	3792(%rsp), %rdx        # 8-byte Reload
	movq	3904(%rsp), %rcx        # 8-byte Reload
	movq	3968(%rsp), %r8         # 8-byte Reload
	movl	3772(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3800(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	movq	3720(%rsp), %rdx        # 8-byte Reload
	movq	3808(%rsp), %rcx        # 8-byte Reload
	movq	3888(%rsp), %r8         # 8-byte Reload
	movq	3824(%rsp), %r9         # 8-byte Reload
	movq	3832(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3808(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	movq	11104(%rsp), %rdx       # 8-byte Reload
	movq	3808(%rsp), %rcx        # 8-byte Reload
	movq	3896(%rsp), %r8         # 8-byte Reload
	movq	3824(%rsp), %r9         # 8-byte Reload
	movq	3832(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	3720(%rsp), %rax        # 8-byte Reload
	shlq	$3, %rax
	movq	11104(%rsp), %rcx       # 8-byte Reload
	addq	%rax, %rcx
	movq	3760(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	3808(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 3712(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	3904(%rsp), %r8         # 8-byte Reload
	movq	3824(%rsp), %r9         # 8-byte Reload
	movq	3832(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	3936(%rsp), %rdi        # 8-byte Reload
	movq	3752(%rsp), %rsi        # 8-byte Reload
	movq	3792(%rsp), %rdx        # 8-byte Reload
	movq	4000(%rsp), %rcx        # 8-byte Reload
	movq	3984(%rsp), %r8         # 8-byte Reload
	movl	3772(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3808(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	movq	3712(%rsp), %rdx        # 8-byte Reload
	movq	3808(%rsp), %rcx        # 8-byte Reload
	movq	3904(%rsp), %r8         # 8-byte Reload
	movq	3824(%rsp), %r9         # 8-byte Reload
	movq	3832(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	11104(%rsp), %rax       # 8-byte Reload
	movq	3720(%rsp), %rcx        # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
	movq	3760(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 3704(%rsp)       # 8-byte Spill
	movq	3808(%rsp), %rdx        # 8-byte Reload
	movq	4000(%rsp), %rcx        # 8-byte Reload
	movq	3824(%rsp), %r8         # 8-byte Reload
	movq	3832(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	3936(%rsp), %rdi        # 8-byte Reload
	movq	3752(%rsp), %rsi        # 8-byte Reload
	movq	3792(%rsp), %rdx        # 8-byte Reload
	movq	3920(%rsp), %rcx        # 8-byte Reload
	movq	3968(%rsp), %r8         # 8-byte Reload
	movl	3772(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3800(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	movq	4160(%rsp), %rdx        # 8-byte Reload
	movq	3808(%rsp), %rcx        # 8-byte Reload
	movq	4096(%rsp), %r8         # 8-byte Reload
	movq	3824(%rsp), %r9         # 8-byte Reload
	movq	3832(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3808(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	movq	10968(%rsp), %rdx       # 8-byte Reload
	movq	3808(%rsp), %rcx        # 8-byte Reload
	movq	3912(%rsp), %r8         # 8-byte Reload
	movq	3824(%rsp), %r9         # 8-byte Reload
	movq	3832(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	4160(%rsp), %rax        # 8-byte Reload
	shlq	$3, %rax
	movq	10968(%rsp), %rcx       # 8-byte Reload
	addq	%rax, %rcx
	movq	3760(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	3808(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 3696(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	3920(%rsp), %r8         # 8-byte Reload
	movq	3824(%rsp), %r9         # 8-byte Reload
	movq	3832(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	3936(%rsp), %rdi        # 8-byte Reload
	movq	3752(%rsp), %rsi        # 8-byte Reload
	movq	3792(%rsp), %rdx        # 8-byte Reload
	movq	3928(%rsp), %rcx        # 8-byte Reload
	movq	3984(%rsp), %r8         # 8-byte Reload
	movl	3772(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3808(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	movq	3696(%rsp), %rdx        # 8-byte Reload
	movq	3808(%rsp), %rcx        # 8-byte Reload
	movq	3920(%rsp), %r8         # 8-byte Reload
	movq	3824(%rsp), %r9         # 8-byte Reload
	movq	3832(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	10968(%rsp), %rax       # 8-byte Reload
	movq	4160(%rsp), %rcx        # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
	movq	3760(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 3688(%rsp)       # 8-byte Spill
	movq	3808(%rsp), %rdx        # 8-byte Reload
	movq	3928(%rsp), %rcx        # 8-byte Reload
	movq	3824(%rsp), %r8         # 8-byte Reload
	movq	3832(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	3936(%rsp), %rdi        # 8-byte Reload
	movq	3752(%rsp), %rsi        # 8-byte Reload
	movq	3792(%rsp), %rdx        # 8-byte Reload
	movq	3944(%rsp), %rcx        # 8-byte Reload
	movq	3992(%rsp), %r8         # 8-byte Reload
	movl	3772(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3800(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	vmovsd	3688(%rsp), %xmm0       # 8-byte Reload
	movq	3808(%rsp), %rdx        # 8-byte Reload
	movq	3928(%rsp), %rcx        # 8-byte Reload
	movq	3824(%rsp), %r8         # 8-byte Reload
	movq	3832(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	3808(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	vmovsd	3704(%rsp), %xmm0       # 8-byte Reload
	movq	3808(%rsp), %rdx        # 8-byte Reload
	movq	4000(%rsp), %rcx        # 8-byte Reload
	movq	3824(%rsp), %r8         # 8-byte Reload
	movq	3832(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	3704(%rsp), %xmm0       # 8-byte Reload
	vmovsd	3688(%rsp), %xmm1       # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	3760(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	3808(%rsp), %rdx        # 8-byte Reload
	movq	3944(%rsp), %rcx        # 8-byte Reload
	movq	3824(%rsp), %r8         # 8-byte Reload
	movq	3832(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 3680(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	3936(%rsp), %rdi        # 8-byte Reload
	movq	3752(%rsp), %rsi        # 8-byte Reload
	movq	3792(%rsp), %rdx        # 8-byte Reload
	movq	3960(%rsp), %rcx        # 8-byte Reload
	movq	4016(%rsp), %r8         # 8-byte Reload
	movl	3772(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3800(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	vmovsd	3680(%rsp), %xmm0       # 8-byte Reload
	movq	3808(%rsp), %rdx        # 8-byte Reload
	movq	3944(%rsp), %rcx        # 8-byte Reload
	movq	3824(%rsp), %r8         # 8-byte Reload
	movq	3832(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	3808(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	vmovsd	3784(%rsp), %xmm0       # 8-byte Reload
	movq	3808(%rsp), %rdx        # 8-byte Reload
	movq	3952(%rsp), %rcx        # 8-byte Reload
	movq	3824(%rsp), %r8         # 8-byte Reload
	movq	3832(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	3784(%rsp), %xmm0       # 8-byte Reload
	vmovsd	3680(%rsp), %xmm1       # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
	movq	3760(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	3808(%rsp), %rdx        # 8-byte Reload
	movq	3960(%rsp), %rcx        # 8-byte Reload
	movq	3824(%rsp), %r8         # 8-byte Reload
	movq	3832(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 3672(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
.Ltmp329:
	#DEBUG_VALUE: tred1:g <- [RSP+3672]
	.loc	2 850 0                 # eispack.c:850:0
	movq	4056(%rsp), %rdi        # 8-byte Reload
	movq	3752(%rsp), %rsi        # 8-byte Reload
	movq	3792(%rsp), %rdx        # 8-byte Reload
	movq	4064(%rsp), %rcx        # 8-byte Reload
	movq	3968(%rsp), %r8         # 8-byte Reload
	movl	3772(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3800(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	movq	4160(%rsp), %rdx        # 8-byte Reload
	movq	3808(%rsp), %rcx        # 8-byte Reload
	movq	4096(%rsp), %r8         # 8-byte Reload
	movq	3824(%rsp), %r9         # 8-byte Reload
	movq	3832(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3808(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	movq	10960(%rsp), %rdx       # 8-byte Reload
	movq	3808(%rsp), %rcx        # 8-byte Reload
	movq	3976(%rsp), %r8         # 8-byte Reload
	movq	3824(%rsp), %r9         # 8-byte Reload
	movq	3832(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	4160(%rsp), %rax        # 8-byte Reload
	shlq	$3, %rax
	movq	10960(%rsp), %rcx       # 8-byte Reload
	addq	%rax, %rcx
	movq	3760(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	3808(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 3664(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	4064(%rsp), %r8         # 8-byte Reload
	movq	3824(%rsp), %r9         # 8-byte Reload
	movq	3832(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	4056(%rsp), %rdi        # 8-byte Reload
	movq	3752(%rsp), %rsi        # 8-byte Reload
	movq	3792(%rsp), %rdx        # 8-byte Reload
	movq	4024(%rsp), %rcx        # 8-byte Reload
	movq	3984(%rsp), %r8         # 8-byte Reload
	movl	3772(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3808(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	movq	3664(%rsp), %rdx        # 8-byte Reload
	movq	3808(%rsp), %rcx        # 8-byte Reload
	movq	4064(%rsp), %r8         # 8-byte Reload
	movq	3824(%rsp), %r9         # 8-byte Reload
	movq	3832(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	10960(%rsp), %rax       # 8-byte Reload
	movq	4160(%rsp), %rcx        # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
	movq	3760(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 3656(%rsp)       # 8-byte Spill
	movq	3808(%rsp), %rdx        # 8-byte Reload
	movq	4024(%rsp), %rcx        # 8-byte Reload
	movq	3824(%rsp), %r8         # 8-byte Reload
	movq	3832(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	4056(%rsp), %rdi        # 8-byte Reload
	movq	3752(%rsp), %rsi        # 8-byte Reload
	movq	3792(%rsp), %rdx        # 8-byte Reload
	movq	4032(%rsp), %rcx        # 8-byte Reload
	movq	3992(%rsp), %r8         # 8-byte Reload
	movl	3772(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3800(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	vmovsd	3704(%rsp), %xmm0       # 8-byte Reload
	movq	3808(%rsp), %rdx        # 8-byte Reload
	movq	4000(%rsp), %rcx        # 8-byte Reload
	movq	3824(%rsp), %r8         # 8-byte Reload
	movq	3832(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	3808(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	vmovsd	4424(%rsp), %xmm0       # 8-byte Reload
	movq	3808(%rsp), %rdx        # 8-byte Reload
	movq	4008(%rsp), %rcx        # 8-byte Reload
	movq	3824(%rsp), %r8         # 8-byte Reload
	movq	3832(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	4424(%rsp), %xmm0       # 8-byte Reload
	vmovsd	3704(%rsp), %xmm1       # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	3760(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	3808(%rsp), %rdx        # 8-byte Reload
	movq	4032(%rsp), %rcx        # 8-byte Reload
	movq	3824(%rsp), %r8         # 8-byte Reload
	movq	3832(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 3648(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	4056(%rsp), %rdi        # 8-byte Reload
	movq	3752(%rsp), %rsi        # 8-byte Reload
	movq	3792(%rsp), %rdx        # 8-byte Reload
	movq	4072(%rsp), %rcx        # 8-byte Reload
	movq	4016(%rsp), %r8         # 8-byte Reload
	movl	3772(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3800(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	vmovsd	3656(%rsp), %xmm0       # 8-byte Reload
	movq	3808(%rsp), %rdx        # 8-byte Reload
	movq	4024(%rsp), %rcx        # 8-byte Reload
	movq	3824(%rsp), %r8         # 8-byte Reload
	movq	3832(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	3808(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	vmovsd	3648(%rsp), %xmm0       # 8-byte Reload
	movq	3808(%rsp), %rdx        # 8-byte Reload
	movq	4032(%rsp), %rcx        # 8-byte Reload
	movq	3824(%rsp), %r8         # 8-byte Reload
	movq	3832(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	3648(%rsp), %xmm0       # 8-byte Reload
	vmovsd	3656(%rsp), %xmm1       # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
	movq	3760(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	3808(%rsp), %rdx        # 8-byte Reload
	movq	4072(%rsp), %rcx        # 8-byte Reload
	movq	3824(%rsp), %r8         # 8-byte Reload
	movq	3832(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 3640(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	4056(%rsp), %rdi        # 8-byte Reload
	movq	3752(%rsp), %rsi        # 8-byte Reload
	movq	3792(%rsp), %rdx        # 8-byte Reload
	movq	4048(%rsp), %rcx        # 8-byte Reload
	movq	4040(%rsp), %r8         # 8-byte Reload
	movl	3772(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3800(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	movq	3664(%rsp), %rdx        # 8-byte Reload
	movq	3808(%rsp), %rcx        # 8-byte Reload
	movq	4064(%rsp), %r8         # 8-byte Reload
	movq	3824(%rsp), %r9         # 8-byte Reload
	movq	3832(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	3808(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	vmovsd	3640(%rsp), %xmm0       # 8-byte Reload
	movq	3808(%rsp), %rdx        # 8-byte Reload
	movq	4072(%rsp), %rcx        # 8-byte Reload
	movq	3824(%rsp), %r8         # 8-byte Reload
	movq	3832(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	10960(%rsp), %rax       # 8-byte Reload
	movq	4160(%rsp), %rcx        # 8-byte Reload
	vmovsd	3640(%rsp), %xmm0       # 8-byte Reload
	vmovsd	%xmm0, (%rax,%rcx,8)
.Ltmp330:
	.loc	2 847 0                 # eispack.c:847:0
	movq	3744(%rsp), %rdi        # 8-byte Reload
	movq	3752(%rsp), %rsi        # 8-byte Reload
	movq	3792(%rsp), %rdx        # 8-byte Reload
	movq	4112(%rsp), %rcx        # 8-byte Reload
	movq	4080(%rsp), %r8         # 8-byte Reload
	movl	3772(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3800(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	movq	3808(%rsp), %rdx        # 8-byte Reload
	movq	3824(%rsp), %rcx        # 8-byte Reload
	movq	4088(%rsp), %r8         # 8-byte Reload
	movq	3824(%rsp), %r9         # 8-byte Reload
	movq	3832(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3808(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	movq	4160(%rsp), %rdx        # 8-byte Reload
	movq	3808(%rsp), %rcx        # 8-byte Reload
	movq	4096(%rsp), %r8         # 8-byte Reload
	movq	3824(%rsp), %r9         # 8-byte Reload
	movq	3832(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	4160(%rsp), %rax        # 8-byte Reload
	addq	$1, %rax
	movq	3760(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	3808(%rsp), %rcx        # 8-byte Reload
	movq	4112(%rsp), %r8         # 8-byte Reload
	movq	3824(%rsp), %r9         # 8-byte Reload
	movq	3832(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 3632(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	3744(%rsp), %rdi        # 8-byte Reload
	movq	3752(%rsp), %rsi        # 8-byte Reload
	movq	3792(%rsp), %rdx        # 8-byte Reload
	movq	4144(%rsp), %rcx        # 8-byte Reload
	movq	4104(%rsp), %r8         # 8-byte Reload
	movl	3772(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3808(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	movq	3632(%rsp), %rdx        # 8-byte Reload
	movq	3808(%rsp), %rcx        # 8-byte Reload
	movq	4112(%rsp), %r8         # 8-byte Reload
	movq	3824(%rsp), %r9         # 8-byte Reload
	movq	3832(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3632(%rsp), %rax        # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	3760(%rsp), %rdi        # 8-byte Reload
	movq	4152(%rsp), %rsi        # 8-byte Reload
	movq	3808(%rsp), %rcx        # 8-byte Reload
	movq	4144(%rsp), %r8         # 8-byte Reload
	movq	3824(%rsp), %r9         # 8-byte Reload
	movq	3832(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 3628(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	3744(%rsp), %rdi        # 8-byte Reload
	movq	3752(%rsp), %rsi        # 8-byte Reload
	movq	3792(%rsp), %rdx        # 8-byte Reload
	movq	3816(%rsp), %rcx        # 8-byte Reload
	movq	4128(%rsp), %r8         # 8-byte Reload
	movl	3772(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	8900(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	3800(%rsp), %rdi        # 8-byte Reload
	movq	4152(%rsp), %rsi        # 8-byte Reload
	movq	3808(%rsp), %rcx        # 8-byte Reload
	movq	4136(%rsp), %r8         # 8-byte Reload
	movq	3824(%rsp), %r9         # 8-byte Reload
	movq	3832(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	3628(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	3808(%rsp), %rdi        # 8-byte Reload
	movq	4152(%rsp), %rsi        # 8-byte Reload
	movq	3808(%rsp), %rcx        # 8-byte Reload
	movq	4144(%rsp), %r8         # 8-byte Reload
	movq	3824(%rsp), %r9         # 8-byte Reload
	movq	3832(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	3628(%rsp), %ebp        # 4-byte Reload
	movl	8900(%rsp), %r12d       # 4-byte Reload
	cmpl	%r12d, %ebp
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	3760(%rsp), %rdi        # 8-byte Reload
	movq	3808(%rsp), %rsi        # 8-byte Reload
	movq	3808(%rsp), %rcx        # 8-byte Reload
	movq	3816(%rsp), %r8         # 8-byte Reload
	movq	3824(%rsp), %r9         # 8-byte Reload
	movq	3832(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 3627(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	3744(%rsp), %rdi        # 8-byte Reload
	movq	3752(%rsp), %rsi        # 8-byte Reload
	movq	3792(%rsp), %rdx        # 8-byte Reload
	movq	3776(%rsp), %rcx        # 8-byte Reload
	movq	3800(%rsp), %r8         # 8-byte Reload
	movl	3772(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3736(%rsp), %rdi        # 8-byte Reload
	movq	3824(%rsp), %rsi        # 8-byte Reload
	movq	3824(%rsp), %rdx        # 8-byte Reload
	movq	3808(%rsp), %rcx        # 8-byte Reload
	movq	3728(%rsp), %r8         # 8-byte Reload
	movq	3824(%rsp), %r9         # 8-byte Reload
	movq	3832(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	3800(%rsp), %rdi        # 8-byte Reload
	movq	3824(%rsp), %rsi        # 8-byte Reload
	movq	3824(%rsp), %rdx        # 8-byte Reload
	movq	3808(%rsp), %rcx        # 8-byte Reload
	movq	3792(%rsp), %r8         # 8-byte Reload
	movq	3824(%rsp), %r9         # 8-byte Reload
	movq	3832(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	3627(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	3808(%rsp), %rdi        # 8-byte Reload
	movq	3808(%rsp), %rsi        # 8-byte Reload
	movq	3808(%rsp), %rcx        # 8-byte Reload
	movq	3816(%rsp), %r8         # 8-byte Reload
	movq	3824(%rsp), %r9         # 8-byte Reload
	movq	3832(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	3627(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	movq	3632(%rsp), %rcx        # 8-byte Reload
	vmovsd	3672(%rsp), %xmm0       # 8-byte Reload
	vmovsd	3672(%rsp), %xmm1       # 8-byte Reload
	movq	%rcx, 4176(%rsp)        # 8-byte Spill
	vmovsd	%xmm0, 4168(%rsp)       # 8-byte Spill
	vmovsd	%xmm1, 4328(%rsp)       # 8-byte Spill
	jne	.LBB9_25
	jmp	.LBB9_24
.Ltmp331:
.LBB9_25:                               # %._crit_edge18
                                        #   in Loop: Header=BB9_22 Depth=2
	vmovsd	4328(%rsp), %xmm0       # 8-byte Reload
	movabsq	$1, %rax
	leaq	.L.str269, %rcx
	movabsq	$0, %rdx
	leaq	.L.str781, %rsi
	movabsq	$2, %rdi
	leaq	.L.str222, %r8
	movabsq	$3, %r9
	leaq	.L.str271, %r10
	movabsq	$842, %r11              # imm = 0x34A
	leaq	.L.str57131, %rbx
	leaq	.L.str225, %r14
	leaq	.L.str270, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 3616(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 3608(%rsp)        # 8-byte Spill
	leaq	.L.str268, %rax
	movq	%rax, 3600(%rsp)        # 8-byte Spill
	leaq	.L.str107, %rax
	movq	%rax, 3592(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 3584(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 3576(%rsp)        # 8-byte Spill
	leaq	.L.str224, %rax
	movq	%rax, 3568(%rsp)        # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, 3560(%rsp)        # 8-byte Spill
	leaq	.L.str227, %rax
	movq	%rax, 3552(%rsp)        # 8-byte Spill
	leaq	.L.str226, %rax
	movq	%rax, 3544(%rsp)        # 8-byte Spill
	leaq	.L.str1488, %rax
	movq	%rax, 3536(%rsp)        # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, 3528(%rsp)        # 8-byte Spill
	leaq	.L.str266, %rax
	movq	%rax, 3520(%rsp)        # 8-byte Spill
	leaq	.L.str230, %rax
	movq	%rax, 3512(%rsp)        # 8-byte Spill
	movabsq	$852, %rax              # imm = 0x354
	movq	%rax, 3504(%rsp)        # 8-byte Spill
	leaq	.L.str267, %rax
	movq	%rax, 3496(%rsp)        # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, 3488(%rsp)        # 8-byte Spill
	leaq	.L.str240, %rax
	movq	%rax, 3480(%rsp)        # 8-byte Spill
	leaq	.L.str251, %rax
	movq	%rax, 3472(%rsp)        # 8-byte Spill
	leaq	.L.str247, %rax
	movq	%rax, 3464(%rsp)        # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 3456(%rsp)        # 8-byte Spill
	movabsq	$48, %rax
	.loc	2 852 0                 # eispack.c:852:0
	movq	%rax, 3448(%rsp)        # 8-byte Spill
	movq	3456(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 3440(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 3432(%rsp)        # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, 3424(%rsp)        # 8-byte Spill
	movq	%r14, %rdx
	movq	3520(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 3416(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	3448(%rsp), %rax        # 8-byte Reload
	movq	%r8, 3408(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 3400(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	vmovsd	%xmm0, 3392(%rsp)       # 8-byte Spill
	movq	%r15, 3384(%rsp)        # 8-byte Spill
	movl	%ebp, 3380(%rsp)        # 4-byte Spill
	movl	%r12d, 3376(%rsp)       # 4-byte Spill
	movq	%r13, 3368(%rsp)        # 8-byte Spill
	movq	%r14, 3360(%rsp)        # 8-byte Spill
	movq	%rbx, 3352(%rsp)        # 8-byte Spill
	movq	%r10, 3344(%rsp)        # 8-byte Spill
	movq	%r11, 3336(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	3440(%rsp), %rdi        # 8-byte Reload
	movq	3576(%rsp), %rsi        # 8-byte Reload
	movq	3424(%rsp), %rdx        # 8-byte Reload
	movq	3616(%rsp), %rcx        # 8-byte Reload
	movq	3472(%rsp), %r8         # 8-byte Reload
	movq	3616(%rsp), %r9         # 8-byte Reload
	movq	3464(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3616(%rsp), %rdi        # 8-byte Reload
	movq	3576(%rsp), %rsi        # 8-byte Reload
	movq	3424(%rsp), %rdx        # 8-byte Reload
	movq	3616(%rsp), %rcx        # 8-byte Reload
	movq	3480(%rsp), %r8         # 8-byte Reload
	movq	3616(%rsp), %r9         # 8-byte Reload
	movq	3408(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3368(%rsp), %rdi        # 8-byte Reload
	movq	3576(%rsp), %rsi        # 8-byte Reload
	vmovsd	3392(%rsp), %xmm0       # 8-byte Reload
	movq	3616(%rsp), %rdx        # 8-byte Reload
	movq	3520(%rsp), %rcx        # 8-byte Reload
	movq	3424(%rsp), %r8         # 8-byte Reload
	movq	3408(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	3504(%rsp), %rdi        # 8-byte Reload
	movq	3352(%rsp), %rsi        # 8-byte Reload
	movq	3360(%rsp), %rdx        # 8-byte Reload
	movq	3496(%rsp), %rcx        # 8-byte Reload
	movq	3488(%rsp), %r8         # 8-byte Reload
	movl	3380(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3440(%rsp), %rdi        # 8-byte Reload
	movq	3576(%rsp), %rsi        # 8-byte Reload
	movq	4416(%rsp), %rdx        # 8-byte Reload
	movq	3616(%rsp), %rcx        # 8-byte Reload
	movq	3512(%rsp), %r8         # 8-byte Reload
	movq	3424(%rsp), %r9         # 8-byte Reload
	movq	3432(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	3616(%rsp), %rdi        # 8-byte Reload
	movq	3576(%rsp), %rsi        # 8-byte Reload
	vmovsd	3392(%rsp), %xmm0       # 8-byte Reload
	movq	3616(%rsp), %rdx        # 8-byte Reload
	movq	3520(%rsp), %rcx        # 8-byte Reload
	movq	3424(%rsp), %r8         # 8-byte Reload
	movq	3432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	4416(%rsp), %rax        # 8-byte Reload
	vmovsd	3392(%rsp), %xmm0       # 8-byte Reload
	vmovsd	%xmm0, (%rax)
.Ltmp332:
	.loc	2 842 0                 # eispack.c:842:0
	movq	3336(%rsp), %rdi        # 8-byte Reload
	movq	3352(%rsp), %rsi        # 8-byte Reload
	movq	3360(%rsp), %rdx        # 8-byte Reload
	movq	3552(%rsp), %rcx        # 8-byte Reload
	movq	3528(%rsp), %r8         # 8-byte Reload
	movl	3380(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3440(%rsp), %rdi        # 8-byte Reload
	movq	3576(%rsp), %rsi        # 8-byte Reload
	movq	3616(%rsp), %rdx        # 8-byte Reload
	movq	3424(%rsp), %rcx        # 8-byte Reload
	movq	3536(%rsp), %r8         # 8-byte Reload
	movq	3424(%rsp), %r9         # 8-byte Reload
	movq	3432(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3616(%rsp), %rdi        # 8-byte Reload
	movq	3576(%rsp), %rsi        # 8-byte Reload
	movq	4888(%rsp), %rdx        # 8-byte Reload
	movq	3616(%rsp), %rcx        # 8-byte Reload
	movq	3544(%rsp), %r8         # 8-byte Reload
	movq	3424(%rsp), %r9         # 8-byte Reload
	movq	3432(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	4888(%rsp), %rax        # 8-byte Reload
	addq	$1, %rax
	movq	3368(%rsp), %rdi        # 8-byte Reload
	movq	3576(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	3616(%rsp), %rcx        # 8-byte Reload
	movq	3552(%rsp), %r8         # 8-byte Reload
	movq	3424(%rsp), %r9         # 8-byte Reload
	movq	3432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 3328(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	3336(%rsp), %rdi        # 8-byte Reload
	movq	3352(%rsp), %rsi        # 8-byte Reload
	movq	3360(%rsp), %rdx        # 8-byte Reload
	movq	3600(%rsp), %rcx        # 8-byte Reload
	movq	3560(%rsp), %r8         # 8-byte Reload
	movl	3380(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3616(%rsp), %rdi        # 8-byte Reload
	movq	3576(%rsp), %rsi        # 8-byte Reload
	movq	4344(%rsp), %rdx        # 8-byte Reload
	movq	3616(%rsp), %rcx        # 8-byte Reload
	movq	3568(%rsp), %r8         # 8-byte Reload
	movq	3424(%rsp), %r9         # 8-byte Reload
	movq	3432(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	4344(%rsp), %rax        # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	3368(%rsp), %rdi        # 8-byte Reload
	movq	3608(%rsp), %rsi        # 8-byte Reload
	movq	3616(%rsp), %rcx        # 8-byte Reload
	movq	3600(%rsp), %r8         # 8-byte Reload
	movq	3424(%rsp), %r9         # 8-byte Reload
	movq	3432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 3324(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	3336(%rsp), %rdi        # 8-byte Reload
	movq	3352(%rsp), %rsi        # 8-byte Reload
	movq	3360(%rsp), %rdx        # 8-byte Reload
	movq	3416(%rsp), %rcx        # 8-byte Reload
	movq	3584(%rsp), %r8         # 8-byte Reload
	movl	3380(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	8900(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	3440(%rsp), %rdi        # 8-byte Reload
	movq	3608(%rsp), %rsi        # 8-byte Reload
	movq	3616(%rsp), %rcx        # 8-byte Reload
	movq	3592(%rsp), %r8         # 8-byte Reload
	movq	3424(%rsp), %r9         # 8-byte Reload
	movq	3432(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	3324(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	3616(%rsp), %rdi        # 8-byte Reload
	movq	3608(%rsp), %rsi        # 8-byte Reload
	movq	3616(%rsp), %rcx        # 8-byte Reload
	movq	3600(%rsp), %r8         # 8-byte Reload
	movq	3424(%rsp), %r9         # 8-byte Reload
	movq	3432(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	3324(%rsp), %ebp        # 4-byte Reload
	movl	8900(%rsp), %r12d       # 4-byte Reload
	cmpl	%r12d, %ebp
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	3368(%rsp), %rdi        # 8-byte Reload
	movq	3616(%rsp), %rsi        # 8-byte Reload
	movq	3616(%rsp), %rcx        # 8-byte Reload
	movq	3416(%rsp), %r8         # 8-byte Reload
	movq	3424(%rsp), %r9         # 8-byte Reload
	movq	3432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 3323(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	3336(%rsp), %rdi        # 8-byte Reload
	movq	3352(%rsp), %rsi        # 8-byte Reload
	movq	3360(%rsp), %rdx        # 8-byte Reload
	movq	3384(%rsp), %rcx        # 8-byte Reload
	movq	3440(%rsp), %r8         # 8-byte Reload
	movl	3380(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3400(%rsp), %rdi        # 8-byte Reload
	movq	3424(%rsp), %rsi        # 8-byte Reload
	movq	3424(%rsp), %rdx        # 8-byte Reload
	movq	3616(%rsp), %rcx        # 8-byte Reload
	movq	3344(%rsp), %r8         # 8-byte Reload
	movq	3424(%rsp), %r9         # 8-byte Reload
	movq	3432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	3440(%rsp), %rdi        # 8-byte Reload
	movq	3424(%rsp), %rsi        # 8-byte Reload
	movq	3424(%rsp), %rdx        # 8-byte Reload
	movq	3616(%rsp), %rcx        # 8-byte Reload
	movq	3408(%rsp), %r8         # 8-byte Reload
	movq	3424(%rsp), %r9         # 8-byte Reload
	movq	3432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	3323(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	3616(%rsp), %rdi        # 8-byte Reload
	movq	3616(%rsp), %rsi        # 8-byte Reload
	movq	3616(%rsp), %rcx        # 8-byte Reload
	movq	3416(%rsp), %r8         # 8-byte Reload
	movq	3424(%rsp), %r9         # 8-byte Reload
	movq	3432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	3323(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	movq	4344(%rsp), %rcx        # 8-byte Reload
	movq	3328(%rsp), %rdx        # 8-byte Reload
	movq	%rcx, 4912(%rsp)        # 8-byte Spill
	movq	%rdx, 4904(%rsp)        # 8-byte Spill
	jne	.LBB9_26
	jmp	.LBB9_22
.Ltmp333:
.LBB9_26:                               # %.loopexit20
                                        #   in Loop: Header=BB9_8 Depth=1
	movabsq	$0, %rax
	vxorps	%xmm0, %xmm0, %xmm0
	movabsq	$1, %rcx
	leaq	.L.str272, %rdx
	leaq	.L.str781, %rsi
	movabsq	$2, %rdi
	leaq	.L.str274, %r8
	movabsq	$3, %r9
	leaq	.L.str105, %r10
	movabsq	$858, %r11              # imm = 0x35A
	leaq	.L.str57131, %rbx
	leaq	.L.str271, %r14
	leaq	.L.str273, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 3312(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 3304(%rsp)        # 8-byte Spill
	leaq	.L.str110, %rax
	movq	%rax, 3296(%rsp)        # 8-byte Spill
	leaq	.L.str1488, %rax
	movq	%rax, 3288(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	.loc	2 858 0                 # eispack.c:858:0
.Ltmp334:
	movq	%rdi, 3280(%rsp)        # 8-byte Spill
	movq	%r11, %rdi
	movq	%rsi, 3272(%rsp)        # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, 3264(%rsp)        # 8-byte Spill
	movq	%r14, %rdx
	movq	%rax, 3256(%rsp)        # 8-byte Spill
	movq	3264(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 3248(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	3256(%rsp), %rax        # 8-byte Reload
	movq	%r8, 3240(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 3232(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	vmovsd	%xmm0, 3224(%rsp)       # 8-byte Spill
	movq	%r15, 3216(%rsp)        # 8-byte Spill
	movl	%ebp, 3212(%rsp)        # 4-byte Spill
	movl	%r12d, 3208(%rsp)       # 4-byte Spill
	movq	%r13, 3200(%rsp)        # 8-byte Spill
	movq	%r14, 3192(%rsp)        # 8-byte Spill
	movq	%rbx, 3184(%rsp)        # 8-byte Spill
	movq	%r10, 3176(%rsp)        # 8-byte Spill
	movq	%r11, 3168(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	3280(%rsp), %rdi        # 8-byte Reload
	movq	3304(%rsp), %rsi        # 8-byte Reload
	movq	3312(%rsp), %rdx        # 8-byte Reload
	movq	3312(%rsp), %rcx        # 8-byte Reload
	movq	3288(%rsp), %r8         # 8-byte Reload
	movq	3312(%rsp), %r9         # 8-byte Reload
	movq	3272(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	8880(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	3248(%rsp), %rdi        # 8-byte Reload
	movq	3304(%rsp), %rsi        # 8-byte Reload
	movq	3248(%rsp), %rcx        # 8-byte Reload
	movq	3296(%rsp), %r8         # 8-byte Reload
	movq	3312(%rsp), %r9         # 8-byte Reload
	movq	3272(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	8880(%rsp), %ebp        # 4-byte Reload
	cmpl	$0, %ebp
	setl	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %r12d
	movl	%r12d, %edx
	movq	3200(%rsp), %rdi        # 8-byte Reload
	movq	3248(%rsp), %rsi        # 8-byte Reload
	movq	3248(%rsp), %rcx        # 8-byte Reload
	movq	3264(%rsp), %r8         # 8-byte Reload
	movq	3312(%rsp), %r9         # 8-byte Reload
	movq	3272(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 3167(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	3168(%rsp), %rdi        # 8-byte Reload
	movq	3184(%rsp), %rsi        # 8-byte Reload
	movq	3192(%rsp), %rdx        # 8-byte Reload
	movq	3216(%rsp), %rcx        # 8-byte Reload
	movq	3280(%rsp), %r8         # 8-byte Reload
	movl	3212(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3232(%rsp), %rdi        # 8-byte Reload
	movq	3312(%rsp), %rsi        # 8-byte Reload
	movq	3312(%rsp), %rdx        # 8-byte Reload
	movq	3248(%rsp), %rcx        # 8-byte Reload
	movq	3176(%rsp), %r8         # 8-byte Reload
	movq	3312(%rsp), %r9         # 8-byte Reload
	movq	3272(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	3280(%rsp), %rdi        # 8-byte Reload
	movq	3312(%rsp), %rsi        # 8-byte Reload
	movq	3312(%rsp), %rdx        # 8-byte Reload
	movq	3248(%rsp), %rcx        # 8-byte Reload
	movq	3240(%rsp), %r8         # 8-byte Reload
	movq	3312(%rsp), %r9         # 8-byte Reload
	movq	3272(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	3167(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	3248(%rsp), %rdi        # 8-byte Reload
	movq	3248(%rsp), %rsi        # 8-byte Reload
	movq	3248(%rsp), %rcx        # 8-byte Reload
	movq	3264(%rsp), %r8         # 8-byte Reload
	movq	3312(%rsp), %r9         # 8-byte Reload
	movq	3272(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	3167(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	movq	3312(%rsp), %rcx        # 8-byte Reload
	vmovsd	3224(%rsp), %xmm0       # 8-byte Reload
	movq	%rcx, 3152(%rsp)        # 8-byte Spill
	vmovsd	%xmm0, 3144(%rsp)       # 8-byte Spill
	jne	.LBB9_15
.LBB9_27:                               # %.lr.ph25
                                        #   Parent Loop BB9_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vmovsd	3144(%rsp), %xmm0       # 8-byte Reload
	movq	3152(%rsp), %rax        # 8-byte Reload
	movabsq	$1, %rcx
	leaq	.L.str287, %rdx
	movabsq	$0, %rsi
	leaq	.L.str781, %rdi
	movabsq	$2, %r8
	leaq	.L.str274, %r9
	movabsq	$3, %r10
	leaq	.L.str289, %r11
	movabsq	$858, %rbx              # imm = 0x35A
	leaq	.L.str57131, %r14
	leaq	.L.str288, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 3136(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 3128(%rsp)        # 8-byte Spill
	leaq	.L.str286, %rax
	movq	%rax, 3120(%rsp)        # 8-byte Spill
	leaq	.L.str107, %rax
	movq	%rax, 3112(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 3104(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 3096(%rsp)        # 8-byte Spill
	leaq	.L.str276150, %rax
	movq	%rax, 3088(%rsp)        # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, 3080(%rsp)        # 8-byte Spill
	leaq	.L.str275, %rax
	movq	%rax, 3072(%rsp)        # 8-byte Spill
	leaq	.L.str1488, %rax
	movq	%rax, 3064(%rsp)        # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, 3056(%rsp)        # 8-byte Spill
	leaq	.L.str278, %rax
	movq	%rax, 3048(%rsp)        # 8-byte Spill
	leaq	.L.str277, %rax
	movq	%rax, 3040(%rsp)        # 8-byte Spill
	leaq	.L.str285, %rax
	movq	%rax, 3032(%rsp)        # 8-byte Spill
	movabsq	$861, %rax              # imm = 0x35D
	movq	%rax, 3024(%rsp)        # 8-byte Spill
	movabsq	$9, %rax
	movq	%rax, 3016(%rsp)        # 8-byte Spill
	leaq	.L.str281, %rax
	movq	%rax, 3008(%rsp)        # 8-byte Spill
	leaq	.L.str284, %rax
	movq	%rax, 3000(%rsp)        # 8-byte Spill
	movabsq	$13, %rax
	movq	%rax, 2992(%rsp)        # 8-byte Spill
	leaq	.L.str283, %rax
	movq	%rax, 2984(%rsp)        # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, 2976(%rsp)        # 8-byte Spill
	leaq	.L.str82, %rax
	movq	%rax, 2968(%rsp)        # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 2960(%rsp)        # 8-byte Spill
	leaq	.L.str279, %rax
	movq	%rax, 2952(%rsp)        # 8-byte Spill
	movabsq	$860, %rax              # imm = 0x35C
	movq	%rax, 2944(%rsp)        # 8-byte Spill
	leaq	.L.str282, %rax
	movq	%rax, 2936(%rsp)        # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, 2928(%rsp)        # 8-byte Spill
	leaq	.L.str280, %rax
	movq	%rax, 2920(%rsp)        # 8-byte Spill
	leaq	.L.str206, %rax
	movq	%rax, 2912(%rsp)        # 8-byte Spill
	movabsq	$16, %rax
	movq	%rax, 2904(%rsp)        # 8-byte Spill
	leaq	.L.str157, %rax
	vxorps	%xmm1, %xmm1, %xmm1
	movq	%rax, 2896(%rsp)        # 8-byte Spill
	leaq	.L.str271, %rax
	movq	%rax, 2888(%rsp)        # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 2880(%rsp)        # 8-byte Spill
	movabsq	$48, %rax
	.loc	2 860 0                 # eispack.c:860:0
.Ltmp335:
	movq	%rax, 2872(%rsp)        # 8-byte Spill
	movq	2880(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 2864(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 2856(%rsp)        # 8-byte Spill
	movq	%r14, %rsi
	movq	%rdx, 2848(%rsp)        # 8-byte Spill
	movq	%r9, %rdx
	movq	3072(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 2840(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	2872(%rsp), %rax        # 8-byte Reload
	movq	%r8, 2832(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 2824(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	vmovsd	%xmm0, 2816(%rsp)       # 8-byte Spill
	movl	%ebp, 2812(%rsp)        # 4-byte Spill
	movl	%r12d, 2808(%rsp)       # 4-byte Spill
	movq	%r13, 2800(%rsp)        # 8-byte Spill
	vmovsd	%xmm1, 2792(%rsp)       # 8-byte Spill
	movq	%r15, 2784(%rsp)        # 8-byte Spill
	movq	%r14, 2776(%rsp)        # 8-byte Spill
	movq	%r10, 2768(%rsp)        # 8-byte Spill
	movq	%r11, 2760(%rsp)        # 8-byte Spill
	movq	%rbx, 2752(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	2832(%rsp), %rdi        # 8-byte Reload
	movq	3096(%rsp), %rsi        # 8-byte Reload
	movq	2856(%rsp), %rdx        # 8-byte Reload
	movq	2856(%rsp), %rcx        # 8-byte Reload
	movq	3064(%rsp), %r8         # 8-byte Reload
	movq	2840(%rsp), %r9         # 8-byte Reload
	movq	2888(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2840(%rsp), %rdi        # 8-byte Reload
	movq	3096(%rsp), %rsi        # 8-byte Reload
	movq	2856(%rsp), %rdx        # 8-byte Reload
	movq	2840(%rsp), %rcx        # 8-byte Reload
	movq	3088(%rsp), %r8         # 8-byte Reload
	movq	2840(%rsp), %r9         # 8-byte Reload
	movq	2824(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2800(%rsp), %rdi        # 8-byte Reload
	movq	3096(%rsp), %rsi        # 8-byte Reload
	movq	3136(%rsp), %rdx        # 8-byte Reload
	movq	2840(%rsp), %rcx        # 8-byte Reload
	movq	3072(%rsp), %r8         # 8-byte Reload
	movq	2856(%rsp), %r9         # 8-byte Reload
	movq	2824(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2880(%rsp), %rdi        # 8-byte Reload
	movq	2776(%rsp), %rsi        # 8-byte Reload
	movq	2824(%rsp), %rdx        # 8-byte Reload
	movq	3040(%rsp), %rcx        # 8-byte Reload
	movq	2872(%rsp), %r8         # 8-byte Reload
	movl	2812(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2832(%rsp), %rdi        # 8-byte Reload
	movq	3096(%rsp), %rsi        # 8-byte Reload
	vmovsd	2792(%rsp), %xmm0       # 8-byte Reload
	movq	2856(%rsp), %rdx        # 8-byte Reload
	movq	3064(%rsp), %rcx        # 8-byte Reload
	movq	2840(%rsp), %r8         # 8-byte Reload
	movq	2888(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	2840(%rsp), %rdi        # 8-byte Reload
	movq	3096(%rsp), %rsi        # 8-byte Reload
	movq	2856(%rsp), %rdx        # 8-byte Reload
	movq	2840(%rsp), %rcx        # 8-byte Reload
	movq	3048(%rsp), %r8         # 8-byte Reload
	movq	2840(%rsp), %r9         # 8-byte Reload
	movq	2824(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2800(%rsp), %rdi        # 8-byte Reload
	movq	3096(%rsp), %rsi        # 8-byte Reload
	vmovsd	2816(%rsp), %xmm0       # 8-byte Reload
	movq	2840(%rsp), %rdx        # 8-byte Reload
	movq	3040(%rsp), %rcx        # 8-byte Reload
	movq	2856(%rsp), %r8         # 8-byte Reload
	movq	2824(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	2944(%rsp), %rdi        # 8-byte Reload
	movq	2776(%rsp), %rsi        # 8-byte Reload
	movq	2824(%rsp), %rdx        # 8-byte Reload
	movq	2952(%rsp), %rcx        # 8-byte Reload
	movq	2960(%rsp), %r8         # 8-byte Reload
	movl	2812(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2832(%rsp), %rdi        # 8-byte Reload
	movq	3096(%rsp), %rsi        # 8-byte Reload
	movq	3136(%rsp), %rdx        # 8-byte Reload
	movq	2840(%rsp), %rcx        # 8-byte Reload
	movq	3072(%rsp), %r8         # 8-byte Reload
	movq	2856(%rsp), %r9         # 8-byte Reload
	movq	2864(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2840(%rsp), %rdi        # 8-byte Reload
	movq	3096(%rsp), %rsi        # 8-byte Reload
	movq	10960(%rsp), %rdx       # 8-byte Reload
	movq	2840(%rsp), %rcx        # 8-byte Reload
	movq	2896(%rsp), %r8         # 8-byte Reload
	movq	2856(%rsp), %r9         # 8-byte Reload
	movq	2864(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	3136(%rsp), %rax        # 8-byte Reload
	shlq	$3, %rax
	movq	10960(%rsp), %rcx       # 8-byte Reload
	addq	%rax, %rcx
	movq	2800(%rsp), %rdi        # 8-byte Reload
	movq	3096(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	2840(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 2744(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	2952(%rsp), %r8         # 8-byte Reload
	movq	2856(%rsp), %r9         # 8-byte Reload
	movq	2864(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2944(%rsp), %rdi        # 8-byte Reload
	movq	2776(%rsp), %rsi        # 8-byte Reload
	movq	2824(%rsp), %rdx        # 8-byte Reload
	movq	2920(%rsp), %rcx        # 8-byte Reload
	movq	2976(%rsp), %r8         # 8-byte Reload
	movl	2812(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2840(%rsp), %rdi        # 8-byte Reload
	movq	3096(%rsp), %rsi        # 8-byte Reload
	movq	2744(%rsp), %rdx        # 8-byte Reload
	movq	2840(%rsp), %rcx        # 8-byte Reload
	movq	2952(%rsp), %r8         # 8-byte Reload
	movq	2856(%rsp), %r9         # 8-byte Reload
	movq	2864(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	10960(%rsp), %rax       # 8-byte Reload
	movq	3136(%rsp), %rcx        # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
	movq	2800(%rsp), %rdi        # 8-byte Reload
	movq	3096(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 2736(%rsp)       # 8-byte Spill
	movq	2840(%rsp), %rdx        # 8-byte Reload
	movq	2920(%rsp), %rcx        # 8-byte Reload
	movq	2856(%rsp), %r8         # 8-byte Reload
	movq	2864(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	2944(%rsp), %rdi        # 8-byte Reload
	movq	2776(%rsp), %rsi        # 8-byte Reload
	movq	2824(%rsp), %rdx        # 8-byte Reload
	movq	3008(%rsp), %rcx        # 8-byte Reload
	movq	2904(%rsp), %r8         # 8-byte Reload
	movl	2812(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2832(%rsp), %rdi        # 8-byte Reload
	movq	3096(%rsp), %rsi        # 8-byte Reload
	vmovsd	5392(%rsp), %xmm0       # 8-byte Reload
	movq	2840(%rsp), %rdx        # 8-byte Reload
	movq	2912(%rsp), %rcx        # 8-byte Reload
	movq	2856(%rsp), %r8         # 8-byte Reload
	movq	2864(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	2840(%rsp), %rdi        # 8-byte Reload
	movq	3096(%rsp), %rsi        # 8-byte Reload
	vmovsd	2736(%rsp), %xmm0       # 8-byte Reload
	movq	2840(%rsp), %rdx        # 8-byte Reload
	movq	2920(%rsp), %rcx        # 8-byte Reload
	movq	2856(%rsp), %r8         # 8-byte Reload
	movq	2864(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	2736(%rsp), %xmm0       # 8-byte Reload
	vmovsd	5392(%rsp), %xmm1       # 8-byte Reload
	vdivsd	%xmm1, %xmm0, %xmm2
	movq	2800(%rsp), %rdi        # 8-byte Reload
	movq	3096(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	2840(%rsp), %rdx        # 8-byte Reload
	movq	3008(%rsp), %rcx        # 8-byte Reload
	movq	2856(%rsp), %r8         # 8-byte Reload
	movq	2864(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 2728(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	2944(%rsp), %rdi        # 8-byte Reload
	movq	2776(%rsp), %rsi        # 8-byte Reload
	movq	2824(%rsp), %rdx        # 8-byte Reload
	movq	2936(%rsp), %rcx        # 8-byte Reload
	movq	2928(%rsp), %r8         # 8-byte Reload
	movl	2812(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2832(%rsp), %rdi        # 8-byte Reload
	movq	3096(%rsp), %rsi        # 8-byte Reload
	movq	2744(%rsp), %rdx        # 8-byte Reload
	movq	2840(%rsp), %rcx        # 8-byte Reload
	movq	2952(%rsp), %r8         # 8-byte Reload
	movq	2856(%rsp), %r9         # 8-byte Reload
	movq	2864(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2840(%rsp), %rdi        # 8-byte Reload
	movq	3096(%rsp), %rsi        # 8-byte Reload
	vmovsd	2728(%rsp), %xmm0       # 8-byte Reload
	movq	2840(%rsp), %rdx        # 8-byte Reload
	movq	3008(%rsp), %rcx        # 8-byte Reload
	movq	2856(%rsp), %r8         # 8-byte Reload
	movq	2864(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	10960(%rsp), %rax       # 8-byte Reload
	movq	3136(%rsp), %rcx        # 8-byte Reload
	vmovsd	2728(%rsp), %xmm0       # 8-byte Reload
	vmovsd	%xmm0, (%rax,%rcx,8)
	.loc	2 861 0                 # eispack.c:861:0
	movq	3024(%rsp), %rdi        # 8-byte Reload
	movq	2776(%rsp), %rsi        # 8-byte Reload
	movq	2824(%rsp), %rdx        # 8-byte Reload
	movq	2984(%rsp), %rcx        # 8-byte Reload
	movq	2960(%rsp), %r8         # 8-byte Reload
	movl	2812(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2832(%rsp), %rdi        # 8-byte Reload
	movq	3096(%rsp), %rsi        # 8-byte Reload
	movq	3136(%rsp), %rdx        # 8-byte Reload
	movq	2840(%rsp), %rcx        # 8-byte Reload
	movq	3072(%rsp), %r8         # 8-byte Reload
	movq	2856(%rsp), %r9         # 8-byte Reload
	movq	2864(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2840(%rsp), %rdi        # 8-byte Reload
	movq	3096(%rsp), %rsi        # 8-byte Reload
	movq	10968(%rsp), %rdx       # 8-byte Reload
	movq	2840(%rsp), %rcx        # 8-byte Reload
	movq	2968(%rsp), %r8         # 8-byte Reload
	movq	2856(%rsp), %r9         # 8-byte Reload
	movq	2864(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	3136(%rsp), %rax        # 8-byte Reload
	shlq	$3, %rax
	movq	10968(%rsp), %rcx       # 8-byte Reload
	addq	%rax, %rcx
	movq	2800(%rsp), %rdi        # 8-byte Reload
	movq	3096(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	2840(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 2720(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	2984(%rsp), %r8         # 8-byte Reload
	movq	2856(%rsp), %r9         # 8-byte Reload
	movq	2864(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	3024(%rsp), %rdi        # 8-byte Reload
	movq	2776(%rsp), %rsi        # 8-byte Reload
	movq	2824(%rsp), %rdx        # 8-byte Reload
	movq	3000(%rsp), %rcx        # 8-byte Reload
	movq	2976(%rsp), %r8         # 8-byte Reload
	movl	2812(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2840(%rsp), %rdi        # 8-byte Reload
	movq	3096(%rsp), %rsi        # 8-byte Reload
	movq	2720(%rsp), %rdx        # 8-byte Reload
	movq	2840(%rsp), %rcx        # 8-byte Reload
	movq	2984(%rsp), %r8         # 8-byte Reload
	movq	2856(%rsp), %r9         # 8-byte Reload
	movq	2864(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	10968(%rsp), %rax       # 8-byte Reload
	movq	3136(%rsp), %rcx        # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
	movq	2800(%rsp), %rdi        # 8-byte Reload
	movq	3096(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 2712(%rsp)       # 8-byte Spill
	movq	2840(%rsp), %rdx        # 8-byte Reload
	movq	3000(%rsp), %rcx        # 8-byte Reload
	movq	2856(%rsp), %r8         # 8-byte Reload
	movq	2864(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	3024(%rsp), %rdi        # 8-byte Reload
	movq	2776(%rsp), %rsi        # 8-byte Reload
	movq	2824(%rsp), %rdx        # 8-byte Reload
	movq	3032(%rsp), %rcx        # 8-byte Reload
	movq	2992(%rsp), %r8         # 8-byte Reload
	movl	2812(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2832(%rsp), %rdi        # 8-byte Reload
	movq	3096(%rsp), %rsi        # 8-byte Reload
	vmovsd	2712(%rsp), %xmm0       # 8-byte Reload
	movq	2840(%rsp), %rdx        # 8-byte Reload
	movq	3000(%rsp), %rcx        # 8-byte Reload
	movq	2856(%rsp), %r8         # 8-byte Reload
	movq	2864(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	2840(%rsp), %rdi        # 8-byte Reload
	movq	3096(%rsp), %rsi        # 8-byte Reload
	vmovsd	2728(%rsp), %xmm0       # 8-byte Reload
	movq	2840(%rsp), %rdx        # 8-byte Reload
	movq	3008(%rsp), %rcx        # 8-byte Reload
	movq	2856(%rsp), %r8         # 8-byte Reload
	movq	2864(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	2728(%rsp), %xmm0       # 8-byte Reload
	vmovsd	2712(%rsp), %xmm1       # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	2800(%rsp), %rdi        # 8-byte Reload
	movq	3096(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	2840(%rsp), %rdx        # 8-byte Reload
	movq	3032(%rsp), %rcx        # 8-byte Reload
	movq	2856(%rsp), %r8         # 8-byte Reload
	movq	2864(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 2704(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	3024(%rsp), %rdi        # 8-byte Reload
	movq	2776(%rsp), %rsi        # 8-byte Reload
	movq	2824(%rsp), %rdx        # 8-byte Reload
	movq	3048(%rsp), %rcx        # 8-byte Reload
	movq	3016(%rsp), %r8         # 8-byte Reload
	movl	2812(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2832(%rsp), %rdi        # 8-byte Reload
	movq	3096(%rsp), %rsi        # 8-byte Reload
	vmovsd	2704(%rsp), %xmm0       # 8-byte Reload
	movq	2840(%rsp), %rdx        # 8-byte Reload
	movq	3032(%rsp), %rcx        # 8-byte Reload
	movq	2856(%rsp), %r8         # 8-byte Reload
	movq	2864(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	2840(%rsp), %rdi        # 8-byte Reload
	movq	3096(%rsp), %rsi        # 8-byte Reload
	vmovsd	2816(%rsp), %xmm0       # 8-byte Reload
	movq	2840(%rsp), %rdx        # 8-byte Reload
	movq	3040(%rsp), %rcx        # 8-byte Reload
	movq	2856(%rsp), %r8         # 8-byte Reload
	movq	2864(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	2816(%rsp), %xmm0       # 8-byte Reload
	vmovsd	2704(%rsp), %xmm1       # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
	movq	2800(%rsp), %rdi        # 8-byte Reload
	movq	3096(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	2840(%rsp), %rdx        # 8-byte Reload
	movq	3048(%rsp), %rcx        # 8-byte Reload
	movq	2856(%rsp), %r8         # 8-byte Reload
	movq	2864(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 2696(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
.Ltmp336:
	#DEBUG_VALUE: tred1:f <- [RSP+2696]
	.loc	2 858 0                 # eispack.c:858:0
	movq	2752(%rsp), %rdi        # 8-byte Reload
	movq	2776(%rsp), %rsi        # 8-byte Reload
	movq	2824(%rsp), %rdx        # 8-byte Reload
	movq	3088(%rsp), %rcx        # 8-byte Reload
	movq	3056(%rsp), %r8         # 8-byte Reload
	movl	2812(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2832(%rsp), %rdi        # 8-byte Reload
	movq	3096(%rsp), %rsi        # 8-byte Reload
	movq	2840(%rsp), %rdx        # 8-byte Reload
	movq	2856(%rsp), %rcx        # 8-byte Reload
	movq	3064(%rsp), %r8         # 8-byte Reload
	movq	2856(%rsp), %r9         # 8-byte Reload
	movq	2864(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2840(%rsp), %rdi        # 8-byte Reload
	movq	3096(%rsp), %rsi        # 8-byte Reload
	movq	3136(%rsp), %rdx        # 8-byte Reload
	movq	2840(%rsp), %rcx        # 8-byte Reload
	movq	3072(%rsp), %r8         # 8-byte Reload
	movq	2856(%rsp), %r9         # 8-byte Reload
	movq	2864(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3136(%rsp), %rax        # 8-byte Reload
	addq	$1, %rax
	movq	2800(%rsp), %rdi        # 8-byte Reload
	movq	3096(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	2840(%rsp), %rcx        # 8-byte Reload
	movq	3088(%rsp), %r8         # 8-byte Reload
	movq	2856(%rsp), %r9         # 8-byte Reload
	movq	2864(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 2688(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	2752(%rsp), %rdi        # 8-byte Reload
	movq	2776(%rsp), %rsi        # 8-byte Reload
	movq	2824(%rsp), %rdx        # 8-byte Reload
	movq	3120(%rsp), %rcx        # 8-byte Reload
	movq	3080(%rsp), %r8         # 8-byte Reload
	movl	2812(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2840(%rsp), %rdi        # 8-byte Reload
	movq	3096(%rsp), %rsi        # 8-byte Reload
	movq	2688(%rsp), %rdx        # 8-byte Reload
	movq	2840(%rsp), %rcx        # 8-byte Reload
	movq	3088(%rsp), %r8         # 8-byte Reload
	movq	2856(%rsp), %r9         # 8-byte Reload
	movq	2864(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2688(%rsp), %rax        # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	2800(%rsp), %rdi        # 8-byte Reload
	movq	3128(%rsp), %rsi        # 8-byte Reload
	movq	2840(%rsp), %rcx        # 8-byte Reload
	movq	3120(%rsp), %r8         # 8-byte Reload
	movq	2856(%rsp), %r9         # 8-byte Reload
	movq	2864(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 2684(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	2752(%rsp), %rdi        # 8-byte Reload
	movq	2776(%rsp), %rsi        # 8-byte Reload
	movq	2824(%rsp), %rdx        # 8-byte Reload
	movq	2848(%rsp), %rcx        # 8-byte Reload
	movq	3104(%rsp), %r8         # 8-byte Reload
	movl	2812(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	8900(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	2832(%rsp), %rdi        # 8-byte Reload
	movq	3128(%rsp), %rsi        # 8-byte Reload
	movq	2840(%rsp), %rcx        # 8-byte Reload
	movq	3112(%rsp), %r8         # 8-byte Reload
	movq	2856(%rsp), %r9         # 8-byte Reload
	movq	2864(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	2684(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	2840(%rsp), %rdi        # 8-byte Reload
	movq	3128(%rsp), %rsi        # 8-byte Reload
	movq	2840(%rsp), %rcx        # 8-byte Reload
	movq	3120(%rsp), %r8         # 8-byte Reload
	movq	2856(%rsp), %r9         # 8-byte Reload
	movq	2864(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	2684(%rsp), %ebp        # 4-byte Reload
	movl	8900(%rsp), %r12d       # 4-byte Reload
	cmpl	%r12d, %ebp
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	2800(%rsp), %rdi        # 8-byte Reload
	movq	2840(%rsp), %rsi        # 8-byte Reload
	movq	2840(%rsp), %rcx        # 8-byte Reload
	movq	2848(%rsp), %r8         # 8-byte Reload
	movq	2856(%rsp), %r9         # 8-byte Reload
	movq	2864(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 2683(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	2752(%rsp), %rdi        # 8-byte Reload
	movq	2776(%rsp), %rsi        # 8-byte Reload
	movq	2824(%rsp), %rdx        # 8-byte Reload
	movq	2784(%rsp), %rcx        # 8-byte Reload
	movq	2832(%rsp), %r8         # 8-byte Reload
	movl	2812(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2768(%rsp), %rdi        # 8-byte Reload
	movq	2856(%rsp), %rsi        # 8-byte Reload
	movq	2856(%rsp), %rdx        # 8-byte Reload
	movq	2840(%rsp), %rcx        # 8-byte Reload
	movq	2760(%rsp), %r8         # 8-byte Reload
	movq	2856(%rsp), %r9         # 8-byte Reload
	movq	2864(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	2832(%rsp), %rdi        # 8-byte Reload
	movq	2856(%rsp), %rsi        # 8-byte Reload
	movq	2856(%rsp), %rdx        # 8-byte Reload
	movq	2840(%rsp), %rcx        # 8-byte Reload
	movq	2824(%rsp), %r8         # 8-byte Reload
	movq	2856(%rsp), %r9         # 8-byte Reload
	movq	2864(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	2683(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	2840(%rsp), %rdi        # 8-byte Reload
	movq	2840(%rsp), %rsi        # 8-byte Reload
	movq	2840(%rsp), %rcx        # 8-byte Reload
	movq	2848(%rsp), %r8         # 8-byte Reload
	movq	2856(%rsp), %r9         # 8-byte Reload
	movq	2864(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	2683(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	movq	2688(%rsp), %rcx        # 8-byte Reload
	vmovsd	2696(%rsp), %xmm0       # 8-byte Reload
	movq	%rcx, 3152(%rsp)        # 8-byte Spill
	vmovsd	%xmm0, 3144(%rsp)       # 8-byte Spill
	jne	.LBB9_28
	jmp	.LBB9_27
.Ltmp337:
.LBB9_28:                               # %._crit_edge26
                                        #   in Loop: Header=BB9_8 Depth=1
	movabsq	$0, %rax
	movabsq	$1, %rcx
	leaq	.L.str292, %rdx
	leaq	.L.str781, %rsi
	movabsq	$2, %rdi
	leaq	.L.str294, %r8
	movabsq	$3, %r9
	leaq	.L.str105, %r10
	movabsq	$868, %r11              # imm = 0x364
	leaq	.L.str57131, %rbx
	leaq	.L.str289, %r14
	leaq	.L.str293, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 2672(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 2664(%rsp)        # 8-byte Spill
	leaq	.L.str110, %rax
	movq	%rax, 2656(%rsp)        # 8-byte Spill
	leaq	.L.str1488, %rax
	movq	%rax, 2648(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 2640(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 2632(%rsp)        # 8-byte Spill
	leaq	.L.str291, %rax
	movq	%rax, 2624(%rsp)        # 8-byte Spill
	leaq	.L.str278, %rax
	movq	%rax, 2616(%rsp)        # 8-byte Spill
	leaq	.L.str290, %rax
	movq	%rax, 2608(%rsp)        # 8-byte Spill
	movabsq	$864, %rax              # imm = 0x360
	movq	%rax, 2600(%rsp)        # 8-byte Spill
	movabsq	$16, %rax
	movq	%rax, 2592(%rsp)        # 8-byte Spill
	leaq	.L.str206, %rax
	movq	%rax, 2584(%rsp)        # 8-byte Spill
	movabsq	$9, %rax
	.loc	2 864 0                 # eispack.c:864:0
	movq	%rax, 2576(%rsp)        # 8-byte Spill
	movq	2600(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 2568(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 2560(%rsp)        # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, 2552(%rsp)        # 8-byte Spill
	movq	%r14, %rdx
	movq	2608(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 2544(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	2576(%rsp), %rax        # 8-byte Reload
	movq	%r8, 2536(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 2528(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r15, 2520(%rsp)        # 8-byte Spill
	movl	%ebp, 2516(%rsp)        # 4-byte Spill
	movl	%r12d, 2512(%rsp)       # 4-byte Spill
	movq	%r13, 2504(%rsp)        # 8-byte Spill
	movq	%r14, 2496(%rsp)        # 8-byte Spill
	movq	%rbx, 2488(%rsp)        # 8-byte Spill
	movq	%r10, 2480(%rsp)        # 8-byte Spill
	movq	%r11, 2472(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	2568(%rsp), %rdi        # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	vmovsd	5392(%rsp), %xmm0       # 8-byte Reload
	movq	2544(%rsp), %rdx        # 8-byte Reload
	movq	2584(%rsp), %rcx        # 8-byte Reload
	movq	2672(%rsp), %r8         # 8-byte Reload
	movq	2560(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	2544(%rsp), %rdi        # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	vmovsd	5392(%rsp), %xmm0       # 8-byte Reload
	movq	2544(%rsp), %rdx        # 8-byte Reload
	movq	2584(%rsp), %rcx        # 8-byte Reload
	movq	2672(%rsp), %r8         # 8-byte Reload
	movq	2560(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	5392(%rsp), %xmm0       # 8-byte Reload
	vaddsd	%xmm0, %xmm0, %xmm1
	movq	2504(%rsp), %rdi        # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm1, %xmm0
	movq	2544(%rsp), %rdx        # 8-byte Reload
	movq	2608(%rsp), %rcx        # 8-byte Reload
	movq	2672(%rsp), %r8         # 8-byte Reload
	movq	2560(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm1, 2464(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	2600(%rsp), %rdi        # 8-byte Reload
	movq	2488(%rsp), %rsi        # 8-byte Reload
	movq	2496(%rsp), %rdx        # 8-byte Reload
	movq	2624(%rsp), %rcx        # 8-byte Reload
	movq	2592(%rsp), %r8         # 8-byte Reload
	movl	2516(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2568(%rsp), %rdi        # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	vmovsd	2464(%rsp), %xmm0       # 8-byte Reload
	movq	2544(%rsp), %rdx        # 8-byte Reload
	movq	2608(%rsp), %rcx        # 8-byte Reload
	movq	2672(%rsp), %r8         # 8-byte Reload
	movq	2560(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	2544(%rsp), %rdi        # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	vmovsd	2696(%rsp), %xmm0       # 8-byte Reload
	movq	2544(%rsp), %rdx        # 8-byte Reload
	movq	2616(%rsp), %rcx        # 8-byte Reload
	movq	2672(%rsp), %r8         # 8-byte Reload
	movq	2560(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	2696(%rsp), %xmm0       # 8-byte Reload
	vmovsd	2464(%rsp), %xmm1       # 8-byte Reload
	vdivsd	%xmm1, %xmm0, %xmm2
	movq	2504(%rsp), %rdi        # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	2544(%rsp), %rdx        # 8-byte Reload
	movq	2624(%rsp), %rcx        # 8-byte Reload
	movq	2672(%rsp), %r8         # 8-byte Reload
	movq	2560(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 2456(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
.Ltmp338:
	#DEBUG_VALUE: tred1:h <- [RSP+2456]
	#DEBUG_VALUE: tred1:j <- 0
	.loc	2 868 0                 # eispack.c:868:0
	movq	2472(%rsp), %rdi        # 8-byte Reload
	movq	2488(%rsp), %rsi        # 8-byte Reload
	movq	2496(%rsp), %rdx        # 8-byte Reload
	movq	2552(%rsp), %rcx        # 8-byte Reload
	movq	2640(%rsp), %r8         # 8-byte Reload
	movl	2516(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2568(%rsp), %rdi        # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	2672(%rsp), %rdx        # 8-byte Reload
	movq	2672(%rsp), %rcx        # 8-byte Reload
	movq	2648(%rsp), %r8         # 8-byte Reload
	movq	2672(%rsp), %r9         # 8-byte Reload
	movq	2560(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	8880(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	2544(%rsp), %rdi        # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	2544(%rsp), %rcx        # 8-byte Reload
	movq	2656(%rsp), %r8         # 8-byte Reload
	movq	2672(%rsp), %r9         # 8-byte Reload
	movq	2560(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	8880(%rsp), %ebp        # 4-byte Reload
	cmpl	$0, %ebp
	setl	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %r12d
	movl	%r12d, %edx
	movq	2504(%rsp), %rdi        # 8-byte Reload
	movq	2544(%rsp), %rsi        # 8-byte Reload
	movq	2544(%rsp), %rcx        # 8-byte Reload
	movq	2552(%rsp), %r8         # 8-byte Reload
	movq	2672(%rsp), %r9         # 8-byte Reload
	movq	2560(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 2455(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	2472(%rsp), %rdi        # 8-byte Reload
	movq	2488(%rsp), %rsi        # 8-byte Reload
	movq	2496(%rsp), %rdx        # 8-byte Reload
	movq	2520(%rsp), %rcx        # 8-byte Reload
	movq	2568(%rsp), %r8         # 8-byte Reload
	movl	2516(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2528(%rsp), %rdi        # 8-byte Reload
	movq	2672(%rsp), %rsi        # 8-byte Reload
	movq	2672(%rsp), %rdx        # 8-byte Reload
	movq	2544(%rsp), %rcx        # 8-byte Reload
	movq	2480(%rsp), %r8         # 8-byte Reload
	movq	2672(%rsp), %r9         # 8-byte Reload
	movq	2560(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	2568(%rsp), %rdi        # 8-byte Reload
	movq	2672(%rsp), %rsi        # 8-byte Reload
	movq	2672(%rsp), %rdx        # 8-byte Reload
	movq	2544(%rsp), %rcx        # 8-byte Reload
	movq	2536(%rsp), %r8         # 8-byte Reload
	movq	2672(%rsp), %r9         # 8-byte Reload
	movq	2560(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	2455(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	2544(%rsp), %rdi        # 8-byte Reload
	movq	2544(%rsp), %rsi        # 8-byte Reload
	movq	2544(%rsp), %rcx        # 8-byte Reload
	movq	2552(%rsp), %r8         # 8-byte Reload
	movq	2672(%rsp), %r9         # 8-byte Reload
	movq	2560(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	2455(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	movq	2672(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 2440(%rsp)        # 8-byte Spill
	jne	.LBB9_15
.Ltmp339:
.LBB9_29:                               # %.lr.ph31
                                        #   Parent Loop BB9_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	2440(%rsp), %rax        # 8-byte Reload
	movabsq	$1, %rcx
	leaq	.L.str305, %rdx
	movabsq	$0, %rsi
	leaq	.L.str781, %rdi
	movabsq	$2, %r8
	leaq	.L.str294, %r9
	movabsq	$3, %r10
	leaq	.L.str307, %r11
	movabsq	$868, %rbx              # imm = 0x364
	leaq	.L.str57131, %r14
	leaq	.L.str306, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 2432(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 2424(%rsp)        # 8-byte Spill
	leaq	.L.str304, %rax
	movq	%rax, 2416(%rsp)        # 8-byte Spill
	leaq	.L.str107, %rax
	movq	%rax, 2408(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 2400(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 2392(%rsp)        # 8-byte Spill
	leaq	.L.str296, %rax
	movq	%rax, 2384(%rsp)        # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, 2376(%rsp)        # 8-byte Spill
	leaq	.L.str295, %rax
	movq	%rax, 2368(%rsp)        # 8-byte Spill
	leaq	.L.str1488, %rax
	movq	%rax, 2360(%rsp)        # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, 2352(%rsp)        # 8-byte Spill
	leaq	.L.str302, %rax
	movq	%rax, 2344(%rsp)        # 8-byte Spill
	leaq	.L.str297, %rax
	movq	%rax, 2336(%rsp)        # 8-byte Spill
	movabsq	$870, %rax              # imm = 0x366
	movq	%rax, 2328(%rsp)        # 8-byte Spill
	leaq	.L.str303, %rax
	movq	%rax, 2320(%rsp)        # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, 2312(%rsp)        # 8-byte Spill
	leaq	.L.str298, %rax
	movq	%rax, 2304(%rsp)        # 8-byte Spill
	leaq	.L.str301, %rax
	movq	%rax, 2296(%rsp)        # 8-byte Spill
	movabsq	$11, %rax
	movq	%rax, 2288(%rsp)        # 8-byte Spill
	leaq	.L.str291, %rax
	movq	%rax, 2280(%rsp)        # 8-byte Spill
	leaq	.L.str300, %rax
	movq	%rax, 2272(%rsp)        # 8-byte Spill
	movabsq	$13, %rax
	movq	%rax, 2264(%rsp)        # 8-byte Spill
	leaq	.L.str299, %rax
	movq	%rax, 2256(%rsp)        # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, 2248(%rsp)        # 8-byte Spill
	leaq	.L.str82, %rax
	movq	%rax, 2240(%rsp)        # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 2232(%rsp)        # 8-byte Spill
	leaq	.L.str157, %rax
	movq	%rax, 2224(%rsp)        # 8-byte Spill
	leaq	.L.str289, %rax
	movq	%rax, 2216(%rsp)        # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 2208(%rsp)        # 8-byte Spill
	movabsq	$48, %rax
	.loc	2 870 0                 # eispack.c:870:0
.Ltmp340:
	movq	%rax, 2200(%rsp)        # 8-byte Spill
	movq	2208(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 2192(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 2184(%rsp)        # 8-byte Spill
	movq	%r14, %rsi
	movq	%rdx, 2176(%rsp)        # 8-byte Spill
	movq	%r9, %rdx
	movq	2368(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 2168(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	2200(%rsp), %rax        # 8-byte Reload
	movq	%r8, 2160(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 2152(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r15, 2144(%rsp)        # 8-byte Spill
	movl	%ebp, 2140(%rsp)        # 4-byte Spill
	movl	%r12d, 2136(%rsp)       # 4-byte Spill
	movq	%r13, 2128(%rsp)        # 8-byte Spill
	movq	%r14, 2120(%rsp)        # 8-byte Spill
	movq	%rbx, 2112(%rsp)        # 8-byte Spill
	movq	%r10, 2104(%rsp)        # 8-byte Spill
	movq	%r11, 2096(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	2160(%rsp), %rdi        # 8-byte Reload
	movq	2392(%rsp), %rsi        # 8-byte Reload
	movq	2184(%rsp), %rdx        # 8-byte Reload
	movq	2184(%rsp), %rcx        # 8-byte Reload
	movq	2360(%rsp), %r8         # 8-byte Reload
	movq	2168(%rsp), %r9         # 8-byte Reload
	movq	2216(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2168(%rsp), %rdi        # 8-byte Reload
	movq	2392(%rsp), %rsi        # 8-byte Reload
	movq	2184(%rsp), %rdx        # 8-byte Reload
	movq	2168(%rsp), %rcx        # 8-byte Reload
	movq	2384(%rsp), %r8         # 8-byte Reload
	movq	2168(%rsp), %r9         # 8-byte Reload
	movq	2152(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2128(%rsp), %rdi        # 8-byte Reload
	movq	2392(%rsp), %rsi        # 8-byte Reload
	movq	2432(%rsp), %rdx        # 8-byte Reload
	movq	2168(%rsp), %rcx        # 8-byte Reload
	movq	2368(%rsp), %r8         # 8-byte Reload
	movq	2184(%rsp), %r9         # 8-byte Reload
	movq	2152(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2328(%rsp), %rdi        # 8-byte Reload
	movq	2120(%rsp), %rsi        # 8-byte Reload
	movq	2152(%rsp), %rdx        # 8-byte Reload
	movq	2336(%rsp), %rcx        # 8-byte Reload
	movq	2232(%rsp), %r8         # 8-byte Reload
	movl	2140(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2160(%rsp), %rdi        # 8-byte Reload
	movq	2392(%rsp), %rsi        # 8-byte Reload
	movq	2432(%rsp), %rdx        # 8-byte Reload
	movq	2168(%rsp), %rcx        # 8-byte Reload
	movq	2368(%rsp), %r8         # 8-byte Reload
	movq	2184(%rsp), %r9         # 8-byte Reload
	movq	2192(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2168(%rsp), %rdi        # 8-byte Reload
	movq	2392(%rsp), %rsi        # 8-byte Reload
	movq	10960(%rsp), %rdx       # 8-byte Reload
	movq	2168(%rsp), %rcx        # 8-byte Reload
	movq	2224(%rsp), %r8         # 8-byte Reload
	movq	2184(%rsp), %r9         # 8-byte Reload
	movq	2192(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2432(%rsp), %rax        # 8-byte Reload
	shlq	$3, %rax
	movq	10960(%rsp), %rcx       # 8-byte Reload
	addq	%rax, %rcx
	movq	2128(%rsp), %rdi        # 8-byte Reload
	movq	2392(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	2168(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 2088(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	2336(%rsp), %r8         # 8-byte Reload
	movq	2184(%rsp), %r9         # 8-byte Reload
	movq	2192(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2328(%rsp), %rdi        # 8-byte Reload
	movq	2120(%rsp), %rsi        # 8-byte Reload
	movq	2152(%rsp), %rdx        # 8-byte Reload
	movq	2304(%rsp), %rcx        # 8-byte Reload
	movq	2248(%rsp), %r8         # 8-byte Reload
	movl	2140(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2168(%rsp), %rdi        # 8-byte Reload
	movq	2392(%rsp), %rsi        # 8-byte Reload
	movq	2088(%rsp), %rdx        # 8-byte Reload
	movq	2168(%rsp), %rcx        # 8-byte Reload
	movq	2336(%rsp), %r8         # 8-byte Reload
	movq	2184(%rsp), %r9         # 8-byte Reload
	movq	2192(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	10960(%rsp), %rax       # 8-byte Reload
	movq	2432(%rsp), %rcx        # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
	movq	2128(%rsp), %rdi        # 8-byte Reload
	movq	2392(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 2080(%rsp)       # 8-byte Spill
	movq	2168(%rsp), %rdx        # 8-byte Reload
	movq	2304(%rsp), %rcx        # 8-byte Reload
	movq	2184(%rsp), %r8         # 8-byte Reload
	movq	2192(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	2328(%rsp), %rdi        # 8-byte Reload
	movq	2120(%rsp), %rsi        # 8-byte Reload
	movq	2152(%rsp), %rdx        # 8-byte Reload
	movq	2256(%rsp), %rcx        # 8-byte Reload
	movq	2232(%rsp), %r8         # 8-byte Reload
	movl	2140(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2160(%rsp), %rdi        # 8-byte Reload
	movq	2392(%rsp), %rsi        # 8-byte Reload
	movq	2432(%rsp), %rdx        # 8-byte Reload
	movq	2168(%rsp), %rcx        # 8-byte Reload
	movq	2368(%rsp), %r8         # 8-byte Reload
	movq	2184(%rsp), %r9         # 8-byte Reload
	movq	2192(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2168(%rsp), %rdi        # 8-byte Reload
	movq	2392(%rsp), %rsi        # 8-byte Reload
	movq	10968(%rsp), %rdx       # 8-byte Reload
	movq	2168(%rsp), %rcx        # 8-byte Reload
	movq	2240(%rsp), %r8         # 8-byte Reload
	movq	2184(%rsp), %r9         # 8-byte Reload
	movq	2192(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2432(%rsp), %rax        # 8-byte Reload
	shlq	$3, %rax
	movq	10968(%rsp), %rcx       # 8-byte Reload
	addq	%rax, %rcx
	movq	2128(%rsp), %rdi        # 8-byte Reload
	movq	2392(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	2168(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 2072(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	2256(%rsp), %r8         # 8-byte Reload
	movq	2184(%rsp), %r9         # 8-byte Reload
	movq	2192(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2328(%rsp), %rdi        # 8-byte Reload
	movq	2120(%rsp), %rsi        # 8-byte Reload
	movq	2152(%rsp), %rdx        # 8-byte Reload
	movq	2272(%rsp), %rcx        # 8-byte Reload
	movq	2248(%rsp), %r8         # 8-byte Reload
	movl	2140(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2168(%rsp), %rdi        # 8-byte Reload
	movq	2392(%rsp), %rsi        # 8-byte Reload
	movq	2072(%rsp), %rdx        # 8-byte Reload
	movq	2168(%rsp), %rcx        # 8-byte Reload
	movq	2256(%rsp), %r8         # 8-byte Reload
	movq	2184(%rsp), %r9         # 8-byte Reload
	movq	2192(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	10968(%rsp), %rax       # 8-byte Reload
	movq	2432(%rsp), %rcx        # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
	movq	2128(%rsp), %rdi        # 8-byte Reload
	movq	2392(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 2064(%rsp)       # 8-byte Spill
	movq	2168(%rsp), %rdx        # 8-byte Reload
	movq	2272(%rsp), %rcx        # 8-byte Reload
	movq	2184(%rsp), %r8         # 8-byte Reload
	movq	2192(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	2328(%rsp), %rdi        # 8-byte Reload
	movq	2120(%rsp), %rsi        # 8-byte Reload
	movq	2152(%rsp), %rdx        # 8-byte Reload
	movq	2296(%rsp), %rcx        # 8-byte Reload
	movq	2264(%rsp), %r8         # 8-byte Reload
	movl	2140(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2160(%rsp), %rdi        # 8-byte Reload
	movq	2392(%rsp), %rsi        # 8-byte Reload
	vmovsd	2064(%rsp), %xmm0       # 8-byte Reload
	movq	2168(%rsp), %rdx        # 8-byte Reload
	movq	2272(%rsp), %rcx        # 8-byte Reload
	movq	2184(%rsp), %r8         # 8-byte Reload
	movq	2192(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	2168(%rsp), %rdi        # 8-byte Reload
	movq	2392(%rsp), %rsi        # 8-byte Reload
	vmovsd	2456(%rsp), %xmm0       # 8-byte Reload
	movq	2168(%rsp), %rdx        # 8-byte Reload
	movq	2280(%rsp), %rcx        # 8-byte Reload
	movq	2184(%rsp), %r8         # 8-byte Reload
	movq	2192(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	2456(%rsp), %xmm0       # 8-byte Reload
	vmovsd	2064(%rsp), %xmm1       # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	2128(%rsp), %rdi        # 8-byte Reload
	movq	2392(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	2168(%rsp), %rdx        # 8-byte Reload
	movq	2296(%rsp), %rcx        # 8-byte Reload
	movq	2184(%rsp), %r8         # 8-byte Reload
	movq	2192(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 2056(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	2328(%rsp), %rdi        # 8-byte Reload
	movq	2120(%rsp), %rsi        # 8-byte Reload
	movq	2152(%rsp), %rdx        # 8-byte Reload
	movq	2344(%rsp), %rcx        # 8-byte Reload
	movq	2288(%rsp), %r8         # 8-byte Reload
	movl	2140(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2160(%rsp), %rdi        # 8-byte Reload
	movq	2392(%rsp), %rsi        # 8-byte Reload
	vmovsd	2056(%rsp), %xmm0       # 8-byte Reload
	movq	2168(%rsp), %rdx        # 8-byte Reload
	movq	2296(%rsp), %rcx        # 8-byte Reload
	movq	2184(%rsp), %r8         # 8-byte Reload
	movq	2192(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	2168(%rsp), %rdi        # 8-byte Reload
	movq	2392(%rsp), %rsi        # 8-byte Reload
	vmovsd	2080(%rsp), %xmm0       # 8-byte Reload
	movq	2168(%rsp), %rdx        # 8-byte Reload
	movq	2304(%rsp), %rcx        # 8-byte Reload
	movq	2184(%rsp), %r8         # 8-byte Reload
	movq	2192(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	2080(%rsp), %xmm0       # 8-byte Reload
	vmovsd	2056(%rsp), %xmm1       # 8-byte Reload
	vsubsd	%xmm1, %xmm0, %xmm2
	movq	2128(%rsp), %rdi        # 8-byte Reload
	movq	2392(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	2168(%rsp), %rdx        # 8-byte Reload
	movq	2344(%rsp), %rcx        # 8-byte Reload
	movq	2184(%rsp), %r8         # 8-byte Reload
	movq	2192(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 2048(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	2328(%rsp), %rdi        # 8-byte Reload
	movq	2120(%rsp), %rsi        # 8-byte Reload
	movq	2152(%rsp), %rdx        # 8-byte Reload
	movq	2320(%rsp), %rcx        # 8-byte Reload
	movq	2312(%rsp), %r8         # 8-byte Reload
	movl	2140(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2160(%rsp), %rdi        # 8-byte Reload
	movq	2392(%rsp), %rsi        # 8-byte Reload
	movq	2088(%rsp), %rdx        # 8-byte Reload
	movq	2168(%rsp), %rcx        # 8-byte Reload
	movq	2336(%rsp), %r8         # 8-byte Reload
	movq	2184(%rsp), %r9         # 8-byte Reload
	movq	2192(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2168(%rsp), %rdi        # 8-byte Reload
	movq	2392(%rsp), %rsi        # 8-byte Reload
	vmovsd	2048(%rsp), %xmm0       # 8-byte Reload
	movq	2168(%rsp), %rdx        # 8-byte Reload
	movq	2344(%rsp), %rcx        # 8-byte Reload
	movq	2184(%rsp), %r8         # 8-byte Reload
	movq	2192(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	10960(%rsp), %rax       # 8-byte Reload
	movq	2432(%rsp), %rcx        # 8-byte Reload
	vmovsd	2048(%rsp), %xmm0       # 8-byte Reload
	vmovsd	%xmm0, (%rax,%rcx,8)
.Ltmp341:
	.loc	2 868 0                 # eispack.c:868:0
	movq	2112(%rsp), %rdi        # 8-byte Reload
	movq	2120(%rsp), %rsi        # 8-byte Reload
	movq	2152(%rsp), %rdx        # 8-byte Reload
	movq	2384(%rsp), %rcx        # 8-byte Reload
	movq	2352(%rsp), %r8         # 8-byte Reload
	movl	2140(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2160(%rsp), %rdi        # 8-byte Reload
	movq	2392(%rsp), %rsi        # 8-byte Reload
	movq	2168(%rsp), %rdx        # 8-byte Reload
	movq	2184(%rsp), %rcx        # 8-byte Reload
	movq	2360(%rsp), %r8         # 8-byte Reload
	movq	2184(%rsp), %r9         # 8-byte Reload
	movq	2192(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2168(%rsp), %rdi        # 8-byte Reload
	movq	2392(%rsp), %rsi        # 8-byte Reload
	movq	2432(%rsp), %rdx        # 8-byte Reload
	movq	2168(%rsp), %rcx        # 8-byte Reload
	movq	2368(%rsp), %r8         # 8-byte Reload
	movq	2184(%rsp), %r9         # 8-byte Reload
	movq	2192(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2432(%rsp), %rax        # 8-byte Reload
	addq	$1, %rax
	movq	2128(%rsp), %rdi        # 8-byte Reload
	movq	2392(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	2168(%rsp), %rcx        # 8-byte Reload
	movq	2384(%rsp), %r8         # 8-byte Reload
	movq	2184(%rsp), %r9         # 8-byte Reload
	movq	2192(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 2040(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	2112(%rsp), %rdi        # 8-byte Reload
	movq	2120(%rsp), %rsi        # 8-byte Reload
	movq	2152(%rsp), %rdx        # 8-byte Reload
	movq	2416(%rsp), %rcx        # 8-byte Reload
	movq	2376(%rsp), %r8         # 8-byte Reload
	movl	2140(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2168(%rsp), %rdi        # 8-byte Reload
	movq	2392(%rsp), %rsi        # 8-byte Reload
	movq	2040(%rsp), %rdx        # 8-byte Reload
	movq	2168(%rsp), %rcx        # 8-byte Reload
	movq	2384(%rsp), %r8         # 8-byte Reload
	movq	2184(%rsp), %r9         # 8-byte Reload
	movq	2192(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2040(%rsp), %rax        # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	2128(%rsp), %rdi        # 8-byte Reload
	movq	2424(%rsp), %rsi        # 8-byte Reload
	movq	2168(%rsp), %rcx        # 8-byte Reload
	movq	2416(%rsp), %r8         # 8-byte Reload
	movq	2184(%rsp), %r9         # 8-byte Reload
	movq	2192(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 2036(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	2112(%rsp), %rdi        # 8-byte Reload
	movq	2120(%rsp), %rsi        # 8-byte Reload
	movq	2152(%rsp), %rdx        # 8-byte Reload
	movq	2176(%rsp), %rcx        # 8-byte Reload
	movq	2400(%rsp), %r8         # 8-byte Reload
	movl	2140(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	8900(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	2160(%rsp), %rdi        # 8-byte Reload
	movq	2424(%rsp), %rsi        # 8-byte Reload
	movq	2168(%rsp), %rcx        # 8-byte Reload
	movq	2408(%rsp), %r8         # 8-byte Reload
	movq	2184(%rsp), %r9         # 8-byte Reload
	movq	2192(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	2036(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	2168(%rsp), %rdi        # 8-byte Reload
	movq	2424(%rsp), %rsi        # 8-byte Reload
	movq	2168(%rsp), %rcx        # 8-byte Reload
	movq	2416(%rsp), %r8         # 8-byte Reload
	movq	2184(%rsp), %r9         # 8-byte Reload
	movq	2192(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	2036(%rsp), %ebp        # 4-byte Reload
	movl	8900(%rsp), %r12d       # 4-byte Reload
	cmpl	%r12d, %ebp
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	2128(%rsp), %rdi        # 8-byte Reload
	movq	2168(%rsp), %rsi        # 8-byte Reload
	movq	2168(%rsp), %rcx        # 8-byte Reload
	movq	2176(%rsp), %r8         # 8-byte Reload
	movq	2184(%rsp), %r9         # 8-byte Reload
	movq	2192(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 2035(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	2112(%rsp), %rdi        # 8-byte Reload
	movq	2120(%rsp), %rsi        # 8-byte Reload
	movq	2152(%rsp), %rdx        # 8-byte Reload
	movq	2144(%rsp), %rcx        # 8-byte Reload
	movq	2160(%rsp), %r8         # 8-byte Reload
	movl	2140(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2104(%rsp), %rdi        # 8-byte Reload
	movq	2184(%rsp), %rsi        # 8-byte Reload
	movq	2184(%rsp), %rdx        # 8-byte Reload
	movq	2168(%rsp), %rcx        # 8-byte Reload
	movq	2096(%rsp), %r8         # 8-byte Reload
	movq	2184(%rsp), %r9         # 8-byte Reload
	movq	2192(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	2160(%rsp), %rdi        # 8-byte Reload
	movq	2184(%rsp), %rsi        # 8-byte Reload
	movq	2184(%rsp), %rdx        # 8-byte Reload
	movq	2168(%rsp), %rcx        # 8-byte Reload
	movq	2152(%rsp), %r8         # 8-byte Reload
	movq	2184(%rsp), %r9         # 8-byte Reload
	movq	2192(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	2035(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	2168(%rsp), %rdi        # 8-byte Reload
	movq	2168(%rsp), %rsi        # 8-byte Reload
	movq	2168(%rsp), %rcx        # 8-byte Reload
	movq	2176(%rsp), %r8         # 8-byte Reload
	movq	2184(%rsp), %r9         # 8-byte Reload
	movq	2192(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	2035(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	movq	2040(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 2440(%rsp)        # 8-byte Spill
	jne	.LBB9_30
	jmp	.LBB9_29
.Ltmp342:
.LBB9_30:                               # %.loopexit28
                                        #   in Loop: Header=BB9_8 Depth=1
	movabsq	$0, %rax
	movabsq	$1, %rcx
	leaq	.L.str308, %rdx
	leaq	.L.str781, %rsi
	movabsq	$2, %rdi
	leaq	.L.str310, %r8
	movabsq	$3, %r9
	leaq	.L.str105, %r10
	movabsq	$875, %r11              # imm = 0x36B
	leaq	.L.str57131, %rbx
	leaq	.L.str307, %r14
	leaq	.L.str309, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 2024(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 2016(%rsp)        # 8-byte Spill
	leaq	.L.str110, %rax
	movq	%rax, 2008(%rsp)        # 8-byte Spill
	leaq	.L.str1488, %rax
	movq	%rax, 2000(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	.loc	2 875 0                 # eispack.c:875:0
.Ltmp343:
	movq	%rdi, 1992(%rsp)        # 8-byte Spill
	movq	%r11, %rdi
	movq	%rsi, 1984(%rsp)        # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, 1976(%rsp)        # 8-byte Spill
	movq	%r14, %rdx
	movq	%rax, 1968(%rsp)        # 8-byte Spill
	movq	1976(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 1960(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	1968(%rsp), %rax        # 8-byte Reload
	movq	%r8, 1952(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 1944(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r15, 1936(%rsp)        # 8-byte Spill
	movl	%ebp, 1932(%rsp)        # 4-byte Spill
	movl	%r12d, 1928(%rsp)       # 4-byte Spill
	movq	%r13, 1920(%rsp)        # 8-byte Spill
	movq	%r14, 1912(%rsp)        # 8-byte Spill
	movq	%rbx, 1904(%rsp)        # 8-byte Spill
	movq	%r10, 1896(%rsp)        # 8-byte Spill
	movq	%r11, 1888(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	1992(%rsp), %rdi        # 8-byte Reload
	movq	2016(%rsp), %rsi        # 8-byte Reload
	movq	2024(%rsp), %rdx        # 8-byte Reload
	movq	2024(%rsp), %rcx        # 8-byte Reload
	movq	2000(%rsp), %r8         # 8-byte Reload
	movq	2024(%rsp), %r9         # 8-byte Reload
	movq	1984(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	8880(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	1960(%rsp), %rdi        # 8-byte Reload
	movq	2016(%rsp), %rsi        # 8-byte Reload
	movq	1960(%rsp), %rcx        # 8-byte Reload
	movq	2008(%rsp), %r8         # 8-byte Reload
	movq	2024(%rsp), %r9         # 8-byte Reload
	movq	1984(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	8880(%rsp), %ebp        # 4-byte Reload
	cmpl	$0, %ebp
	setl	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %r12d
	movl	%r12d, %edx
	movq	1920(%rsp), %rdi        # 8-byte Reload
	movq	1960(%rsp), %rsi        # 8-byte Reload
	movq	1960(%rsp), %rcx        # 8-byte Reload
	movq	1976(%rsp), %r8         # 8-byte Reload
	movq	2024(%rsp), %r9         # 8-byte Reload
	movq	1984(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 1887(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	1888(%rsp), %rdi        # 8-byte Reload
	movq	1904(%rsp), %rsi        # 8-byte Reload
	movq	1912(%rsp), %rdx        # 8-byte Reload
	movq	1936(%rsp), %rcx        # 8-byte Reload
	movq	1992(%rsp), %r8         # 8-byte Reload
	movl	1932(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1944(%rsp), %rdi        # 8-byte Reload
	movq	2024(%rsp), %rsi        # 8-byte Reload
	movq	2024(%rsp), %rdx        # 8-byte Reload
	movq	1960(%rsp), %rcx        # 8-byte Reload
	movq	1896(%rsp), %r8         # 8-byte Reload
	movq	2024(%rsp), %r9         # 8-byte Reload
	movq	1984(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1992(%rsp), %rdi        # 8-byte Reload
	movq	2024(%rsp), %rsi        # 8-byte Reload
	movq	2024(%rsp), %rdx        # 8-byte Reload
	movq	1960(%rsp), %rcx        # 8-byte Reload
	movq	1952(%rsp), %r8         # 8-byte Reload
	movq	2024(%rsp), %r9         # 8-byte Reload
	movq	1984(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	1887(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	1960(%rsp), %rdi        # 8-byte Reload
	movq	1960(%rsp), %rsi        # 8-byte Reload
	movq	1960(%rsp), %rcx        # 8-byte Reload
	movq	1976(%rsp), %r8         # 8-byte Reload
	movq	2024(%rsp), %r9         # 8-byte Reload
	movq	1984(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	1887(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	movq	2024(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 1872(%rsp)        # 8-byte Spill
	jne	.LBB9_15
.LBB9_31:                               # %.lr.ph34
                                        #   Parent Loop BB9_8 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB9_32 Depth 3
	movq	1872(%rsp), %rax        # 8-byte Reload
	movabsq	$1, %rcx
	movabsq	$0, %rdx
	leaq	.L.str322, %r8
	leaq	.L.str781, %rsi
	movabsq	$879, %rdi              # imm = 0x36F
	leaq	.L.str57131, %r9
	leaq	.L.str310, %r10
	leaq	.L.str321, %r11
	movabsq	$2, %rbx
	movl	$0, %ebp
	movl	$1, %r14d
	movabsq	$19134, %r15            # imm = 0x4ABE
	movabsq	$64, %r12
	leaq	.L.str320, %r13
	movq	%rax, 1864(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 1856(%rsp)        # 8-byte Spill
	leaq	.L.str319, %rax
	movq	%rax, 1848(%rsp)        # 8-byte Spill
	movabsq	$35, %rax
	movq	%rax, 1840(%rsp)        # 8-byte Spill
	leaq	.L.str318, %rax
	movq	%rax, 1832(%rsp)        # 8-byte Spill
	leaq	.L.str51125, %rax
	movq	%rax, 1824(%rsp)        # 8-byte Spill
	movabsq	$881, %rax              # imm = 0x371
	movq	%rax, 1816(%rsp)        # 8-byte Spill
	movabsq	$12, %rax
	movq	%rax, 1808(%rsp)        # 8-byte Spill
	leaq	.L.str311, %rax
	movq	%rax, 1800(%rsp)        # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, 1792(%rsp)        # 8-byte Spill
	leaq	.L.str317, %rax
	movq	%rax, 1784(%rsp)        # 8-byte Spill
	leaq	.L.str316, %rax
	movq	%rax, 1776(%rsp)        # 8-byte Spill
	movabsq	$878, %rax              # imm = 0x36E
	movq	%rax, 1768(%rsp)        # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, 1760(%rsp)        # 8-byte Spill
	leaq	.L.str157, %rax
	movq	%rax, 1752(%rsp)        # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 1744(%rsp)        # 8-byte Spill
	leaq	.L.str315, %rax
	movq	%rax, 1736(%rsp)        # 8-byte Spill
	leaq	.L.str314, %rax
	movq	%rax, 1728(%rsp)        # 8-byte Spill
	movabsq	$877, %rax              # imm = 0x36D
	movq	%rax, 1720(%rsp)        # 8-byte Spill
	leaq	.L.str82, %rax
	movq	%rax, 1712(%rsp)        # 8-byte Spill
	leaq	.L.str313, %rax
	movq	%rax, 1704(%rsp)        # 8-byte Spill
	leaq	.L.str312, %rax
	movq	%rax, 1696(%rsp)        # 8-byte Spill
	leaq	.L.str1488, %rax
	movq	%rax, 1688(%rsp)        # 8-byte Spill
	leaq	.L.str307, %rax
	movq	%rax, 1680(%rsp)        # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 1672(%rsp)        # 8-byte Spill
	movabsq	$48, %rax
	.loc	2 877 0                 # eispack.c:877:0
.Ltmp344:
	movq	%rax, 1664(%rsp)        # 8-byte Spill
	movq	1672(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 1656(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 1648(%rsp)        # 8-byte Spill
	movq	%r9, %rsi
	movq	%rdx, 1640(%rsp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	1800(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 1632(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	1664(%rsp), %rax        # 8-byte Reload
	movq	%r8, 1624(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 1616(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movl	%r14d, 1612(%rsp)       # 4-byte Spill
	movq	%r15, 1600(%rsp)        # 8-byte Spill
	movl	%ebp, 1596(%rsp)        # 4-byte Spill
	movq	%r12, 1584(%rsp)        # 8-byte Spill
	movq	%r13, 1576(%rsp)        # 8-byte Spill
	movq	%rbx, 1568(%rsp)        # 8-byte Spill
	movq	%r10, 1560(%rsp)        # 8-byte Spill
	movq	%r11, 1552(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	1568(%rsp), %rdi        # 8-byte Reload
	movq	1584(%rsp), %rsi        # 8-byte Reload
	movq	1640(%rsp), %rdx        # 8-byte Reload
	movq	1640(%rsp), %rcx        # 8-byte Reload
	movq	1688(%rsp), %r8         # 8-byte Reload
	movq	1632(%rsp), %r9         # 8-byte Reload
	movq	1680(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1632(%rsp), %rdi        # 8-byte Reload
	movq	1584(%rsp), %rsi        # 8-byte Reload
	movq	1640(%rsp), %rdx        # 8-byte Reload
	movq	1632(%rsp), %rcx        # 8-byte Reload
	movq	1696(%rsp), %r8         # 8-byte Reload
	movq	1632(%rsp), %r9         # 8-byte Reload
	movq	1704(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1600(%rsp), %rdi        # 8-byte Reload
	movq	1584(%rsp), %rsi        # 8-byte Reload
	movq	1864(%rsp), %rdx        # 8-byte Reload
	movq	1632(%rsp), %rcx        # 8-byte Reload
	movq	1800(%rsp), %r8         # 8-byte Reload
	movq	1640(%rsp), %r9         # 8-byte Reload
	movq	1704(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1720(%rsp), %rdi        # 8-byte Reload
	movq	1616(%rsp), %rsi        # 8-byte Reload
	movq	1560(%rsp), %rdx        # 8-byte Reload
	movq	1728(%rsp), %rcx        # 8-byte Reload
	movq	1744(%rsp), %r8         # 8-byte Reload
	movl	1596(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1568(%rsp), %rdi        # 8-byte Reload
	movq	1584(%rsp), %rsi        # 8-byte Reload
	movq	1864(%rsp), %rdx        # 8-byte Reload
	movq	1632(%rsp), %rcx        # 8-byte Reload
	movq	1800(%rsp), %r8         # 8-byte Reload
	movq	1640(%rsp), %r9         # 8-byte Reload
	movq	1648(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1632(%rsp), %rdi        # 8-byte Reload
	movq	1584(%rsp), %rsi        # 8-byte Reload
	movq	10968(%rsp), %rdx       # 8-byte Reload
	movq	1632(%rsp), %rcx        # 8-byte Reload
	movq	1712(%rsp), %r8         # 8-byte Reload
	movq	1640(%rsp), %r9         # 8-byte Reload
	movq	1648(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1864(%rsp), %rax        # 8-byte Reload
	shlq	$3, %rax
	movq	10968(%rsp), %rcx       # 8-byte Reload
	addq	%rax, %rcx
	movq	1600(%rsp), %rdi        # 8-byte Reload
	movq	1584(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	1632(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 1544(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	1728(%rsp), %r8         # 8-byte Reload
	movq	1640(%rsp), %r9         # 8-byte Reload
	movq	1648(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1720(%rsp), %rdi        # 8-byte Reload
	movq	1616(%rsp), %rsi        # 8-byte Reload
	movq	1560(%rsp), %rdx        # 8-byte Reload
	movq	1736(%rsp), %rcx        # 8-byte Reload
	movq	1760(%rsp), %r8         # 8-byte Reload
	movl	1596(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1632(%rsp), %rdi        # 8-byte Reload
	movq	1584(%rsp), %rsi        # 8-byte Reload
	movq	1544(%rsp), %rdx        # 8-byte Reload
	movq	1632(%rsp), %rcx        # 8-byte Reload
	movq	1728(%rsp), %r8         # 8-byte Reload
	movq	1640(%rsp), %r9         # 8-byte Reload
	movq	1648(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	10968(%rsp), %rax       # 8-byte Reload
	movq	1864(%rsp), %rcx        # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
	movq	1600(%rsp), %rdi        # 8-byte Reload
	movq	1584(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 1536(%rsp)       # 8-byte Spill
	movq	1632(%rsp), %rdx        # 8-byte Reload
	movq	1736(%rsp), %rcx        # 8-byte Reload
	movq	1640(%rsp), %r8         # 8-byte Reload
	movq	1648(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
.Ltmp345:
	#DEBUG_VALUE: tred1:f <- [RSP+1536]
	.loc	2 878 0                 # eispack.c:878:0
	movq	1768(%rsp), %rdi        # 8-byte Reload
	movq	1616(%rsp), %rsi        # 8-byte Reload
	movq	1560(%rsp), %rdx        # 8-byte Reload
	movq	1776(%rsp), %rcx        # 8-byte Reload
	movq	1744(%rsp), %r8         # 8-byte Reload
	movl	1596(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1568(%rsp), %rdi        # 8-byte Reload
	movq	1584(%rsp), %rsi        # 8-byte Reload
	movq	1864(%rsp), %rdx        # 8-byte Reload
	movq	1632(%rsp), %rcx        # 8-byte Reload
	movq	1800(%rsp), %r8         # 8-byte Reload
	movq	1640(%rsp), %r9         # 8-byte Reload
	movq	1648(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1632(%rsp), %rdi        # 8-byte Reload
	movq	1584(%rsp), %rsi        # 8-byte Reload
	movq	10960(%rsp), %rdx       # 8-byte Reload
	movq	1632(%rsp), %rcx        # 8-byte Reload
	movq	1752(%rsp), %r8         # 8-byte Reload
	movq	1640(%rsp), %r9         # 8-byte Reload
	movq	1648(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1864(%rsp), %rax        # 8-byte Reload
	shlq	$3, %rax
	movq	10960(%rsp), %rcx       # 8-byte Reload
	addq	%rax, %rcx
	movq	1600(%rsp), %rdi        # 8-byte Reload
	movq	1584(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	1632(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 1528(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	1776(%rsp), %r8         # 8-byte Reload
	movq	1640(%rsp), %r9         # 8-byte Reload
	movq	1648(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1768(%rsp), %rdi        # 8-byte Reload
	movq	1616(%rsp), %rsi        # 8-byte Reload
	movq	1560(%rsp), %rdx        # 8-byte Reload
	movq	1784(%rsp), %rcx        # 8-byte Reload
	movq	1760(%rsp), %r8         # 8-byte Reload
	movl	1596(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1632(%rsp), %rdi        # 8-byte Reload
	movq	1584(%rsp), %rsi        # 8-byte Reload
	movq	1528(%rsp), %rdx        # 8-byte Reload
	movq	1632(%rsp), %rcx        # 8-byte Reload
	movq	1776(%rsp), %r8         # 8-byte Reload
	movq	1640(%rsp), %r9         # 8-byte Reload
	movq	1648(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	10960(%rsp), %rax       # 8-byte Reload
	movq	1864(%rsp), %rcx        # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
	movq	1600(%rsp), %rdi        # 8-byte Reload
	movq	1584(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 1520(%rsp)       # 8-byte Spill
	movq	1632(%rsp), %rdx        # 8-byte Reload
	movq	1784(%rsp), %rcx        # 8-byte Reload
	movq	1640(%rsp), %r8         # 8-byte Reload
	movq	1648(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
.Ltmp346:
	#DEBUG_VALUE: tred1:g <- [RSP+1520]
	.loc	2 881 0                 # eispack.c:881:0
	movq	1816(%rsp), %rdi        # 8-byte Reload
	movq	1616(%rsp), %rsi        # 8-byte Reload
	movq	1560(%rsp), %rdx        # 8-byte Reload
	movq	1832(%rsp), %rcx        # 8-byte Reload
	movq	1792(%rsp), %r8         # 8-byte Reload
	movl	1596(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1632(%rsp), %rdi        # 8-byte Reload
	movq	1584(%rsp), %rsi        # 8-byte Reload
	movq	1864(%rsp), %rdx        # 8-byte Reload
	movq	1632(%rsp), %rcx        # 8-byte Reload
	movq	1800(%rsp), %r8         # 8-byte Reload
	movq	1640(%rsp), %r9         # 8-byte Reload
	movq	1648(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1864(%rsp), %rax        # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %r14d
	movl	%r14d, %edx
	movq	1600(%rsp), %rdi        # 8-byte Reload
	movq	1856(%rsp), %rsi        # 8-byte Reload
	movq	1632(%rsp), %rcx        # 8-byte Reload
	movq	1832(%rsp), %r8         # 8-byte Reload
	movq	1640(%rsp), %r9         # 8-byte Reload
	movq	1648(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 1516(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	1816(%rsp), %rdi        # 8-byte Reload
	movq	1616(%rsp), %rsi        # 8-byte Reload
	movq	1560(%rsp), %rdx        # 8-byte Reload
	movq	1848(%rsp), %rcx        # 8-byte Reload
	movq	1808(%rsp), %r8         # 8-byte Reload
	movl	1596(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	10988(%rsp), %r9d       # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	1568(%rsp), %rdi        # 8-byte Reload
	movq	1856(%rsp), %rsi        # 8-byte Reload
	movq	1632(%rsp), %rcx        # 8-byte Reload
	movq	1824(%rsp), %r8         # 8-byte Reload
	movq	1640(%rsp), %r9         # 8-byte Reload
	movq	1648(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	1516(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r14d
	movl	%r14d, %edx
	movq	1632(%rsp), %rdi        # 8-byte Reload
	movq	1856(%rsp), %rsi        # 8-byte Reload
	movq	1632(%rsp), %rcx        # 8-byte Reload
	movq	1832(%rsp), %r8         # 8-byte Reload
	movq	1640(%rsp), %r9         # 8-byte Reload
	movq	1648(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	1516(%rsp), %ebp        # 4-byte Reload
	movl	10988(%rsp), %r14d      # 4-byte Reload
	imull	%r14d, %ebp
.Ltmp347:
	.loc	2 879 0                 # eispack.c:879:0
	movl	%ebp, %esi
	movl	%esi, %edx
	movq	1600(%rsp), %rdi        # 8-byte Reload
	movq	1856(%rsp), %rsi        # 8-byte Reload
	movq	1632(%rsp), %rcx        # 8-byte Reload
	movq	1848(%rsp), %r8         # 8-byte Reload
	movq	1640(%rsp), %r9         # 8-byte Reload
	movq	1648(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%ebp, 1512(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	1656(%rsp), %rdi        # 8-byte Reload
	movq	1616(%rsp), %rsi        # 8-byte Reload
	movq	1560(%rsp), %rdx        # 8-byte Reload
	movq	1576(%rsp), %rcx        # 8-byte Reload
	movq	1840(%rsp), %r8         # 8-byte Reload
	movl	1596(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	1512(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	1632(%rsp), %rdi        # 8-byte Reload
	movq	1856(%rsp), %rsi        # 8-byte Reload
	movq	1632(%rsp), %rcx        # 8-byte Reload
	movq	1848(%rsp), %r8         # 8-byte Reload
	movq	1640(%rsp), %r9         # 8-byte Reload
	movq	1648(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	1512(%rsp), %ebp        # 4-byte Reload
	movslq	%ebp, %rax
	movq	1600(%rsp), %rdi        # 8-byte Reload
	movq	1584(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	1632(%rsp), %rcx        # 8-byte Reload
	movq	1576(%rsp), %r8         # 8-byte Reload
	movq	1640(%rsp), %r9         # 8-byte Reload
	movq	1648(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 1504(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	1656(%rsp), %rdi        # 8-byte Reload
	movq	1616(%rsp), %rsi        # 8-byte Reload
	movq	1560(%rsp), %rdx        # 8-byte Reload
	movq	1552(%rsp), %rcx        # 8-byte Reload
	movq	1568(%rsp), %r8         # 8-byte Reload
	movl	1596(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1632(%rsp), %rdi        # 8-byte Reload
	movq	1640(%rsp), %rsi        # 8-byte Reload
	movq	1640(%rsp), %rdx        # 8-byte Reload
	movq	1632(%rsp), %rcx        # 8-byte Reload
	movq	1624(%rsp), %r8         # 8-byte Reload
	movq	1640(%rsp), %r9         # 8-byte Reload
	movq	1648(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1864(%rsp), %rax        # 8-byte Reload
	movq	%rax, 1496(%rsp)        # 8-byte Spill
.Ltmp348:
.LBB9_32:                               #   Parent Loop BB9_8 Depth=1
                                        #     Parent Loop BB9_31 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movq	1496(%rsp), %rax        # 8-byte Reload
	movabsq	$1, %rcx
	leaq	.L.str338, %rdx
	movabsq	$0, %rsi
	leaq	.L.str781, %rdi
	movabsq	$2, %r8
	leaq	.L.str322, %r9
	movabsq	$3, %r10
	leaq	.L.str313, %r11
	movabsq	$879, %rbx              # imm = 0x36F
	leaq	.L.str57131, %r14
	leaq	.L.str339, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 1488(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 1480(%rsp)        # 8-byte Spill
	leaq	.L.str337, %rax
	movq	%rax, 1472(%rsp)        # 8-byte Spill
	leaq	.L.str107, %rax
	movq	%rax, 1464(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 1456(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 1448(%rsp)        # 8-byte Spill
	leaq	.L.str324, %rax
	movq	%rax, 1440(%rsp)        # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, 1432(%rsp)        # 8-byte Spill
	leaq	.L.str323, %rax
	movq	%rax, 1424(%rsp)        # 8-byte Spill
	leaq	.L.str1488, %rax
	movq	%rax, 1416(%rsp)        # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, 1408(%rsp)        # 8-byte Spill
	leaq	.L.str335, %rax
	movq	%rax, 1400(%rsp)        # 8-byte Spill
	leaq	.L.str326, %rax
	movq	%rax, 1392(%rsp)        # 8-byte Spill
	movabsq	$881, %rax              # imm = 0x371
	movq	%rax, 1384(%rsp)        # 8-byte Spill
	leaq	.L.str336, %rax
	movq	%rax, 1376(%rsp)        # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, 1368(%rsp)        # 8-byte Spill
	leaq	.L.str331, %rax
	movq	%rax, 1360(%rsp)        # 8-byte Spill
	leaq	.L.str334, %rax
	movq	%rax, 1352(%rsp)        # 8-byte Spill
	movabsq	$11, %rax
	movq	%rax, 1344(%rsp)        # 8-byte Spill
	leaq	.L.str317, %rax
	movq	%rax, 1336(%rsp)        # 8-byte Spill
	leaq	.L.str333, %rax
	movq	%rax, 1328(%rsp)        # 8-byte Spill
	movabsq	$13, %rax
	movq	%rax, 1320(%rsp)        # 8-byte Spill
	leaq	.L.str332, %rax
	movq	%rax, 1312(%rsp)        # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, 1304(%rsp)        # 8-byte Spill
	leaq	.L.str82, %rax
	movq	%rax, 1296(%rsp)        # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 1288(%rsp)        # 8-byte Spill
	leaq	.L.str327, %rax
	movq	%rax, 1280(%rsp)        # 8-byte Spill
	leaq	.L.str330, %rax
	movq	%rax, 1272(%rsp)        # 8-byte Spill
	leaq	.L.str315, %rax
	movq	%rax, 1264(%rsp)        # 8-byte Spill
	leaq	.L.str329, %rax
	movq	%rax, 1256(%rsp)        # 8-byte Spill
	leaq	.L.str328, %rax
	movq	%rax, 1248(%rsp)        # 8-byte Spill
	leaq	.L.str157, %rax
	movq	%rax, 1240(%rsp)        # 8-byte Spill
	leaq	.L.str882, %rax
	movq	%rax, 1232(%rsp)        # 8-byte Spill
	leaq	.L.str325, %rax
	movq	%rax, 1224(%rsp)        # 8-byte Spill
	leaq	.L.str320, %rax
	movq	%rax, 1216(%rsp)        # 8-byte Spill
	leaq	.L.str311, %rax
	movq	%rax, 1208(%rsp)        # 8-byte Spill
	leaq	.L.str310, %rax
	movq	%rax, 1200(%rsp)        # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 1192(%rsp)        # 8-byte Spill
	movabsq	$48, %rax
	.loc	2 881 0                 # eispack.c:881:0
.Ltmp349:
	movq	%rax, 1184(%rsp)        # 8-byte Spill
	movq	1192(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 1176(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 1168(%rsp)        # 8-byte Spill
	movq	%r14, %rsi
	movq	%rdx, 1160(%rsp)        # 8-byte Spill
	movq	%r9, %rdx
	movq	1424(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 1152(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	1184(%rsp), %rax        # 8-byte Reload
	movq	%r8, 1144(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 1136(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r15, 1128(%rsp)        # 8-byte Spill
	movl	%ebp, 1124(%rsp)        # 4-byte Spill
	movl	%r12d, 1120(%rsp)       # 4-byte Spill
	movq	%r13, 1112(%rsp)        # 8-byte Spill
	movq	%r14, 1104(%rsp)        # 8-byte Spill
	movq	%rbx, 1096(%rsp)        # 8-byte Spill
	movq	%r10, 1088(%rsp)        # 8-byte Spill
	movq	%r11, 1080(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	1144(%rsp), %rdi        # 8-byte Reload
	movq	1448(%rsp), %rsi        # 8-byte Reload
	movq	1168(%rsp), %rdx        # 8-byte Reload
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1208(%rsp), %r8         # 8-byte Reload
	movq	1152(%rsp), %r9         # 8-byte Reload
	movq	1200(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1152(%rsp), %rdi        # 8-byte Reload
	movq	1448(%rsp), %rsi        # 8-byte Reload
	movq	1168(%rsp), %rdx        # 8-byte Reload
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1152(%rsp), %r9         # 8-byte Reload
	movq	1136(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1112(%rsp), %rdi        # 8-byte Reload
	movq	1448(%rsp), %rsi        # 8-byte Reload
	movq	1488(%rsp), %rdx        # 8-byte Reload
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1424(%rsp), %r8         # 8-byte Reload
	movq	1168(%rsp), %r9         # 8-byte Reload
	movq	1136(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1384(%rsp), %rdi        # 8-byte Reload
	movq	1104(%rsp), %rsi        # 8-byte Reload
	movq	1136(%rsp), %rdx        # 8-byte Reload
	movq	1224(%rsp), %rcx        # 8-byte Reload
	movq	1408(%rsp), %r8         # 8-byte Reload
	movl	1124(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1144(%rsp), %rdi        # 8-byte Reload
	movq	1448(%rsp), %rsi        # 8-byte Reload
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1216(%rsp), %r8         # 8-byte Reload
	movq	1168(%rsp), %r9         # 8-byte Reload
	movq	1176(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1152(%rsp), %rdi        # 8-byte Reload
	movq	1448(%rsp), %rsi        # 8-byte Reload
	movq	1488(%rsp), %rdx        # 8-byte Reload
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1424(%rsp), %r8         # 8-byte Reload
	movq	1168(%rsp), %r9         # 8-byte Reload
	movq	1176(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1488(%rsp), %rax        # 8-byte Reload
	movq	1504(%rsp), %rcx        # 8-byte Reload
	addq	%rcx, %rax
	movq	1112(%rsp), %rdi        # 8-byte Reload
	movq	1448(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1224(%rsp), %r8         # 8-byte Reload
	movq	1168(%rsp), %r9         # 8-byte Reload
	movq	1176(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 1072(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	1384(%rsp), %rdi        # 8-byte Reload
	movq	1104(%rsp), %rsi        # 8-byte Reload
	movq	1136(%rsp), %rdx        # 8-byte Reload
	movq	1392(%rsp), %rcx        # 8-byte Reload
	movq	1288(%rsp), %r8         # 8-byte Reload
	movl	1124(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1144(%rsp), %rdi        # 8-byte Reload
	movq	1448(%rsp), %rsi        # 8-byte Reload
	movq	1072(%rsp), %rdx        # 8-byte Reload
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1224(%rsp), %r8         # 8-byte Reload
	movq	1168(%rsp), %r9         # 8-byte Reload
	movq	1176(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1152(%rsp), %rdi        # 8-byte Reload
	movq	1448(%rsp), %rsi        # 8-byte Reload
	movq	11104(%rsp), %rdx       # 8-byte Reload
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1232(%rsp), %r8         # 8-byte Reload
	movq	1168(%rsp), %r9         # 8-byte Reload
	movq	1176(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1072(%rsp), %rax        # 8-byte Reload
	shlq	$3, %rax
	movq	11104(%rsp), %rcx       # 8-byte Reload
	addq	%rax, %rcx
	movq	1112(%rsp), %rdi        # 8-byte Reload
	movq	1448(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	1152(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 1064(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	1392(%rsp), %r8         # 8-byte Reload
	movq	1168(%rsp), %r9         # 8-byte Reload
	movq	1176(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1384(%rsp), %rdi        # 8-byte Reload
	movq	1104(%rsp), %rsi        # 8-byte Reload
	movq	1136(%rsp), %rdx        # 8-byte Reload
	movq	1280(%rsp), %rcx        # 8-byte Reload
	movq	1304(%rsp), %r8         # 8-byte Reload
	movl	1124(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1152(%rsp), %rdi        # 8-byte Reload
	movq	1448(%rsp), %rsi        # 8-byte Reload
	movq	1064(%rsp), %rdx        # 8-byte Reload
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1392(%rsp), %r8         # 8-byte Reload
	movq	1168(%rsp), %r9         # 8-byte Reload
	movq	1176(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	11104(%rsp), %rax       # 8-byte Reload
	movq	1072(%rsp), %rcx        # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
	movq	1112(%rsp), %rdi        # 8-byte Reload
	movq	1448(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 1056(%rsp)       # 8-byte Spill
	movq	1152(%rsp), %rdx        # 8-byte Reload
	movq	1280(%rsp), %rcx        # 8-byte Reload
	movq	1168(%rsp), %r8         # 8-byte Reload
	movq	1176(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1384(%rsp), %rdi        # 8-byte Reload
	movq	1104(%rsp), %rsi        # 8-byte Reload
	movq	1136(%rsp), %rdx        # 8-byte Reload
	movq	1248(%rsp), %rcx        # 8-byte Reload
	movq	1288(%rsp), %r8         # 8-byte Reload
	movl	1124(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1144(%rsp), %rdi        # 8-byte Reload
	movq	1448(%rsp), %rsi        # 8-byte Reload
	movq	1488(%rsp), %rdx        # 8-byte Reload
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1424(%rsp), %r8         # 8-byte Reload
	movq	1168(%rsp), %r9         # 8-byte Reload
	movq	1176(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1152(%rsp), %rdi        # 8-byte Reload
	movq	1448(%rsp), %rsi        # 8-byte Reload
	movq	10960(%rsp), %rdx       # 8-byte Reload
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1240(%rsp), %r8         # 8-byte Reload
	movq	1168(%rsp), %r9         # 8-byte Reload
	movq	1176(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1488(%rsp), %rax        # 8-byte Reload
	shlq	$3, %rax
	movq	10960(%rsp), %rcx       # 8-byte Reload
	addq	%rax, %rcx
	movq	1112(%rsp), %rdi        # 8-byte Reload
	movq	1448(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	1152(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 1048(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	1248(%rsp), %r8         # 8-byte Reload
	movq	1168(%rsp), %r9         # 8-byte Reload
	movq	1176(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1384(%rsp), %rdi        # 8-byte Reload
	movq	1104(%rsp), %rsi        # 8-byte Reload
	movq	1136(%rsp), %rdx        # 8-byte Reload
	movq	1256(%rsp), %rcx        # 8-byte Reload
	movq	1304(%rsp), %r8         # 8-byte Reload
	movl	1124(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1152(%rsp), %rdi        # 8-byte Reload
	movq	1448(%rsp), %rsi        # 8-byte Reload
	movq	1048(%rsp), %rdx        # 8-byte Reload
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1248(%rsp), %r8         # 8-byte Reload
	movq	1168(%rsp), %r9         # 8-byte Reload
	movq	1176(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	10960(%rsp), %rax       # 8-byte Reload
	movq	1488(%rsp), %rcx        # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
	movq	1112(%rsp), %rdi        # 8-byte Reload
	movq	1448(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 1040(%rsp)       # 8-byte Spill
	movq	1152(%rsp), %rdx        # 8-byte Reload
	movq	1256(%rsp), %rcx        # 8-byte Reload
	movq	1168(%rsp), %r8         # 8-byte Reload
	movq	1176(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1384(%rsp), %rdi        # 8-byte Reload
	movq	1104(%rsp), %rsi        # 8-byte Reload
	movq	1136(%rsp), %rdx        # 8-byte Reload
	movq	1272(%rsp), %rcx        # 8-byte Reload
	movq	1320(%rsp), %r8         # 8-byte Reload
	movl	1124(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1144(%rsp), %rdi        # 8-byte Reload
	movq	1448(%rsp), %rsi        # 8-byte Reload
	vmovsd	1040(%rsp), %xmm0       # 8-byte Reload
	movq	1152(%rsp), %rdx        # 8-byte Reload
	movq	1256(%rsp), %rcx        # 8-byte Reload
	movq	1168(%rsp), %r8         # 8-byte Reload
	movq	1176(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1152(%rsp), %rdi        # 8-byte Reload
	movq	1448(%rsp), %rsi        # 8-byte Reload
	vmovsd	1536(%rsp), %xmm0       # 8-byte Reload
	movq	1152(%rsp), %rdx        # 8-byte Reload
	movq	1264(%rsp), %rcx        # 8-byte Reload
	movq	1168(%rsp), %r8         # 8-byte Reload
	movq	1176(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	1536(%rsp), %xmm0       # 8-byte Reload
	vmovsd	1040(%rsp), %xmm1       # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	1112(%rsp), %rdi        # 8-byte Reload
	movq	1448(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1152(%rsp), %rdx        # 8-byte Reload
	movq	1272(%rsp), %rcx        # 8-byte Reload
	movq	1168(%rsp), %r8         # 8-byte Reload
	movq	1176(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 1032(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	1384(%rsp), %rdi        # 8-byte Reload
	movq	1104(%rsp), %rsi        # 8-byte Reload
	movq	1136(%rsp), %rdx        # 8-byte Reload
	movq	1360(%rsp), %rcx        # 8-byte Reload
	movq	1344(%rsp), %r8         # 8-byte Reload
	movl	1124(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1144(%rsp), %rdi        # 8-byte Reload
	movq	1448(%rsp), %rsi        # 8-byte Reload
	vmovsd	1032(%rsp), %xmm0       # 8-byte Reload
	movq	1152(%rsp), %rdx        # 8-byte Reload
	movq	1272(%rsp), %rcx        # 8-byte Reload
	movq	1168(%rsp), %r8         # 8-byte Reload
	movq	1176(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1152(%rsp), %rdi        # 8-byte Reload
	movq	1448(%rsp), %rsi        # 8-byte Reload
	vmovsd	1056(%rsp), %xmm0       # 8-byte Reload
	movq	1152(%rsp), %rdx        # 8-byte Reload
	movq	1280(%rsp), %rcx        # 8-byte Reload
	movq	1168(%rsp), %r8         # 8-byte Reload
	movq	1176(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	1056(%rsp), %xmm0       # 8-byte Reload
	vmovsd	1032(%rsp), %xmm1       # 8-byte Reload
	vsubsd	%xmm1, %xmm0, %xmm2
	movq	1112(%rsp), %rdi        # 8-byte Reload
	movq	1448(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1152(%rsp), %rdx        # 8-byte Reload
	movq	1360(%rsp), %rcx        # 8-byte Reload
	movq	1168(%rsp), %r8         # 8-byte Reload
	movq	1176(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 1024(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	1384(%rsp), %rdi        # 8-byte Reload
	movq	1104(%rsp), %rsi        # 8-byte Reload
	movq	1136(%rsp), %rdx        # 8-byte Reload
	movq	1312(%rsp), %rcx        # 8-byte Reload
	movq	1288(%rsp), %r8         # 8-byte Reload
	movl	1124(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1144(%rsp), %rdi        # 8-byte Reload
	movq	1448(%rsp), %rsi        # 8-byte Reload
	movq	1488(%rsp), %rdx        # 8-byte Reload
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1424(%rsp), %r8         # 8-byte Reload
	movq	1168(%rsp), %r9         # 8-byte Reload
	movq	1176(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1152(%rsp), %rdi        # 8-byte Reload
	movq	1448(%rsp), %rsi        # 8-byte Reload
	movq	10968(%rsp), %rdx       # 8-byte Reload
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1296(%rsp), %r8         # 8-byte Reload
	movq	1168(%rsp), %r9         # 8-byte Reload
	movq	1176(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1488(%rsp), %rax        # 8-byte Reload
	shlq	$3, %rax
	movq	10968(%rsp), %rcx       # 8-byte Reload
	addq	%rax, %rcx
	movq	1112(%rsp), %rdi        # 8-byte Reload
	movq	1448(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	1152(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 1016(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	1312(%rsp), %r8         # 8-byte Reload
	movq	1168(%rsp), %r9         # 8-byte Reload
	movq	1176(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1384(%rsp), %rdi        # 8-byte Reload
	movq	1104(%rsp), %rsi        # 8-byte Reload
	movq	1136(%rsp), %rdx        # 8-byte Reload
	movq	1328(%rsp), %rcx        # 8-byte Reload
	movq	1304(%rsp), %r8         # 8-byte Reload
	movl	1124(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1152(%rsp), %rdi        # 8-byte Reload
	movq	1448(%rsp), %rsi        # 8-byte Reload
	movq	1016(%rsp), %rdx        # 8-byte Reload
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1312(%rsp), %r8         # 8-byte Reload
	movq	1168(%rsp), %r9         # 8-byte Reload
	movq	1176(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	10968(%rsp), %rax       # 8-byte Reload
	movq	1488(%rsp), %rcx        # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
	movq	1112(%rsp), %rdi        # 8-byte Reload
	movq	1448(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 1008(%rsp)       # 8-byte Spill
	movq	1152(%rsp), %rdx        # 8-byte Reload
	movq	1328(%rsp), %rcx        # 8-byte Reload
	movq	1168(%rsp), %r8         # 8-byte Reload
	movq	1176(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1384(%rsp), %rdi        # 8-byte Reload
	movq	1104(%rsp), %rsi        # 8-byte Reload
	movq	1136(%rsp), %rdx        # 8-byte Reload
	movq	1352(%rsp), %rcx        # 8-byte Reload
	movq	1320(%rsp), %r8         # 8-byte Reload
	movl	1124(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1144(%rsp), %rdi        # 8-byte Reload
	movq	1448(%rsp), %rsi        # 8-byte Reload
	vmovsd	1008(%rsp), %xmm0       # 8-byte Reload
	movq	1152(%rsp), %rdx        # 8-byte Reload
	movq	1328(%rsp), %rcx        # 8-byte Reload
	movq	1168(%rsp), %r8         # 8-byte Reload
	movq	1176(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1152(%rsp), %rdi        # 8-byte Reload
	movq	1448(%rsp), %rsi        # 8-byte Reload
	vmovsd	1520(%rsp), %xmm0       # 8-byte Reload
	movq	1152(%rsp), %rdx        # 8-byte Reload
	movq	1336(%rsp), %rcx        # 8-byte Reload
	movq	1168(%rsp), %r8         # 8-byte Reload
	movq	1176(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	1520(%rsp), %xmm0       # 8-byte Reload
	vmovsd	1008(%rsp), %xmm1       # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	1112(%rsp), %rdi        # 8-byte Reload
	movq	1448(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1152(%rsp), %rdx        # 8-byte Reload
	movq	1352(%rsp), %rcx        # 8-byte Reload
	movq	1168(%rsp), %r8         # 8-byte Reload
	movq	1176(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 1000(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	1384(%rsp), %rdi        # 8-byte Reload
	movq	1104(%rsp), %rsi        # 8-byte Reload
	movq	1136(%rsp), %rdx        # 8-byte Reload
	movq	1400(%rsp), %rcx        # 8-byte Reload
	movq	1344(%rsp), %r8         # 8-byte Reload
	movl	1124(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1144(%rsp), %rdi        # 8-byte Reload
	movq	1448(%rsp), %rsi        # 8-byte Reload
	vmovsd	1000(%rsp), %xmm0       # 8-byte Reload
	movq	1152(%rsp), %rdx        # 8-byte Reload
	movq	1352(%rsp), %rcx        # 8-byte Reload
	movq	1168(%rsp), %r8         # 8-byte Reload
	movq	1176(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1152(%rsp), %rdi        # 8-byte Reload
	movq	1448(%rsp), %rsi        # 8-byte Reload
	vmovsd	1024(%rsp), %xmm0       # 8-byte Reload
	movq	1152(%rsp), %rdx        # 8-byte Reload
	movq	1360(%rsp), %rcx        # 8-byte Reload
	movq	1168(%rsp), %r8         # 8-byte Reload
	movq	1176(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	1024(%rsp), %xmm0       # 8-byte Reload
	vmovsd	1000(%rsp), %xmm1       # 8-byte Reload
	vsubsd	%xmm1, %xmm0, %xmm2
	movq	1112(%rsp), %rdi        # 8-byte Reload
	movq	1448(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1152(%rsp), %rdx        # 8-byte Reload
	movq	1400(%rsp), %rcx        # 8-byte Reload
	movq	1168(%rsp), %r8         # 8-byte Reload
	movq	1176(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 992(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	1384(%rsp), %rdi        # 8-byte Reload
	movq	1104(%rsp), %rsi        # 8-byte Reload
	movq	1136(%rsp), %rdx        # 8-byte Reload
	movq	1376(%rsp), %rcx        # 8-byte Reload
	movq	1368(%rsp), %r8         # 8-byte Reload
	movl	1124(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1144(%rsp), %rdi        # 8-byte Reload
	movq	1448(%rsp), %rsi        # 8-byte Reload
	movq	1064(%rsp), %rdx        # 8-byte Reload
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1392(%rsp), %r8         # 8-byte Reload
	movq	1168(%rsp), %r9         # 8-byte Reload
	movq	1176(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1152(%rsp), %rdi        # 8-byte Reload
	movq	1448(%rsp), %rsi        # 8-byte Reload
	vmovsd	992(%rsp), %xmm0        # 8-byte Reload
	movq	1152(%rsp), %rdx        # 8-byte Reload
	movq	1400(%rsp), %rcx        # 8-byte Reload
	movq	1168(%rsp), %r8         # 8-byte Reload
	movq	1176(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	11104(%rsp), %rax       # 8-byte Reload
	movq	1072(%rsp), %rcx        # 8-byte Reload
	vmovsd	992(%rsp), %xmm0        # 8-byte Reload
	vmovsd	%xmm0, (%rax,%rcx,8)
.Ltmp350:
	.loc	2 879 0                 # eispack.c:879:0
	movq	1096(%rsp), %rdi        # 8-byte Reload
	movq	1104(%rsp), %rsi        # 8-byte Reload
	movq	1136(%rsp), %rdx        # 8-byte Reload
	movq	1440(%rsp), %rcx        # 8-byte Reload
	movq	1408(%rsp), %r8         # 8-byte Reload
	movl	1124(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1144(%rsp), %rdi        # 8-byte Reload
	movq	1448(%rsp), %rsi        # 8-byte Reload
	movq	1152(%rsp), %rdx        # 8-byte Reload
	movq	1168(%rsp), %rcx        # 8-byte Reload
	movq	1416(%rsp), %r8         # 8-byte Reload
	movq	1168(%rsp), %r9         # 8-byte Reload
	movq	1176(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1152(%rsp), %rdi        # 8-byte Reload
	movq	1448(%rsp), %rsi        # 8-byte Reload
	movq	1488(%rsp), %rdx        # 8-byte Reload
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1424(%rsp), %r8         # 8-byte Reload
	movq	1168(%rsp), %r9         # 8-byte Reload
	movq	1176(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1488(%rsp), %rax        # 8-byte Reload
	addq	$1, %rax
	movq	1112(%rsp), %rdi        # 8-byte Reload
	movq	1448(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1168(%rsp), %r9         # 8-byte Reload
	movq	1176(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 984(%rsp)         # 8-byte Spill
	callq	trace_logger_log_int
	movq	1096(%rsp), %rdi        # 8-byte Reload
	movq	1104(%rsp), %rsi        # 8-byte Reload
	movq	1136(%rsp), %rdx        # 8-byte Reload
	movq	1472(%rsp), %rcx        # 8-byte Reload
	movq	1432(%rsp), %r8         # 8-byte Reload
	movl	1124(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1152(%rsp), %rdi        # 8-byte Reload
	movq	1448(%rsp), %rsi        # 8-byte Reload
	movq	984(%rsp), %rdx         # 8-byte Reload
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1168(%rsp), %r9         # 8-byte Reload
	movq	1176(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	984(%rsp), %rax         # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	1112(%rsp), %rdi        # 8-byte Reload
	movq	1480(%rsp), %rsi        # 8-byte Reload
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1472(%rsp), %r8         # 8-byte Reload
	movq	1168(%rsp), %r9         # 8-byte Reload
	movq	1176(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 980(%rsp)         # 4-byte Spill
	callq	trace_logger_log_int
	movq	1096(%rsp), %rdi        # 8-byte Reload
	movq	1104(%rsp), %rsi        # 8-byte Reload
	movq	1136(%rsp), %rdx        # 8-byte Reload
	movq	1160(%rsp), %rcx        # 8-byte Reload
	movq	1456(%rsp), %r8         # 8-byte Reload
	movl	1124(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	8900(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	1144(%rsp), %rdi        # 8-byte Reload
	movq	1480(%rsp), %rsi        # 8-byte Reload
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1464(%rsp), %r8         # 8-byte Reload
	movq	1168(%rsp), %r9         # 8-byte Reload
	movq	1176(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	980(%rsp), %ebp         # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	1152(%rsp), %rdi        # 8-byte Reload
	movq	1480(%rsp), %rsi        # 8-byte Reload
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1472(%rsp), %r8         # 8-byte Reload
	movq	1168(%rsp), %r9         # 8-byte Reload
	movq	1176(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	980(%rsp), %ebp         # 4-byte Reload
	movl	8900(%rsp), %r12d       # 4-byte Reload
	cmpl	%r12d, %ebp
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	1112(%rsp), %rdi        # 8-byte Reload
	movq	1152(%rsp), %rsi        # 8-byte Reload
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1160(%rsp), %r8         # 8-byte Reload
	movq	1168(%rsp), %r9         # 8-byte Reload
	movq	1176(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 979(%rsp)          # 1-byte Spill
	callq	trace_logger_log_int
	movq	1096(%rsp), %rdi        # 8-byte Reload
	movq	1104(%rsp), %rsi        # 8-byte Reload
	movq	1136(%rsp), %rdx        # 8-byte Reload
	movq	1128(%rsp), %rcx        # 8-byte Reload
	movq	1144(%rsp), %r8         # 8-byte Reload
	movl	1124(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1088(%rsp), %rdi        # 8-byte Reload
	movq	1168(%rsp), %rsi        # 8-byte Reload
	movq	1168(%rsp), %rdx        # 8-byte Reload
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1080(%rsp), %r8         # 8-byte Reload
	movq	1168(%rsp), %r9         # 8-byte Reload
	movq	1176(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1144(%rsp), %rdi        # 8-byte Reload
	movq	1168(%rsp), %rsi        # 8-byte Reload
	movq	1168(%rsp), %rdx        # 8-byte Reload
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1136(%rsp), %r8         # 8-byte Reload
	movq	1168(%rsp), %r9         # 8-byte Reload
	movq	1176(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	979(%rsp), %al          # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	1152(%rsp), %rdi        # 8-byte Reload
	movq	1152(%rsp), %rsi        # 8-byte Reload
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1160(%rsp), %r8         # 8-byte Reload
	movq	1168(%rsp), %r9         # 8-byte Reload
	movq	1176(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	979(%rsp), %al          # 1-byte Reload
	testb	$1, %al
	movq	984(%rsp), %rcx         # 8-byte Reload
	movq	%rcx, 1496(%rsp)        # 8-byte Spill
	jne	.LBB9_33
	jmp	.LBB9_32
.Ltmp351:
.LBB9_33:                               # %._crit_edge35
                                        #   in Loop: Header=BB9_31 Depth=2
	movabsq	$1, %rax
	leaq	.L.str341, %rcx
	movabsq	$0, %rdx
	leaq	.L.str781, %rsi
	movabsq	$2, %rdi
	leaq	.L.str310, %r8
	movabsq	$3, %r9
	leaq	.L.str343, %r10
	movabsq	$875, %r11              # imm = 0x36B
	leaq	.L.str57131, %rbx
	leaq	.L.str313, %r14
	leaq	.L.str342, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 968(%rsp)         # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 960(%rsp)         # 8-byte Spill
	leaq	.L.str340, %rax
	movq	%rax, 952(%rsp)         # 8-byte Spill
	leaq	.L.str107, %rax
	movq	%rax, 944(%rsp)         # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 936(%rsp)         # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 928(%rsp)         # 8-byte Spill
	leaq	.L.str312, %rax
	movq	%rax, 920(%rsp)         # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, 912(%rsp)         # 8-byte Spill
	leaq	.L.str311, %rax
	movq	%rax, 904(%rsp)         # 8-byte Spill
	leaq	.L.str1488, %rax
	movq	%rax, 896(%rsp)         # 8-byte Spill
	movabsq	$8, %rax
	.loc	2 875 0                 # eispack.c:875:0
	movq	%rdi, 888(%rsp)         # 8-byte Spill
	movq	%r11, %rdi
	movq	%rsi, 880(%rsp)         # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, 872(%rsp)         # 8-byte Spill
	movq	%r14, %rdx
	movq	%rax, 864(%rsp)         # 8-byte Spill
	movq	920(%rsp), %rax         # 8-byte Reload
	movq	%rcx, 856(%rsp)         # 8-byte Spill
	movq	%rax, %rcx
	movq	864(%rsp), %rax         # 8-byte Reload
	movq	%r8, 848(%rsp)          # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 840(%rsp)          # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r15, 832(%rsp)         # 8-byte Spill
	movl	%ebp, 828(%rsp)         # 4-byte Spill
	movl	%r12d, 824(%rsp)        # 4-byte Spill
	movq	%r13, 816(%rsp)         # 8-byte Spill
	movq	%r14, 808(%rsp)         # 8-byte Spill
	movq	%rbx, 800(%rsp)         # 8-byte Spill
	movq	%r10, 792(%rsp)         # 8-byte Spill
	movq	%r11, 784(%rsp)         # 8-byte Spill
	callq	trace_logger_log0
	movq	888(%rsp), %rdi         # 8-byte Reload
	movq	928(%rsp), %rsi         # 8-byte Reload
	movq	968(%rsp), %rdx         # 8-byte Reload
	movq	872(%rsp), %rcx         # 8-byte Reload
	movq	896(%rsp), %r8          # 8-byte Reload
	movq	872(%rsp), %r9          # 8-byte Reload
	movq	880(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	968(%rsp), %rdi         # 8-byte Reload
	movq	928(%rsp), %rsi         # 8-byte Reload
	movq	1864(%rsp), %rdx        # 8-byte Reload
	movq	968(%rsp), %rcx         # 8-byte Reload
	movq	904(%rsp), %r8          # 8-byte Reload
	movq	872(%rsp), %r9          # 8-byte Reload
	movq	880(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1864(%rsp), %rax        # 8-byte Reload
	addq	$1, %rax
	movq	816(%rsp), %rdi         # 8-byte Reload
	movq	928(%rsp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	movq	968(%rsp), %rcx         # 8-byte Reload
	movq	920(%rsp), %r8          # 8-byte Reload
	movq	872(%rsp), %r9          # 8-byte Reload
	movq	880(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 776(%rsp)         # 8-byte Spill
	callq	trace_logger_log_int
	movq	784(%rsp), %rdi         # 8-byte Reload
	movq	800(%rsp), %rsi         # 8-byte Reload
	movq	808(%rsp), %rdx         # 8-byte Reload
	movq	952(%rsp), %rcx         # 8-byte Reload
	movq	912(%rsp), %r8          # 8-byte Reload
	movl	828(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	968(%rsp), %rdi         # 8-byte Reload
	movq	928(%rsp), %rsi         # 8-byte Reload
	movq	776(%rsp), %rdx         # 8-byte Reload
	movq	968(%rsp), %rcx         # 8-byte Reload
	movq	920(%rsp), %r8          # 8-byte Reload
	movq	872(%rsp), %r9          # 8-byte Reload
	movq	880(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	776(%rsp), %rax         # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	816(%rsp), %rdi         # 8-byte Reload
	movq	960(%rsp), %rsi         # 8-byte Reload
	movq	968(%rsp), %rcx         # 8-byte Reload
	movq	952(%rsp), %r8          # 8-byte Reload
	movq	872(%rsp), %r9          # 8-byte Reload
	movq	880(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 772(%rsp)         # 4-byte Spill
	callq	trace_logger_log_int
	movq	784(%rsp), %rdi         # 8-byte Reload
	movq	800(%rsp), %rsi         # 8-byte Reload
	movq	808(%rsp), %rdx         # 8-byte Reload
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	936(%rsp), %r8          # 8-byte Reload
	movl	828(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	8900(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	888(%rsp), %rdi         # 8-byte Reload
	movq	960(%rsp), %rsi         # 8-byte Reload
	movq	968(%rsp), %rcx         # 8-byte Reload
	movq	944(%rsp), %r8          # 8-byte Reload
	movq	872(%rsp), %r9          # 8-byte Reload
	movq	880(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	772(%rsp), %ebp         # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	968(%rsp), %rdi         # 8-byte Reload
	movq	960(%rsp), %rsi         # 8-byte Reload
	movq	968(%rsp), %rcx         # 8-byte Reload
	movq	952(%rsp), %r8          # 8-byte Reload
	movq	872(%rsp), %r9          # 8-byte Reload
	movq	880(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	772(%rsp), %ebp         # 4-byte Reload
	movl	8900(%rsp), %r12d       # 4-byte Reload
	cmpl	%r12d, %ebp
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	816(%rsp), %rdi         # 8-byte Reload
	movq	968(%rsp), %rsi         # 8-byte Reload
	movq	968(%rsp), %rcx         # 8-byte Reload
	movq	856(%rsp), %r8          # 8-byte Reload
	movq	872(%rsp), %r9          # 8-byte Reload
	movq	880(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 771(%rsp)          # 1-byte Spill
	callq	trace_logger_log_int
	movq	784(%rsp), %rdi         # 8-byte Reload
	movq	800(%rsp), %rsi         # 8-byte Reload
	movq	808(%rsp), %rdx         # 8-byte Reload
	movq	832(%rsp), %rcx         # 8-byte Reload
	movq	888(%rsp), %r8          # 8-byte Reload
	movl	828(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	840(%rsp), %rdi         # 8-byte Reload
	movq	872(%rsp), %rsi         # 8-byte Reload
	movq	872(%rsp), %rdx         # 8-byte Reload
	movq	968(%rsp), %rcx         # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	872(%rsp), %r9          # 8-byte Reload
	movq	880(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	888(%rsp), %rdi         # 8-byte Reload
	movq	872(%rsp), %rsi         # 8-byte Reload
	movq	872(%rsp), %rdx         # 8-byte Reload
	movq	968(%rsp), %rcx         # 8-byte Reload
	movq	848(%rsp), %r8          # 8-byte Reload
	movq	872(%rsp), %r9          # 8-byte Reload
	movq	880(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	771(%rsp), %al          # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	968(%rsp), %rdi         # 8-byte Reload
	movq	968(%rsp), %rsi         # 8-byte Reload
	movq	968(%rsp), %rcx         # 8-byte Reload
	movq	856(%rsp), %r8          # 8-byte Reload
	movq	872(%rsp), %r9          # 8-byte Reload
	movq	880(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	771(%rsp), %al          # 1-byte Reload
	testb	$1, %al
	movq	776(%rsp), %rcx         # 8-byte Reload
	movq	%rcx, 1872(%rsp)        # 8-byte Spill
	jne	.LBB9_34
	jmp	.LBB9_31
.Ltmp352:
.LBB9_34:                               # %.preheader39
                                        #   in Loop: Header=BB9_8 Depth=1
	movabsq	$0, %rax
	movabsq	$1, %rcx
	leaq	.L.str344, %rdx
	leaq	.L.str781, %rsi
	movabsq	$2, %rdi
	leaq	.L.str346, %r8
	movabsq	$3, %r9
	leaq	.L.str105, %r10
	movabsq	$886, %r11              # imm = 0x376
	leaq	.L.str57131, %rbx
	leaq	.L.str343, %r14
	leaq	.L.str345, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 760(%rsp)         # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 752(%rsp)         # 8-byte Spill
	leaq	.L.str110, %rax
	movq	%rax, 744(%rsp)         # 8-byte Spill
	leaq	.L.str1488, %rax
	movq	%rax, 736(%rsp)         # 8-byte Spill
	movabsq	$46, %rax
	.loc	2 886 0                 # eispack.c:886:0
.Ltmp353:
	movq	%rdi, 728(%rsp)         # 8-byte Spill
	movq	%r11, %rdi
	movq	%rsi, 720(%rsp)         # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, 712(%rsp)         # 8-byte Spill
	movq	%r14, %rdx
	movq	%rax, 704(%rsp)         # 8-byte Spill
	movq	712(%rsp), %rax         # 8-byte Reload
	movq	%rcx, 696(%rsp)         # 8-byte Spill
	movq	%rax, %rcx
	movq	704(%rsp), %rax         # 8-byte Reload
	movq	%r8, 688(%rsp)          # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 680(%rsp)          # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r15, 672(%rsp)         # 8-byte Spill
	movl	%ebp, 668(%rsp)         # 4-byte Spill
	movl	%r12d, 664(%rsp)        # 4-byte Spill
	movq	%r13, 656(%rsp)         # 8-byte Spill
	movq	%r14, 648(%rsp)         # 8-byte Spill
	movq	%rbx, 640(%rsp)         # 8-byte Spill
	movq	%r10, 632(%rsp)         # 8-byte Spill
	movq	%r11, 624(%rsp)         # 8-byte Spill
	callq	trace_logger_log0
	movq	728(%rsp), %rdi         # 8-byte Reload
	movq	752(%rsp), %rsi         # 8-byte Reload
	movq	760(%rsp), %rdx         # 8-byte Reload
	movq	760(%rsp), %rcx         # 8-byte Reload
	movq	736(%rsp), %r8          # 8-byte Reload
	movq	760(%rsp), %r9          # 8-byte Reload
	movq	720(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	8880(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	696(%rsp), %rdi         # 8-byte Reload
	movq	752(%rsp), %rsi         # 8-byte Reload
	movq	696(%rsp), %rcx         # 8-byte Reload
	movq	744(%rsp), %r8          # 8-byte Reload
	movq	760(%rsp), %r9          # 8-byte Reload
	movq	720(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	8880(%rsp), %ebp        # 4-byte Reload
	cmpl	$0, %ebp
	setl	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %r12d
	movl	%r12d, %edx
	movq	656(%rsp), %rdi         # 8-byte Reload
	movq	696(%rsp), %rsi         # 8-byte Reload
	movq	696(%rsp), %rcx         # 8-byte Reload
	movq	712(%rsp), %r8          # 8-byte Reload
	movq	760(%rsp), %r9          # 8-byte Reload
	movq	720(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 623(%rsp)          # 1-byte Spill
	callq	trace_logger_log_int
	movq	624(%rsp), %rdi         # 8-byte Reload
	movq	640(%rsp), %rsi         # 8-byte Reload
	movq	648(%rsp), %rdx         # 8-byte Reload
	movq	672(%rsp), %rcx         # 8-byte Reload
	movq	728(%rsp), %r8          # 8-byte Reload
	movl	668(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	680(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	760(%rsp), %rdx         # 8-byte Reload
	movq	696(%rsp), %rcx         # 8-byte Reload
	movq	632(%rsp), %r8          # 8-byte Reload
	movq	760(%rsp), %r9          # 8-byte Reload
	movq	720(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	728(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	760(%rsp), %rdx         # 8-byte Reload
	movq	696(%rsp), %rcx         # 8-byte Reload
	movq	688(%rsp), %r8          # 8-byte Reload
	movq	760(%rsp), %r9          # 8-byte Reload
	movq	720(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	623(%rsp), %al          # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	696(%rsp), %rdi         # 8-byte Reload
	movq	696(%rsp), %rsi         # 8-byte Reload
	movq	696(%rsp), %rcx         # 8-byte Reload
	movq	712(%rsp), %r8          # 8-byte Reload
	movq	760(%rsp), %r9          # 8-byte Reload
	movq	720(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	623(%rsp), %al          # 1-byte Reload
	testb	$1, %al
	movq	760(%rsp), %rcx         # 8-byte Reload
	movq	%rcx, 608(%rsp)         # 8-byte Spill
	jne	.LBB9_15
.LBB9_35:                               # %.lr.ph42
                                        #   Parent Loop BB9_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	608(%rsp), %rax         # 8-byte Reload
	movabsq	$1, %rcx
	leaq	.L.str367, %rdx
	movabsq	$0, %rsi
	leaq	.L.str781, %rdi
	movabsq	$2, %r8
	leaq	.L.str346, %r9
	movabsq	$3, %r10
	leaq	.L.str105, %r11
	movabsq	$886, %rbx              # imm = 0x376
	leaq	.L.str57131, %r14
	leaq	.L.str368, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 600(%rsp)         # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 592(%rsp)         # 8-byte Spill
	leaq	.L.str366, %rax
	movq	%rax, 584(%rsp)         # 8-byte Spill
	leaq	.L.str107, %rax
	movq	%rax, 576(%rsp)         # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 568(%rsp)         # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 560(%rsp)         # 8-byte Spill
	leaq	.L.str348, %rax
	movq	%rax, 552(%rsp)         # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, 544(%rsp)         # 8-byte Spill
	leaq	.L.str347, %rax
	movq	%rax, 536(%rsp)         # 8-byte Spill
	leaq	.L.str1488, %rax
	movq	%rax, 528(%rsp)         # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, 520(%rsp)         # 8-byte Spill
	leaq	.L.str364, %rax
	movq	%rax, 512(%rsp)         # 8-byte Spill
	leaq	.L.str361, %rax
	movq	%rax, 504(%rsp)         # 8-byte Spill
	movabsq	$891, %rax              # imm = 0x37B
	movq	%rax, 496(%rsp)         # 8-byte Spill
	leaq	.L.str365, %rax
	movq	%rax, 488(%rsp)         # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, 480(%rsp)         # 8-byte Spill
	leaq	.L.str118, %rax
	movq	%rax, 472(%rsp)         # 8-byte Spill
	leaq	.L.str350, %rax
	movq	%rax, 464(%rsp)         # 8-byte Spill
	movabsq	$13, %rax
	movq	%rax, 456(%rsp)         # 8-byte Spill
	leaq	.L.str362, %rax
	movq	%rax, 448(%rsp)         # 8-byte Spill
	leaq	.L.str355, %rax
	movq	%rax, 440(%rsp)         # 8-byte Spill
	movabsq	$890, %rax              # imm = 0x37A
	movq	%rax, 432(%rsp)         # 8-byte Spill
	leaq	.L.str363, %rax
	movq	%rax, 424(%rsp)         # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, 416(%rsp)         # 8-byte Spill
	leaq	.L.str882, %rax
	movq	%rax, 408(%rsp)         # 8-byte Spill
	leaq	.L.str360, %rax
	movq	%rax, 400(%rsp)         # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 392(%rsp)         # 8-byte Spill
	leaq	.L.str359, %rax
	movq	%rax, 384(%rsp)         # 8-byte Spill
	movabsq	$35, %rax
	movq	%rax, 376(%rsp)         # 8-byte Spill
	leaq	.L.str352, %rax
	movq	%rax, 368(%rsp)         # 8-byte Spill
	leaq	.L.str358, %rax
	movq	%rax, 360(%rsp)         # 8-byte Spill
	leaq	.L.str104, %rax
	movq	%rax, 352(%rsp)         # 8-byte Spill
	leaq	.L.str356, %rax
	movq	%rax, 344(%rsp)         # 8-byte Spill
	leaq	.L.str349, %rax
	movq	%rax, 336(%rsp)         # 8-byte Spill
	movabsq	$889, %rax              # imm = 0x379
	movq	%rax, 328(%rsp)         # 8-byte Spill
	leaq	.L.str357, %rax
	movq	%rax, 320(%rsp)         # 8-byte Spill
	leaq	.L.str354, %rax
	movq	%rax, 312(%rsp)         # 8-byte Spill
	leaq	.L.str353, %rax
	movq	%rax, 304(%rsp)         # 8-byte Spill
	leaq	.L.str110, %rax
	movq	%rax, 296(%rsp)         # 8-byte Spill
	leaq	.L.str351, %rax
	movq	%rax, 288(%rsp)         # 8-byte Spill
	leaq	.L.str51125, %rax
	movq	%rax, 280(%rsp)         # 8-byte Spill
	movabsq	$12, %rax
	movq	%rax, 272(%rsp)         # 8-byte Spill
	movabsq	$888, %rax              # imm = 0x378
	movq	%rax, 264(%rsp)         # 8-byte Spill
	leaq	.L.str82, %rax
	movq	%rax, 256(%rsp)         # 8-byte Spill
	leaq	.L.str343, %rax
	movq	%rax, 248(%rsp)         # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 240(%rsp)         # 8-byte Spill
	movabsq	$48, %rax
	.loc	2 888 0                 # eispack.c:888:0
.Ltmp354:
	movq	%rax, 232(%rsp)         # 8-byte Spill
	movq	240(%rsp), %rax         # 8-byte Reload
	movq	%rdi, 224(%rsp)         # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 216(%rsp)         # 8-byte Spill
	movq	%r14, %rsi
	movq	%rdx, 208(%rsp)         # 8-byte Spill
	movq	%r9, %rdx
	movq	536(%rsp), %rax         # 8-byte Reload
	movq	%rcx, 200(%rsp)         # 8-byte Spill
	movq	%rax, %rcx
	movq	232(%rsp), %rax         # 8-byte Reload
	movq	%r8, 192(%rsp)          # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 184(%rsp)          # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r15, 176(%rsp)         # 8-byte Spill
	movl	%ebp, 172(%rsp)         # 4-byte Spill
	movl	%r12d, 168(%rsp)        # 4-byte Spill
	movq	%r13, 160(%rsp)         # 8-byte Spill
	movq	%r14, 152(%rsp)         # 8-byte Spill
	movq	%rbx, 144(%rsp)         # 8-byte Spill
	movq	%r10, 136(%rsp)         # 8-byte Spill
	movq	%r11, 128(%rsp)         # 8-byte Spill
	callq	trace_logger_log0
	movq	192(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	movq	216(%rsp), %rdx         # 8-byte Reload
	movq	216(%rsp), %rcx         # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	200(%rsp), %r9          # 8-byte Reload
	movq	248(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	200(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	movq	216(%rsp), %rdx         # 8-byte Reload
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	552(%rsp), %r8          # 8-byte Reload
	movq	200(%rsp), %r9          # 8-byte Reload
	movq	184(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	160(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	movq	600(%rsp), %rdx         # 8-byte Reload
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	536(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	184(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	264(%rsp), %rdi         # 8-byte Reload
	movq	152(%rsp), %rsi         # 8-byte Reload
	movq	184(%rsp), %rdx         # 8-byte Reload
	movq	336(%rsp), %rcx         # 8-byte Reload
	movq	392(%rsp), %r8          # 8-byte Reload
	movl	172(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	192(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	movq	600(%rsp), %rdx         # 8-byte Reload
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	536(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	200(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	movq	10968(%rsp), %rdx       # 8-byte Reload
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	256(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	600(%rsp), %rax         # 8-byte Reload
	shlq	$3, %rax
	movq	10968(%rsp), %rcx       # 8-byte Reload
	addq	%rax, %rcx
	movq	160(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	movq	%rcx, %rdx
	movq	200(%rsp), %rax         # 8-byte Reload
	movq	%rcx, 120(%rsp)         # 8-byte Spill
	movq	%rax, %rcx
	movq	336(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	264(%rsp), %rdi         # 8-byte Reload
	movq	152(%rsp), %rsi         # 8-byte Reload
	movq	184(%rsp), %rdx         # 8-byte Reload
	movq	464(%rsp), %rcx         # 8-byte Reload
	movq	416(%rsp), %r8          # 8-byte Reload
	movl	172(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	200(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	movq	120(%rsp), %rdx         # 8-byte Reload
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	336(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	10968(%rsp), %rax       # 8-byte Reload
	movq	600(%rsp), %rcx         # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
	movq	160(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	vmovsd	%xmm0, 112(%rsp)        # 8-byte Spill
	movq	200(%rsp), %rdx         # 8-byte Reload
	movq	464(%rsp), %rcx         # 8-byte Reload
	movq	216(%rsp), %r8          # 8-byte Reload
	movq	224(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
.Ltmp355:
	#DEBUG_VALUE: tred1:f <- [RSP+112]
	.loc	2 889 0                 # eispack.c:889:0
	movq	328(%rsp), %rdi         # 8-byte Reload
	movq	152(%rsp), %rsi         # 8-byte Reload
	movq	184(%rsp), %rdx         # 8-byte Reload
	movq	288(%rsp), %rcx         # 8-byte Reload
	movq	544(%rsp), %r8          # 8-byte Reload
	movl	172(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	200(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	movq	600(%rsp), %rdx         # 8-byte Reload
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	536(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	600(%rsp), %rax         # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	160(%rsp), %rdi         # 8-byte Reload
	movq	592(%rsp), %rsi         # 8-byte Reload
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	288(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 108(%rsp)         # 4-byte Spill
	callq	trace_logger_log_int
	movq	328(%rsp), %rdi         # 8-byte Reload
	movq	152(%rsp), %rsi         # 8-byte Reload
	movq	184(%rsp), %rdx         # 8-byte Reload
	movq	368(%rsp), %rcx         # 8-byte Reload
	movq	272(%rsp), %r8          # 8-byte Reload
	movl	172(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	10988(%rsp), %r9d       # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	192(%rsp), %rdi         # 8-byte Reload
	movq	592(%rsp), %rsi         # 8-byte Reload
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	280(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	108(%rsp), %ebp         # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	200(%rsp), %rdi         # 8-byte Reload
	movq	592(%rsp), %rsi         # 8-byte Reload
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	288(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	108(%rsp), %ebp         # 4-byte Reload
	movl	10988(%rsp), %r12d      # 4-byte Reload
	imull	%r12d, %ebp
	movl	%ebp, %esi
	movl	%esi, %edx
	movq	160(%rsp), %rdi         # 8-byte Reload
	movq	592(%rsp), %rsi         # 8-byte Reload
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	368(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%ebp, 104(%rsp)         # 4-byte Spill
	callq	trace_logger_log_int
	movq	328(%rsp), %rdi         # 8-byte Reload
	movq	152(%rsp), %rsi         # 8-byte Reload
	movq	184(%rsp), %rdx         # 8-byte Reload
	movq	304(%rsp), %rcx         # 8-byte Reload
	movq	520(%rsp), %r8          # 8-byte Reload
	movl	172(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	8880(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	192(%rsp), %rdi         # 8-byte Reload
	movq	592(%rsp), %rsi         # 8-byte Reload
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	296(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	104(%rsp), %ebp         # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	200(%rsp), %rdi         # 8-byte Reload
	movq	592(%rsp), %rsi         # 8-byte Reload
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	368(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	104(%rsp), %ebp         # 4-byte Reload
	movl	8880(%rsp), %r12d       # 4-byte Reload
	addl	%r12d, %ebp
	movl	%ebp, %esi
	movl	%esi, %edx
	movq	160(%rsp), %rdi         # 8-byte Reload
	movq	592(%rsp), %rsi         # 8-byte Reload
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	304(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%ebp, 100(%rsp)         # 4-byte Spill
	callq	trace_logger_log_int
	movq	328(%rsp), %rdi         # 8-byte Reload
	movq	152(%rsp), %rsi         # 8-byte Reload
	movq	184(%rsp), %rdx         # 8-byte Reload
	movq	312(%rsp), %rcx         # 8-byte Reload
	movq	376(%rsp), %r8          # 8-byte Reload
	movl	172(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	100(%rsp), %r9d         # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	200(%rsp), %rdi         # 8-byte Reload
	movq	592(%rsp), %rsi         # 8-byte Reload
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	304(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	100(%rsp), %ebp         # 4-byte Reload
	movslq	%ebp, %rax
	movq	160(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	312(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 88(%rsp)          # 8-byte Spill
	callq	trace_logger_log_int
	movq	328(%rsp), %rdi         # 8-byte Reload
	movq	152(%rsp), %rsi         # 8-byte Reload
	movq	184(%rsp), %rdx         # 8-byte Reload
	movq	440(%rsp), %rcx         # 8-byte Reload
	movq	392(%rsp), %r8          # 8-byte Reload
	movl	172(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	192(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	movq	88(%rsp), %rdx          # 8-byte Reload
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	312(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	200(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	movq	11104(%rsp), %rdx       # 8-byte Reload
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	408(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	88(%rsp), %rax          # 8-byte Reload
	shlq	$3, %rax
	movq	11104(%rsp), %rcx       # 8-byte Reload
	addq	%rax, %rcx
	movq	160(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	movq	%rcx, %rdx
	movq	200(%rsp), %rax         # 8-byte Reload
	movq	%rcx, 80(%rsp)          # 8-byte Spill
	movq	%rax, %rcx
	movq	440(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	328(%rsp), %rdi         # 8-byte Reload
	movq	152(%rsp), %rsi         # 8-byte Reload
	movq	184(%rsp), %rdx         # 8-byte Reload
	movq	344(%rsp), %rcx         # 8-byte Reload
	movq	416(%rsp), %r8          # 8-byte Reload
	movl	172(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	200(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	movq	80(%rsp), %rdx          # 8-byte Reload
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	440(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	11104(%rsp), %rax       # 8-byte Reload
	movq	88(%rsp), %rcx          # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
	movq	160(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	vmovsd	%xmm0, 72(%rsp)         # 8-byte Spill
	movq	200(%rsp), %rdx         # 8-byte Reload
	movq	344(%rsp), %rcx         # 8-byte Reload
	movq	216(%rsp), %r8          # 8-byte Reload
	movq	224(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	328(%rsp), %rdi         # 8-byte Reload
	movq	152(%rsp), %rsi         # 8-byte Reload
	movq	184(%rsp), %rdx         # 8-byte Reload
	movq	320(%rsp), %rcx         # 8-byte Reload
	movq	480(%rsp), %r8          # 8-byte Reload
	movl	172(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	192(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	movq	120(%rsp), %rdx         # 8-byte Reload
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	336(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	200(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	vmovsd	72(%rsp), %xmm0         # 8-byte Reload
	movq	200(%rsp), %rdx         # 8-byte Reload
	movq	344(%rsp), %rcx         # 8-byte Reload
	movq	216(%rsp), %r8          # 8-byte Reload
	movq	224(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	10968(%rsp), %rax       # 8-byte Reload
	movq	600(%rsp), %rcx         # 8-byte Reload
	vmovsd	72(%rsp), %xmm0         # 8-byte Reload
	vmovsd	%xmm0, (%rax,%rcx,8)
	.loc	2 890 0                 # eispack.c:890:0
	movq	432(%rsp), %rdi         # 8-byte Reload
	movq	152(%rsp), %rsi         # 8-byte Reload
	movq	184(%rsp), %rdx         # 8-byte Reload
	movq	360(%rsp), %rcx         # 8-byte Reload
	movq	544(%rsp), %r8          # 8-byte Reload
	movl	172(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	200(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	movq	8888(%rsp), %rdx        # 8-byte Reload
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	352(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	8888(%rsp), %rax        # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	160(%rsp), %rdi         # 8-byte Reload
	movq	592(%rsp), %rsi         # 8-byte Reload
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	360(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 68(%rsp)          # 4-byte Spill
	callq	trace_logger_log_int
	movq	432(%rsp), %rdi         # 8-byte Reload
	movq	152(%rsp), %rsi         # 8-byte Reload
	movq	184(%rsp), %rdx         # 8-byte Reload
	movq	384(%rsp), %rcx         # 8-byte Reload
	movq	520(%rsp), %r8          # 8-byte Reload
	movl	172(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	68(%rsp), %r9d          # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	192(%rsp), %rdi         # 8-byte Reload
	movq	592(%rsp), %rsi         # 8-byte Reload
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	360(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	104(%rsp), %ebp         # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	200(%rsp), %rdi         # 8-byte Reload
	movq	592(%rsp), %rsi         # 8-byte Reload
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	368(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	104(%rsp), %ebp         # 4-byte Reload
	movl	68(%rsp), %r12d         # 4-byte Reload
	addl	%r12d, %ebp
	movl	%ebp, %esi
	movl	%esi, %edx
	movq	160(%rsp), %rdi         # 8-byte Reload
	movq	592(%rsp), %rsi         # 8-byte Reload
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	384(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%ebp, 64(%rsp)          # 4-byte Spill
	callq	trace_logger_log_int
	movq	432(%rsp), %rdi         # 8-byte Reload
	movq	152(%rsp), %rsi         # 8-byte Reload
	movq	184(%rsp), %rdx         # 8-byte Reload
	movq	400(%rsp), %rcx         # 8-byte Reload
	movq	376(%rsp), %r8          # 8-byte Reload
	movl	172(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	64(%rsp), %r9d          # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	200(%rsp), %rdi         # 8-byte Reload
	movq	592(%rsp), %rsi         # 8-byte Reload
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	384(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	64(%rsp), %ebp          # 4-byte Reload
	movslq	%ebp, %rax
	movq	160(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	400(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 56(%rsp)          # 8-byte Spill
	callq	trace_logger_log_int
	movq	432(%rsp), %rdi         # 8-byte Reload
	movq	152(%rsp), %rsi         # 8-byte Reload
	movq	184(%rsp), %rdx         # 8-byte Reload
	movq	504(%rsp), %rcx         # 8-byte Reload
	movq	392(%rsp), %r8          # 8-byte Reload
	movl	172(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	192(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	movq	56(%rsp), %rdx          # 8-byte Reload
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	400(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	200(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	movq	11104(%rsp), %rdx       # 8-byte Reload
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	408(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	56(%rsp), %rax          # 8-byte Reload
	shlq	$3, %rax
	movq	11104(%rsp), %rcx       # 8-byte Reload
	addq	%rax, %rcx
	movq	160(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	movq	%rcx, %rdx
	movq	200(%rsp), %rax         # 8-byte Reload
	movq	%rcx, 48(%rsp)          # 8-byte Spill
	movq	%rax, %rcx
	movq	504(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	432(%rsp), %rdi         # 8-byte Reload
	movq	152(%rsp), %rsi         # 8-byte Reload
	movq	184(%rsp), %rdx         # 8-byte Reload
	movq	448(%rsp), %rcx         # 8-byte Reload
	movq	416(%rsp), %r8          # 8-byte Reload
	movl	172(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	200(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	movq	48(%rsp), %rdx          # 8-byte Reload
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	504(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	11104(%rsp), %rax       # 8-byte Reload
	movq	56(%rsp), %rcx          # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
	movq	160(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	vmovsd	%xmm0, 40(%rsp)         # 8-byte Spill
	movq	200(%rsp), %rdx         # 8-byte Reload
	movq	448(%rsp), %rcx         # 8-byte Reload
	movq	216(%rsp), %r8          # 8-byte Reload
	movq	224(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	432(%rsp), %rdi         # 8-byte Reload
	movq	152(%rsp), %rsi         # 8-byte Reload
	movq	184(%rsp), %rdx         # 8-byte Reload
	movq	424(%rsp), %rcx         # 8-byte Reload
	movq	480(%rsp), %r8          # 8-byte Reload
	movl	172(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	192(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	movq	80(%rsp), %rdx          # 8-byte Reload
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	440(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	200(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	vmovsd	40(%rsp), %xmm0         # 8-byte Reload
	movq	200(%rsp), %rdx         # 8-byte Reload
	movq	448(%rsp), %rcx         # 8-byte Reload
	movq	216(%rsp), %r8          # 8-byte Reload
	movq	224(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	11104(%rsp), %rax       # 8-byte Reload
	movq	88(%rsp), %rcx          # 8-byte Reload
	vmovsd	40(%rsp), %xmm0         # 8-byte Reload
	vmovsd	%xmm0, (%rax,%rcx,8)
	.loc	2 891 0                 # eispack.c:891:0
	movq	496(%rsp), %rdi         # 8-byte Reload
	movq	152(%rsp), %rsi         # 8-byte Reload
	movq	184(%rsp), %rdx         # 8-byte Reload
	movq	512(%rsp), %rcx         # 8-byte Reload
	movq	456(%rsp), %r8          # 8-byte Reload
	movl	172(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	192(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	vmovsd	112(%rsp), %xmm0        # 8-byte Reload
	movq	200(%rsp), %rdx         # 8-byte Reload
	movq	464(%rsp), %rcx         # 8-byte Reload
	movq	216(%rsp), %r8          # 8-byte Reload
	movq	224(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	200(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	vmovsd	8488(%rsp), %xmm0       # 8-byte Reload
	movq	200(%rsp), %rdx         # 8-byte Reload
	movq	472(%rsp), %rcx         # 8-byte Reload
	movq	216(%rsp), %r8          # 8-byte Reload
	movq	224(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	8488(%rsp), %xmm0       # 8-byte Reload
	vmovsd	112(%rsp), %xmm1        # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	160(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	200(%rsp), %rdx         # 8-byte Reload
	movq	512(%rsp), %rcx         # 8-byte Reload
	movq	216(%rsp), %r8          # 8-byte Reload
	movq	224(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 32(%rsp)         # 8-byte Spill
	callq	trace_logger_log_double
	movq	496(%rsp), %rdi         # 8-byte Reload
	movq	152(%rsp), %rsi         # 8-byte Reload
	movq	184(%rsp), %rdx         # 8-byte Reload
	movq	488(%rsp), %rcx         # 8-byte Reload
	movq	480(%rsp), %r8          # 8-byte Reload
	movl	172(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	192(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	movq	48(%rsp), %rdx          # 8-byte Reload
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	504(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	200(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	vmovsd	32(%rsp), %xmm0         # 8-byte Reload
	movq	200(%rsp), %rdx         # 8-byte Reload
	movq	512(%rsp), %rcx         # 8-byte Reload
	movq	216(%rsp), %r8          # 8-byte Reload
	movq	224(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	11104(%rsp), %rax       # 8-byte Reload
	movq	56(%rsp), %rcx          # 8-byte Reload
	vmovsd	32(%rsp), %xmm0         # 8-byte Reload
	vmovsd	%xmm0, (%rax,%rcx,8)
.Ltmp356:
	.loc	2 886 0                 # eispack.c:886:0
	movq	144(%rsp), %rdi         # 8-byte Reload
	movq	152(%rsp), %rsi         # 8-byte Reload
	movq	184(%rsp), %rdx         # 8-byte Reload
	movq	552(%rsp), %rcx         # 8-byte Reload
	movq	520(%rsp), %r8          # 8-byte Reload
	movl	172(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	192(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	movq	200(%rsp), %rdx         # 8-byte Reload
	movq	216(%rsp), %rcx         # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	200(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	movq	600(%rsp), %rdx         # 8-byte Reload
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	536(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	600(%rsp), %rax         # 8-byte Reload
	addq	$1, %rax
	movq	160(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	552(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 24(%rsp)          # 8-byte Spill
	callq	trace_logger_log_int
	movq	144(%rsp), %rdi         # 8-byte Reload
	movq	152(%rsp), %rsi         # 8-byte Reload
	movq	184(%rsp), %rdx         # 8-byte Reload
	movq	584(%rsp), %rcx         # 8-byte Reload
	movq	544(%rsp), %r8          # 8-byte Reload
	movl	172(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	200(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	movq	24(%rsp), %rdx          # 8-byte Reload
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	552(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	24(%rsp), %rax          # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	160(%rsp), %rdi         # 8-byte Reload
	movq	592(%rsp), %rsi         # 8-byte Reload
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	584(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 20(%rsp)          # 4-byte Spill
	callq	trace_logger_log_int
	movq	144(%rsp), %rdi         # 8-byte Reload
	movq	152(%rsp), %rsi         # 8-byte Reload
	movq	184(%rsp), %rdx         # 8-byte Reload
	movq	208(%rsp), %rcx         # 8-byte Reload
	movq	568(%rsp), %r8          # 8-byte Reload
	movl	172(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	8900(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	192(%rsp), %rdi         # 8-byte Reload
	movq	592(%rsp), %rsi         # 8-byte Reload
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	576(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	20(%rsp), %ebp          # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	200(%rsp), %rdi         # 8-byte Reload
	movq	592(%rsp), %rsi         # 8-byte Reload
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	584(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	20(%rsp), %ebp          # 4-byte Reload
	movl	8900(%rsp), %r12d       # 4-byte Reload
	cmpl	%r12d, %ebp
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	160(%rsp), %rdi         # 8-byte Reload
	movq	200(%rsp), %rsi         # 8-byte Reload
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	208(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 19(%rsp)           # 1-byte Spill
	callq	trace_logger_log_int
	movq	144(%rsp), %rdi         # 8-byte Reload
	movq	152(%rsp), %rsi         # 8-byte Reload
	movq	184(%rsp), %rdx         # 8-byte Reload
	movq	176(%rsp), %rcx         # 8-byte Reload
	movq	192(%rsp), %r8          # 8-byte Reload
	movl	172(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	136(%rsp), %rdi         # 8-byte Reload
	movq	216(%rsp), %rsi         # 8-byte Reload
	movq	216(%rsp), %rdx         # 8-byte Reload
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	128(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	192(%rsp), %rdi         # 8-byte Reload
	movq	216(%rsp), %rsi         # 8-byte Reload
	movq	216(%rsp), %rdx         # 8-byte Reload
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	184(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	19(%rsp), %al           # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	200(%rsp), %rdi         # 8-byte Reload
	movq	200(%rsp), %rsi         # 8-byte Reload
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	208(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	19(%rsp), %al           # 1-byte Reload
	testb	$1, %al
	movq	24(%rsp), %rcx          # 8-byte Reload
	movq	%rcx, 608(%rsp)         # 8-byte Spill
	jne	.LBB9_15
	jmp	.LBB9_35
.Ltmp357:
.LBB9_36:                               # %._crit_edge52
	movabsq	$894, %rdi              # imm = 0x37E
	leaq	.L.str57131, %rsi
	leaq	.L.str72146, %rdx
	leaq	.L.str369, %rcx
	movabsq	$1, %r8
	movl	$0, %r9d
	movl	$1, %eax
	.loc	2 894 0                 # eispack.c:894:0
	movl	$1, (%rsp)
	movl	%eax, 12(%rsp)          # 4-byte Spill
	callq	trace_logger_log0
	addq	$11128, %rsp            # imm = 0x2B78
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
.Ltmp358:
.Ltmp359:
	.size	tred1, .Ltmp359-tred1
.Lfunc_end9:
	.cfi_endproc

	.section	.rodata.cst16,"aM",@progbits,16
	.align	16
.LCPI10_0:
	.quad	9223372036854775807     # double nan
	.quad	9223372036854775807     # double nan
	.section	.rodata.cst8,"aM",@progbits,8
	.align	8
.LCPI10_1:
	.quad	4372995238176751616     # double 2.2204460492503131E-16
.LCPI10_2:
	.quad	4607182418800017408     # double 1
.LCPI10_3:
	.quad	4611686018427387904     # double 2
	.text
	.globl	tqlrat
	.align	16, 0x90
	.type	tqlrat,@function
tqlrat:                                 # @tqlrat
	.cfi_startproc
.Lfunc_begin10:
	.loc	2 433 0                 # eispack.c:433:0
# BB#0:
	pushq	%rbp
.Ltmp367:
	.cfi_def_cfa_offset 16
	pushq	%r15
.Ltmp368:
	.cfi_def_cfa_offset 24
	pushq	%r14
.Ltmp369:
	.cfi_def_cfa_offset 32
	pushq	%r13
.Ltmp370:
	.cfi_def_cfa_offset 40
	pushq	%r12
.Ltmp371:
	.cfi_def_cfa_offset 48
	pushq	%rbx
.Ltmp372:
	.cfi_def_cfa_offset 56
	subq	$9336, %rsp             # imm = 0x2478
.Ltmp373:
	.cfi_def_cfa_offset 9392
.Ltmp374:
	.cfi_offset %rbx, -56
.Ltmp375:
	.cfi_offset %r12, -48
.Ltmp376:
	.cfi_offset %r13, -40
.Ltmp377:
	.cfi_offset %r14, -32
.Ltmp378:
	.cfi_offset %r15, -24
.Ltmp379:
	.cfi_offset %rbp, -16
	movl	$0, %eax
	movabsq	$1, %rcx
	leaq	.L.str579, %r8
	movabsq	$0, %r9
	leaq	.L.str781, %r10
	movabsq	$2, %r11
	leaq	.L.str372, %rbx
	movabsq	$3, %r14
	leaq	.L.str371, %r15
	movabsq	$454, %r12              # imm = 0x1C6
	leaq	.L.str62136, %r13
	leaq	.L.str478, %rbp
	movq	%rcx, 9328(%rsp)        # 8-byte Spill
	leaq	.L.str370, %rcx
	movl	%eax, 9324(%rsp)        # 4-byte Spill
	movl	$1, %eax
	movq	%rcx, 9312(%rsp)        # 8-byte Spill
	movabsq	$19134, %rcx            # imm = 0x4ABE
	movq	%rcx, 9304(%rsp)        # 8-byte Spill
	movabsq	$32, %rcx
	movq	%rcx, 9296(%rsp)        # 8-byte Spill
	leaq	.L.str51125, %rcx
	movq	%rcx, 9288(%rsp)        # 8-byte Spill
	leaq	.L.str1488, %rcx
	movq	%rcx, 9280(%rsp)        # 8-byte Spill
	movabsq	$46, %rcx
	movq	%rcx, 9272(%rsp)        # 8-byte Spill
	movabsq	$24601, %rcx            # imm = 0x6019
	movq	%rcx, 9264(%rsp)        # 8-byte Spill
	movabsq	$64, %rcx
	movq	%rcx, 9256(%rsp)        # 8-byte Spill
	leaq	.L.str160, %rcx
	movq	%rcx, 9248(%rsp)        # 8-byte Spill
	leaq	.L.str82, %rcx
	.loc	2 366 0 prologue_end    # eispack.c:366:0
.Ltmp380:
	movl	%eax, 9244(%rsp)        # 4-byte Spill
	movl	%edi, %eax
                                        # kill: RAX<def> EAX<kill>
	movq	%rax, 9232(%rsp)        # 8-byte Spill
	movq	9264(%rsp), %rax        # 8-byte Reload
	movl	%edi, 9228(%rsp)        # 4-byte Spill
	movq	%rax, %rdi
	movq	9296(%rsp), %rax        # 8-byte Reload
	movq	%rsi, 9216(%rsp)        # 8-byte Spill
	movq	%rax, %rsi
	movq	9232(%rsp), %rax        # 8-byte Reload
	movq	%rdx, 9208(%rsp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	9328(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 9200(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	9288(%rsp), %rax        # 8-byte Reload
	movq	%r8, 9192(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 9184(%rsp)         # 8-byte Spill
	movq	%r10, (%rsp)
	movq	%r13, 9176(%rsp)        # 8-byte Spill
	movq	%r12, 9168(%rsp)        # 8-byte Spill
	movq	%rbp, 9160(%rsp)        # 8-byte Spill
	movq	%r15, 9152(%rsp)        # 8-byte Spill
	movq	%r14, 9144(%rsp)        # 8-byte Spill
	movq	%rbx, 9136(%rsp)        # 8-byte Spill
	movq	%r10, 9128(%rsp)        # 8-byte Spill
	movq	%r11, 9120(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	9264(%rsp), %rdi        # 8-byte Reload
	movq	9256(%rsp), %rsi        # 8-byte Reload
	movq	9216(%rsp), %rdx        # 8-byte Reload
	movq	9328(%rsp), %rcx        # 8-byte Reload
	movq	9200(%rsp), %r8         # 8-byte Reload
	movq	9184(%rsp), %r9         # 8-byte Reload
	movq	9128(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	9264(%rsp), %rdi        # 8-byte Reload
	movq	9256(%rsp), %rsi        # 8-byte Reload
	movq	9208(%rsp), %rdx        # 8-byte Reload
	movq	9328(%rsp), %rcx        # 8-byte Reload
	movq	9248(%rsp), %r8         # 8-byte Reload
	movq	9184(%rsp), %r9         # 8-byte Reload
	movq	9128(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	#DEBUG_VALUE: tqlrat:n <- [RSP+9228]
	#DEBUG_VALUE: tqlrat:d <- [RSP+9216]
	#DEBUG_VALUE: tqlrat:e2 <- [RSP+9208]
.Ltmp381:
	#DEBUG_VALUE: tqlrat:ierr <- 0
	.loc	2 454 0                 # eispack.c:454:0
	movq	9168(%rsp), %rdi        # 8-byte Reload
	movq	9176(%rsp), %rsi        # 8-byte Reload
	movq	9160(%rsp), %rdx        # 8-byte Reload
	movq	9192(%rsp), %rcx        # 8-byte Reload
	movq	9272(%rsp), %r8         # 8-byte Reload
	movl	9324(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	9120(%rsp), %rdi        # 8-byte Reload
	movq	9296(%rsp), %rsi        # 8-byte Reload
	movq	9328(%rsp), %rdx        # 8-byte Reload
	movq	9184(%rsp), %rcx        # 8-byte Reload
	movq	9280(%rsp), %r8         # 8-byte Reload
	movq	9184(%rsp), %r9         # 8-byte Reload
	movq	9128(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	9228(%rsp), %esi        # 4-byte Reload
	movl	%esi, %esi
	movl	%esi, %edx
	movq	9328(%rsp), %rdi        # 8-byte Reload
	movq	9296(%rsp), %rsi        # 8-byte Reload
	movq	9328(%rsp), %rcx        # 8-byte Reload
	movq	9288(%rsp), %r8         # 8-byte Reload
	movq	9184(%rsp), %r9         # 8-byte Reload
	movq	9128(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	9228(%rsp), %esi        # 4-byte Reload
	cmpl	$1, %esi
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	9304(%rsp), %rdi        # 8-byte Reload
	movq	9328(%rsp), %rsi        # 8-byte Reload
	movq	9328(%rsp), %rcx        # 8-byte Reload
	movq	9192(%rsp), %r8         # 8-byte Reload
	movq	9184(%rsp), %r9         # 8-byte Reload
	movq	9128(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 9119(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	9168(%rsp), %rdi        # 8-byte Reload
	movq	9176(%rsp), %rsi        # 8-byte Reload
	movq	9160(%rsp), %rdx        # 8-byte Reload
	movq	9312(%rsp), %rcx        # 8-byte Reload
	movq	9120(%rsp), %r8         # 8-byte Reload
	movl	9324(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	9144(%rsp), %rdi        # 8-byte Reload
	movq	9184(%rsp), %rsi        # 8-byte Reload
	movq	9184(%rsp), %rdx        # 8-byte Reload
	movq	9328(%rsp), %rcx        # 8-byte Reload
	movq	9152(%rsp), %r8         # 8-byte Reload
	movq	9184(%rsp), %r9         # 8-byte Reload
	movq	9128(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	9120(%rsp), %rdi        # 8-byte Reload
	movq	9184(%rsp), %rsi        # 8-byte Reload
	movq	9184(%rsp), %rdx        # 8-byte Reload
	movq	9328(%rsp), %rcx        # 8-byte Reload
	movq	9136(%rsp), %r8         # 8-byte Reload
	movq	9184(%rsp), %r9         # 8-byte Reload
	movq	9128(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	9119(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, %edx
	movq	9328(%rsp), %rdi        # 8-byte Reload
	movq	9328(%rsp), %rsi        # 8-byte Reload
	movq	9328(%rsp), %rcx        # 8-byte Reload
	movq	9192(%rsp), %r8         # 8-byte Reload
	movq	9184(%rsp), %r9         # 8-byte Reload
	movq	9128(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	9119(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	movl	9324(%rsp), %eax        # 4-byte Reload
	movl	%eax, 9112(%rsp)        # 4-byte Spill
	jne	.LBB10_28
.Ltmp382:
# BB#1:                                 # %.preheader34
	movabsq	$1, %rax
	leaq	.L.str983, %rcx
	movabsq	$0, %rdx
	leaq	.L.str781, %rsi
	movabsq	$2, %rdi
	leaq	.L.str375, %r8
	movabsq	$3, %r9
	leaq	.L.str374, %r10
	movabsq	$459, %r11              # imm = 0x1CB
	leaq	.L.str62136, %rbx
	leaq	.L.str372, %r14
	leaq	.L.str373, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 9104(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 9096(%rsp)        # 8-byte Spill
	leaq	.L.str51125, %rax
	movq	%rax, 9088(%rsp)        # 8-byte Spill
	leaq	.L.str1488, %rax
	movq	%rax, 9080(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	.loc	2 459 0                 # eispack.c:459:0
.Ltmp383:
	movq	%rdi, 9072(%rsp)        # 8-byte Spill
	movq	%r11, %rdi
	movq	%rsi, 9064(%rsp)        # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, 9056(%rsp)        # 8-byte Spill
	movq	%r14, %rdx
	movq	%rcx, 9048(%rsp)        # 8-byte Spill
	movq	%r8, 9040(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 9032(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r14, 9024(%rsp)        # 8-byte Spill
	movq	%r15, 9016(%rsp)        # 8-byte Spill
	movl	%ebp, 9012(%rsp)        # 4-byte Spill
	movl	%r12d, 9008(%rsp)       # 4-byte Spill
	movq	%r13, 9000(%rsp)        # 8-byte Spill
	movq	%rbx, 8992(%rsp)        # 8-byte Spill
	movq	%r11, 8984(%rsp)        # 8-byte Spill
	movq	%r10, 8976(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	9072(%rsp), %rdi        # 8-byte Reload
	movq	9096(%rsp), %rsi        # 8-byte Reload
	movq	9104(%rsp), %rdx        # 8-byte Reload
	movq	9056(%rsp), %rcx        # 8-byte Reload
	movq	9080(%rsp), %r8         # 8-byte Reload
	movq	9056(%rsp), %r9         # 8-byte Reload
	movq	9064(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	9228(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	9104(%rsp), %rdi        # 8-byte Reload
	movq	9096(%rsp), %rsi        # 8-byte Reload
	movq	9104(%rsp), %rcx        # 8-byte Reload
	movq	9088(%rsp), %r8         # 8-byte Reload
	movq	9056(%rsp), %r9         # 8-byte Reload
	movq	9064(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	9228(%rsp), %ebp        # 4-byte Reload
	cmpl	$1, %ebp
	setg	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %r12d
	movl	%r12d, %edx
	movq	9000(%rsp), %rdi        # 8-byte Reload
	movq	9104(%rsp), %rsi        # 8-byte Reload
	movq	9104(%rsp), %rcx        # 8-byte Reload
	movq	9048(%rsp), %r8         # 8-byte Reload
	movq	9056(%rsp), %r9         # 8-byte Reload
	movq	9064(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 8975(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	8984(%rsp), %rdi        # 8-byte Reload
	movq	8992(%rsp), %rsi        # 8-byte Reload
	movq	9024(%rsp), %rdx        # 8-byte Reload
	movq	9016(%rsp), %rcx        # 8-byte Reload
	movq	9072(%rsp), %r8         # 8-byte Reload
	movl	9012(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	9032(%rsp), %rdi        # 8-byte Reload
	movq	9056(%rsp), %rsi        # 8-byte Reload
	movq	9056(%rsp), %rdx        # 8-byte Reload
	movq	9104(%rsp), %rcx        # 8-byte Reload
	movq	8976(%rsp), %r8         # 8-byte Reload
	movq	9056(%rsp), %r9         # 8-byte Reload
	movq	9064(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	9072(%rsp), %rdi        # 8-byte Reload
	movq	9056(%rsp), %rsi        # 8-byte Reload
	movq	9056(%rsp), %rdx        # 8-byte Reload
	movq	9104(%rsp), %rcx        # 8-byte Reload
	movq	9040(%rsp), %r8         # 8-byte Reload
	movq	9056(%rsp), %r9         # 8-byte Reload
	movq	9064(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	8975(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	9104(%rsp), %rdi        # 8-byte Reload
	movq	9104(%rsp), %rsi        # 8-byte Reload
	movq	9104(%rsp), %rcx        # 8-byte Reload
	movq	9048(%rsp), %r8         # 8-byte Reload
	movq	9056(%rsp), %r9         # 8-byte Reload
	movq	9064(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	8975(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	movq	9104(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 8960(%rsp)        # 8-byte Spill
	jne	.LBB10_3
.Ltmp384:
# BB#2:                                 # %._crit_edge37.thread
	movl	$0, %eax
	movabsq	$1, %rcx
	movabsq	$0, %rdx
	leaq	.L.str371, %r8
	leaq	.L.str781, %rsi
	movabsq	$468, %rdi              # imm = 0x1D4
	leaq	.L.str62136, %r9
	leaq	.L.str375, %r10
	leaq	.L.str377151, %r11
	movabsq	$2, %rbx
	movl	$1, %ebp
	vxorps	%xmm0, %xmm0, %xmm0
	movabsq	$64, %r14
	leaq	.L.str1488, %r15
	leaq	.L.str61135, %r12
	movabsq	$466, %r13              # imm = 0x1D2
	movq	%rcx, 8952(%rsp)        # 8-byte Spill
	leaq	.L.str376, %rcx
	movq	%rcx, 8944(%rsp)        # 8-byte Spill
	movabsq	$28, %rcx
	movq	%rcx, 8936(%rsp)        # 8-byte Spill
	movabsq	$19134, %rcx            # imm = 0x4ABE
	movq	%rcx, 8928(%rsp)        # 8-byte Spill
	leaq	.L.str160, %rcx
	movq	%rcx, 8920(%rsp)        # 8-byte Spill
	leaq	.L.str1387, %rcx
	movq	%rcx, 8912(%rsp)        # 8-byte Spill
	movabsq	$29, %rcx
	movq	%rcx, 8904(%rsp)        # 8-byte Spill
	movabsq	$32, %rcx
	movq	%rcx, 8896(%rsp)        # 8-byte Spill
	leaq	.L.str1185, %rcx
	movq	%rcx, 8888(%rsp)        # 8-byte Spill
	movabsq	$35, %rcx
	movq	%rcx, 8880(%rsp)        # 8-byte Spill
	leaq	.L.str51125, %rcx
	movq	%rcx, 8872(%rsp)        # 8-byte Spill
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	movq	%rcx, 8864(%rsp)        # 8-byte Spill
	movabsq	$8, %rcx
.Ltmp385:
	#DEBUG_VALUE: tqlrat:f <- 0.000000e+00
	#DEBUG_VALUE: tqlrat:t <- 0.000000e+00
	.loc	2 466 0                 # eispack.c:466:0
	movq	%rdi, 8856(%rsp)        # 8-byte Spill
	movq	%r13, %rdi
	movq	%rsi, 8848(%rsp)        # 8-byte Spill
	movq	%r9, %rsi
	movq	%rdx, 8840(%rsp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	%rcx, 8832(%rsp)        # 8-byte Spill
	movq	8888(%rsp), %rcx        # 8-byte Reload
	movq	%r8, 8824(%rsp)         # 8-byte Spill
	movq	8832(%rsp), %r8         # 8-byte Reload
	movq	%r9, 8816(%rsp)         # 8-byte Spill
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movl	%eax, 8812(%rsp)        # 4-byte Spill
	movq	%r14, 8800(%rsp)        # 8-byte Spill
	movq	%r15, 8792(%rsp)        # 8-byte Spill
	vmovsd	%xmm0, 8784(%rsp)       # 8-byte Spill
	movq	%r12, 8776(%rsp)        # 8-byte Spill
	movq	%r13, 8768(%rsp)        # 8-byte Spill
	movl	%ebp, 8764(%rsp)        # 4-byte Spill
	movq	%r10, 8752(%rsp)        # 8-byte Spill
	movq	%r11, 8744(%rsp)        # 8-byte Spill
	movq	%rbx, 8736(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	8736(%rsp), %rdi        # 8-byte Reload
	movq	8896(%rsp), %rsi        # 8-byte Reload
	movq	8864(%rsp), %rdx        # 8-byte Reload
	movq	8840(%rsp), %rcx        # 8-byte Reload
	movq	8792(%rsp), %r8         # 8-byte Reload
	movq	8840(%rsp), %r9         # 8-byte Reload
	movq	8848(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	9228(%rsp), %eax        # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	8952(%rsp), %rdi        # 8-byte Reload
	movq	8896(%rsp), %rsi        # 8-byte Reload
	movq	8952(%rsp), %rcx        # 8-byte Reload
	movq	8872(%rsp), %r8         # 8-byte Reload
	movq	8840(%rsp), %r9         # 8-byte Reload
	movq	8848(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	9228(%rsp), %eax        # 4-byte Reload
	addl	$4294967295, %eax       # imm = 0xFFFFFFFF
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	8928(%rsp), %rdi        # 8-byte Reload
	movq	8896(%rsp), %rsi        # 8-byte Reload
	movq	8952(%rsp), %rcx        # 8-byte Reload
	movq	8888(%rsp), %r8         # 8-byte Reload
	movq	8840(%rsp), %r9         # 8-byte Reload
	movq	8848(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, 8732(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	8768(%rsp), %rdi        # 8-byte Reload
	movq	8816(%rsp), %rsi        # 8-byte Reload
	movq	8752(%rsp), %rdx        # 8-byte Reload
	movq	8912(%rsp), %rcx        # 8-byte Reload
	movq	8880(%rsp), %r8         # 8-byte Reload
	movl	8812(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	8732(%rsp), %eax        # 4-byte Reload
	movl	%eax, %r9d
	movl	%r9d, %edx
	movq	8952(%rsp), %rdi        # 8-byte Reload
	movq	8896(%rsp), %rsi        # 8-byte Reload
	movq	8952(%rsp), %rcx        # 8-byte Reload
	movq	8888(%rsp), %r8         # 8-byte Reload
	movq	8840(%rsp), %r9         # 8-byte Reload
	movq	8848(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	8732(%rsp), %eax        # 4-byte Reload
	movslq	%eax, %rcx
	movq	8928(%rsp), %rdi        # 8-byte Reload
	movq	8800(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	8952(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 8720(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	8912(%rsp), %r8         # 8-byte Reload
	movq	8840(%rsp), %r9         # 8-byte Reload
	movq	8848(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	8768(%rsp), %rdi        # 8-byte Reload
	movq	8816(%rsp), %rsi        # 8-byte Reload
	movq	8752(%rsp), %rdx        # 8-byte Reload
	movq	8776(%rsp), %rcx        # 8-byte Reload
	movq	8904(%rsp), %r8         # 8-byte Reload
	movl	8812(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	8736(%rsp), %rdi        # 8-byte Reload
	movq	8800(%rsp), %rsi        # 8-byte Reload
	movq	8720(%rsp), %rdx        # 8-byte Reload
	movq	8952(%rsp), %rcx        # 8-byte Reload
	movq	8912(%rsp), %r8         # 8-byte Reload
	movq	8840(%rsp), %r9         # 8-byte Reload
	movq	8848(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	8952(%rsp), %rdi        # 8-byte Reload
	movq	8800(%rsp), %rsi        # 8-byte Reload
	movq	9208(%rsp), %rdx        # 8-byte Reload
	movq	8952(%rsp), %rcx        # 8-byte Reload
	movq	8920(%rsp), %r8         # 8-byte Reload
	movq	8840(%rsp), %r9         # 8-byte Reload
	movq	8848(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	8720(%rsp), %rcx        # 8-byte Reload
	shlq	$3, %rcx
	movq	9208(%rsp), %rdx        # 8-byte Reload
	addq	%rcx, %rdx
	movq	8928(%rsp), %rdi        # 8-byte Reload
	movq	8800(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 8712(%rsp)        # 8-byte Spill
	movq	8952(%rsp), %rcx        # 8-byte Reload
	movq	8776(%rsp), %r8         # 8-byte Reload
	movq	8840(%rsp), %r9         # 8-byte Reload
	movq	8848(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	8768(%rsp), %rdi        # 8-byte Reload
	movq	8816(%rsp), %rsi        # 8-byte Reload
	movq	8752(%rsp), %rdx        # 8-byte Reload
	movq	8944(%rsp), %rcx        # 8-byte Reload
	movq	8936(%rsp), %r8         # 8-byte Reload
	movl	8812(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	8736(%rsp), %rdi        # 8-byte Reload
	movq	8800(%rsp), %rsi        # 8-byte Reload
	movq	8712(%rsp), %rdx        # 8-byte Reload
	movq	8952(%rsp), %rcx        # 8-byte Reload
	movq	8776(%rsp), %r8         # 8-byte Reload
	movq	8840(%rsp), %r9         # 8-byte Reload
	movq	8848(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	8952(%rsp), %rdi        # 8-byte Reload
	movq	8800(%rsp), %rsi        # 8-byte Reload
	vmovsd	8784(%rsp), %xmm0       # 8-byte Reload
	movq	8840(%rsp), %rdx        # 8-byte Reload
	movq	8792(%rsp), %rcx        # 8-byte Reload
	movq	8840(%rsp), %r8         # 8-byte Reload
	movq	8848(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	9208(%rsp), %rcx        # 8-byte Reload
	movq	8720(%rsp), %rdx        # 8-byte Reload
	vmovsd	8784(%rsp), %xmm0       # 8-byte Reload
	vmovsd	%xmm0, (%rcx,%rdx,8)
.Ltmp386:
	#DEBUG_VALUE: tqlrat:l <- 0
	.loc	2 468 0                 # eispack.c:468:0
	movq	8856(%rsp), %rdi        # 8-byte Reload
	movq	8816(%rsp), %rsi        # 8-byte Reload
	movq	8752(%rsp), %rdx        # 8-byte Reload
	movq	8744(%rsp), %rcx        # 8-byte Reload
	movq	8736(%rsp), %r8         # 8-byte Reload
	movl	8812(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	8952(%rsp), %rdi        # 8-byte Reload
	movq	8840(%rsp), %rsi        # 8-byte Reload
	movq	8840(%rsp), %rdx        # 8-byte Reload
	movq	8952(%rsp), %rcx        # 8-byte Reload
	movq	8824(%rsp), %r8         # 8-byte Reload
	movq	8840(%rsp), %r9         # 8-byte Reload
	movq	8848(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	8812(%rsp), %eax        # 4-byte Reload
	movl	%eax, 9112(%rsp)        # 4-byte Spill
	jmp	.LBB10_28
.Ltmp387:
.LBB10_3:                               # %.lr.ph36
                                        # =>This Inner Loop Header: Depth=1
	movq	8960(%rsp), %rax        # 8-byte Reload
	movabsq	$1, %rcx
	leaq	.L.str173, %rdx
	movabsq	$0, %rsi
	leaq	.L.str781, %rdi
	movabsq	$2, %r8
	leaq	.L.str374, %r9
	movabsq	$3, %r10
	leaq	.L.str380, %r11
	movabsq	$459, %rbx              # imm = 0x1CB
	leaq	.L.str62136, %r14
	leaq	.L.str379, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 8704(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 8696(%rsp)        # 8-byte Spill
	leaq	.L.str172, %rax
	movq	%rax, 8688(%rsp)        # 8-byte Spill
	leaq	.L.str51125, %rax
	movq	%rax, 8680(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 8672(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 8664(%rsp)        # 8-byte Spill
	leaq	.L.str116, %rax
	movq	%rax, 8656(%rsp)        # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, 8648(%rsp)        # 8-byte Spill
	leaq	.L.str115, %rax
	movq	%rax, 8640(%rsp)        # 8-byte Spill
	leaq	.L.str1488, %rax
	movq	%rax, 8632(%rsp)        # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, 8624(%rsp)        # 8-byte Spill
	leaq	.L.str2094, %rax
	movq	%rax, 8616(%rsp)        # 8-byte Spill
	leaq	.L.str2296, %rax
	movq	%rax, 8608(%rsp)        # 8-byte Spill
	movabsq	$461, %rax              # imm = 0x1CD
	movq	%rax, 8600(%rsp)        # 8-byte Spill
	leaq	.L.str378, %rax
	movq	%rax, 8592(%rsp)        # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, 8584(%rsp)        # 8-byte Spill
	leaq	.L.str160, %rax
	movq	%rax, 8576(%rsp)        # 8-byte Spill
	leaq	.L.str2195, %rax
	movq	%rax, 8568(%rsp)        # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 8560(%rsp)        # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 8552(%rsp)        # 8-byte Spill
	leaq	.L.str1892, %rax
	movq	%rax, 8544(%rsp)        # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, 8536(%rsp)        # 8-byte Spill
	leaq	.L.str372, %rax
	movq	%rax, 8528(%rsp)        # 8-byte Spill
	movabsq	$48, %rax
	.loc	2 461 0                 # eispack.c:461:0
.Ltmp388:
	movq	%rax, 8520(%rsp)        # 8-byte Spill
	movq	8552(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 8512(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 8504(%rsp)        # 8-byte Spill
	movq	%r14, %rsi
	movq	%rdx, 8496(%rsp)        # 8-byte Spill
	movq	%r9, %rdx
	movq	8640(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 8488(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	8520(%rsp), %rax        # 8-byte Reload
	movq	%r8, 8480(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 8472(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r15, 8464(%rsp)        # 8-byte Spill
	movl	%ebp, 8460(%rsp)        # 4-byte Spill
	movl	%r12d, 8456(%rsp)       # 4-byte Spill
	movq	%r13, 8448(%rsp)        # 8-byte Spill
	movq	%r14, 8440(%rsp)        # 8-byte Spill
	movq	%rbx, 8432(%rsp)        # 8-byte Spill
	movq	%r10, 8424(%rsp)        # 8-byte Spill
	movq	%r11, 8416(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	8480(%rsp), %rdi        # 8-byte Reload
	movq	8664(%rsp), %rsi        # 8-byte Reload
	movq	8488(%rsp), %rdx        # 8-byte Reload
	movq	8504(%rsp), %rcx        # 8-byte Reload
	movq	8632(%rsp), %r8         # 8-byte Reload
	movq	8488(%rsp), %r9         # 8-byte Reload
	movq	8528(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	8488(%rsp), %rdi        # 8-byte Reload
	movq	8664(%rsp), %rsi        # 8-byte Reload
	movq	8504(%rsp), %rdx        # 8-byte Reload
	movq	8488(%rsp), %rcx        # 8-byte Reload
	movq	8656(%rsp), %r8         # 8-byte Reload
	movq	8488(%rsp), %r9         # 8-byte Reload
	movq	8472(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	8448(%rsp), %rdi        # 8-byte Reload
	movq	8664(%rsp), %rsi        # 8-byte Reload
	movq	8704(%rsp), %rdx        # 8-byte Reload
	movq	8488(%rsp), %rcx        # 8-byte Reload
	movq	8640(%rsp), %r8         # 8-byte Reload
	movq	8504(%rsp), %r9         # 8-byte Reload
	movq	8472(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	8600(%rsp), %rdi        # 8-byte Reload
	movq	8440(%rsp), %rsi        # 8-byte Reload
	movq	8472(%rsp), %rdx        # 8-byte Reload
	movq	8544(%rsp), %rcx        # 8-byte Reload
	movq	8560(%rsp), %r8         # 8-byte Reload
	movl	8460(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	8480(%rsp), %rdi        # 8-byte Reload
	movq	8664(%rsp), %rsi        # 8-byte Reload
	movq	8704(%rsp), %rdx        # 8-byte Reload
	movq	8488(%rsp), %rcx        # 8-byte Reload
	movq	8640(%rsp), %r8         # 8-byte Reload
	movq	8504(%rsp), %r9         # 8-byte Reload
	movq	8512(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	8488(%rsp), %rdi        # 8-byte Reload
	movq	8664(%rsp), %rsi        # 8-byte Reload
	movq	9208(%rsp), %rdx        # 8-byte Reload
	movq	8488(%rsp), %rcx        # 8-byte Reload
	movq	8576(%rsp), %r8         # 8-byte Reload
	movq	8504(%rsp), %r9         # 8-byte Reload
	movq	8512(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	8704(%rsp), %rax        # 8-byte Reload
	shlq	$3, %rax
	movq	9208(%rsp), %rcx        # 8-byte Reload
	addq	%rax, %rcx
	movq	8448(%rsp), %rdi        # 8-byte Reload
	movq	8664(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	8488(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 8408(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	8544(%rsp), %r8         # 8-byte Reload
	movq	8504(%rsp), %r9         # 8-byte Reload
	movq	8512(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	8600(%rsp), %rdi        # 8-byte Reload
	movq	8440(%rsp), %rsi        # 8-byte Reload
	movq	8472(%rsp), %rdx        # 8-byte Reload
	movq	8616(%rsp), %rcx        # 8-byte Reload
	movq	8536(%rsp), %r8         # 8-byte Reload
	movl	8460(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	8488(%rsp), %rdi        # 8-byte Reload
	movq	8664(%rsp), %rsi        # 8-byte Reload
	movq	8408(%rsp), %rdx        # 8-byte Reload
	movq	8488(%rsp), %rcx        # 8-byte Reload
	movq	8544(%rsp), %r8         # 8-byte Reload
	movq	8504(%rsp), %r9         # 8-byte Reload
	movq	8512(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	9208(%rsp), %rax        # 8-byte Reload
	movq	8704(%rsp), %rcx        # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
	movq	8448(%rsp), %rdi        # 8-byte Reload
	movq	8664(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 8400(%rsp)       # 8-byte Spill
	movq	8488(%rsp), %rdx        # 8-byte Reload
	movq	8616(%rsp), %rcx        # 8-byte Reload
	movq	8504(%rsp), %r8         # 8-byte Reload
	movq	8512(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	8600(%rsp), %rdi        # 8-byte Reload
	movq	8440(%rsp), %rsi        # 8-byte Reload
	movq	8472(%rsp), %rdx        # 8-byte Reload
	movq	8568(%rsp), %rcx        # 8-byte Reload
	movq	8624(%rsp), %r8         # 8-byte Reload
	movl	8460(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	8480(%rsp), %rdi        # 8-byte Reload
	movq	8664(%rsp), %rsi        # 8-byte Reload
	movq	8552(%rsp), %rdx        # 8-byte Reload
	movq	8504(%rsp), %rcx        # 8-byte Reload
	movq	8632(%rsp), %r8         # 8-byte Reload
	movq	8504(%rsp), %r9         # 8-byte Reload
	movq	8512(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	8488(%rsp), %rdi        # 8-byte Reload
	movq	8664(%rsp), %rsi        # 8-byte Reload
	movq	8704(%rsp), %rdx        # 8-byte Reload
	movq	8488(%rsp), %rcx        # 8-byte Reload
	movq	8640(%rsp), %r8         # 8-byte Reload
	movq	8504(%rsp), %r9         # 8-byte Reload
	movq	8512(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	8704(%rsp), %rax        # 8-byte Reload
	addq	$-1, %rax
	movq	8448(%rsp), %rdi        # 8-byte Reload
	movq	8664(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	8488(%rsp), %rcx        # 8-byte Reload
	movq	8568(%rsp), %r8         # 8-byte Reload
	movq	8504(%rsp), %r9         # 8-byte Reload
	movq	8512(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 8392(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	8600(%rsp), %rdi        # 8-byte Reload
	movq	8440(%rsp), %rsi        # 8-byte Reload
	movq	8472(%rsp), %rdx        # 8-byte Reload
	movq	8608(%rsp), %rcx        # 8-byte Reload
	movq	8560(%rsp), %r8         # 8-byte Reload
	movl	8460(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	8480(%rsp), %rdi        # 8-byte Reload
	movq	8664(%rsp), %rsi        # 8-byte Reload
	movq	8392(%rsp), %rdx        # 8-byte Reload
	movq	8488(%rsp), %rcx        # 8-byte Reload
	movq	8568(%rsp), %r8         # 8-byte Reload
	movq	8504(%rsp), %r9         # 8-byte Reload
	movq	8512(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	8488(%rsp), %rdi        # 8-byte Reload
	movq	8664(%rsp), %rsi        # 8-byte Reload
	movq	9208(%rsp), %rdx        # 8-byte Reload
	movq	8488(%rsp), %rcx        # 8-byte Reload
	movq	8576(%rsp), %r8         # 8-byte Reload
	movq	8504(%rsp), %r9         # 8-byte Reload
	movq	8512(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	8392(%rsp), %rax        # 8-byte Reload
	shlq	$3, %rax
	movq	9208(%rsp), %rcx        # 8-byte Reload
	addq	%rax, %rcx
	movq	8448(%rsp), %rdi        # 8-byte Reload
	movq	8664(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	8488(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 8384(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	8608(%rsp), %r8         # 8-byte Reload
	movq	8504(%rsp), %r9         # 8-byte Reload
	movq	8512(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	8600(%rsp), %rdi        # 8-byte Reload
	movq	8440(%rsp), %rsi        # 8-byte Reload
	movq	8472(%rsp), %rdx        # 8-byte Reload
	movq	8592(%rsp), %rcx        # 8-byte Reload
	movq	8584(%rsp), %r8         # 8-byte Reload
	movl	8460(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	8480(%rsp), %rdi        # 8-byte Reload
	movq	8664(%rsp), %rsi        # 8-byte Reload
	movq	8384(%rsp), %rdx        # 8-byte Reload
	movq	8488(%rsp), %rcx        # 8-byte Reload
	movq	8608(%rsp), %r8         # 8-byte Reload
	movq	8504(%rsp), %r9         # 8-byte Reload
	movq	8512(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	8488(%rsp), %rdi        # 8-byte Reload
	movq	8664(%rsp), %rsi        # 8-byte Reload
	vmovsd	8400(%rsp), %xmm0       # 8-byte Reload
	movq	8488(%rsp), %rdx        # 8-byte Reload
	movq	8616(%rsp), %rcx        # 8-byte Reload
	movq	8504(%rsp), %r8         # 8-byte Reload
	movq	8512(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	9208(%rsp), %rax        # 8-byte Reload
	movq	8704(%rsp), %rcx        # 8-byte Reload
	vmovsd	8400(%rsp), %xmm0       # 8-byte Reload
	vmovsd	%xmm0, -8(%rax,%rcx,8)
.Ltmp389:
	.loc	2 459 0                 # eispack.c:459:0
	movq	8432(%rsp), %rdi        # 8-byte Reload
	movq	8440(%rsp), %rsi        # 8-byte Reload
	movq	8472(%rsp), %rdx        # 8-byte Reload
	movq	8656(%rsp), %rcx        # 8-byte Reload
	movq	8624(%rsp), %r8         # 8-byte Reload
	movl	8460(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	8480(%rsp), %rdi        # 8-byte Reload
	movq	8664(%rsp), %rsi        # 8-byte Reload
	movq	8488(%rsp), %rdx        # 8-byte Reload
	movq	8504(%rsp), %rcx        # 8-byte Reload
	movq	8632(%rsp), %r8         # 8-byte Reload
	movq	8504(%rsp), %r9         # 8-byte Reload
	movq	8512(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	8488(%rsp), %rdi        # 8-byte Reload
	movq	8664(%rsp), %rsi        # 8-byte Reload
	movq	8704(%rsp), %rdx        # 8-byte Reload
	movq	8488(%rsp), %rcx        # 8-byte Reload
	movq	8640(%rsp), %r8         # 8-byte Reload
	movq	8504(%rsp), %r9         # 8-byte Reload
	movq	8512(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	8704(%rsp), %rax        # 8-byte Reload
	addq	$1, %rax
	movq	8448(%rsp), %rdi        # 8-byte Reload
	movq	8664(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	8488(%rsp), %rcx        # 8-byte Reload
	movq	8656(%rsp), %r8         # 8-byte Reload
	movq	8504(%rsp), %r9         # 8-byte Reload
	movq	8512(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 8376(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	8432(%rsp), %rdi        # 8-byte Reload
	movq	8440(%rsp), %rsi        # 8-byte Reload
	movq	8472(%rsp), %rdx        # 8-byte Reload
	movq	8688(%rsp), %rcx        # 8-byte Reload
	movq	8648(%rsp), %r8         # 8-byte Reload
	movl	8460(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	8488(%rsp), %rdi        # 8-byte Reload
	movq	8664(%rsp), %rsi        # 8-byte Reload
	movq	8376(%rsp), %rdx        # 8-byte Reload
	movq	8488(%rsp), %rcx        # 8-byte Reload
	movq	8656(%rsp), %r8         # 8-byte Reload
	movq	8504(%rsp), %r9         # 8-byte Reload
	movq	8512(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	8376(%rsp), %rax        # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	8448(%rsp), %rdi        # 8-byte Reload
	movq	8696(%rsp), %rsi        # 8-byte Reload
	movq	8488(%rsp), %rcx        # 8-byte Reload
	movq	8688(%rsp), %r8         # 8-byte Reload
	movq	8504(%rsp), %r9         # 8-byte Reload
	movq	8512(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 8372(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	8432(%rsp), %rdi        # 8-byte Reload
	movq	8440(%rsp), %rsi        # 8-byte Reload
	movq	8472(%rsp), %rdx        # 8-byte Reload
	movq	8496(%rsp), %rcx        # 8-byte Reload
	movq	8672(%rsp), %r8         # 8-byte Reload
	movl	8460(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	9228(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	8480(%rsp), %rdi        # 8-byte Reload
	movq	8696(%rsp), %rsi        # 8-byte Reload
	movq	8488(%rsp), %rcx        # 8-byte Reload
	movq	8680(%rsp), %r8         # 8-byte Reload
	movq	8504(%rsp), %r9         # 8-byte Reload
	movq	8512(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	8372(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	8488(%rsp), %rdi        # 8-byte Reload
	movq	8696(%rsp), %rsi        # 8-byte Reload
	movq	8488(%rsp), %rcx        # 8-byte Reload
	movq	8688(%rsp), %r8         # 8-byte Reload
	movq	8504(%rsp), %r9         # 8-byte Reload
	movq	8512(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	8372(%rsp), %ebp        # 4-byte Reload
	movl	9228(%rsp), %r12d       # 4-byte Reload
	cmpl	%r12d, %ebp
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	8448(%rsp), %rdi        # 8-byte Reload
	movq	8488(%rsp), %rsi        # 8-byte Reload
	movq	8488(%rsp), %rcx        # 8-byte Reload
	movq	8496(%rsp), %r8         # 8-byte Reload
	movq	8504(%rsp), %r9         # 8-byte Reload
	movq	8512(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 8371(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	8432(%rsp), %rdi        # 8-byte Reload
	movq	8440(%rsp), %rsi        # 8-byte Reload
	movq	8472(%rsp), %rdx        # 8-byte Reload
	movq	8464(%rsp), %rcx        # 8-byte Reload
	movq	8480(%rsp), %r8         # 8-byte Reload
	movl	8460(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	8424(%rsp), %rdi        # 8-byte Reload
	movq	8504(%rsp), %rsi        # 8-byte Reload
	movq	8504(%rsp), %rdx        # 8-byte Reload
	movq	8488(%rsp), %rcx        # 8-byte Reload
	movq	8416(%rsp), %r8         # 8-byte Reload
	movq	8504(%rsp), %r9         # 8-byte Reload
	movq	8512(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	8480(%rsp), %rdi        # 8-byte Reload
	movq	8504(%rsp), %rsi        # 8-byte Reload
	movq	8504(%rsp), %rdx        # 8-byte Reload
	movq	8488(%rsp), %rcx        # 8-byte Reload
	movq	8472(%rsp), %r8         # 8-byte Reload
	movq	8504(%rsp), %r9         # 8-byte Reload
	movq	8512(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	8371(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	8488(%rsp), %rdi        # 8-byte Reload
	movq	8488(%rsp), %rsi        # 8-byte Reload
	movq	8488(%rsp), %rcx        # 8-byte Reload
	movq	8496(%rsp), %r8         # 8-byte Reload
	movq	8504(%rsp), %r9         # 8-byte Reload
	movq	8512(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	8371(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	movq	8376(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 8960(%rsp)        # 8-byte Spill
	jne	.LBB10_4
	jmp	.LBB10_3
.Ltmp390:
.LBB10_4:                               # %._crit_edge37
	movabsq	$0, %rax
	movl	$1, %ecx
	movabsq	$1, %rdx
	vxorps	%xmm0, %xmm0, %xmm0
	movl	$0, %esi
	leaq	.L.str33107, %rdi
	leaq	.L.str781, %r8
	movabsq	$2, %r9
	leaq	.L.str371, %r10
	movabsq	$3, %r11
	leaq	.L.str383, %rbx
	movabsq	$468, %r14              # imm = 0x1D4
	leaq	.L.str62136, %r15
	leaq	.L.str380, %r12
	leaq	.L.str382, %r13
	movabsq	$19134, %rbp            # imm = 0x4ABE
	movq	%rax, 8360(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 8352(%rsp)        # 8-byte Spill
	leaq	.L.str51125, %rax
	movq	%rax, 8344(%rsp)        # 8-byte Spill
	leaq	.L.str1488, %rax
	movq	%rax, 8336(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 8328(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 8320(%rsp)        # 8-byte Spill
	leaq	.L.str32106, %rax
	movq	%rax, 8312(%rsp)        # 8-byte Spill
	movabsq	$466, %rax              # imm = 0x1D2
	movq	%rax, 8304(%rsp)        # 8-byte Spill
	leaq	.L.str381, %rax
	movq	%rax, 8296(%rsp)        # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, 8288(%rsp)        # 8-byte Spill
	leaq	.L.str160, %rax
	movq	%rax, 8280(%rsp)        # 8-byte Spill
	leaq	.L.str26100, %rax
	movq	%rax, 8272(%rsp)        # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 8264(%rsp)        # 8-byte Spill
	leaq	.L.str2397, %rax
	movq	%rax, 8256(%rsp)        # 8-byte Spill
	movabsq	$35, %rax
	movq	%rax, 8248(%rsp)        # 8-byte Spill
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
	movq	%rax, 8240(%rsp)        # 8-byte Spill
	movabsq	$8, %rax
	#DEBUG_VALUE: tqlrat:f <- 0.000000e+00
	#DEBUG_VALUE: tqlrat:t <- 0.000000e+00
	.loc	2 466 0                 # eispack.c:466:0
	movq	%rax, 8232(%rsp)        # 8-byte Spill
	movq	8304(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 8224(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movl	%esi, 8220(%rsp)        # 4-byte Spill
	movq	%r15, %rsi
	movq	%rdx, 8208(%rsp)        # 8-byte Spill
	movq	%r12, %rdx
	movq	8256(%rsp), %rax        # 8-byte Reload
	movl	%ecx, 8204(%rsp)        # 4-byte Spill
	movq	%rax, %rcx
	movq	8232(%rsp), %rax        # 8-byte Reload
	movq	%r8, 8192(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movl	8220(%rsp), %eax        # 4-byte Reload
	movq	%r9, 8184(%rsp)         # 8-byte Spill
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movq	%r15, 8176(%rsp)        # 8-byte Spill
	movq	%r12, 8168(%rsp)        # 8-byte Spill
	vmovsd	%xmm0, 8160(%rsp)       # 8-byte Spill
	movq	%r13, 8152(%rsp)        # 8-byte Spill
	movq	%rbp, 8144(%rsp)        # 8-byte Spill
	movq	%r14, 8136(%rsp)        # 8-byte Spill
	movq	%rbx, 8128(%rsp)        # 8-byte Spill
	movq	%r10, 8120(%rsp)        # 8-byte Spill
	movq	%r11, 8112(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	8184(%rsp), %rdi        # 8-byte Reload
	movq	8352(%rsp), %rsi        # 8-byte Reload
	movq	8240(%rsp), %rdx        # 8-byte Reload
	movq	8360(%rsp), %rcx        # 8-byte Reload
	movq	8336(%rsp), %r8         # 8-byte Reload
	movq	8360(%rsp), %r9         # 8-byte Reload
	movq	8192(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	9228(%rsp), %eax        # 4-byte Reload
	movl	%eax, %eax
	movl	%eax, %edx
	movq	8208(%rsp), %rdi        # 8-byte Reload
	movq	8352(%rsp), %rsi        # 8-byte Reload
	movq	8208(%rsp), %rcx        # 8-byte Reload
	movq	8344(%rsp), %r8         # 8-byte Reload
	movq	8360(%rsp), %r9         # 8-byte Reload
	movq	8192(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	9228(%rsp), %eax        # 4-byte Reload
	addl	$4294967295, %eax       # imm = 0xFFFFFFFF
	movl	%eax, %esi
	movl	%esi, %edx
	movq	8144(%rsp), %rdi        # 8-byte Reload
	movq	8352(%rsp), %rsi        # 8-byte Reload
	movq	8208(%rsp), %rcx        # 8-byte Reload
	movq	8256(%rsp), %r8         # 8-byte Reload
	movq	8360(%rsp), %r9         # 8-byte Reload
	movq	8192(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, 8108(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	8304(%rsp), %rdi        # 8-byte Reload
	movq	8176(%rsp), %rsi        # 8-byte Reload
	movq	8168(%rsp), %rdx        # 8-byte Reload
	movq	8272(%rsp), %rcx        # 8-byte Reload
	movq	8248(%rsp), %r8         # 8-byte Reload
	movl	8220(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	8108(%rsp), %eax        # 4-byte Reload
	movl	%eax, %r9d
	movl	%r9d, %edx
	movq	8208(%rsp), %rdi        # 8-byte Reload
	movq	8352(%rsp), %rsi        # 8-byte Reload
	movq	8208(%rsp), %rcx        # 8-byte Reload
	movq	8256(%rsp), %r8         # 8-byte Reload
	movq	8360(%rsp), %r9         # 8-byte Reload
	movq	8192(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	8108(%rsp), %eax        # 4-byte Reload
	movslq	%eax, %rcx
	movq	8144(%rsp), %rdi        # 8-byte Reload
	movq	8320(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	8208(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 8096(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	8272(%rsp), %r8         # 8-byte Reload
	movq	8360(%rsp), %r9         # 8-byte Reload
	movq	8192(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	8304(%rsp), %rdi        # 8-byte Reload
	movq	8176(%rsp), %rsi        # 8-byte Reload
	movq	8168(%rsp), %rdx        # 8-byte Reload
	movq	8312(%rsp), %rcx        # 8-byte Reload
	movq	8264(%rsp), %r8         # 8-byte Reload
	movl	8220(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	8184(%rsp), %rdi        # 8-byte Reload
	movq	8320(%rsp), %rsi        # 8-byte Reload
	movq	8096(%rsp), %rdx        # 8-byte Reload
	movq	8208(%rsp), %rcx        # 8-byte Reload
	movq	8272(%rsp), %r8         # 8-byte Reload
	movq	8360(%rsp), %r9         # 8-byte Reload
	movq	8192(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	8208(%rsp), %rdi        # 8-byte Reload
	movq	8320(%rsp), %rsi        # 8-byte Reload
	movq	9208(%rsp), %rdx        # 8-byte Reload
	movq	8208(%rsp), %rcx        # 8-byte Reload
	movq	8280(%rsp), %r8         # 8-byte Reload
	movq	8360(%rsp), %r9         # 8-byte Reload
	movq	8192(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	8096(%rsp), %rcx        # 8-byte Reload
	shlq	$3, %rcx
	movq	9208(%rsp), %rdx        # 8-byte Reload
	addq	%rcx, %rdx
	movq	8144(%rsp), %rdi        # 8-byte Reload
	movq	8320(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 8088(%rsp)        # 8-byte Spill
	movq	8208(%rsp), %rcx        # 8-byte Reload
	movq	8312(%rsp), %r8         # 8-byte Reload
	movq	8360(%rsp), %r9         # 8-byte Reload
	movq	8192(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	8304(%rsp), %rdi        # 8-byte Reload
	movq	8176(%rsp), %rsi        # 8-byte Reload
	movq	8168(%rsp), %rdx        # 8-byte Reload
	movq	8296(%rsp), %rcx        # 8-byte Reload
	movq	8288(%rsp), %r8         # 8-byte Reload
	movl	8220(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	8184(%rsp), %rdi        # 8-byte Reload
	movq	8320(%rsp), %rsi        # 8-byte Reload
	movq	8088(%rsp), %rdx        # 8-byte Reload
	movq	8208(%rsp), %rcx        # 8-byte Reload
	movq	8312(%rsp), %r8         # 8-byte Reload
	movq	8360(%rsp), %r9         # 8-byte Reload
	movq	8192(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	8208(%rsp), %rdi        # 8-byte Reload
	movq	8320(%rsp), %rsi        # 8-byte Reload
	vmovsd	8160(%rsp), %xmm0       # 8-byte Reload
	movq	8360(%rsp), %rdx        # 8-byte Reload
	movq	8336(%rsp), %rcx        # 8-byte Reload
	movq	8360(%rsp), %r8         # 8-byte Reload
	movq	8192(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	9208(%rsp), %rcx        # 8-byte Reload
	movq	8096(%rsp), %rdx        # 8-byte Reload
	vmovsd	8160(%rsp), %xmm0       # 8-byte Reload
	vmovsd	%xmm0, (%rcx,%rdx,8)
	#DEBUG_VALUE: tqlrat:l <- 0
	.loc	2 468 0                 # eispack.c:468:0
.Ltmp391:
	movq	8136(%rsp), %rdi        # 8-byte Reload
	movq	8176(%rsp), %rsi        # 8-byte Reload
	movq	8168(%rsp), %rdx        # 8-byte Reload
	movq	8224(%rsp), %rcx        # 8-byte Reload
	movq	8328(%rsp), %r8         # 8-byte Reload
	movl	8220(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	8184(%rsp), %rdi        # 8-byte Reload
	movq	8352(%rsp), %rsi        # 8-byte Reload
	movq	8360(%rsp), %rdx        # 8-byte Reload
	movq	8360(%rsp), %rcx        # 8-byte Reload
	movq	8336(%rsp), %r8         # 8-byte Reload
	movq	8360(%rsp), %r9         # 8-byte Reload
	movq	8192(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	9228(%rsp), %eax        # 4-byte Reload
	movl	%eax, %eax
	movl	%eax, %edx
	movq	8208(%rsp), %rdi        # 8-byte Reload
	movq	8352(%rsp), %rsi        # 8-byte Reload
	movq	8208(%rsp), %rcx        # 8-byte Reload
	movq	8344(%rsp), %r8         # 8-byte Reload
	movq	8360(%rsp), %r9         # 8-byte Reload
	movq	8192(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	9228(%rsp), %eax        # 4-byte Reload
	cmpl	$0, %eax
	setg	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	8144(%rsp), %rdi        # 8-byte Reload
	movq	8208(%rsp), %rsi        # 8-byte Reload
	movq	8208(%rsp), %rcx        # 8-byte Reload
	movq	8224(%rsp), %r8         # 8-byte Reload
	movq	8360(%rsp), %r9         # 8-byte Reload
	movq	8192(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 8087(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	8136(%rsp), %rdi        # 8-byte Reload
	movq	8176(%rsp), %rsi        # 8-byte Reload
	movq	8168(%rsp), %rdx        # 8-byte Reload
	movq	8152(%rsp), %rcx        # 8-byte Reload
	movq	8184(%rsp), %r8         # 8-byte Reload
	movl	8220(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	8112(%rsp), %rdi        # 8-byte Reload
	movq	8360(%rsp), %rsi        # 8-byte Reload
	movq	8360(%rsp), %rdx        # 8-byte Reload
	movq	8208(%rsp), %rcx        # 8-byte Reload
	movq	8128(%rsp), %r8         # 8-byte Reload
	movq	8360(%rsp), %r9         # 8-byte Reload
	movq	8192(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	8184(%rsp), %rdi        # 8-byte Reload
	movq	8360(%rsp), %rsi        # 8-byte Reload
	movq	8360(%rsp), %rdx        # 8-byte Reload
	movq	8208(%rsp), %rcx        # 8-byte Reload
	movq	8120(%rsp), %r8         # 8-byte Reload
	movq	8360(%rsp), %r9         # 8-byte Reload
	movq	8192(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	8087(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, %edx
	movq	8208(%rsp), %rdi        # 8-byte Reload
	movq	8208(%rsp), %rsi        # 8-byte Reload
	movq	8208(%rsp), %rcx        # 8-byte Reload
	movq	8224(%rsp), %r8         # 8-byte Reload
	movq	8360(%rsp), %r9         # 8-byte Reload
	movq	8192(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	8087(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	movq	8360(%rsp), %rcx        # 8-byte Reload
	movl	8204(%rsp), %eax        # 4-byte Reload
	movq	8208(%rsp), %rdx        # 8-byte Reload
	vmovsd	8160(%rsp), %xmm0       # 8-byte Reload
                                        # implicit-def: XMM1
	movl	8220(%rsp), %esi        # 4-byte Reload
	vmovsd	8160(%rsp), %xmm2       # 8-byte Reload
                                        # implicit-def: XMM3
	movl	8220(%rsp), %edi        # 4-byte Reload
	movl	%eax, 8080(%rsp)        # 4-byte Spill
	movq	%rcx, 8072(%rsp)        # 8-byte Spill
	movq	%rdx, 8064(%rsp)        # 8-byte Spill
	vmovsd	%xmm0, 8056(%rsp)       # 8-byte Spill
	vmovsd	%xmm1, 8048(%rsp)       # 8-byte Spill
	movl	%esi, 8044(%rsp)        # 4-byte Spill
	vmovsd	%xmm2, 8032(%rsp)       # 8-byte Spill
	vmovsd	%xmm3, 8024(%rsp)       # 8-byte Spill
	movl	%edi, 9112(%rsp)        # 4-byte Spill
	jne	.LBB10_5
	jmp	.LBB10_28
.LBB10_5:                               # %.lr.ph33
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB10_9 Depth 2
                                        #     Child Loop BB10_12 Depth 2
                                        #       Child Loop BB10_15 Depth 3
                                        #       Child Loop BB10_17 Depth 3
                                        #     Child Loop BB10_22 Depth 2
	vmovsd	8024(%rsp), %xmm0       # 8-byte Reload
	vmovsd	8032(%rsp), %xmm1       # 8-byte Reload
	movl	8044(%rsp), %eax        # 4-byte Reload
	vmovsd	8048(%rsp), %xmm2       # 8-byte Reload
	vmovsd	8056(%rsp), %xmm3       # 8-byte Reload
	movq	8064(%rsp), %rcx        # 8-byte Reload
	movl	8080(%rsp), %edx        # 4-byte Reload
	movq	8072(%rsp), %rsi        # 8-byte Reload
	movabsq	$1, %rdi
	leaq	.L.str94, %r8
	movabsq	$0, %r9
	leaq	.L.str781, %r10
	movabsq	$2, %r11
	leaq	.L.str401, %rbx
	movabsq	$3, %r14
	leaq	.L.str2599, %r15
	movabsq	$473, %r12              # imm = 0x1D9
	leaq	.L.str62136, %r13
	leaq	.L.str383, %rbp
	movq	%rcx, 8016(%rsp)        # 8-byte Spill
	leaq	.L.str400, %rcx
	movl	%eax, 8012(%rsp)        # 4-byte Spill
	movl	$0, %eax
	movl	%eax, 8008(%rsp)        # 4-byte Spill
	movl	$1, %eax
	movq	%rcx, 8000(%rsp)        # 8-byte Spill
	movabsq	$19134, %rcx            # imm = 0x4ABE
	movq	%rcx, 7992(%rsp)        # 8-byte Spill
	movabsq	$64, %rcx
	movq	%rcx, 7984(%rsp)        # 8-byte Spill
	leaq	.L.str391, %rcx
	movq	%rcx, 7976(%rsp)        # 8-byte Spill
	leaq	.L.str37111, %rcx
	movq	%rcx, 7968(%rsp)        # 8-byte Spill
	movabsq	$47, %rcx
	movq	%rcx, 7960(%rsp)        # 8-byte Spill
	leaq	.L.str35109, %rcx
	movq	%rcx, 7952(%rsp)        # 8-byte Spill
	leaq	.L.str27101, %rcx
	movq	%rcx, 7944(%rsp)        # 8-byte Spill
	movabsq	$471, %rcx              # imm = 0x1D7
	movq	%rcx, 7936(%rsp)        # 8-byte Spill
	movabsq	$9, %rcx
	movq	%rcx, 7928(%rsp)        # 8-byte Spill
	leaq	.L.str31105, %rcx
	movq	%rcx, 7920(%rsp)        # 8-byte Spill
	leaq	sqrt, %rcx
	movq	%rcx, 7912(%rsp)        # 8-byte Spill
	leaq	.L.str198, %rcx
	movq	%rcx, 7904(%rsp)        # 8-byte Spill
	movabsq	$49, %rcx
	movq	%rcx, 7896(%rsp)        # 8-byte Spill
	leaq	.L.str36110, %rcx
	movq	%rcx, 7888(%rsp)        # 8-byte Spill
	movabsq	$27, %rcx
	movq	%rcx, 7880(%rsp)        # 8-byte Spill
	leaq	.L.str160, %rcx
	movq	%rcx, 7872(%rsp)        # 8-byte Spill
	leaq	.L.str384, %rcx
	movq	%rcx, 7864(%rsp)        # 8-byte Spill
	movabsq	$29, %rcx
	movq	%rcx, 7856(%rsp)        # 8-byte Spill
	leaq	.L.str29103, %rcx
	movq	%rcx, 7848(%rsp)        # 8-byte Spill
	leaq	fabs, %rcx
	movq	%rcx, 7840(%rsp)        # 8-byte Spill
	leaq	.L.str680, %rcx
	movq	%rcx, 7832(%rsp)        # 8-byte Spill
	leaq	.L.str34108, %rcx
	movq	%rcx, 7824(%rsp)        # 8-byte Spill
	leaq	.L.str82, %rcx
	movq	%rcx, 7816(%rsp)        # 8-byte Spill
	leaq	.L.str398, %rcx
	movq	%rcx, 7808(%rsp)        # 8-byte Spill
	leaq	.L.str386, %rcx
	movq	%rcx, 7800(%rsp)        # 8-byte Spill
	leaq	.L.str399, %rcx
                                        # implicit-def: XMM4
	movq	%rcx, 7792(%rsp)        # 8-byte Spill
	leaq	.L.str1488, %rcx
	movq	%rcx, 7784(%rsp)        # 8-byte Spill
	leaq	.L.str380, %rcx
	movq	%rcx, 7776(%rsp)        # 8-byte Spill
	movabsq	$-1, %rcx
	movq	%rcx, 7768(%rsp)        # 8-byte Spill
	movabsq	$48, %rcx
	movq	%rcx, 7760(%rsp)        # 8-byte Spill
	leaq	.L.str396, %rcx
	movq	%rcx, 7752(%rsp)        # 8-byte Spill
	leaq	.L.str397, %rcx
	vxorps	%xmm5, %xmm5, %xmm5
	movq	%rcx, 7744(%rsp)        # 8-byte Spill
	movabsq	$32, %rcx
	movq	%rcx, 7736(%rsp)        # 8-byte Spill
	leaq	.L.str395, %rcx
	movq	%rcx, 7728(%rsp)        # 8-byte Spill
	leaq	.L.str318, %rcx
	movq	%rcx, 7720(%rsp)        # 8-byte Spill
	leaq	.L.str393, %rcx
	movq	%rcx, 7712(%rsp)        # 8-byte Spill
	leaq	.L.str394, %rcx
	movq	%rcx, 7704(%rsp)        # 8-byte Spill
	leaq	.L.str392, %rcx
	movq	%rcx, 7696(%rsp)        # 8-byte Spill
	leaq	.L.str389, %rcx
	movq	%rcx, 7688(%rsp)        # 8-byte Spill
	leaq	.L.str390, %rcx
	movq	%rcx, 7680(%rsp)        # 8-byte Spill
	leaq	.L.str387, %rcx
	movq	%rcx, 7672(%rsp)        # 8-byte Spill
	leaq	.L.str388, %rcx
	movq	%rcx, 7664(%rsp)        # 8-byte Spill
	leaq	.L.str385, %rcx
	.loc	2 470 0                 # eispack.c:470:0
.Ltmp392:
	movq	%rcx, 7656(%rsp)        # 8-byte Spill
	movq	7768(%rsp), %rcx        # 8-byte Reload
	movq	%rdi, 7648(%rsp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	%rsi, 7640(%rsp)        # 8-byte Spill
	movq	%r13, %rsi
	movl	%edx, 7636(%rsp)        # 4-byte Spill
	movq	%rbp, %rdx
	movq	7864(%rsp), %rcx        # 8-byte Reload
	movq	%r8, 7624(%rsp)         # 8-byte Spill
	movq	7760(%rsp), %r8         # 8-byte Reload
	movl	%eax, 7620(%rsp)        # 4-byte Spill
	movl	8008(%rsp), %eax        # 4-byte Reload
	movq	%r9, 7608(%rsp)         # 8-byte Spill
	movl	%eax, %r9d
	movl	$1, (%rsp)
	vmovsd	%xmm0, 7600(%rsp)       # 8-byte Spill
	vmovsd	%xmm1, 7592(%rsp)       # 8-byte Spill
	vmovsd	%xmm2, 7584(%rsp)       # 8-byte Spill
	vmovsd	%xmm3, 7576(%rsp)       # 8-byte Spill
	movq	%r13, 7568(%rsp)        # 8-byte Spill
	movq	%rbp, 7560(%rsp)        # 8-byte Spill
	vmovsd	%xmm4, 7552(%rsp)       # 8-byte Spill
	vmovsd	%xmm5, 7544(%rsp)       # 8-byte Spill
	movq	%r12, 7536(%rsp)        # 8-byte Spill
	movq	%r15, 7528(%rsp)        # 8-byte Spill
	movq	%r10, 7520(%rsp)        # 8-byte Spill
	movq	%r11, 7512(%rsp)        # 8-byte Spill
	movq	%rbx, 7504(%rsp)        # 8-byte Spill
	movq	%r14, 7496(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	7512(%rsp), %rdi        # 8-byte Reload
	movq	7984(%rsp), %rsi        # 8-byte Reload
	movq	7608(%rsp), %rdx        # 8-byte Reload
	movq	7608(%rsp), %rcx        # 8-byte Reload
	movq	7784(%rsp), %r8         # 8-byte Reload
	movq	7648(%rsp), %r9         # 8-byte Reload
	movq	7776(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	7648(%rsp), %rdi        # 8-byte Reload
	movq	7984(%rsp), %rsi        # 8-byte Reload
	movq	7608(%rsp), %rdx        # 8-byte Reload
	movq	7648(%rsp), %rcx        # 8-byte Reload
	movq	7656(%rsp), %r8         # 8-byte Reload
	movq	7648(%rsp), %r9         # 8-byte Reload
	movq	7800(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	7992(%rsp), %rdi        # 8-byte Reload
	movq	7984(%rsp), %rsi        # 8-byte Reload
	movq	7640(%rsp), %rdx        # 8-byte Reload
	movq	7648(%rsp), %rcx        # 8-byte Reload
	movq	7864(%rsp), %r8         # 8-byte Reload
	movq	7608(%rsp), %r9         # 8-byte Reload
	movq	7800(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	7768(%rsp), %rdi        # 8-byte Reload
	movq	7568(%rsp), %rsi        # 8-byte Reload
	movq	7560(%rsp), %rdx        # 8-byte Reload
	movq	7672(%rsp), %rcx        # 8-byte Reload
	movq	7760(%rsp), %r8         # 8-byte Reload
	movl	8008(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	7512(%rsp), %rdi        # 8-byte Reload
	movq	7736(%rsp), %rsi        # 8-byte Reload
	movq	7648(%rsp), %rdx        # 8-byte Reload
	movq	7608(%rsp), %rcx        # 8-byte Reload
	movq	7784(%rsp), %r8         # 8-byte Reload
	movq	7648(%rsp), %r9         # 8-byte Reload
	movq	7776(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	7648(%rsp), %rdi        # 8-byte Reload
	movq	7736(%rsp), %rsi        # 8-byte Reload
	movq	7608(%rsp), %rdx        # 8-byte Reload
	movq	7648(%rsp), %rcx        # 8-byte Reload
	movq	7664(%rsp), %r8         # 8-byte Reload
	movq	7648(%rsp), %r9         # 8-byte Reload
	movq	7800(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	7636(%rsp), %eax        # 4-byte Reload
	movl	%eax, %eax
	movl	%eax, %edx
	movq	7992(%rsp), %rdi        # 8-byte Reload
	movq	7736(%rsp), %rsi        # 8-byte Reload
	movq	7648(%rsp), %rcx        # 8-byte Reload
	movq	7672(%rsp), %r8         # 8-byte Reload
	movq	7608(%rsp), %r9         # 8-byte Reload
	movq	7800(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	7768(%rsp), %rdi        # 8-byte Reload
	movq	7568(%rsp), %rsi        # 8-byte Reload
	movq	7560(%rsp), %rdx        # 8-byte Reload
	movq	7688(%rsp), %rcx        # 8-byte Reload
	movq	7760(%rsp), %r8         # 8-byte Reload
	movl	8008(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	7512(%rsp), %rdi        # 8-byte Reload
	movq	7984(%rsp), %rsi        # 8-byte Reload
	movq	7648(%rsp), %rdx        # 8-byte Reload
	movq	7608(%rsp), %rcx        # 8-byte Reload
	movq	7784(%rsp), %r8         # 8-byte Reload
	movq	7648(%rsp), %r9         # 8-byte Reload
	movq	7776(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	7648(%rsp), %rdi        # 8-byte Reload
	movq	7984(%rsp), %rsi        # 8-byte Reload
	movq	7608(%rsp), %rdx        # 8-byte Reload
	movq	7648(%rsp), %rcx        # 8-byte Reload
	movq	7680(%rsp), %r8         # 8-byte Reload
	movq	7648(%rsp), %r9         # 8-byte Reload
	movq	7800(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	7992(%rsp), %rdi        # 8-byte Reload
	movq	7984(%rsp), %rsi        # 8-byte Reload
	movq	8016(%rsp), %rdx        # 8-byte Reload
	movq	7648(%rsp), %rcx        # 8-byte Reload
	movq	7688(%rsp), %r8         # 8-byte Reload
	movq	7608(%rsp), %r9         # 8-byte Reload
	movq	7800(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	7768(%rsp), %rdi        # 8-byte Reload
	movq	7568(%rsp), %rsi        # 8-byte Reload
	movq	7560(%rsp), %rdx        # 8-byte Reload
	movq	7976(%rsp), %rcx        # 8-byte Reload
	movq	7760(%rsp), %r8         # 8-byte Reload
	movl	8008(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	7512(%rsp), %rdi        # 8-byte Reload
	movq	7984(%rsp), %rsi        # 8-byte Reload
	vmovsd	7544(%rsp), %xmm0       # 8-byte Reload
	movq	7608(%rsp), %rdx        # 8-byte Reload
	movq	7784(%rsp), %rcx        # 8-byte Reload
	movq	7648(%rsp), %r8         # 8-byte Reload
	movq	7776(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	7648(%rsp), %rdi        # 8-byte Reload
	movq	7984(%rsp), %rsi        # 8-byte Reload
	movq	7608(%rsp), %rdx        # 8-byte Reload
	movq	7648(%rsp), %rcx        # 8-byte Reload
	movq	7696(%rsp), %r8         # 8-byte Reload
	movq	7648(%rsp), %r9         # 8-byte Reload
	movq	7800(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	7992(%rsp), %rdi        # 8-byte Reload
	movq	7984(%rsp), %rsi        # 8-byte Reload
	vmovsd	7576(%rsp), %xmm0       # 8-byte Reload
	movq	7648(%rsp), %rdx        # 8-byte Reload
	movq	7976(%rsp), %rcx        # 8-byte Reload
	movq	7608(%rsp), %r8         # 8-byte Reload
	movq	7800(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	7768(%rsp), %rdi        # 8-byte Reload
	movq	7568(%rsp), %rsi        # 8-byte Reload
	movq	7560(%rsp), %rdx        # 8-byte Reload
	movq	7712(%rsp), %rcx        # 8-byte Reload
	movq	7760(%rsp), %r8         # 8-byte Reload
	movl	8008(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	7512(%rsp), %rdi        # 8-byte Reload
	movq	7984(%rsp), %rsi        # 8-byte Reload
	vmovsd	7552(%rsp), %xmm0       # 8-byte Reload
	movq	7608(%rsp), %rdx        # 8-byte Reload
	movq	7784(%rsp), %rcx        # 8-byte Reload
	movq	7648(%rsp), %r8         # 8-byte Reload
	movq	7776(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	7648(%rsp), %rdi        # 8-byte Reload
	movq	7984(%rsp), %rsi        # 8-byte Reload
	movq	7608(%rsp), %rdx        # 8-byte Reload
	movq	7648(%rsp), %rcx        # 8-byte Reload
	movq	7704(%rsp), %r8         # 8-byte Reload
	movq	7648(%rsp), %r9         # 8-byte Reload
	movq	7800(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	7992(%rsp), %rdi        # 8-byte Reload
	movq	7984(%rsp), %rsi        # 8-byte Reload
	vmovsd	7584(%rsp), %xmm0       # 8-byte Reload
	movq	7648(%rsp), %rdx        # 8-byte Reload
	movq	7712(%rsp), %rcx        # 8-byte Reload
	movq	7608(%rsp), %r8         # 8-byte Reload
	movq	7800(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	7768(%rsp), %rdi        # 8-byte Reload
	movq	7568(%rsp), %rsi        # 8-byte Reload
	movq	7560(%rsp), %rdx        # 8-byte Reload
	movq	7728(%rsp), %rcx        # 8-byte Reload
	movq	7760(%rsp), %r8         # 8-byte Reload
	movl	8008(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	7512(%rsp), %rdi        # 8-byte Reload
	movq	7736(%rsp), %rsi        # 8-byte Reload
	movq	7608(%rsp), %rdx        # 8-byte Reload
	movq	7608(%rsp), %rcx        # 8-byte Reload
	movq	7784(%rsp), %r8         # 8-byte Reload
	movq	7648(%rsp), %r9         # 8-byte Reload
	movq	7776(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	7648(%rsp), %rdi        # 8-byte Reload
	movq	7736(%rsp), %rsi        # 8-byte Reload
	movq	7608(%rsp), %rdx        # 8-byte Reload
	movq	7648(%rsp), %rcx        # 8-byte Reload
	movq	7720(%rsp), %r8         # 8-byte Reload
	movq	7648(%rsp), %r9         # 8-byte Reload
	movq	7800(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	8012(%rsp), %eax        # 4-byte Reload
	movl	%eax, %eax
	movl	%eax, %edx
	movq	7992(%rsp), %rdi        # 8-byte Reload
	movq	7736(%rsp), %rsi        # 8-byte Reload
	movq	7648(%rsp), %rcx        # 8-byte Reload
	movq	7728(%rsp), %r8         # 8-byte Reload
	movq	7608(%rsp), %r9         # 8-byte Reload
	movq	7800(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	7768(%rsp), %rdi        # 8-byte Reload
	movq	7568(%rsp), %rsi        # 8-byte Reload
	movq	7560(%rsp), %rdx        # 8-byte Reload
	movq	7752(%rsp), %rcx        # 8-byte Reload
	movq	7760(%rsp), %r8         # 8-byte Reload
	movl	8008(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	7512(%rsp), %rdi        # 8-byte Reload
	movq	7984(%rsp), %rsi        # 8-byte Reload
	vmovsd	7544(%rsp), %xmm0       # 8-byte Reload
	movq	7608(%rsp), %rdx        # 8-byte Reload
	movq	7784(%rsp), %rcx        # 8-byte Reload
	movq	7648(%rsp), %r8         # 8-byte Reload
	movq	7776(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	7648(%rsp), %rdi        # 8-byte Reload
	movq	7984(%rsp), %rsi        # 8-byte Reload
	movq	7608(%rsp), %rdx        # 8-byte Reload
	movq	7648(%rsp), %rcx        # 8-byte Reload
	movq	7744(%rsp), %r8         # 8-byte Reload
	movq	7648(%rsp), %r9         # 8-byte Reload
	movq	7800(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	7992(%rsp), %rdi        # 8-byte Reload
	movq	7984(%rsp), %rsi        # 8-byte Reload
	vmovsd	7592(%rsp), %xmm0       # 8-byte Reload
	movq	7648(%rsp), %rdx        # 8-byte Reload
	movq	7752(%rsp), %rcx        # 8-byte Reload
	movq	7608(%rsp), %r8         # 8-byte Reload
	movq	7800(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	7768(%rsp), %rdi        # 8-byte Reload
	movq	7568(%rsp), %rsi        # 8-byte Reload
	movq	7560(%rsp), %rdx        # 8-byte Reload
	movq	7808(%rsp), %rcx        # 8-byte Reload
	movq	7760(%rsp), %r8         # 8-byte Reload
	movl	8008(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	7512(%rsp), %rdi        # 8-byte Reload
	movq	7984(%rsp), %rsi        # 8-byte Reload
	vmovsd	7552(%rsp), %xmm0       # 8-byte Reload
	movq	7608(%rsp), %rdx        # 8-byte Reload
	movq	7784(%rsp), %rcx        # 8-byte Reload
	movq	7648(%rsp), %r8         # 8-byte Reload
	movq	7776(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	7648(%rsp), %rdi        # 8-byte Reload
	movq	7984(%rsp), %rsi        # 8-byte Reload
	movq	7608(%rsp), %rdx        # 8-byte Reload
	movq	7648(%rsp), %rcx        # 8-byte Reload
	movq	7792(%rsp), %r8         # 8-byte Reload
	movq	7648(%rsp), %r9         # 8-byte Reload
	movq	7800(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	7992(%rsp), %rdi        # 8-byte Reload
	movq	7984(%rsp), %rsi        # 8-byte Reload
	vmovsd	7600(%rsp), %xmm0       # 8-byte Reload
	movq	7648(%rsp), %rdx        # 8-byte Reload
	movq	7808(%rsp), %rcx        # 8-byte Reload
	movq	7608(%rsp), %r8         # 8-byte Reload
	movq	7800(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
.Ltmp393:
	#DEBUG_VALUE: tqlrat:j <- 0
	.loc	2 471 0                 # eispack.c:471:0
	movq	7936(%rsp), %rdi        # 8-byte Reload
	movq	7568(%rsp), %rsi        # 8-byte Reload
	movq	7560(%rsp), %rdx        # 8-byte Reload
	movq	7824(%rsp), %rcx        # 8-byte Reload
	movq	7856(%rsp), %r8         # 8-byte Reload
	movl	8008(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	7512(%rsp), %rdi        # 8-byte Reload
	movq	7984(%rsp), %rsi        # 8-byte Reload
	movq	7640(%rsp), %rdx        # 8-byte Reload
	movq	7648(%rsp), %rcx        # 8-byte Reload
	movq	7864(%rsp), %r8         # 8-byte Reload
	movq	7608(%rsp), %r9         # 8-byte Reload
	movq	7520(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	7648(%rsp), %rdi        # 8-byte Reload
	movq	7984(%rsp), %rsi        # 8-byte Reload
	movq	9216(%rsp), %rdx        # 8-byte Reload
	movq	7648(%rsp), %rcx        # 8-byte Reload
	movq	7816(%rsp), %r8         # 8-byte Reload
	movq	7608(%rsp), %r9         # 8-byte Reload
	movq	7520(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	7640(%rsp), %rcx        # 8-byte Reload
	shlq	$3, %rcx
	movq	9216(%rsp), %rdx        # 8-byte Reload
	addq	%rcx, %rdx
	movq	7992(%rsp), %rdi        # 8-byte Reload
	movq	7984(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 7488(%rsp)        # 8-byte Spill
	movq	7648(%rsp), %rcx        # 8-byte Reload
	movq	7824(%rsp), %r8         # 8-byte Reload
	movq	7608(%rsp), %r9         # 8-byte Reload
	movq	7520(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	7936(%rsp), %rdi        # 8-byte Reload
	movq	7568(%rsp), %rsi        # 8-byte Reload
	movq	7560(%rsp), %rdx        # 8-byte Reload
	movq	7848(%rsp), %rcx        # 8-byte Reload
	movq	7880(%rsp), %r8         # 8-byte Reload
	movl	8008(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	7648(%rsp), %rdi        # 8-byte Reload
	movq	7984(%rsp), %rsi        # 8-byte Reload
	movq	7488(%rsp), %rdx        # 8-byte Reload
	movq	7648(%rsp), %rcx        # 8-byte Reload
	movq	7824(%rsp), %r8         # 8-byte Reload
	movq	7608(%rsp), %r9         # 8-byte Reload
	movq	7520(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	9216(%rsp), %rcx        # 8-byte Reload
	movq	7640(%rsp), %rdx        # 8-byte Reload
	vmovsd	(%rcx,%rdx,8), %xmm0
	movq	7992(%rsp), %rdi        # 8-byte Reload
	movq	7984(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 7480(%rsp)       # 8-byte Spill
	movq	7648(%rsp), %rdx        # 8-byte Reload
	movq	7848(%rsp), %rcx        # 8-byte Reload
	movq	7608(%rsp), %r8         # 8-byte Reload
	movq	7520(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	7936(%rsp), %rdi        # 8-byte Reload
	movq	7568(%rsp), %rsi        # 8-byte Reload
	movq	7560(%rsp), %rdx        # 8-byte Reload
	movq	7952(%rsp), %rcx        # 8-byte Reload
	movq	7896(%rsp), %r8         # 8-byte Reload
	movl	8008(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	7512(%rsp), %rdi        # 8-byte Reload
	movq	7984(%rsp), %rsi        # 8-byte Reload
	movq	7840(%rsp), %rdx        # 8-byte Reload
	movq	7648(%rsp), %rcx        # 8-byte Reload
	movq	7832(%rsp), %r8         # 8-byte Reload
	movq	7608(%rsp), %r9         # 8-byte Reload
	movq	7520(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	7648(%rsp), %rdi        # 8-byte Reload
	movq	7984(%rsp), %rsi        # 8-byte Reload
	vmovsd	7480(%rsp), %xmm0       # 8-byte Reload
	movq	7648(%rsp), %rdx        # 8-byte Reload
	movq	7848(%rsp), %rcx        # 8-byte Reload
	movq	7608(%rsp), %r8         # 8-byte Reload
	movq	7520(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	.LCPI10_0(%rip), %xmm0
	vmovsd	7480(%rsp), %xmm1       # 8-byte Reload
	vandpd	%xmm0, %xmm1, %xmm0
	movq	7992(%rsp), %rdi        # 8-byte Reload
	movq	7984(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 7472(%rsp)       # 8-byte Spill
	movq	7648(%rsp), %rdx        # 8-byte Reload
	movq	7952(%rsp), %rcx        # 8-byte Reload
	movq	7608(%rsp), %r8         # 8-byte Reload
	movq	7520(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	7936(%rsp), %rdi        # 8-byte Reload
	movq	7568(%rsp), %rsi        # 8-byte Reload
	movq	7560(%rsp), %rdx        # 8-byte Reload
	movq	7888(%rsp), %rcx        # 8-byte Reload
	movq	7856(%rsp), %r8         # 8-byte Reload
	movl	8008(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	7512(%rsp), %rdi        # 8-byte Reload
	movq	7984(%rsp), %rsi        # 8-byte Reload
	movq	7640(%rsp), %rdx        # 8-byte Reload
	movq	7648(%rsp), %rcx        # 8-byte Reload
	movq	7864(%rsp), %r8         # 8-byte Reload
	movq	7608(%rsp), %r9         # 8-byte Reload
	movq	7520(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	7648(%rsp), %rdi        # 8-byte Reload
	movq	7984(%rsp), %rsi        # 8-byte Reload
	movq	9208(%rsp), %rdx        # 8-byte Reload
	movq	7648(%rsp), %rcx        # 8-byte Reload
	movq	7872(%rsp), %r8         # 8-byte Reload
	movq	7608(%rsp), %r9         # 8-byte Reload
	movq	7520(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	7640(%rsp), %rcx        # 8-byte Reload
	shlq	$3, %rcx
	movq	9208(%rsp), %rdx        # 8-byte Reload
	addq	%rcx, %rdx
	movq	7992(%rsp), %rdi        # 8-byte Reload
	movq	7984(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 7464(%rsp)        # 8-byte Spill
	movq	7648(%rsp), %rcx        # 8-byte Reload
	movq	7888(%rsp), %r8         # 8-byte Reload
	movq	7608(%rsp), %r9         # 8-byte Reload
	movq	7520(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	7936(%rsp), %rdi        # 8-byte Reload
	movq	7568(%rsp), %rsi        # 8-byte Reload
	movq	7560(%rsp), %rdx        # 8-byte Reload
	movq	7920(%rsp), %rcx        # 8-byte Reload
	movq	7880(%rsp), %r8         # 8-byte Reload
	movl	8008(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	7648(%rsp), %rdi        # 8-byte Reload
	movq	7984(%rsp), %rsi        # 8-byte Reload
	movq	7464(%rsp), %rdx        # 8-byte Reload
	movq	7648(%rsp), %rcx        # 8-byte Reload
	movq	7888(%rsp), %r8         # 8-byte Reload
	movq	7608(%rsp), %r9         # 8-byte Reload
	movq	7520(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	9208(%rsp), %rcx        # 8-byte Reload
	movq	7640(%rsp), %rdx        # 8-byte Reload
	vmovsd	(%rcx,%rdx,8), %xmm0
	movq	7992(%rsp), %rdi        # 8-byte Reload
	movq	7984(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 7456(%rsp)       # 8-byte Spill
	movq	7648(%rsp), %rdx        # 8-byte Reload
	movq	7920(%rsp), %rcx        # 8-byte Reload
	movq	7608(%rsp), %r8         # 8-byte Reload
	movq	7520(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	7936(%rsp), %rdi        # 8-byte Reload
	movq	7568(%rsp), %rsi        # 8-byte Reload
	movq	7560(%rsp), %rdx        # 8-byte Reload
	movq	7944(%rsp), %rcx        # 8-byte Reload
	movq	7896(%rsp), %r8         # 8-byte Reload
	movl	8008(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	7512(%rsp), %rdi        # 8-byte Reload
	movq	7984(%rsp), %rsi        # 8-byte Reload
	movq	7912(%rsp), %rdx        # 8-byte Reload
	movq	7648(%rsp), %rcx        # 8-byte Reload
	movq	7904(%rsp), %r8         # 8-byte Reload
	movq	7608(%rsp), %r9         # 8-byte Reload
	movq	7520(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	7648(%rsp), %rdi        # 8-byte Reload
	movq	7984(%rsp), %rsi        # 8-byte Reload
	vmovsd	7456(%rsp), %xmm0       # 8-byte Reload
	movq	7648(%rsp), %rdx        # 8-byte Reload
	movq	7920(%rsp), %rcx        # 8-byte Reload
	movq	7608(%rsp), %r8         # 8-byte Reload
	movq	7520(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	7456(%rsp), %xmm0       # 8-byte Reload
	callq	sqrt
	movq	7992(%rsp), %rdi        # 8-byte Reload
	movq	7984(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 7448(%rsp)       # 8-byte Spill
	movq	7648(%rsp), %rdx        # 8-byte Reload
	movq	7944(%rsp), %rcx        # 8-byte Reload
	movq	7608(%rsp), %r8         # 8-byte Reload
	movq	7520(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	7936(%rsp), %rdi        # 8-byte Reload
	movq	7568(%rsp), %rsi        # 8-byte Reload
	movq	7560(%rsp), %rdx        # 8-byte Reload
	movq	7968(%rsp), %rcx        # 8-byte Reload
	movq	7928(%rsp), %r8         # 8-byte Reload
	movl	8008(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	7512(%rsp), %rdi        # 8-byte Reload
	movq	7984(%rsp), %rsi        # 8-byte Reload
	vmovsd	7448(%rsp), %xmm0       # 8-byte Reload
	movq	7648(%rsp), %rdx        # 8-byte Reload
	movq	7944(%rsp), %rcx        # 8-byte Reload
	movq	7608(%rsp), %r8         # 8-byte Reload
	movq	7520(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	7648(%rsp), %rdi        # 8-byte Reload
	movq	7984(%rsp), %rsi        # 8-byte Reload
	vmovsd	7472(%rsp), %xmm0       # 8-byte Reload
	movq	7648(%rsp), %rdx        # 8-byte Reload
	movq	7952(%rsp), %rcx        # 8-byte Reload
	movq	7608(%rsp), %r8         # 8-byte Reload
	movq	7520(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	7472(%rsp), %xmm0       # 8-byte Reload
	vmovsd	7448(%rsp), %xmm1       # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
	movq	7992(%rsp), %rdi        # 8-byte Reload
	movq	7984(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	7648(%rsp), %rdx        # 8-byte Reload
	movq	7968(%rsp), %rcx        # 8-byte Reload
	movq	7608(%rsp), %r8         # 8-byte Reload
	movq	7520(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 7440(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
.Ltmp394:
	#DEBUG_VALUE: tqlrat:h <- [RSP+7440]
	.loc	2 473 0                 # eispack.c:473:0
	movq	7536(%rsp), %rdi        # 8-byte Reload
	movq	7568(%rsp), %rsi        # 8-byte Reload
	movq	7560(%rsp), %rdx        # 8-byte Reload
	movq	7624(%rsp), %rcx        # 8-byte Reload
	movq	7960(%rsp), %r8         # 8-byte Reload
	movl	8008(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	7512(%rsp), %rdi        # 8-byte Reload
	movq	7984(%rsp), %rsi        # 8-byte Reload
	vmovsd	7440(%rsp), %xmm0       # 8-byte Reload
	movq	7648(%rsp), %rdx        # 8-byte Reload
	movq	7968(%rsp), %rcx        # 8-byte Reload
	movq	7608(%rsp), %r8         # 8-byte Reload
	movq	7520(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	7648(%rsp), %rdi        # 8-byte Reload
	movq	7984(%rsp), %rsi        # 8-byte Reload
	vmovsd	7576(%rsp), %xmm0       # 8-byte Reload
	movq	7648(%rsp), %rdx        # 8-byte Reload
	movq	7976(%rsp), %rcx        # 8-byte Reload
	movq	7608(%rsp), %r8         # 8-byte Reload
	movq	7520(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	7440(%rsp), %xmm0       # 8-byte Reload
	vmovsd	7576(%rsp), %xmm1       # 8-byte Reload
	vucomisd	%xmm1, %xmm0
	setb	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	7992(%rsp), %rdi        # 8-byte Reload
	movq	7648(%rsp), %rsi        # 8-byte Reload
	movq	7648(%rsp), %rcx        # 8-byte Reload
	movq	7624(%rsp), %r8         # 8-byte Reload
	movq	7608(%rsp), %r9         # 8-byte Reload
	movq	7520(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 7439(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	7536(%rsp), %rdi        # 8-byte Reload
	movq	7568(%rsp), %rsi        # 8-byte Reload
	movq	7560(%rsp), %rdx        # 8-byte Reload
	movq	8000(%rsp), %rcx        # 8-byte Reload
	movq	7512(%rsp), %r8         # 8-byte Reload
	movl	8008(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	7496(%rsp), %rdi        # 8-byte Reload
	movq	7608(%rsp), %rsi        # 8-byte Reload
	movq	7608(%rsp), %rdx        # 8-byte Reload
	movq	7648(%rsp), %rcx        # 8-byte Reload
	movq	7528(%rsp), %r8         # 8-byte Reload
	movq	7608(%rsp), %r9         # 8-byte Reload
	movq	7520(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	7512(%rsp), %rdi        # 8-byte Reload
	movq	7608(%rsp), %rsi        # 8-byte Reload
	movq	7608(%rsp), %rdx        # 8-byte Reload
	movq	7648(%rsp), %rcx        # 8-byte Reload
	movq	7504(%rsp), %r8         # 8-byte Reload
	movq	7608(%rsp), %r9         # 8-byte Reload
	movq	7520(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	7439(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, %edx
	movq	7648(%rsp), %rdi        # 8-byte Reload
	movq	7648(%rsp), %rsi        # 8-byte Reload
	movq	7648(%rsp), %rcx        # 8-byte Reload
	movq	7624(%rsp), %r8         # 8-byte Reload
	movq	7608(%rsp), %r9         # 8-byte Reload
	movq	7520(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	7439(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	vmovsd	7600(%rsp), %xmm0       # 8-byte Reload
	vmovsd	7584(%rsp), %xmm1       # 8-byte Reload
	vmovsd	7576(%rsp), %xmm2       # 8-byte Reload
	vmovsd	%xmm0, 7424(%rsp)       # 8-byte Spill
	vmovsd	%xmm1, 7416(%rsp)       # 8-byte Spill
	vmovsd	%xmm2, 7408(%rsp)       # 8-byte Spill
	jne	.LBB10_7
.Ltmp395:
# BB#6:                                 #   in Loop: Header=BB10_5 Depth=1
	movabsq	$1, %rax
	movabsq	$0, %rcx
	leaq	.L.str2599, %r8
	leaq	.L.str781, %rdx
	movabsq	$478, %rdi              # imm = 0x1DE
	leaq	.L.str62136, %rsi
	leaq	.L.str401, %r9
	leaq	.L.str402, %r10
	movabsq	$2, %r11
	movl	$0, %ebx
	movl	$1, %ebp
	movabsq	$19134, %r14            # imm = 0x4ABE
	movabsq	$64, %r15
	leaq	.L.str98, %r12
	leaq	.L.str97, %r13
	movq	%rax, 7400(%rsp)        # 8-byte Spill
	movabsq	$477, %rax              # imm = 0x1DD
	movq	%rax, 7392(%rsp)        # 8-byte Spill
	movabsq	$13, %rax
	vmovsd	.LCPI10_1, %xmm0
	movq	%rax, 7384(%rsp)        # 8-byte Spill
	leaq	.L.str96, %rax
	movq	%rax, 7376(%rsp)        # 8-byte Spill
	leaq	.L.str1488, %rax
	movq	%rax, 7368(%rsp)        # 8-byte Spill
	movabsq	$476, %rax              # imm = 0x1DC
	movq	%rax, 7360(%rsp)        # 8-byte Spill
	leaq	.L.str37111, %rax
	movq	%rax, 7352(%rsp)        # 8-byte Spill
	leaq	fabs, %rax
	movq	%rax, 7344(%rsp)        # 8-byte Spill
	leaq	.L.str680, %rax
	movq	%rax, 7336(%rsp)        # 8-byte Spill
	movabsq	$49, %rax
.Ltmp396:
	#DEBUG_VALUE: tqlrat:t <- [RSP+7440]
	.loc	2 476 0                 # eispack.c:476:0
	movq	%rax, 7328(%rsp)        # 8-byte Spill
	movq	7360(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 7320(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 7312(%rsp)        # 8-byte Spill
	movq	%rdx, 7304(%rsp)        # 8-byte Spill
	movq	%r9, %rdx
	movq	7376(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 7296(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	7328(%rsp), %rax        # 8-byte Reload
	movq	%r8, 7288(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 7280(%rsp)         # 8-byte Spill
	movl	%ebx, %r9d
	movl	$1, (%rsp)
	movq	%r15, 7272(%rsp)        # 8-byte Spill
	movq	%r14, 7264(%rsp)        # 8-byte Spill
	movq	%r12, 7256(%rsp)        # 8-byte Spill
	vmovsd	%xmm0, 7248(%rsp)       # 8-byte Spill
	movq	%r13, 7240(%rsp)        # 8-byte Spill
	movl	%ebp, 7236(%rsp)        # 4-byte Spill
	movq	%r10, 7224(%rsp)        # 8-byte Spill
	movq	%r11, 7216(%rsp)        # 8-byte Spill
	movl	%ebx, 7212(%rsp)        # 4-byte Spill
	callq	trace_logger_log0
	movq	7216(%rsp), %rdi        # 8-byte Reload
	movq	7272(%rsp), %rsi        # 8-byte Reload
	movq	7344(%rsp), %rdx        # 8-byte Reload
	movq	7400(%rsp), %rcx        # 8-byte Reload
	movq	7336(%rsp), %r8         # 8-byte Reload
	movq	7296(%rsp), %r9         # 8-byte Reload
	movq	7304(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	7400(%rsp), %rdi        # 8-byte Reload
	movq	7272(%rsp), %rsi        # 8-byte Reload
	vmovsd	7440(%rsp), %xmm0       # 8-byte Reload
	movq	7400(%rsp), %rdx        # 8-byte Reload
	movq	7352(%rsp), %rcx        # 8-byte Reload
	movq	7296(%rsp), %r8         # 8-byte Reload
	movq	7304(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	.LCPI10_0(%rip), %xmm0
	vmovsd	7440(%rsp), %xmm1       # 8-byte Reload
	vandpd	%xmm0, %xmm1, %xmm0
	movq	7264(%rsp), %rdi        # 8-byte Reload
	movq	7272(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 7200(%rsp)       # 8-byte Spill
	movq	7400(%rsp), %rdx        # 8-byte Reload
	movq	7376(%rsp), %rcx        # 8-byte Reload
	movq	7296(%rsp), %r8         # 8-byte Reload
	movq	7304(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	7360(%rsp), %rdi        # 8-byte Reload
	movq	7312(%rsp), %rsi        # 8-byte Reload
	movq	7280(%rsp), %rdx        # 8-byte Reload
	movq	7240(%rsp), %rcx        # 8-byte Reload
	movq	7384(%rsp), %r8         # 8-byte Reload
	movl	7212(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	7216(%rsp), %rdi        # 8-byte Reload
	movq	7272(%rsp), %rsi        # 8-byte Reload
	vmovsd	7248(%rsp), %xmm0       # 8-byte Reload
	movq	7296(%rsp), %rdx        # 8-byte Reload
	movq	7368(%rsp), %rcx        # 8-byte Reload
	movq	7296(%rsp), %r8         # 8-byte Reload
	movq	7304(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	7400(%rsp), %rdi        # 8-byte Reload
	movq	7272(%rsp), %rsi        # 8-byte Reload
	vmovsd	7200(%rsp), %xmm0       # 8-byte Reload
	movq	7400(%rsp), %rdx        # 8-byte Reload
	movq	7376(%rsp), %rcx        # 8-byte Reload
	movq	7296(%rsp), %r8         # 8-byte Reload
	movq	7304(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	7200(%rsp), %xmm0       # 8-byte Reload
	vmovsd	7248(%rsp), %xmm1       # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	7264(%rsp), %rdi        # 8-byte Reload
	movq	7272(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	7400(%rsp), %rdx        # 8-byte Reload
	movq	7240(%rsp), %rcx        # 8-byte Reload
	movq	7296(%rsp), %r8         # 8-byte Reload
	movq	7304(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 7192(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
.Ltmp397:
	#DEBUG_VALUE: tqlrat:b <- [RSP+7192]
	.loc	2 477 0                 # eispack.c:477:0
	movq	7392(%rsp), %rdi        # 8-byte Reload
	movq	7312(%rsp), %rsi        # 8-byte Reload
	movq	7280(%rsp), %rdx        # 8-byte Reload
	movq	7256(%rsp), %rcx        # 8-byte Reload
	movq	7384(%rsp), %r8         # 8-byte Reload
	movl	7212(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	7216(%rsp), %rdi        # 8-byte Reload
	movq	7272(%rsp), %rsi        # 8-byte Reload
	vmovsd	7192(%rsp), %xmm0       # 8-byte Reload
	movq	7400(%rsp), %rdx        # 8-byte Reload
	movq	7240(%rsp), %rcx        # 8-byte Reload
	movq	7296(%rsp), %r8         # 8-byte Reload
	movq	7304(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	7400(%rsp), %rdi        # 8-byte Reload
	movq	7272(%rsp), %rsi        # 8-byte Reload
	vmovsd	7192(%rsp), %xmm0       # 8-byte Reload
	movq	7400(%rsp), %rdx        # 8-byte Reload
	movq	7240(%rsp), %rcx        # 8-byte Reload
	movq	7296(%rsp), %r8         # 8-byte Reload
	movq	7304(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	7192(%rsp), %xmm0       # 8-byte Reload
	vmulsd	%xmm0, %xmm0, %xmm1
	movq	7264(%rsp), %rdi        # 8-byte Reload
	movq	7272(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm1, %xmm0
	movq	7400(%rsp), %rdx        # 8-byte Reload
	movq	7256(%rsp), %rcx        # 8-byte Reload
	movq	7296(%rsp), %r8         # 8-byte Reload
	movq	7304(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm1, 7184(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
.Ltmp398:
	#DEBUG_VALUE: tqlrat:c <- [RSP+7184]
	.loc	2 478 0                 # eispack.c:478:0
	movq	7320(%rsp), %rdi        # 8-byte Reload
	movq	7312(%rsp), %rsi        # 8-byte Reload
	movq	7280(%rsp), %rdx        # 8-byte Reload
	movq	7224(%rsp), %rcx        # 8-byte Reload
	movq	7216(%rsp), %r8         # 8-byte Reload
	movl	7212(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	7400(%rsp), %rdi        # 8-byte Reload
	movq	7296(%rsp), %rsi        # 8-byte Reload
	movq	7296(%rsp), %rdx        # 8-byte Reload
	movq	7400(%rsp), %rcx        # 8-byte Reload
	movq	7288(%rsp), %r8         # 8-byte Reload
	movq	7296(%rsp), %r9         # 8-byte Reload
	movq	7304(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	vmovsd	7184(%rsp), %xmm0       # 8-byte Reload
	vmovsd	7192(%rsp), %xmm1       # 8-byte Reload
	vmovsd	7440(%rsp), %xmm2       # 8-byte Reload
	vmovsd	%xmm0, 7424(%rsp)       # 8-byte Spill
	vmovsd	%xmm1, 7416(%rsp)       # 8-byte Spill
	vmovsd	%xmm2, 7408(%rsp)       # 8-byte Spill
.Ltmp399:
.LBB10_7:                               # %.lr.ph
                                        #   in Loop: Header=BB10_5 Depth=1
	vmovsd	7408(%rsp), %xmm0       # 8-byte Reload
	vmovsd	7416(%rsp), %xmm1       # 8-byte Reload
	vmovsd	7424(%rsp), %xmm2       # 8-byte Reload
	movabsq	$1, %rax
	movabsq	$0, %rcx
	leaq	.L.str404, %r8
	leaq	.L.str781, %rdx
	movabsq	$482, %rdi              # imm = 0x1E2
	leaq	.L.str62136, %rsi
	leaq	.L.str2599, %r9
	leaq	.L.str403, %r10
	movabsq	$2, %r11
	movl	$0, %ebx
	movl	$1, %ebp
	movabsq	$19134, %r14            # imm = 0x4ABE
	movabsq	$64, %r15
	leaq	.L.str392, %r12
	leaq	.L.str401, %r13
	movq	%rax, 7176(%rsp)        # 8-byte Spill
	leaq	.L.str37111, %rax
	movq	%rax, 7168(%rsp)        # 8-byte Spill
	leaq	.L.str391, %rax
	movq	%rax, 7160(%rsp)        # 8-byte Spill
	leaq	.L.str383, %rax
	movq	%rax, 7152(%rsp)        # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 7144(%rsp)        # 8-byte Spill
	movabsq	$48, %rax
	movq	%rax, 7136(%rsp)        # 8-byte Spill
	leaq	.L.str394, %rax
	movq	%rax, 7128(%rsp)        # 8-byte Spill
	leaq	.L.str97, %rax
	movq	%rax, 7120(%rsp)        # 8-byte Spill
	leaq	.L.str393, %rax
	movq	%rax, 7112(%rsp)        # 8-byte Spill
	leaq	.L.str399, %rax
	movq	%rax, 7104(%rsp)        # 8-byte Spill
	leaq	.L.str98, %rax
	movq	%rax, 7096(%rsp)        # 8-byte Spill
	leaq	.L.str398, %rax
	.loc	2 482 0                 # eispack.c:482:0
.Ltmp400:
	movq	%rax, 7088(%rsp)        # 8-byte Spill
	movq	7144(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 7080(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 7072(%rsp)        # 8-byte Spill
	movq	%rdx, 7064(%rsp)        # 8-byte Spill
	movq	%r9, %rdx
	movq	7104(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 7056(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	7136(%rsp), %rax        # 8-byte Reload
	movq	%r8, 7048(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 7040(%rsp)         # 8-byte Spill
	movl	%ebx, %r9d
	movl	$1, (%rsp)
	vmovsd	%xmm0, 7032(%rsp)       # 8-byte Spill
	vmovsd	%xmm1, 7024(%rsp)       # 8-byte Spill
	vmovsd	%xmm2, 7016(%rsp)       # 8-byte Spill
	movq	%r14, 7008(%rsp)        # 8-byte Spill
	movl	%ebp, 7004(%rsp)        # 4-byte Spill
	movq	%r15, 6992(%rsp)        # 8-byte Spill
	movq	%r13, 6984(%rsp)        # 8-byte Spill
	movq	%r12, 6976(%rsp)        # 8-byte Spill
	movl	%ebx, 6972(%rsp)        # 4-byte Spill
	movq	%r10, 6960(%rsp)        # 8-byte Spill
	movq	%r11, 6952(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	6952(%rsp), %rdi        # 8-byte Reload
	movq	6992(%rsp), %rsi        # 8-byte Reload
	movq	7056(%rsp), %rdx        # 8-byte Reload
	movq	7176(%rsp), %rcx        # 8-byte Reload
	movq	7088(%rsp), %r8         # 8-byte Reload
	movq	7176(%rsp), %r9         # 8-byte Reload
	movq	7152(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	7176(%rsp), %rdi        # 8-byte Reload
	movq	6992(%rsp), %rsi        # 8-byte Reload
	movq	7056(%rsp), %rdx        # 8-byte Reload
	movq	7176(%rsp), %rcx        # 8-byte Reload
	movq	7096(%rsp), %r8         # 8-byte Reload
	movq	7176(%rsp), %r9         # 8-byte Reload
	movq	6984(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	7008(%rsp), %rdi        # 8-byte Reload
	movq	6992(%rsp), %rsi        # 8-byte Reload
	vmovsd	7016(%rsp), %xmm0       # 8-byte Reload
	movq	7176(%rsp), %rdx        # 8-byte Reload
	movq	7104(%rsp), %rcx        # 8-byte Reload
	movq	7056(%rsp), %r8         # 8-byte Reload
	movq	6984(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	7144(%rsp), %rdi        # 8-byte Reload
	movq	7072(%rsp), %rsi        # 8-byte Reload
	movq	7040(%rsp), %rdx        # 8-byte Reload
	movq	7128(%rsp), %rcx        # 8-byte Reload
	movq	7136(%rsp), %r8         # 8-byte Reload
	movl	6972(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	6952(%rsp), %rdi        # 8-byte Reload
	movq	6992(%rsp), %rsi        # 8-byte Reload
	movq	7056(%rsp), %rdx        # 8-byte Reload
	movq	7176(%rsp), %rcx        # 8-byte Reload
	movq	7112(%rsp), %r8         # 8-byte Reload
	movq	7176(%rsp), %r9         # 8-byte Reload
	movq	7152(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	7176(%rsp), %rdi        # 8-byte Reload
	movq	6992(%rsp), %rsi        # 8-byte Reload
	movq	7056(%rsp), %rdx        # 8-byte Reload
	movq	7176(%rsp), %rcx        # 8-byte Reload
	movq	7120(%rsp), %r8         # 8-byte Reload
	movq	7176(%rsp), %r9         # 8-byte Reload
	movq	6984(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	7008(%rsp), %rdi        # 8-byte Reload
	movq	6992(%rsp), %rsi        # 8-byte Reload
	vmovsd	7024(%rsp), %xmm0       # 8-byte Reload
	movq	7176(%rsp), %rdx        # 8-byte Reload
	movq	7128(%rsp), %rcx        # 8-byte Reload
	movq	7056(%rsp), %r8         # 8-byte Reload
	movq	6984(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	7144(%rsp), %rdi        # 8-byte Reload
	movq	7072(%rsp), %rsi        # 8-byte Reload
	movq	7040(%rsp), %rdx        # 8-byte Reload
	movq	6976(%rsp), %rcx        # 8-byte Reload
	movq	7136(%rsp), %r8         # 8-byte Reload
	movl	6972(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	6952(%rsp), %rdi        # 8-byte Reload
	movq	6992(%rsp), %rsi        # 8-byte Reload
	movq	7056(%rsp), %rdx        # 8-byte Reload
	movq	7176(%rsp), %rcx        # 8-byte Reload
	movq	7160(%rsp), %r8         # 8-byte Reload
	movq	7176(%rsp), %r9         # 8-byte Reload
	movq	7152(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	7176(%rsp), %rdi        # 8-byte Reload
	movq	6992(%rsp), %rsi        # 8-byte Reload
	movq	7056(%rsp), %rdx        # 8-byte Reload
	movq	7176(%rsp), %rcx        # 8-byte Reload
	movq	7168(%rsp), %r8         # 8-byte Reload
	movq	7176(%rsp), %r9         # 8-byte Reload
	movq	6984(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	7008(%rsp), %rdi        # 8-byte Reload
	movq	6992(%rsp), %rsi        # 8-byte Reload
	vmovsd	7032(%rsp), %xmm0       # 8-byte Reload
	movq	7176(%rsp), %rdx        # 8-byte Reload
	movq	6976(%rsp), %rcx        # 8-byte Reload
	movq	7056(%rsp), %r8         # 8-byte Reload
	movq	6984(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
.Ltmp401:
	#DEBUG_VALUE: tqlrat:m <- [RSP+8012]
	movq	7080(%rsp), %rdi        # 8-byte Reload
	movq	7072(%rsp), %rsi        # 8-byte Reload
	movq	7040(%rsp), %rdx        # 8-byte Reload
	movq	6960(%rsp), %rcx        # 8-byte Reload
	movq	6952(%rsp), %r8         # 8-byte Reload
	movl	6972(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	7176(%rsp), %rdi        # 8-byte Reload
	movq	7056(%rsp), %rsi        # 8-byte Reload
	movq	7056(%rsp), %rdx        # 8-byte Reload
	movq	7176(%rsp), %rcx        # 8-byte Reload
	movq	7048(%rsp), %r8         # 8-byte Reload
	movq	7056(%rsp), %r9         # 8-byte Reload
	movq	7064(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	7640(%rsp), %rax        # 8-byte Reload
	movl	8012(%rsp), %ebx        # 4-byte Reload
	movq	%rax, 6944(%rsp)        # 8-byte Spill
	movl	%ebx, 6940(%rsp)        # 4-byte Spill
	jmp	.LBB10_9
.Ltmp402:
.LBB10_8:                               #   in Loop: Header=BB10_9 Depth=2
	movabsq	$1, %rax
	leaq	.L.str111, %rcx
	movabsq	$0, %rdx
	leaq	.L.str781, %rsi
	movabsq	$2, %rdi
	leaq	.L.str408, %r8
	movabsq	$3, %r9
	leaq	.L.str404, %r10
	movabsq	$482, %r11              # imm = 0x1E2
	leaq	.L.str62136, %rbx
	leaq	.L.str405, %r14
	leaq	.L.str407, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 6928(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 6920(%rsp)        # 8-byte Spill
	leaq	.L.str110, %rax
	movq	%rax, 6912(%rsp)        # 8-byte Spill
	leaq	.L.str51125, %rax
	movq	%rax, 6904(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 6896(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 6888(%rsp)        # 8-byte Spill
	leaq	.L.str406, %rax
	movq	%rax, 6880(%rsp)        # 8-byte Spill
	movabsq	$33, %rax
	movq	%rdi, 6872(%rsp)        # 8-byte Spill
	movq	%r11, %rdi
	movq	%rsi, 6864(%rsp)        # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, 6856(%rsp)        # 8-byte Spill
	movq	%r14, %rdx
	movq	%rax, 6848(%rsp)        # 8-byte Spill
	movq	6912(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 6840(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	6848(%rsp), %rax        # 8-byte Reload
	movq	%r8, 6832(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 6824(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r15, 6816(%rsp)        # 8-byte Spill
	movl	%ebp, 6812(%rsp)        # 4-byte Spill
	movl	%r12d, 6808(%rsp)       # 4-byte Spill
	movq	%r13, 6800(%rsp)        # 8-byte Spill
	movq	%r14, 6792(%rsp)        # 8-byte Spill
	movq	%rbx, 6784(%rsp)        # 8-byte Spill
	movq	%r10, 6776(%rsp)        # 8-byte Spill
	movq	%r11, 6768(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	6928(%rsp), %rdi        # 8-byte Reload
	movq	6888(%rsp), %rsi        # 8-byte Reload
	movq	6760(%rsp), %rdx        # 8-byte Reload
	movq	6928(%rsp), %rcx        # 8-byte Reload
	movq	6880(%rsp), %r8         # 8-byte Reload
	movq	6856(%rsp), %r9         # 8-byte Reload
	movq	6864(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	6760(%rsp), %rax        # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	6800(%rsp), %rdi        # 8-byte Reload
	movq	6920(%rsp), %rsi        # 8-byte Reload
	movq	6928(%rsp), %rcx        # 8-byte Reload
	movq	6912(%rsp), %r8         # 8-byte Reload
	movq	6856(%rsp), %r9         # 8-byte Reload
	movq	6864(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 6756(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	6768(%rsp), %rdi        # 8-byte Reload
	movq	6784(%rsp), %rsi        # 8-byte Reload
	movq	6792(%rsp), %rdx        # 8-byte Reload
	movq	6840(%rsp), %rcx        # 8-byte Reload
	movq	6896(%rsp), %r8         # 8-byte Reload
	movl	6812(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	9228(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	6872(%rsp), %rdi        # 8-byte Reload
	movq	6920(%rsp), %rsi        # 8-byte Reload
	movq	6928(%rsp), %rcx        # 8-byte Reload
	movq	6904(%rsp), %r8         # 8-byte Reload
	movq	6856(%rsp), %r9         # 8-byte Reload
	movq	6864(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	6756(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	6928(%rsp), %rdi        # 8-byte Reload
	movq	6920(%rsp), %rsi        # 8-byte Reload
	movq	6928(%rsp), %rcx        # 8-byte Reload
	movq	6912(%rsp), %r8         # 8-byte Reload
	movq	6856(%rsp), %r9         # 8-byte Reload
	movq	6864(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	6756(%rsp), %ebp        # 4-byte Reload
	movl	9228(%rsp), %r12d       # 4-byte Reload
	cmpl	%r12d, %ebp
	setl	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	6800(%rsp), %rdi        # 8-byte Reload
	movq	6928(%rsp), %rsi        # 8-byte Reload
	movq	6928(%rsp), %rcx        # 8-byte Reload
	movq	6840(%rsp), %r8         # 8-byte Reload
	movq	6856(%rsp), %r9         # 8-byte Reload
	movq	6864(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 6755(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	6768(%rsp), %rdi        # 8-byte Reload
	movq	6784(%rsp), %rsi        # 8-byte Reload
	movq	6792(%rsp), %rdx        # 8-byte Reload
	movq	6816(%rsp), %rcx        # 8-byte Reload
	movq	6872(%rsp), %r8         # 8-byte Reload
	movl	6812(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	6824(%rsp), %rdi        # 8-byte Reload
	movq	6856(%rsp), %rsi        # 8-byte Reload
	movq	6856(%rsp), %rdx        # 8-byte Reload
	movq	6928(%rsp), %rcx        # 8-byte Reload
	movq	6776(%rsp), %r8         # 8-byte Reload
	movq	6856(%rsp), %r9         # 8-byte Reload
	movq	6864(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	6872(%rsp), %rdi        # 8-byte Reload
	movq	6856(%rsp), %rsi        # 8-byte Reload
	movq	6856(%rsp), %rdx        # 8-byte Reload
	movq	6928(%rsp), %rcx        # 8-byte Reload
	movq	6832(%rsp), %r8         # 8-byte Reload
	movq	6856(%rsp), %r9         # 8-byte Reload
	movq	6864(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	6755(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	6928(%rsp), %rdi        # 8-byte Reload
	movq	6928(%rsp), %rsi        # 8-byte Reload
	movq	6928(%rsp), %rcx        # 8-byte Reload
	movq	6840(%rsp), %r8         # 8-byte Reload
	movq	6856(%rsp), %r9         # 8-byte Reload
	movq	6864(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	6755(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	movq	6760(%rsp), %rcx        # 8-byte Reload
	movl	6748(%rsp), %ebp        # 4-byte Reload
	movl	6748(%rsp), %r12d       # 4-byte Reload
	movq	%rcx, 6944(%rsp)        # 8-byte Spill
	movl	%ebp, 6940(%rsp)        # 4-byte Spill
	movl	%r12d, 6744(%rsp)       # 4-byte Spill
	jne	.LBB10_9
	jmp	.LBB10_10
.LBB10_9:                               #   Parent Loop BB10_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	6940(%rsp), %eax        # 4-byte Reload
	movq	6944(%rsp), %rcx        # 8-byte Reload
	movabsq	$1, %rdx
	leaq	.L.str118, %rsi
	movabsq	$0, %rdi
	leaq	.L.str781, %r8
	movabsq	$2, %r9
	leaq	.L.str408, %r10
	movabsq	$3, %r11
	leaq	.L.str405, %rbx
	movabsq	$484, %r14              # imm = 0x1E4
	leaq	.L.str62136, %r15
	leaq	.L.str404, %r12
	leaq	.L.str411, %r13
	movl	$0, %ebp
	movl	%eax, 6740(%rsp)        # 4-byte Spill
	movl	$1, %eax
	movq	%rcx, 6728(%rsp)        # 8-byte Spill
	movabsq	$19134, %rcx            # imm = 0x4ABE
	movq	%rcx, 6720(%rsp)        # 8-byte Spill
	movabsq	$32, %rcx
	movq	%rcx, 6712(%rsp)        # 8-byte Spill
	leaq	.L.str126, %rcx
	movq	%rcx, 6704(%rsp)        # 8-byte Spill
	leaq	.L.str410, %rcx
	movq	%rcx, 6696(%rsp)        # 8-byte Spill
	leaq	.L.str1488, %rcx
	movq	%rcx, 6688(%rsp)        # 8-byte Spill
	movabsq	$482, %rcx              # imm = 0x1E2
	movq	%rcx, 6680(%rsp)        # 8-byte Spill
	movabsq	$8, %rcx
	movq	%rcx, 6672(%rsp)        # 8-byte Spill
	movabsq	$64, %rcx
	movq	%rcx, 6664(%rsp)        # 8-byte Spill
	leaq	.L.str406, %rcx
	movq	%rcx, 6656(%rsp)        # 8-byte Spill
	leaq	.L.str409, %rcx
	movq	%rcx, 6648(%rsp)        # 8-byte Spill
	leaq	.L.str121, %rcx
	movq	%rcx, 6640(%rsp)        # 8-byte Spill
	leaq	.L.str399, %rcx
	movq	%rcx, 6632(%rsp)        # 8-byte Spill
	movabsq	$47, %rcx
	movq	%rcx, 6624(%rsp)        # 8-byte Spill
	leaq	.L.str120, %rcx
	movq	%rcx, 6616(%rsp)        # 8-byte Spill
	movabsq	$27, %rcx
	movq	%rcx, 6608(%rsp)        # 8-byte Spill
	leaq	.L.str160, %rcx
	movq	%rcx, 6600(%rsp)        # 8-byte Spill
	movabsq	$29, %rcx
	movq	%rcx, 6592(%rsp)        # 8-byte Spill
	leaq	.L.str2599, %rcx
	movq	%rcx, 6584(%rsp)        # 8-byte Spill
	leaq	.L.str395, %rcx
	movq	%rcx, 6576(%rsp)        # 8-byte Spill
	movabsq	$-1, %rcx
	movq	%rcx, 6568(%rsp)        # 8-byte Spill
	movabsq	$48, %rcx
	movq	%rcx, 6560(%rsp)        # 8-byte Spill
	leaq	.L.str384, %rcx
	.loc	2 484 0                 # eispack.c:484:0
.Ltmp403:
	movq	%rcx, 6552(%rsp)        # 8-byte Spill
	movq	6568(%rsp), %rcx        # 8-byte Reload
	movq	%rdi, 6544(%rsp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	%rsi, 6536(%rsp)        # 8-byte Spill
	movq	%r15, %rsi
	movq	%rdx, 6528(%rsp)        # 8-byte Spill
	movq	%r12, %rdx
	movq	6648(%rsp), %rcx        # 8-byte Reload
	movq	%r8, 6520(%rsp)         # 8-byte Spill
	movq	6560(%rsp), %r8         # 8-byte Reload
	movq	%r9, 6512(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movl	%eax, 6508(%rsp)        # 4-byte Spill
	movq	%r15, 6496(%rsp)        # 8-byte Spill
	movq	%r12, 6488(%rsp)        # 8-byte Spill
	movq	%r13, 6480(%rsp)        # 8-byte Spill
	movl	%ebp, 6476(%rsp)        # 4-byte Spill
	movq	%r14, 6464(%rsp)        # 8-byte Spill
	movq	%rbx, 6456(%rsp)        # 8-byte Spill
	movq	%r10, 6448(%rsp)        # 8-byte Spill
	movq	%r11, 6440(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	6512(%rsp), %rdi        # 8-byte Reload
	movq	6664(%rsp), %rsi        # 8-byte Reload
	movq	6544(%rsp), %rdx        # 8-byte Reload
	movq	6528(%rsp), %rcx        # 8-byte Reload
	movq	6656(%rsp), %r8         # 8-byte Reload
	movq	6528(%rsp), %r9         # 8-byte Reload
	movq	6456(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	6528(%rsp), %rdi        # 8-byte Reload
	movq	6664(%rsp), %rsi        # 8-byte Reload
	movq	6544(%rsp), %rdx        # 8-byte Reload
	movq	6528(%rsp), %rcx        # 8-byte Reload
	movq	6552(%rsp), %r8         # 8-byte Reload
	movq	6528(%rsp), %r9         # 8-byte Reload
	movq	6584(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	6720(%rsp), %rdi        # 8-byte Reload
	movq	6664(%rsp), %rsi        # 8-byte Reload
	movq	6728(%rsp), %rdx        # 8-byte Reload
	movq	6528(%rsp), %rcx        # 8-byte Reload
	movq	6648(%rsp), %r8         # 8-byte Reload
	movq	6544(%rsp), %r9         # 8-byte Reload
	movq	6584(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	6568(%rsp), %rdi        # 8-byte Reload
	movq	6496(%rsp), %rsi        # 8-byte Reload
	movq	6488(%rsp), %rdx        # 8-byte Reload
	movq	6696(%rsp), %rcx        # 8-byte Reload
	movq	6560(%rsp), %r8         # 8-byte Reload
	movl	6476(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	6512(%rsp), %rdi        # 8-byte Reload
	movq	6712(%rsp), %rsi        # 8-byte Reload
	movq	6544(%rsp), %rdx        # 8-byte Reload
	movq	6528(%rsp), %rcx        # 8-byte Reload
	movq	6704(%rsp), %r8         # 8-byte Reload
	movq	6528(%rsp), %r9         # 8-byte Reload
	movq	6456(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	6528(%rsp), %rdi        # 8-byte Reload
	movq	6712(%rsp), %rsi        # 8-byte Reload
	movq	6544(%rsp), %rdx        # 8-byte Reload
	movq	6528(%rsp), %rcx        # 8-byte Reload
	movq	6576(%rsp), %r8         # 8-byte Reload
	movq	6528(%rsp), %r9         # 8-byte Reload
	movq	6584(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	6740(%rsp), %eax        # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	6720(%rsp), %rdi        # 8-byte Reload
	movq	6712(%rsp), %rsi        # 8-byte Reload
	movq	6528(%rsp), %rcx        # 8-byte Reload
	movq	6696(%rsp), %r8         # 8-byte Reload
	movq	6544(%rsp), %r9         # 8-byte Reload
	movq	6584(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	6464(%rsp), %rdi        # 8-byte Reload
	movq	6496(%rsp), %rsi        # 8-byte Reload
	movq	6488(%rsp), %rdx        # 8-byte Reload
	movq	6616(%rsp), %rcx        # 8-byte Reload
	movq	6592(%rsp), %r8         # 8-byte Reload
	movl	6476(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	6512(%rsp), %rdi        # 8-byte Reload
	movq	6664(%rsp), %rsi        # 8-byte Reload
	movq	6728(%rsp), %rdx        # 8-byte Reload
	movq	6528(%rsp), %rcx        # 8-byte Reload
	movq	6648(%rsp), %r8         # 8-byte Reload
	movq	6544(%rsp), %r9         # 8-byte Reload
	movq	6520(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	6528(%rsp), %rdi        # 8-byte Reload
	movq	6664(%rsp), %rsi        # 8-byte Reload
	movq	9208(%rsp), %rdx        # 8-byte Reload
	movq	6528(%rsp), %rcx        # 8-byte Reload
	movq	6600(%rsp), %r8         # 8-byte Reload
	movq	6544(%rsp), %r9         # 8-byte Reload
	movq	6520(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	6728(%rsp), %rcx        # 8-byte Reload
	shlq	$3, %rcx
	movq	9208(%rsp), %rdx        # 8-byte Reload
	addq	%rcx, %rdx
	movq	6720(%rsp), %rdi        # 8-byte Reload
	movq	6664(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 6432(%rsp)        # 8-byte Spill
	movq	6528(%rsp), %rcx        # 8-byte Reload
	movq	6616(%rsp), %r8         # 8-byte Reload
	movq	6544(%rsp), %r9         # 8-byte Reload
	movq	6520(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	6464(%rsp), %rdi        # 8-byte Reload
	movq	6496(%rsp), %rsi        # 8-byte Reload
	movq	6488(%rsp), %rdx        # 8-byte Reload
	movq	6640(%rsp), %rcx        # 8-byte Reload
	movq	6608(%rsp), %r8         # 8-byte Reload
	movl	6476(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	6528(%rsp), %rdi        # 8-byte Reload
	movq	6664(%rsp), %rsi        # 8-byte Reload
	movq	6432(%rsp), %rdx        # 8-byte Reload
	movq	6528(%rsp), %rcx        # 8-byte Reload
	movq	6616(%rsp), %r8         # 8-byte Reload
	movq	6544(%rsp), %r9         # 8-byte Reload
	movq	6520(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	9208(%rsp), %rcx        # 8-byte Reload
	movq	6728(%rsp), %rdx        # 8-byte Reload
	vmovsd	(%rcx,%rdx,8), %xmm0
	movq	6720(%rsp), %rdi        # 8-byte Reload
	movq	6664(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 6424(%rsp)       # 8-byte Spill
	movq	6528(%rsp), %rdx        # 8-byte Reload
	movq	6640(%rsp), %rcx        # 8-byte Reload
	movq	6544(%rsp), %r8         # 8-byte Reload
	movq	6520(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	6464(%rsp), %rdi        # 8-byte Reload
	movq	6496(%rsp), %rsi        # 8-byte Reload
	movq	6488(%rsp), %rdx        # 8-byte Reload
	movq	6536(%rsp), %rcx        # 8-byte Reload
	movq	6624(%rsp), %r8         # 8-byte Reload
	movl	6476(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	6512(%rsp), %rdi        # 8-byte Reload
	movq	6664(%rsp), %rsi        # 8-byte Reload
	vmovsd	7016(%rsp), %xmm0       # 8-byte Reload
	movq	6528(%rsp), %rdx        # 8-byte Reload
	movq	6632(%rsp), %rcx        # 8-byte Reload
	movq	6544(%rsp), %r8         # 8-byte Reload
	movq	6520(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	6528(%rsp), %rdi        # 8-byte Reload
	movq	6664(%rsp), %rsi        # 8-byte Reload
	vmovsd	6424(%rsp), %xmm0       # 8-byte Reload
	movq	6528(%rsp), %rdx        # 8-byte Reload
	movq	6640(%rsp), %rcx        # 8-byte Reload
	movq	6544(%rsp), %r8         # 8-byte Reload
	movq	6520(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	7016(%rsp), %xmm0       # 8-byte Reload
	vmovsd	6424(%rsp), %xmm1       # 8-byte Reload
	vucomisd	%xmm1, %xmm0
	setb	%al
.Ltmp404:
	.loc	2 482 0                 # eispack.c:482:0
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ebp
	movl	%ebp, %edx
	movq	6720(%rsp), %rdi        # 8-byte Reload
	movq	6528(%rsp), %rsi        # 8-byte Reload
	movq	6528(%rsp), %rcx        # 8-byte Reload
	movq	6536(%rsp), %r8         # 8-byte Reload
	movq	6544(%rsp), %r9         # 8-byte Reload
	movq	6520(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 6423(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	6680(%rsp), %rdi        # 8-byte Reload
	movq	6496(%rsp), %rsi        # 8-byte Reload
	movq	6488(%rsp), %rdx        # 8-byte Reload
	movq	6656(%rsp), %rcx        # 8-byte Reload
	movq	6672(%rsp), %r8         # 8-byte Reload
	movl	6476(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	6512(%rsp), %rdi        # 8-byte Reload
	movq	6664(%rsp), %rsi        # 8-byte Reload
	movq	6528(%rsp), %rdx        # 8-byte Reload
	movq	6544(%rsp), %rcx        # 8-byte Reload
	movq	6688(%rsp), %r8         # 8-byte Reload
	movq	6544(%rsp), %r9         # 8-byte Reload
	movq	6520(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	6528(%rsp), %rdi        # 8-byte Reload
	movq	6664(%rsp), %rsi        # 8-byte Reload
	movq	6728(%rsp), %rdx        # 8-byte Reload
	movq	6528(%rsp), %rcx        # 8-byte Reload
	movq	6648(%rsp), %r8         # 8-byte Reload
	movq	6544(%rsp), %r9         # 8-byte Reload
	movq	6520(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	6728(%rsp), %rcx        # 8-byte Reload
	addq	$1, %rcx
	movq	6720(%rsp), %rdi        # 8-byte Reload
	movq	6664(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	6528(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 6760(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	6656(%rsp), %r8         # 8-byte Reload
	movq	6544(%rsp), %r9         # 8-byte Reload
	movq	6520(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	6680(%rsp), %rdi        # 8-byte Reload
	movq	6496(%rsp), %rsi        # 8-byte Reload
	movq	6488(%rsp), %rdx        # 8-byte Reload
	movq	6704(%rsp), %rcx        # 8-byte Reload
	movq	6672(%rsp), %r8         # 8-byte Reload
	movl	6476(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	6512(%rsp), %rdi        # 8-byte Reload
	movq	6712(%rsp), %rsi        # 8-byte Reload
	movq	6528(%rsp), %rdx        # 8-byte Reload
	movq	6544(%rsp), %rcx        # 8-byte Reload
	movq	6688(%rsp), %r8         # 8-byte Reload
	movq	6544(%rsp), %r9         # 8-byte Reload
	movq	6520(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	6740(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %eax
	movl	%eax, %edx
	movq	6528(%rsp), %rdi        # 8-byte Reload
	movq	6712(%rsp), %rsi        # 8-byte Reload
	movq	6528(%rsp), %rcx        # 8-byte Reload
	movq	6696(%rsp), %r8         # 8-byte Reload
	movq	6544(%rsp), %r9         # 8-byte Reload
	movq	6520(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	6740(%rsp), %eax        # 4-byte Reload
	addl	$1, %eax
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	6720(%rsp), %rdi        # 8-byte Reload
	movq	6712(%rsp), %rsi        # 8-byte Reload
	movq	6528(%rsp), %rcx        # 8-byte Reload
	movq	6704(%rsp), %r8         # 8-byte Reload
	movq	6544(%rsp), %r9         # 8-byte Reload
	movq	6520(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, 6748(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
.Ltmp405:
	#DEBUG_VALUE: tqlrat:m <- [RSP+6748]
	.loc	2 484 0                 # eispack.c:484:0
	movq	6464(%rsp), %rdi        # 8-byte Reload
	movq	6496(%rsp), %rsi        # 8-byte Reload
	movq	6488(%rsp), %rdx        # 8-byte Reload
	movq	6480(%rsp), %rcx        # 8-byte Reload
	movq	6512(%rsp), %r8         # 8-byte Reload
	movl	6476(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	6440(%rsp), %rdi        # 8-byte Reload
	movq	6544(%rsp), %rsi        # 8-byte Reload
	movq	6544(%rsp), %rdx        # 8-byte Reload
	movq	6528(%rsp), %rcx        # 8-byte Reload
	movq	6456(%rsp), %r8         # 8-byte Reload
	movq	6544(%rsp), %r9         # 8-byte Reload
	movq	6520(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	6512(%rsp), %rdi        # 8-byte Reload
	movq	6544(%rsp), %rsi        # 8-byte Reload
	movq	6544(%rsp), %rdx        # 8-byte Reload
	movq	6528(%rsp), %rcx        # 8-byte Reload
	movq	6448(%rsp), %r8         # 8-byte Reload
	movq	6544(%rsp), %r9         # 8-byte Reload
	movq	6520(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	6423(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	6528(%rsp), %rdi        # 8-byte Reload
	movq	6528(%rsp), %rsi        # 8-byte Reload
	movq	6528(%rsp), %rcx        # 8-byte Reload
	movq	6536(%rsp), %r8         # 8-byte Reload
	movq	6544(%rsp), %r9         # 8-byte Reload
	movq	6520(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	6423(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	movl	6740(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, 6744(%rsp)        # 4-byte Spill
	jne	.LBB10_8
.Ltmp406:
.LBB10_10:                              # %split2
                                        #   in Loop: Header=BB10_5 Depth=1
	movl	6744(%rsp), %eax        # 4-byte Reload
	movabsq	$1, %rcx
	leaq	.L.str138, %rdx
	movabsq	$0, %rsi
	leaq	.L.str781, %rdi
	movabsq	$2, %r8
	leaq	.L.str130, %r9
	movabsq	$3, %r10
	leaq	.L.str414, %r11
	movabsq	$490, %rbx              # imm = 0x1EA
	leaq	.L.str62136, %r14
	leaq	.L.str408, %r15
	leaq	.L.str413, %r12
	movl	$0, %ebp
	movl	$1, %r13d
	movq	%rcx, 6408(%rsp)        # 8-byte Spill
	movabsq	$19134, %rcx            # imm = 0x4ABE
	movq	%rcx, 6400(%rsp)        # 8-byte Spill
	movabsq	$32, %rcx
	movq	%rcx, 6392(%rsp)        # 8-byte Spill
	leaq	.L.str412, %rcx
	movq	%rcx, 6384(%rsp)        # 8-byte Spill
	leaq	.L.str127, %rcx
	movq	%rcx, 6376(%rsp)        # 8-byte Spill
	movabsq	$46, %rcx
	movq	%rcx, 6368(%rsp)        # 8-byte Spill
	movabsq	$64, %rcx
	movq	%rcx, 6360(%rsp)        # 8-byte Spill
	leaq	.L.str384, %rcx
	movq	%rcx, 6352(%rsp)        # 8-byte Spill
	movabsq	$33, %rcx
	movq	%rcx, 6344(%rsp)        # 8-byte Spill
	leaq	.L.str404, %rcx
	movq	%rcx, 6336(%rsp)        # 8-byte Spill
	leaq	.L.str410, %rcx
	movq	%rcx, 6328(%rsp)        # 8-byte Spill
	leaq	.L.str126, %rcx
	movq	%rcx, 6320(%rsp)        # 8-byte Spill
	leaq	.L.str405, %rcx
	movq	%rcx, 6312(%rsp)        # 8-byte Spill
	movabsq	$-1, %rcx
	movq	%rcx, 6304(%rsp)        # 8-byte Spill
	movabsq	$48, %rcx
	.loc	2 490 0                 # eispack.c:490:0
.Ltmp407:
	movq	%rcx, 6296(%rsp)        # 8-byte Spill
	movq	6304(%rsp), %rcx        # 8-byte Reload
	movq	%rdi, 6288(%rsp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	%rsi, 6280(%rsp)        # 8-byte Spill
	movq	%r14, %rsi
	movq	%rdx, 6272(%rsp)        # 8-byte Spill
	movq	%r15, %rdx
	movq	6384(%rsp), %rcx        # 8-byte Reload
	movq	%r8, 6264(%rsp)         # 8-byte Spill
	movq	6296(%rsp), %r8         # 8-byte Reload
	movq	%r9, 6256(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movl	%eax, 6252(%rsp)        # 4-byte Spill
	movq	%r15, 6240(%rsp)        # 8-byte Spill
	movq	%r12, 6232(%rsp)        # 8-byte Spill
	movl	%ebp, 6228(%rsp)        # 4-byte Spill
	movl	%r13d, 6224(%rsp)       # 4-byte Spill
	movq	%r14, 6216(%rsp)        # 8-byte Spill
	movq	%rbx, 6208(%rsp)        # 8-byte Spill
	movq	%r10, 6200(%rsp)        # 8-byte Spill
	movq	%r11, 6192(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	6264(%rsp), %rdi        # 8-byte Reload
	movq	6392(%rsp), %rsi        # 8-byte Reload
	movq	6280(%rsp), %rdx        # 8-byte Reload
	movq	6408(%rsp), %rcx        # 8-byte Reload
	movq	6320(%rsp), %r8         # 8-byte Reload
	movq	6408(%rsp), %r9         # 8-byte Reload
	movq	6312(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	6408(%rsp), %rdi        # 8-byte Reload
	movq	6392(%rsp), %rsi        # 8-byte Reload
	movq	6280(%rsp), %rdx        # 8-byte Reload
	movq	6408(%rsp), %rcx        # 8-byte Reload
	movq	6328(%rsp), %r8         # 8-byte Reload
	movq	6408(%rsp), %r9         # 8-byte Reload
	movq	6336(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	6252(%rsp), %eax        # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	6400(%rsp), %rdi        # 8-byte Reload
	movq	6392(%rsp), %rsi        # 8-byte Reload
	movq	6408(%rsp), %rcx        # 8-byte Reload
	movq	6384(%rsp), %r8         # 8-byte Reload
	movq	6280(%rsp), %r9         # 8-byte Reload
	movq	6336(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	6208(%rsp), %rdi        # 8-byte Reload
	movq	6216(%rsp), %rsi        # 8-byte Reload
	movq	6240(%rsp), %rdx        # 8-byte Reload
	movq	6376(%rsp), %rcx        # 8-byte Reload
	movq	6344(%rsp), %r8         # 8-byte Reload
	movl	6228(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	6408(%rsp), %rdi        # 8-byte Reload
	movq	6360(%rsp), %rsi        # 8-byte Reload
	movq	7640(%rsp), %rdx        # 8-byte Reload
	movq	6408(%rsp), %rcx        # 8-byte Reload
	movq	6352(%rsp), %r8         # 8-byte Reload
	movq	6280(%rsp), %r9         # 8-byte Reload
	movq	6288(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	7640(%rsp), %rcx        # 8-byte Reload
	movl	%ecx, %eax
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	6400(%rsp), %rdi        # 8-byte Reload
	movq	6392(%rsp), %rsi        # 8-byte Reload
	movq	6408(%rsp), %rcx        # 8-byte Reload
	movq	6376(%rsp), %r8         # 8-byte Reload
	movq	6280(%rsp), %r9         # 8-byte Reload
	movq	6288(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, 6188(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	6208(%rsp), %rdi        # 8-byte Reload
	movq	6216(%rsp), %rsi        # 8-byte Reload
	movq	6240(%rsp), %rdx        # 8-byte Reload
	movq	6272(%rsp), %rcx        # 8-byte Reload
	movq	6368(%rsp), %r8         # 8-byte Reload
	movl	6228(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	6188(%rsp), %eax        # 4-byte Reload
	movl	%eax, %r9d
	movl	%r9d, %edx
	movq	6264(%rsp), %rdi        # 8-byte Reload
	movq	6392(%rsp), %rsi        # 8-byte Reload
	movq	6408(%rsp), %rcx        # 8-byte Reload
	movq	6376(%rsp), %r8         # 8-byte Reload
	movq	6280(%rsp), %r9         # 8-byte Reload
	movq	6288(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	6252(%rsp), %eax        # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	6408(%rsp), %rdi        # 8-byte Reload
	movq	6392(%rsp), %rsi        # 8-byte Reload
	movq	6408(%rsp), %rcx        # 8-byte Reload
	movq	6384(%rsp), %r8         # 8-byte Reload
	movq	6280(%rsp), %r9         # 8-byte Reload
	movq	6288(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	6252(%rsp), %eax        # 4-byte Reload
	movl	6188(%rsp), %ebp        # 4-byte Reload
	cmpl	%ebp, %eax
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %r13d
	movl	%r13d, %edx
	movq	6400(%rsp), %rdi        # 8-byte Reload
	movq	6408(%rsp), %rsi        # 8-byte Reload
	movq	6408(%rsp), %rcx        # 8-byte Reload
	movq	6272(%rsp), %r8         # 8-byte Reload
	movq	6280(%rsp), %r9         # 8-byte Reload
	movq	6288(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 6187(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	6208(%rsp), %rdi        # 8-byte Reload
	movq	6216(%rsp), %rsi        # 8-byte Reload
	movq	6240(%rsp), %rdx        # 8-byte Reload
	movq	6232(%rsp), %rcx        # 8-byte Reload
	movq	6264(%rsp), %r8         # 8-byte Reload
	movl	6228(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	6200(%rsp), %rdi        # 8-byte Reload
	movq	6280(%rsp), %rsi        # 8-byte Reload
	movq	6280(%rsp), %rdx        # 8-byte Reload
	movq	6408(%rsp), %rcx        # 8-byte Reload
	movq	6192(%rsp), %r8         # 8-byte Reload
	movq	6280(%rsp), %r9         # 8-byte Reload
	movq	6288(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	6264(%rsp), %rdi        # 8-byte Reload
	movq	6280(%rsp), %rsi        # 8-byte Reload
	movq	6280(%rsp), %rdx        # 8-byte Reload
	movq	6408(%rsp), %rcx        # 8-byte Reload
	movq	6256(%rsp), %r8         # 8-byte Reload
	movq	6280(%rsp), %r9         # 8-byte Reload
	movq	6288(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	6187(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	6408(%rsp), %rdi        # 8-byte Reload
	movq	6408(%rsp), %rsi        # 8-byte Reload
	movq	6408(%rsp), %rcx        # 8-byte Reload
	movq	6272(%rsp), %r8         # 8-byte Reload
	movq	6280(%rsp), %r9         # 8-byte Reload
	movq	6288(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	6187(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	vmovsd	7592(%rsp), %xmm0       # 8-byte Reload
	vmovsd	%xmm0, 6176(%rsp)       # 8-byte Spill
	jne	.LBB10_21
# BB#11:                                # %.preheader
                                        #   in Loop: Header=BB10_5 Depth=1
	movl	$0, %eax
	movabsq	$1, %rcx
	movabsq	$0, %rdx
	leaq	.L.str415, %r8
	leaq	.L.str781, %rsi
	movabsq	$494, %rdi              # imm = 0x1EE
	leaq	.L.str62136, %r9
	leaq	.L.str130, %r10
	leaq	.L.str133, %r11
	movabsq	$2, %rbx
	movl	$1, %ebp
	movabsq	$19134, %r14            # imm = 0x4ABE
	movabsq	$32, %r15
	leaq	.L.str149, %r12
	leaq	.L.str412, %r13
	movq	%rcx, 6168(%rsp)        # 8-byte Spill
	leaq	.L.str387, %rcx
	movq	%rcx, 6160(%rsp)        # 8-byte Spill
	movabsq	$8, %rcx
	movq	%rcx, 6152(%rsp)        # 8-byte Spill
	leaq	.L.str148, %rcx
	movq	%rcx, 6144(%rsp)        # 8-byte Spill
	leaq	.L.str147, %rcx
	movq	%rcx, 6136(%rsp)        # 8-byte Spill
	leaq	.L.str1488, %rcx
	movq	%rcx, 6128(%rsp)        # 8-byte Spill
	movabsq	$529, %rcx              # imm = 0x211
	movq	%rcx, 6120(%rsp)        # 8-byte Spill
	movabsq	$46, %rcx
	movq	%rcx, 6112(%rsp)        # 8-byte Spill
	leaq	.L.str146, %rcx
	movq	%rcx, 6104(%rsp)        # 8-byte Spill
	movabsq	$527, %rcx              # imm = 0x20F
	movq	%rcx, 6096(%rsp)        # 8-byte Spill
	movabsq	$10, %rcx
	movq	%rcx, 6088(%rsp)        # 8-byte Spill
	movabsq	$64, %rcx
	movq	%rcx, 6080(%rsp)        # 8-byte Spill
	leaq	.L.str384, %rcx
	movq	%rcx, 6072(%rsp)        # 8-byte Spill
	movabsq	$33, %rcx
	movq	%rcx, 6064(%rsp)        # 8-byte Spill
	leaq	.L.str144, %rcx
	movq	%rcx, 6056(%rsp)        # 8-byte Spill
	leaq	.L.str82, %rcx
	movq	%rcx, 6048(%rsp)        # 8-byte Spill
	leaq	.L.str143, %rcx
	movq	%rcx, 6040(%rsp)        # 8-byte Spill
	movabsq	$519, %rcx              # imm = 0x207
	movq	%rcx, 6032(%rsp)        # 8-byte Spill
	movabsq	$29, %rcx
	movq	%rcx, 6024(%rsp)        # 8-byte Spill
	movabsq	$35, %rcx
	movq	%rcx, 6016(%rsp)        # 8-byte Spill
	leaq	.L.str142, %rcx
	movq	%rcx, 6008(%rsp)        # 8-byte Spill
	leaq	.L.str141, %rcx
	movq	%rcx, 6000(%rsp)        # 8-byte Spill
	leaq	.L.str51125, %rcx
	movq	%rcx, 5992(%rsp)        # 8-byte Spill
	movabsq	$511, %rcx              # imm = 0x1FF
	movq	%rcx, 5984(%rsp)        # 8-byte Spill
	leaq	.L.str139, %rcx
	movq	%rcx, 5976(%rsp)        # 8-byte Spill
	leaq	.L.str140, %rcx
	movq	%rcx, 5968(%rsp)        # 8-byte Spill
	movabsq	$507, %rcx              # imm = 0x1FB
	movq	%rcx, 5960(%rsp)        # 8-byte Spill
	movabsq	$504, %rcx              # imm = 0x1F8
	.loc	2 504 0                 # eispack.c:504:0
.Ltmp408:
	movq	%rdi, 5952(%rsp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	%rsi, 5944(%rsp)        # 8-byte Spill
	movq	%r9, %rsi
	movq	%rdx, 5936(%rsp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	5976(%rsp), %rcx        # 8-byte Reload
	movq	%r8, 5928(%rsp)         # 8-byte Spill
	movq	6152(%rsp), %r8         # 8-byte Reload
	movq	%r9, 5920(%rsp)         # 8-byte Spill
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movl	%eax, 5916(%rsp)        # 4-byte Spill
	movq	%r13, 5904(%rsp)        # 8-byte Spill
	movq	%r14, 5896(%rsp)        # 8-byte Spill
	movl	%ebp, 5892(%rsp)        # 4-byte Spill
	movq	%r15, 5880(%rsp)        # 8-byte Spill
	movq	%r12, 5872(%rsp)        # 8-byte Spill
	movq	%rbx, 5864(%rsp)        # 8-byte Spill
	movq	%r10, 5856(%rsp)        # 8-byte Spill
	movq	%r11, 5848(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	5864(%rsp), %rdi        # 8-byte Reload
	movq	6080(%rsp), %rsi        # 8-byte Reload
	movq	6168(%rsp), %rdx        # 8-byte Reload
	movq	5936(%rsp), %rcx        # 8-byte Reload
	movq	6128(%rsp), %r8         # 8-byte Reload
	movq	5936(%rsp), %r9         # 8-byte Reload
	movq	5944(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	6168(%rsp), %rdi        # 8-byte Reload
	movq	6080(%rsp), %rsi        # 8-byte Reload
	movq	7640(%rsp), %rdx        # 8-byte Reload
	movq	6168(%rsp), %rcx        # 8-byte Reload
	movq	6072(%rsp), %r8         # 8-byte Reload
	movq	5936(%rsp), %r9         # 8-byte Reload
	movq	5944(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	7640(%rsp), %rcx        # 8-byte Reload
	addq	$1, %rcx
	.loc	2 507 0                 # eispack.c:507:0
	movq	5896(%rsp), %rdi        # 8-byte Reload
	movq	6080(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	6168(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 5840(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	5976(%rsp), %r8         # 8-byte Reload
	movq	5936(%rsp), %r9         # 8-byte Reload
	movq	5944(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	5960(%rsp), %rdi        # 8-byte Reload
	movq	5920(%rsp), %rsi        # 8-byte Reload
	movq	5856(%rsp), %rdx        # 8-byte Reload
	movq	5968(%rsp), %rcx        # 8-byte Reload
	movq	6024(%rsp), %r8         # 8-byte Reload
	movl	5916(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	5864(%rsp), %rdi        # 8-byte Reload
	movq	6080(%rsp), %rsi        # 8-byte Reload
	movq	5840(%rsp), %rdx        # 8-byte Reload
	movq	6168(%rsp), %rcx        # 8-byte Reload
	movq	5976(%rsp), %r8         # 8-byte Reload
	movq	5936(%rsp), %r9         # 8-byte Reload
	movq	5944(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	6168(%rsp), %rdi        # 8-byte Reload
	movq	6080(%rsp), %rsi        # 8-byte Reload
	movq	9216(%rsp), %rdx        # 8-byte Reload
	movq	6168(%rsp), %rcx        # 8-byte Reload
	movq	6048(%rsp), %r8         # 8-byte Reload
	movq	5936(%rsp), %r9         # 8-byte Reload
	movq	5944(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	5840(%rsp), %rcx        # 8-byte Reload
	shlq	$3, %rcx
	movq	9216(%rsp), %rdx        # 8-byte Reload
	addq	%rcx, %rdx
	.loc	2 511 0                 # eispack.c:511:0
.Ltmp409:
	movq	5896(%rsp), %rdi        # 8-byte Reload
	movq	6080(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 5832(%rsp)        # 8-byte Spill
	movq	6168(%rsp), %rcx        # 8-byte Reload
	movq	5968(%rsp), %r8         # 8-byte Reload
	movq	5936(%rsp), %r9         # 8-byte Reload
	movq	5944(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	5984(%rsp), %rdi        # 8-byte Reload
	movq	5920(%rsp), %rsi        # 8-byte Reload
	movq	5856(%rsp), %rdx        # 8-byte Reload
	movq	6000(%rsp), %rcx        # 8-byte Reload
	movq	6064(%rsp), %r8         # 8-byte Reload
	movl	5916(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	6168(%rsp), %rdi        # 8-byte Reload
	movq	6080(%rsp), %rsi        # 8-byte Reload
	movq	5840(%rsp), %rdx        # 8-byte Reload
	movq	6168(%rsp), %rcx        # 8-byte Reload
	movq	5976(%rsp), %r8         # 8-byte Reload
	movq	5936(%rsp), %r9         # 8-byte Reload
	movq	5944(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	5840(%rsp), %rcx        # 8-byte Reload
	movl	%ecx, %eax
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	5896(%rsp), %rdi        # 8-byte Reload
	movq	5880(%rsp), %rsi        # 8-byte Reload
	movq	6168(%rsp), %rcx        # 8-byte Reload
	movq	6000(%rsp), %r8         # 8-byte Reload
	movq	5936(%rsp), %r9         # 8-byte Reload
	movq	5944(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, 5828(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	5984(%rsp), %rdi        # 8-byte Reload
	movq	5920(%rsp), %rsi        # 8-byte Reload
	movq	5856(%rsp), %rdx        # 8-byte Reload
	movq	6008(%rsp), %rcx        # 8-byte Reload
	movq	6112(%rsp), %r8         # 8-byte Reload
	movl	5916(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	9228(%rsp), %eax        # 4-byte Reload
	movl	%eax, %r9d
	movl	%r9d, %edx
	movq	5864(%rsp), %rdi        # 8-byte Reload
	movq	5880(%rsp), %rsi        # 8-byte Reload
	movq	6168(%rsp), %rcx        # 8-byte Reload
	movq	5992(%rsp), %r8         # 8-byte Reload
	movq	5936(%rsp), %r9         # 8-byte Reload
	movq	5944(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	5828(%rsp), %eax        # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	6168(%rsp), %rdi        # 8-byte Reload
	movq	5880(%rsp), %rsi        # 8-byte Reload
	movq	6168(%rsp), %rcx        # 8-byte Reload
	movq	6000(%rsp), %r8         # 8-byte Reload
	movq	5936(%rsp), %r9         # 8-byte Reload
	movq	5944(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	5828(%rsp), %eax        # 4-byte Reload
	movl	9228(%rsp), %ebp        # 4-byte Reload
	cmpl	%ebp, %eax
	setl	%al
.Ltmp410:
	.loc	2 519 0                 # eispack.c:519:0
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	5896(%rsp), %rdi        # 8-byte Reload
	movq	6168(%rsp), %rsi        # 8-byte Reload
	movq	6168(%rsp), %rcx        # 8-byte Reload
	movq	6008(%rsp), %r8         # 8-byte Reload
	movq	5936(%rsp), %r9         # 8-byte Reload
	movq	5944(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 5827(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	6032(%rsp), %rdi        # 8-byte Reload
	movq	5920(%rsp), %rsi        # 8-byte Reload
	movq	5856(%rsp), %rdx        # 8-byte Reload
	movq	6040(%rsp), %rcx        # 8-byte Reload
	movq	6016(%rsp), %r8         # 8-byte Reload
	movl	5916(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	6252(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	6168(%rsp), %rdi        # 8-byte Reload
	movq	5880(%rsp), %rsi        # 8-byte Reload
	movq	6168(%rsp), %rcx        # 8-byte Reload
	movq	5904(%rsp), %r8         # 8-byte Reload
	movq	5936(%rsp), %r9         # 8-byte Reload
	movq	5944(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	6252(%rsp), %ebp        # 4-byte Reload
	movslq	%ebp, %rcx
	movq	5896(%rsp), %rdi        # 8-byte Reload
	movq	6080(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	6168(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 5816(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	6040(%rsp), %r8         # 8-byte Reload
	movq	5936(%rsp), %r9         # 8-byte Reload
	movq	5944(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	6032(%rsp), %rdi        # 8-byte Reload
	movq	5920(%rsp), %rsi        # 8-byte Reload
	movq	5856(%rsp), %rdx        # 8-byte Reload
	movq	6056(%rsp), %rcx        # 8-byte Reload
	movq	6024(%rsp), %r8         # 8-byte Reload
	movl	5916(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	5864(%rsp), %rdi        # 8-byte Reload
	movq	6080(%rsp), %rsi        # 8-byte Reload
	movq	5816(%rsp), %rdx        # 8-byte Reload
	movq	6168(%rsp), %rcx        # 8-byte Reload
	movq	6040(%rsp), %r8         # 8-byte Reload
	movq	5936(%rsp), %r9         # 8-byte Reload
	movq	5944(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	6168(%rsp), %rdi        # 8-byte Reload
	movq	6080(%rsp), %rsi        # 8-byte Reload
	movq	9216(%rsp), %rdx        # 8-byte Reload
	movq	6168(%rsp), %rcx        # 8-byte Reload
	movq	6048(%rsp), %r8         # 8-byte Reload
	movq	5936(%rsp), %r9         # 8-byte Reload
	movq	5944(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	5816(%rsp), %rcx        # 8-byte Reload
	shlq	$3, %rcx
	movq	9216(%rsp), %rdx        # 8-byte Reload
	addq	%rcx, %rdx
	.loc	2 527 0                 # eispack.c:527:0
	movq	5896(%rsp), %rdi        # 8-byte Reload
	movq	6080(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 5808(%rsp)        # 8-byte Spill
	movq	6168(%rsp), %rcx        # 8-byte Reload
	movq	6056(%rsp), %r8         # 8-byte Reload
	movq	5936(%rsp), %r9         # 8-byte Reload
	movq	5944(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	6096(%rsp), %rdi        # 8-byte Reload
	movq	5920(%rsp), %rsi        # 8-byte Reload
	movq	5856(%rsp), %rdx        # 8-byte Reload
	movq	6104(%rsp), %rcx        # 8-byte Reload
	movq	6064(%rsp), %r8         # 8-byte Reload
	movl	5916(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	6168(%rsp), %rdi        # 8-byte Reload
	movq	6080(%rsp), %rsi        # 8-byte Reload
	movq	7640(%rsp), %rdx        # 8-byte Reload
	movq	6168(%rsp), %rcx        # 8-byte Reload
	movq	6072(%rsp), %r8         # 8-byte Reload
	movq	5936(%rsp), %r9         # 8-byte Reload
	movq	5944(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	7640(%rsp), %rcx        # 8-byte Reload
	movl	%ecx, %ebp
	movl	%ebp, %eax
	movl	%eax, %edx
	movq	5896(%rsp), %rdi        # 8-byte Reload
	movq	5880(%rsp), %rsi        # 8-byte Reload
	movq	6168(%rsp), %rcx        # 8-byte Reload
	movq	6104(%rsp), %r8         # 8-byte Reload
	movq	5936(%rsp), %r9         # 8-byte Reload
	movq	5944(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 5804(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	6096(%rsp), %rdi        # 8-byte Reload
	movq	5920(%rsp), %rsi        # 8-byte Reload
	movq	5856(%rsp), %rdx        # 8-byte Reload
	movq	6136(%rsp), %rcx        # 8-byte Reload
	movq	6088(%rsp), %r8         # 8-byte Reload
	movl	5916(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	5804(%rsp), %eax        # 4-byte Reload
	movl	%eax, %r9d
	movl	%r9d, %edx
	movq	5864(%rsp), %rdi        # 8-byte Reload
	movq	5880(%rsp), %rsi        # 8-byte Reload
	movq	6168(%rsp), %rcx        # 8-byte Reload
	movq	6104(%rsp), %r8         # 8-byte Reload
	movq	5936(%rsp), %r9         # 8-byte Reload
	movq	5944(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	6252(%rsp), %eax        # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	6168(%rsp), %rdi        # 8-byte Reload
	movq	5880(%rsp), %rsi        # 8-byte Reload
	movq	6168(%rsp), %rcx        # 8-byte Reload
	movq	5904(%rsp), %r8         # 8-byte Reload
	movq	5936(%rsp), %r9         # 8-byte Reload
	movq	5944(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	6252(%rsp), %eax        # 4-byte Reload
	movl	5804(%rsp), %ebp        # 4-byte Reload
	subl	%ebp, %eax
	.loc	2 529 0                 # eispack.c:529:0
.Ltmp411:
	movl	%eax, %esi
	movl	%esi, %edx
	movq	5896(%rsp), %rdi        # 8-byte Reload
	movq	5880(%rsp), %rsi        # 8-byte Reload
	movq	6168(%rsp), %rcx        # 8-byte Reload
	movq	6136(%rsp), %r8         # 8-byte Reload
	movq	5936(%rsp), %r9         # 8-byte Reload
	movq	5944(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, 5800(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	6120(%rsp), %rdi        # 8-byte Reload
	movq	5920(%rsp), %rsi        # 8-byte Reload
	movq	5856(%rsp), %rdx        # 8-byte Reload
	movq	6144(%rsp), %rcx        # 8-byte Reload
	movq	6112(%rsp), %r8         # 8-byte Reload
	movl	5916(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	5864(%rsp), %rdi        # 8-byte Reload
	movq	5880(%rsp), %rsi        # 8-byte Reload
	movq	6168(%rsp), %rdx        # 8-byte Reload
	movq	5936(%rsp), %rcx        # 8-byte Reload
	movq	6128(%rsp), %r8         # 8-byte Reload
	movq	5936(%rsp), %r9         # 8-byte Reload
	movq	5944(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	5800(%rsp), %eax        # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	6168(%rsp), %rdi        # 8-byte Reload
	movq	5880(%rsp), %rsi        # 8-byte Reload
	movq	6168(%rsp), %rcx        # 8-byte Reload
	movq	6136(%rsp), %r8         # 8-byte Reload
	movq	5936(%rsp), %r9         # 8-byte Reload
	movq	5944(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	5800(%rsp), %eax        # 4-byte Reload
	cmpl	$1, %eax
	setl	%al
.Ltmp412:
	.loc	2 494 0                 # eispack.c:494:0
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ebp
	movl	%ebp, %edx
	movq	5896(%rsp), %rdi        # 8-byte Reload
	movq	6168(%rsp), %rsi        # 8-byte Reload
	movq	6168(%rsp), %rcx        # 8-byte Reload
	movq	6144(%rsp), %r8         # 8-byte Reload
	movq	5936(%rsp), %r9         # 8-byte Reload
	movq	5944(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 5799(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	5952(%rsp), %rdi        # 8-byte Reload
	movq	5920(%rsp), %rsi        # 8-byte Reload
	movq	5856(%rsp), %rdx        # 8-byte Reload
	movq	5872(%rsp), %rcx        # 8-byte Reload
	movq	6152(%rsp), %r8         # 8-byte Reload
	movl	5916(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	7636(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	5864(%rsp), %rdi        # 8-byte Reload
	movq	5880(%rsp), %rsi        # 8-byte Reload
	movq	6168(%rsp), %rcx        # 8-byte Reload
	movq	6160(%rsp), %r8         # 8-byte Reload
	movq	5936(%rsp), %r9         # 8-byte Reload
	movq	5944(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	6252(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %eax
	movl	%eax, %edx
	movq	6168(%rsp), %rdi        # 8-byte Reload
	movq	5880(%rsp), %rsi        # 8-byte Reload
	movq	6168(%rsp), %rcx        # 8-byte Reload
	movq	5904(%rsp), %r8         # 8-byte Reload
	movq	5936(%rsp), %r9         # 8-byte Reload
	movq	5944(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	6252(%rsp), %eax        # 4-byte Reload
	movl	7636(%rsp), %ebp        # 4-byte Reload
	addl	%ebp, %eax
	movl	%eax, %esi
	movl	%esi, %edx
	movq	5896(%rsp), %rdi        # 8-byte Reload
	movq	5880(%rsp), %rsi        # 8-byte Reload
	movq	6168(%rsp), %rcx        # 8-byte Reload
	movq	5872(%rsp), %r8         # 8-byte Reload
	movq	5936(%rsp), %r9         # 8-byte Reload
	movq	5944(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, 5792(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	5952(%rsp), %rdi        # 8-byte Reload
	movq	5920(%rsp), %rsi        # 8-byte Reload
	movq	5856(%rsp), %rdx        # 8-byte Reload
	movq	5848(%rsp), %rcx        # 8-byte Reload
	movq	5864(%rsp), %r8         # 8-byte Reload
	movl	5916(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	6168(%rsp), %rdi        # 8-byte Reload
	movq	5936(%rsp), %rsi        # 8-byte Reload
	movq	5936(%rsp), %rdx        # 8-byte Reload
	movq	6168(%rsp), %rcx        # 8-byte Reload
	movq	5928(%rsp), %r8         # 8-byte Reload
	movq	5936(%rsp), %r9         # 8-byte Reload
	movq	5944(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	vmovsd	7592(%rsp), %xmm0       # 8-byte Reload
	movl	5916(%rsp), %eax        # 4-byte Reload
	vmovsd	%xmm0, 5784(%rsp)       # 8-byte Spill
	movl	%eax, 5780(%rsp)        # 4-byte Spill
.LBB10_12:                              #   Parent Loop BB10_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB10_15 Depth 3
                                        #       Child Loop BB10_17 Depth 3
	movl	5780(%rsp), %eax        # 4-byte Reload
	vmovsd	5784(%rsp), %xmm0       # 8-byte Reload
	movabsq	$1, %rcx
	leaq	.L.str156, %rdx
	movabsq	$0, %rsi
	leaq	.L.str781, %rdi
	movabsq	$2, %r8
	leaq	.L.str421, %r9
	movabsq	$3, %r10
	leaq	.L.str420, %r11
	movabsq	$494, %rbx              # imm = 0x1EE
	leaq	.L.str62136, %r14
	leaq	.L.str415, %r15
	leaq	.L.str419, %r12
	movl	$0, %ebp
	movl	$1, %r13d
	movq	%rcx, 5768(%rsp)        # 8-byte Spill
	movabsq	$19134, %rcx            # imm = 0x4ABE
	movq	%rcx, 5760(%rsp)        # 8-byte Spill
	movabsq	$32, %rcx
	movq	%rcx, 5752(%rsp)        # 8-byte Spill
	leaq	.L.str418, %rcx
	movq	%rcx, 5744(%rsp)        # 8-byte Spill
	movabsq	$29, %rcx
	movq	%rcx, 5736(%rsp)        # 8-byte Spill
	leaq	.L.str1488, %rcx
	movq	%rcx, 5728(%rsp)        # 8-byte Spill
	movabsq	$46, %rcx
	movq	%rcx, 5720(%rsp)        # 8-byte Spill
	leaq	.L.str417, %rcx
	movq	%rcx, 5712(%rsp)        # 8-byte Spill
	leaq	.L.str168, %rcx
	movq	%rcx, 5704(%rsp)        # 8-byte Spill
	leaq	.L.str130, %rcx
	movq	%rcx, 5696(%rsp)        # 8-byte Spill
	movabsq	$-1, %rcx
	movq	%rcx, 5688(%rsp)        # 8-byte Spill
	movabsq	$48, %rcx
	movq	%rcx, 5680(%rsp)        # 8-byte Spill
	movabsq	$64, %rcx
	movq	%rcx, 5672(%rsp)        # 8-byte Spill
	leaq	.L.str416, %rcx
	movq	%rcx, 5664(%rsp)        # 8-byte Spill
	leaq	.L.str202, %rcx
	movq	%rcx, 5656(%rsp)        # 8-byte Spill
	leaq	.L.str396, %rcx
	movq	%rcx, 5648(%rsp)        # 8-byte Spill
	movq	5688(%rsp), %rcx        # 8-byte Reload
	movq	%rdi, 5640(%rsp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	%rsi, 5632(%rsp)        # 8-byte Spill
	movq	%r14, %rsi
	movq	%rdx, 5624(%rsp)        # 8-byte Spill
	movq	%r15, %rdx
	movq	5664(%rsp), %rcx        # 8-byte Reload
	movq	%r8, 5616(%rsp)         # 8-byte Spill
	movq	5680(%rsp), %r8         # 8-byte Reload
	movq	%r9, 5608(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movl	%eax, 5604(%rsp)        # 4-byte Spill
	vmovsd	%xmm0, 5592(%rsp)       # 8-byte Spill
	movq	%r15, 5584(%rsp)        # 8-byte Spill
	movq	%r12, 5576(%rsp)        # 8-byte Spill
	movl	%ebp, 5572(%rsp)        # 4-byte Spill
	movl	%r13d, 5568(%rsp)       # 4-byte Spill
	movq	%r14, 5560(%rsp)        # 8-byte Spill
	movq	%rbx, 5552(%rsp)        # 8-byte Spill
	movq	%r10, 5544(%rsp)        # 8-byte Spill
	movq	%r11, 5536(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	5616(%rsp), %rdi        # 8-byte Reload
	movq	5672(%rsp), %rsi        # 8-byte Reload
	movq	5632(%rsp), %rdx        # 8-byte Reload
	movq	5768(%rsp), %rcx        # 8-byte Reload
	movq	5648(%rsp), %r8         # 8-byte Reload
	movq	5768(%rsp), %r9         # 8-byte Reload
	movq	5696(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	5768(%rsp), %rdi        # 8-byte Reload
	movq	5672(%rsp), %rsi        # 8-byte Reload
	movq	5632(%rsp), %rdx        # 8-byte Reload
	movq	5768(%rsp), %rcx        # 8-byte Reload
	movq	5656(%rsp), %r8         # 8-byte Reload
	movq	5768(%rsp), %r9         # 8-byte Reload
	movq	5712(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	5760(%rsp), %rdi        # 8-byte Reload
	movq	5672(%rsp), %rsi        # 8-byte Reload
	vmovsd	5592(%rsp), %xmm0       # 8-byte Reload
	movq	5768(%rsp), %rdx        # 8-byte Reload
	movq	5664(%rsp), %rcx        # 8-byte Reload
	movq	5632(%rsp), %r8         # 8-byte Reload
	movq	5712(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	5688(%rsp), %rdi        # 8-byte Reload
	movq	5560(%rsp), %rsi        # 8-byte Reload
	movq	5584(%rsp), %rdx        # 8-byte Reload
	movq	5744(%rsp), %rcx        # 8-byte Reload
	movq	5680(%rsp), %r8         # 8-byte Reload
	movl	5572(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	5616(%rsp), %rdi        # 8-byte Reload
	movq	5752(%rsp), %rsi        # 8-byte Reload
	movq	5632(%rsp), %rdx        # 8-byte Reload
	movq	5632(%rsp), %rcx        # 8-byte Reload
	movq	5728(%rsp), %r8         # 8-byte Reload
	movq	5768(%rsp), %r9         # 8-byte Reload
	movq	5696(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	5768(%rsp), %rdi        # 8-byte Reload
	movq	5752(%rsp), %rsi        # 8-byte Reload
	movq	5632(%rsp), %rdx        # 8-byte Reload
	movq	5768(%rsp), %rcx        # 8-byte Reload
	movq	5704(%rsp), %r8         # 8-byte Reload
	movq	5768(%rsp), %r9         # 8-byte Reload
	movq	5712(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	5604(%rsp), %eax        # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	5760(%rsp), %rdi        # 8-byte Reload
	movq	5752(%rsp), %rsi        # 8-byte Reload
	movq	5768(%rsp), %rcx        # 8-byte Reload
	movq	5744(%rsp), %r8         # 8-byte Reload
	movq	5632(%rsp), %r9         # 8-byte Reload
	movq	5712(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	5552(%rsp), %rdi        # 8-byte Reload
	movq	5560(%rsp), %rsi        # 8-byte Reload
	movq	5584(%rsp), %rdx        # 8-byte Reload
	movq	5624(%rsp), %rcx        # 8-byte Reload
	movq	5720(%rsp), %r8         # 8-byte Reload
	movl	5572(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	5616(%rsp), %rdi        # 8-byte Reload
	movq	5752(%rsp), %rsi        # 8-byte Reload
	movq	5736(%rsp), %rdx        # 8-byte Reload
	movq	5632(%rsp), %rcx        # 8-byte Reload
	movq	5728(%rsp), %r8         # 8-byte Reload
	movq	5632(%rsp), %r9         # 8-byte Reload
	movq	5640(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	5604(%rsp), %eax        # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	5768(%rsp), %rdi        # 8-byte Reload
	movq	5752(%rsp), %rsi        # 8-byte Reload
	movq	5768(%rsp), %rcx        # 8-byte Reload
	movq	5744(%rsp), %r8         # 8-byte Reload
	movq	5632(%rsp), %r9         # 8-byte Reload
	movq	5640(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	5604(%rsp), %eax        # 4-byte Reload
	cmpl	$29, %eax
	setg	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ebp
	movl	%ebp, %edx
	movq	5760(%rsp), %rdi        # 8-byte Reload
	movq	5768(%rsp), %rsi        # 8-byte Reload
	movq	5768(%rsp), %rcx        # 8-byte Reload
	movq	5624(%rsp), %r8         # 8-byte Reload
	movq	5632(%rsp), %r9         # 8-byte Reload
	movq	5640(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 5535(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	5552(%rsp), %rdi        # 8-byte Reload
	movq	5560(%rsp), %rsi        # 8-byte Reload
	movq	5584(%rsp), %rdx        # 8-byte Reload
	movq	5576(%rsp), %rcx        # 8-byte Reload
	movq	5616(%rsp), %r8         # 8-byte Reload
	movl	5572(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	5544(%rsp), %rdi        # 8-byte Reload
	movq	5632(%rsp), %rsi        # 8-byte Reload
	movq	5632(%rsp), %rdx        # 8-byte Reload
	movq	5768(%rsp), %rcx        # 8-byte Reload
	movq	5536(%rsp), %r8         # 8-byte Reload
	movq	5632(%rsp), %r9         # 8-byte Reload
	movq	5640(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	5616(%rsp), %rdi        # 8-byte Reload
	movq	5632(%rsp), %rsi        # 8-byte Reload
	movq	5632(%rsp), %rdx        # 8-byte Reload
	movq	5768(%rsp), %rcx        # 8-byte Reload
	movq	5608(%rsp), %r8         # 8-byte Reload
	movq	5632(%rsp), %r9         # 8-byte Reload
	movq	5640(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	5535(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	5768(%rsp), %rdi        # 8-byte Reload
	movq	5768(%rsp), %rsi        # 8-byte Reload
	movq	5768(%rsp), %rcx        # 8-byte Reload
	movq	5624(%rsp), %r8         # 8-byte Reload
	movq	5632(%rsp), %r9         # 8-byte Reload
	movq	5640(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	5535(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB10_13
	jmp	.LBB10_14
.LBB10_13:
	movabsq	$1, %rax
	movabsq	$0, %rcx
	leaq	.L.str371, %r8
	leaq	.L.str781, %rdx
	movabsq	$497, %rdi              # imm = 0x1F1
	leaq	.L.str62136, %rsi
	leaq	.L.str420, %r9
	leaq	.L.str422, %r10
	movabsq	$2, %r11
	movl	$0, %ebx
	movl	$1, %ebp
	movabsq	$19134, %r14            # imm = 0x4ABE
	movabsq	$32, %r15
	leaq	.L.str163, %r12
	leaq	.L.str395, %r13
	movq	%rax, 5520(%rsp)        # 8-byte Spill
	leaq	.L.str1488, %rax
	movq	%rax, 5512(%rsp)        # 8-byte Spill
	movabsq	$496, %rax              # imm = 0x1F0
	movq	%rax, 5504(%rsp)        # 8-byte Spill
	movabsq	$8, %rax
	.loc	2 496 0                 # eispack.c:496:0
.Ltmp413:
	movq	%rax, 5496(%rsp)        # 8-byte Spill
	movq	5504(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 5488(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 5480(%rsp)        # 8-byte Spill
	movq	%rdx, 5472(%rsp)        # 8-byte Spill
	movq	%r9, %rdx
	movq	%rcx, 5464(%rsp)        # 8-byte Spill
	movq	%r12, %rcx
	movq	5496(%rsp), %rax        # 8-byte Reload
	movq	%r8, 5456(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 5448(%rsp)         # 8-byte Spill
	movl	%ebx, %r9d
	movl	$1, (%rsp)
	movq	%r14, 5440(%rsp)        # 8-byte Spill
	movl	%ebp, 5436(%rsp)        # 4-byte Spill
	movq	%r15, 5424(%rsp)        # 8-byte Spill
	movq	%r13, 5416(%rsp)        # 8-byte Spill
	movq	%r12, 5408(%rsp)        # 8-byte Spill
	movl	%ebx, 5404(%rsp)        # 4-byte Spill
	movq	%r10, 5392(%rsp)        # 8-byte Spill
	movq	%r11, 5384(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	5384(%rsp), %rdi        # 8-byte Reload
	movq	5424(%rsp), %rsi        # 8-byte Reload
	movq	5520(%rsp), %rdx        # 8-byte Reload
	movq	5464(%rsp), %rcx        # 8-byte Reload
	movq	5512(%rsp), %r8         # 8-byte Reload
	movq	5464(%rsp), %r9         # 8-byte Reload
	movq	5472(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	8012(%rsp), %ebx        # 4-byte Reload
	movl	%ebx, %ebp
	movl	%ebp, %edx
	movq	5520(%rsp), %rdi        # 8-byte Reload
	movq	5424(%rsp), %rsi        # 8-byte Reload
	movq	5520(%rsp), %rcx        # 8-byte Reload
	movq	5416(%rsp), %r8         # 8-byte Reload
	movq	5464(%rsp), %r9         # 8-byte Reload
	movq	5472(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	8012(%rsp), %ebx        # 4-byte Reload
	addl	$1, %ebx
	movl	%ebx, %ebp
	movl	%ebp, %edx
	movq	5440(%rsp), %rdi        # 8-byte Reload
	movq	5424(%rsp), %rsi        # 8-byte Reload
	movq	5520(%rsp), %rcx        # 8-byte Reload
	movq	5408(%rsp), %r8         # 8-byte Reload
	movq	5464(%rsp), %r9         # 8-byte Reload
	movq	5472(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%ebx, 5380(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
.Ltmp414:
	#DEBUG_VALUE: tqlrat:ierr <- [RSP+5380]
	.loc	2 497 0                 # eispack.c:497:0
	movq	5488(%rsp), %rdi        # 8-byte Reload
	movq	5480(%rsp), %rsi        # 8-byte Reload
	movq	5448(%rsp), %rdx        # 8-byte Reload
	movq	5392(%rsp), %rcx        # 8-byte Reload
	movq	5384(%rsp), %r8         # 8-byte Reload
	movl	5404(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	5520(%rsp), %rdi        # 8-byte Reload
	movq	5464(%rsp), %rsi        # 8-byte Reload
	movq	5464(%rsp), %rdx        # 8-byte Reload
	movq	5520(%rsp), %rcx        # 8-byte Reload
	movq	5456(%rsp), %r8         # 8-byte Reload
	movq	5464(%rsp), %r9         # 8-byte Reload
	movq	5472(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	5380(%rsp), %ebx        # 4-byte Reload
	movl	%ebx, 9112(%rsp)        # 4-byte Spill
	jmp	.LBB10_28
.Ltmp415:
.LBB10_14:                              #   in Loop: Header=BB10_12 Depth=2
	movabsq	$2, %rax
	movabsq	$64, %rcx
	movabsq	$1, %rdx
	vmovsd	.LCPI10_2, %xmm0
	movabsq	$0, %rsi
	leaq	.L.str1488, %rdi
	leaq	.L.str781, %r8
	leaq	.L.str182, %r9
	movabsq	$3, %r10
	leaq	pythag, %r11
	leaq	.L.str377, %rbx
	movabsq	$508, %r14              # imm = 0x1FC
	leaq	.L.str62136, %r15
	leaq	.L.str421, %r12
	leaq	.L.str190, %r13
	movabsq	$49, %rbp
	movq	%rsi, 5368(%rsp)        # 8-byte Spill
	movl	$0, %esi
	movl	%esi, 5364(%rsp)        # 4-byte Spill
	movl	$1, %esi
	movq	%rax, 5352(%rsp)        # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 5344(%rsp)        # 8-byte Spill
	leaq	.L.str184, %rax
	movq	%rax, 5336(%rsp)        # 8-byte Spill
	leaq	.L.str185, %rax
	movq	%rax, 5328(%rsp)        # 8-byte Spill
	movabsq	$507, %rax              # imm = 0x1FB
	movq	%rax, 5320(%rsp)        # 8-byte Spill
	movabsq	$16, %rax
	vmovsd	.LCPI10_3, %xmm1
	movq	%rax, 5312(%rsp)        # 8-byte Spill
	leaq	.L.str170, %rax
	movq	%rax, 5304(%rsp)        # 8-byte Spill
	movabsq	$13, %rax
	movq	%rax, 5296(%rsp)        # 8-byte Spill
	leaq	.L.str183, %rax
	movq	%rax, 5288(%rsp)        # 8-byte Spill
	leaq	.L.str176, %rax
	movq	%rax, 5280(%rsp)        # 8-byte Spill
	movabsq	$11, %rax
	movq	%rax, 5272(%rsp)        # 8-byte Spill
	leaq	.L.str140, %rax
	movq	%rax, 5264(%rsp)        # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, 5256(%rsp)        # 8-byte Spill
	leaq	.L.str34108, %rax
	movq	%rax, 5248(%rsp)        # 8-byte Spill
	movabsq	$506, %rax              # imm = 0x1FA
	movq	%rax, 5240(%rsp)        # 8-byte Spill
	leaq	.L.str169, %rax
	movq	%rax, 5232(%rsp)        # 8-byte Spill
	leaq	sqrt, %rax
	movq	%rax, 5224(%rsp)        # 8-byte Spill
	leaq	.L.str198, %rax
	movq	%rax, 5216(%rsp)        # 8-byte Spill
	movabsq	$505, %rax              # imm = 0x1F9
	movq	%rax, 5208(%rsp)        # 8-byte Spill
	leaq	.L.str36110, %rax
	movq	%rax, 5200(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 5192(%rsp)        # 8-byte Spill
	leaq	.L.str168, %rax
	movq	%rax, 5184(%rsp)        # 8-byte Spill
	leaq	.L.str418, %rax
	movq	%rax, 5176(%rsp)        # 8-byte Spill
	movabsq	$500, %rax              # imm = 0x1F4
	movq	%rax, 5168(%rsp)        # 8-byte Spill
	movabsq	$8, %rax
	.loc	2 500 0                 # eispack.c:500:0
	movq	%rax, 5160(%rsp)        # 8-byte Spill
	movq	5168(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 5152(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movl	%esi, 5148(%rsp)        # 4-byte Spill
	movq	%r15, %rsi
	movq	%rdx, 5136(%rsp)        # 8-byte Spill
	movq	%r12, %rdx
	movq	5184(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 5128(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	5160(%rsp), %rax        # 8-byte Reload
	movq	%r8, 5120(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movl	5364(%rsp), %eax        # 4-byte Reload
	movq	%r9, 5112(%rsp)         # 8-byte Spill
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movq	%r12, 5104(%rsp)        # 8-byte Spill
	movq	%r13, 5096(%rsp)        # 8-byte Spill
	vmovsd	%xmm0, 5088(%rsp)       # 8-byte Spill
	movq	%rbp, 5080(%rsp)        # 8-byte Spill
	vmovsd	%xmm1, 5072(%rsp)       # 8-byte Spill
	movq	%r15, 5064(%rsp)        # 8-byte Spill
	movq	%r14, 5056(%rsp)        # 8-byte Spill
	movq	%r10, 5048(%rsp)        # 8-byte Spill
	movq	%r11, 5040(%rsp)        # 8-byte Spill
	movq	%rbx, 5032(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	5352(%rsp), %rdi        # 8-byte Reload
	movq	5192(%rsp), %rsi        # 8-byte Reload
	movq	5136(%rsp), %rdx        # 8-byte Reload
	movq	5368(%rsp), %rcx        # 8-byte Reload
	movq	5152(%rsp), %r8         # 8-byte Reload
	movq	5368(%rsp), %r9         # 8-byte Reload
	movq	5120(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	5604(%rsp), %eax        # 4-byte Reload
	movl	%eax, %eax
	movl	%eax, %edx
	movq	5136(%rsp), %rdi        # 8-byte Reload
	movq	5192(%rsp), %rsi        # 8-byte Reload
	movq	5136(%rsp), %rcx        # 8-byte Reload
	movq	5176(%rsp), %r8         # 8-byte Reload
	movq	5368(%rsp), %r9         # 8-byte Reload
	movq	5120(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	5604(%rsp), %eax        # 4-byte Reload
	addl	$1, %eax
	movl	%eax, %esi
	movl	%esi, %edx
	movq	5344(%rsp), %rdi        # 8-byte Reload
	movq	5192(%rsp), %rsi        # 8-byte Reload
	movq	5136(%rsp), %rcx        # 8-byte Reload
	movq	5184(%rsp), %r8         # 8-byte Reload
	movq	5368(%rsp), %r9         # 8-byte Reload
	movq	5120(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, 5028(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
.Ltmp416:
	#DEBUG_VALUE: tqlrat:j <- [RSP+5028]
	.loc	2 505 0                 # eispack.c:505:0
	movq	5208(%rsp), %rdi        # 8-byte Reload
	movq	5064(%rsp), %rsi        # 8-byte Reload
	movq	5104(%rsp), %rdx        # 8-byte Reload
	movq	5232(%rsp), %rcx        # 8-byte Reload
	movq	5256(%rsp), %r8         # 8-byte Reload
	movl	5364(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	5136(%rsp), %rdi        # 8-byte Reload
	movq	5128(%rsp), %rsi        # 8-byte Reload
	movq	7464(%rsp), %rdx        # 8-byte Reload
	movq	5136(%rsp), %rcx        # 8-byte Reload
	movq	5200(%rsp), %r8         # 8-byte Reload
	movq	5368(%rsp), %r9         # 8-byte Reload
	movq	5120(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	7464(%rsp), %rcx        # 8-byte Reload
	vmovsd	(%rcx), %xmm0
	movq	5344(%rsp), %rdi        # 8-byte Reload
	movq	5128(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 5016(%rsp)       # 8-byte Spill
	movq	5136(%rsp), %rdx        # 8-byte Reload
	movq	5232(%rsp), %rcx        # 8-byte Reload
	movq	5368(%rsp), %r8         # 8-byte Reload
	movq	5120(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	5208(%rsp), %rdi        # 8-byte Reload
	movq	5064(%rsp), %rsi        # 8-byte Reload
	movq	5104(%rsp), %rdx        # 8-byte Reload
	movq	5304(%rsp), %rcx        # 8-byte Reload
	movq	5080(%rsp), %r8         # 8-byte Reload
	movl	5364(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	5352(%rsp), %rdi        # 8-byte Reload
	movq	5128(%rsp), %rsi        # 8-byte Reload
	movq	5224(%rsp), %rdx        # 8-byte Reload
	movq	5136(%rsp), %rcx        # 8-byte Reload
	movq	5216(%rsp), %r8         # 8-byte Reload
	movq	5368(%rsp), %r9         # 8-byte Reload
	movq	5120(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	5136(%rsp), %rdi        # 8-byte Reload
	movq	5128(%rsp), %rsi        # 8-byte Reload
	vmovsd	5016(%rsp), %xmm0       # 8-byte Reload
	movq	5136(%rsp), %rdx        # 8-byte Reload
	movq	5232(%rsp), %rcx        # 8-byte Reload
	movq	5368(%rsp), %r8         # 8-byte Reload
	movq	5120(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	5016(%rsp), %xmm0       # 8-byte Reload
	callq	sqrt
.Ltmp417:
	movq	5344(%rsp), %rdi        # 8-byte Reload
	movq	5128(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 5008(%rsp)       # 8-byte Spill
	movq	5136(%rsp), %rdx        # 8-byte Reload
	movq	5304(%rsp), %rcx        # 8-byte Reload
	movq	5368(%rsp), %r8         # 8-byte Reload
	movq	5120(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
.Ltmp418:
	#DEBUG_VALUE: tqlrat:s <- [RSP+5008]
	.loc	2 506 0                 # eispack.c:506:0
	movq	5240(%rsp), %rdi        # 8-byte Reload
	movq	5064(%rsp), %rsi        # 8-byte Reload
	movq	5104(%rsp), %rdx        # 8-byte Reload
	movq	5280(%rsp), %rcx        # 8-byte Reload
	movq	5256(%rsp), %r8         # 8-byte Reload
	movl	5364(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	5136(%rsp), %rdi        # 8-byte Reload
	movq	5128(%rsp), %rsi        # 8-byte Reload
	movq	7488(%rsp), %rdx        # 8-byte Reload
	movq	5136(%rsp), %rcx        # 8-byte Reload
	movq	5248(%rsp), %r8         # 8-byte Reload
	movq	5368(%rsp), %r9         # 8-byte Reload
	movq	5120(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	7488(%rsp), %rcx        # 8-byte Reload
	vmovsd	(%rcx), %xmm0
	movq	5344(%rsp), %rdi        # 8-byte Reload
	movq	5128(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 5000(%rsp)       # 8-byte Spill
	movq	5136(%rsp), %rdx        # 8-byte Reload
	movq	5280(%rsp), %rcx        # 8-byte Reload
	movq	5368(%rsp), %r8         # 8-byte Reload
	movq	5120(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
.Ltmp419:
	#DEBUG_VALUE: tqlrat:g <- [RSP+5000]
	.loc	2 507 0                 # eispack.c:507:0
	movq	5320(%rsp), %rdi        # 8-byte Reload
	movq	5064(%rsp), %rsi        # 8-byte Reload
	movq	5104(%rsp), %rdx        # 8-byte Reload
	movq	5288(%rsp), %rcx        # 8-byte Reload
	movq	5256(%rsp), %r8         # 8-byte Reload
	movl	5364(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	5136(%rsp), %rdi        # 8-byte Reload
	movq	5128(%rsp), %rsi        # 8-byte Reload
	movq	5832(%rsp), %rdx        # 8-byte Reload
	movq	5136(%rsp), %rcx        # 8-byte Reload
	movq	5264(%rsp), %r8         # 8-byte Reload
	movq	5368(%rsp), %r9         # 8-byte Reload
	movq	5120(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	5832(%rsp), %rcx        # 8-byte Reload
	vmovsd	(%rcx), %xmm0
	movq	5344(%rsp), %rdi        # 8-byte Reload
	movq	5128(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 4992(%rsp)       # 8-byte Spill
	movq	5136(%rsp), %rdx        # 8-byte Reload
	movq	5288(%rsp), %rcx        # 8-byte Reload
	movq	5368(%rsp), %r8         # 8-byte Reload
	movq	5120(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	5320(%rsp), %rdi        # 8-byte Reload
	movq	5064(%rsp), %rsi        # 8-byte Reload
	movq	5104(%rsp), %rdx        # 8-byte Reload
	movq	5336(%rsp), %rcx        # 8-byte Reload
	movq	5272(%rsp), %r8         # 8-byte Reload
	movl	5364(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	5352(%rsp), %rdi        # 8-byte Reload
	movq	5128(%rsp), %rsi        # 8-byte Reload
	vmovsd	5000(%rsp), %xmm0       # 8-byte Reload
	movq	5136(%rsp), %rdx        # 8-byte Reload
	movq	5280(%rsp), %rcx        # 8-byte Reload
	movq	5368(%rsp), %r8         # 8-byte Reload
	movq	5120(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	5136(%rsp), %rdi        # 8-byte Reload
	movq	5128(%rsp), %rsi        # 8-byte Reload
	vmovsd	4992(%rsp), %xmm0       # 8-byte Reload
	movq	5136(%rsp), %rdx        # 8-byte Reload
	movq	5288(%rsp), %rcx        # 8-byte Reload
	movq	5368(%rsp), %r8         # 8-byte Reload
	movq	5120(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	4992(%rsp), %xmm0       # 8-byte Reload
	vmovsd	5000(%rsp), %xmm1       # 8-byte Reload
	vsubsd	%xmm1, %xmm0, %xmm2
	movq	5344(%rsp), %rdi        # 8-byte Reload
	movq	5128(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	5136(%rsp), %rdx        # 8-byte Reload
	movq	5336(%rsp), %rcx        # 8-byte Reload
	movq	5368(%rsp), %r8         # 8-byte Reload
	movq	5120(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 4984(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	5320(%rsp), %rdi        # 8-byte Reload
	movq	5064(%rsp), %rsi        # 8-byte Reload
	movq	5104(%rsp), %rdx        # 8-byte Reload
	movq	5328(%rsp), %rcx        # 8-byte Reload
	movq	5296(%rsp), %r8         # 8-byte Reload
	movl	5364(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	5352(%rsp), %rdi        # 8-byte Reload
	movq	5128(%rsp), %rsi        # 8-byte Reload
	vmovsd	5072(%rsp), %xmm0       # 8-byte Reload
	movq	5368(%rsp), %rdx        # 8-byte Reload
	movq	5152(%rsp), %rcx        # 8-byte Reload
	movq	5368(%rsp), %r8         # 8-byte Reload
	movq	5120(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	5136(%rsp), %rdi        # 8-byte Reload
	movq	5128(%rsp), %rsi        # 8-byte Reload
	vmovsd	5008(%rsp), %xmm0       # 8-byte Reload
	movq	5136(%rsp), %rdx        # 8-byte Reload
	movq	5304(%rsp), %rcx        # 8-byte Reload
	movq	5368(%rsp), %r8         # 8-byte Reload
	movq	5120(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	5008(%rsp), %xmm0       # 8-byte Reload
	vmovsd	5072(%rsp), %xmm1       # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	5344(%rsp), %rdi        # 8-byte Reload
	movq	5128(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	5136(%rsp), %rdx        # 8-byte Reload
	movq	5328(%rsp), %rcx        # 8-byte Reload
	movq	5368(%rsp), %r8         # 8-byte Reload
	movq	5120(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 4976(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	5320(%rsp), %rdi        # 8-byte Reload
	movq	5064(%rsp), %rsi        # 8-byte Reload
	movq	5104(%rsp), %rdx        # 8-byte Reload
	movq	5112(%rsp), %rcx        # 8-byte Reload
	movq	5312(%rsp), %r8         # 8-byte Reload
	movl	5364(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	5352(%rsp), %rdi        # 8-byte Reload
	movq	5128(%rsp), %rsi        # 8-byte Reload
	vmovsd	4976(%rsp), %xmm0       # 8-byte Reload
	movq	5136(%rsp), %rdx        # 8-byte Reload
	movq	5328(%rsp), %rcx        # 8-byte Reload
	movq	5368(%rsp), %r8         # 8-byte Reload
	movq	5120(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	5136(%rsp), %rdi        # 8-byte Reload
	movq	5128(%rsp), %rsi        # 8-byte Reload
	vmovsd	4984(%rsp), %xmm0       # 8-byte Reload
	movq	5136(%rsp), %rdx        # 8-byte Reload
	movq	5336(%rsp), %rcx        # 8-byte Reload
	movq	5368(%rsp), %r8         # 8-byte Reload
	movq	5120(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	4984(%rsp), %xmm0       # 8-byte Reload
	vmovsd	4976(%rsp), %xmm1       # 8-byte Reload
	vdivsd	%xmm1, %xmm0, %xmm2
	movq	5344(%rsp), %rdi        # 8-byte Reload
	movq	5128(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	5136(%rsp), %rdx        # 8-byte Reload
	movq	5112(%rsp), %rcx        # 8-byte Reload
	movq	5368(%rsp), %r8         # 8-byte Reload
	movq	5120(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 4968(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
.Ltmp420:
	#DEBUG_VALUE: tqlrat:p <- [RSP+4968]
	.loc	2 508 0                 # eispack.c:508:0
	movq	5056(%rsp), %rdi        # 8-byte Reload
	movq	5064(%rsp), %rsi        # 8-byte Reload
	movq	5104(%rsp), %rdx        # 8-byte Reload
	movq	5096(%rsp), %rcx        # 8-byte Reload
	movq	5080(%rsp), %r8         # 8-byte Reload
	movl	5364(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	5048(%rsp), %rdi        # 8-byte Reload
	movq	5128(%rsp), %rsi        # 8-byte Reload
	movq	5040(%rsp), %rdx        # 8-byte Reload
	movq	5136(%rsp), %rcx        # 8-byte Reload
	movq	5032(%rsp), %r8         # 8-byte Reload
	movq	5368(%rsp), %r9         # 8-byte Reload
	movq	5120(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	5136(%rsp), %rdi        # 8-byte Reload
	movq	5128(%rsp), %rsi        # 8-byte Reload
	vmovsd	4968(%rsp), %xmm0       # 8-byte Reload
	movq	5136(%rsp), %rdx        # 8-byte Reload
	movq	5112(%rsp), %rcx        # 8-byte Reload
	movq	5368(%rsp), %r8         # 8-byte Reload
	movq	5120(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	5352(%rsp), %rdi        # 8-byte Reload
	movq	5128(%rsp), %rsi        # 8-byte Reload
	vmovsd	5088(%rsp), %xmm0       # 8-byte Reload
	movq	5368(%rsp), %rdx        # 8-byte Reload
	movq	5152(%rsp), %rcx        # 8-byte Reload
	movq	5368(%rsp), %r8         # 8-byte Reload
	movq	5120(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	.LCPI10_2(%rip), %xmm1
	vmovsd	4968(%rsp), %xmm0       # 8-byte Reload
	callq	pythag
.Ltmp421:
	movabsq	$1, %rcx
	movabsq	$64, %rdx
	leaq	.L.str182, %rsi
	movabsq	$0, %rdi
	leaq	.L.str781, %r8
	movabsq	$2, %r9
	leaq	r8_sign, %r10
	leaq	.L.str48122, %r11
	movabsq	$509, %rbx              # imm = 0x1FD
	leaq	.L.str62136, %r14
	leaq	.L.str421, %r15
	leaq	.L.str192, %r12
	movabsq	$49, %r13
	movl	$0, %eax
	movl	$1, %ebp
	movq	%rcx, 4960(%rsp)        # 8-byte Spill
	movabsq	$19134, %rcx            # imm = 0x4ABE
	movq	%rcx, 4952(%rsp)        # 8-byte Spill
	leaq	.L.str191, %rcx
	movq	%rcx, 4944(%rsp)        # 8-byte Spill
	leaq	.L.str190, %rcx
	movq	%rcx, 4936(%rsp)        # 8-byte Spill
	leaq	fabs, %rcx
	movq	%rcx, 4928(%rsp)        # 8-byte Spill
	leaq	.L.str680, %rcx
	movq	%rcx, 4920(%rsp)        # 8-byte Spill
	movq	4952(%rsp), %rcx        # 8-byte Reload
	movq	%rdi, 4912(%rsp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	%rsi, 4904(%rsp)        # 8-byte Spill
	movq	%rdx, %rsi
	vmovsd	%xmm0, 4896(%rsp)       # 8-byte Spill
	movq	4960(%rsp), %rcx        # 8-byte Reload
	movq	%rdx, 4888(%rsp)        # 8-byte Spill
	movq	%rcx, %rdx
	movq	4936(%rsp), %rcx        # 8-byte Reload
	movq	%r8, 4880(%rsp)         # 8-byte Spill
	movq	4912(%rsp), %r8         # 8-byte Reload
	movq	%r9, 4872(%rsp)         # 8-byte Spill
	movq	4880(%rsp), %r9         # 8-byte Reload
	movq	%r13, 4864(%rsp)        # 8-byte Spill
	movq	%r15, 4856(%rsp)        # 8-byte Spill
	movq	%r12, 4848(%rsp)        # 8-byte Spill
	movl	%eax, 4844(%rsp)        # 4-byte Spill
	movl	%ebp, 4840(%rsp)        # 4-byte Spill
	movq	%r14, 4832(%rsp)        # 8-byte Spill
	movq	%rbx, 4824(%rsp)        # 8-byte Spill
	movq	%r10, 4816(%rsp)        # 8-byte Spill
	movq	%r11, 4808(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
.Ltmp422:
	#DEBUG_VALUE: tqlrat:r <- [RSP+4896]
	.loc	2 509 0                 # eispack.c:509:0
	movq	4824(%rsp), %rdi        # 8-byte Reload
	movq	4832(%rsp), %rsi        # 8-byte Reload
	movq	4856(%rsp), %rdx        # 8-byte Reload
	movq	4944(%rsp), %rcx        # 8-byte Reload
	movq	4864(%rsp), %r8         # 8-byte Reload
	movl	4844(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	4872(%rsp), %rdi        # 8-byte Reload
	movq	4888(%rsp), %rsi        # 8-byte Reload
	movq	4928(%rsp), %rdx        # 8-byte Reload
	movq	4960(%rsp), %rcx        # 8-byte Reload
	movq	4920(%rsp), %r8         # 8-byte Reload
	movq	4912(%rsp), %r9         # 8-byte Reload
	movq	4880(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	4960(%rsp), %rdi        # 8-byte Reload
	movq	4888(%rsp), %rsi        # 8-byte Reload
	vmovsd	4896(%rsp), %xmm0       # 8-byte Reload
	movq	4960(%rsp), %rdx        # 8-byte Reload
	movq	4936(%rsp), %rcx        # 8-byte Reload
	movq	4912(%rsp), %r8         # 8-byte Reload
	movq	4880(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	.LCPI10_0(%rip), %xmm0
	vmovsd	4896(%rsp), %xmm1       # 8-byte Reload
	vandpd	%xmm0, %xmm1, %xmm0
	movq	4952(%rsp), %rdi        # 8-byte Reload
	movq	4888(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 4800(%rsp)       # 8-byte Spill
	movq	4960(%rsp), %rdx        # 8-byte Reload
	movq	4944(%rsp), %rcx        # 8-byte Reload
	movq	4912(%rsp), %r8         # 8-byte Reload
	movq	4880(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	4824(%rsp), %rdi        # 8-byte Reload
	movq	4832(%rsp), %rsi        # 8-byte Reload
	movq	4856(%rsp), %rdx        # 8-byte Reload
	movq	4848(%rsp), %rcx        # 8-byte Reload
	movq	4864(%rsp), %r8         # 8-byte Reload
	movl	4844(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	4872(%rsp), %rdi        # 8-byte Reload
	movq	4888(%rsp), %rsi        # 8-byte Reload
	movq	4816(%rsp), %rdx        # 8-byte Reload
	movq	4960(%rsp), %rcx        # 8-byte Reload
	movq	4808(%rsp), %r8         # 8-byte Reload
	movq	4912(%rsp), %r9         # 8-byte Reload
	movq	4880(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	4960(%rsp), %rdi        # 8-byte Reload
	movq	4888(%rsp), %rsi        # 8-byte Reload
	vmovsd	4968(%rsp), %xmm0       # 8-byte Reload
	movq	4960(%rsp), %rdx        # 8-byte Reload
	movq	4904(%rsp), %rcx        # 8-byte Reload
	movq	4912(%rsp), %r8         # 8-byte Reload
	movq	4880(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	4968(%rsp), %xmm0       # 8-byte Reload
	callq	r8_sign
.Ltmp423:
	movabsq	$1, %rcx
	leaq	.L.str142, %r8
	movabsq	$0, %rdx
	leaq	.L.str781, %rsi
	movabsq	$2, %rdi
	leaq	.L.str426, %r9
	movabsq	$3, %r10
	leaq	.L.str425, %r11
	movabsq	$511, %rbx              # imm = 0x1FF
	leaq	.L.str62136, %r14
	leaq	.L.str421, %r15
	leaq	.L.str424, %r12
	movl	$0, %eax
	movl	$1, %ebp
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rcx, 4792(%rsp)        # 8-byte Spill
	movabsq	$64, %rcx
	movq	%rcx, 4784(%rsp)        # 8-byte Spill
	leaq	.L.str197, %rcx
	movq	%rcx, 4776(%rsp)        # 8-byte Spill
	leaq	.L.str176, %rcx
	movq	%rcx, 4768(%rsp)        # 8-byte Spill
	leaq	.L.str196, %rcx
	movq	%rcx, 4760(%rsp)        # 8-byte Spill
	movabsq	$510, %rcx              # imm = 0x1FE
	movq	%rcx, 4752(%rsp)        # 8-byte Spill
	movabsq	$11, %rcx
	movq	%rcx, 4744(%rsp)        # 8-byte Spill
	leaq	.L.str34108, %rcx
	movq	%rcx, 4736(%rsp)        # 8-byte Spill
	movabsq	$509, %rcx              # imm = 0x1FD
	movq	%rcx, 4728(%rsp)        # 8-byte Spill
	leaq	.L.str423, %rcx
	movq	%rcx, 4720(%rsp)        # 8-byte Spill
	movabsq	$28, %rcx
	movq	%rcx, 4712(%rsp)        # 8-byte Spill
	leaq	.L.str170, %rcx
	movq	%rcx, 4704(%rsp)        # 8-byte Spill
	leaq	.L.str195, %rcx
	movq	%rcx, 4696(%rsp)        # 8-byte Spill
	movabsq	$16, %rcx
	movq	%rcx, 4688(%rsp)        # 8-byte Spill
	leaq	.L.str182, %rcx
	movq	%rcx, 4680(%rsp)        # 8-byte Spill
	leaq	.L.str194, %rcx
	movq	%rcx, 4672(%rsp)        # 8-byte Spill
	movabsq	$9, %rcx
	movq	%rcx, 4664(%rsp)        # 8-byte Spill
	leaq	.L.str191, %rcx
	movq	%rcx, 4656(%rsp)        # 8-byte Spill
	leaq	.L.str192, %rcx
	movq	%rcx, 4648(%rsp)        # 8-byte Spill
	movabsq	$13, %rcx
	movq	%rdi, 4640(%rsp)        # 8-byte Spill
	movq	%r13, %rdi
	movq	%rcx, 4632(%rsp)        # 8-byte Spill
	movq	4784(%rsp), %rcx        # 8-byte Reload
	movq	%rsi, 4624(%rsp)        # 8-byte Spill
	movq	%rcx, %rsi
	vmovsd	%xmm0, 4616(%rsp)       # 8-byte Spill
	movq	4792(%rsp), %rcx        # 8-byte Reload
	movq	%rdx, 4608(%rsp)        # 8-byte Spill
	movq	%rcx, %rdx
	movq	4648(%rsp), %rcx        # 8-byte Reload
	movq	%r8, 4600(%rsp)         # 8-byte Spill
	movq	4608(%rsp), %r8         # 8-byte Reload
	movq	%r9, 4592(%rsp)         # 8-byte Spill
	movq	4624(%rsp), %r9         # 8-byte Reload
	movl	%eax, 4588(%rsp)        # 4-byte Spill
	movq	%r15, 4576(%rsp)        # 8-byte Spill
	movq	%r14, 4568(%rsp)        # 8-byte Spill
	movq	%r12, 4560(%rsp)        # 8-byte Spill
	movl	%ebp, 4556(%rsp)        # 4-byte Spill
	movq	%r13, 4544(%rsp)        # 8-byte Spill
	movq	%rbx, 4536(%rsp)        # 8-byte Spill
	movq	%r10, 4528(%rsp)        # 8-byte Spill
	movq	%r11, 4520(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	4728(%rsp), %rdi        # 8-byte Reload
	movq	4568(%rsp), %rsi        # 8-byte Reload
	movq	4576(%rsp), %rdx        # 8-byte Reload
	movq	4672(%rsp), %rcx        # 8-byte Reload
	movq	4632(%rsp), %r8         # 8-byte Reload
	movl	4588(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	4640(%rsp), %rdi        # 8-byte Reload
	movq	4784(%rsp), %rsi        # 8-byte Reload
	vmovsd	4616(%rsp), %xmm0       # 8-byte Reload
	movq	4792(%rsp), %rdx        # 8-byte Reload
	movq	4648(%rsp), %rcx        # 8-byte Reload
	movq	4608(%rsp), %r8         # 8-byte Reload
	movq	4624(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	4792(%rsp), %rdi        # 8-byte Reload
	movq	4784(%rsp), %rsi        # 8-byte Reload
	vmovsd	4800(%rsp), %xmm0       # 8-byte Reload
	movq	4792(%rsp), %rdx        # 8-byte Reload
	movq	4656(%rsp), %rcx        # 8-byte Reload
	movq	4608(%rsp), %r8         # 8-byte Reload
	movq	4624(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	4800(%rsp), %xmm0       # 8-byte Reload
	vmovsd	4616(%rsp), %xmm1       # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	4544(%rsp), %rdi        # 8-byte Reload
	movq	4784(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	4792(%rsp), %rdx        # 8-byte Reload
	movq	4672(%rsp), %rcx        # 8-byte Reload
	movq	4608(%rsp), %r8         # 8-byte Reload
	movq	4624(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 4512(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	4728(%rsp), %rdi        # 8-byte Reload
	movq	4568(%rsp), %rsi        # 8-byte Reload
	movq	4576(%rsp), %rdx        # 8-byte Reload
	movq	4696(%rsp), %rcx        # 8-byte Reload
	movq	4664(%rsp), %r8         # 8-byte Reload
	movl	4588(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	4640(%rsp), %rdi        # 8-byte Reload
	movq	4784(%rsp), %rsi        # 8-byte Reload
	vmovsd	4512(%rsp), %xmm0       # 8-byte Reload
	movq	4792(%rsp), %rdx        # 8-byte Reload
	movq	4672(%rsp), %rcx        # 8-byte Reload
	movq	4608(%rsp), %r8         # 8-byte Reload
	movq	4624(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	4792(%rsp), %rdi        # 8-byte Reload
	movq	4784(%rsp), %rsi        # 8-byte Reload
	vmovsd	4968(%rsp), %xmm0       # 8-byte Reload
	movq	4792(%rsp), %rdx        # 8-byte Reload
	movq	4680(%rsp), %rcx        # 8-byte Reload
	movq	4608(%rsp), %r8         # 8-byte Reload
	movq	4624(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	4968(%rsp), %xmm0       # 8-byte Reload
	vmovsd	4512(%rsp), %xmm1       # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
	movq	4544(%rsp), %rdi        # 8-byte Reload
	movq	4784(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	4792(%rsp), %rdx        # 8-byte Reload
	movq	4696(%rsp), %rcx        # 8-byte Reload
	movq	4608(%rsp), %r8         # 8-byte Reload
	movq	4624(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 4504(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	4728(%rsp), %rdi        # 8-byte Reload
	movq	4568(%rsp), %rsi        # 8-byte Reload
	movq	4576(%rsp), %rdx        # 8-byte Reload
	movq	4760(%rsp), %rcx        # 8-byte Reload
	movq	4688(%rsp), %r8         # 8-byte Reload
	movl	4588(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	4640(%rsp), %rdi        # 8-byte Reload
	movq	4784(%rsp), %rsi        # 8-byte Reload
	vmovsd	4504(%rsp), %xmm0       # 8-byte Reload
	movq	4792(%rsp), %rdx        # 8-byte Reload
	movq	4696(%rsp), %rcx        # 8-byte Reload
	movq	4608(%rsp), %r8         # 8-byte Reload
	movq	4624(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	4792(%rsp), %rdi        # 8-byte Reload
	movq	4784(%rsp), %rsi        # 8-byte Reload
	vmovsd	5008(%rsp), %xmm0       # 8-byte Reload
	movq	4792(%rsp), %rdx        # 8-byte Reload
	movq	4704(%rsp), %rcx        # 8-byte Reload
	movq	4608(%rsp), %r8         # 8-byte Reload
	movq	4624(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	5008(%rsp), %xmm0       # 8-byte Reload
	vmovsd	4504(%rsp), %xmm1       # 8-byte Reload
	vdivsd	%xmm1, %xmm0, %xmm2
	movq	4544(%rsp), %rdi        # 8-byte Reload
	movq	4784(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	4792(%rsp), %rdx        # 8-byte Reload
	movq	4760(%rsp), %rcx        # 8-byte Reload
	movq	4608(%rsp), %r8         # 8-byte Reload
	movq	4624(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 4496(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	4728(%rsp), %rdi        # 8-byte Reload
	movq	4568(%rsp), %rsi        # 8-byte Reload
	movq	4576(%rsp), %rdx        # 8-byte Reload
	movq	4720(%rsp), %rcx        # 8-byte Reload
	movq	4712(%rsp), %r8         # 8-byte Reload
	movl	4588(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	4640(%rsp), %rdi        # 8-byte Reload
	movq	4784(%rsp), %rsi        # 8-byte Reload
	movq	7488(%rsp), %rdx        # 8-byte Reload
	movq	4792(%rsp), %rcx        # 8-byte Reload
	movq	4736(%rsp), %r8         # 8-byte Reload
	movq	4608(%rsp), %r9         # 8-byte Reload
	movq	4624(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	4792(%rsp), %rdi        # 8-byte Reload
	movq	4784(%rsp), %rsi        # 8-byte Reload
	vmovsd	4496(%rsp), %xmm0       # 8-byte Reload
	movq	4792(%rsp), %rdx        # 8-byte Reload
	movq	4760(%rsp), %rcx        # 8-byte Reload
	movq	4608(%rsp), %r8         # 8-byte Reload
	movq	4624(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	7488(%rsp), %rcx        # 8-byte Reload
	vmovsd	4496(%rsp), %xmm0       # 8-byte Reload
	vmovsd	%xmm0, (%rcx)
	.loc	2 510 0                 # eispack.c:510:0
	movq	4752(%rsp), %rdi        # 8-byte Reload
	movq	4568(%rsp), %rsi        # 8-byte Reload
	movq	4576(%rsp), %rdx        # 8-byte Reload
	movq	4776(%rsp), %rcx        # 8-byte Reload
	movq	4744(%rsp), %r8         # 8-byte Reload
	movl	4588(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	4640(%rsp), %rdi        # 8-byte Reload
	movq	4784(%rsp), %rsi        # 8-byte Reload
	vmovsd	4496(%rsp), %xmm0       # 8-byte Reload
	movq	4792(%rsp), %rdx        # 8-byte Reload
	movq	4760(%rsp), %rcx        # 8-byte Reload
	movq	4608(%rsp), %r8         # 8-byte Reload
	movq	4624(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	4792(%rsp), %rdi        # 8-byte Reload
	movq	4784(%rsp), %rsi        # 8-byte Reload
	vmovsd	5000(%rsp), %xmm0       # 8-byte Reload
	movq	4792(%rsp), %rdx        # 8-byte Reload
	movq	4768(%rsp), %rcx        # 8-byte Reload
	movq	4608(%rsp), %r8         # 8-byte Reload
	movq	4624(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	5000(%rsp), %xmm0       # 8-byte Reload
	vmovsd	4496(%rsp), %xmm1       # 8-byte Reload
	vsubsd	%xmm1, %xmm0, %xmm2
	movq	4544(%rsp), %rdi        # 8-byte Reload
	movq	4784(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	4792(%rsp), %rdx        # 8-byte Reload
	movq	4776(%rsp), %rcx        # 8-byte Reload
	movq	4608(%rsp), %r8         # 8-byte Reload
	movq	4624(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 4488(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
.Ltmp424:
	#DEBUG_VALUE: tqlrat:h <- [RSP+4488]
	.loc	2 511 0                 # eispack.c:511:0
	movq	4536(%rsp), %rdi        # 8-byte Reload
	movq	4568(%rsp), %rsi        # 8-byte Reload
	movq	4576(%rsp), %rdx        # 8-byte Reload
	movq	4560(%rsp), %rcx        # 8-byte Reload
	movq	4640(%rsp), %r8         # 8-byte Reload
	movl	4588(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	4528(%rsp), %rdi        # 8-byte Reload
	movq	4608(%rsp), %rsi        # 8-byte Reload
	movq	4608(%rsp), %rdx        # 8-byte Reload
	movq	4792(%rsp), %rcx        # 8-byte Reload
	movq	4520(%rsp), %r8         # 8-byte Reload
	movq	4608(%rsp), %r9         # 8-byte Reload
	movq	4624(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	4640(%rsp), %rdi        # 8-byte Reload
	movq	4608(%rsp), %rsi        # 8-byte Reload
	movq	4608(%rsp), %rdx        # 8-byte Reload
	movq	4792(%rsp), %rcx        # 8-byte Reload
	movq	4592(%rsp), %r8         # 8-byte Reload
	movq	4608(%rsp), %r9         # 8-byte Reload
	movq	4624(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	5827(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	4792(%rsp), %rdi        # 8-byte Reload
	movq	4792(%rsp), %rsi        # 8-byte Reload
	movq	4792(%rsp), %rcx        # 8-byte Reload
	movq	4600(%rsp), %r8         # 8-byte Reload
	movq	4608(%rsp), %r9         # 8-byte Reload
	movq	4624(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	5827(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	movq	8016(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 4480(%rsp)        # 8-byte Spill
	jne	.LBB10_15
	jmp	.LBB10_16
.Ltmp425:
.LBB10_15:                              # %.lr.ph5
                                        #   Parent Loop BB10_5 Depth=1
                                        #     Parent Loop BB10_12 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movq	4480(%rsp), %rax        # 8-byte Reload
	movabsq	$1, %rcx
	leaq	.L.str123, %rdx
	movabsq	$0, %rsi
	leaq	.L.str781, %rdi
	movabsq	$2, %r8
	leaq	.L.str425, %r9
	movabsq	$3, %r10
	leaq	.L.str426, %r11
	movabsq	$511, %rbx              # imm = 0x1FF
	leaq	.L.str62136, %r14
	leaq	.L.str430, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 4472(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 4464(%rsp)        # 8-byte Spill
	leaq	.L.str122, %rax
	movq	%rax, 4456(%rsp)        # 8-byte Spill
	leaq	.L.str51125, %rax
	movq	%rax, 4448(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 4440(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 4432(%rsp)        # 8-byte Spill
	leaq	.L.str428, %rax
	movq	%rax, 4424(%rsp)        # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, 4416(%rsp)        # 8-byte Spill
	leaq	.L.str427, %rax
	movq	%rax, 4408(%rsp)        # 8-byte Spill
	leaq	.L.str1488, %rax
	movq	%rax, 4400(%rsp)        # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, 4392(%rsp)        # 8-byte Spill
	leaq	.L.str201, %rax
	movq	%rax, 4384(%rsp)        # 8-byte Spill
	leaq	.L.str199, %rax
	movq	%rax, 4376(%rsp)        # 8-byte Spill
	movabsq	$513, %rax              # imm = 0x201
	movq	%rax, 4368(%rsp)        # 8-byte Spill
	leaq	.L.str429, %rax
	movq	%rax, 4360(%rsp)        # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, 4352(%rsp)        # 8-byte Spill
	leaq	.L.str200, %rax
	movq	%rax, 4344(%rsp)        # 8-byte Spill
	leaq	.L.str197, %rax
	movq	%rax, 4336(%rsp)        # 8-byte Spill
	movabsq	$11, %rax
	movq	%rax, 4328(%rsp)        # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, 4320(%rsp)        # 8-byte Spill
	leaq	.L.str82, %rax
	movq	%rax, 4312(%rsp)        # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 4304(%rsp)        # 8-byte Spill
	leaq	.L.str389, %rax
	movq	%rax, 4296(%rsp)        # 8-byte Spill
	leaq	.L.str421, %rax
	movq	%rax, 4288(%rsp)        # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 4280(%rsp)        # 8-byte Spill
	movabsq	$48, %rax
	.loc	2 513 0                 # eispack.c:513:0
.Ltmp426:
	movq	%rax, 4272(%rsp)        # 8-byte Spill
	movq	4280(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 4264(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 4256(%rsp)        # 8-byte Spill
	movq	%r14, %rsi
	movq	%rdx, 4248(%rsp)        # 8-byte Spill
	movq	%r9, %rdx
	movq	4408(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 4240(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	4272(%rsp), %rax        # 8-byte Reload
	movq	%r8, 4232(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 4224(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r15, 4216(%rsp)        # 8-byte Spill
	movl	%ebp, 4212(%rsp)        # 4-byte Spill
	movl	%r12d, 4208(%rsp)       # 4-byte Spill
	movq	%r13, 4200(%rsp)        # 8-byte Spill
	movq	%r14, 4192(%rsp)        # 8-byte Spill
	movq	%rbx, 4184(%rsp)        # 8-byte Spill
	movq	%r10, 4176(%rsp)        # 8-byte Spill
	movq	%r11, 4168(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	4232(%rsp), %rdi        # 8-byte Reload
	movq	4432(%rsp), %rsi        # 8-byte Reload
	movq	4256(%rsp), %rdx        # 8-byte Reload
	movq	4240(%rsp), %rcx        # 8-byte Reload
	movq	4296(%rsp), %r8         # 8-byte Reload
	movq	4240(%rsp), %r9         # 8-byte Reload
	movq	4288(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	4240(%rsp), %rdi        # 8-byte Reload
	movq	4432(%rsp), %rsi        # 8-byte Reload
	movq	4256(%rsp), %rdx        # 8-byte Reload
	movq	4240(%rsp), %rcx        # 8-byte Reload
	movq	4424(%rsp), %r8         # 8-byte Reload
	movq	4240(%rsp), %r9         # 8-byte Reload
	movq	4224(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	4200(%rsp), %rdi        # 8-byte Reload
	movq	4432(%rsp), %rsi        # 8-byte Reload
	movq	4472(%rsp), %rdx        # 8-byte Reload
	movq	4240(%rsp), %rcx        # 8-byte Reload
	movq	4408(%rsp), %r8         # 8-byte Reload
	movq	4256(%rsp), %r9         # 8-byte Reload
	movq	4224(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	4368(%rsp), %rdi        # 8-byte Reload
	movq	4192(%rsp), %rsi        # 8-byte Reload
	movq	4224(%rsp), %rdx        # 8-byte Reload
	movq	4376(%rsp), %rcx        # 8-byte Reload
	movq	4304(%rsp), %r8         # 8-byte Reload
	movl	4212(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	4232(%rsp), %rdi        # 8-byte Reload
	movq	4432(%rsp), %rsi        # 8-byte Reload
	movq	4472(%rsp), %rdx        # 8-byte Reload
	movq	4240(%rsp), %rcx        # 8-byte Reload
	movq	4408(%rsp), %r8         # 8-byte Reload
	movq	4256(%rsp), %r9         # 8-byte Reload
	movq	4264(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	4240(%rsp), %rdi        # 8-byte Reload
	movq	4432(%rsp), %rsi        # 8-byte Reload
	movq	9216(%rsp), %rdx        # 8-byte Reload
	movq	4240(%rsp), %rcx        # 8-byte Reload
	movq	4312(%rsp), %r8         # 8-byte Reload
	movq	4256(%rsp), %r9         # 8-byte Reload
	movq	4264(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	4472(%rsp), %rax        # 8-byte Reload
	shlq	$3, %rax
	movq	9216(%rsp), %rcx        # 8-byte Reload
	addq	%rax, %rcx
	movq	4200(%rsp), %rdi        # 8-byte Reload
	movq	4432(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	4240(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 4160(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	4376(%rsp), %r8         # 8-byte Reload
	movq	4256(%rsp), %r9         # 8-byte Reload
	movq	4264(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	4368(%rsp), %rdi        # 8-byte Reload
	movq	4192(%rsp), %rsi        # 8-byte Reload
	movq	4224(%rsp), %rdx        # 8-byte Reload
	movq	4344(%rsp), %rcx        # 8-byte Reload
	movq	4320(%rsp), %r8         # 8-byte Reload
	movl	4212(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	4240(%rsp), %rdi        # 8-byte Reload
	movq	4432(%rsp), %rsi        # 8-byte Reload
	movq	4160(%rsp), %rdx        # 8-byte Reload
	movq	4240(%rsp), %rcx        # 8-byte Reload
	movq	4376(%rsp), %r8         # 8-byte Reload
	movq	4256(%rsp), %r9         # 8-byte Reload
	movq	4264(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	9216(%rsp), %rax        # 8-byte Reload
	movq	4472(%rsp), %rcx        # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
	movq	4200(%rsp), %rdi        # 8-byte Reload
	movq	4432(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 4152(%rsp)       # 8-byte Spill
	movq	4240(%rsp), %rdx        # 8-byte Reload
	movq	4344(%rsp), %rcx        # 8-byte Reload
	movq	4256(%rsp), %r8         # 8-byte Reload
	movq	4264(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	4368(%rsp), %rdi        # 8-byte Reload
	movq	4192(%rsp), %rsi        # 8-byte Reload
	movq	4224(%rsp), %rdx        # 8-byte Reload
	movq	4384(%rsp), %rcx        # 8-byte Reload
	movq	4328(%rsp), %r8         # 8-byte Reload
	movl	4212(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	4232(%rsp), %rdi        # 8-byte Reload
	movq	4432(%rsp), %rsi        # 8-byte Reload
	vmovsd	4488(%rsp), %xmm0       # 8-byte Reload
	movq	4240(%rsp), %rdx        # 8-byte Reload
	movq	4336(%rsp), %rcx        # 8-byte Reload
	movq	4256(%rsp), %r8         # 8-byte Reload
	movq	4264(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	4240(%rsp), %rdi        # 8-byte Reload
	movq	4432(%rsp), %rsi        # 8-byte Reload
	vmovsd	4152(%rsp), %xmm0       # 8-byte Reload
	movq	4240(%rsp), %rdx        # 8-byte Reload
	movq	4344(%rsp), %rcx        # 8-byte Reload
	movq	4256(%rsp), %r8         # 8-byte Reload
	movq	4264(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	4152(%rsp), %xmm0       # 8-byte Reload
	vmovsd	4488(%rsp), %xmm1       # 8-byte Reload
	vsubsd	%xmm1, %xmm0, %xmm2
	movq	4200(%rsp), %rdi        # 8-byte Reload
	movq	4432(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	4240(%rsp), %rdx        # 8-byte Reload
	movq	4384(%rsp), %rcx        # 8-byte Reload
	movq	4256(%rsp), %r8         # 8-byte Reload
	movq	4264(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 4144(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	4368(%rsp), %rdi        # 8-byte Reload
	movq	4192(%rsp), %rsi        # 8-byte Reload
	movq	4224(%rsp), %rdx        # 8-byte Reload
	movq	4360(%rsp), %rcx        # 8-byte Reload
	movq	4352(%rsp), %r8         # 8-byte Reload
	movl	4212(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	4232(%rsp), %rdi        # 8-byte Reload
	movq	4432(%rsp), %rsi        # 8-byte Reload
	movq	4160(%rsp), %rdx        # 8-byte Reload
	movq	4240(%rsp), %rcx        # 8-byte Reload
	movq	4376(%rsp), %r8         # 8-byte Reload
	movq	4256(%rsp), %r9         # 8-byte Reload
	movq	4264(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	4240(%rsp), %rdi        # 8-byte Reload
	movq	4432(%rsp), %rsi        # 8-byte Reload
	vmovsd	4144(%rsp), %xmm0       # 8-byte Reload
	movq	4240(%rsp), %rdx        # 8-byte Reload
	movq	4384(%rsp), %rcx        # 8-byte Reload
	movq	4256(%rsp), %r8         # 8-byte Reload
	movq	4264(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	9216(%rsp), %rax        # 8-byte Reload
	movq	4472(%rsp), %rcx        # 8-byte Reload
	vmovsd	4144(%rsp), %xmm0       # 8-byte Reload
	vmovsd	%xmm0, (%rax,%rcx,8)
.Ltmp427:
	.loc	2 511 0                 # eispack.c:511:0
	movq	4184(%rsp), %rdi        # 8-byte Reload
	movq	4192(%rsp), %rsi        # 8-byte Reload
	movq	4224(%rsp), %rdx        # 8-byte Reload
	movq	4424(%rsp), %rcx        # 8-byte Reload
	movq	4392(%rsp), %r8         # 8-byte Reload
	movl	4212(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	4232(%rsp), %rdi        # 8-byte Reload
	movq	4432(%rsp), %rsi        # 8-byte Reload
	movq	4240(%rsp), %rdx        # 8-byte Reload
	movq	4256(%rsp), %rcx        # 8-byte Reload
	movq	4400(%rsp), %r8         # 8-byte Reload
	movq	4256(%rsp), %r9         # 8-byte Reload
	movq	4264(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	4240(%rsp), %rdi        # 8-byte Reload
	movq	4432(%rsp), %rsi        # 8-byte Reload
	movq	4472(%rsp), %rdx        # 8-byte Reload
	movq	4240(%rsp), %rcx        # 8-byte Reload
	movq	4408(%rsp), %r8         # 8-byte Reload
	movq	4256(%rsp), %r9         # 8-byte Reload
	movq	4264(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	4472(%rsp), %rax        # 8-byte Reload
	addq	$1, %rax
	movq	4200(%rsp), %rdi        # 8-byte Reload
	movq	4432(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	4240(%rsp), %rcx        # 8-byte Reload
	movq	4424(%rsp), %r8         # 8-byte Reload
	movq	4256(%rsp), %r9         # 8-byte Reload
	movq	4264(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 4136(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	4184(%rsp), %rdi        # 8-byte Reload
	movq	4192(%rsp), %rsi        # 8-byte Reload
	movq	4224(%rsp), %rdx        # 8-byte Reload
	movq	4456(%rsp), %rcx        # 8-byte Reload
	movq	4416(%rsp), %r8         # 8-byte Reload
	movl	4212(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	4240(%rsp), %rdi        # 8-byte Reload
	movq	4432(%rsp), %rsi        # 8-byte Reload
	movq	4136(%rsp), %rdx        # 8-byte Reload
	movq	4240(%rsp), %rcx        # 8-byte Reload
	movq	4424(%rsp), %r8         # 8-byte Reload
	movq	4256(%rsp), %r9         # 8-byte Reload
	movq	4264(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	4136(%rsp), %rax        # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	4200(%rsp), %rdi        # 8-byte Reload
	movq	4464(%rsp), %rsi        # 8-byte Reload
	movq	4240(%rsp), %rcx        # 8-byte Reload
	movq	4456(%rsp), %r8         # 8-byte Reload
	movq	4256(%rsp), %r9         # 8-byte Reload
	movq	4264(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 4132(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	4184(%rsp), %rdi        # 8-byte Reload
	movq	4192(%rsp), %rsi        # 8-byte Reload
	movq	4224(%rsp), %rdx        # 8-byte Reload
	movq	4248(%rsp), %rcx        # 8-byte Reload
	movq	4440(%rsp), %r8         # 8-byte Reload
	movl	4212(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	9228(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	4232(%rsp), %rdi        # 8-byte Reload
	movq	4464(%rsp), %rsi        # 8-byte Reload
	movq	4240(%rsp), %rcx        # 8-byte Reload
	movq	4448(%rsp), %r8         # 8-byte Reload
	movq	4256(%rsp), %r9         # 8-byte Reload
	movq	4264(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	4132(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	4240(%rsp), %rdi        # 8-byte Reload
	movq	4464(%rsp), %rsi        # 8-byte Reload
	movq	4240(%rsp), %rcx        # 8-byte Reload
	movq	4456(%rsp), %r8         # 8-byte Reload
	movq	4256(%rsp), %r9         # 8-byte Reload
	movq	4264(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	4132(%rsp), %ebp        # 4-byte Reload
	movl	9228(%rsp), %r12d       # 4-byte Reload
	cmpl	%r12d, %ebp
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	4200(%rsp), %rdi        # 8-byte Reload
	movq	4240(%rsp), %rsi        # 8-byte Reload
	movq	4240(%rsp), %rcx        # 8-byte Reload
	movq	4248(%rsp), %r8         # 8-byte Reload
	movq	4256(%rsp), %r9         # 8-byte Reload
	movq	4264(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 4131(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	4184(%rsp), %rdi        # 8-byte Reload
	movq	4192(%rsp), %rsi        # 8-byte Reload
	movq	4224(%rsp), %rdx        # 8-byte Reload
	movq	4216(%rsp), %rcx        # 8-byte Reload
	movq	4232(%rsp), %r8         # 8-byte Reload
	movl	4212(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	4176(%rsp), %rdi        # 8-byte Reload
	movq	4256(%rsp), %rsi        # 8-byte Reload
	movq	4256(%rsp), %rdx        # 8-byte Reload
	movq	4240(%rsp), %rcx        # 8-byte Reload
	movq	4168(%rsp), %r8         # 8-byte Reload
	movq	4256(%rsp), %r9         # 8-byte Reload
	movq	4264(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	4232(%rsp), %rdi        # 8-byte Reload
	movq	4256(%rsp), %rsi        # 8-byte Reload
	movq	4256(%rsp), %rdx        # 8-byte Reload
	movq	4240(%rsp), %rcx        # 8-byte Reload
	movq	4224(%rsp), %r8         # 8-byte Reload
	movq	4256(%rsp), %r9         # 8-byte Reload
	movq	4264(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	4131(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	4240(%rsp), %rdi        # 8-byte Reload
	movq	4240(%rsp), %rsi        # 8-byte Reload
	movq	4240(%rsp), %rcx        # 8-byte Reload
	movq	4248(%rsp), %r8         # 8-byte Reload
	movq	4256(%rsp), %r9         # 8-byte Reload
	movq	4264(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	4131(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	movq	4136(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 4480(%rsp)        # 8-byte Spill
	jne	.LBB10_16
	jmp	.LBB10_15
.Ltmp428:
.LBB10_16:                              # %._crit_edge6
                                        #   in Loop: Header=BB10_12 Depth=2
	vxorps	%xmm0, %xmm0, %xmm0
	movabsq	$1, %rax
	leaq	.L.str148, %r8
	movabsq	$0, %rcx
	leaq	.L.str781, %rdx
	movabsq	$2, %rsi
	leaq	.L.str434, %rdi
	movabsq	$3, %r9
	leaq	.L.str433, %r10
	movabsq	$529, %r11              # imm = 0x211
	leaq	.L.str62136, %rbx
	leaq	.L.str426, %r14
	leaq	.L.str432, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 4120(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 4112(%rsp)        # 8-byte Spill
	leaq	.L.str431, %rax
	.loc	2 515 0                 # eispack.c:515:0
	movq	%rax, 4104(%rsp)        # 8-byte Spill
	movq	%rsp, %rax
	movl	$1, (%rax)
	movl	$.L.str62136, %eax
                                        # kill: RAX<def> EAX<kill>
	movq	%rsi, 4096(%rsp)        # 8-byte Spill
	movl	$.L.str426, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, 4088(%rsp)        # 8-byte Spill
	movl	$.L.str202, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, 4080(%rsp)        # 8-byte Spill
	movl	$515, %esi              # imm = 0x203
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, 4072(%rsp)        # 8-byte Spill
	movl	$9, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, 4064(%rsp)        # 8-byte Spill
	xorl	%esi, %esi
	movq	%rax, 4056(%rsp)        # 8-byte Spill
	movq	4072(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 4048(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	4056(%rsp), %rax        # 8-byte Reload
	movl	%esi, 4044(%rsp)        # 4-byte Spill
	movq	%rax, %rsi
	movq	4088(%rsp), %rax        # 8-byte Reload
	movq	%rdx, 4032(%rsp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	4080(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 4024(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	4064(%rsp), %rax        # 8-byte Reload
	movq	%r8, 4016(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movl	4044(%rsp), %eax        # 4-byte Reload
	movq	%r9, 4008(%rsp)         # 8-byte Spill
	movl	%eax, %r9d
	vmovsd	%xmm0, 4000(%rsp)       # 8-byte Spill
	movq	%r13, 3992(%rsp)        # 8-byte Spill
	movq	%r14, 3984(%rsp)        # 8-byte Spill
	movq	%r15, 3976(%rsp)        # 8-byte Spill
	movl	%ebp, 3972(%rsp)        # 4-byte Spill
	movl	%r12d, 3968(%rsp)       # 4-byte Spill
	movq	%rbx, 3960(%rsp)        # 8-byte Spill
	movq	%r10, 3952(%rsp)        # 8-byte Spill
	movq	%r11, 3944(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movl	$.L.str197, %eax
	movl	%eax, %ecx
	movl	$.L.str781, %eax
	movl	%eax, %edx
	movl	$2, %eax
	movl	%eax, %esi
	movl	$64, %eax
	movl	%eax, %edi
	movl	$1, %eax
	movl	%eax, %r8d
	movl	4044(%rsp), %eax        # 4-byte Reload
	movl	%eax, %r10d
	movq	%rdi, 3936(%rsp)        # 8-byte Spill
	movq	%rsi, %rdi
	movq	3936(%rsp), %r11        # 8-byte Reload
	movq	%rsi, 3928(%rsp)        # 8-byte Spill
	movq	%r11, %rsi
	vmovsd	4488(%rsp), %xmm0       # 8-byte Reload
	movq	%rdx, 3920(%rsp)        # 8-byte Spill
	movq	%r8, %rdx
	movq	%r8, 3912(%rsp)         # 8-byte Spill
	movq	%r10, %r8
	movq	3920(%rsp), %r9         # 8-byte Reload
	movq	%r10, 3904(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movl	$.L.str416, %eax
	movl	%eax, %ecx
	movq	3912(%rsp), %rdi        # 8-byte Reload
	movq	3936(%rsp), %rsi        # 8-byte Reload
	vmovsd	5592(%rsp), %xmm0       # 8-byte Reload
	movq	3912(%rsp), %rdx        # 8-byte Reload
	movq	3904(%rsp), %r8         # 8-byte Reload
	movq	3920(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	5592(%rsp), %xmm0       # 8-byte Reload
	vmovsd	4488(%rsp), %xmm1       # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %ecx
	movq	%rcx, %rdi
	movq	3936(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	3912(%rsp), %rdx        # 8-byte Reload
	movq	4080(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 3896(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	3904(%rsp), %r8         # 8-byte Reload
	movq	3920(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 3888(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
.Ltmp429:
	#DEBUG_VALUE: tqlrat:f <- [RSP+3888]
	.loc	2 519 0                 # eispack.c:519:0
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str203, %eax
	movl	%eax, %ecx
	movl	$519, %eax              # imm = 0x207
	movl	%eax, %edi
	movl	$27, %eax
	movl	%eax, %r8d
	movq	4056(%rsp), %rsi        # 8-byte Reload
	movq	4088(%rsp), %rdx        # 8-byte Reload
	movq	%rcx, 3880(%rsp)        # 8-byte Spill
	movl	4044(%rsp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
.Ltmp430:
	movq	%rsp, %rcx
	movq	$.L.str781, (%rcx)
	movl	$.L.str144, %eax
	movl	%eax, %r8d
	movq	3912(%rsp), %rdi        # 8-byte Reload
	movq	3936(%rsp), %rsi        # 8-byte Reload
	movq	5808(%rsp), %rdx        # 8-byte Reload
	movq	3912(%rsp), %rcx        # 8-byte Reload
	movq	3904(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_ptr
	movq	5808(%rsp), %rcx        # 8-byte Reload
	vmovsd	(%rcx), %xmm0
	movq	3896(%rsp), %rdi        # 8-byte Reload
	movq	3936(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 3872(%rsp)       # 8-byte Spill
	movq	3912(%rsp), %rdx        # 8-byte Reload
	movq	3880(%rsp), %rcx        # 8-byte Reload
	movq	3904(%rsp), %r8         # 8-byte Reload
	movq	3920(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
.Ltmp431:
	#DEBUG_VALUE: tqlrat:g <- [RSP+3872]
	.loc	2 520 0                 # eispack.c:520:0
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str205, %eax
	movl	%eax, %ecx
	movl	$520, %eax              # imm = 0x208
	movl	%eax, %edx
	movl	$47, %eax
	movl	%eax, %r8d
	movq	%rdx, %rdi
	movq	4056(%rsp), %rsi        # 8-byte Reload
	movq	4088(%rsp), %r9         # 8-byte Reload
	movq	%rdx, 3864(%rsp)        # 8-byte Spill
	movq	%r9, %rdx
	movq	%rcx, 3856(%rsp)        # 8-byte Spill
	movl	4044(%rsp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
.Ltmp432:
	movl	$.L.str1488, %eax
	movl	%eax, %ecx
	vxorps	%xmm0, %xmm0, %xmm0
	movq	3928(%rsp), %rdi        # 8-byte Reload
	movq	3936(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 3848(%rsp)       # 8-byte Spill
	movq	3904(%rsp), %rdx        # 8-byte Reload
	movq	3904(%rsp), %r8         # 8-byte Reload
	movq	3920(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	3912(%rsp), %rdi        # 8-byte Reload
	movq	3936(%rsp), %rsi        # 8-byte Reload
	vmovsd	3872(%rsp), %xmm0       # 8-byte Reload
	movq	3912(%rsp), %rdx        # 8-byte Reload
	movq	3880(%rsp), %rcx        # 8-byte Reload
	movq	3904(%rsp), %r8         # 8-byte Reload
	movq	3920(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	3848(%rsp), %xmm0       # 8-byte Reload
	vmovsd	3872(%rsp), %xmm1       # 8-byte Reload
	vucomisd	%xmm1, %xmm0
	setnp	%al
	sete	%cl
	andb	%al, %cl
	.loc	2 522 0                 # eispack.c:522:0
.Ltmp433:
	movzbl	%cl, %ebp
	movl	%ebp, %edx
	movq	%rsp, %rsi
	movq	$.L.str781, (%rsi)
	movq	3896(%rsp), %rdi        # 8-byte Reload
	movq	3912(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 3840(%rsp)        # 8-byte Spill
	movq	3912(%rsp), %r8         # 8-byte Reload
	movb	%cl, 3839(%rsp)         # 1-byte Spill
	movq	%r8, %rcx
	movq	3856(%rsp), %r8         # 8-byte Reload
	movq	3904(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
.Ltmp434:
	.loc	2 520 0                 # eispack.c:520:0
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str431, %ebp
	movl	%ebp, %ecx
	movl	$50, %ebp
	movl	%ebp, %r8d
	movq	3864(%rsp), %rdi        # 8-byte Reload
	movq	4056(%rsp), %rsi        # 8-byte Reload
	movq	4088(%rsp), %rdx        # 8-byte Reload
	movl	4044(%rsp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
	movl	$3, %r9d
	movl	%r9d, %edi
	movq	3936(%rsp), %rsi        # 8-byte Reload
	vmovsd	3872(%rsp), %xmm0       # 8-byte Reload
	movq	3912(%rsp), %rdx        # 8-byte Reload
	movq	3880(%rsp), %rcx        # 8-byte Reload
	movq	3904(%rsp), %r8         # 8-byte Reload
	movq	3920(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movl	$.L.str394, %ebp
	movl	%ebp, %ecx
.Ltmp435:
	#DEBUG_VALUE: tqlrat:g <- [RSP+7024]
	movq	3928(%rsp), %rdi        # 8-byte Reload
	movq	3936(%rsp), %rsi        # 8-byte Reload
	vmovsd	7024(%rsp), %xmm0       # 8-byte Reload
	movq	3912(%rsp), %rdx        # 8-byte Reload
	movq	3904(%rsp), %r8         # 8-byte Reload
	movq	3920(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
.Ltmp436:
	movq	%rsp, %rcx
	movq	$.L.str781, (%rcx)
	movq	3912(%rsp), %rdi        # 8-byte Reload
	movq	3912(%rsp), %rsi        # 8-byte Reload
	movq	3840(%rsp), %rdx        # 8-byte Reload
	movq	3912(%rsp), %rcx        # 8-byte Reload
	movq	3856(%rsp), %r8         # 8-byte Reload
	movq	3904(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	movb	3839(%rsp), %al         # 1-byte Reload
	testb	%al, %al
	vmovsd	7024(%rsp), %xmm0       # 8-byte Reload
	vmovsd	%xmm0, 3824(%rsp)       # 8-byte Spill
	jne	.LBB10_30
# BB#29:                                # %._crit_edge6
                                        #   in Loop: Header=BB10_12 Depth=2
	vmovsd	3872(%rsp), %xmm0       # 8-byte Reload
	vmovsd	%xmm0, 3824(%rsp)       # 8-byte Spill
.LBB10_30:                              # %._crit_edge6
                                        #   in Loop: Header=BB10_12 Depth=2
	vmovsd	3824(%rsp), %xmm0       # 8-byte Reload
.Ltmp437:
	.loc	2 525 0                 # eispack.c:525:0
	movq	3992(%rsp), %rdi        # 8-byte Reload
	movq	4112(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 3816(%rsp)       # 8-byte Spill
	movq	4120(%rsp), %rdx        # 8-byte Reload
	movq	4104(%rsp), %rcx        # 8-byte Reload
	movq	4024(%rsp), %r8         # 8-byte Reload
	movq	4032(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
.Ltmp438:
	#DEBUG_VALUE: tqlrat:h <- [RSP+3816]
	#DEBUG_VALUE: tqlrat:s <- 0.000000e+00
	#DEBUG_VALUE: tqlrat:mml <- [RSP+5800]
	#DEBUG_VALUE: tqlrat:ii <- 1
	.loc	2 529 0                 # eispack.c:529:0
	movq	3944(%rsp), %rdi        # 8-byte Reload
	movq	3960(%rsp), %rsi        # 8-byte Reload
	movq	3984(%rsp), %rdx        # 8-byte Reload
	movq	3976(%rsp), %rcx        # 8-byte Reload
	movq	4096(%rsp), %r8         # 8-byte Reload
	movl	3972(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	4008(%rsp), %rdi        # 8-byte Reload
	movq	4024(%rsp), %rsi        # 8-byte Reload
	movq	4024(%rsp), %rdx        # 8-byte Reload
	movq	4120(%rsp), %rcx        # 8-byte Reload
	movq	3952(%rsp), %r8         # 8-byte Reload
	movq	4024(%rsp), %r9         # 8-byte Reload
	movq	4032(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	4096(%rsp), %rdi        # 8-byte Reload
	movq	4024(%rsp), %rsi        # 8-byte Reload
	movq	4024(%rsp), %rdx        # 8-byte Reload
	movq	4120(%rsp), %rcx        # 8-byte Reload
	movq	4048(%rsp), %r8         # 8-byte Reload
	movq	4024(%rsp), %r9         # 8-byte Reload
	movq	4032(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movb	5799(%rsp), %r10b       # 1-byte Reload
	andb	$1, %r10b
	movzbl	%r10b, %r11d
	movl	%r11d, %edx
	movq	4120(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	movq	4120(%rsp), %rcx        # 8-byte Reload
	movq	4016(%rsp), %r8         # 8-byte Reload
	movq	4024(%rsp), %r9         # 8-byte Reload
	movq	4032(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movb	5799(%rsp), %r10b       # 1-byte Reload
	testb	$1, %r10b
	movq	4120(%rsp), %rax        # 8-byte Reload
	vmovsd	4000(%rsp), %xmm0       # 8-byte Reload
	vmovsd	3816(%rsp), %xmm1       # 8-byte Reload
	vmovsd	3816(%rsp), %xmm2       # 8-byte Reload
	movq	%rax, 3808(%rsp)        # 8-byte Spill
	vmovsd	%xmm0, 3800(%rsp)       # 8-byte Spill
	vmovsd	%xmm1, 3792(%rsp)       # 8-byte Spill
	vmovsd	%xmm2, 3784(%rsp)       # 8-byte Spill
	jne	.LBB10_18
.Ltmp439:
.LBB10_17:                              # %.lr.ph12
                                        #   Parent Loop BB10_5 Depth=1
                                        #     Parent Loop BB10_12 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	vmovsd	3784(%rsp), %xmm0       # 8-byte Reload
	vmovsd	3792(%rsp), %xmm1       # 8-byte Reload
	vmovsd	3800(%rsp), %xmm2       # 8-byte Reload
	movq	3808(%rsp), %rax        # 8-byte Reload
	movabsq	$1, %rcx
	leaq	.L.str445, %rdx
	movabsq	$0, %rsi
	leaq	.L.str781, %rdi
	movabsq	$2, %r8
	leaq	.L.str434, %r9
	movabsq	$3, %r10
	leaq	.L.str433, %r11
	movabsq	$529, %rbx              # imm = 0x211
	leaq	.L.str62136, %r14
	leaq	.L.str446, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 3776(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 3768(%rsp)        # 8-byte Spill
	leaq	.L.str444, %rax
	movq	%rax, 3760(%rsp)        # 8-byte Spill
	leaq	.L.str149, %rax
	movq	%rax, 3752(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 3744(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 3736(%rsp)        # 8-byte Spill
	leaq	.L.str436, %rax
	movq	%rax, 3728(%rsp)        # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, 3720(%rsp)        # 8-byte Spill
	leaq	.L.str435, %rax
	movq	%rax, 3712(%rsp)        # 8-byte Spill
	leaq	.L.str1488, %rax
	movq	%rax, 3704(%rsp)        # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, 3696(%rsp)        # 8-byte Spill
	leaq	.L.str255, %rax
	movq	%rax, 3688(%rsp)        # 8-byte Spill
	leaq	.L.str254, %rax
	movq	%rax, 3680(%rsp)        # 8-byte Spill
	leaq	.L.str229, %rax
	movq	%rax, 3672(%rsp)        # 8-byte Spill
	movabsq	$542, %rax              # imm = 0x21E
	movq	%rax, 3664(%rsp)        # 8-byte Spill
	movabsq	$16, %rax
	movq	%rax, 3656(%rsp)        # 8-byte Spill
	leaq	.L.str209, %rax
	movq	%rax, 3648(%rsp)        # 8-byte Spill
	leaq	.L.str440, %rax
	movq	%rax, 3640(%rsp)        # 8-byte Spill
	movabsq	$13, %rax
	.loc	2 531 0                 # eispack.c:531:0
.Ltmp440:
	movq	%rax, 3632(%rsp)        # 8-byte Spill
	movq	%rsp, %rax
	movl	$1, (%rax)
	movl	$.L.str62136, %eax
                                        # kill: RAX<def> EAX<kill>
	movq	%rsi, 3624(%rsp)        # 8-byte Spill
	movl	$.L.str434, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, 3616(%rsp)        # 8-byte Spill
	movl	$.L.str435, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, 3608(%rsp)        # 8-byte Spill
	movl	$48, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rax, 3600(%rsp)        # 8-byte Spill
	movq	$-1, %rax
	movq	%rsi, 3592(%rsp)        # 8-byte Spill
	xorl	%esi, %esi
	movq	%rdi, 3584(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rax, 3576(%rsp)        # 8-byte Spill
	movq	3600(%rsp), %rax        # 8-byte Reload
	movl	%esi, 3572(%rsp)        # 4-byte Spill
	movq	%rax, %rsi
	movq	3616(%rsp), %rax        # 8-byte Reload
	movq	%rdx, 3560(%rsp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	3608(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 3552(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	3592(%rsp), %rax        # 8-byte Reload
	movq	%r8, 3544(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movl	3572(%rsp), %eax        # 4-byte Reload
	movq	%r9, 3536(%rsp)         # 8-byte Spill
	movl	%eax, %r9d
	vmovsd	%xmm0, 3528(%rsp)       # 8-byte Spill
	vmovsd	%xmm1, 3520(%rsp)       # 8-byte Spill
	vmovsd	%xmm2, 3512(%rsp)       # 8-byte Spill
	movq	%r13, 3504(%rsp)        # 8-byte Spill
	movq	%r15, 3496(%rsp)        # 8-byte Spill
	movl	%ebp, 3492(%rsp)        # 4-byte Spill
	movl	%r12d, 3488(%rsp)       # 4-byte Spill
	movq	%r14, 3480(%rsp)        # 8-byte Spill
	movq	%rbx, 3472(%rsp)        # 8-byte Spill
	movq	%r10, 3464(%rsp)        # 8-byte Spill
	movq	%r11, 3456(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	%rsp, %rcx
	movq	$.L.str426, (%rcx)
	movl	$.L.str1488, %eax
	movl	%eax, %ecx
	movl	$2, %eax
	movl	%eax, %edx
	movl	$64, %eax
	movl	%eax, %esi
	movl	3572(%rsp), %eax        # 4-byte Reload
	movl	%eax, %edi
	movl	$1, %r9d
	movl	%r9d, %r8d
	movq	%rdi, 3448(%rsp)        # 8-byte Spill
	movq	%rdx, %rdi
	movq	%rsi, 3440(%rsp)        # 8-byte Spill
	movq	%rdx, 3432(%rsp)        # 8-byte Spill
	movq	%r8, %rdx
	movq	3448(%rsp), %r10        # 8-byte Reload
	movq	%rcx, 3424(%rsp)        # 8-byte Spill
	movq	%r10, %rcx
	movq	3424(%rsp), %r11        # 8-byte Reload
	movq	%r8, 3416(%rsp)         # 8-byte Spill
	movq	%r11, %r8
	movq	3416(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	movl	$.L.str426, %eax
	movl	%eax, %r9d
	movq	%rsp, %rcx
	movq	$.L.str434, (%rcx)
	movl	$.L.str436, %eax
	movl	%eax, %r8d
	movq	3416(%rsp), %rdi        # 8-byte Reload
	movq	3440(%rsp), %rsi        # 8-byte Reload
	movq	3448(%rsp), %rdx        # 8-byte Reload
	movq	3416(%rsp), %rcx        # 8-byte Reload
	movq	3416(%rsp), %r10        # 8-byte Reload
	movq	%r9, 3408(%rsp)         # 8-byte Spill
	movq	%r10, %r9
	callq	trace_logger_log_int
	movq	%rsp, %rcx
	movq	$.L.str434, (%rcx)
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %ecx
	movq	%rcx, %rdi
	movq	3440(%rsp), %rsi        # 8-byte Reload
	movq	3776(%rsp), %rdx        # 8-byte Reload
	movq	3416(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 3400(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	3608(%rsp), %r8         # 8-byte Reload
	movq	3448(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str437, %eax
	movl	%eax, %ecx
	movq	3576(%rsp), %rdi        # 8-byte Reload
	movq	3600(%rsp), %rsi        # 8-byte Reload
	movq	3616(%rsp), %rdx        # 8-byte Reload
	movq	%rcx, 3392(%rsp)        # 8-byte Spill
	movq	3592(%rsp), %r8         # 8-byte Reload
	movl	3572(%rsp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
	vxorps	%xmm0, %xmm0, %xmm0
	movq	3432(%rsp), %rdi        # 8-byte Reload
	movq	3440(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 3384(%rsp)       # 8-byte Spill
	movq	3448(%rsp), %rdx        # 8-byte Reload
	movq	3424(%rsp), %rcx        # 8-byte Reload
	movq	3416(%rsp), %r8         # 8-byte Reload
	movq	3408(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	%rsp, %rcx
	movq	$.L.str434, (%rcx)
	movl	$.L.str235, %eax
	movl	%eax, %ecx
	movq	3416(%rsp), %rdi        # 8-byte Reload
	movq	3440(%rsp), %rsi        # 8-byte Reload
	movq	3448(%rsp), %rdx        # 8-byte Reload
	movq	3416(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 3376(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	3376(%rsp), %r8         # 8-byte Reload
	movq	3416(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	movq	3400(%rsp), %rdi        # 8-byte Reload
	movq	3440(%rsp), %rsi        # 8-byte Reload
	vmovsd	3512(%rsp), %xmm0       # 8-byte Reload
	movq	3416(%rsp), %rdx        # 8-byte Reload
	movq	3392(%rsp), %rcx        # 8-byte Reload
	movq	3448(%rsp), %r8         # 8-byte Reload
	movq	3616(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str438, %eax
	movl	%eax, %ecx
	movq	3576(%rsp), %rdi        # 8-byte Reload
	movq	3600(%rsp), %rsi        # 8-byte Reload
	movq	3616(%rsp), %rdx        # 8-byte Reload
	movq	%rcx, 3368(%rsp)        # 8-byte Spill
	movq	3592(%rsp), %r8         # 8-byte Reload
	movl	3572(%rsp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
	movq	%rsp, %rcx
	movq	$.L.str426, (%rcx)
	movl	$.L.str431, %eax
	movl	%eax, %ecx
	movq	3432(%rsp), %rdi        # 8-byte Reload
	movq	3440(%rsp), %rsi        # 8-byte Reload
	movq	3448(%rsp), %rdx        # 8-byte Reload
	movq	3416(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 3360(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	3360(%rsp), %r8         # 8-byte Reload
	movq	3416(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	movq	%rsp, %rcx
	movq	$.L.str434, (%rcx)
	movl	$.L.str255, %eax
	movl	%eax, %r8d
	movq	3416(%rsp), %rdi        # 8-byte Reload
	movq	3440(%rsp), %rsi        # 8-byte Reload
	movq	3448(%rsp), %rdx        # 8-byte Reload
	movq	3416(%rsp), %rcx        # 8-byte Reload
	movq	3416(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	movq	3400(%rsp), %rdi        # 8-byte Reload
	movq	3440(%rsp), %rsi        # 8-byte Reload
	vmovsd	3520(%rsp), %xmm0       # 8-byte Reload
	movq	3416(%rsp), %rdx        # 8-byte Reload
	movq	3368(%rsp), %rcx        # 8-byte Reload
	movq	3448(%rsp), %r8         # 8-byte Reload
	movq	3616(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str439, %eax
	movl	%eax, %ecx
	movq	3576(%rsp), %rdi        # 8-byte Reload
	movq	3600(%rsp), %rsi        # 8-byte Reload
	movq	3616(%rsp), %rdx        # 8-byte Reload
	movq	%rcx, 3352(%rsp)        # 8-byte Spill
	movq	3592(%rsp), %r8         # 8-byte Reload
	movl	3572(%rsp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
	movq	%rsp, %rcx
	movq	$.L.str426, (%rcx)
	movq	3432(%rsp), %rdi        # 8-byte Reload
	movq	3440(%rsp), %rsi        # 8-byte Reload
	movq	3448(%rsp), %rdx        # 8-byte Reload
	movq	3416(%rsp), %rcx        # 8-byte Reload
	movq	3360(%rsp), %r8         # 8-byte Reload
	movq	3416(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	movq	%rsp, %rcx
	movq	$.L.str434, (%rcx)
	movl	$.L.str440, %eax
	movl	%eax, %ecx
	movq	3416(%rsp), %rdi        # 8-byte Reload
	movq	3440(%rsp), %rsi        # 8-byte Reload
	movq	3448(%rsp), %rdx        # 8-byte Reload
	movq	3416(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 3344(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	3344(%rsp), %r8         # 8-byte Reload
	movq	3416(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	movq	3400(%rsp), %rdi        # 8-byte Reload
	movq	3440(%rsp), %rsi        # 8-byte Reload
	vmovsd	3528(%rsp), %xmm0       # 8-byte Reload
	movq	3416(%rsp), %rdx        # 8-byte Reload
	movq	3352(%rsp), %rcx        # 8-byte Reload
	movq	3448(%rsp), %r8         # 8-byte Reload
	movq	3616(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str206, %eax
	movl	%eax, %ecx
	movl	$531, %eax              # imm = 0x213
	movl	%eax, %edx
	movl	$33, %eax
	movl	%eax, %r8d
	movq	%rdx, %rdi
	movq	3600(%rsp), %rsi        # 8-byte Reload
	movq	3616(%rsp), %r9         # 8-byte Reload
	movq	%rdx, 3336(%rsp)        # 8-byte Spill
	movq	%r9, %rdx
	movq	%rcx, 3328(%rsp)        # 8-byte Spill
	movl	3572(%rsp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
	movq	%rsp, %rcx
	movq	$.L.str781, (%rcx)
	movq	3416(%rsp), %rdi        # 8-byte Reload
	movq	3440(%rsp), %rsi        # 8-byte Reload
	movq	3776(%rsp), %rdx        # 8-byte Reload
	movq	3416(%rsp), %rcx        # 8-byte Reload
	movq	3608(%rsp), %r8         # 8-byte Reload
	movq	3448(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	movl	$.L.str781, %eax
	movl	%eax, %ecx
	movq	3776(%rsp), %rdx        # 8-byte Reload
	movl	%edx, %eax
	movl	%eax, %ebp
	movl	%ebp, %esi
	movq	%rsp, %rdi
	movq	$.L.str781, (%rdi)
	movl	$32, %ebp
	movl	%ebp, %edi
	movq	3400(%rsp), %r8         # 8-byte Reload
	movq	%rdi, 3320(%rsp)        # 8-byte Spill
	movq	%r8, %rdi
	movq	3320(%rsp), %r9         # 8-byte Reload
	movq	%rsi, 3312(%rsp)        # 8-byte Spill
	movq	%r9, %rsi
	movq	3312(%rsp), %rdx        # 8-byte Reload
	movq	3416(%rsp), %r10        # 8-byte Reload
	movq	%rcx, 3304(%rsp)        # 8-byte Spill
	movq	%r10, %rcx
	movq	3328(%rsp), %r8         # 8-byte Reload
	movq	3448(%rsp), %r9         # 8-byte Reload
	movl	%eax, 3300(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str207, %eax
	movl	%eax, %ecx
	movl	$10, %eax
	movl	%eax, %r8d
	movq	3336(%rsp), %rdi        # 8-byte Reload
	movq	3600(%rsp), %rsi        # 8-byte Reload
	movq	3616(%rsp), %rdx        # 8-byte Reload
	movq	%rcx, 3288(%rsp)        # 8-byte Spill
	movl	3572(%rsp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
	movq	%rsp, %rcx
	movq	$.L.str781, (%rcx)
	movq	3432(%rsp), %rdi        # 8-byte Reload
	movq	3320(%rsp), %rsi        # 8-byte Reload
	movq	3312(%rsp), %rdx        # 8-byte Reload
	movq	3416(%rsp), %rcx        # 8-byte Reload
	movq	3328(%rsp), %r8         # 8-byte Reload
	movq	3448(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	movl	6252(%rsp), %eax        # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	%rsp, %rcx
	movq	$.L.str781, (%rcx)
	movl	$.L.str412, %ebp
	movl	%ebp, %r8d
	movq	3416(%rsp), %rdi        # 8-byte Reload
	movq	3320(%rsp), %rsi        # 8-byte Reload
	movq	3416(%rsp), %rcx        # 8-byte Reload
	movq	3448(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	movl	6252(%rsp), %eax        # 4-byte Reload
	movl	3300(%rsp), %ebp        # 4-byte Reload
	subl	%ebp, %eax
	movl	%eax, %ecx
	movq	%rsp, %rdx
	movq	$.L.str781, (%rdx)
	movq	3400(%rsp), %rdi        # 8-byte Reload
	movq	3320(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	3416(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 3280(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	3288(%rsp), %r8         # 8-byte Reload
	movq	3448(%rsp), %r9         # 8-byte Reload
	movl	%eax, 3276(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
.Ltmp441:
	#DEBUG_VALUE: tqlrat:i <- [RSP+3276]
	.loc	2 532 0                 # eispack.c:532:0
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str209, %eax
	movl	%eax, %ecx
	movl	$532, %eax              # imm = 0x214
	movl	%eax, %edi
	movl	$13, %eax
	movl	%eax, %edx
	movq	3600(%rsp), %rsi        # 8-byte Reload
	movq	3616(%rsp), %r8         # 8-byte Reload
	movq	%rdx, 3264(%rsp)        # 8-byte Spill
	movq	%r8, %rdx
	movq	%rcx, 3256(%rsp)        # 8-byte Spill
	movq	3264(%rsp), %r8         # 8-byte Reload
	movl	3572(%rsp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
.Ltmp442:
	movq	3432(%rsp), %rdi        # 8-byte Reload
	movq	3440(%rsp), %rsi        # 8-byte Reload
	vmovsd	3520(%rsp), %xmm0       # 8-byte Reload
	movq	3416(%rsp), %rdx        # 8-byte Reload
	movq	3368(%rsp), %rcx        # 8-byte Reload
	movq	3448(%rsp), %r8         # 8-byte Reload
	movq	3304(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	3416(%rsp), %rdi        # 8-byte Reload
	movq	3440(%rsp), %rsi        # 8-byte Reload
	vmovsd	3528(%rsp), %xmm0       # 8-byte Reload
	movq	3416(%rsp), %rdx        # 8-byte Reload
	movq	3352(%rsp), %rcx        # 8-byte Reload
	movq	3448(%rsp), %r8         # 8-byte Reload
	movq	3304(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	3528(%rsp), %xmm0       # 8-byte Reload
	vmovsd	3520(%rsp), %xmm1       # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	3400(%rsp), %rdi        # 8-byte Reload
	movq	3440(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	3416(%rsp), %rdx        # 8-byte Reload
	movq	3256(%rsp), %rcx        # 8-byte Reload
	movq	3448(%rsp), %r8         # 8-byte Reload
	movq	3304(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 3248(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
.Ltmp443:
	#DEBUG_VALUE: tqlrat:p <- [RSP+3248]
	.loc	2 533 0                 # eispack.c:533:0
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str214, %eax
	movl	%eax, %ecx
	movl	$533, %eax              # imm = 0x215
	movl	%eax, %edx
	movl	$35, %eax
	movl	%eax, %esi
	movq	%rdx, %rdi
	movq	3600(%rsp), %r8         # 8-byte Reload
	movq	%rsi, 3240(%rsp)        # 8-byte Spill
	movq	%r8, %rsi
	movq	3616(%rsp), %r9         # 8-byte Reload
	movq	%rdx, 3232(%rsp)        # 8-byte Spill
	movq	%r9, %rdx
	movq	%rcx, 3224(%rsp)        # 8-byte Spill
	movq	3240(%rsp), %r8         # 8-byte Reload
	movl	3572(%rsp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
.Ltmp444:
	movq	%rsp, %rcx
	movq	$.L.str781, (%rcx)
	movq	3416(%rsp), %rdi        # 8-byte Reload
	movq	3320(%rsp), %rsi        # 8-byte Reload
	movq	3280(%rsp), %rdx        # 8-byte Reload
	movq	3416(%rsp), %rcx        # 8-byte Reload
	movq	3288(%rsp), %r8         # 8-byte Reload
	movq	3448(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	movl	3276(%rsp), %eax        # 4-byte Reload
	movslq	%eax, %rcx
	movq	%rsp, %rdx
	movq	$.L.str781, (%rdx)
	movq	3400(%rsp), %rdi        # 8-byte Reload
	movq	3440(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	3416(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 3216(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	3224(%rsp), %r8         # 8-byte Reload
	movq	3448(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str220, %eax
	movl	%eax, %ecx
	movl	$29, %eax
	movl	%eax, %edx
	movq	3232(%rsp), %rdi        # 8-byte Reload
	movq	3600(%rsp), %rsi        # 8-byte Reload
	movq	3616(%rsp), %r8         # 8-byte Reload
	movq	%rdx, 3208(%rsp)        # 8-byte Spill
	movq	%r8, %rdx
	movq	%rcx, 3200(%rsp)        # 8-byte Spill
	movq	3208(%rsp), %r8         # 8-byte Reload
	movl	3572(%rsp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
	movq	%rsp, %rcx
	movq	$.L.str781, (%rcx)
	movq	3432(%rsp), %rdi        # 8-byte Reload
	movq	3440(%rsp), %rsi        # 8-byte Reload
	movq	3216(%rsp), %rdx        # 8-byte Reload
	movq	3416(%rsp), %rcx        # 8-byte Reload
	movq	3224(%rsp), %r8         # 8-byte Reload
	movq	3448(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	movq	%rsp, %rcx
	movq	$.L.str781, (%rcx)
	movl	$.L.str160, %eax
	movl	%eax, %ecx
	movq	3416(%rsp), %rdi        # 8-byte Reload
	movq	3440(%rsp), %rsi        # 8-byte Reload
	movq	9208(%rsp), %rdx        # 8-byte Reload
	movq	3416(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 3192(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	3192(%rsp), %r8         # 8-byte Reload
	movq	3448(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_ptr
	movq	9208(%rsp), %rcx        # 8-byte Reload
	movq	3216(%rsp), %rdx        # 8-byte Reload
	leaq	(%rcx,%rdx,8), %rsi
	movq	%rsp, %rdi
	movq	$.L.str781, (%rdi)
	movq	3400(%rsp), %rdi        # 8-byte Reload
	movq	3440(%rsp), %r8         # 8-byte Reload
	movq	%rsi, 3184(%rsp)        # 8-byte Spill
	movq	%r8, %rsi
	movq	3184(%rsp), %rdx        # 8-byte Reload
	movq	3416(%rsp), %rcx        # 8-byte Reload
	movq	3200(%rsp), %r8         # 8-byte Reload
	movq	3448(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_ptr
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str228, %eax
	movl	%eax, %ecx
	movl	$27, %eax
	movl	%eax, %edx
	movq	3232(%rsp), %rdi        # 8-byte Reload
	movq	3600(%rsp), %rsi        # 8-byte Reload
	movq	3616(%rsp), %r8         # 8-byte Reload
	movq	%rdx, 3176(%rsp)        # 8-byte Spill
	movq	%r8, %rdx
	movq	%rcx, 3168(%rsp)        # 8-byte Spill
	movq	3176(%rsp), %r8         # 8-byte Reload
	movl	3572(%rsp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
	movq	%rsp, %rcx
	movq	$.L.str781, (%rcx)
	movq	3416(%rsp), %rdi        # 8-byte Reload
	movq	3440(%rsp), %rsi        # 8-byte Reload
	movq	3184(%rsp), %rdx        # 8-byte Reload
	movq	3416(%rsp), %rcx        # 8-byte Reload
	movq	3200(%rsp), %r8         # 8-byte Reload
	movq	3448(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_ptr
	movq	9208(%rsp), %rcx        # 8-byte Reload
	movq	3216(%rsp), %rdx        # 8-byte Reload
	vmovsd	(%rcx,%rdx,8), %xmm0
	movq	3400(%rsp), %rdi        # 8-byte Reload
	movq	3440(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 3160(%rsp)       # 8-byte Spill
	movq	3416(%rsp), %rdx        # 8-byte Reload
	movq	3168(%rsp), %rcx        # 8-byte Reload
	movq	3448(%rsp), %r8         # 8-byte Reload
	movq	3304(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str229, %eax
	movl	%eax, %ecx
	movl	$9, %eax
	movl	%eax, %edx
	movq	3232(%rsp), %rdi        # 8-byte Reload
	movq	3600(%rsp), %rsi        # 8-byte Reload
	movq	3616(%rsp), %r8         # 8-byte Reload
	movq	%rdx, 3152(%rsp)        # 8-byte Spill
	movq	%r8, %rdx
	movq	%rcx, 3144(%rsp)        # 8-byte Spill
	movq	3152(%rsp), %r8         # 8-byte Reload
	movl	3572(%rsp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
	movq	3432(%rsp), %rdi        # 8-byte Reload
	movq	3440(%rsp), %rsi        # 8-byte Reload
	vmovsd	3160(%rsp), %xmm0       # 8-byte Reload
	movq	3416(%rsp), %rdx        # 8-byte Reload
	movq	3168(%rsp), %rcx        # 8-byte Reload
	movq	3448(%rsp), %r8         # 8-byte Reload
	movq	3304(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	3416(%rsp), %rdi        # 8-byte Reload
	movq	3440(%rsp), %rsi        # 8-byte Reload
	vmovsd	3248(%rsp), %xmm0       # 8-byte Reload
	movq	3416(%rsp), %rdx        # 8-byte Reload
	movq	3256(%rsp), %rcx        # 8-byte Reload
	movq	3448(%rsp), %r8         # 8-byte Reload
	movq	3304(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	3248(%rsp), %xmm0       # 8-byte Reload
	vmovsd	3160(%rsp), %xmm1       # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
	movq	3400(%rsp), %rdi        # 8-byte Reload
	movq	3440(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	3416(%rsp), %rdx        # 8-byte Reload
	movq	3144(%rsp), %rcx        # 8-byte Reload
	movq	3448(%rsp), %r8         # 8-byte Reload
	movq	3304(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 3136(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
.Ltmp445:
	#DEBUG_VALUE: tqlrat:r <- [RSP+3136]
	.loc	2 534 0                 # eispack.c:534:0
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str230, %eax
	movl	%eax, %ecx
	movl	$534, %eax              # imm = 0x216
	movl	%eax, %edx
	movq	%rdx, %rdi
	movq	3600(%rsp), %rsi        # 8-byte Reload
	movq	3616(%rsp), %r8         # 8-byte Reload
	movq	%rdx, 3128(%rsp)        # 8-byte Spill
	movq	%r8, %rdx
	movq	%rcx, 3120(%rsp)        # 8-byte Spill
	movq	3264(%rsp), %r8         # 8-byte Reload
	movl	3572(%rsp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
.Ltmp446:
	movq	3432(%rsp), %rdi        # 8-byte Reload
	movq	3440(%rsp), %rsi        # 8-byte Reload
	vmovsd	3136(%rsp), %xmm0       # 8-byte Reload
	movq	3416(%rsp), %rdx        # 8-byte Reload
	movq	3144(%rsp), %rcx        # 8-byte Reload
	movq	3448(%rsp), %r8         # 8-byte Reload
	movq	3304(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	3416(%rsp), %rdi        # 8-byte Reload
	movq	3440(%rsp), %rsi        # 8-byte Reload
	vmovsd	3512(%rsp), %xmm0       # 8-byte Reload
	movq	3416(%rsp), %rdx        # 8-byte Reload
	movq	3392(%rsp), %rcx        # 8-byte Reload
	movq	3448(%rsp), %r8         # 8-byte Reload
	movq	3304(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	3512(%rsp), %xmm0       # 8-byte Reload
	vmovsd	3136(%rsp), %xmm1       # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	3400(%rsp), %rdi        # 8-byte Reload
	movq	3440(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	3416(%rsp), %rdx        # 8-byte Reload
	movq	3120(%rsp), %rcx        # 8-byte Reload
	movq	3448(%rsp), %r8         # 8-byte Reload
	movq	3304(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 3112(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str231, %eax
	movl	%eax, %ecx
	movl	$8, %eax
	movl	%eax, %r8d
	movq	3128(%rsp), %rdi        # 8-byte Reload
	movq	3600(%rsp), %rsi        # 8-byte Reload
	movq	3616(%rsp), %rdx        # 8-byte Reload
	movq	%rcx, 3104(%rsp)        # 8-byte Spill
	movl	3572(%rsp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
	movq	%rsp, %rcx
	movq	$.L.str781, (%rcx)
	movq	3432(%rsp), %rdi        # 8-byte Reload
	movq	3320(%rsp), %rsi        # 8-byte Reload
	movq	3416(%rsp), %rdx        # 8-byte Reload
	movq	3448(%rsp), %rcx        # 8-byte Reload
	movq	3424(%rsp), %r8         # 8-byte Reload
	movq	3448(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	movq	%rsp, %rcx
	movq	$.L.str781, (%rcx)
	movq	3416(%rsp), %rdi        # 8-byte Reload
	movq	3320(%rsp), %rsi        # 8-byte Reload
	movq	3280(%rsp), %rdx        # 8-byte Reload
	movq	3416(%rsp), %rcx        # 8-byte Reload
	movq	3288(%rsp), %r8         # 8-byte Reload
	movq	3448(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	movl	3276(%rsp), %eax        # 4-byte Reload
	incl	%eax
	movl	%eax, %ecx
	movq	%rsp, %rdx
	movq	$.L.str781, (%rdx)
	movq	3400(%rsp), %rdi        # 8-byte Reload
	movq	3320(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	3416(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 3096(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	3104(%rsp), %r8         # 8-byte Reload
	movq	3448(%rsp), %r9         # 8-byte Reload
	movl	%eax, 3092(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str232, %eax
	movl	%eax, %ecx
	movq	3128(%rsp), %rdi        # 8-byte Reload
	movq	3600(%rsp), %rsi        # 8-byte Reload
	movq	3616(%rsp), %rdx        # 8-byte Reload
	movq	%rcx, 3080(%rsp)        # 8-byte Spill
	movq	3240(%rsp), %r8         # 8-byte Reload
	movl	3572(%rsp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
	movq	%rsp, %rcx
	movq	$.L.str781, (%rcx)
	movq	3416(%rsp), %rdi        # 8-byte Reload
	movq	3320(%rsp), %rsi        # 8-byte Reload
	movq	3096(%rsp), %rdx        # 8-byte Reload
	movq	3416(%rsp), %rcx        # 8-byte Reload
	movq	3104(%rsp), %r8         # 8-byte Reload
	movq	3448(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	movl	3092(%rsp), %eax        # 4-byte Reload
	movslq	%eax, %rcx
	movq	%rsp, %rdx
	movq	$.L.str781, (%rdx)
	movq	3400(%rsp), %rdi        # 8-byte Reload
	movq	3440(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	3416(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 3072(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	3080(%rsp), %r8         # 8-byte Reload
	movq	3448(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str233, %eax
	movl	%eax, %ecx
	movq	3128(%rsp), %rdi        # 8-byte Reload
	movq	3600(%rsp), %rsi        # 8-byte Reload
	movq	3616(%rsp), %rdx        # 8-byte Reload
	movq	%rcx, 3064(%rsp)        # 8-byte Spill
	movq	3208(%rsp), %r8         # 8-byte Reload
	movl	3572(%rsp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
	movq	%rsp, %rcx
	movq	$.L.str781, (%rcx)
	movq	3432(%rsp), %rdi        # 8-byte Reload
	movq	3440(%rsp), %rsi        # 8-byte Reload
	movq	3072(%rsp), %rdx        # 8-byte Reload
	movq	3416(%rsp), %rcx        # 8-byte Reload
	movq	3080(%rsp), %r8         # 8-byte Reload
	movq	3448(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	movq	%rsp, %rcx
	movq	$.L.str781, (%rcx)
	movq	3416(%rsp), %rdi        # 8-byte Reload
	movq	3440(%rsp), %rsi        # 8-byte Reload
	movq	9208(%rsp), %rdx        # 8-byte Reload
	movq	3416(%rsp), %rcx        # 8-byte Reload
	movq	3192(%rsp), %r8         # 8-byte Reload
	movq	3448(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_ptr
	movq	9208(%rsp), %rcx        # 8-byte Reload
	movq	3072(%rsp), %rdx        # 8-byte Reload
	leaq	(%rcx,%rdx,8), %rsi
	movq	%rsp, %rdi
	movq	$.L.str781, (%rdi)
	movq	3400(%rsp), %rdi        # 8-byte Reload
	movq	3440(%rsp), %r8         # 8-byte Reload
	movq	%rsi, 3056(%rsp)        # 8-byte Spill
	movq	%r8, %rsi
	movq	3056(%rsp), %rdx        # 8-byte Reload
	movq	3416(%rsp), %rcx        # 8-byte Reload
	movq	3064(%rsp), %r8         # 8-byte Reload
	movq	3448(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_ptr
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str441, %eax
	movl	%eax, %ecx
	movl	$28, %eax
	movl	%eax, %edx
	movq	3128(%rsp), %rdi        # 8-byte Reload
	movq	3600(%rsp), %rsi        # 8-byte Reload
	movq	3616(%rsp), %r8         # 8-byte Reload
	movq	%rdx, 3048(%rsp)        # 8-byte Spill
	movq	%r8, %rdx
	movq	3048(%rsp), %r8         # 8-byte Reload
	movl	3572(%rsp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
	movq	%rsp, %rcx
	movq	$.L.str781, (%rcx)
	movq	3432(%rsp), %rdi        # 8-byte Reload
	movq	3440(%rsp), %rsi        # 8-byte Reload
	movq	3056(%rsp), %rdx        # 8-byte Reload
	movq	3416(%rsp), %rcx        # 8-byte Reload
	movq	3064(%rsp), %r8         # 8-byte Reload
	movq	3448(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_ptr
	movq	3416(%rsp), %rdi        # 8-byte Reload
	movq	3440(%rsp), %rsi        # 8-byte Reload
	vmovsd	3112(%rsp), %xmm0       # 8-byte Reload
	movq	3416(%rsp), %rdx        # 8-byte Reload
	movq	3120(%rsp), %rcx        # 8-byte Reload
	movq	3448(%rsp), %r8         # 8-byte Reload
	movq	3304(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	9208(%rsp), %rcx        # 8-byte Reload
	movq	3072(%rsp), %rdx        # 8-byte Reload
	vmovsd	3112(%rsp), %xmm0       # 8-byte Reload
	vmovsd	%xmm0, (%rcx,%rdx,8)
	.loc	2 535 0                 # eispack.c:535:0
	movq	%rsp, %rsi
	movl	$1, (%rsi)
	movl	$.L.str234, %eax
	movl	%eax, %esi
	movl	$535, %eax              # imm = 0x217
	movl	%eax, %edi
	movq	%rdi, 3040(%rsp)        # 8-byte Spill
	movq	3600(%rsp), %r8         # 8-byte Reload
	movq	%rsi, 3032(%rsp)        # 8-byte Spill
	movq	%r8, %rsi
	movq	3616(%rsp), %rdx        # 8-byte Reload
	movq	3032(%rsp), %rcx        # 8-byte Reload
	movq	3176(%rsp), %r8         # 8-byte Reload
	movl	3572(%rsp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
	movq	%rsp, %rcx
	movq	$.L.str781, (%rcx)
	movq	3416(%rsp), %rdi        # 8-byte Reload
	movq	3440(%rsp), %rsi        # 8-byte Reload
	movq	3184(%rsp), %rdx        # 8-byte Reload
	movq	3416(%rsp), %rcx        # 8-byte Reload
	movq	3200(%rsp), %r8         # 8-byte Reload
	movq	3448(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_ptr
	movq	9208(%rsp), %rcx        # 8-byte Reload
	movq	3216(%rsp), %rdx        # 8-byte Reload
	vmovsd	(%rcx,%rdx,8), %xmm0
	movq	3400(%rsp), %rdi        # 8-byte Reload
	movq	3440(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 3024(%rsp)       # 8-byte Spill
	movq	3416(%rsp), %rdx        # 8-byte Reload
	movq	3032(%rsp), %rcx        # 8-byte Reload
	movq	3448(%rsp), %r8         # 8-byte Reload
	movq	3304(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$16, %eax
	movl	%eax, %ecx
	movq	3040(%rsp), %rdi        # 8-byte Reload
	movq	3600(%rsp), %rsi        # 8-byte Reload
	movq	3616(%rsp), %rdx        # 8-byte Reload
	movq	3376(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 3016(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	3016(%rsp), %r8         # 8-byte Reload
	movl	3572(%rsp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
	movq	3432(%rsp), %rdi        # 8-byte Reload
	movq	3440(%rsp), %rsi        # 8-byte Reload
	vmovsd	3136(%rsp), %xmm0       # 8-byte Reload
	movq	3416(%rsp), %rdx        # 8-byte Reload
	movq	3144(%rsp), %rcx        # 8-byte Reload
	movq	3448(%rsp), %r8         # 8-byte Reload
	movq	3304(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	3416(%rsp), %rdi        # 8-byte Reload
	movq	3440(%rsp), %rsi        # 8-byte Reload
	vmovsd	3024(%rsp), %xmm0       # 8-byte Reload
	movq	3416(%rsp), %rdx        # 8-byte Reload
	movq	3032(%rsp), %rcx        # 8-byte Reload
	movq	3448(%rsp), %r8         # 8-byte Reload
	movq	3304(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	3024(%rsp), %xmm0       # 8-byte Reload
	vmovsd	3136(%rsp), %xmm1       # 8-byte Reload
	vdivsd	%xmm1, %xmm0, %xmm2
	movq	3400(%rsp), %rdi        # 8-byte Reload
	movq	3440(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	3416(%rsp), %rdx        # 8-byte Reload
	movq	3376(%rsp), %rcx        # 8-byte Reload
	movq	3448(%rsp), %r8         # 8-byte Reload
	movq	3304(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 3008(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
.Ltmp447:
	#DEBUG_VALUE: tqlrat:s <- [RSP+3008]
	.loc	2 536 0                 # eispack.c:536:0
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str236, %eax
	movl	%eax, %ecx
	movl	$536, %eax              # imm = 0x218
	movl	%eax, %edx
	movq	%rdx, %rdi
	movq	3600(%rsp), %rsi        # 8-byte Reload
	movq	3616(%rsp), %r8         # 8-byte Reload
	movq	%rdx, 3000(%rsp)        # 8-byte Spill
	movq	%r8, %rdx
	movq	%rcx, 2992(%rsp)        # 8-byte Spill
	movq	3208(%rsp), %r8         # 8-byte Reload
	movl	3572(%rsp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
.Ltmp448:
	movq	%rsp, %rcx
	movq	$.L.str781, (%rcx)
	movq	3432(%rsp), %rdi        # 8-byte Reload
	movq	3440(%rsp), %rsi        # 8-byte Reload
	movq	3216(%rsp), %rdx        # 8-byte Reload
	movq	3416(%rsp), %rcx        # 8-byte Reload
	movq	3224(%rsp), %r8         # 8-byte Reload
	movq	3448(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	movq	%rsp, %rcx
	movq	$.L.str781, (%rcx)
	movl	$.L.str82, %eax
	movl	%eax, %ecx
	movq	3416(%rsp), %rdi        # 8-byte Reload
	movq	3440(%rsp), %rsi        # 8-byte Reload
	movq	9216(%rsp), %rdx        # 8-byte Reload
	movq	3416(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 2984(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	2984(%rsp), %r8         # 8-byte Reload
	movq	3448(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_ptr
	movq	9216(%rsp), %rcx        # 8-byte Reload
	movq	3216(%rsp), %rdx        # 8-byte Reload
	leaq	(%rcx,%rdx,8), %rsi
	movq	%rsp, %rdi
	movq	$.L.str781, (%rdi)
	movq	3400(%rsp), %rdi        # 8-byte Reload
	movq	3440(%rsp), %r8         # 8-byte Reload
	movq	%rsi, 2976(%rsp)        # 8-byte Spill
	movq	%r8, %rsi
	movq	2976(%rsp), %rdx        # 8-byte Reload
	movq	3416(%rsp), %rcx        # 8-byte Reload
	movq	2992(%rsp), %r8         # 8-byte Reload
	movq	3448(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_ptr
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str237, %eax
	movl	%eax, %ecx
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	3600(%rsp), %rsi        # 8-byte Reload
	movq	3616(%rsp), %rdx        # 8-byte Reload
	movq	%rcx, 2968(%rsp)        # 8-byte Spill
	movq	3176(%rsp), %r8         # 8-byte Reload
	movl	3572(%rsp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
	movq	%rsp, %rcx
	movq	$.L.str781, (%rcx)
	movq	3416(%rsp), %rdi        # 8-byte Reload
	movq	3440(%rsp), %rsi        # 8-byte Reload
	movq	2976(%rsp), %rdx        # 8-byte Reload
	movq	3416(%rsp), %rcx        # 8-byte Reload
	movq	2992(%rsp), %r8         # 8-byte Reload
	movq	3448(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_ptr
	movq	9216(%rsp), %rcx        # 8-byte Reload
	movq	3216(%rsp), %rdx        # 8-byte Reload
	vmovsd	(%rcx,%rdx,8), %xmm0
	movq	3400(%rsp), %rdi        # 8-byte Reload
	movq	3440(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 2960(%rsp)       # 8-byte Spill
	movq	3416(%rsp), %rdx        # 8-byte Reload
	movq	2968(%rsp), %rcx        # 8-byte Reload
	movq	3448(%rsp), %r8         # 8-byte Reload
	movq	3304(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str238, %eax
	movl	%eax, %ecx
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	3600(%rsp), %rsi        # 8-byte Reload
	movq	3616(%rsp), %rdx        # 8-byte Reload
	movq	%rcx, 2952(%rsp)        # 8-byte Spill
	movq	3152(%rsp), %r8         # 8-byte Reload
	movl	3572(%rsp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
	movq	3432(%rsp), %rdi        # 8-byte Reload
	movq	3440(%rsp), %rsi        # 8-byte Reload
	vmovsd	2960(%rsp), %xmm0       # 8-byte Reload
	movq	3416(%rsp), %rdx        # 8-byte Reload
	movq	2968(%rsp), %rcx        # 8-byte Reload
	movq	3448(%rsp), %r8         # 8-byte Reload
	movq	3304(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	3416(%rsp), %rdi        # 8-byte Reload
	movq	3440(%rsp), %rsi        # 8-byte Reload
	vmovsd	3520(%rsp), %xmm0       # 8-byte Reload
	movq	3416(%rsp), %rdx        # 8-byte Reload
	movq	3368(%rsp), %rcx        # 8-byte Reload
	movq	3448(%rsp), %r8         # 8-byte Reload
	movq	3304(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	3520(%rsp), %xmm0       # 8-byte Reload
	vmovsd	2960(%rsp), %xmm1       # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
	movq	3400(%rsp), %rdi        # 8-byte Reload
	movq	3440(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	3416(%rsp), %rdx        # 8-byte Reload
	movq	2952(%rsp), %rcx        # 8-byte Reload
	movq	3448(%rsp), %r8         # 8-byte Reload
	movq	3304(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 2944(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str239, %eax
	movl	%eax, %ecx
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	3600(%rsp), %rsi        # 8-byte Reload
	movq	3616(%rsp), %rdx        # 8-byte Reload
	movq	%rcx, 2936(%rsp)        # 8-byte Spill
	movq	3264(%rsp), %r8         # 8-byte Reload
	movl	3572(%rsp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
	movq	3432(%rsp), %rdi        # 8-byte Reload
	movq	3440(%rsp), %rsi        # 8-byte Reload
	vmovsd	2944(%rsp), %xmm0       # 8-byte Reload
	movq	3416(%rsp), %rdx        # 8-byte Reload
	movq	2952(%rsp), %rcx        # 8-byte Reload
	movq	3448(%rsp), %r8         # 8-byte Reload
	movq	3304(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	3416(%rsp), %rdi        # 8-byte Reload
	movq	3440(%rsp), %rsi        # 8-byte Reload
	vmovsd	3008(%rsp), %xmm0       # 8-byte Reload
	movq	3416(%rsp), %rdx        # 8-byte Reload
	movq	3376(%rsp), %rcx        # 8-byte Reload
	movq	3448(%rsp), %r8         # 8-byte Reload
	movq	3304(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	3008(%rsp), %xmm0       # 8-byte Reload
	vmovsd	2944(%rsp), %xmm1       # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	3400(%rsp), %rdi        # 8-byte Reload
	movq	3440(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	3416(%rsp), %rdx        # 8-byte Reload
	movq	2936(%rsp), %rcx        # 8-byte Reload
	movq	3448(%rsp), %r8         # 8-byte Reload
	movq	3304(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 2928(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str240, %eax
	movl	%eax, %ecx
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	3600(%rsp), %rsi        # 8-byte Reload
	movq	3616(%rsp), %rdx        # 8-byte Reload
	movq	%rcx, 2920(%rsp)        # 8-byte Spill
	movq	3152(%rsp), %r8         # 8-byte Reload
	movl	3572(%rsp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
	movq	3432(%rsp), %rdi        # 8-byte Reload
	movq	3440(%rsp), %rsi        # 8-byte Reload
	vmovsd	2928(%rsp), %xmm0       # 8-byte Reload
	movq	3416(%rsp), %rdx        # 8-byte Reload
	movq	2936(%rsp), %rcx        # 8-byte Reload
	movq	3448(%rsp), %r8         # 8-byte Reload
	movq	3304(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	3416(%rsp), %rdi        # 8-byte Reload
	movq	3440(%rsp), %rsi        # 8-byte Reload
	vmovsd	3520(%rsp), %xmm0       # 8-byte Reload
	movq	3416(%rsp), %rdx        # 8-byte Reload
	movq	3368(%rsp), %rcx        # 8-byte Reload
	movq	3448(%rsp), %r8         # 8-byte Reload
	movq	3304(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	3520(%rsp), %xmm0       # 8-byte Reload
	vmovsd	2928(%rsp), %xmm1       # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
	movq	3400(%rsp), %rdi        # 8-byte Reload
	movq	3440(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	3416(%rsp), %rdx        # 8-byte Reload
	movq	2920(%rsp), %rcx        # 8-byte Reload
	movq	3448(%rsp), %r8         # 8-byte Reload
	movq	3304(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 2912(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str241, %eax
	movl	%eax, %ecx
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	3600(%rsp), %rsi        # 8-byte Reload
	movq	3616(%rsp), %rdx        # 8-byte Reload
	movq	%rcx, 2904(%rsp)        # 8-byte Spill
	movq	3208(%rsp), %r8         # 8-byte Reload
	movl	3572(%rsp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
	movq	%rsp, %rcx
	movq	$.L.str781, (%rcx)
	movq	3432(%rsp), %rdi        # 8-byte Reload
	movq	3440(%rsp), %rsi        # 8-byte Reload
	movq	3072(%rsp), %rdx        # 8-byte Reload
	movq	3416(%rsp), %rcx        # 8-byte Reload
	movq	3080(%rsp), %r8         # 8-byte Reload
	movq	3448(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	movq	%rsp, %rcx
	movq	$.L.str781, (%rcx)
	movq	3416(%rsp), %rdi        # 8-byte Reload
	movq	3440(%rsp), %rsi        # 8-byte Reload
	movq	9216(%rsp), %rdx        # 8-byte Reload
	movq	3416(%rsp), %rcx        # 8-byte Reload
	movq	2984(%rsp), %r8         # 8-byte Reload
	movq	3448(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_ptr
	movq	9216(%rsp), %rcx        # 8-byte Reload
	movq	3072(%rsp), %rdx        # 8-byte Reload
	leaq	(%rcx,%rdx,8), %rsi
	movq	%rsp, %rdi
	movq	$.L.str781, (%rdi)
	movq	3400(%rsp), %rdi        # 8-byte Reload
	movq	3440(%rsp), %r8         # 8-byte Reload
	movq	%rsi, 2896(%rsp)        # 8-byte Spill
	movq	%r8, %rsi
	movq	2896(%rsp), %rdx        # 8-byte Reload
	movq	3416(%rsp), %rcx        # 8-byte Reload
	movq	2904(%rsp), %r8         # 8-byte Reload
	movq	3448(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_ptr
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str442, %eax
	movl	%eax, %ecx
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	3600(%rsp), %rsi        # 8-byte Reload
	movq	3616(%rsp), %rdx        # 8-byte Reload
	movq	3048(%rsp), %r8         # 8-byte Reload
	movl	3572(%rsp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
	movq	%rsp, %rcx
	movq	$.L.str781, (%rcx)
	movq	3432(%rsp), %rdi        # 8-byte Reload
	movq	3440(%rsp), %rsi        # 8-byte Reload
	movq	2896(%rsp), %rdx        # 8-byte Reload
	movq	3416(%rsp), %rcx        # 8-byte Reload
	movq	2904(%rsp), %r8         # 8-byte Reload
	movq	3448(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_ptr
	movq	3416(%rsp), %rdi        # 8-byte Reload
	movq	3440(%rsp), %rsi        # 8-byte Reload
	vmovsd	2912(%rsp), %xmm0       # 8-byte Reload
	movq	3416(%rsp), %rdx        # 8-byte Reload
	movq	2920(%rsp), %rcx        # 8-byte Reload
	movq	3448(%rsp), %r8         # 8-byte Reload
	movq	3304(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	9216(%rsp), %rcx        # 8-byte Reload
	movq	3072(%rsp), %rdx        # 8-byte Reload
	vmovsd	2912(%rsp), %xmm0       # 8-byte Reload
	vmovsd	%xmm0, (%rcx,%rdx,8)
	.loc	2 537 0                 # eispack.c:537:0
	movq	%rsp, %rsi
	movl	$1, (%rsi)
	movl	$.L.str242, %eax
	movl	%eax, %esi
	movl	$537, %eax              # imm = 0x219
	movl	%eax, %edi
	movq	%rdi, 2888(%rsp)        # 8-byte Spill
	movq	3600(%rsp), %r8         # 8-byte Reload
	movq	%rsi, 2880(%rsp)        # 8-byte Spill
	movq	%r8, %rsi
	movq	3616(%rsp), %rdx        # 8-byte Reload
	movq	2880(%rsp), %rcx        # 8-byte Reload
	movq	3176(%rsp), %r8         # 8-byte Reload
	movl	3572(%rsp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
	movq	%rsp, %rcx
	movq	$.L.str781, (%rcx)
	movq	3416(%rsp), %rdi        # 8-byte Reload
	movq	3440(%rsp), %rsi        # 8-byte Reload
	movq	2976(%rsp), %rdx        # 8-byte Reload
	movq	3416(%rsp), %rcx        # 8-byte Reload
	movq	2992(%rsp), %r8         # 8-byte Reload
	movq	3448(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_ptr
	movq	9216(%rsp), %rcx        # 8-byte Reload
	movq	3216(%rsp), %rdx        # 8-byte Reload
	vmovsd	(%rcx,%rdx,8), %xmm0
	movq	3400(%rsp), %rdi        # 8-byte Reload
	movq	3440(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 2872(%rsp)       # 8-byte Spill
	movq	3416(%rsp), %rdx        # 8-byte Reload
	movq	2880(%rsp), %rcx        # 8-byte Reload
	movq	3448(%rsp), %r8         # 8-byte Reload
	movq	3304(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str245, %eax
	movl	%eax, %ecx
	movq	2888(%rsp), %rdi        # 8-byte Reload
	movq	3600(%rsp), %rsi        # 8-byte Reload
	movq	3616(%rsp), %rdx        # 8-byte Reload
	movq	%rcx, 2864(%rsp)        # 8-byte Spill
	movq	3176(%rsp), %r8         # 8-byte Reload
	movl	3572(%rsp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
	movq	%rsp, %rcx
	movq	$.L.str781, (%rcx)
	movq	3416(%rsp), %rdi        # 8-byte Reload
	movq	3440(%rsp), %rsi        # 8-byte Reload
	movq	3184(%rsp), %rdx        # 8-byte Reload
	movq	3416(%rsp), %rcx        # 8-byte Reload
	movq	3200(%rsp), %r8         # 8-byte Reload
	movq	3448(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_ptr
	movq	9208(%rsp), %rcx        # 8-byte Reload
	movq	3216(%rsp), %rdx        # 8-byte Reload
	vmovsd	(%rcx,%rdx,8), %xmm0
	movq	3400(%rsp), %rdi        # 8-byte Reload
	movq	3440(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 2856(%rsp)       # 8-byte Spill
	movq	3416(%rsp), %rdx        # 8-byte Reload
	movq	2864(%rsp), %rcx        # 8-byte Reload
	movq	3448(%rsp), %r8         # 8-byte Reload
	movq	3304(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str443, %eax
	movl	%eax, %ecx
	movq	2888(%rsp), %rdi        # 8-byte Reload
	movq	3600(%rsp), %rsi        # 8-byte Reload
	movq	3616(%rsp), %rdx        # 8-byte Reload
	movq	%rcx, 2848(%rsp)        # 8-byte Spill
	movq	3016(%rsp), %r8         # 8-byte Reload
	movl	3572(%rsp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
	movq	3432(%rsp), %rdi        # 8-byte Reload
	movq	3440(%rsp), %rsi        # 8-byte Reload
	vmovsd	3528(%rsp), %xmm0       # 8-byte Reload
	movq	3416(%rsp), %rdx        # 8-byte Reload
	movq	3352(%rsp), %rcx        # 8-byte Reload
	movq	3448(%rsp), %r8         # 8-byte Reload
	movq	3304(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	3416(%rsp), %rdi        # 8-byte Reload
	movq	3440(%rsp), %rsi        # 8-byte Reload
	vmovsd	2856(%rsp), %xmm0       # 8-byte Reload
	movq	3416(%rsp), %rdx        # 8-byte Reload
	movq	2864(%rsp), %rcx        # 8-byte Reload
	movq	3448(%rsp), %r8         # 8-byte Reload
	movq	3304(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	2856(%rsp), %xmm0       # 8-byte Reload
	vmovsd	3528(%rsp), %xmm1       # 8-byte Reload
	vdivsd	%xmm1, %xmm0, %xmm2
	movq	3400(%rsp), %rdi        # 8-byte Reload
	movq	3440(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	3416(%rsp), %rdx        # 8-byte Reload
	movq	2848(%rsp), %rcx        # 8-byte Reload
	movq	3448(%rsp), %r8         # 8-byte Reload
	movq	3304(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 2840(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str252, %eax
	movl	%eax, %ecx
	movl	$11, %eax
	movl	%eax, %r8d
	movq	2888(%rsp), %rdi        # 8-byte Reload
	movq	3600(%rsp), %rsi        # 8-byte Reload
	movq	3616(%rsp), %rdx        # 8-byte Reload
	movq	%rcx, 2832(%rsp)        # 8-byte Spill
	movl	3572(%rsp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
	movq	3432(%rsp), %rdi        # 8-byte Reload
	movq	3440(%rsp), %rsi        # 8-byte Reload
	vmovsd	2840(%rsp), %xmm0       # 8-byte Reload
	movq	3416(%rsp), %rdx        # 8-byte Reload
	movq	2848(%rsp), %rcx        # 8-byte Reload
	movq	3448(%rsp), %r8         # 8-byte Reload
	movq	3304(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	3416(%rsp), %rdi        # 8-byte Reload
	movq	3440(%rsp), %rsi        # 8-byte Reload
	vmovsd	2872(%rsp), %xmm0       # 8-byte Reload
	movq	3416(%rsp), %rdx        # 8-byte Reload
	movq	2880(%rsp), %rcx        # 8-byte Reload
	movq	3448(%rsp), %r8         # 8-byte Reload
	movq	3304(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	2872(%rsp), %xmm0       # 8-byte Reload
	vmovsd	2840(%rsp), %xmm1       # 8-byte Reload
	vsubsd	%xmm1, %xmm0, %xmm2
	movq	3400(%rsp), %rdi        # 8-byte Reload
	movq	3440(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	3416(%rsp), %rdx        # 8-byte Reload
	movq	2832(%rsp), %rcx        # 8-byte Reload
	movq	3448(%rsp), %r8         # 8-byte Reload
	movq	3304(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 2824(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
.Ltmp449:
	#DEBUG_VALUE: tqlrat:g <- [RSP+2824]
	.loc	2 538 0                 # eispack.c:538:0
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str253, %eax
	movl	%eax, %ecx
	movl	$538, %eax              # imm = 0x21A
	movl	%eax, %edx
	movl	$47, %eax
	movl	%eax, %r8d
	movq	%rdx, %rdi
	movq	3600(%rsp), %rsi        # 8-byte Reload
	movq	3616(%rsp), %r9         # 8-byte Reload
	movq	%rdx, 2816(%rsp)        # 8-byte Spill
	movq	%r9, %rdx
	movq	%rcx, 2808(%rsp)        # 8-byte Spill
	movl	3572(%rsp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
.Ltmp450:
	movq	3432(%rsp), %rdi        # 8-byte Reload
	movq	3440(%rsp), %rsi        # 8-byte Reload
	vmovsd	3384(%rsp), %xmm0       # 8-byte Reload
	movq	3448(%rsp), %rdx        # 8-byte Reload
	movq	3424(%rsp), %rcx        # 8-byte Reload
	movq	3448(%rsp), %r8         # 8-byte Reload
	movq	3304(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	3416(%rsp), %rdi        # 8-byte Reload
	movq	3440(%rsp), %rsi        # 8-byte Reload
	vmovsd	2824(%rsp), %xmm0       # 8-byte Reload
	movq	3416(%rsp), %rdx        # 8-byte Reload
	movq	2832(%rsp), %rcx        # 8-byte Reload
	movq	3448(%rsp), %r8         # 8-byte Reload
	movq	3304(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
.Ltmp451:
	.loc	2 537 0                 # eispack.c:537:0
	vmovsd	2824(%rsp), %xmm0       # 8-byte Reload
	vmovsd	3384(%rsp), %xmm1       # 8-byte Reload
	vucomisd	%xmm1, %xmm0
	.loc	2 538 0                 # eispack.c:538:0
.Ltmp452:
	setnp	%al
	sete	%cl
	andb	%al, %cl
	.loc	2 540 0                 # eispack.c:540:0
.Ltmp453:
	movzbl	%cl, %ebp
	movl	%ebp, %edx
	movq	%rsp, %rsi
	movq	$.L.str781, (%rsi)
	movq	3400(%rsp), %rdi        # 8-byte Reload
	movq	3416(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 2800(%rsp)        # 8-byte Spill
	movq	3416(%rsp), %r8         # 8-byte Reload
	movb	%cl, 2799(%rsp)         # 1-byte Spill
	movq	%r8, %rcx
	movq	2808(%rsp), %r8         # 8-byte Reload
	movq	3448(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
.Ltmp454:
	.loc	2 538 0                 # eispack.c:538:0
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$50, %ebp
	movl	%ebp, %r8d
	movq	2816(%rsp), %rdi        # 8-byte Reload
	movq	3600(%rsp), %rsi        # 8-byte Reload
	movq	3616(%rsp), %rdx        # 8-byte Reload
	movq	3344(%rsp), %rcx        # 8-byte Reload
	movl	3572(%rsp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
	movl	$3, %r9d
	movl	%r9d, %edi
	movq	3440(%rsp), %rsi        # 8-byte Reload
	vmovsd	2824(%rsp), %xmm0       # 8-byte Reload
	movq	3416(%rsp), %rdx        # 8-byte Reload
	movq	2832(%rsp), %rcx        # 8-byte Reload
	movq	3448(%rsp), %r8         # 8-byte Reload
	movq	3304(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movl	$.L.str394, %ebp
	movl	%ebp, %ecx
.Ltmp455:
	#DEBUG_VALUE: tqlrat:g <- [RSP+7024]
	movq	3432(%rsp), %rdi        # 8-byte Reload
	movq	3440(%rsp), %rsi        # 8-byte Reload
	vmovsd	7024(%rsp), %xmm0       # 8-byte Reload
	movq	3416(%rsp), %rdx        # 8-byte Reload
	movq	3448(%rsp), %r8         # 8-byte Reload
	movq	3304(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
.Ltmp456:
	movq	%rsp, %rcx
	movq	$.L.str781, (%rcx)
	movq	3416(%rsp), %rdi        # 8-byte Reload
	movq	3416(%rsp), %rsi        # 8-byte Reload
	movq	2800(%rsp), %rdx        # 8-byte Reload
	movq	3416(%rsp), %rcx        # 8-byte Reload
	movq	2808(%rsp), %r8         # 8-byte Reload
	movq	3448(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	movb	2799(%rsp), %al         # 1-byte Reload
	testb	%al, %al
	vmovsd	7024(%rsp), %xmm0       # 8-byte Reload
	vmovsd	%xmm0, 2784(%rsp)       # 8-byte Spill
	jne	.LBB10_32
# BB#31:                                # %.lr.ph12
                                        #   in Loop: Header=BB10_17 Depth=3
	vmovsd	2824(%rsp), %xmm0       # 8-byte Reload
	vmovsd	%xmm0, 2784(%rsp)       # 8-byte Spill
.LBB10_32:                              # %.lr.ph12
                                        #   in Loop: Header=BB10_17 Depth=3
	vmovsd	2784(%rsp), %xmm0       # 8-byte Reload
.Ltmp457:
	.loc	2 542 0                 # eispack.c:542:0
	movq	3504(%rsp), %rdi        # 8-byte Reload
	movq	3736(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 2776(%rsp)       # 8-byte Spill
	movq	3552(%rsp), %rdx        # 8-byte Reload
	movq	3640(%rsp), %rcx        # 8-byte Reload
	movq	3624(%rsp), %r8         # 8-byte Reload
	movq	3584(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	3664(%rsp), %rdi        # 8-byte Reload
	movq	3480(%rsp), %rsi        # 8-byte Reload
	movq	3536(%rsp), %rdx        # 8-byte Reload
	movq	3680(%rsp), %rcx        # 8-byte Reload
	movq	3632(%rsp), %r8         # 8-byte Reload
	movl	3492(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3544(%rsp), %rdi        # 8-byte Reload
	movq	3736(%rsp), %rsi        # 8-byte Reload
	vmovsd	2776(%rsp), %xmm0       # 8-byte Reload
	movq	3552(%rsp), %rdx        # 8-byte Reload
	movq	3640(%rsp), %rcx        # 8-byte Reload
	movq	3624(%rsp), %r8         # 8-byte Reload
	movq	3584(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	3552(%rsp), %rdi        # 8-byte Reload
	movq	3736(%rsp), %rsi        # 8-byte Reload
	vmovsd	3248(%rsp), %xmm0       # 8-byte Reload
	movq	3552(%rsp), %rdx        # 8-byte Reload
	movq	3648(%rsp), %rcx        # 8-byte Reload
	movq	3624(%rsp), %r8         # 8-byte Reload
	movq	3584(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	3248(%rsp), %xmm0       # 8-byte Reload
	vmovsd	2776(%rsp), %xmm1       # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	3504(%rsp), %rdi        # 8-byte Reload
	movq	3736(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	3552(%rsp), %rdx        # 8-byte Reload
	movq	3680(%rsp), %rcx        # 8-byte Reload
	movq	3624(%rsp), %r8         # 8-byte Reload
	movq	3584(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 2768(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	3664(%rsp), %rdi        # 8-byte Reload
	movq	3480(%rsp), %rsi        # 8-byte Reload
	movq	3536(%rsp), %rdx        # 8-byte Reload
	movq	3688(%rsp), %rcx        # 8-byte Reload
	movq	3656(%rsp), %r8         # 8-byte Reload
	movl	3492(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3544(%rsp), %rdi        # 8-byte Reload
	movq	3736(%rsp), %rsi        # 8-byte Reload
	vmovsd	3136(%rsp), %xmm0       # 8-byte Reload
	movq	3552(%rsp), %rdx        # 8-byte Reload
	movq	3672(%rsp), %rcx        # 8-byte Reload
	movq	3624(%rsp), %r8         # 8-byte Reload
	movq	3584(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	3552(%rsp), %rdi        # 8-byte Reload
	movq	3736(%rsp), %rsi        # 8-byte Reload
	vmovsd	2768(%rsp), %xmm0       # 8-byte Reload
	movq	3552(%rsp), %rdx        # 8-byte Reload
	movq	3680(%rsp), %rcx        # 8-byte Reload
	movq	3624(%rsp), %r8         # 8-byte Reload
	movq	3584(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	2768(%rsp), %xmm0       # 8-byte Reload
	vmovsd	3136(%rsp), %xmm1       # 8-byte Reload
	vdivsd	%xmm1, %xmm0, %xmm2
	movq	3504(%rsp), %rdi        # 8-byte Reload
	movq	3736(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	3552(%rsp), %rdx        # 8-byte Reload
	movq	3688(%rsp), %rcx        # 8-byte Reload
	movq	3624(%rsp), %r8         # 8-byte Reload
	movq	3584(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 2760(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
.Ltmp458:
	#DEBUG_VALUE: tqlrat:h <- [RSP+2760]
	.loc	2 529 0                 # eispack.c:529:0
	movq	3472(%rsp), %rdi        # 8-byte Reload
	movq	3480(%rsp), %rsi        # 8-byte Reload
	movq	3536(%rsp), %rdx        # 8-byte Reload
	movq	3728(%rsp), %rcx        # 8-byte Reload
	movq	3696(%rsp), %r8         # 8-byte Reload
	movl	3492(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3544(%rsp), %rdi        # 8-byte Reload
	movq	3736(%rsp), %rsi        # 8-byte Reload
	movq	3552(%rsp), %rdx        # 8-byte Reload
	movq	3624(%rsp), %rcx        # 8-byte Reload
	movq	3704(%rsp), %r8         # 8-byte Reload
	movq	3624(%rsp), %r9         # 8-byte Reload
	movq	3584(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3552(%rsp), %rdi        # 8-byte Reload
	movq	3736(%rsp), %rsi        # 8-byte Reload
	movq	3776(%rsp), %rdx        # 8-byte Reload
	movq	3552(%rsp), %rcx        # 8-byte Reload
	movq	3712(%rsp), %r8         # 8-byte Reload
	movq	3624(%rsp), %r9         # 8-byte Reload
	movq	3584(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3776(%rsp), %rax        # 8-byte Reload
	addq	$1, %rax
	movq	3504(%rsp), %rdi        # 8-byte Reload
	movq	3736(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	3552(%rsp), %rcx        # 8-byte Reload
	movq	3728(%rsp), %r8         # 8-byte Reload
	movq	3624(%rsp), %r9         # 8-byte Reload
	movq	3584(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 2752(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	3472(%rsp), %rdi        # 8-byte Reload
	movq	3480(%rsp), %rsi        # 8-byte Reload
	movq	3536(%rsp), %rdx        # 8-byte Reload
	movq	3760(%rsp), %rcx        # 8-byte Reload
	movq	3720(%rsp), %r8         # 8-byte Reload
	movl	3492(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3552(%rsp), %rdi        # 8-byte Reload
	movq	3736(%rsp), %rsi        # 8-byte Reload
	movq	2752(%rsp), %rdx        # 8-byte Reload
	movq	3552(%rsp), %rcx        # 8-byte Reload
	movq	3728(%rsp), %r8         # 8-byte Reload
	movq	3624(%rsp), %r9         # 8-byte Reload
	movq	3584(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2752(%rsp), %rax        # 8-byte Reload
	movl	%eax, %r11d
	movl	%r11d, %ebx
	movl	%ebx, %edx
	movq	3504(%rsp), %rdi        # 8-byte Reload
	movq	3768(%rsp), %rsi        # 8-byte Reload
	movq	3552(%rsp), %rcx        # 8-byte Reload
	movq	3760(%rsp), %r8         # 8-byte Reload
	movq	3624(%rsp), %r9         # 8-byte Reload
	movq	3584(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%r11d, 2748(%rsp)       # 4-byte Spill
	callq	trace_logger_log_int
	movq	3472(%rsp), %rdi        # 8-byte Reload
	movq	3480(%rsp), %rsi        # 8-byte Reload
	movq	3536(%rsp), %rdx        # 8-byte Reload
	movq	3560(%rsp), %rcx        # 8-byte Reload
	movq	3744(%rsp), %r8         # 8-byte Reload
	movl	3492(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	5792(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %r11d
	movl	%r11d, %edx
	movq	3544(%rsp), %rdi        # 8-byte Reload
	movq	3768(%rsp), %rsi        # 8-byte Reload
	movq	3552(%rsp), %rcx        # 8-byte Reload
	movq	3752(%rsp), %r8         # 8-byte Reload
	movq	3624(%rsp), %r9         # 8-byte Reload
	movq	3584(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	2748(%rsp), %r11d       # 4-byte Reload
	movl	%r11d, %ebx
	movl	%ebx, %edx
	movq	3552(%rsp), %rdi        # 8-byte Reload
	movq	3768(%rsp), %rsi        # 8-byte Reload
	movq	3552(%rsp), %rcx        # 8-byte Reload
	movq	3760(%rsp), %r8         # 8-byte Reload
	movq	3624(%rsp), %r9         # 8-byte Reload
	movq	3584(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	2748(%rsp), %r11d       # 4-byte Reload
	movl	5792(%rsp), %ebx        # 4-byte Reload
	cmpl	%ebx, %r11d
	sete	%bpl
	movb	%bpl, %r14b
	andb	$1, %r14b
	movzbl	%r14b, %r15d
	movl	%r15d, %edx
	movq	3504(%rsp), %rdi        # 8-byte Reload
	movq	3552(%rsp), %rsi        # 8-byte Reload
	movq	3552(%rsp), %rcx        # 8-byte Reload
	movq	3560(%rsp), %r8         # 8-byte Reload
	movq	3624(%rsp), %r9         # 8-byte Reload
	movq	3584(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	movb	%bpl, 2747(%rsp)        # 1-byte Spill
	callq	trace_logger_log_int
	movq	3472(%rsp), %rdi        # 8-byte Reload
	movq	3480(%rsp), %rsi        # 8-byte Reload
	movq	3536(%rsp), %rdx        # 8-byte Reload
	movq	3496(%rsp), %rcx        # 8-byte Reload
	movq	3544(%rsp), %r8         # 8-byte Reload
	movl	3492(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3464(%rsp), %rdi        # 8-byte Reload
	movq	3624(%rsp), %rsi        # 8-byte Reload
	movq	3624(%rsp), %rdx        # 8-byte Reload
	movq	3552(%rsp), %rcx        # 8-byte Reload
	movq	3456(%rsp), %r8         # 8-byte Reload
	movq	3624(%rsp), %r9         # 8-byte Reload
	movq	3584(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3544(%rsp), %rdi        # 8-byte Reload
	movq	3624(%rsp), %rsi        # 8-byte Reload
	movq	3624(%rsp), %rdx        # 8-byte Reload
	movq	3552(%rsp), %rcx        # 8-byte Reload
	movq	3536(%rsp), %r8         # 8-byte Reload
	movq	3624(%rsp), %r9         # 8-byte Reload
	movq	3584(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movb	2747(%rsp), %bpl        # 1-byte Reload
	andb	$1, %bpl
	movzbl	%bpl, %r11d
	movl	%r11d, %edx
	movq	3552(%rsp), %rdi        # 8-byte Reload
	movq	3552(%rsp), %rsi        # 8-byte Reload
	movq	3552(%rsp), %rcx        # 8-byte Reload
	movq	3560(%rsp), %r8         # 8-byte Reload
	movq	3624(%rsp), %r9         # 8-byte Reload
	movq	3584(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movb	2747(%rsp), %bpl        # 1-byte Reload
	testb	$1, %bpl
	movq	2752(%rsp), %rax        # 8-byte Reload
	vmovsd	3008(%rsp), %xmm0       # 8-byte Reload
	vmovsd	2760(%rsp), %xmm1       # 8-byte Reload
	vmovsd	2776(%rsp), %xmm2       # 8-byte Reload
	movq	%rax, 3808(%rsp)        # 8-byte Spill
	vmovsd	%xmm0, 3800(%rsp)       # 8-byte Spill
	vmovsd	%xmm1, 3792(%rsp)       # 8-byte Spill
	vmovsd	%xmm2, 3784(%rsp)       # 8-byte Spill
	jne	.LBB10_18
	jmp	.LBB10_17
.Ltmp459:
.LBB10_18:                              # %._crit_edge13
                                        #   in Loop: Header=BB10_12 Depth=2
	vmovsd	3784(%rsp), %xmm0       # 8-byte Reload
	vmovsd	3792(%rsp), %xmm1       # 8-byte Reload
	vmovsd	3800(%rsp), %xmm2       # 8-byte Reload
	movabsq	$1, %rax
	leaq	.L.str257, %rcx
	movabsq	$0, %rdx
	leaq	.L.str781, %rsi
	movabsq	$2, %rdi
	leaq	.L.str452, %r8
	movabsq	$3, %r9
	leaq	.L.str414, %r10
	movabsq	$549, %r11              # imm = 0x225
	leaq	.L.str62136, %rbx
	leaq	.L.str433, %r14
	leaq	.L.str451, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	vxorps	%xmm3, %xmm3, %xmm3
	movq	%rax, 2736(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 2728(%rsp)        # 8-byte Spill
	leaq	.L.str189, %rax
	movq	%rax, 2720(%rsp)        # 8-byte Spill
	leaq	.L.str1488, %rax
	movq	%rax, 2712(%rsp)        # 8-byte Spill
	movabsq	$47, %rax
	movq	%rax, 2704(%rsp)        # 8-byte Spill
	leaq	.L.str34108, %rax
	movq	%rax, 2696(%rsp)        # 8-byte Spill
	movabsq	$545, %rax              # imm = 0x221
	movq	%rax, 2688(%rsp)        # 8-byte Spill
	leaq	.L.str450, %rax
	movq	%rax, 2680(%rsp)        # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, 2672(%rsp)        # 8-byte Spill
	leaq	.L.str256, %rax
	movq	%rax, 2664(%rsp)        # 8-byte Spill
	leaq	.L.str36110, %rax
	movq	%rax, 2656(%rsp)        # 8-byte Spill
	movabsq	$544, %rax              # imm = 0x220
	movq	%rax, 2648(%rsp)        # 8-byte Spill
	leaq	.L.str449, %rax
	movq	%rax, 2640(%rsp)        # 8-byte Spill
	leaq	.L.str448, %rax
	movq	%rax, 2632(%rsp)        # 8-byte Spill
	leaq	.L.str447, %rax
	movq	%rax, 2624(%rsp)        # 8-byte Spill
	movabsq	$13, %rax
	movq	%rax, 2616(%rsp)        # 8-byte Spill
	leaq	.L.str426, %rax
	movq	%rax, 2608(%rsp)        # 8-byte Spill
	leaq	.L.str431, %rax
	movq	%rax, 2600(%rsp)        # 8-byte Spill
	leaq	.L.str440, %rax
	movq	%rax, 2592(%rsp)        # 8-byte Spill
	leaq	.L.str434, %rax
	movq	%rax, 2584(%rsp)        # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 2576(%rsp)        # 8-byte Spill
	movabsq	$48, %rax
	movq	%rax, 2568(%rsp)        # 8-byte Spill
	leaq	.L.str255, %rax
	movq	%rax, 2560(%rsp)        # 8-byte Spill
	leaq	.L.str235, %rax
	.loc	2 544 0                 # eispack.c:544:0
	movq	%rax, 2552(%rsp)        # 8-byte Spill
	movq	2576(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 2544(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 2536(%rsp)        # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, 2528(%rsp)        # 8-byte Spill
	movq	%r14, %rdx
	movq	2624(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 2520(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	2568(%rsp), %rax        # 8-byte Reload
	movq	%r8, 2512(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 2504(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	vmovsd	%xmm0, 2496(%rsp)       # 8-byte Spill
	vmovsd	%xmm1, 2488(%rsp)       # 8-byte Spill
	vmovsd	%xmm2, 2480(%rsp)       # 8-byte Spill
	movl	%ebp, 2476(%rsp)        # 4-byte Spill
	movl	%r12d, 2472(%rsp)       # 4-byte Spill
	movq	%r13, 2464(%rsp)        # 8-byte Spill
	vmovsd	%xmm3, 2456(%rsp)       # 8-byte Spill
	movq	%r15, 2448(%rsp)        # 8-byte Spill
	movq	%r14, 2440(%rsp)        # 8-byte Spill
	movq	%r10, 2432(%rsp)        # 8-byte Spill
	movq	%r11, 2424(%rsp)        # 8-byte Spill
	movq	%rbx, 2416(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	2544(%rsp), %rdi        # 8-byte Reload
	movq	2728(%rsp), %rsi        # 8-byte Reload
	movq	2528(%rsp), %rdx        # 8-byte Reload
	movq	2736(%rsp), %rcx        # 8-byte Reload
	movq	2552(%rsp), %r8         # 8-byte Reload
	movq	2736(%rsp), %r9         # 8-byte Reload
	movq	2584(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2736(%rsp), %rdi        # 8-byte Reload
	movq	2728(%rsp), %rsi        # 8-byte Reload
	vmovsd	2456(%rsp), %xmm0       # 8-byte Reload
	movq	2528(%rsp), %rdx        # 8-byte Reload
	movq	2712(%rsp), %rcx        # 8-byte Reload
	movq	2736(%rsp), %r8         # 8-byte Reload
	movq	2608(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	2464(%rsp), %rdi        # 8-byte Reload
	movq	2728(%rsp), %rsi        # 8-byte Reload
	vmovsd	2480(%rsp), %xmm0       # 8-byte Reload
	movq	2736(%rsp), %rdx        # 8-byte Reload
	movq	2624(%rsp), %rcx        # 8-byte Reload
	movq	2528(%rsp), %r8         # 8-byte Reload
	movq	2608(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	2576(%rsp), %rdi        # 8-byte Reload
	movq	2416(%rsp), %rsi        # 8-byte Reload
	movq	2440(%rsp), %rdx        # 8-byte Reload
	movq	2720(%rsp), %rcx        # 8-byte Reload
	movq	2568(%rsp), %r8         # 8-byte Reload
	movl	2476(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2544(%rsp), %rdi        # 8-byte Reload
	movq	2728(%rsp), %rsi        # 8-byte Reload
	movq	2528(%rsp), %rdx        # 8-byte Reload
	movq	2736(%rsp), %rcx        # 8-byte Reload
	movq	2560(%rsp), %r8         # 8-byte Reload
	movq	2736(%rsp), %r9         # 8-byte Reload
	movq	2584(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2736(%rsp), %rdi        # 8-byte Reload
	movq	2728(%rsp), %rsi        # 8-byte Reload
	movq	2528(%rsp), %rdx        # 8-byte Reload
	movq	2736(%rsp), %rcx        # 8-byte Reload
	movq	2600(%rsp), %r8         # 8-byte Reload
	movq	2736(%rsp), %r9         # 8-byte Reload
	movq	2608(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2464(%rsp), %rdi        # 8-byte Reload
	movq	2728(%rsp), %rsi        # 8-byte Reload
	vmovsd	2488(%rsp), %xmm0       # 8-byte Reload
	movq	2736(%rsp), %rdx        # 8-byte Reload
	movq	2720(%rsp), %rcx        # 8-byte Reload
	movq	2528(%rsp), %r8         # 8-byte Reload
	movq	2608(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	2576(%rsp), %rdi        # 8-byte Reload
	movq	2416(%rsp), %rsi        # 8-byte Reload
	movq	2440(%rsp), %rdx        # 8-byte Reload
	movq	2632(%rsp), %rcx        # 8-byte Reload
	movq	2568(%rsp), %r8         # 8-byte Reload
	movl	2476(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2544(%rsp), %rdi        # 8-byte Reload
	movq	2728(%rsp), %rsi        # 8-byte Reload
	movq	2528(%rsp), %rdx        # 8-byte Reload
	movq	2736(%rsp), %rcx        # 8-byte Reload
	movq	2592(%rsp), %r8         # 8-byte Reload
	movq	2736(%rsp), %r9         # 8-byte Reload
	movq	2584(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2736(%rsp), %rdi        # 8-byte Reload
	movq	2728(%rsp), %rsi        # 8-byte Reload
	movq	2528(%rsp), %rdx        # 8-byte Reload
	movq	2736(%rsp), %rcx        # 8-byte Reload
	movq	2600(%rsp), %r8         # 8-byte Reload
	movq	2736(%rsp), %r9         # 8-byte Reload
	movq	2608(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2464(%rsp), %rdi        # 8-byte Reload
	movq	2728(%rsp), %rsi        # 8-byte Reload
	vmovsd	2496(%rsp), %xmm0       # 8-byte Reload
	movq	2736(%rsp), %rdx        # 8-byte Reload
	movq	2632(%rsp), %rcx        # 8-byte Reload
	movq	2528(%rsp), %r8         # 8-byte Reload
	movq	2608(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	2648(%rsp), %rdi        # 8-byte Reload
	movq	2416(%rsp), %rsi        # 8-byte Reload
	movq	2440(%rsp), %rdx        # 8-byte Reload
	movq	2664(%rsp), %rcx        # 8-byte Reload
	movq	2616(%rsp), %r8         # 8-byte Reload
	movl	2476(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2544(%rsp), %rdi        # 8-byte Reload
	movq	2728(%rsp), %rsi        # 8-byte Reload
	vmovsd	2480(%rsp), %xmm0       # 8-byte Reload
	movq	2736(%rsp), %rdx        # 8-byte Reload
	movq	2624(%rsp), %rcx        # 8-byte Reload
	movq	2528(%rsp), %r8         # 8-byte Reload
	movq	2536(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	2736(%rsp), %rdi        # 8-byte Reload
	movq	2728(%rsp), %rsi        # 8-byte Reload
	vmovsd	2496(%rsp), %xmm0       # 8-byte Reload
	movq	2736(%rsp), %rdx        # 8-byte Reload
	movq	2632(%rsp), %rcx        # 8-byte Reload
	movq	2528(%rsp), %r8         # 8-byte Reload
	movq	2536(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	2496(%rsp), %xmm0       # 8-byte Reload
	vmovsd	2480(%rsp), %xmm1       # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	2464(%rsp), %rdi        # 8-byte Reload
	movq	2728(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	2736(%rsp), %rdx        # 8-byte Reload
	movq	2664(%rsp), %rcx        # 8-byte Reload
	movq	2528(%rsp), %r8         # 8-byte Reload
	movq	2536(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 2408(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	2648(%rsp), %rdi        # 8-byte Reload
	movq	2416(%rsp), %rsi        # 8-byte Reload
	movq	2440(%rsp), %rdx        # 8-byte Reload
	movq	2640(%rsp), %rcx        # 8-byte Reload
	movq	2672(%rsp), %r8         # 8-byte Reload
	movl	2476(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2544(%rsp), %rdi        # 8-byte Reload
	movq	2728(%rsp), %rsi        # 8-byte Reload
	movq	7464(%rsp), %rdx        # 8-byte Reload
	movq	2736(%rsp), %rcx        # 8-byte Reload
	movq	2656(%rsp), %r8         # 8-byte Reload
	movq	2528(%rsp), %r9         # 8-byte Reload
	movq	2536(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2736(%rsp), %rdi        # 8-byte Reload
	movq	2728(%rsp), %rsi        # 8-byte Reload
	vmovsd	2408(%rsp), %xmm0       # 8-byte Reload
	movq	2736(%rsp), %rdx        # 8-byte Reload
	movq	2664(%rsp), %rcx        # 8-byte Reload
	movq	2528(%rsp), %r8         # 8-byte Reload
	movq	2536(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	7464(%rsp), %rax        # 8-byte Reload
	vmovsd	2408(%rsp), %xmm0       # 8-byte Reload
	vmovsd	%xmm0, (%rax)
	.loc	2 545 0                 # eispack.c:545:0
	movq	2688(%rsp), %rdi        # 8-byte Reload
	movq	2416(%rsp), %rsi        # 8-byte Reload
	movq	2440(%rsp), %rdx        # 8-byte Reload
	movq	2680(%rsp), %rcx        # 8-byte Reload
	movq	2672(%rsp), %r8         # 8-byte Reload
	movl	2476(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2544(%rsp), %rdi        # 8-byte Reload
	movq	2728(%rsp), %rsi        # 8-byte Reload
	movq	7488(%rsp), %rdx        # 8-byte Reload
	movq	2736(%rsp), %rcx        # 8-byte Reload
	movq	2696(%rsp), %r8         # 8-byte Reload
	movq	2528(%rsp), %r9         # 8-byte Reload
	movq	2536(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2736(%rsp), %rdi        # 8-byte Reload
	movq	2728(%rsp), %rsi        # 8-byte Reload
	vmovsd	2488(%rsp), %xmm0       # 8-byte Reload
	movq	2736(%rsp), %rdx        # 8-byte Reload
	movq	2720(%rsp), %rcx        # 8-byte Reload
	movq	2528(%rsp), %r8         # 8-byte Reload
	movq	2536(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	7488(%rsp), %rax        # 8-byte Reload
	vmovsd	2488(%rsp), %xmm0       # 8-byte Reload
	vmovsd	%xmm0, (%rax)
	.loc	2 549 0                 # eispack.c:549:0
.Ltmp460:
	movq	2424(%rsp), %rdi        # 8-byte Reload
	movq	2416(%rsp), %rsi        # 8-byte Reload
	movq	2440(%rsp), %rdx        # 8-byte Reload
	movq	2520(%rsp), %rcx        # 8-byte Reload
	movq	2704(%rsp), %r8         # 8-byte Reload
	movl	2476(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2544(%rsp), %rdi        # 8-byte Reload
	movq	2728(%rsp), %rsi        # 8-byte Reload
	vmovsd	2456(%rsp), %xmm0       # 8-byte Reload
	movq	2528(%rsp), %rdx        # 8-byte Reload
	movq	2712(%rsp), %rcx        # 8-byte Reload
	movq	2528(%rsp), %r8         # 8-byte Reload
	movq	2536(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	2736(%rsp), %rdi        # 8-byte Reload
	movq	2728(%rsp), %rsi        # 8-byte Reload
	vmovsd	2488(%rsp), %xmm0       # 8-byte Reload
	movq	2736(%rsp), %rdx        # 8-byte Reload
	movq	2720(%rsp), %rcx        # 8-byte Reload
	movq	2528(%rsp), %r8         # 8-byte Reload
	movq	2536(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	2488(%rsp), %xmm0       # 8-byte Reload
	vmovsd	2456(%rsp), %xmm1       # 8-byte Reload
	vucomisd	%xmm1, %xmm0
	sete	%al
	setnp	%cl
	andb	%al, %cl
	movb	%cl, %al
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	2464(%rsp), %rdi        # 8-byte Reload
	movq	2736(%rsp), %rsi        # 8-byte Reload
	movq	2736(%rsp), %r8         # 8-byte Reload
	movb	%cl, 2407(%rsp)         # 1-byte Spill
	movq	%r8, %rcx
	movq	2520(%rsp), %r8         # 8-byte Reload
	movq	2528(%rsp), %r9         # 8-byte Reload
	movq	2536(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	2424(%rsp), %rdi        # 8-byte Reload
	movq	2416(%rsp), %rsi        # 8-byte Reload
	movq	2440(%rsp), %rdx        # 8-byte Reload
	movq	2448(%rsp), %rcx        # 8-byte Reload
	movq	2544(%rsp), %r8         # 8-byte Reload
	movl	2476(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2504(%rsp), %rdi        # 8-byte Reload
	movq	2528(%rsp), %rsi        # 8-byte Reload
	movq	2528(%rsp), %rdx        # 8-byte Reload
	movq	2736(%rsp), %rcx        # 8-byte Reload
	movq	2432(%rsp), %r8         # 8-byte Reload
	movq	2528(%rsp), %r9         # 8-byte Reload
	movq	2536(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	2544(%rsp), %rdi        # 8-byte Reload
	movq	2528(%rsp), %rsi        # 8-byte Reload
	movq	2528(%rsp), %rdx        # 8-byte Reload
	movq	2736(%rsp), %rcx        # 8-byte Reload
	movq	2512(%rsp), %r8         # 8-byte Reload
	movq	2528(%rsp), %r9         # 8-byte Reload
	movq	2536(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	2407(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	2736(%rsp), %rdi        # 8-byte Reload
	movq	2736(%rsp), %rsi        # 8-byte Reload
	movq	2736(%rsp), %rcx        # 8-byte Reload
	movq	2520(%rsp), %r8         # 8-byte Reload
	movq	2528(%rsp), %r9         # 8-byte Reload
	movq	2536(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	2407(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	vmovsd	3888(%rsp), %xmm0       # 8-byte Reload
	vmovsd	%xmm0, 6176(%rsp)       # 8-byte Spill
	jne	.LBB10_21
.Ltmp461:
# BB#19:                                #   in Loop: Header=BB10_12 Depth=2
	movabsq	$1, %rax
	leaq	.L.str272, %rcx
	movabsq	$0, %rdx
	leaq	.L.str781, %rsi
	movabsq	$2, %rdi
	leaq	.L.str414, %r8
	movabsq	$3, %r9
	leaq	.L.str417, %r10
	movabsq	$554, %r11              # imm = 0x22A
	leaq	.L.str62136, %rbx
	leaq	.L.str452, %r14
	leaq	.L.str453, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 2392(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 2384(%rsp)        # 8-byte Spill
	leaq	.L.str259, %rax
	movq	%rax, 2376(%rsp)        # 8-byte Spill
	leaq	.L.str261, %rax
	movq	%rax, 2368(%rsp)        # 8-byte Spill
	movabsq	$47, %rax
	movq	%rax, 2360(%rsp)        # 8-byte Spill
	leaq	.L.str260, %rax
	movq	%rax, 2352(%rsp)        # 8-byte Spill
	leaq	fabs, %rax
	movq	%rax, 2344(%rsp)        # 8-byte Spill
	leaq	.L.str680, %rax
	movq	%rax, 2336(%rsp)        # 8-byte Spill
	movabsq	$49, %rax
	movq	%rax, 2328(%rsp)        # 8-byte Spill
	leaq	.L.str399, %rax
	movq	%rax, 2320(%rsp)        # 8-byte Spill
	leaq	.L.str189, %rax
	movq	%rax, 2312(%rsp)        # 8-byte Spill
	movabsq	$16, %rax
	movq	%rax, 2304(%rsp)        # 8-byte Spill
	leaq	.L.str258, %rax
	movq	%rax, 2296(%rsp)        # 8-byte Spill
	leaq	.L.str36110, %rax
	movq	%rax, 2288(%rsp)        # 8-byte Spill
	movabsq	$27, %rax
	.loc	2 554 0                 # eispack.c:554:0
.Ltmp462:
	movq	%rdi, 2280(%rsp)        # 8-byte Spill
	movq	%r11, %rdi
	movq	%rsi, 2272(%rsp)        # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, 2264(%rsp)        # 8-byte Spill
	movq	%r14, %rdx
	movq	%rax, 2256(%rsp)        # 8-byte Spill
	movq	2296(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 2248(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	2256(%rsp), %rax        # 8-byte Reload
	movq	%r8, 2240(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 2232(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r15, 2224(%rsp)        # 8-byte Spill
	movl	%ebp, 2220(%rsp)        # 4-byte Spill
	movl	%r12d, 2216(%rsp)       # 4-byte Spill
	movq	%r13, 2208(%rsp)        # 8-byte Spill
	movq	%r14, 2200(%rsp)        # 8-byte Spill
	movq	%rbx, 2192(%rsp)        # 8-byte Spill
	movq	%r10, 2184(%rsp)        # 8-byte Spill
	movq	%r11, 2176(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	2392(%rsp), %rdi        # 8-byte Reload
	movq	2384(%rsp), %rsi        # 8-byte Reload
	movq	7464(%rsp), %rdx        # 8-byte Reload
	movq	2392(%rsp), %rcx        # 8-byte Reload
	movq	2288(%rsp), %r8         # 8-byte Reload
	movq	2264(%rsp), %r9         # 8-byte Reload
	movq	2272(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	7464(%rsp), %rax        # 8-byte Reload
	vmovsd	(%rax), %xmm0
	movq	2208(%rsp), %rdi        # 8-byte Reload
	movq	2384(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 2168(%rsp)       # 8-byte Spill
	movq	2392(%rsp), %rdx        # 8-byte Reload
	movq	2296(%rsp), %rcx        # 8-byte Reload
	movq	2264(%rsp), %r8         # 8-byte Reload
	movq	2272(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	2176(%rsp), %rdi        # 8-byte Reload
	movq	2192(%rsp), %rsi        # 8-byte Reload
	movq	2200(%rsp), %rdx        # 8-byte Reload
	movq	2376(%rsp), %rcx        # 8-byte Reload
	movq	2328(%rsp), %r8         # 8-byte Reload
	movl	2220(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2280(%rsp), %rdi        # 8-byte Reload
	movq	2384(%rsp), %rsi        # 8-byte Reload
	movq	2344(%rsp), %rdx        # 8-byte Reload
	movq	2392(%rsp), %rcx        # 8-byte Reload
	movq	2336(%rsp), %r8         # 8-byte Reload
	movq	2264(%rsp), %r9         # 8-byte Reload
	movq	2272(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2392(%rsp), %rdi        # 8-byte Reload
	movq	2384(%rsp), %rsi        # 8-byte Reload
	vmovsd	2168(%rsp), %xmm0       # 8-byte Reload
	movq	2392(%rsp), %rdx        # 8-byte Reload
	movq	2296(%rsp), %rcx        # 8-byte Reload
	movq	2264(%rsp), %r8         # 8-byte Reload
	movq	2272(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	.LCPI10_0(%rip), %xmm0
	vmovsd	2168(%rsp), %xmm1       # 8-byte Reload
	vandpd	%xmm0, %xmm1, %xmm0
	movq	2208(%rsp), %rdi        # 8-byte Reload
	movq	2384(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 2160(%rsp)       # 8-byte Spill
	movq	2392(%rsp), %rdx        # 8-byte Reload
	movq	2376(%rsp), %rcx        # 8-byte Reload
	movq	2264(%rsp), %r8         # 8-byte Reload
	movq	2272(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	2176(%rsp), %rdi        # 8-byte Reload
	movq	2192(%rsp), %rsi        # 8-byte Reload
	movq	2200(%rsp), %rdx        # 8-byte Reload
	movq	2352(%rsp), %rcx        # 8-byte Reload
	movq	2304(%rsp), %r8         # 8-byte Reload
	movl	2220(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2280(%rsp), %rdi        # 8-byte Reload
	movq	2384(%rsp), %rsi        # 8-byte Reload
	vmovsd	2488(%rsp), %xmm0       # 8-byte Reload
	movq	2392(%rsp), %rdx        # 8-byte Reload
	movq	2312(%rsp), %rcx        # 8-byte Reload
	movq	2264(%rsp), %r8         # 8-byte Reload
	movq	2272(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	2392(%rsp), %rdi        # 8-byte Reload
	movq	2384(%rsp), %rsi        # 8-byte Reload
	vmovsd	7016(%rsp), %xmm0       # 8-byte Reload
	movq	2392(%rsp), %rdx        # 8-byte Reload
	movq	2320(%rsp), %rcx        # 8-byte Reload
	movq	2264(%rsp), %r8         # 8-byte Reload
	movq	2272(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	7016(%rsp), %xmm0       # 8-byte Reload
	vmovsd	2488(%rsp), %xmm1       # 8-byte Reload
	vdivsd	%xmm1, %xmm0, %xmm2
	movq	2208(%rsp), %rdi        # 8-byte Reload
	movq	2384(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	2392(%rsp), %rdx        # 8-byte Reload
	movq	2352(%rsp), %rcx        # 8-byte Reload
	movq	2264(%rsp), %r8         # 8-byte Reload
	movq	2272(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 2152(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	2176(%rsp), %rdi        # 8-byte Reload
	movq	2192(%rsp), %rsi        # 8-byte Reload
	movq	2200(%rsp), %rdx        # 8-byte Reload
	movq	2368(%rsp), %rcx        # 8-byte Reload
	movq	2328(%rsp), %r8         # 8-byte Reload
	movl	2220(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2280(%rsp), %rdi        # 8-byte Reload
	movq	2384(%rsp), %rsi        # 8-byte Reload
	movq	2344(%rsp), %rdx        # 8-byte Reload
	movq	2392(%rsp), %rcx        # 8-byte Reload
	movq	2336(%rsp), %r8         # 8-byte Reload
	movq	2264(%rsp), %r9         # 8-byte Reload
	movq	2272(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2392(%rsp), %rdi        # 8-byte Reload
	movq	2384(%rsp), %rsi        # 8-byte Reload
	vmovsd	2152(%rsp), %xmm0       # 8-byte Reload
	movq	2392(%rsp), %rdx        # 8-byte Reload
	movq	2352(%rsp), %rcx        # 8-byte Reload
	movq	2264(%rsp), %r8         # 8-byte Reload
	movq	2272(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	.LCPI10_0(%rip), %xmm0
	vmovsd	2152(%rsp), %xmm1       # 8-byte Reload
	vandpd	%xmm0, %xmm1, %xmm0
	movq	2208(%rsp), %rdi        # 8-byte Reload
	movq	2384(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 2144(%rsp)       # 8-byte Spill
	movq	2392(%rsp), %rdx        # 8-byte Reload
	movq	2368(%rsp), %rcx        # 8-byte Reload
	movq	2264(%rsp), %r8         # 8-byte Reload
	movq	2272(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	2176(%rsp), %rdi        # 8-byte Reload
	movq	2192(%rsp), %rsi        # 8-byte Reload
	movq	2200(%rsp), %rdx        # 8-byte Reload
	movq	2248(%rsp), %rcx        # 8-byte Reload
	movq	2360(%rsp), %r8         # 8-byte Reload
	movl	2220(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2280(%rsp), %rdi        # 8-byte Reload
	movq	2384(%rsp), %rsi        # 8-byte Reload
	vmovsd	2144(%rsp), %xmm0       # 8-byte Reload
	movq	2392(%rsp), %rdx        # 8-byte Reload
	movq	2368(%rsp), %rcx        # 8-byte Reload
	movq	2264(%rsp), %r8         # 8-byte Reload
	movq	2272(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	2392(%rsp), %rdi        # 8-byte Reload
	movq	2384(%rsp), %rsi        # 8-byte Reload
	vmovsd	2160(%rsp), %xmm0       # 8-byte Reload
	movq	2392(%rsp), %rdx        # 8-byte Reload
	movq	2376(%rsp), %rcx        # 8-byte Reload
	movq	2264(%rsp), %r8         # 8-byte Reload
	movq	2272(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	2144(%rsp), %xmm0       # 8-byte Reload
	vmovsd	2160(%rsp), %xmm1       # 8-byte Reload
	vucomisd	%xmm1, %xmm0
	setb	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ebp
	movl	%ebp, %edx
	movq	2208(%rsp), %rdi        # 8-byte Reload
	movq	2392(%rsp), %rsi        # 8-byte Reload
	movq	2392(%rsp), %rcx        # 8-byte Reload
	movq	2248(%rsp), %r8         # 8-byte Reload
	movq	2264(%rsp), %r9         # 8-byte Reload
	movq	2272(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 2143(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	2176(%rsp), %rdi        # 8-byte Reload
	movq	2192(%rsp), %rsi        # 8-byte Reload
	movq	2200(%rsp), %rdx        # 8-byte Reload
	movq	2224(%rsp), %rcx        # 8-byte Reload
	movq	2280(%rsp), %r8         # 8-byte Reload
	movl	2220(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2232(%rsp), %rdi        # 8-byte Reload
	movq	2264(%rsp), %rsi        # 8-byte Reload
	movq	2264(%rsp), %rdx        # 8-byte Reload
	movq	2392(%rsp), %rcx        # 8-byte Reload
	movq	2184(%rsp), %r8         # 8-byte Reload
	movq	2264(%rsp), %r9         # 8-byte Reload
	movq	2272(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	2280(%rsp), %rdi        # 8-byte Reload
	movq	2264(%rsp), %rsi        # 8-byte Reload
	movq	2264(%rsp), %rdx        # 8-byte Reload
	movq	2392(%rsp), %rcx        # 8-byte Reload
	movq	2240(%rsp), %r8         # 8-byte Reload
	movq	2264(%rsp), %r9         # 8-byte Reload
	movq	2272(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	2143(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	2392(%rsp), %rdi        # 8-byte Reload
	movq	2392(%rsp), %rsi        # 8-byte Reload
	movq	2392(%rsp), %rcx        # 8-byte Reload
	movq	2248(%rsp), %r8         # 8-byte Reload
	movq	2264(%rsp), %r9         # 8-byte Reload
	movq	2272(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	2143(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	vmovsd	3888(%rsp), %xmm0       # 8-byte Reload
	vmovsd	%xmm0, 6176(%rsp)       # 8-byte Spill
	jne	.LBB10_20
	jmp	.LBB10_21
.Ltmp463:
.LBB10_20:                              #   in Loop: Header=BB10_12 Depth=2
	movabsq	$1, %rax
	leaq	.L.str281, %rcx
	movabsq	$0, %rdx
	leaq	.L.str781, %rsi
	movabsq	$2, %rdi
	leaq	.L.str415, %r8
	movabsq	$3, %r9
	leaq	.L.str414, %r10
	movabsq	$561, %r11              # imm = 0x231
	leaq	.L.str62136, %rbx
	leaq	.L.str417, %r14
	leaq	.L.str455, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	vxorps	%xmm0, %xmm0, %xmm0
	movq	%rax, 2128(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 2120(%rsp)        # 8-byte Spill
	leaq	.L.str280, %rax
	movq	%rax, 2112(%rsp)        # 8-byte Spill
	leaq	.L.str1488, %rax
	movq	%rax, 2104(%rsp)        # 8-byte Spill
	movabsq	$47, %rax
	movq	%rax, 2096(%rsp)        # 8-byte Spill
	leaq	.L.str36110, %rax
	movq	%rax, 2088(%rsp)        # 8-byte Spill
	movabsq	$559, %rax              # imm = 0x22F
	movq	%rax, 2080(%rsp)        # 8-byte Spill
	leaq	.L.str454, %rax
	movq	%rax, 2072(%rsp)        # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, 2064(%rsp)        # 8-byte Spill
	leaq	.L.str189, %rax
	movq	%rax, 2056(%rsp)        # 8-byte Spill
	leaq	.L.str258, %rax
	movq	%rax, 2048(%rsp)        # 8-byte Spill
	movabsq	$13, %rax
	.loc	2 559 0                 # eispack.c:559:0
	movq	%rax, 2040(%rsp)        # 8-byte Spill
	movq	2080(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 2032(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 2024(%rsp)        # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, 2016(%rsp)        # 8-byte Spill
	movq	%r14, %rdx
	movq	2112(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 2008(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	2040(%rsp), %rax        # 8-byte Reload
	movq	%r8, 2000(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 1992(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movl	%ebp, 1988(%rsp)        # 4-byte Spill
	movl	%r12d, 1984(%rsp)       # 4-byte Spill
	movq	%r13, 1976(%rsp)        # 8-byte Spill
	vmovsd	%xmm0, 1968(%rsp)       # 8-byte Spill
	movq	%r15, 1960(%rsp)        # 8-byte Spill
	movq	%r14, 1952(%rsp)        # 8-byte Spill
	movq	%r10, 1944(%rsp)        # 8-byte Spill
	movq	%r11, 1936(%rsp)        # 8-byte Spill
	movq	%rbx, 1928(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	2032(%rsp), %rdi        # 8-byte Reload
	movq	2120(%rsp), %rsi        # 8-byte Reload
	vmovsd	2168(%rsp), %xmm0       # 8-byte Reload
	movq	2128(%rsp), %rdx        # 8-byte Reload
	movq	2048(%rsp), %rcx        # 8-byte Reload
	movq	2016(%rsp), %r8         # 8-byte Reload
	movq	2024(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	2128(%rsp), %rdi        # 8-byte Reload
	movq	2120(%rsp), %rsi        # 8-byte Reload
	vmovsd	2488(%rsp), %xmm0       # 8-byte Reload
	movq	2128(%rsp), %rdx        # 8-byte Reload
	movq	2056(%rsp), %rcx        # 8-byte Reload
	movq	2016(%rsp), %r8         # 8-byte Reload
	movq	2024(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	2488(%rsp), %xmm0       # 8-byte Reload
	vmovsd	2168(%rsp), %xmm1       # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	1976(%rsp), %rdi        # 8-byte Reload
	movq	2120(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	2128(%rsp), %rdx        # 8-byte Reload
	movq	2112(%rsp), %rcx        # 8-byte Reload
	movq	2016(%rsp), %r8         # 8-byte Reload
	movq	2024(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 1920(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	2080(%rsp), %rdi        # 8-byte Reload
	movq	1928(%rsp), %rsi        # 8-byte Reload
	movq	1952(%rsp), %rdx        # 8-byte Reload
	movq	2072(%rsp), %rcx        # 8-byte Reload
	movq	2064(%rsp), %r8         # 8-byte Reload
	movl	1988(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2032(%rsp), %rdi        # 8-byte Reload
	movq	2120(%rsp), %rsi        # 8-byte Reload
	movq	7464(%rsp), %rdx        # 8-byte Reload
	movq	2128(%rsp), %rcx        # 8-byte Reload
	movq	2088(%rsp), %r8         # 8-byte Reload
	movq	2016(%rsp), %r9         # 8-byte Reload
	movq	2024(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2128(%rsp), %rdi        # 8-byte Reload
	movq	2120(%rsp), %rsi        # 8-byte Reload
	vmovsd	1920(%rsp), %xmm0       # 8-byte Reload
	movq	2128(%rsp), %rdx        # 8-byte Reload
	movq	2112(%rsp), %rcx        # 8-byte Reload
	movq	2016(%rsp), %r8         # 8-byte Reload
	movq	2024(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	7464(%rsp), %rax        # 8-byte Reload
	vmovsd	1920(%rsp), %xmm0       # 8-byte Reload
	vmovsd	%xmm0, (%rax)
	.loc	2 561 0                 # eispack.c:561:0
.Ltmp464:
	movq	1936(%rsp), %rdi        # 8-byte Reload
	movq	1928(%rsp), %rsi        # 8-byte Reload
	movq	1952(%rsp), %rdx        # 8-byte Reload
	movq	2008(%rsp), %rcx        # 8-byte Reload
	movq	2096(%rsp), %r8         # 8-byte Reload
	movl	1988(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2032(%rsp), %rdi        # 8-byte Reload
	movq	2120(%rsp), %rsi        # 8-byte Reload
	vmovsd	1968(%rsp), %xmm0       # 8-byte Reload
	movq	2016(%rsp), %rdx        # 8-byte Reload
	movq	2104(%rsp), %rcx        # 8-byte Reload
	movq	2016(%rsp), %r8         # 8-byte Reload
	movq	2024(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	2128(%rsp), %rdi        # 8-byte Reload
	movq	2120(%rsp), %rsi        # 8-byte Reload
	vmovsd	1920(%rsp), %xmm0       # 8-byte Reload
	movq	2128(%rsp), %rdx        # 8-byte Reload
	movq	2112(%rsp), %rcx        # 8-byte Reload
	movq	2016(%rsp), %r8         # 8-byte Reload
	movq	2024(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	1920(%rsp), %xmm0       # 8-byte Reload
	vmovsd	1968(%rsp), %xmm1       # 8-byte Reload
	vucomisd	%xmm1, %xmm0
	sete	%al
	setnp	%cl
	andb	%al, %cl
	movb	%cl, %al
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	1976(%rsp), %rdi        # 8-byte Reload
	movq	2128(%rsp), %rsi        # 8-byte Reload
	movq	2128(%rsp), %r8         # 8-byte Reload
	movb	%cl, 1919(%rsp)         # 1-byte Spill
	movq	%r8, %rcx
	movq	2008(%rsp), %r8         # 8-byte Reload
	movq	2016(%rsp), %r9         # 8-byte Reload
	movq	2024(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1936(%rsp), %rdi        # 8-byte Reload
	movq	1928(%rsp), %rsi        # 8-byte Reload
	movq	1952(%rsp), %rdx        # 8-byte Reload
	movq	1960(%rsp), %rcx        # 8-byte Reload
	movq	2032(%rsp), %r8         # 8-byte Reload
	movl	1988(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1992(%rsp), %rdi        # 8-byte Reload
	movq	2016(%rsp), %rsi        # 8-byte Reload
	movq	2016(%rsp), %rdx        # 8-byte Reload
	movq	2128(%rsp), %rcx        # 8-byte Reload
	movq	1944(%rsp), %r8         # 8-byte Reload
	movq	2016(%rsp), %r9         # 8-byte Reload
	movq	2024(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	2032(%rsp), %rdi        # 8-byte Reload
	movq	2016(%rsp), %rsi        # 8-byte Reload
	movq	2016(%rsp), %rdx        # 8-byte Reload
	movq	2128(%rsp), %rcx        # 8-byte Reload
	movq	2000(%rsp), %r8         # 8-byte Reload
	movq	2016(%rsp), %r9         # 8-byte Reload
	movq	2024(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	1919(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	2128(%rsp), %rdi        # 8-byte Reload
	movq	2128(%rsp), %rsi        # 8-byte Reload
	movq	2128(%rsp), %rcx        # 8-byte Reload
	movq	2008(%rsp), %r8         # 8-byte Reload
	movq	2016(%rsp), %r9         # 8-byte Reload
	movq	2024(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	1919(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	vmovsd	3888(%rsp), %xmm0       # 8-byte Reload
	movl	5028(%rsp), %ebp        # 4-byte Reload
	vmovsd	3888(%rsp), %xmm1       # 8-byte Reload
	vmovsd	%xmm0, 5784(%rsp)       # 8-byte Spill
	movl	%ebp, 5780(%rsp)        # 4-byte Spill
	vmovsd	%xmm1, 6176(%rsp)       # 8-byte Spill
	jne	.LBB10_21
	jmp	.LBB10_12
.Ltmp465:
.LBB10_21:                              # %.lr.ph23
                                        #   in Loop: Header=BB10_5 Depth=1
	vmovsd	6176(%rsp), %xmm0       # 8-byte Reload
	movabsq	$1, %rax
	movabsq	$0, %rcx
	leaq	.L.str457, %r8
	leaq	.L.str781, %rdx
	movabsq	$572, %rdi              # imm = 0x23C
	leaq	.L.str62136, %rsi
	leaq	.L.str414, %r9
	leaq	.L.str456, %r10
	movabsq	$2, %r11
	movl	$0, %ebx
	movl	$1, %ebp
	movabsq	$19134, %r14            # imm = 0x4ABE
	movabsq	$64, %r15
	leaq	.L.str284, %r12
	leaq	.L.str397, %r13
	movq	%rax, 1904(%rsp)        # 8-byte Spill
	leaq	.L.str283, %rax
	movq	%rax, 1896(%rsp)        # 8-byte Spill
	movabsq	$568, %rax              # imm = 0x238
	movq	%rax, 1888(%rsp)        # 8-byte Spill
	movabsq	$9, %rax
	movq	%rax, 1880(%rsp)        # 8-byte Spill
	leaq	.L.str34108, %rax
	movq	%rax, 1872(%rsp)        # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, 1864(%rsp)        # 8-byte Spill
	leaq	.L.str408, %rax
	movq	%rax, 1856(%rsp)        # 8-byte Spill
	leaq	.L.str396, %rax
	movq	%rax, 1848(%rsp)        # 8-byte Spill
	leaq	.L.str202, %rax
	movq	%rax, 1840(%rsp)        # 8-byte Spill
	leaq	.L.str417, %rax
	movq	%rax, 1832(%rsp)        # 8-byte Spill
	movabsq	$3, %rax
	movq	%rax, 1824(%rsp)        # 8-byte Spill
	leaq	.L.str433, %rax
	movq	%rax, 1816(%rsp)        # 8-byte Spill
	movabsq	$4, %rax
	movq	%rax, 1808(%rsp)        # 8-byte Spill
	leaq	.L.str452, %rax
	movq	%rax, 1800(%rsp)        # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 1792(%rsp)        # 8-byte Spill
	movabsq	$48, %rax
	.loc	2 568 0                 # eispack.c:568:0
	movq	%rax, 1784(%rsp)        # 8-byte Spill
	movq	1792(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 1776(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 1768(%rsp)        # 8-byte Spill
	movq	%rdx, 1760(%rsp)        # 8-byte Spill
	movq	%r9, %rdx
	movq	%rcx, 1752(%rsp)        # 8-byte Spill
	movq	%r13, %rcx
	movq	1784(%rsp), %rax        # 8-byte Reload
	movq	%r8, 1744(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 1736(%rsp)         # 8-byte Spill
	movl	%ebx, %r9d
	movl	$1, (%rsp)
	vmovsd	%xmm0, 1728(%rsp)       # 8-byte Spill
	movq	%r14, 1720(%rsp)        # 8-byte Spill
	movl	%ebp, 1716(%rsp)        # 4-byte Spill
	movq	%r15, 1704(%rsp)        # 8-byte Spill
	movq	%r13, 1696(%rsp)        # 8-byte Spill
	movq	%r12, 1688(%rsp)        # 8-byte Spill
	movl	%ebx, 1684(%rsp)        # 4-byte Spill
	movq	%r10, 1672(%rsp)        # 8-byte Spill
	movq	%r11, 1664(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	1808(%rsp), %rdi        # 8-byte Reload
	movq	1704(%rsp), %rsi        # 8-byte Reload
	movq	1752(%rsp), %rdx        # 8-byte Reload
	movq	1904(%rsp), %rcx        # 8-byte Reload
	movq	1840(%rsp), %r8         # 8-byte Reload
	movq	1904(%rsp), %r9         # 8-byte Reload
	movq	1800(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1824(%rsp), %rdi        # 8-byte Reload
	movq	1704(%rsp), %rsi        # 8-byte Reload
	movq	1752(%rsp), %rdx        # 8-byte Reload
	movq	1904(%rsp), %rcx        # 8-byte Reload
	movq	1840(%rsp), %r8         # 8-byte Reload
	movq	1904(%rsp), %r9         # 8-byte Reload
	movq	1816(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1664(%rsp), %rdi        # 8-byte Reload
	movq	1704(%rsp), %rsi        # 8-byte Reload
	movq	1752(%rsp), %rdx        # 8-byte Reload
	movq	1904(%rsp), %rcx        # 8-byte Reload
	movq	1840(%rsp), %r8         # 8-byte Reload
	movq	1904(%rsp), %r9         # 8-byte Reload
	movq	1832(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1904(%rsp), %rdi        # 8-byte Reload
	movq	1704(%rsp), %rsi        # 8-byte Reload
	movq	1752(%rsp), %rdx        # 8-byte Reload
	movq	1904(%rsp), %rcx        # 8-byte Reload
	movq	1848(%rsp), %r8         # 8-byte Reload
	movq	1904(%rsp), %r9         # 8-byte Reload
	movq	1856(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1720(%rsp), %rdi        # 8-byte Reload
	movq	1704(%rsp), %rsi        # 8-byte Reload
	vmovsd	1728(%rsp), %xmm0       # 8-byte Reload
	movq	1904(%rsp), %rdx        # 8-byte Reload
	movq	1696(%rsp), %rcx        # 8-byte Reload
	movq	1752(%rsp), %r8         # 8-byte Reload
	movq	1856(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1888(%rsp), %rdi        # 8-byte Reload
	movq	1768(%rsp), %rsi        # 8-byte Reload
	movq	1736(%rsp), %rdx        # 8-byte Reload
	movq	1896(%rsp), %rcx        # 8-byte Reload
	movq	1864(%rsp), %r8         # 8-byte Reload
	movl	1684(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1904(%rsp), %rdi        # 8-byte Reload
	movq	1704(%rsp), %rsi        # 8-byte Reload
	movq	7488(%rsp), %rdx        # 8-byte Reload
	movq	1904(%rsp), %rcx        # 8-byte Reload
	movq	1872(%rsp), %r8         # 8-byte Reload
	movq	1752(%rsp), %r9         # 8-byte Reload
	movq	1760(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	7488(%rsp), %rax        # 8-byte Reload
	vmovsd	(%rax), %xmm0
	movq	1720(%rsp), %rdi        # 8-byte Reload
	movq	1704(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 1656(%rsp)       # 8-byte Spill
	movq	1904(%rsp), %rdx        # 8-byte Reload
	movq	1896(%rsp), %rcx        # 8-byte Reload
	movq	1752(%rsp), %r8         # 8-byte Reload
	movq	1760(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1888(%rsp), %rdi        # 8-byte Reload
	movq	1768(%rsp), %rsi        # 8-byte Reload
	movq	1736(%rsp), %rdx        # 8-byte Reload
	movq	1688(%rsp), %rcx        # 8-byte Reload
	movq	1880(%rsp), %r8         # 8-byte Reload
	movl	1684(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1664(%rsp), %rdi        # 8-byte Reload
	movq	1704(%rsp), %rsi        # 8-byte Reload
	vmovsd	1656(%rsp), %xmm0       # 8-byte Reload
	movq	1904(%rsp), %rdx        # 8-byte Reload
	movq	1896(%rsp), %rcx        # 8-byte Reload
	movq	1752(%rsp), %r8         # 8-byte Reload
	movq	1760(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1904(%rsp), %rdi        # 8-byte Reload
	movq	1704(%rsp), %rsi        # 8-byte Reload
	vmovsd	1728(%rsp), %xmm0       # 8-byte Reload
	movq	1904(%rsp), %rdx        # 8-byte Reload
	movq	1696(%rsp), %rcx        # 8-byte Reload
	movq	1752(%rsp), %r8         # 8-byte Reload
	movq	1760(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	1728(%rsp), %xmm0       # 8-byte Reload
	vmovsd	1656(%rsp), %xmm1       # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
	movq	1720(%rsp), %rdi        # 8-byte Reload
	movq	1704(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1904(%rsp), %rdx        # 8-byte Reload
	movq	1688(%rsp), %rcx        # 8-byte Reload
	movq	1752(%rsp), %r8         # 8-byte Reload
	movq	1760(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 1648(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
.Ltmp466:
	#DEBUG_VALUE: tqlrat:p <- [RSP+1648]
	#DEBUG_VALUE: tqlrat:i <- [RSP+8012]
	.loc	2 572 0                 # eispack.c:572:0
	movq	1776(%rsp), %rdi        # 8-byte Reload
	movq	1768(%rsp), %rsi        # 8-byte Reload
	movq	1736(%rsp), %rdx        # 8-byte Reload
	movq	1672(%rsp), %rcx        # 8-byte Reload
	movq	1664(%rsp), %r8         # 8-byte Reload
	movl	1684(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1904(%rsp), %rdi        # 8-byte Reload
	movq	1752(%rsp), %rsi        # 8-byte Reload
	movq	1752(%rsp), %rdx        # 8-byte Reload
	movq	1904(%rsp), %rcx        # 8-byte Reload
	movq	1744(%rsp), %r8         # 8-byte Reload
	movq	1752(%rsp), %r9         # 8-byte Reload
	movq	1760(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	7640(%rsp), %rax        # 8-byte Reload
	movl	8012(%rsp), %ebx        # 4-byte Reload
	movq	%rax, 1640(%rsp)        # 8-byte Spill
	movl	%ebx, 1636(%rsp)        # 4-byte Spill
.Ltmp467:
.LBB10_22:                              #   Parent Loop BB10_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	1636(%rsp), %eax        # 4-byte Reload
	movq	1640(%rsp), %rcx        # 8-byte Reload
	movabsq	$1, %rdx
	leaq	.L.str290, %rsi
	movabsq	$0, %rdi
	leaq	.L.str781, %r8
	movabsq	$2, %r9
	leaq	.L.str464, %r10
	movabsq	$3, %r11
	leaq	.L.str463, %rbx
	movabsq	$574, %r14              # imm = 0x23E
	leaq	.L.str62136, %r15
	leaq	.L.str457, %r12
	leaq	.L.str462, %r13
	movl	$0, %ebp
	movl	%eax, 1632(%rsp)        # 4-byte Spill
	movl	$1, %eax
	movq	%rcx, 1624(%rsp)        # 8-byte Spill
	movabsq	$19134, %rcx            # imm = 0x4ABE
	movq	%rcx, 1616(%rsp)        # 8-byte Spill
	movabsq	$32, %rcx
	movq	%rcx, 1608(%rsp)        # 8-byte Spill
	leaq	.L.str278, %rcx
	movq	%rcx, 1600(%rsp)        # 8-byte Spill
	leaq	.L.str1488, %rcx
	movq	%rcx, 1592(%rsp)        # 8-byte Spill
	movabsq	$46, %rcx
	movq	%rcx, 1584(%rsp)        # 8-byte Spill
	movabsq	$64, %rcx
	movq	%rcx, 1576(%rsp)        # 8-byte Spill
	leaq	.L.str458, %rcx
	movq	%rcx, 1568(%rsp)        # 8-byte Spill
	movabsq	$33, %rcx
	movq	%rcx, 1560(%rsp)        # 8-byte Spill
	leaq	.L.str461, %rcx
	movq	%rcx, 1552(%rsp)        # 8-byte Spill
	leaq	.L.str414, %rcx
	movq	%rcx, 1544(%rsp)        # 8-byte Spill
	leaq	.L.str395, %rcx
	movq	%rcx, 1536(%rsp)        # 8-byte Spill
	leaq	.L.str315, %rcx
	movq	%rcx, 1528(%rsp)        # 8-byte Spill
	leaq	.L.str460, %rcx
	movq	%rcx, 1520(%rsp)        # 8-byte Spill
	movabsq	$-1, %rcx
	movq	%rcx, 1512(%rsp)        # 8-byte Spill
	movabsq	$48, %rcx
	movq	%rcx, 1504(%rsp)        # 8-byte Spill
	leaq	.L.str384, %rcx
	movq	%rcx, 1496(%rsp)        # 8-byte Spill
	leaq	.L.str459, %rcx
	.loc	2 574 0                 # eispack.c:574:0
.Ltmp468:
	movq	%rcx, 1488(%rsp)        # 8-byte Spill
	movq	1512(%rsp), %rcx        # 8-byte Reload
	movq	%rdi, 1480(%rsp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	%rsi, 1472(%rsp)        # 8-byte Spill
	movq	%r15, %rsi
	movq	%rdx, 1464(%rsp)        # 8-byte Spill
	movq	%r12, %rdx
	movq	1568(%rsp), %rcx        # 8-byte Reload
	movq	%r8, 1456(%rsp)         # 8-byte Spill
	movq	1504(%rsp), %r8         # 8-byte Reload
	movq	%r9, 1448(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movl	%eax, 1444(%rsp)        # 4-byte Spill
	movq	%r15, 1432(%rsp)        # 8-byte Spill
	movq	%r12, 1424(%rsp)        # 8-byte Spill
	movq	%r13, 1416(%rsp)        # 8-byte Spill
	movl	%ebp, 1412(%rsp)        # 4-byte Spill
	movq	%r14, 1400(%rsp)        # 8-byte Spill
	movq	%rbx, 1392(%rsp)        # 8-byte Spill
	movq	%r10, 1384(%rsp)        # 8-byte Spill
	movq	%r11, 1376(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	1448(%rsp), %rdi        # 8-byte Reload
	movq	1576(%rsp), %rsi        # 8-byte Reload
	movq	1480(%rsp), %rdx        # 8-byte Reload
	movq	1464(%rsp), %rcx        # 8-byte Reload
	movq	1488(%rsp), %r8         # 8-byte Reload
	movq	1464(%rsp), %r9         # 8-byte Reload
	movq	1520(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1464(%rsp), %rdi        # 8-byte Reload
	movq	1576(%rsp), %rsi        # 8-byte Reload
	movq	1480(%rsp), %rdx        # 8-byte Reload
	movq	1464(%rsp), %rcx        # 8-byte Reload
	movq	1496(%rsp), %r8         # 8-byte Reload
	movq	1464(%rsp), %r9         # 8-byte Reload
	movq	1544(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1616(%rsp), %rdi        # 8-byte Reload
	movq	1576(%rsp), %rsi        # 8-byte Reload
	movq	1624(%rsp), %rdx        # 8-byte Reload
	movq	1464(%rsp), %rcx        # 8-byte Reload
	movq	1568(%rsp), %r8         # 8-byte Reload
	movq	1480(%rsp), %r9         # 8-byte Reload
	movq	1544(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1512(%rsp), %rdi        # 8-byte Reload
	movq	1432(%rsp), %rsi        # 8-byte Reload
	movq	1424(%rsp), %rdx        # 8-byte Reload
	movq	1552(%rsp), %rcx        # 8-byte Reload
	movq	1504(%rsp), %r8         # 8-byte Reload
	movl	1412(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1448(%rsp), %rdi        # 8-byte Reload
	movq	1608(%rsp), %rsi        # 8-byte Reload
	movq	1480(%rsp), %rdx        # 8-byte Reload
	movq	1464(%rsp), %rcx        # 8-byte Reload
	movq	1528(%rsp), %r8         # 8-byte Reload
	movq	1464(%rsp), %r9         # 8-byte Reload
	movq	1520(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1464(%rsp), %rdi        # 8-byte Reload
	movq	1608(%rsp), %rsi        # 8-byte Reload
	movq	1480(%rsp), %rdx        # 8-byte Reload
	movq	1464(%rsp), %rcx        # 8-byte Reload
	movq	1536(%rsp), %r8         # 8-byte Reload
	movq	1464(%rsp), %r9         # 8-byte Reload
	movq	1544(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	1632(%rsp), %eax        # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	1616(%rsp), %rdi        # 8-byte Reload
	movq	1608(%rsp), %rsi        # 8-byte Reload
	movq	1464(%rsp), %rcx        # 8-byte Reload
	movq	1552(%rsp), %r8         # 8-byte Reload
	movq	1480(%rsp), %r9         # 8-byte Reload
	movq	1544(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1400(%rsp), %rdi        # 8-byte Reload
	movq	1432(%rsp), %rsi        # 8-byte Reload
	movq	1424(%rsp), %rdx        # 8-byte Reload
	movq	1600(%rsp), %rcx        # 8-byte Reload
	movq	1560(%rsp), %r8         # 8-byte Reload
	movl	1412(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1464(%rsp), %rdi        # 8-byte Reload
	movq	1576(%rsp), %rsi        # 8-byte Reload
	movq	1624(%rsp), %rdx        # 8-byte Reload
	movq	1464(%rsp), %rcx        # 8-byte Reload
	movq	1568(%rsp), %r8         # 8-byte Reload
	movq	1480(%rsp), %r9         # 8-byte Reload
	movq	1456(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1624(%rsp), %rcx        # 8-byte Reload
	movl	%ecx, %eax
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	1616(%rsp), %rdi        # 8-byte Reload
	movq	1608(%rsp), %rsi        # 8-byte Reload
	movq	1464(%rsp), %rcx        # 8-byte Reload
	movq	1600(%rsp), %r8         # 8-byte Reload
	movq	1480(%rsp), %r9         # 8-byte Reload
	movq	1456(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, 1372(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	1400(%rsp), %rdi        # 8-byte Reload
	movq	1432(%rsp), %rsi        # 8-byte Reload
	movq	1424(%rsp), %rdx        # 8-byte Reload
	movq	1472(%rsp), %rcx        # 8-byte Reload
	movq	1584(%rsp), %r8         # 8-byte Reload
	movl	1412(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1448(%rsp), %rdi        # 8-byte Reload
	movq	1608(%rsp), %rsi        # 8-byte Reload
	movq	1480(%rsp), %rdx        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1592(%rsp), %r8         # 8-byte Reload
	movq	1480(%rsp), %r9         # 8-byte Reload
	movq	1456(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	1372(%rsp), %eax        # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	1464(%rsp), %rdi        # 8-byte Reload
	movq	1608(%rsp), %rsi        # 8-byte Reload
	movq	1464(%rsp), %rcx        # 8-byte Reload
	movq	1600(%rsp), %r8         # 8-byte Reload
	movq	1480(%rsp), %r9         # 8-byte Reload
	movq	1456(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	1372(%rsp), %eax        # 4-byte Reload
	cmpl	$0, %eax
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ebp
	movl	%ebp, %edx
	movq	1616(%rsp), %rdi        # 8-byte Reload
	movq	1464(%rsp), %rsi        # 8-byte Reload
	movq	1464(%rsp), %rcx        # 8-byte Reload
	movq	1472(%rsp), %r8         # 8-byte Reload
	movq	1480(%rsp), %r9         # 8-byte Reload
	movq	1456(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 1371(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	1400(%rsp), %rdi        # 8-byte Reload
	movq	1432(%rsp), %rsi        # 8-byte Reload
	movq	1424(%rsp), %rdx        # 8-byte Reload
	movq	1416(%rsp), %rcx        # 8-byte Reload
	movq	1448(%rsp), %r8         # 8-byte Reload
	movl	1412(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1376(%rsp), %rdi        # 8-byte Reload
	movq	1480(%rsp), %rsi        # 8-byte Reload
	movq	1480(%rsp), %rdx        # 8-byte Reload
	movq	1464(%rsp), %rcx        # 8-byte Reload
	movq	1392(%rsp), %r8         # 8-byte Reload
	movq	1480(%rsp), %r9         # 8-byte Reload
	movq	1456(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1448(%rsp), %rdi        # 8-byte Reload
	movq	1480(%rsp), %rsi        # 8-byte Reload
	movq	1480(%rsp), %rdx        # 8-byte Reload
	movq	1464(%rsp), %rcx        # 8-byte Reload
	movq	1384(%rsp), %r8         # 8-byte Reload
	movq	1480(%rsp), %r9         # 8-byte Reload
	movq	1456(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	1371(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	1464(%rsp), %rdi        # 8-byte Reload
	movq	1464(%rsp), %rsi        # 8-byte Reload
	movq	1464(%rsp), %rcx        # 8-byte Reload
	movq	1472(%rsp), %r8         # 8-byte Reload
	movq	1480(%rsp), %r9         # 8-byte Reload
	movq	1456(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	1371(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB10_23
	jmp	.LBB10_24
.LBB10_23:                              #   in Loop: Header=BB10_5 Depth=1
	movabsq	$1, %rax
	movabsq	$0, %rcx
	leaq	.L.str386, %r8
	leaq	.L.str781, %rdx
	movabsq	$577, %rdi              # imm = 0x241
	leaq	.L.str62136, %rsi
	leaq	.L.str463, %r9
	leaq	.L.str466, %r10
	movabsq	$2, %r11
	movl	$0, %ebx
	movl	$1, %ebp
	movabsq	$64, %r14
	leaq	.L.str284, %r15
	leaq	.L.str297, %r12
	movabsq	$576, %r13              # imm = 0x240
	movq	%rax, 1360(%rsp)        # 8-byte Spill
	leaq	.L.str465, %rax
	movq	%rax, 1352(%rsp)        # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, 1344(%rsp)        # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 1336(%rsp)        # 8-byte Spill
	leaq	.L.str82, %rax
	movq	%rax, 1328(%rsp)        # 8-byte Spill
	leaq	.L.str292, %rax
	movq	%rax, 1320(%rsp)        # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 1312(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 1304(%rsp)        # 8-byte Spill
	leaq	.L.str461, %rax
	movq	%rax, 1296(%rsp)        # 8-byte Spill
	movabsq	$35, %rax
	.loc	2 576 0                 # eispack.c:576:0
.Ltmp469:
	movq	%rdi, 1288(%rsp)        # 8-byte Spill
	movq	%r13, %rdi
	movq	%rsi, 1280(%rsp)        # 8-byte Spill
	movq	%rdx, 1272(%rsp)        # 8-byte Spill
	movq	%r9, %rdx
	movq	%rax, 1264(%rsp)        # 8-byte Spill
	movq	1320(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 1256(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	1264(%rsp), %rax        # 8-byte Reload
	movq	%r8, 1248(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 1240(%rsp)         # 8-byte Spill
	movl	%ebx, %r9d
	movl	$1, (%rsp)
	movq	%r14, 1232(%rsp)        # 8-byte Spill
	movl	%ebp, 1228(%rsp)        # 4-byte Spill
	movq	%r15, 1216(%rsp)        # 8-byte Spill
	movq	%r13, 1208(%rsp)        # 8-byte Spill
	movq	%r12, 1200(%rsp)        # 8-byte Spill
	movl	%ebx, 1196(%rsp)        # 4-byte Spill
	movq	%r10, 1184(%rsp)        # 8-byte Spill
	movq	%r11, 1176(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movl	1632(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebx
	movl	%ebx, %edx
	movq	1360(%rsp), %rdi        # 8-byte Reload
	movq	1304(%rsp), %rsi        # 8-byte Reload
	movq	1360(%rsp), %rcx        # 8-byte Reload
	movq	1296(%rsp), %r8         # 8-byte Reload
	movq	1256(%rsp), %r9         # 8-byte Reload
	movq	1272(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	1632(%rsp), %ebx        # 4-byte Reload
	movslq	%ebx, %rax
	movq	1336(%rsp), %rdi        # 8-byte Reload
	movq	1232(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	1360(%rsp), %rcx        # 8-byte Reload
	movq	1320(%rsp), %r8         # 8-byte Reload
	movq	1256(%rsp), %r9         # 8-byte Reload
	movq	1272(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 1168(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	1208(%rsp), %rdi        # 8-byte Reload
	movq	1280(%rsp), %rsi        # 8-byte Reload
	movq	1240(%rsp), %rdx        # 8-byte Reload
	movq	1200(%rsp), %rcx        # 8-byte Reload
	movq	1312(%rsp), %r8         # 8-byte Reload
	movl	1196(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1176(%rsp), %rdi        # 8-byte Reload
	movq	1232(%rsp), %rsi        # 8-byte Reload
	movq	1168(%rsp), %rdx        # 8-byte Reload
	movq	1360(%rsp), %rcx        # 8-byte Reload
	movq	1320(%rsp), %r8         # 8-byte Reload
	movq	1256(%rsp), %r9         # 8-byte Reload
	movq	1272(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1360(%rsp), %rdi        # 8-byte Reload
	movq	1232(%rsp), %rsi        # 8-byte Reload
	movq	9216(%rsp), %rdx        # 8-byte Reload
	movq	1360(%rsp), %rcx        # 8-byte Reload
	movq	1328(%rsp), %r8         # 8-byte Reload
	movq	1256(%rsp), %r9         # 8-byte Reload
	movq	1272(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1168(%rsp), %rax        # 8-byte Reload
	shlq	$3, %rax
	movq	9216(%rsp), %rcx        # 8-byte Reload
	addq	%rax, %rcx
	movq	1336(%rsp), %rdi        # 8-byte Reload
	movq	1232(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	1360(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 1160(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	1200(%rsp), %r8         # 8-byte Reload
	movq	1256(%rsp), %r9         # 8-byte Reload
	movq	1272(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1208(%rsp), %rdi        # 8-byte Reload
	movq	1280(%rsp), %rsi        # 8-byte Reload
	movq	1240(%rsp), %rdx        # 8-byte Reload
	movq	1352(%rsp), %rcx        # 8-byte Reload
	movq	1344(%rsp), %r8         # 8-byte Reload
	movl	1196(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1176(%rsp), %rdi        # 8-byte Reload
	movq	1232(%rsp), %rsi        # 8-byte Reload
	movq	1160(%rsp), %rdx        # 8-byte Reload
	movq	1360(%rsp), %rcx        # 8-byte Reload
	movq	1200(%rsp), %r8         # 8-byte Reload
	movq	1256(%rsp), %r9         # 8-byte Reload
	movq	1272(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1360(%rsp), %rdi        # 8-byte Reload
	movq	1232(%rsp), %rsi        # 8-byte Reload
	vmovsd	1648(%rsp), %xmm0       # 8-byte Reload
	movq	1360(%rsp), %rdx        # 8-byte Reload
	movq	1216(%rsp), %rcx        # 8-byte Reload
	movq	1256(%rsp), %r8         # 8-byte Reload
	movq	1272(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	9216(%rsp), %rax        # 8-byte Reload
	movq	1168(%rsp), %rcx        # 8-byte Reload
	vmovsd	1648(%rsp), %xmm0       # 8-byte Reload
	vmovsd	%xmm0, (%rax,%rcx,8)
	.loc	2 577 0                 # eispack.c:577:0
	movq	1288(%rsp), %rdi        # 8-byte Reload
	movq	1280(%rsp), %rsi        # 8-byte Reload
	movq	1240(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1176(%rsp), %r8         # 8-byte Reload
	movl	1196(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1360(%rsp), %rdi        # 8-byte Reload
	movq	1256(%rsp), %rsi        # 8-byte Reload
	movq	1256(%rsp), %rdx        # 8-byte Reload
	movq	1360(%rsp), %rcx        # 8-byte Reload
	movq	1248(%rsp), %r8         # 8-byte Reload
	movq	1256(%rsp), %r9         # 8-byte Reload
	movq	1272(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	jmp	.LBB10_27
.Ltmp470:
.LBB10_24:                              #   in Loop: Header=BB10_22 Depth=2
	movabsq	$1, %rax
	leaq	.L.str301, %rcx
	movabsq	$0, %rdx
	leaq	.L.str781, %rsi
	movabsq	$2, %rdi
	leaq	.L.str468, %r8
	movabsq	$3, %r9
	leaq	.L.str460, %r10
	movabsq	$579, %r11              # imm = 0x243
	leaq	.L.str62136, %rbx
	leaq	.L.str464, %r14
	leaq	.L.str467, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 1152(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 1144(%rsp)        # 8-byte Spill
	leaq	.L.str302, %rax
	movq	%rax, 1136(%rsp)        # 8-byte Spill
	leaq	.L.str82, %rax
	movq	%rax, 1128(%rsp)        # 8-byte Spill
	leaq	.L.str458, %rax
	movq	%rax, 1120(%rsp)        # 8-byte Spill
	movabsq	$584, %rax              # imm = 0x248
	movq	%rax, 1112(%rsp)        # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 1104(%rsp)        # 8-byte Spill
	leaq	.L.str300, %rax
	movq	%rax, 1096(%rsp)        # 8-byte Spill
	leaq	.L.str284, %rax
	movq	%rax, 1088(%rsp)        # 8-byte Spill
	movabsq	$47, %rax
	movq	%rax, 1080(%rsp)        # 8-byte Spill
	leaq	.L.str299, %rax
	movq	%rax, 1072(%rsp)        # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, 1064(%rsp)        # 8-byte Spill
	leaq	.L.str459, %rax
	movq	%rax, 1056(%rsp)        # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 1048(%rsp)        # 8-byte Spill
	leaq	.L.str1488, %rax
	movq	%rax, 1040(%rsp)        # 8-byte Spill
	movabsq	$572, %rax              # imm = 0x23C
	movq	%rax, 1032(%rsp)        # 8-byte Spill
	movabsq	$8, %rax
	.loc	2 572 0                 # eispack.c:572:0
	movq	%rax, 1024(%rsp)        # 8-byte Spill
	movq	1032(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 1016(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 1008(%rsp)        # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, 1000(%rsp)        # 8-byte Spill
	movq	%r14, %rdx
	movq	1056(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 992(%rsp)         # 8-byte Spill
	movq	%rax, %rcx
	movq	1024(%rsp), %rax        # 8-byte Reload
	movq	%r8, 984(%rsp)          # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 976(%rsp)          # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r15, 968(%rsp)         # 8-byte Spill
	movl	%ebp, 964(%rsp)         # 4-byte Spill
	movl	%r12d, 960(%rsp)        # 4-byte Spill
	movq	%r13, 952(%rsp)         # 8-byte Spill
	movq	%r14, 944(%rsp)         # 8-byte Spill
	movq	%rbx, 936(%rsp)         # 8-byte Spill
	movq	%r10, 928(%rsp)         # 8-byte Spill
	movq	%r11, 920(%rsp)         # 8-byte Spill
	callq	trace_logger_log0
	movq	1016(%rsp), %rdi        # 8-byte Reload
	movq	1144(%rsp), %rsi        # 8-byte Reload
	movq	1048(%rsp), %rdx        # 8-byte Reload
	movq	1000(%rsp), %rcx        # 8-byte Reload
	movq	1040(%rsp), %r8         # 8-byte Reload
	movq	1000(%rsp), %r9         # 8-byte Reload
	movq	1008(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1152(%rsp), %rdi        # 8-byte Reload
	movq	1144(%rsp), %rsi        # 8-byte Reload
	movq	1624(%rsp), %rdx        # 8-byte Reload
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1000(%rsp), %r9         # 8-byte Reload
	movq	1008(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1624(%rsp), %rax        # 8-byte Reload
	addq	$-1, %rax
	.loc	2 579 0                 # eispack.c:579:0
.Ltmp471:
	movq	952(%rsp), %rdi         # 8-byte Reload
	movq	1144(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1056(%rsp), %r8         # 8-byte Reload
	movq	1000(%rsp), %r9         # 8-byte Reload
	movq	1008(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 912(%rsp)         # 8-byte Spill
	callq	trace_logger_log_int
	movq	920(%rsp), %rdi         # 8-byte Reload
	movq	936(%rsp), %rsi         # 8-byte Reload
	movq	944(%rsp), %rdx         # 8-byte Reload
	movq	1072(%rsp), %rcx        # 8-byte Reload
	movq	1104(%rsp), %r8         # 8-byte Reload
	movl	964(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1016(%rsp), %rdi        # 8-byte Reload
	movq	1144(%rsp), %rsi        # 8-byte Reload
	movq	912(%rsp), %rdx         # 8-byte Reload
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1056(%rsp), %r8         # 8-byte Reload
	movq	1000(%rsp), %r9         # 8-byte Reload
	movq	1008(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1152(%rsp), %rdi        # 8-byte Reload
	movq	1144(%rsp), %rsi        # 8-byte Reload
	movq	9216(%rsp), %rdx        # 8-byte Reload
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1128(%rsp), %r8         # 8-byte Reload
	movq	1000(%rsp), %r9         # 8-byte Reload
	movq	1008(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	912(%rsp), %rax         # 8-byte Reload
	shlq	$3, %rax
	movq	9216(%rsp), %rcx        # 8-byte Reload
	addq	%rax, %rcx
	movq	952(%rsp), %rdi         # 8-byte Reload
	movq	1144(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	1152(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 904(%rsp)         # 8-byte Spill
	movq	%rax, %rcx
	movq	1072(%rsp), %r8         # 8-byte Reload
	movq	1000(%rsp), %r9         # 8-byte Reload
	movq	1008(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	920(%rsp), %rdi         # 8-byte Reload
	movq	936(%rsp), %rsi         # 8-byte Reload
	movq	944(%rsp), %rdx         # 8-byte Reload
	movq	1096(%rsp), %rcx        # 8-byte Reload
	movq	1064(%rsp), %r8         # 8-byte Reload
	movl	964(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1152(%rsp), %rdi        # 8-byte Reload
	movq	1144(%rsp), %rsi        # 8-byte Reload
	movq	904(%rsp), %rdx         # 8-byte Reload
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1072(%rsp), %r8         # 8-byte Reload
	movq	1000(%rsp), %r9         # 8-byte Reload
	movq	1008(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	9216(%rsp), %rax        # 8-byte Reload
	movq	1624(%rsp), %rcx        # 8-byte Reload
	vmovsd	-8(%rax,%rcx,8), %xmm0
	movq	952(%rsp), %rdi         # 8-byte Reload
	movq	1144(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 896(%rsp)        # 8-byte Spill
	movq	1152(%rsp), %rdx        # 8-byte Reload
	movq	1096(%rsp), %rcx        # 8-byte Reload
	movq	1000(%rsp), %r8         # 8-byte Reload
	movq	1008(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	920(%rsp), %rdi         # 8-byte Reload
	movq	936(%rsp), %rsi         # 8-byte Reload
	movq	944(%rsp), %rdx         # 8-byte Reload
	movq	992(%rsp), %rcx         # 8-byte Reload
	movq	1080(%rsp), %r8         # 8-byte Reload
	movl	964(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1016(%rsp), %rdi        # 8-byte Reload
	movq	1144(%rsp), %rsi        # 8-byte Reload
	vmovsd	1648(%rsp), %xmm0       # 8-byte Reload
	movq	1152(%rsp), %rdx        # 8-byte Reload
	movq	1088(%rsp), %rcx        # 8-byte Reload
	movq	1000(%rsp), %r8         # 8-byte Reload
	movq	1008(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1152(%rsp), %rdi        # 8-byte Reload
	movq	1144(%rsp), %rsi        # 8-byte Reload
	vmovsd	896(%rsp), %xmm0        # 8-byte Reload
	movq	1152(%rsp), %rdx        # 8-byte Reload
	movq	1096(%rsp), %rcx        # 8-byte Reload
	movq	1000(%rsp), %r8         # 8-byte Reload
	movq	1008(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	1648(%rsp), %xmm0       # 8-byte Reload
	vmovsd	896(%rsp), %xmm1        # 8-byte Reload
	vucomisd	%xmm1, %xmm0
	setb	%al
.Ltmp472:
	.loc	2 584 0                 # eispack.c:584:0
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ebp
	movl	%ebp, %edx
	movq	952(%rsp), %rdi         # 8-byte Reload
	movq	1152(%rsp), %rsi        # 8-byte Reload
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	992(%rsp), %r8          # 8-byte Reload
	movq	1000(%rsp), %r9         # 8-byte Reload
	movq	1008(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 895(%rsp)          # 1-byte Spill
	callq	trace_logger_log_int
	movq	1112(%rsp), %rdi        # 8-byte Reload
	movq	936(%rsp), %rsi         # 8-byte Reload
	movq	944(%rsp), %rdx         # 8-byte Reload
	movq	1136(%rsp), %rcx        # 8-byte Reload
	movq	1104(%rsp), %r8         # 8-byte Reload
	movl	964(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1016(%rsp), %rdi        # 8-byte Reload
	movq	1144(%rsp), %rsi        # 8-byte Reload
	movq	1624(%rsp), %rdx        # 8-byte Reload
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1000(%rsp), %r9         # 8-byte Reload
	movq	1008(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1152(%rsp), %rdi        # 8-byte Reload
	movq	1144(%rsp), %rsi        # 8-byte Reload
	movq	9216(%rsp), %rdx        # 8-byte Reload
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1128(%rsp), %r8         # 8-byte Reload
	movq	1000(%rsp), %r9         # 8-byte Reload
	movq	1008(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1624(%rsp), %rcx        # 8-byte Reload
	shlq	$3, %rcx
	movq	9216(%rsp), %rdx        # 8-byte Reload
	addq	%rcx, %rdx
	.loc	2 579 0                 # eispack.c:579:0
.Ltmp473:
	movq	952(%rsp), %rdi         # 8-byte Reload
	movq	1144(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 880(%rsp)         # 8-byte Spill
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1136(%rsp), %r8         # 8-byte Reload
	movq	1000(%rsp), %r9         # 8-byte Reload
	movq	1008(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	920(%rsp), %rdi         # 8-byte Reload
	movq	936(%rsp), %rsi         # 8-byte Reload
	movq	944(%rsp), %rdx         # 8-byte Reload
	movq	968(%rsp), %rcx         # 8-byte Reload
	movq	1016(%rsp), %r8         # 8-byte Reload
	movl	964(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	976(%rsp), %rdi         # 8-byte Reload
	movq	1000(%rsp), %rsi        # 8-byte Reload
	movq	1000(%rsp), %rdx        # 8-byte Reload
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	928(%rsp), %r8          # 8-byte Reload
	movq	1000(%rsp), %r9         # 8-byte Reload
	movq	1008(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1016(%rsp), %rdi        # 8-byte Reload
	movq	1000(%rsp), %rsi        # 8-byte Reload
	movq	1000(%rsp), %rdx        # 8-byte Reload
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	984(%rsp), %r8          # 8-byte Reload
	movq	1000(%rsp), %r9         # 8-byte Reload
	movq	1008(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	895(%rsp), %al          # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	1152(%rsp), %rdi        # 8-byte Reload
	movq	1152(%rsp), %rsi        # 8-byte Reload
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	992(%rsp), %r8          # 8-byte Reload
	movq	1000(%rsp), %r9         # 8-byte Reload
	movq	1008(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	895(%rsp), %al          # 1-byte Reload
	testb	$1, %al
	jne	.LBB10_26
# BB#25:                                #   in Loop: Header=BB10_5 Depth=1
	movabsq	$1, %rax
	movabsq	$0, %rcx
	leaq	.L.str386, %r8
	leaq	.L.str781, %rdx
	movabsq	$582, %rdi              # imm = 0x246
	leaq	.L.str62136, %rsi
	leaq	.L.str468, %r9
	leaq	.L.str470, %r10
	movabsq	$2, %r11
	movl	$0, %ebx
	movl	$1, %ebp
	movabsq	$64, %r14
	leaq	.L.str284, %r15
	leaq	.L.str302, %r12
	movabsq	$581, %r13              # imm = 0x245
	movq	%rax, 872(%rsp)         # 8-byte Spill
	leaq	.L.str469, %rax
	movq	%rax, 864(%rsp)         # 8-byte Spill
	movabsq	$28, %rax
	.loc	2 581 0                 # eispack.c:581:0
.Ltmp474:
	movq	%rdi, 856(%rsp)         # 8-byte Spill
	movq	%r13, %rdi
	movq	%rsi, 848(%rsp)         # 8-byte Spill
	movq	%rdx, 840(%rsp)         # 8-byte Spill
	movq	%r9, %rdx
	movq	864(%rsp), %r13         # 8-byte Reload
	movq	%rcx, 832(%rsp)         # 8-byte Spill
	movq	%r13, %rcx
	movq	%r8, 824(%rsp)          # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 816(%rsp)          # 8-byte Spill
	movl	%ebx, %r9d
	movl	$1, (%rsp)
	movl	%ebp, 812(%rsp)         # 4-byte Spill
	movl	%ebx, 808(%rsp)         # 4-byte Spill
	movq	%r14, 800(%rsp)         # 8-byte Spill
	movq	%r12, 792(%rsp)         # 8-byte Spill
	movq	%r15, 784(%rsp)         # 8-byte Spill
	movq	%r11, 776(%rsp)         # 8-byte Spill
	movq	%r10, 768(%rsp)         # 8-byte Spill
	callq	trace_logger_log0
	movq	776(%rsp), %rdi         # 8-byte Reload
	movq	800(%rsp), %rsi         # 8-byte Reload
	movq	880(%rsp), %rdx         # 8-byte Reload
	movq	872(%rsp), %rcx         # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	832(%rsp), %r9          # 8-byte Reload
	movq	840(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	872(%rsp), %rdi         # 8-byte Reload
	movq	800(%rsp), %rsi         # 8-byte Reload
	vmovsd	1648(%rsp), %xmm0       # 8-byte Reload
	movq	872(%rsp), %rdx         # 8-byte Reload
	movq	784(%rsp), %rcx         # 8-byte Reload
	movq	832(%rsp), %r8          # 8-byte Reload
	movq	840(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	880(%rsp), %rax         # 8-byte Reload
	vmovsd	1648(%rsp), %xmm0       # 8-byte Reload
	vmovsd	%xmm0, (%rax)
	.loc	2 582 0                 # eispack.c:582:0
	movq	856(%rsp), %rdi         # 8-byte Reload
	movq	848(%rsp), %rsi         # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	768(%rsp), %rcx         # 8-byte Reload
	movq	776(%rsp), %r8          # 8-byte Reload
	movl	808(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	872(%rsp), %rdi         # 8-byte Reload
	movq	832(%rsp), %rsi         # 8-byte Reload
	movq	832(%rsp), %rdx         # 8-byte Reload
	movq	872(%rsp), %rcx         # 8-byte Reload
	movq	824(%rsp), %r8          # 8-byte Reload
	movq	832(%rsp), %r9          # 8-byte Reload
	movq	840(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	jmp	.LBB10_27
.Ltmp475:
.LBB10_26:                              #   in Loop: Header=BB10_22 Depth=2
	movabsq	$1, %rax
	leaq	.L.str317, %rcx
	movabsq	$0, %rdx
	leaq	.L.str781, %rsi
	movabsq	$2, %rdi
	leaq	.L.str386, %r8
	movabsq	$3, %r9
	leaq	.L.str457, %r10
	movabsq	$572, %r11              # imm = 0x23C
	leaq	.L.str62136, %rbx
	leaq	.L.str460, %r14
	leaq	.L.str472, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 760(%rsp)         # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 752(%rsp)         # 8-byte Spill
	leaq	.L.str316, %rax
	movq	%rax, 744(%rsp)         # 8-byte Spill
	leaq	.L.str1488, %rax
	movq	%rax, 736(%rsp)         # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 728(%rsp)         # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 720(%rsp)         # 8-byte Spill
	leaq	.L.str458, %rax
	movq	%rax, 712(%rsp)         # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, 704(%rsp)         # 8-byte Spill
	leaq	.L.str300, %rax
	movq	%rax, 696(%rsp)         # 8-byte Spill
	leaq	.L.str302, %rax
	movq	%rax, 688(%rsp)         # 8-byte Spill
	movabsq	$584, %rax              # imm = 0x248
	movq	%rax, 680(%rsp)         # 8-byte Spill
	leaq	.L.str471, %rax
	movq	%rax, 672(%rsp)         # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, 664(%rsp)         # 8-byte Spill
	leaq	.L.str315, %rax
	movq	%rax, 656(%rsp)         # 8-byte Spill
	leaq	.L.str461, %rax
	movq	%rax, 648(%rsp)         # 8-byte Spill
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
	movq	%rax, 640(%rsp)         # 8-byte Spill
	movabsq	$579, %rax              # imm = 0x243
	movq	%rax, 632(%rsp)         # 8-byte Spill
	movabsq	$8, %rax
	.loc	2 579 0                 # eispack.c:579:0
	movq	%rax, 624(%rsp)         # 8-byte Spill
	movq	632(%rsp), %rax         # 8-byte Reload
	movq	%rdi, 616(%rsp)         # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 608(%rsp)         # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, 600(%rsp)         # 8-byte Spill
	movq	%r14, %rdx
	movq	656(%rsp), %rax         # 8-byte Reload
	movq	%rcx, 592(%rsp)         # 8-byte Spill
	movq	%rax, %rcx
	movq	624(%rsp), %rax         # 8-byte Reload
	movq	%r8, 584(%rsp)          # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 576(%rsp)          # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r15, 568(%rsp)         # 8-byte Spill
	movl	%ebp, 564(%rsp)         # 4-byte Spill
	movl	%r12d, 560(%rsp)        # 4-byte Spill
	movq	%r13, 552(%rsp)         # 8-byte Spill
	movq	%r14, 544(%rsp)         # 8-byte Spill
	movq	%rbx, 536(%rsp)         # 8-byte Spill
	movq	%r10, 528(%rsp)         # 8-byte Spill
	movq	%r11, 520(%rsp)         # 8-byte Spill
	callq	trace_logger_log0
	movq	616(%rsp), %rdi         # 8-byte Reload
	movq	752(%rsp), %rsi         # 8-byte Reload
	movq	640(%rsp), %rdx         # 8-byte Reload
	movq	600(%rsp), %rcx         # 8-byte Reload
	movq	736(%rsp), %r8          # 8-byte Reload
	movq	600(%rsp), %r9          # 8-byte Reload
	movq	608(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	1632(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	760(%rsp), %rdi         # 8-byte Reload
	movq	752(%rsp), %rsi         # 8-byte Reload
	movq	760(%rsp), %rcx         # 8-byte Reload
	movq	648(%rsp), %r8          # 8-byte Reload
	movq	600(%rsp), %r9          # 8-byte Reload
	movq	608(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	1632(%rsp), %ebp        # 4-byte Reload
	addl	$4294967295, %ebp       # imm = 0xFFFFFFFF
.Ltmp476:
	.loc	2 584 0                 # eispack.c:584:0
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	552(%rsp), %rdi         # 8-byte Reload
	movq	752(%rsp), %rsi         # 8-byte Reload
	movq	760(%rsp), %rcx         # 8-byte Reload
	movq	656(%rsp), %r8          # 8-byte Reload
	movq	600(%rsp), %r9          # 8-byte Reload
	movq	608(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%ebp, 516(%rsp)         # 4-byte Spill
	callq	trace_logger_log_int
	movq	680(%rsp), %rdi         # 8-byte Reload
	movq	536(%rsp), %rsi         # 8-byte Reload
	movq	544(%rsp), %rdx         # 8-byte Reload
	movq	672(%rsp), %rcx         # 8-byte Reload
	movq	664(%rsp), %r8          # 8-byte Reload
	movl	564(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	616(%rsp), %rdi         # 8-byte Reload
	movq	720(%rsp), %rsi         # 8-byte Reload
	movq	880(%rsp), %rdx         # 8-byte Reload
	movq	760(%rsp), %rcx         # 8-byte Reload
	movq	688(%rsp), %r8          # 8-byte Reload
	movq	600(%rsp), %r9          # 8-byte Reload
	movq	608(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	760(%rsp), %rdi         # 8-byte Reload
	movq	720(%rsp), %rsi         # 8-byte Reload
	vmovsd	896(%rsp), %xmm0        # 8-byte Reload
	movq	760(%rsp), %rdx         # 8-byte Reload
	movq	696(%rsp), %rcx         # 8-byte Reload
	movq	600(%rsp), %r8          # 8-byte Reload
	movq	608(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	880(%rsp), %rax         # 8-byte Reload
	vmovsd	896(%rsp), %xmm0        # 8-byte Reload
	vmovsd	%xmm0, (%rax)
.Ltmp477:
	#DEBUG_VALUE: tqlrat:i <- [RSP+516]
	.loc	2 572 0                 # eispack.c:572:0
	movq	520(%rsp), %rdi         # 8-byte Reload
	movq	536(%rsp), %rsi         # 8-byte Reload
	movq	544(%rsp), %rdx         # 8-byte Reload
	movq	744(%rsp), %rcx         # 8-byte Reload
	movq	704(%rsp), %r8          # 8-byte Reload
	movl	564(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	760(%rsp), %rdi         # 8-byte Reload
	movq	720(%rsp), %rsi         # 8-byte Reload
	movq	1624(%rsp), %rdx        # 8-byte Reload
	movq	760(%rsp), %rcx         # 8-byte Reload
	movq	712(%rsp), %r8          # 8-byte Reload
	movq	600(%rsp), %r9          # 8-byte Reload
	movq	608(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1624(%rsp), %rax        # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	552(%rsp), %rdi         # 8-byte Reload
	movq	752(%rsp), %rsi         # 8-byte Reload
	movq	760(%rsp), %rcx         # 8-byte Reload
	movq	744(%rsp), %r8          # 8-byte Reload
	movq	600(%rsp), %r9          # 8-byte Reload
	movq	608(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 512(%rsp)         # 4-byte Spill
	callq	trace_logger_log_int
	movq	520(%rsp), %rdi         # 8-byte Reload
	movq	536(%rsp), %rsi         # 8-byte Reload
	movq	544(%rsp), %rdx         # 8-byte Reload
	movq	592(%rsp), %rcx         # 8-byte Reload
	movq	728(%rsp), %r8          # 8-byte Reload
	movl	564(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	616(%rsp), %rdi         # 8-byte Reload
	movq	752(%rsp), %rsi         # 8-byte Reload
	movq	600(%rsp), %rdx         # 8-byte Reload
	movq	600(%rsp), %rcx         # 8-byte Reload
	movq	736(%rsp), %r8          # 8-byte Reload
	movq	600(%rsp), %r9          # 8-byte Reload
	movq	608(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	512(%rsp), %ebp         # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	760(%rsp), %rdi         # 8-byte Reload
	movq	752(%rsp), %rsi         # 8-byte Reload
	movq	760(%rsp), %rcx         # 8-byte Reload
	movq	744(%rsp), %r8          # 8-byte Reload
	movq	600(%rsp), %r9          # 8-byte Reload
	movq	608(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	512(%rsp), %ebp         # 4-byte Reload
	cmpl	$0, %ebp
	setg	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %r12d
	movl	%r12d, %edx
	movq	552(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	760(%rsp), %rcx         # 8-byte Reload
	movq	592(%rsp), %r8          # 8-byte Reload
	movq	600(%rsp), %r9          # 8-byte Reload
	movq	608(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 511(%rsp)          # 1-byte Spill
	callq	trace_logger_log_int
	movq	520(%rsp), %rdi         # 8-byte Reload
	movq	536(%rsp), %rsi         # 8-byte Reload
	movq	544(%rsp), %rdx         # 8-byte Reload
	movq	568(%rsp), %rcx         # 8-byte Reload
	movq	616(%rsp), %r8          # 8-byte Reload
	movl	564(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	576(%rsp), %rdi         # 8-byte Reload
	movq	600(%rsp), %rsi         # 8-byte Reload
	movq	600(%rsp), %rdx         # 8-byte Reload
	movq	760(%rsp), %rcx         # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	600(%rsp), %r9          # 8-byte Reload
	movq	608(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	616(%rsp), %rdi         # 8-byte Reload
	movq	600(%rsp), %rsi         # 8-byte Reload
	movq	600(%rsp), %rdx         # 8-byte Reload
	movq	760(%rsp), %rcx         # 8-byte Reload
	movq	584(%rsp), %r8          # 8-byte Reload
	movq	600(%rsp), %r9          # 8-byte Reload
	movq	608(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	511(%rsp), %al          # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	760(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	760(%rsp), %rcx         # 8-byte Reload
	movq	592(%rsp), %r8          # 8-byte Reload
	movq	600(%rsp), %r9          # 8-byte Reload
	movq	608(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	511(%rsp), %al          # 1-byte Reload
	testb	$1, %al
	movq	912(%rsp), %rcx         # 8-byte Reload
	movl	516(%rsp), %ebp         # 4-byte Reload
	movq	%rcx, 1640(%rsp)        # 8-byte Spill
	movl	%ebp, 1636(%rsp)        # 4-byte Spill
	jne	.LBB10_22
.Ltmp478:
.LBB10_27:                              # %.loopexit17
                                        #   in Loop: Header=BB10_5 Depth=1
	movl	$0, %eax
	movabsq	$1, %rcx
	leaq	.L.str320, %rdx
	movabsq	$0, %rsi
	leaq	.L.str781, %rdi
	movabsq	$2, %r8
	leaq	.L.str371, %r9
	movabsq	$3, %r10
	leaq	.L.str383, %r11
	movabsq	$468, %rbx              # imm = 0x1D4
	leaq	.L.str62136, %r14
	leaq	.L.str386, %r15
	leaq	.L.str473, %r12
	movl	$1, %ebp
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rcx, 496(%rsp)         # 8-byte Spill
	movabsq	$32, %rcx
	movq	%rcx, 488(%rsp)         # 8-byte Spill
	leaq	.L.str388, %rcx
	movq	%rcx, 480(%rsp)         # 8-byte Spill
	leaq	.L.str387, %rcx
	movq	%rcx, 472(%rsp)         # 8-byte Spill
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	movq	%rcx, 464(%rsp)         # 8-byte Spill
	leaq	.L.str1488, %rcx
	movq	%rcx, 456(%rsp)         # 8-byte Spill
	movabsq	$8, %rcx
	movq	%rcx, 448(%rsp)         # 8-byte Spill
	movabsq	$64, %rcx
	movq	%rcx, 440(%rsp)         # 8-byte Spill
	leaq	.L.str390, %rcx
	movq	%rcx, 432(%rsp)         # 8-byte Spill
	leaq	.L.str389, %rcx
	movq	%rcx, 424(%rsp)         # 8-byte Spill
	leaq	.L.str319, %rcx
	movq	%rcx, 416(%rsp)         # 8-byte Spill
	leaq	.L.str51125, %rcx
	movq	%rcx, 408(%rsp)         # 8-byte Spill
	movabsq	$46, %rcx
	movq	%rcx, 400(%rsp)         # 8-byte Spill
	leaq	.L.str385, %rcx
	movq	%rcx, 392(%rsp)         # 8-byte Spill
	movabsq	$33, %rcx
	movq	%rcx, 384(%rsp)         # 8-byte Spill
	leaq	.L.str318, %rcx
	movq	%rcx, 376(%rsp)         # 8-byte Spill
	leaq	.L.str395, %rcx
	movq	%rcx, 368(%rsp)         # 8-byte Spill
	leaq	.L.str384, %rcx
	.loc	2 468 0                 # eispack.c:468:0
	movq	%rdi, 360(%rsp)         # 8-byte Spill
	movq	%rbx, %rdi
	movq	%rsi, 352(%rsp)         # 8-byte Spill
	movq	%r14, %rsi
	movq	%rdx, 344(%rsp)         # 8-byte Spill
	movq	%r15, %rdx
	movq	%rcx, 336(%rsp)         # 8-byte Spill
	movq	392(%rsp), %rcx         # 8-byte Reload
	movq	%r8, 328(%rsp)          # 8-byte Spill
	movq	448(%rsp), %r8          # 8-byte Reload
	movq	%r9, 320(%rsp)          # 8-byte Spill
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movl	%eax, 316(%rsp)         # 4-byte Spill
	movq	%r15, 304(%rsp)         # 8-byte Spill
	movq	%r12, 296(%rsp)         # 8-byte Spill
	movl	%ebp, 292(%rsp)         # 4-byte Spill
	movq	%r13, 280(%rsp)         # 8-byte Spill
	movq	%r14, 272(%rsp)         # 8-byte Spill
	movq	%rbx, 264(%rsp)         # 8-byte Spill
	movq	%r10, 256(%rsp)         # 8-byte Spill
	movq	%r11, 248(%rsp)         # 8-byte Spill
	callq	trace_logger_log0
	movq	328(%rsp), %rdi         # 8-byte Reload
	movq	440(%rsp), %rsi         # 8-byte Reload
	movq	496(%rsp), %rdx         # 8-byte Reload
	movq	352(%rsp), %rcx         # 8-byte Reload
	movq	456(%rsp), %r8          # 8-byte Reload
	movq	352(%rsp), %r9          # 8-byte Reload
	movq	360(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	496(%rsp), %rdi         # 8-byte Reload
	movq	440(%rsp), %rsi         # 8-byte Reload
	movq	7640(%rsp), %rdx        # 8-byte Reload
	movq	496(%rsp), %rcx         # 8-byte Reload
	movq	336(%rsp), %r8          # 8-byte Reload
	movq	352(%rsp), %r9          # 8-byte Reload
	movq	360(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	7640(%rsp), %rcx        # 8-byte Reload
	addq	$1, %rcx
	movq	280(%rsp), %rdi         # 8-byte Reload
	movq	440(%rsp), %rsi         # 8-byte Reload
	movq	%rcx, %rdx
	movq	496(%rsp), %r8          # 8-byte Reload
	movq	%rcx, 240(%rsp)         # 8-byte Spill
	movq	%r8, %rcx
	movq	392(%rsp), %r8          # 8-byte Reload
	movq	352(%rsp), %r9          # 8-byte Reload
	movq	360(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	264(%rsp), %rdi         # 8-byte Reload
	movq	272(%rsp), %rsi         # 8-byte Reload
	movq	304(%rsp), %rdx         # 8-byte Reload
	movq	376(%rsp), %rcx         # 8-byte Reload
	movq	448(%rsp), %r8          # 8-byte Reload
	movl	316(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	328(%rsp), %rdi         # 8-byte Reload
	movq	488(%rsp), %rsi         # 8-byte Reload
	movq	496(%rsp), %rdx         # 8-byte Reload
	movq	352(%rsp), %rcx         # 8-byte Reload
	movq	456(%rsp), %r8          # 8-byte Reload
	movq	352(%rsp), %r9          # 8-byte Reload
	movq	360(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	8012(%rsp), %eax        # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	496(%rsp), %rdi         # 8-byte Reload
	movq	488(%rsp), %rsi         # 8-byte Reload
	movq	496(%rsp), %rcx         # 8-byte Reload
	movq	368(%rsp), %r8          # 8-byte Reload
	movq	352(%rsp), %r9          # 8-byte Reload
	movq	360(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	8012(%rsp), %eax        # 4-byte Reload
	addl	$1, %eax
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	280(%rsp), %rdi         # 8-byte Reload
	movq	488(%rsp), %rsi         # 8-byte Reload
	movq	496(%rsp), %rcx         # 8-byte Reload
	movq	376(%rsp), %r8          # 8-byte Reload
	movq	352(%rsp), %r9          # 8-byte Reload
	movq	360(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, 236(%rsp)         # 4-byte Spill
	callq	trace_logger_log_int
.Ltmp479:
	#DEBUG_VALUE: tqlrat:l <- [RSP+236]
	movq	264(%rsp), %rdi         # 8-byte Reload
	movq	272(%rsp), %rsi         # 8-byte Reload
	movq	304(%rsp), %rdx         # 8-byte Reload
	movq	416(%rsp), %rcx         # 8-byte Reload
	movq	384(%rsp), %r8          # 8-byte Reload
	movl	316(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	496(%rsp), %rdi         # 8-byte Reload
	movq	440(%rsp), %rsi         # 8-byte Reload
	movq	240(%rsp), %rdx         # 8-byte Reload
	movq	496(%rsp), %rcx         # 8-byte Reload
	movq	392(%rsp), %r8          # 8-byte Reload
	movq	352(%rsp), %r9          # 8-byte Reload
	movq	360(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	240(%rsp), %rcx         # 8-byte Reload
	movl	%ecx, %eax
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	280(%rsp), %rdi         # 8-byte Reload
	movq	488(%rsp), %rsi         # 8-byte Reload
	movq	496(%rsp), %rcx         # 8-byte Reload
	movq	416(%rsp), %r8          # 8-byte Reload
	movq	352(%rsp), %r9          # 8-byte Reload
	movq	360(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, 232(%rsp)         # 4-byte Spill
	callq	trace_logger_log_int
	movq	264(%rsp), %rdi         # 8-byte Reload
	movq	272(%rsp), %rsi         # 8-byte Reload
	movq	304(%rsp), %rdx         # 8-byte Reload
	movq	344(%rsp), %rcx         # 8-byte Reload
	movq	400(%rsp), %r8          # 8-byte Reload
	movl	316(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	9228(%rsp), %eax        # 4-byte Reload
	movl	%eax, %r9d
	movl	%r9d, %edx
	movq	328(%rsp), %rdi         # 8-byte Reload
	movq	488(%rsp), %rsi         # 8-byte Reload
	movq	496(%rsp), %rcx         # 8-byte Reload
	movq	408(%rsp), %r8          # 8-byte Reload
	movq	352(%rsp), %r9          # 8-byte Reload
	movq	360(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	232(%rsp), %eax         # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	496(%rsp), %rdi         # 8-byte Reload
	movq	488(%rsp), %rsi         # 8-byte Reload
	movq	496(%rsp), %rcx         # 8-byte Reload
	movq	416(%rsp), %r8          # 8-byte Reload
	movq	352(%rsp), %r9          # 8-byte Reload
	movq	360(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	232(%rsp), %eax         # 4-byte Reload
	movl	9228(%rsp), %ebp        # 4-byte Reload
	cmpl	%ebp, %eax
	setl	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	280(%rsp), %rdi         # 8-byte Reload
	movq	496(%rsp), %rsi         # 8-byte Reload
	movq	496(%rsp), %rcx         # 8-byte Reload
	movq	344(%rsp), %r8          # 8-byte Reload
	movq	352(%rsp), %r9          # 8-byte Reload
	movq	360(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 231(%rsp)          # 1-byte Spill
	callq	trace_logger_log_int
	movq	264(%rsp), %rdi         # 8-byte Reload
	movq	272(%rsp), %rsi         # 8-byte Reload
	movq	304(%rsp), %rdx         # 8-byte Reload
	movq	432(%rsp), %rcx         # 8-byte Reload
	movq	448(%rsp), %r8          # 8-byte Reload
	movl	316(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	328(%rsp), %rdi         # 8-byte Reload
	movq	440(%rsp), %rsi         # 8-byte Reload
	movq	496(%rsp), %rdx         # 8-byte Reload
	movq	352(%rsp), %rcx         # 8-byte Reload
	movq	456(%rsp), %r8          # 8-byte Reload
	movq	352(%rsp), %r9          # 8-byte Reload
	movq	360(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	496(%rsp), %rdi         # 8-byte Reload
	movq	440(%rsp), %rsi         # 8-byte Reload
	movq	8016(%rsp), %rdx        # 8-byte Reload
	movq	496(%rsp), %rcx         # 8-byte Reload
	movq	424(%rsp), %r8          # 8-byte Reload
	movq	352(%rsp), %r9          # 8-byte Reload
	movq	360(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	8016(%rsp), %rcx        # 8-byte Reload
	addq	$1, %rcx
	movq	280(%rsp), %rdi         # 8-byte Reload
	movq	440(%rsp), %rsi         # 8-byte Reload
	movq	%rcx, %rdx
	movq	496(%rsp), %r8          # 8-byte Reload
	movq	%rcx, 216(%rsp)         # 8-byte Spill
	movq	%r8, %rcx
	movq	432(%rsp), %r8          # 8-byte Reload
	movq	352(%rsp), %r9          # 8-byte Reload
	movq	360(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	264(%rsp), %rdi         # 8-byte Reload
	movq	272(%rsp), %rsi         # 8-byte Reload
	movq	304(%rsp), %rdx         # 8-byte Reload
	movq	480(%rsp), %rcx         # 8-byte Reload
	movq	448(%rsp), %r8          # 8-byte Reload
	movl	316(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	328(%rsp), %rdi         # 8-byte Reload
	movq	488(%rsp), %rsi         # 8-byte Reload
	movq	464(%rsp), %rdx         # 8-byte Reload
	movq	352(%rsp), %rcx         # 8-byte Reload
	movq	456(%rsp), %r8          # 8-byte Reload
	movq	352(%rsp), %r9          # 8-byte Reload
	movq	360(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	7636(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %eax
	movl	%eax, %edx
	movq	496(%rsp), %rdi         # 8-byte Reload
	movq	488(%rsp), %rsi         # 8-byte Reload
	movq	496(%rsp), %rcx         # 8-byte Reload
	movq	472(%rsp), %r8          # 8-byte Reload
	movq	352(%rsp), %r9          # 8-byte Reload
	movq	360(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	7636(%rsp), %eax        # 4-byte Reload
	addl	$4294967295, %eax       # imm = 0xFFFFFFFF
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	280(%rsp), %rdi         # 8-byte Reload
	movq	488(%rsp), %rsi         # 8-byte Reload
	movq	496(%rsp), %rcx         # 8-byte Reload
	movq	480(%rsp), %r8          # 8-byte Reload
	movq	352(%rsp), %r9          # 8-byte Reload
	movq	360(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, 212(%rsp)         # 4-byte Spill
	callq	trace_logger_log_int
	movq	264(%rsp), %rdi         # 8-byte Reload
	movq	272(%rsp), %rsi         # 8-byte Reload
	movq	304(%rsp), %rdx         # 8-byte Reload
	movq	296(%rsp), %rcx         # 8-byte Reload
	movq	328(%rsp), %r8          # 8-byte Reload
	movl	316(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	256(%rsp), %rdi         # 8-byte Reload
	movq	352(%rsp), %rsi         # 8-byte Reload
	movq	352(%rsp), %rdx         # 8-byte Reload
	movq	496(%rsp), %rcx         # 8-byte Reload
	movq	248(%rsp), %r8          # 8-byte Reload
	movq	352(%rsp), %r9          # 8-byte Reload
	movq	360(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	328(%rsp), %rdi         # 8-byte Reload
	movq	352(%rsp), %rsi         # 8-byte Reload
	movq	352(%rsp), %rdx         # 8-byte Reload
	movq	496(%rsp), %rcx         # 8-byte Reload
	movq	320(%rsp), %r8          # 8-byte Reload
	movq	352(%rsp), %r9          # 8-byte Reload
	movq	360(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	231(%rsp), %al          # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	496(%rsp), %rdi         # 8-byte Reload
	movq	496(%rsp), %rsi         # 8-byte Reload
	movq	496(%rsp), %rcx         # 8-byte Reload
	movq	344(%rsp), %r8          # 8-byte Reload
	movq	352(%rsp), %r9          # 8-byte Reload
	movq	360(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	231(%rsp), %al          # 1-byte Reload
	testb	$1, %al
	movq	240(%rsp), %rcx         # 8-byte Reload
	movl	212(%rsp), %ebp         # 4-byte Reload
	movq	216(%rsp), %rdx         # 8-byte Reload
	vmovsd	7032(%rsp), %xmm0       # 8-byte Reload
	vmovsd	7024(%rsp), %xmm1       # 8-byte Reload
	movl	236(%rsp), %eax         # 4-byte Reload
	vmovsd	1728(%rsp), %xmm2       # 8-byte Reload
	vmovsd	7016(%rsp), %xmm3       # 8-byte Reload
	movl	316(%rsp), %esi         # 4-byte Reload
	movl	%eax, 8044(%rsp)        # 4-byte Spill
	movq	%rcx, 8072(%rsp)        # 8-byte Spill
	movl	%ebp, 8080(%rsp)        # 4-byte Spill
	movq	%rdx, 8064(%rsp)        # 8-byte Spill
	vmovsd	%xmm0, 8056(%rsp)       # 8-byte Spill
	vmovsd	%xmm1, 8048(%rsp)       # 8-byte Spill
	vmovsd	%xmm2, 8032(%rsp)       # 8-byte Spill
	vmovsd	%xmm3, 8024(%rsp)       # 8-byte Spill
	movl	%esi, 9112(%rsp)        # 4-byte Spill
	jne	.LBB10_5
.Ltmp480:
.LBB10_28:                              # %.loopexit24
	movl	9112(%rsp), %eax        # 4-byte Reload
	movabsq	$1, %rcx
	movabsq	$32, %rdx
	leaq	.L.str67141, %rsi
	movabsq	$0, %rdi
	leaq	.L.str781, %r8
	movabsq	$589, %r9               # imm = 0x24D
	leaq	.L.str62136, %r10
	leaq	.L.str371, %r11
	leaq	.L.str474, %rbx
	movl	$0, %ebp
	movl	$1, %r14d
	movabsq	$19134, %r15            # imm = 0x4ABE
	leaq	.L.str420, %r12
	leaq	.L.str163, %r13
	movq	%rcx, 200(%rsp)         # 8-byte Spill
	movabsq	$2, %rcx
	movq	%rcx, 192(%rsp)         # 8-byte Spill
	leaq	.L.str1488, %rcx
	movq	%rcx, 184(%rsp)         # 8-byte Spill
	leaq	.L.str478, %rcx
	movq	%rcx, 176(%rsp)         # 8-byte Spill
	movabsq	$3, %rcx
	movq	%rcx, 168(%rsp)         # 8-byte Spill
	leaq	.L.str386, %rcx
	movq	%rcx, 160(%rsp)         # 8-byte Spill
	movabsq	$4, %rcx
	movq	%rcx, 152(%rsp)         # 8-byte Spill
	leaq	.L.str375, %rcx
	movq	%rcx, 144(%rsp)         # 8-byte Spill
	movabsq	$5, %rcx
	movq	%rcx, 136(%rsp)         # 8-byte Spill
	leaq	.L.str380, %rcx
	movq	%rcx, 128(%rsp)         # 8-byte Spill
	movabsq	$-1, %rcx
	movq	%rcx, 120(%rsp)         # 8-byte Spill
	movabsq	$48, %rcx
	.loc	2 589 0                 # eispack.c:589:0
	movq	%rcx, 112(%rsp)         # 8-byte Spill
	movq	120(%rsp), %rcx         # 8-byte Reload
	movq	%rdi, 104(%rsp)         # 8-byte Spill
	movq	%rcx, %rdi
	movq	%rsi, 96(%rsp)          # 8-byte Spill
	movq	%r10, %rsi
	movq	%rdx, 88(%rsp)          # 8-byte Spill
	movq	%r11, %rdx
	movq	96(%rsp), %rcx          # 8-byte Reload
	movq	%r8, 80(%rsp)           # 8-byte Spill
	movq	112(%rsp), %r8          # 8-byte Reload
	movq	%r9, 72(%rsp)           # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movl	%eax, 68(%rsp)          # 4-byte Spill
	movl	%r14d, 64(%rsp)         # 4-byte Spill
	movq	%r15, 56(%rsp)          # 8-byte Spill
	movq	%r12, 48(%rsp)          # 8-byte Spill
	movq	%r13, 40(%rsp)          # 8-byte Spill
	movl	%ebp, 36(%rsp)          # 4-byte Spill
	movq	%rbx, 24(%rsp)          # 8-byte Spill
	movq	%r10, 16(%rsp)          # 8-byte Spill
	movq	%r11, 8(%rsp)           # 8-byte Spill
	callq	trace_logger_log0
	movq	136(%rsp), %rdi         # 8-byte Reload
	movq	88(%rsp), %rsi          # 8-byte Reload
	movq	104(%rsp), %rdx         # 8-byte Reload
	movq	104(%rsp), %rcx         # 8-byte Reload
	movq	184(%rsp), %r8          # 8-byte Reload
	movq	200(%rsp), %r9          # 8-byte Reload
	movq	128(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	152(%rsp), %rdi         # 8-byte Reload
	movq	88(%rsp), %rsi          # 8-byte Reload
	movq	104(%rsp), %rdx         # 8-byte Reload
	movq	104(%rsp), %rcx         # 8-byte Reload
	movq	184(%rsp), %r8          # 8-byte Reload
	movq	200(%rsp), %r9          # 8-byte Reload
	movq	144(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	168(%rsp), %rdi         # 8-byte Reload
	movq	88(%rsp), %rsi          # 8-byte Reload
	movq	104(%rsp), %rdx         # 8-byte Reload
	movq	104(%rsp), %rcx         # 8-byte Reload
	movq	184(%rsp), %r8          # 8-byte Reload
	movq	200(%rsp), %r9          # 8-byte Reload
	movq	160(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	192(%rsp), %rdi         # 8-byte Reload
	movq	88(%rsp), %rsi          # 8-byte Reload
	movq	104(%rsp), %rdx         # 8-byte Reload
	movq	104(%rsp), %rcx         # 8-byte Reload
	movq	184(%rsp), %r8          # 8-byte Reload
	movq	200(%rsp), %r9          # 8-byte Reload
	movq	176(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	200(%rsp), %rdi         # 8-byte Reload
	movq	88(%rsp), %rsi          # 8-byte Reload
	movq	104(%rsp), %rdx         # 8-byte Reload
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	40(%rsp), %r8           # 8-byte Reload
	movq	200(%rsp), %r9          # 8-byte Reload
	movq	48(%rsp), %r10          # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	68(%rsp), %eax          # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	56(%rsp), %rdi          # 8-byte Reload
	movq	88(%rsp), %rsi          # 8-byte Reload
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	96(%rsp), %r8           # 8-byte Reload
	movq	104(%rsp), %r9          # 8-byte Reload
	movq	48(%rsp), %r10          # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	72(%rsp), %rdi          # 8-byte Reload
	movq	16(%rsp), %rsi          # 8-byte Reload
	movq	8(%rsp), %rdx           # 8-byte Reload
	movq	24(%rsp), %rcx          # 8-byte Reload
	movq	200(%rsp), %r8          # 8-byte Reload
	movl	36(%rsp), %r9d          # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	68(%rsp), %eax          # 4-byte Reload
	movl	%eax, %r9d
	movl	%r9d, %edx
	movq	200(%rsp), %rdi         # 8-byte Reload
	movq	88(%rsp), %rsi          # 8-byte Reload
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	96(%rsp), %r8           # 8-byte Reload
	movq	104(%rsp), %r9          # 8-byte Reload
	movq	80(%rsp), %r10          # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	68(%rsp), %eax          # 4-byte Reload
	addq	$9336, %rsp             # imm = 0x2478
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
.Ltmp481:
.Ltmp482:
	.size	tqlrat, .Ltmp482-tqlrat
.Lfunc_end10:
	.cfi_endproc

	.globl	trbak1
	.align	16, 0x90
	.type	trbak1,@function
trbak1:                                 # @trbak1
	.cfi_startproc
.Lfunc_begin11:
	.loc	2 654 0                 # eispack.c:654:0
# BB#0:
	pushq	%rbp
.Ltmp490:
	.cfi_def_cfa_offset 16
	pushq	%r15
.Ltmp491:
	.cfi_def_cfa_offset 24
	pushq	%r14
.Ltmp492:
	.cfi_def_cfa_offset 32
	pushq	%r13
.Ltmp493:
	.cfi_def_cfa_offset 40
	pushq	%r12
.Ltmp494:
	.cfi_def_cfa_offset 48
	pushq	%rbx
.Ltmp495:
	.cfi_def_cfa_offset 56
	subq	$3080, %rsp             # imm = 0xC08
.Ltmp496:
	.cfi_def_cfa_offset 3136
.Ltmp497:
	.cfi_offset %rbx, -56
.Ltmp498:
	.cfi_offset %r12, -48
.Ltmp499:
	.cfi_offset %r13, -40
.Ltmp500:
	.cfi_offset %r14, -32
.Ltmp501:
	.cfi_offset %r15, -24
.Ltmp502:
	.cfi_offset %rbp, -16
	movabsq	$1, %rax
	leaq	.L.str480, %r9
	movabsq	$0, %r10
	leaq	.L.str781, %r11
	movabsq	$2, %rbx
	leaq	.L.str483, %r14
	movabsq	$3, %r15
	leaq	.L.str482, %r12
	movabsq	$661, %r13              # imm = 0x295
	leaq	.L.str475, %rbp
	movq	%rax, 3072(%rsp)        # 8-byte Spill
	leaq	.L.str478, %rax
	movq	%rax, 3064(%rsp)        # 8-byte Spill
	leaq	.L.str481, %rax
	movl	%ecx, 3060(%rsp)        # 4-byte Spill
	movl	$0, %ecx
	movl	%ecx, 3056(%rsp)        # 4-byte Spill
	movl	$1, %ecx
	movq	%rax, 3048(%rsp)        # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 3040(%rsp)        # 8-byte Spill
	leaq	.L.str479, %rax
	movq	%rax, 3032(%rsp)        # 8-byte Spill
	leaq	.L.str579, %rax
	movq	%rax, 3024(%rsp)        # 8-byte Spill
	movabsq	$23, %rax
	movq	%rax, 3016(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 3008(%rsp)        # 8-byte Spill
	leaq	.L.str51125, %rax
	movq	%rax, 3000(%rsp)        # 8-byte Spill
	leaq	.L.str1488, %rax
	movq	%rax, 2992(%rsp)        # 8-byte Spill
	movabsq	$671, %rax              # imm = 0x29F
	movq	%rax, 2984(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 2976(%rsp)        # 8-byte Spill
	leaq	.L.str478152, %rax
	movq	%rax, 2968(%rsp)        # 8-byte Spill
	leaq	.L.str476, %rax
	movq	%rax, 2960(%rsp)        # 8-byte Spill
	leaq	.L.str477, %rax
	movq	%rax, 2952(%rsp)        # 8-byte Spill
	movabsq	$24601, %rax            # imm = 0x6019
	movq	%rax, 2944(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 2936(%rsp)        # 8-byte Spill
	leaq	.L.str69143, %rax
	movq	%rax, 2928(%rsp)        # 8-byte Spill
	leaq	.L.str157, %rax
	movq	%rax, 2920(%rsp)        # 8-byte Spill
	leaq	.L.str882, %rax
	.loc	2 592 0 prologue_end    # eispack.c:592:0
.Ltmp503:
	movl	%ecx, 2916(%rsp)        # 4-byte Spill
	movl	%edi, %ecx
                                        # kill: RCX<def> ECX<kill>
	movq	%rax, 2904(%rsp)        # 8-byte Spill
	movq	2944(%rsp), %rax        # 8-byte Reload
	movl	%edi, 2900(%rsp)        # 4-byte Spill
	movq	%rax, %rdi
	movq	3008(%rsp), %rax        # 8-byte Reload
	movq	%rsi, 2888(%rsp)        # 8-byte Spill
	movq	%rax, %rsi
	movq	%rdx, 2880(%rsp)        # 8-byte Spill
	movq	%rcx, %rdx
	movq	3072(%rsp), %rcx        # 8-byte Reload
	movq	3000(%rsp), %rax        # 8-byte Reload
	movq	%r8, 2872(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 2864(%rsp)         # 8-byte Spill
	movq	%r10, %r9
	movq	%r11, (%rsp)
	movq	%rbp, 2856(%rsp)        # 8-byte Spill
	movq	%r15, 2848(%rsp)        # 8-byte Spill
	movq	%r13, 2840(%rsp)        # 8-byte Spill
	movq	%r12, 2832(%rsp)        # 8-byte Spill
	movq	%r14, 2824(%rsp)        # 8-byte Spill
	movq	%rbx, 2816(%rsp)        # 8-byte Spill
	movq	%r10, 2808(%rsp)        # 8-byte Spill
	movq	%r11, 2800(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	2944(%rsp), %rdi        # 8-byte Reload
	movq	2936(%rsp), %rsi        # 8-byte Reload
	movq	2888(%rsp), %rdx        # 8-byte Reload
	movq	3072(%rsp), %rcx        # 8-byte Reload
	movq	2904(%rsp), %r8         # 8-byte Reload
	movq	2808(%rsp), %r9         # 8-byte Reload
	movq	2800(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2944(%rsp), %rdi        # 8-byte Reload
	movq	2936(%rsp), %rsi        # 8-byte Reload
	movq	2880(%rsp), %rdx        # 8-byte Reload
	movq	3072(%rsp), %rcx        # 8-byte Reload
	movq	2920(%rsp), %r8         # 8-byte Reload
	movq	2808(%rsp), %r9         # 8-byte Reload
	movq	2800(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	3060(%rsp), %esi        # 4-byte Reload
	movl	%esi, %esi
	movl	%esi, %edx
	movq	2944(%rsp), %rdi        # 8-byte Reload
	movq	3008(%rsp), %rsi        # 8-byte Reload
	movq	3072(%rsp), %rcx        # 8-byte Reload
	movq	2952(%rsp), %r8         # 8-byte Reload
	movq	2808(%rsp), %r9         # 8-byte Reload
	movq	2800(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2944(%rsp), %rdi        # 8-byte Reload
	movq	2936(%rsp), %rsi        # 8-byte Reload
	movq	2872(%rsp), %rdx        # 8-byte Reload
	movq	3072(%rsp), %rcx        # 8-byte Reload
	movq	2928(%rsp), %r8         # 8-byte Reload
	movq	2808(%rsp), %r9         # 8-byte Reload
	movq	2800(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	#DEBUG_VALUE: trbak1:n <- [RSP+2900]
	#DEBUG_VALUE: trbak1:a <- [RSP+2888]
	#DEBUG_VALUE: trbak1:e <- [RSP+2880]
	#DEBUG_VALUE: trbak1:m <- [RSP+3060]
	#DEBUG_VALUE: trbak1:z <- [RSP+2872]
	.loc	2 661 0                 # eispack.c:661:0
.Ltmp504:
	movq	2840(%rsp), %rdi        # 8-byte Reload
	movq	2856(%rsp), %rsi        # 8-byte Reload
	movq	3064(%rsp), %rdx        # 8-byte Reload
	movq	2960(%rsp), %rcx        # 8-byte Reload
	movq	2976(%rsp), %r8         # 8-byte Reload
	movl	3056(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2816(%rsp), %rdi        # 8-byte Reload
	movq	3008(%rsp), %rsi        # 8-byte Reload
	movq	2808(%rsp), %rdx        # 8-byte Reload
	movq	2808(%rsp), %rcx        # 8-byte Reload
	movq	2992(%rsp), %r8         # 8-byte Reload
	movq	2808(%rsp), %r9         # 8-byte Reload
	movq	2800(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	3060(%rsp), %esi        # 4-byte Reload
	movl	%esi, %esi
	movl	%esi, %edx
	movq	3072(%rsp), %rdi        # 8-byte Reload
	movq	3008(%rsp), %rsi        # 8-byte Reload
	movq	3072(%rsp), %rcx        # 8-byte Reload
	movq	2952(%rsp), %r8         # 8-byte Reload
	movq	2808(%rsp), %r9         # 8-byte Reload
	movq	2800(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	3060(%rsp), %esi        # 4-byte Reload
	cmpl	$0, %esi
	setg	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	3040(%rsp), %rdi        # 8-byte Reload
	movq	3072(%rsp), %rsi        # 8-byte Reload
	movq	3072(%rsp), %rcx        # 8-byte Reload
	movq	2960(%rsp), %r8         # 8-byte Reload
	movq	2808(%rsp), %r9         # 8-byte Reload
	movq	2800(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 2799(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	2840(%rsp), %rdi        # 8-byte Reload
	movq	2856(%rsp), %rsi        # 8-byte Reload
	movq	3064(%rsp), %rdx        # 8-byte Reload
	movq	2968(%rsp), %rcx        # 8-byte Reload
	movq	2976(%rsp), %r8         # 8-byte Reload
	movl	3056(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2816(%rsp), %rdi        # 8-byte Reload
	movq	3008(%rsp), %rsi        # 8-byte Reload
	movq	3072(%rsp), %rdx        # 8-byte Reload
	movq	2808(%rsp), %rcx        # 8-byte Reload
	movq	2992(%rsp), %r8         # 8-byte Reload
	movq	2808(%rsp), %r9         # 8-byte Reload
	movq	2800(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	2900(%rsp), %eax        # 4-byte Reload
	movl	%eax, %eax
	movl	%eax, %edx
	movq	3072(%rsp), %rdi        # 8-byte Reload
	movq	3008(%rsp), %rsi        # 8-byte Reload
	movq	3072(%rsp), %rcx        # 8-byte Reload
	movq	3000(%rsp), %r8         # 8-byte Reload
	movq	2808(%rsp), %r9         # 8-byte Reload
	movq	2800(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	2900(%rsp), %eax        # 4-byte Reload
	cmpl	$1, %eax
	setg	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	3040(%rsp), %rdi        # 8-byte Reload
	movq	3072(%rsp), %rsi        # 8-byte Reload
	movq	3072(%rsp), %rcx        # 8-byte Reload
	movq	2968(%rsp), %r8         # 8-byte Reload
	movq	2808(%rsp), %r9         # 8-byte Reload
	movq	2800(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 2798(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	2840(%rsp), %rdi        # 8-byte Reload
	movq	2856(%rsp), %rsi        # 8-byte Reload
	movq	3064(%rsp), %rdx        # 8-byte Reload
	movq	3032(%rsp), %rcx        # 8-byte Reload
	movq	3016(%rsp), %r8         # 8-byte Reload
	movl	3056(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movb	2799(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %r9d
	movl	%r9d, %edx
	movq	2816(%rsp), %rdi        # 8-byte Reload
	movq	3072(%rsp), %rsi        # 8-byte Reload
	movq	3072(%rsp), %rcx        # 8-byte Reload
	movq	2960(%rsp), %r8         # 8-byte Reload
	movq	2808(%rsp), %r9         # 8-byte Reload
	movq	2800(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	2798(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, %edx
	movq	3072(%rsp), %rdi        # 8-byte Reload
	movq	3072(%rsp), %rsi        # 8-byte Reload
	movq	3072(%rsp), %rcx        # 8-byte Reload
	movq	2968(%rsp), %r8         # 8-byte Reload
	movq	2808(%rsp), %r9         # 8-byte Reload
	movq	2800(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	2798(%rsp), %al         # 1-byte Reload
	movb	2799(%rsp), %cl         # 1-byte Reload
	andb	%cl, %al
.Ltmp505:
	.loc	2 671 0                 # eispack.c:671:0
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	3040(%rsp), %rdi        # 8-byte Reload
	movq	3072(%rsp), %rsi        # 8-byte Reload
	movq	3072(%rsp), %rcx        # 8-byte Reload
	movq	3032(%rsp), %r8         # 8-byte Reload
	movq	2808(%rsp), %r9         # 8-byte Reload
	movq	2800(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 2797(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	2984(%rsp), %rdi        # 8-byte Reload
	movq	2856(%rsp), %rsi        # 8-byte Reload
	movq	3064(%rsp), %rdx        # 8-byte Reload
	movq	3024(%rsp), %rcx        # 8-byte Reload
	movq	2976(%rsp), %r8         # 8-byte Reload
	movl	3056(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2816(%rsp), %rdi        # 8-byte Reload
	movq	3008(%rsp), %rsi        # 8-byte Reload
	movq	3072(%rsp), %rdx        # 8-byte Reload
	movq	2808(%rsp), %rcx        # 8-byte Reload
	movq	2992(%rsp), %r8         # 8-byte Reload
	movq	2808(%rsp), %r9         # 8-byte Reload
	movq	2800(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	2900(%rsp), %eax        # 4-byte Reload
	movl	%eax, %eax
	movl	%eax, %edx
	movq	3072(%rsp), %rdi        # 8-byte Reload
	movq	3008(%rsp), %rsi        # 8-byte Reload
	movq	3072(%rsp), %rcx        # 8-byte Reload
	movq	3000(%rsp), %r8         # 8-byte Reload
	movq	2808(%rsp), %r9         # 8-byte Reload
	movq	2800(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	2900(%rsp), %eax        # 4-byte Reload
	cmpl	$1, %eax
	setg	%al
.Ltmp506:
	.loc	2 661 0                 # eispack.c:661:0
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	3040(%rsp), %rdi        # 8-byte Reload
	movq	3072(%rsp), %rsi        # 8-byte Reload
	movq	3072(%rsp), %rcx        # 8-byte Reload
	movq	3024(%rsp), %r8         # 8-byte Reload
	movq	2808(%rsp), %r9         # 8-byte Reload
	movq	2800(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 2796(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	2840(%rsp), %rdi        # 8-byte Reload
	movq	2856(%rsp), %rsi        # 8-byte Reload
	movq	3064(%rsp), %rdx        # 8-byte Reload
	movq	2864(%rsp), %rcx        # 8-byte Reload
	movq	3016(%rsp), %r8         # 8-byte Reload
	movl	3056(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movb	2796(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %r9d
	movl	%r9d, %edx
	movq	2816(%rsp), %rdi        # 8-byte Reload
	movq	3072(%rsp), %rsi        # 8-byte Reload
	movq	3072(%rsp), %rcx        # 8-byte Reload
	movq	3024(%rsp), %r8         # 8-byte Reload
	movq	2808(%rsp), %r9         # 8-byte Reload
	movq	2800(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	2797(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, %edx
	movq	3072(%rsp), %rdi        # 8-byte Reload
	movq	3072(%rsp), %rsi        # 8-byte Reload
	movq	3072(%rsp), %rcx        # 8-byte Reload
	movq	3032(%rsp), %r8         # 8-byte Reload
	movq	2808(%rsp), %r9         # 8-byte Reload
	movq	2800(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	2797(%rsp), %al         # 1-byte Reload
	movb	2796(%rsp), %cl         # 1-byte Reload
	andb	%cl, %al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	3040(%rsp), %rdi        # 8-byte Reload
	movq	3072(%rsp), %rsi        # 8-byte Reload
	movq	3072(%rsp), %rcx        # 8-byte Reload
	movq	2864(%rsp), %r8         # 8-byte Reload
	movq	2808(%rsp), %r9         # 8-byte Reload
	movq	2800(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 2795(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	2840(%rsp), %rdi        # 8-byte Reload
	movq	2856(%rsp), %rsi        # 8-byte Reload
	movq	3064(%rsp), %rdx        # 8-byte Reload
	movq	3048(%rsp), %rcx        # 8-byte Reload
	movq	2816(%rsp), %r8         # 8-byte Reload
	movl	3056(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2848(%rsp), %rdi        # 8-byte Reload
	movq	2808(%rsp), %rsi        # 8-byte Reload
	movq	2808(%rsp), %rdx        # 8-byte Reload
	movq	3072(%rsp), %rcx        # 8-byte Reload
	movq	2832(%rsp), %r8         # 8-byte Reload
	movq	2808(%rsp), %r9         # 8-byte Reload
	movq	2800(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	2816(%rsp), %rdi        # 8-byte Reload
	movq	2808(%rsp), %rsi        # 8-byte Reload
	movq	2808(%rsp), %rdx        # 8-byte Reload
	movq	3072(%rsp), %rcx        # 8-byte Reload
	movq	2824(%rsp), %r8         # 8-byte Reload
	movq	2808(%rsp), %r9         # 8-byte Reload
	movq	2800(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	2795(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, %edx
	movq	3072(%rsp), %rdi        # 8-byte Reload
	movq	3072(%rsp), %rsi        # 8-byte Reload
	movq	3072(%rsp), %rcx        # 8-byte Reload
	movq	2864(%rsp), %r8         # 8-byte Reload
	movq	2808(%rsp), %r9         # 8-byte Reload
	movq	2800(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	2795(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB11_1
	jmp	.LBB11_10
.Ltmp507:
.LBB11_1:                               # %.lr.ph15
	movabsq	$1, %rax
	movl	$1, %ecx
	movabsq	$0, %rdx
	leaq	.L.str485, %r8
	leaq	.L.str781, %rsi
	movabsq	$671, %rdi              # imm = 0x29F
	leaq	.L.str475, %r9
	leaq	.L.str482, %r10
	leaq	.L.str484, %r11
	movabsq	$2, %rbx
	movl	$0, %ebp
	.loc	2 671 0                 # eispack.c:671:0
.Ltmp508:
	movq	%rsi, 2784(%rsp)        # 8-byte Spill
	movq	%r9, %rsi
	movq	%rdx, 2776(%rsp)        # 8-byte Spill
	movq	%r10, %rdx
	movl	%ecx, 2772(%rsp)        # 4-byte Spill
	movq	%r11, %rcx
	movq	%r8, 2760(%rsp)         # 8-byte Spill
	movq	%rbx, %r8
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%rax, 2752(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	2752(%rsp), %rdi        # 8-byte Reload
	movq	2776(%rsp), %rsi        # 8-byte Reload
	movq	2776(%rsp), %rdx        # 8-byte Reload
	movq	2752(%rsp), %rcx        # 8-byte Reload
	movq	2760(%rsp), %r8         # 8-byte Reload
	movq	2776(%rsp), %r9         # 8-byte Reload
	movq	2784(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2752(%rsp), %rax        # 8-byte Reload
	movl	2772(%rsp), %ebp        # 4-byte Reload
	movq	%rax, 2744(%rsp)        # 8-byte Spill
	movl	%ebp, 2740(%rsp)        # 4-byte Spill
.LBB11_2:                               # =>This Loop Header: Depth=1
                                        #     Child Loop BB11_4 Depth 2
                                        #       Child Loop BB11_5 Depth 3
                                        #       Child Loop BB11_7 Depth 3
	movl	2740(%rsp), %eax        # 4-byte Reload
	movq	2744(%rsp), %rcx        # 8-byte Reload
	movabsq	$1, %rdx
	leaq	.L.str492, %rsi
	movabsq	$0, %rdi
	leaq	.L.str781, %r8
	movabsq	$2, %r9
	leaq	.L.str494, %r10
	movabsq	$3, %r11
	leaq	.L.str175149, %rbx
	movabsq	$675, %r14              # imm = 0x2A3
	leaq	.L.str475, %r15
	leaq	.L.str485, %r12
	leaq	.L.str493, %r13
	movl	$0, %ebp
	movl	%eax, 2736(%rsp)        # 4-byte Spill
	movl	$1, %eax
	movq	%rcx, 2728(%rsp)        # 8-byte Spill
	movabsq	$19134, %rcx            # imm = 0x4ABE
	movq	%rcx, 2720(%rsp)        # 8-byte Spill
	leaq	.L.str490, %rcx
	movq	%rcx, 2712(%rsp)        # 8-byte Spill
	leaq	.L.str491, %rcx
	movq	%rcx, 2704(%rsp)        # 8-byte Spill
	movabsq	$24, %rcx
	movq	%rcx, 2696(%rsp)        # 8-byte Spill
	movabsq	$32, %rcx
	movq	%rcx, 2688(%rsp)        # 8-byte Spill
	leaq	.L.str477, %rcx
	movq	%rcx, 2680(%rsp)        # 8-byte Spill
	leaq	.L.str1488, %rcx
	movq	%rcx, 2672(%rsp)        # 8-byte Spill
	movabsq	$46, %rcx
	vxorps	%xmm0, %xmm0, %xmm0
	movq	%rcx, 2664(%rsp)        # 8-byte Spill
	movabsq	$64, %rcx
	movq	%rcx, 2656(%rsp)        # 8-byte Spill
	leaq	.L.str1387, %rcx
	movq	%rcx, 2648(%rsp)        # 8-byte Spill
	movabsq	$47, %rcx
	movq	%rcx, 2640(%rsp)        # 8-byte Spill
	leaq	.L.str1185, %rcx
	movq	%rcx, 2632(%rsp)        # 8-byte Spill
	movabsq	$27, %rcx
	movq	%rcx, 2624(%rsp)        # 8-byte Spill
	leaq	.L.str157, %rcx
	movq	%rcx, 2616(%rsp)        # 8-byte Spill
	leaq	.L.str486, %rcx
	movq	%rcx, 2608(%rsp)        # 8-byte Spill
	movabsq	$29, %rcx
	movq	%rcx, 2600(%rsp)        # 8-byte Spill
	leaq	.L.str488, %rcx
	movq	%rcx, 2592(%rsp)        # 8-byte Spill
	leaq	.L.str482, %rcx
	movq	%rcx, 2584(%rsp)        # 8-byte Spill
	leaq	.L.str489, %rcx
	movq	%rcx, 2576(%rsp)        # 8-byte Spill
	movabsq	$-1, %rcx
	movq	%rcx, 2568(%rsp)        # 8-byte Spill
	movabsq	$48, %rcx
	movq	%rcx, 2560(%rsp)        # 8-byte Spill
	leaq	.L.str487, %rcx
	.loc	2 675 0                 # eispack.c:675:0
.Ltmp509:
	movq	%rcx, 2552(%rsp)        # 8-byte Spill
	movq	2568(%rsp), %rcx        # 8-byte Reload
	movq	%rdi, 2544(%rsp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	%rsi, 2536(%rsp)        # 8-byte Spill
	movq	%r15, %rsi
	movq	%rdx, 2528(%rsp)        # 8-byte Spill
	movq	%r12, %rdx
	movq	2608(%rsp), %rcx        # 8-byte Reload
	movq	%r8, 2520(%rsp)         # 8-byte Spill
	movq	2560(%rsp), %r8         # 8-byte Reload
	movq	%r9, 2512(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movl	%eax, 2508(%rsp)        # 4-byte Spill
	movq	%r12, 2496(%rsp)        # 8-byte Spill
	movq	%r13, 2488(%rsp)        # 8-byte Spill
	movl	%ebp, 2484(%rsp)        # 4-byte Spill
	vmovsd	%xmm0, 2472(%rsp)       # 8-byte Spill
	movq	%r15, 2464(%rsp)        # 8-byte Spill
	movq	%r14, 2456(%rsp)        # 8-byte Spill
	movq	%r10, 2448(%rsp)        # 8-byte Spill
	movq	%r11, 2440(%rsp)        # 8-byte Spill
	movq	%rbx, 2432(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	2512(%rsp), %rdi        # 8-byte Reload
	movq	2656(%rsp), %rsi        # 8-byte Reload
	movq	2544(%rsp), %rdx        # 8-byte Reload
	movq	2528(%rsp), %rcx        # 8-byte Reload
	movq	2552(%rsp), %r8         # 8-byte Reload
	movq	2528(%rsp), %r9         # 8-byte Reload
	movq	2432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	2528(%rsp), %rdi        # 8-byte Reload
	movq	2656(%rsp), %rsi        # 8-byte Reload
	movq	2528(%rsp), %rdx        # 8-byte Reload
	movq	2544(%rsp), %rcx        # 8-byte Reload
	movq	2672(%rsp), %r8         # 8-byte Reload
	movq	2528(%rsp), %r9         # 8-byte Reload
	movq	2584(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	2720(%rsp), %rdi        # 8-byte Reload
	movq	2656(%rsp), %rsi        # 8-byte Reload
	movq	2728(%rsp), %rdx        # 8-byte Reload
	movq	2528(%rsp), %rcx        # 8-byte Reload
	movq	2608(%rsp), %r8         # 8-byte Reload
	movq	2544(%rsp), %r9         # 8-byte Reload
	movq	2584(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	2568(%rsp), %rdi        # 8-byte Reload
	movq	2464(%rsp), %rsi        # 8-byte Reload
	movq	2496(%rsp), %rdx        # 8-byte Reload
	movq	2592(%rsp), %rcx        # 8-byte Reload
	movq	2560(%rsp), %r8         # 8-byte Reload
	movl	2484(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2512(%rsp), %rdi        # 8-byte Reload
	movq	2688(%rsp), %rsi        # 8-byte Reload
	movq	2544(%rsp), %rdx        # 8-byte Reload
	movq	2528(%rsp), %rcx        # 8-byte Reload
	movq	2576(%rsp), %r8         # 8-byte Reload
	movq	2528(%rsp), %r9         # 8-byte Reload
	movq	2432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	2528(%rsp), %rdi        # 8-byte Reload
	movq	2688(%rsp), %rsi        # 8-byte Reload
	movq	2528(%rsp), %rdx        # 8-byte Reload
	movq	2544(%rsp), %rcx        # 8-byte Reload
	movq	2672(%rsp), %r8         # 8-byte Reload
	movq	2528(%rsp), %r9         # 8-byte Reload
	movq	2584(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	2736(%rsp), %eax        # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	2720(%rsp), %rdi        # 8-byte Reload
	movq	2688(%rsp), %rsi        # 8-byte Reload
	movq	2528(%rsp), %rcx        # 8-byte Reload
	movq	2592(%rsp), %r8         # 8-byte Reload
	movq	2544(%rsp), %r9         # 8-byte Reload
	movq	2584(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	2456(%rsp), %rdi        # 8-byte Reload
	movq	2464(%rsp), %rsi        # 8-byte Reload
	movq	2496(%rsp), %rdx        # 8-byte Reload
	movq	2632(%rsp), %rcx        # 8-byte Reload
	movq	2600(%rsp), %r8         # 8-byte Reload
	movl	2484(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2512(%rsp), %rdi        # 8-byte Reload
	movq	2656(%rsp), %rsi        # 8-byte Reload
	movq	2728(%rsp), %rdx        # 8-byte Reload
	movq	2528(%rsp), %rcx        # 8-byte Reload
	movq	2608(%rsp), %r8         # 8-byte Reload
	movq	2544(%rsp), %r9         # 8-byte Reload
	movq	2520(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	2528(%rsp), %rdi        # 8-byte Reload
	movq	2656(%rsp), %rsi        # 8-byte Reload
	movq	2880(%rsp), %rdx        # 8-byte Reload
	movq	2528(%rsp), %rcx        # 8-byte Reload
	movq	2616(%rsp), %r8         # 8-byte Reload
	movq	2544(%rsp), %r9         # 8-byte Reload
	movq	2520(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2728(%rsp), %rcx        # 8-byte Reload
	shlq	$3, %rcx
	movq	2880(%rsp), %rdx        # 8-byte Reload
	addq	%rcx, %rdx
	movq	2720(%rsp), %rdi        # 8-byte Reload
	movq	2656(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 2424(%rsp)        # 8-byte Spill
	movq	2528(%rsp), %rcx        # 8-byte Reload
	movq	2632(%rsp), %r8         # 8-byte Reload
	movq	2544(%rsp), %r9         # 8-byte Reload
	movq	2520(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2456(%rsp), %rdi        # 8-byte Reload
	movq	2464(%rsp), %rsi        # 8-byte Reload
	movq	2496(%rsp), %rdx        # 8-byte Reload
	movq	2648(%rsp), %rcx        # 8-byte Reload
	movq	2624(%rsp), %r8         # 8-byte Reload
	movl	2484(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2528(%rsp), %rdi        # 8-byte Reload
	movq	2656(%rsp), %rsi        # 8-byte Reload
	movq	2424(%rsp), %rdx        # 8-byte Reload
	movq	2528(%rsp), %rcx        # 8-byte Reload
	movq	2632(%rsp), %r8         # 8-byte Reload
	movq	2544(%rsp), %r9         # 8-byte Reload
	movq	2520(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2880(%rsp), %rcx        # 8-byte Reload
	movq	2728(%rsp), %rdx        # 8-byte Reload
	vmovsd	(%rcx,%rdx,8), %xmm0
	movq	2720(%rsp), %rdi        # 8-byte Reload
	movq	2656(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 2416(%rsp)       # 8-byte Spill
	movq	2528(%rsp), %rdx        # 8-byte Reload
	movq	2648(%rsp), %rcx        # 8-byte Reload
	movq	2544(%rsp), %r8         # 8-byte Reload
	movq	2520(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	2456(%rsp), %rdi        # 8-byte Reload
	movq	2464(%rsp), %rsi        # 8-byte Reload
	movq	2496(%rsp), %rdx        # 8-byte Reload
	movq	2712(%rsp), %rcx        # 8-byte Reload
	movq	2640(%rsp), %r8         # 8-byte Reload
	movl	2484(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2512(%rsp), %rdi        # 8-byte Reload
	movq	2656(%rsp), %rsi        # 8-byte Reload
	vmovsd	2472(%rsp), %xmm0       # 8-byte Reload
	movq	2544(%rsp), %rdx        # 8-byte Reload
	movq	2672(%rsp), %rcx        # 8-byte Reload
	movq	2544(%rsp), %r8         # 8-byte Reload
	movq	2520(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	2528(%rsp), %rdi        # 8-byte Reload
	movq	2656(%rsp), %rsi        # 8-byte Reload
	vmovsd	2416(%rsp), %xmm0       # 8-byte Reload
	movq	2528(%rsp), %rdx        # 8-byte Reload
	movq	2648(%rsp), %rcx        # 8-byte Reload
	movq	2544(%rsp), %r8         # 8-byte Reload
	movq	2520(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	2416(%rsp), %xmm0       # 8-byte Reload
	vmovsd	2472(%rsp), %xmm1       # 8-byte Reload
	vucomisd	%xmm1, %xmm0
	sete	%al
	setnp	%cl
	andb	%al, %cl
	movb	%cl, %al
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	2720(%rsp), %rdi        # 8-byte Reload
	movq	2528(%rsp), %rsi        # 8-byte Reload
	movq	2528(%rsp), %r8         # 8-byte Reload
	movb	%cl, 2415(%rsp)         # 1-byte Spill
	movq	%r8, %rcx
	movq	2712(%rsp), %r8         # 8-byte Reload
	movq	2544(%rsp), %r9         # 8-byte Reload
	movq	2520(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	2456(%rsp), %rdi        # 8-byte Reload
	movq	2464(%rsp), %rsi        # 8-byte Reload
	movq	2496(%rsp), %rdx        # 8-byte Reload
	movq	2704(%rsp), %rcx        # 8-byte Reload
	movq	2664(%rsp), %r8         # 8-byte Reload
	movl	2484(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2512(%rsp), %rdi        # 8-byte Reload
	movq	2688(%rsp), %rsi        # 8-byte Reload
	movq	2528(%rsp), %rdx        # 8-byte Reload
	movq	2544(%rsp), %rcx        # 8-byte Reload
	movq	2672(%rsp), %r8         # 8-byte Reload
	movq	2544(%rsp), %r9         # 8-byte Reload
	movq	2520(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	3060(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %eax
	movl	%eax, %edx
	movq	2528(%rsp), %rdi        # 8-byte Reload
	movq	2688(%rsp), %rsi        # 8-byte Reload
	movq	2528(%rsp), %rcx        # 8-byte Reload
	movq	2680(%rsp), %r8         # 8-byte Reload
	movq	2544(%rsp), %r9         # 8-byte Reload
	movq	2520(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	3060(%rsp), %eax        # 4-byte Reload
	cmpl	$1, %eax
	setl	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ebp
	movl	%ebp, %edx
	movq	2720(%rsp), %rdi        # 8-byte Reload
	movq	2528(%rsp), %rsi        # 8-byte Reload
	movq	2528(%rsp), %rcx        # 8-byte Reload
	movq	2704(%rsp), %r8         # 8-byte Reload
	movq	2544(%rsp), %r9         # 8-byte Reload
	movq	2520(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 2414(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	2456(%rsp), %rdi        # 8-byte Reload
	movq	2464(%rsp), %rsi        # 8-byte Reload
	movq	2496(%rsp), %rdx        # 8-byte Reload
	movq	2536(%rsp), %rcx        # 8-byte Reload
	movq	2696(%rsp), %r8         # 8-byte Reload
	movl	2484(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movb	2414(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %r9d
	movl	%r9d, %edx
	movq	2512(%rsp), %rdi        # 8-byte Reload
	movq	2528(%rsp), %rsi        # 8-byte Reload
	movq	2528(%rsp), %rcx        # 8-byte Reload
	movq	2704(%rsp), %r8         # 8-byte Reload
	movq	2544(%rsp), %r9         # 8-byte Reload
	movq	2520(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	2415(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	2528(%rsp), %rdi        # 8-byte Reload
	movq	2528(%rsp), %rsi        # 8-byte Reload
	movq	2528(%rsp), %rcx        # 8-byte Reload
	movq	2712(%rsp), %r8         # 8-byte Reload
	movq	2544(%rsp), %r9         # 8-byte Reload
	movq	2520(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	2415(%rsp), %al         # 1-byte Reload
	movb	2414(%rsp), %cl         # 1-byte Reload
	orb	%cl, %al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ebp
	movl	%ebp, %edx
	movq	2720(%rsp), %rdi        # 8-byte Reload
	movq	2528(%rsp), %rsi        # 8-byte Reload
	movq	2528(%rsp), %rcx        # 8-byte Reload
	movq	2536(%rsp), %r8         # 8-byte Reload
	movq	2544(%rsp), %r9         # 8-byte Reload
	movq	2520(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 2413(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	2456(%rsp), %rdi        # 8-byte Reload
	movq	2464(%rsp), %rsi        # 8-byte Reload
	movq	2496(%rsp), %rdx        # 8-byte Reload
	movq	2488(%rsp), %rcx        # 8-byte Reload
	movq	2512(%rsp), %r8         # 8-byte Reload
	movl	2484(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2440(%rsp), %rdi        # 8-byte Reload
	movq	2544(%rsp), %rsi        # 8-byte Reload
	movq	2544(%rsp), %rdx        # 8-byte Reload
	movq	2528(%rsp), %rcx        # 8-byte Reload
	movq	2432(%rsp), %r8         # 8-byte Reload
	movq	2544(%rsp), %r9         # 8-byte Reload
	movq	2520(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	2512(%rsp), %rdi        # 8-byte Reload
	movq	2544(%rsp), %rsi        # 8-byte Reload
	movq	2544(%rsp), %rdx        # 8-byte Reload
	movq	2528(%rsp), %rcx        # 8-byte Reload
	movq	2448(%rsp), %r8         # 8-byte Reload
	movq	2544(%rsp), %r9         # 8-byte Reload
	movq	2520(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	2413(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	2528(%rsp), %rdi        # 8-byte Reload
	movq	2528(%rsp), %rsi        # 8-byte Reload
	movq	2528(%rsp), %rcx        # 8-byte Reload
	movq	2536(%rsp), %r8         # 8-byte Reload
	movq	2544(%rsp), %r9         # 8-byte Reload
	movq	2520(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	2413(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB11_9
.Ltmp510:
# BB#3:                                 # %.preheader.lr.ph
                                        #   in Loop: Header=BB11_2 Depth=1
	movabsq	$0, %rax
	movabsq	$1, %rcx
	leaq	.L.str114, %r8
	leaq	.L.str781, %rdx
	movabsq	$677, %rdi              # imm = 0x2A5
	leaq	.L.str475, %rsi
	leaq	.L.str494, %r9
	leaq	.L.str495, %r10
	movabsq	$2, %r11
	movl	$0, %ebx
	movl	$1, %ebp
	movabsq	$19134, %r14            # imm = 0x4ABE
	movabsq	$64, %r15
	leaq	.L.str26100, %r12
	leaq	.L.str882, %r13
	movq	%rax, 2400(%rsp)        # 8-byte Spill
	leaq	.L.str2397, %rax
	movq	%rax, 2392(%rsp)        # 8-byte Spill
	movabsq	$684, %rax              # imm = 0x2AC
	movq	%rax, 2384(%rsp)        # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 2376(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 2368(%rsp)        # 8-byte Spill
	leaq	.L.str2296, %rax
	movq	%rax, 2360(%rsp)        # 8-byte Spill
	movabsq	$35, %rax
	movq	%rax, 2352(%rsp)        # 8-byte Spill
	leaq	.L.str2094, %rax
	movq	%rax, 2344(%rsp)        # 8-byte Spill
	leaq	.L.str2195, %rax
	movq	%rax, 2336(%rsp)        # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, 2328(%rsp)        # 8-byte Spill
	leaq	.L.str486, %rax
	movq	%rax, 2320(%rsp)        # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, 2312(%rsp)        # 8-byte Spill
	leaq	.L.str1892, %rax
	movq	%rax, 2304(%rsp)        # 8-byte Spill
	leaq	.L.str51125, %rax
	movq	%rax, 2296(%rsp)        # 8-byte Spill
	movabsq	$12, %rax
	movq	%rax, 2288(%rsp)        # 8-byte Spill
	leaq	.L.str61135, %rax
	movq	%rax, 2280(%rsp)        # 8-byte Spill
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
	movq	%rax, 2272(%rsp)        # 8-byte Spill
	leaq	.L.str1488, %rax
	movq	%rax, 2264(%rsp)        # 8-byte Spill
	movabsq	$673, %rax              # imm = 0x2A1
	.loc	2 673 0                 # eispack.c:673:0
	movq	%rdi, 2256(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 2248(%rsp)        # 8-byte Spill
	movq	%rdx, 2240(%rsp)        # 8-byte Spill
	movq	%r9, %rdx
	movq	2280(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 2232(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	2328(%rsp), %rax        # 8-byte Reload
	movq	%r8, 2224(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 2216(%rsp)         # 8-byte Spill
	movl	%ebx, %r9d
	movl	$1, (%rsp)
	movq	%r13, 2208(%rsp)        # 8-byte Spill
	movl	%ebp, 2204(%rsp)        # 4-byte Spill
	movq	%r14, 2192(%rsp)        # 8-byte Spill
	movq	%r12, 2184(%rsp)        # 8-byte Spill
	movq	%r15, 2176(%rsp)        # 8-byte Spill
	movl	%ebx, 2172(%rsp)        # 4-byte Spill
	movq	%r10, 2160(%rsp)        # 8-byte Spill
	movq	%r11, 2152(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	2152(%rsp), %rdi        # 8-byte Reload
	movq	2176(%rsp), %rsi        # 8-byte Reload
	movq	2272(%rsp), %rdx        # 8-byte Reload
	movq	2400(%rsp), %rcx        # 8-byte Reload
	movq	2264(%rsp), %r8         # 8-byte Reload
	movq	2400(%rsp), %r9         # 8-byte Reload
	movq	2240(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2232(%rsp), %rdi        # 8-byte Reload
	movq	2176(%rsp), %rsi        # 8-byte Reload
	movq	2728(%rsp), %rdx        # 8-byte Reload
	movq	2232(%rsp), %rcx        # 8-byte Reload
	movq	2320(%rsp), %r8         # 8-byte Reload
	movq	2400(%rsp), %r9         # 8-byte Reload
	movq	2240(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
	movq	2728(%rsp), %rcx        # 8-byte Reload
	addq	%rax, %rcx
	.loc	2 684 0                 # eispack.c:684:0
.Ltmp511:
	movq	2192(%rsp), %rdi        # 8-byte Reload
	movq	2176(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	2232(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 2144(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	2280(%rsp), %r8         # 8-byte Reload
	movq	2400(%rsp), %r9         # 8-byte Reload
	movq	2240(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2248(%rsp), %rsi        # 8-byte Reload
	movq	2216(%rsp), %rdx        # 8-byte Reload
	movq	2304(%rsp), %rcx        # 8-byte Reload
	movq	2312(%rsp), %r8         # 8-byte Reload
	movl	2172(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2232(%rsp), %rdi        # 8-byte Reload
	movq	2176(%rsp), %rsi        # 8-byte Reload
	movq	2144(%rsp), %rdx        # 8-byte Reload
	movq	2232(%rsp), %rcx        # 8-byte Reload
	movq	2280(%rsp), %r8         # 8-byte Reload
	movq	2400(%rsp), %r9         # 8-byte Reload
	movq	2240(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2144(%rsp), %rax        # 8-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %ebp
	movl	%ebp, %edx
	movq	2192(%rsp), %rdi        # 8-byte Reload
	movq	2368(%rsp), %rsi        # 8-byte Reload
	movq	2232(%rsp), %rcx        # 8-byte Reload
	movq	2304(%rsp), %r8         # 8-byte Reload
	movq	2400(%rsp), %r9         # 8-byte Reload
	movq	2240(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebx, 2140(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2248(%rsp), %rsi        # 8-byte Reload
	movq	2216(%rsp), %rdx        # 8-byte Reload
	movq	2344(%rsp), %rcx        # 8-byte Reload
	movq	2288(%rsp), %r8         # 8-byte Reload
	movl	2172(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	2900(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebx
	movl	%ebx, %edx
	movq	2152(%rsp), %rdi        # 8-byte Reload
	movq	2368(%rsp), %rsi        # 8-byte Reload
	movq	2232(%rsp), %rcx        # 8-byte Reload
	movq	2296(%rsp), %r8         # 8-byte Reload
	movq	2400(%rsp), %r9         # 8-byte Reload
	movq	2240(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	2140(%rsp), %ebx        # 4-byte Reload
	movl	%ebx, %ebp
	movl	%ebp, %edx
	movq	2232(%rsp), %rdi        # 8-byte Reload
	movq	2368(%rsp), %rsi        # 8-byte Reload
	movq	2232(%rsp), %rcx        # 8-byte Reload
	movq	2304(%rsp), %r8         # 8-byte Reload
	movq	2400(%rsp), %r9         # 8-byte Reload
	movq	2240(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	2140(%rsp), %ebx        # 4-byte Reload
	movl	2900(%rsp), %ebp        # 4-byte Reload
	imull	%ebp, %ebx
	movl	%ebx, %esi
	movl	%esi, %edx
	movq	2192(%rsp), %rdi        # 8-byte Reload
	movq	2368(%rsp), %rsi        # 8-byte Reload
	movq	2232(%rsp), %rcx        # 8-byte Reload
	movq	2344(%rsp), %r8         # 8-byte Reload
	movq	2400(%rsp), %r9         # 8-byte Reload
	movq	2240(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%ebx, 2136(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2248(%rsp), %rsi        # 8-byte Reload
	movq	2216(%rsp), %rdx        # 8-byte Reload
	movq	2336(%rsp), %rcx        # 8-byte Reload
	movq	2312(%rsp), %r8         # 8-byte Reload
	movl	2172(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2232(%rsp), %rdi        # 8-byte Reload
	movq	2176(%rsp), %rsi        # 8-byte Reload
	movq	2728(%rsp), %rdx        # 8-byte Reload
	movq	2232(%rsp), %rcx        # 8-byte Reload
	movq	2320(%rsp), %r8         # 8-byte Reload
	movq	2400(%rsp), %r9         # 8-byte Reload
	movq	2240(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2728(%rsp), %rax        # 8-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %ebp
	movl	%ebp, %edx
	movq	2192(%rsp), %rdi        # 8-byte Reload
	movq	2368(%rsp), %rsi        # 8-byte Reload
	movq	2232(%rsp), %rcx        # 8-byte Reload
	movq	2336(%rsp), %r8         # 8-byte Reload
	movq	2400(%rsp), %r9         # 8-byte Reload
	movq	2240(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebx, 2132(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2248(%rsp), %rsi        # 8-byte Reload
	movq	2216(%rsp), %rdx        # 8-byte Reload
	movq	2360(%rsp), %rcx        # 8-byte Reload
	movq	2328(%rsp), %r8         # 8-byte Reload
	movl	2172(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	2132(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebx
	movl	%ebx, %edx
	movq	2152(%rsp), %rdi        # 8-byte Reload
	movq	2368(%rsp), %rsi        # 8-byte Reload
	movq	2232(%rsp), %rcx        # 8-byte Reload
	movq	2336(%rsp), %r8         # 8-byte Reload
	movq	2400(%rsp), %r9         # 8-byte Reload
	movq	2240(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	2136(%rsp), %ebx        # 4-byte Reload
	movl	%ebx, %ebp
	movl	%ebp, %edx
	movq	2232(%rsp), %rdi        # 8-byte Reload
	movq	2368(%rsp), %rsi        # 8-byte Reload
	movq	2232(%rsp), %rcx        # 8-byte Reload
	movq	2344(%rsp), %r8         # 8-byte Reload
	movq	2400(%rsp), %r9         # 8-byte Reload
	movq	2240(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	2136(%rsp), %ebx        # 4-byte Reload
	movl	2132(%rsp), %ebp        # 4-byte Reload
	addl	%ebp, %ebx
	movl	%ebx, %esi
	movl	%esi, %edx
	movq	2192(%rsp), %rdi        # 8-byte Reload
	movq	2368(%rsp), %rsi        # 8-byte Reload
	movq	2232(%rsp), %rcx        # 8-byte Reload
	movq	2360(%rsp), %r8         # 8-byte Reload
	movq	2400(%rsp), %r9         # 8-byte Reload
	movq	2240(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%ebx, 2128(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2248(%rsp), %rsi        # 8-byte Reload
	movq	2216(%rsp), %rdx        # 8-byte Reload
	movq	2392(%rsp), %rcx        # 8-byte Reload
	movq	2352(%rsp), %r8         # 8-byte Reload
	movl	2172(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	2128(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebx
	movl	%ebx, %edx
	movq	2232(%rsp), %rdi        # 8-byte Reload
	movq	2368(%rsp), %rsi        # 8-byte Reload
	movq	2232(%rsp), %rcx        # 8-byte Reload
	movq	2360(%rsp), %r8         # 8-byte Reload
	movq	2400(%rsp), %r9         # 8-byte Reload
	movq	2240(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	2128(%rsp), %ebx        # 4-byte Reload
	movslq	%ebx, %rax
	movq	2192(%rsp), %rdi        # 8-byte Reload
	movq	2176(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	2232(%rsp), %rcx        # 8-byte Reload
	movq	2392(%rsp), %r8         # 8-byte Reload
	movq	2400(%rsp), %r9         # 8-byte Reload
	movq	2240(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 2120(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2248(%rsp), %rsi        # 8-byte Reload
	movq	2216(%rsp), %rdx        # 8-byte Reload
	movq	2184(%rsp), %rcx        # 8-byte Reload
	movq	2376(%rsp), %r8         # 8-byte Reload
	movl	2172(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2152(%rsp), %rdi        # 8-byte Reload
	movq	2176(%rsp), %rsi        # 8-byte Reload
	movq	2120(%rsp), %rdx        # 8-byte Reload
	movq	2232(%rsp), %rcx        # 8-byte Reload
	movq	2392(%rsp), %r8         # 8-byte Reload
	movq	2400(%rsp), %r9         # 8-byte Reload
	movq	2240(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2232(%rsp), %rdi        # 8-byte Reload
	movq	2176(%rsp), %rsi        # 8-byte Reload
	movq	2888(%rsp), %rdx        # 8-byte Reload
	movq	2232(%rsp), %rcx        # 8-byte Reload
	movq	2208(%rsp), %r8         # 8-byte Reload
	movq	2400(%rsp), %r9         # 8-byte Reload
	movq	2240(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2120(%rsp), %rax        # 8-byte Reload
	shlq	$3, %rax
	movq	2888(%rsp), %rcx        # 8-byte Reload
	addq	%rax, %rcx
.Ltmp512:
	.loc	2 677 0                 # eispack.c:677:0
	movq	2192(%rsp), %rdi        # 8-byte Reload
	movq	2176(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	2232(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 2112(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	2184(%rsp), %r8         # 8-byte Reload
	movq	2400(%rsp), %r9         # 8-byte Reload
	movq	2240(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2256(%rsp), %rdi        # 8-byte Reload
	movq	2248(%rsp), %rsi        # 8-byte Reload
	movq	2216(%rsp), %rdx        # 8-byte Reload
	movq	2160(%rsp), %rcx        # 8-byte Reload
	movq	2152(%rsp), %r8         # 8-byte Reload
	movl	2172(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2232(%rsp), %rdi        # 8-byte Reload
	movq	2400(%rsp), %rsi        # 8-byte Reload
	movq	2400(%rsp), %rdx        # 8-byte Reload
	movq	2232(%rsp), %rcx        # 8-byte Reload
	movq	2224(%rsp), %r8         # 8-byte Reload
	movq	2400(%rsp), %r9         # 8-byte Reload
	movq	2240(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2400(%rsp), %rax        # 8-byte Reload
	movq	%rax, 2104(%rsp)        # 8-byte Spill
.LBB11_4:                               # %.lr.ph
                                        #   Parent Loop BB11_2 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB11_5 Depth 3
                                        #       Child Loop BB11_7 Depth 3
	movq	2104(%rsp), %rax        # 8-byte Reload
	movabsq	$0, %rcx
	vxorps	%xmm0, %xmm0, %xmm0
	movabsq	$1, %rdx
	leaq	.L.str500, %r8
	leaq	.L.str781, %rsi
	movabsq	$680, %rdi              # imm = 0x2A8
	leaq	.L.str475, %r9
	leaq	.L.str114, %r10
	leaq	.L.str499, %r11
	movabsq	$2, %rbx
	movl	$0, %ebp
	movl	$1, %r14d
	movabsq	$19134, %r15            # imm = 0x4ABE
	movabsq	$64, %r12
	leaq	.L.str34108, %r13
	movq	%rax, 2096(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 2088(%rsp)        # 8-byte Spill
	leaq	.L.str33107, %rax
	movq	%rax, 2080(%rsp)        # 8-byte Spill
	movabsq	$35, %rax
	movq	%rax, 2072(%rsp)        # 8-byte Spill
	leaq	.L.str32106, %rax
	movq	%rax, 2064(%rsp)        # 8-byte Spill
	leaq	.L.str51125, %rax
	movq	%rax, 2056(%rsp)        # 8-byte Spill
	movabsq	$682, %rax              # imm = 0x2AA
	movq	%rax, 2048(%rsp)        # 8-byte Spill
	movabsq	$12, %rax
	movq	%rax, 2040(%rsp)        # 8-byte Spill
	leaq	.L.str496, %rax
	movq	%rax, 2032(%rsp)        # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, 2024(%rsp)        # 8-byte Spill
	leaq	.L.str494, %rax
	movq	%rax, 2016(%rsp)        # 8-byte Spill
	leaq	.L.str1488, %rax
	movq	%rax, 2008(%rsp)        # 8-byte Spill
	leaq	.L.str497, %rax
	movq	%rax, 2000(%rsp)        # 8-byte Spill
	leaq	.L.str498, %rax
	movq	%rax, 1992(%rsp)        # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 1984(%rsp)        # 8-byte Spill
	movabsq	$48, %rax
	.loc	2 682 0                 # eispack.c:682:0
.Ltmp513:
	movq	%rax, 1976(%rsp)        # 8-byte Spill
	movq	1984(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 1968(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 1960(%rsp)        # 8-byte Spill
	movq	%r9, %rsi
	movq	%rdx, 1952(%rsp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	2032(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 1944(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	1976(%rsp), %rax        # 8-byte Reload
	movq	%r8, 1936(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 1928(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movl	%r14d, 1924(%rsp)       # 4-byte Spill
	vmovsd	%xmm0, 1912(%rsp)       # 8-byte Spill
	movq	%r15, 1904(%rsp)        # 8-byte Spill
	movl	%ebp, 1900(%rsp)        # 4-byte Spill
	movq	%r12, 1888(%rsp)        # 8-byte Spill
	movq	%r13, 1880(%rsp)        # 8-byte Spill
	movq	%rbx, 1872(%rsp)        # 8-byte Spill
	movq	%r10, 1864(%rsp)        # 8-byte Spill
	movq	%r11, 1856(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	1872(%rsp), %rdi        # 8-byte Reload
	movq	1888(%rsp), %rsi        # 8-byte Reload
	movq	1944(%rsp), %rdx        # 8-byte Reload
	movq	1952(%rsp), %rcx        # 8-byte Reload
	movq	2000(%rsp), %r8         # 8-byte Reload
	movq	1952(%rsp), %r9         # 8-byte Reload
	movq	1992(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1952(%rsp), %rdi        # 8-byte Reload
	movq	1888(%rsp), %rsi        # 8-byte Reload
	movq	1944(%rsp), %rdx        # 8-byte Reload
	movq	1944(%rsp), %rcx        # 8-byte Reload
	movq	2008(%rsp), %r8         # 8-byte Reload
	movq	1952(%rsp), %r9         # 8-byte Reload
	movq	2016(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1904(%rsp), %rdi        # 8-byte Reload
	movq	1888(%rsp), %rsi        # 8-byte Reload
	movq	2096(%rsp), %rdx        # 8-byte Reload
	movq	1952(%rsp), %rcx        # 8-byte Reload
	movq	2032(%rsp), %r8         # 8-byte Reload
	movq	1944(%rsp), %r9         # 8-byte Reload
	movq	2016(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2048(%rsp), %rdi        # 8-byte Reload
	movq	1928(%rsp), %rsi        # 8-byte Reload
	movq	1864(%rsp), %rdx        # 8-byte Reload
	movq	2064(%rsp), %rcx        # 8-byte Reload
	movq	2024(%rsp), %r8         # 8-byte Reload
	movl	1900(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1952(%rsp), %rdi        # 8-byte Reload
	movq	1888(%rsp), %rsi        # 8-byte Reload
	movq	2096(%rsp), %rdx        # 8-byte Reload
	movq	1952(%rsp), %rcx        # 8-byte Reload
	movq	2032(%rsp), %r8         # 8-byte Reload
	movq	1944(%rsp), %r9         # 8-byte Reload
	movq	1960(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2096(%rsp), %rax        # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %r14d
	movl	%r14d, %edx
	movq	1904(%rsp), %rdi        # 8-byte Reload
	movq	2088(%rsp), %rsi        # 8-byte Reload
	movq	1952(%rsp), %rcx        # 8-byte Reload
	movq	2064(%rsp), %r8         # 8-byte Reload
	movq	1944(%rsp), %r9         # 8-byte Reload
	movq	1960(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 1852(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	2048(%rsp), %rdi        # 8-byte Reload
	movq	1928(%rsp), %rsi        # 8-byte Reload
	movq	1864(%rsp), %rdx        # 8-byte Reload
	movq	2080(%rsp), %rcx        # 8-byte Reload
	movq	2040(%rsp), %r8         # 8-byte Reload
	movl	1900(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	2900(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	1872(%rsp), %rdi        # 8-byte Reload
	movq	2088(%rsp), %rsi        # 8-byte Reload
	movq	1952(%rsp), %rcx        # 8-byte Reload
	movq	2056(%rsp), %r8         # 8-byte Reload
	movq	1944(%rsp), %r9         # 8-byte Reload
	movq	1960(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	1852(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r14d
	movl	%r14d, %edx
	movq	1952(%rsp), %rdi        # 8-byte Reload
	movq	2088(%rsp), %rsi        # 8-byte Reload
	movq	1952(%rsp), %rcx        # 8-byte Reload
	movq	2064(%rsp), %r8         # 8-byte Reload
	movq	1944(%rsp), %r9         # 8-byte Reload
	movq	1960(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	1852(%rsp), %ebp        # 4-byte Reload
	movl	2900(%rsp), %r14d       # 4-byte Reload
	imull	%r14d, %ebp
.Ltmp514:
	.loc	2 680 0                 # eispack.c:680:0
	movl	%ebp, %esi
	movl	%esi, %edx
	movq	1904(%rsp), %rdi        # 8-byte Reload
	movq	2088(%rsp), %rsi        # 8-byte Reload
	movq	1952(%rsp), %rcx        # 8-byte Reload
	movq	2080(%rsp), %r8         # 8-byte Reload
	movq	1944(%rsp), %r9         # 8-byte Reload
	movq	1960(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%ebp, 1848(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	1968(%rsp), %rdi        # 8-byte Reload
	movq	1928(%rsp), %rsi        # 8-byte Reload
	movq	1864(%rsp), %rdx        # 8-byte Reload
	movq	1880(%rsp), %rcx        # 8-byte Reload
	movq	2072(%rsp), %r8         # 8-byte Reload
	movl	1900(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	1848(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	1952(%rsp), %rdi        # 8-byte Reload
	movq	2088(%rsp), %rsi        # 8-byte Reload
	movq	1952(%rsp), %rcx        # 8-byte Reload
	movq	2080(%rsp), %r8         # 8-byte Reload
	movq	1944(%rsp), %r9         # 8-byte Reload
	movq	1960(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	1848(%rsp), %ebp        # 4-byte Reload
	movslq	%ebp, %rax
	movq	1904(%rsp), %rdi        # 8-byte Reload
	movq	1888(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	1952(%rsp), %rcx        # 8-byte Reload
	movq	1880(%rsp), %r8         # 8-byte Reload
	movq	1944(%rsp), %r9         # 8-byte Reload
	movq	1960(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 1840(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	1968(%rsp), %rdi        # 8-byte Reload
	movq	1928(%rsp), %rsi        # 8-byte Reload
	movq	1864(%rsp), %rdx        # 8-byte Reload
	movq	1856(%rsp), %rcx        # 8-byte Reload
	movq	1872(%rsp), %r8         # 8-byte Reload
	movl	1900(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1952(%rsp), %rdi        # 8-byte Reload
	movq	1944(%rsp), %rsi        # 8-byte Reload
	movq	1944(%rsp), %rdx        # 8-byte Reload
	movq	1952(%rsp), %rcx        # 8-byte Reload
	movq	1936(%rsp), %r8         # 8-byte Reload
	movq	1944(%rsp), %r9         # 8-byte Reload
	movq	1960(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1944(%rsp), %rax        # 8-byte Reload
	vmovsd	1912(%rsp), %xmm0       # 8-byte Reload
	movq	%rax, 1832(%rsp)        # 8-byte Spill
	vmovsd	%xmm0, 1824(%rsp)       # 8-byte Spill
.LBB11_5:                               #   Parent Loop BB11_2 Depth=1
                                        #     Parent Loop BB11_4 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	vmovsd	1824(%rsp), %xmm0       # 8-byte Reload
	movq	1832(%rsp), %rax        # 8-byte Reload
	movabsq	$1, %rcx
	leaq	.L.str123, %rdx
	movabsq	$0, %rsi
	leaq	.L.str781, %rdi
	movabsq	$2, %r8
	leaq	.L.str500, %r9
	movabsq	$3, %r10
	leaq	.L.str504, %r11
	movabsq	$680, %rbx              # imm = 0x2A8
	leaq	.L.str475, %r14
	leaq	.L.str503, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 1816(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 1808(%rsp)        # 8-byte Spill
	leaq	.L.str122, %rax
	movq	%rax, 1800(%rsp)        # 8-byte Spill
	leaq	.L.str488, %rax
	movq	%rax, 1792(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 1784(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 1776(%rsp)        # 8-byte Spill
	leaq	.L.str116, %rax
	movq	%rax, 1768(%rsp)        # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, 1760(%rsp)        # 8-byte Spill
	leaq	.L.str115, %rax
	movq	%rax, 1752(%rsp)        # 8-byte Spill
	leaq	.L.str1488, %rax
	movq	%rax, 1744(%rsp)        # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, 1736(%rsp)        # 8-byte Spill
	leaq	.L.str110, %rax
	movq	%rax, 1728(%rsp)        # 8-byte Spill
	leaq	.L.str501, %rax
	movq	%rax, 1720(%rsp)        # 8-byte Spill
	leaq	.L.str502, %rax
	movq	%rax, 1712(%rsp)        # 8-byte Spill
	movabsq	$682, %rax              # imm = 0x2AA
	movq	%rax, 1704(%rsp)        # 8-byte Spill
	movabsq	$9, %rax
	movq	%rax, 1696(%rsp)        # 8-byte Spill
	leaq	.L.str95, %rax
	movq	%rax, 1688(%rsp)        # 8-byte Spill
	leaq	.L.str98, %rax
	movq	%rax, 1680(%rsp)        # 8-byte Spill
	movabsq	$13, %rax
	movq	%rax, 1672(%rsp)        # 8-byte Spill
	leaq	.L.str97, %rax
	movq	%rax, 1664(%rsp)        # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, 1656(%rsp)        # 8-byte Spill
	leaq	.L.str69143, %rax
	movq	%rax, 1648(%rsp)        # 8-byte Spill
	leaq	.L.str96, %rax
	movq	%rax, 1640(%rsp)        # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 1632(%rsp)        # 8-byte Spill
	leaq	.L.str34108, %rax
	movq	%rax, 1624(%rsp)        # 8-byte Spill
	leaq	.L.str94, %rax
	movq	%rax, 1616(%rsp)        # 8-byte Spill
	leaq	.L.str882, %rax
	movq	%rax, 1608(%rsp)        # 8-byte Spill
	leaq	.L.str37111, %rax
	movq	%rax, 1600(%rsp)        # 8-byte Spill
	leaq	.L.str27101, %rax
	movq	%rax, 1592(%rsp)        # 8-byte Spill
	movabsq	$35, %rax
	movq	%rax, 1584(%rsp)        # 8-byte Spill
	leaq	.L.str36110, %rax
	movq	%rax, 1576(%rsp)        # 8-byte Spill
	leaq	.L.str31105, %rax
	movq	%rax, 1568(%rsp)        # 8-byte Spill
	leaq	.L.str486, %rax
	movq	%rax, 1560(%rsp)        # 8-byte Spill
	leaq	.L.str35109, %rax
	movq	%rax, 1552(%rsp)        # 8-byte Spill
	leaq	.L.str51125, %rax
	movq	%rax, 1544(%rsp)        # 8-byte Spill
	movabsq	$12, %rax
	movq	%rax, 1536(%rsp)        # 8-byte Spill
	leaq	.L.str114, %rax
	vxorps	%xmm1, %xmm1, %xmm1
	movq	%rax, 1528(%rsp)        # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 1520(%rsp)        # 8-byte Spill
	movabsq	$48, %rax
	.loc	2 682 0                 # eispack.c:682:0
.Ltmp515:
	movq	%rax, 1512(%rsp)        # 8-byte Spill
	movq	1520(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 1504(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 1496(%rsp)        # 8-byte Spill
	movq	%r14, %rsi
	movq	%rdx, 1488(%rsp)        # 8-byte Spill
	movq	%r9, %rdx
	movq	1752(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 1480(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	1512(%rsp), %rax        # 8-byte Reload
	movq	%r8, 1472(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 1464(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	vmovsd	%xmm0, 1456(%rsp)       # 8-byte Spill
	movl	%ebp, 1452(%rsp)        # 4-byte Spill
	movl	%r12d, 1448(%rsp)       # 4-byte Spill
	movq	%r13, 1440(%rsp)        # 8-byte Spill
	vmovsd	%xmm1, 1432(%rsp)       # 8-byte Spill
	movq	%r15, 1424(%rsp)        # 8-byte Spill
	movq	%r14, 1416(%rsp)        # 8-byte Spill
	movq	%r10, 1408(%rsp)        # 8-byte Spill
	movq	%r11, 1400(%rsp)        # 8-byte Spill
	movq	%rbx, 1392(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	1472(%rsp), %rdi        # 8-byte Reload
	movq	1776(%rsp), %rsi        # 8-byte Reload
	movq	1496(%rsp), %rdx        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1768(%rsp), %r8         # 8-byte Reload
	movq	1480(%rsp), %r9         # 8-byte Reload
	movq	1464(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1480(%rsp), %rdi        # 8-byte Reload
	movq	1776(%rsp), %rsi        # 8-byte Reload
	movq	1496(%rsp), %rdx        # 8-byte Reload
	movq	1496(%rsp), %rcx        # 8-byte Reload
	movq	1744(%rsp), %r8         # 8-byte Reload
	movq	1480(%rsp), %r9         # 8-byte Reload
	movq	1528(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1440(%rsp), %rdi        # 8-byte Reload
	movq	1776(%rsp), %rsi        # 8-byte Reload
	movq	1816(%rsp), %rdx        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1752(%rsp), %r8         # 8-byte Reload
	movq	1496(%rsp), %r9         # 8-byte Reload
	movq	1528(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1520(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	1464(%rsp), %rdx        # 8-byte Reload
	movq	1720(%rsp), %rcx        # 8-byte Reload
	movq	1512(%rsp), %r8         # 8-byte Reload
	movl	1452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1472(%rsp), %rdi        # 8-byte Reload
	movq	1776(%rsp), %rsi        # 8-byte Reload
	movq	1496(%rsp), %rdx        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1728(%rsp), %r8         # 8-byte Reload
	movq	1480(%rsp), %r9         # 8-byte Reload
	movq	1464(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1480(%rsp), %rdi        # 8-byte Reload
	movq	1776(%rsp), %rsi        # 8-byte Reload
	vmovsd	1432(%rsp), %xmm0       # 8-byte Reload
	movq	1496(%rsp), %rdx        # 8-byte Reload
	movq	1744(%rsp), %rcx        # 8-byte Reload
	movq	1480(%rsp), %r8         # 8-byte Reload
	movq	1528(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1440(%rsp), %rdi        # 8-byte Reload
	movq	1776(%rsp), %rsi        # 8-byte Reload
	vmovsd	1456(%rsp), %xmm0       # 8-byte Reload
	movq	1480(%rsp), %rdx        # 8-byte Reload
	movq	1720(%rsp), %rcx        # 8-byte Reload
	movq	1496(%rsp), %r8         # 8-byte Reload
	movq	1528(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1704(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	1464(%rsp), %rdx        # 8-byte Reload
	movq	1552(%rsp), %rcx        # 8-byte Reload
	movq	1760(%rsp), %r8         # 8-byte Reload
	movl	1452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1480(%rsp), %rdi        # 8-byte Reload
	movq	1776(%rsp), %rsi        # 8-byte Reload
	movq	1816(%rsp), %rdx        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1752(%rsp), %r8         # 8-byte Reload
	movq	1496(%rsp), %r9         # 8-byte Reload
	movq	1504(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1816(%rsp), %rax        # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	1440(%rsp), %rdi        # 8-byte Reload
	movq	1808(%rsp), %rsi        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1552(%rsp), %r8         # 8-byte Reload
	movq	1496(%rsp), %r9         # 8-byte Reload
	movq	1504(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 1388(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	1704(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	1464(%rsp), %rdx        # 8-byte Reload
	movq	1576(%rsp), %rcx        # 8-byte Reload
	movq	1536(%rsp), %r8         # 8-byte Reload
	movl	1452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	2900(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	1472(%rsp), %rdi        # 8-byte Reload
	movq	1808(%rsp), %rsi        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1544(%rsp), %r8         # 8-byte Reload
	movq	1496(%rsp), %r9         # 8-byte Reload
	movq	1504(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	1388(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	1480(%rsp), %rdi        # 8-byte Reload
	movq	1808(%rsp), %rsi        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1552(%rsp), %r8         # 8-byte Reload
	movq	1496(%rsp), %r9         # 8-byte Reload
	movq	1504(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	1388(%rsp), %ebp        # 4-byte Reload
	movl	2900(%rsp), %r12d       # 4-byte Reload
	imull	%r12d, %ebp
	movl	%ebp, %esi
	movl	%esi, %edx
	movq	1440(%rsp), %rdi        # 8-byte Reload
	movq	1808(%rsp), %rsi        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1576(%rsp), %r8         # 8-byte Reload
	movq	1496(%rsp), %r9         # 8-byte Reload
	movq	1504(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%ebp, 1384(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	1704(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	1464(%rsp), %rdx        # 8-byte Reload
	movq	1568(%rsp), %rcx        # 8-byte Reload
	movq	1760(%rsp), %r8         # 8-byte Reload
	movl	1452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1480(%rsp), %rdi        # 8-byte Reload
	movq	1776(%rsp), %rsi        # 8-byte Reload
	movq	2728(%rsp), %rdx        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1560(%rsp), %r8         # 8-byte Reload
	movq	1496(%rsp), %r9         # 8-byte Reload
	movq	1504(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2728(%rsp), %rax        # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	1440(%rsp), %rdi        # 8-byte Reload
	movq	1808(%rsp), %rsi        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1568(%rsp), %r8         # 8-byte Reload
	movq	1496(%rsp), %r9         # 8-byte Reload
	movq	1504(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 1380(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	1704(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	1464(%rsp), %rdx        # 8-byte Reload
	movq	1592(%rsp), %rcx        # 8-byte Reload
	movq	1736(%rsp), %r8         # 8-byte Reload
	movl	1452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	1380(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	1472(%rsp), %rdi        # 8-byte Reload
	movq	1808(%rsp), %rsi        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1568(%rsp), %r8         # 8-byte Reload
	movq	1496(%rsp), %r9         # 8-byte Reload
	movq	1504(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	1384(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	1480(%rsp), %rdi        # 8-byte Reload
	movq	1808(%rsp), %rsi        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1576(%rsp), %r8         # 8-byte Reload
	movq	1496(%rsp), %r9         # 8-byte Reload
	movq	1504(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	1384(%rsp), %ebp        # 4-byte Reload
	movl	1380(%rsp), %r12d       # 4-byte Reload
	addl	%r12d, %ebp
	movl	%ebp, %esi
	movl	%esi, %edx
	movq	1440(%rsp), %rdi        # 8-byte Reload
	movq	1808(%rsp), %rsi        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1592(%rsp), %r8         # 8-byte Reload
	movq	1496(%rsp), %r9         # 8-byte Reload
	movq	1504(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%ebp, 1376(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	1704(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	1464(%rsp), %rdx        # 8-byte Reload
	movq	1600(%rsp), %rcx        # 8-byte Reload
	movq	1584(%rsp), %r8         # 8-byte Reload
	movl	1452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	1376(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	1480(%rsp), %rdi        # 8-byte Reload
	movq	1808(%rsp), %rsi        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1592(%rsp), %r8         # 8-byte Reload
	movq	1496(%rsp), %r9         # 8-byte Reload
	movq	1504(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	1376(%rsp), %ebp        # 4-byte Reload
	movslq	%ebp, %rax
	movq	1440(%rsp), %rdi        # 8-byte Reload
	movq	1776(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1600(%rsp), %r8         # 8-byte Reload
	movq	1496(%rsp), %r9         # 8-byte Reload
	movq	1504(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 1368(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	1704(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	1464(%rsp), %rdx        # 8-byte Reload
	movq	1616(%rsp), %rcx        # 8-byte Reload
	movq	1632(%rsp), %r8         # 8-byte Reload
	movl	1452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1472(%rsp), %rdi        # 8-byte Reload
	movq	1776(%rsp), %rsi        # 8-byte Reload
	movq	1368(%rsp), %rdx        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1600(%rsp), %r8         # 8-byte Reload
	movq	1496(%rsp), %r9         # 8-byte Reload
	movq	1504(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1480(%rsp), %rdi        # 8-byte Reload
	movq	1776(%rsp), %rsi        # 8-byte Reload
	movq	2888(%rsp), %rdx        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1608(%rsp), %r8         # 8-byte Reload
	movq	1496(%rsp), %r9         # 8-byte Reload
	movq	1504(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1368(%rsp), %rax        # 8-byte Reload
	shlq	$3, %rax
	movq	2888(%rsp), %rcx        # 8-byte Reload
	addq	%rax, %rcx
	movq	1440(%rsp), %rdi        # 8-byte Reload
	movq	1776(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	1480(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 1360(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	1616(%rsp), %r8         # 8-byte Reload
	movq	1496(%rsp), %r9         # 8-byte Reload
	movq	1504(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1704(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	1464(%rsp), %rdx        # 8-byte Reload
	movq	1688(%rsp), %rcx        # 8-byte Reload
	movq	1656(%rsp), %r8         # 8-byte Reload
	movl	1452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1480(%rsp), %rdi        # 8-byte Reload
	movq	1776(%rsp), %rsi        # 8-byte Reload
	movq	1360(%rsp), %rdx        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1616(%rsp), %r8         # 8-byte Reload
	movq	1496(%rsp), %r9         # 8-byte Reload
	movq	1504(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2888(%rsp), %rax        # 8-byte Reload
	movq	1368(%rsp), %rcx        # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
	movq	1440(%rsp), %rdi        # 8-byte Reload
	movq	1776(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 1352(%rsp)       # 8-byte Spill
	movq	1480(%rsp), %rdx        # 8-byte Reload
	movq	1688(%rsp), %rcx        # 8-byte Reload
	movq	1496(%rsp), %r8         # 8-byte Reload
	movq	1504(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1704(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	1464(%rsp), %rdx        # 8-byte Reload
	movq	1640(%rsp), %rcx        # 8-byte Reload
	movq	1736(%rsp), %r8         # 8-byte Reload
	movl	1452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1472(%rsp), %rdi        # 8-byte Reload
	movq	1776(%rsp), %rsi        # 8-byte Reload
	movq	1840(%rsp), %rdx        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1624(%rsp), %r8         # 8-byte Reload
	movq	1496(%rsp), %r9         # 8-byte Reload
	movq	1504(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1480(%rsp), %rdi        # 8-byte Reload
	movq	1776(%rsp), %rsi        # 8-byte Reload
	movq	1816(%rsp), %rdx        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1752(%rsp), %r8         # 8-byte Reload
	movq	1496(%rsp), %r9         # 8-byte Reload
	movq	1504(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1816(%rsp), %rax        # 8-byte Reload
	movq	1840(%rsp), %rcx        # 8-byte Reload
	addq	%rcx, %rax
	movq	1440(%rsp), %rdi        # 8-byte Reload
	movq	1776(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1640(%rsp), %r8         # 8-byte Reload
	movq	1496(%rsp), %r9         # 8-byte Reload
	movq	1504(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 1344(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	1704(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	1464(%rsp), %rdx        # 8-byte Reload
	movq	1664(%rsp), %rcx        # 8-byte Reload
	movq	1632(%rsp), %r8         # 8-byte Reload
	movl	1452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1472(%rsp), %rdi        # 8-byte Reload
	movq	1776(%rsp), %rsi        # 8-byte Reload
	movq	1344(%rsp), %rdx        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1640(%rsp), %r8         # 8-byte Reload
	movq	1496(%rsp), %r9         # 8-byte Reload
	movq	1504(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1480(%rsp), %rdi        # 8-byte Reload
	movq	1776(%rsp), %rsi        # 8-byte Reload
	movq	2872(%rsp), %rdx        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1648(%rsp), %r8         # 8-byte Reload
	movq	1496(%rsp), %r9         # 8-byte Reload
	movq	1504(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1344(%rsp), %rax        # 8-byte Reload
	shlq	$3, %rax
	movq	2872(%rsp), %rcx        # 8-byte Reload
	addq	%rax, %rcx
	movq	1440(%rsp), %rdi        # 8-byte Reload
	movq	1776(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	1480(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 1336(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	1664(%rsp), %r8         # 8-byte Reload
	movq	1496(%rsp), %r9         # 8-byte Reload
	movq	1504(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1704(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	1464(%rsp), %rdx        # 8-byte Reload
	movq	1680(%rsp), %rcx        # 8-byte Reload
	movq	1656(%rsp), %r8         # 8-byte Reload
	movl	1452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1480(%rsp), %rdi        # 8-byte Reload
	movq	1776(%rsp), %rsi        # 8-byte Reload
	movq	1336(%rsp), %rdx        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1664(%rsp), %r8         # 8-byte Reload
	movq	1496(%rsp), %r9         # 8-byte Reload
	movq	1504(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2872(%rsp), %rax        # 8-byte Reload
	movq	1344(%rsp), %rcx        # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
	movq	1440(%rsp), %rdi        # 8-byte Reload
	movq	1776(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 1328(%rsp)       # 8-byte Spill
	movq	1480(%rsp), %rdx        # 8-byte Reload
	movq	1680(%rsp), %rcx        # 8-byte Reload
	movq	1496(%rsp), %r8         # 8-byte Reload
	movq	1504(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1704(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	1464(%rsp), %rdx        # 8-byte Reload
	movq	1712(%rsp), %rcx        # 8-byte Reload
	movq	1672(%rsp), %r8         # 8-byte Reload
	movl	1452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1472(%rsp), %rdi        # 8-byte Reload
	movq	1776(%rsp), %rsi        # 8-byte Reload
	vmovsd	1328(%rsp), %xmm0       # 8-byte Reload
	movq	1480(%rsp), %rdx        # 8-byte Reload
	movq	1680(%rsp), %rcx        # 8-byte Reload
	movq	1496(%rsp), %r8         # 8-byte Reload
	movq	1504(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1480(%rsp), %rdi        # 8-byte Reload
	movq	1776(%rsp), %rsi        # 8-byte Reload
	vmovsd	1352(%rsp), %xmm0       # 8-byte Reload
	movq	1480(%rsp), %rdx        # 8-byte Reload
	movq	1688(%rsp), %rcx        # 8-byte Reload
	movq	1496(%rsp), %r8         # 8-byte Reload
	movq	1504(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	1352(%rsp), %xmm0       # 8-byte Reload
	vmovsd	1328(%rsp), %xmm1       # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	1440(%rsp), %rdi        # 8-byte Reload
	movq	1776(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1480(%rsp), %rdx        # 8-byte Reload
	movq	1712(%rsp), %rcx        # 8-byte Reload
	movq	1496(%rsp), %r8         # 8-byte Reload
	movq	1504(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 1320(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	1704(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	1464(%rsp), %rdx        # 8-byte Reload
	movq	1728(%rsp), %rcx        # 8-byte Reload
	movq	1696(%rsp), %r8         # 8-byte Reload
	movl	1452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1472(%rsp), %rdi        # 8-byte Reload
	movq	1776(%rsp), %rsi        # 8-byte Reload
	vmovsd	1320(%rsp), %xmm0       # 8-byte Reload
	movq	1480(%rsp), %rdx        # 8-byte Reload
	movq	1712(%rsp), %rcx        # 8-byte Reload
	movq	1496(%rsp), %r8         # 8-byte Reload
	movq	1504(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1480(%rsp), %rdi        # 8-byte Reload
	movq	1776(%rsp), %rsi        # 8-byte Reload
	vmovsd	1456(%rsp), %xmm0       # 8-byte Reload
	movq	1480(%rsp), %rdx        # 8-byte Reload
	movq	1720(%rsp), %rcx        # 8-byte Reload
	movq	1496(%rsp), %r8         # 8-byte Reload
	movq	1504(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	1456(%rsp), %xmm0       # 8-byte Reload
	vmovsd	1320(%rsp), %xmm1       # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
	movq	1440(%rsp), %rdi        # 8-byte Reload
	movq	1776(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1480(%rsp), %rdx        # 8-byte Reload
	movq	1728(%rsp), %rcx        # 8-byte Reload
	movq	1496(%rsp), %r8         # 8-byte Reload
	movq	1504(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 1312(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
.Ltmp516:
	#DEBUG_VALUE: trbak1:s <- [RSP+1312]
	.loc	2 680 0                 # eispack.c:680:0
	movq	1392(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	1464(%rsp), %rdx        # 8-byte Reload
	movq	1768(%rsp), %rcx        # 8-byte Reload
	movq	1736(%rsp), %r8         # 8-byte Reload
	movl	1452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1472(%rsp), %rdi        # 8-byte Reload
	movq	1776(%rsp), %rsi        # 8-byte Reload
	movq	1480(%rsp), %rdx        # 8-byte Reload
	movq	1496(%rsp), %rcx        # 8-byte Reload
	movq	1744(%rsp), %r8         # 8-byte Reload
	movq	1496(%rsp), %r9         # 8-byte Reload
	movq	1504(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1480(%rsp), %rdi        # 8-byte Reload
	movq	1776(%rsp), %rsi        # 8-byte Reload
	movq	1816(%rsp), %rdx        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1752(%rsp), %r8         # 8-byte Reload
	movq	1496(%rsp), %r9         # 8-byte Reload
	movq	1504(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1816(%rsp), %rax        # 8-byte Reload
	addq	$1, %rax
	movq	1440(%rsp), %rdi        # 8-byte Reload
	movq	1776(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1768(%rsp), %r8         # 8-byte Reload
	movq	1496(%rsp), %r9         # 8-byte Reload
	movq	1504(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 1304(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	1392(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	1464(%rsp), %rdx        # 8-byte Reload
	movq	1800(%rsp), %rcx        # 8-byte Reload
	movq	1760(%rsp), %r8         # 8-byte Reload
	movl	1452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1480(%rsp), %rdi        # 8-byte Reload
	movq	1776(%rsp), %rsi        # 8-byte Reload
	movq	1304(%rsp), %rdx        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1768(%rsp), %r8         # 8-byte Reload
	movq	1496(%rsp), %r9         # 8-byte Reload
	movq	1504(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1304(%rsp), %rax        # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	1440(%rsp), %rdi        # 8-byte Reload
	movq	1808(%rsp), %rsi        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1800(%rsp), %r8         # 8-byte Reload
	movq	1496(%rsp), %r9         # 8-byte Reload
	movq	1504(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 1300(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	1392(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	1464(%rsp), %rdx        # 8-byte Reload
	movq	1488(%rsp), %rcx        # 8-byte Reload
	movq	1784(%rsp), %r8         # 8-byte Reload
	movl	1452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	2736(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	1472(%rsp), %rdi        # 8-byte Reload
	movq	1808(%rsp), %rsi        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1792(%rsp), %r8         # 8-byte Reload
	movq	1496(%rsp), %r9         # 8-byte Reload
	movq	1504(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	1300(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	1480(%rsp), %rdi        # 8-byte Reload
	movq	1808(%rsp), %rsi        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1800(%rsp), %r8         # 8-byte Reload
	movq	1496(%rsp), %r9         # 8-byte Reload
	movq	1504(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	1300(%rsp), %ebp        # 4-byte Reload
	movl	2736(%rsp), %r12d       # 4-byte Reload
	cmpl	%r12d, %ebp
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	1440(%rsp), %rdi        # 8-byte Reload
	movq	1480(%rsp), %rsi        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1488(%rsp), %r8         # 8-byte Reload
	movq	1496(%rsp), %r9         # 8-byte Reload
	movq	1504(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 1299(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	1392(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	1464(%rsp), %rdx        # 8-byte Reload
	movq	1424(%rsp), %rcx        # 8-byte Reload
	movq	1472(%rsp), %r8         # 8-byte Reload
	movl	1452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1408(%rsp), %rdi        # 8-byte Reload
	movq	1496(%rsp), %rsi        # 8-byte Reload
	movq	1496(%rsp), %rdx        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1400(%rsp), %r8         # 8-byte Reload
	movq	1496(%rsp), %r9         # 8-byte Reload
	movq	1504(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1472(%rsp), %rdi        # 8-byte Reload
	movq	1496(%rsp), %rsi        # 8-byte Reload
	movq	1496(%rsp), %rdx        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1464(%rsp), %r8         # 8-byte Reload
	movq	1496(%rsp), %r9         # 8-byte Reload
	movq	1504(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	1299(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	1480(%rsp), %rdi        # 8-byte Reload
	movq	1480(%rsp), %rsi        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1488(%rsp), %r8         # 8-byte Reload
	movq	1496(%rsp), %r9         # 8-byte Reload
	movq	1504(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	1299(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	movq	1304(%rsp), %rcx        # 8-byte Reload
	vmovsd	1312(%rsp), %xmm0       # 8-byte Reload
	movq	%rcx, 1832(%rsp)        # 8-byte Spill
	vmovsd	%xmm0, 1824(%rsp)       # 8-byte Spill
	jne	.LBB11_6
	jmp	.LBB11_5
.Ltmp517:
.LBB11_6:                               # %.lr.ph6
                                        #   in Loop: Header=BB11_4 Depth=2
	movabsq	$0, %rax
	movabsq	$1, %rcx
	leaq	.L.str506, %r8
	leaq	.L.str781, %rdx
	movabsq	$685, %rsi              # imm = 0x2AD
	leaq	.L.str475, %rdi
	leaq	.L.str504, %r9
	leaq	.L.str505, %r10
	movabsq	$2, %r11
	movl	$0, %ebx
	movl	$1, %ebp
	movabsq	$19134, %r14            # imm = 0x4ABE
	movabsq	$64, %r15
	leaq	.L.str127, %r12
	movabsq	$32, %r13
	movq	%rax, 1288(%rsp)        # 8-byte Spill
	leaq	.L.str126, %rax
	movq	%rax, 1280(%rsp)        # 8-byte Spill
	movabsq	$35, %rax
	movq	%rax, 1272(%rsp)        # 8-byte Spill
	leaq	.L.str118, %rax
	movq	%rax, 1264(%rsp)        # 8-byte Spill
	leaq	.L.str51125, %rax
	movq	%rax, 1256(%rsp)        # 8-byte Spill
	movabsq	$687, %rax              # imm = 0x2AF
	movq	%rax, 1248(%rsp)        # 8-byte Spill
	movabsq	$12, %rax
	movq	%rax, 1240(%rsp)        # 8-byte Spill
	leaq	.L.str496, %rax
	movq	%rax, 1232(%rsp)        # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, 1224(%rsp)        # 8-byte Spill
	leaq	.L.str121, %rax
	movq	%rax, 1216(%rsp)        # 8-byte Spill
	leaq	.L.str119, %rax
	movq	%rax, 1208(%rsp)        # 8-byte Spill
	leaq	.L.str120, %rax
	movq	%rax, 1200(%rsp)        # 8-byte Spill
	movabsq	$684, %rax              # imm = 0x2AC
	movq	%rax, 1192(%rsp)        # 8-byte Spill
	movabsq	$16, %rax
	movq	%rax, 1184(%rsp)        # 8-byte Spill
	leaq	.L.str1185, %rax
	movq	%rax, 1176(%rsp)        # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, 1168(%rsp)        # 8-byte Spill
	leaq	.L.str110, %rax
	movq	%rax, 1160(%rsp)        # 8-byte Spill
	leaq	.L.str111, %rax
	movq	%rax, 1152(%rsp)        # 8-byte Spill
	leaq	.L.str26100, %rax
	.loc	2 684 0                 # eispack.c:684:0
	movq	%rax, 1144(%rsp)        # 8-byte Spill
	movq	1192(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 1136(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	1136(%rsp), %rax        # 8-byte Reload
	movq	%rsi, 1128(%rsp)        # 8-byte Spill
	movq	%rax, %rsi
	movq	%rdx, 1120(%rsp)        # 8-byte Spill
	movq	%r9, %rdx
	movq	1152(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 1112(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	1168(%rsp), %rax        # 8-byte Reload
	movq	%r8, 1104(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 1096(%rsp)         # 8-byte Spill
	movl	%ebx, %r9d
	movl	$1, (%rsp)
	movq	%r14, 1088(%rsp)        # 8-byte Spill
	movl	%ebp, 1084(%rsp)        # 4-byte Spill
	movq	%r15, 1072(%rsp)        # 8-byte Spill
	movq	%r12, 1064(%rsp)        # 8-byte Spill
	movq	%r13, 1056(%rsp)        # 8-byte Spill
	movl	%ebx, 1052(%rsp)        # 4-byte Spill
	movq	%r10, 1040(%rsp)        # 8-byte Spill
	movq	%r11, 1032(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	1112(%rsp), %rdi        # 8-byte Reload
	movq	1072(%rsp), %rsi        # 8-byte Reload
	movq	2112(%rsp), %rdx        # 8-byte Reload
	movq	1112(%rsp), %rcx        # 8-byte Reload
	movq	1144(%rsp), %r8         # 8-byte Reload
	movq	1288(%rsp), %r9         # 8-byte Reload
	movq	1120(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2112(%rsp), %rax        # 8-byte Reload
	vmovsd	(%rax), %xmm0
	movq	1088(%rsp), %rdi        # 8-byte Reload
	movq	1072(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 1024(%rsp)       # 8-byte Spill
	movq	1112(%rsp), %rdx        # 8-byte Reload
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1288(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1192(%rsp), %rdi        # 8-byte Reload
	movq	1136(%rsp), %rsi        # 8-byte Reload
	movq	1096(%rsp), %rdx        # 8-byte Reload
	movq	1208(%rsp), %rcx        # 8-byte Reload
	movq	1184(%rsp), %r8         # 8-byte Reload
	movl	1052(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1032(%rsp), %rdi        # 8-byte Reload
	movq	1072(%rsp), %rsi        # 8-byte Reload
	vmovsd	1024(%rsp), %xmm0       # 8-byte Reload
	movq	1112(%rsp), %rdx        # 8-byte Reload
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1288(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1112(%rsp), %rdi        # 8-byte Reload
	movq	1072(%rsp), %rsi        # 8-byte Reload
	vmovsd	1312(%rsp), %xmm0       # 8-byte Reload
	movq	1112(%rsp), %rdx        # 8-byte Reload
	movq	1160(%rsp), %rcx        # 8-byte Reload
	movq	1288(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	1312(%rsp), %xmm0       # 8-byte Reload
	vmovsd	1024(%rsp), %xmm1       # 8-byte Reload
	vdivsd	%xmm1, %xmm0, %xmm2
	movq	1088(%rsp), %rdi        # 8-byte Reload
	movq	1072(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1112(%rsp), %rdx        # 8-byte Reload
	movq	1208(%rsp), %rcx        # 8-byte Reload
	movq	1288(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 1016(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	1192(%rsp), %rdi        # 8-byte Reload
	movq	1136(%rsp), %rsi        # 8-byte Reload
	movq	1096(%rsp), %rdx        # 8-byte Reload
	movq	1200(%rsp), %rcx        # 8-byte Reload
	movq	1168(%rsp), %r8         # 8-byte Reload
	movl	1052(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1112(%rsp), %rdi        # 8-byte Reload
	movq	1072(%rsp), %rsi        # 8-byte Reload
	movq	2424(%rsp), %rdx        # 8-byte Reload
	movq	1112(%rsp), %rcx        # 8-byte Reload
	movq	1176(%rsp), %r8         # 8-byte Reload
	movq	1288(%rsp), %r9         # 8-byte Reload
	movq	1120(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2424(%rsp), %rax        # 8-byte Reload
	vmovsd	(%rax), %xmm0
	movq	1088(%rsp), %rdi        # 8-byte Reload
	movq	1072(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 1008(%rsp)       # 8-byte Spill
	movq	1112(%rsp), %rdx        # 8-byte Reload
	movq	1200(%rsp), %rcx        # 8-byte Reload
	movq	1288(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1192(%rsp), %rdi        # 8-byte Reload
	movq	1136(%rsp), %rsi        # 8-byte Reload
	movq	1096(%rsp), %rdx        # 8-byte Reload
	movq	1216(%rsp), %rcx        # 8-byte Reload
	movq	1184(%rsp), %r8         # 8-byte Reload
	movl	1052(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1032(%rsp), %rdi        # 8-byte Reload
	movq	1072(%rsp), %rsi        # 8-byte Reload
	vmovsd	1008(%rsp), %xmm0       # 8-byte Reload
	movq	1112(%rsp), %rdx        # 8-byte Reload
	movq	1200(%rsp), %rcx        # 8-byte Reload
	movq	1288(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1112(%rsp), %rdi        # 8-byte Reload
	movq	1072(%rsp), %rsi        # 8-byte Reload
	vmovsd	1016(%rsp), %xmm0       # 8-byte Reload
	movq	1112(%rsp), %rdx        # 8-byte Reload
	movq	1208(%rsp), %rcx        # 8-byte Reload
	movq	1288(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	1016(%rsp), %xmm0       # 8-byte Reload
	vmovsd	1008(%rsp), %xmm1       # 8-byte Reload
	vdivsd	%xmm1, %xmm0, %xmm2
	movq	1088(%rsp), %rdi        # 8-byte Reload
	movq	1072(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1112(%rsp), %rdx        # 8-byte Reload
	movq	1216(%rsp), %rcx        # 8-byte Reload
	movq	1288(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 1000(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
.Ltmp518:
	#DEBUG_VALUE: trbak1:s <- [RSP+1000]
	#DEBUG_VALUE: trbak1:k <- 0
	.loc	2 687 0                 # eispack.c:687:0
	movq	1248(%rsp), %rdi        # 8-byte Reload
	movq	1136(%rsp), %rsi        # 8-byte Reload
	movq	1096(%rsp), %rdx        # 8-byte Reload
	movq	1264(%rsp), %rcx        # 8-byte Reload
	movq	1224(%rsp), %r8         # 8-byte Reload
	movl	1052(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1112(%rsp), %rdi        # 8-byte Reload
	movq	1072(%rsp), %rsi        # 8-byte Reload
	movq	2096(%rsp), %rdx        # 8-byte Reload
	movq	1112(%rsp), %rcx        # 8-byte Reload
	movq	1232(%rsp), %r8         # 8-byte Reload
	movq	1288(%rsp), %r9         # 8-byte Reload
	movq	1120(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2096(%rsp), %rax        # 8-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %ebp
	movl	%ebp, %edx
	movq	1088(%rsp), %rdi        # 8-byte Reload
	movq	1056(%rsp), %rsi        # 8-byte Reload
	movq	1112(%rsp), %rcx        # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movq	1288(%rsp), %r9         # 8-byte Reload
	movq	1120(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebx, 996(%rsp)         # 4-byte Spill
	callq	trace_logger_log_int
	movq	1248(%rsp), %rdi        # 8-byte Reload
	movq	1136(%rsp), %rsi        # 8-byte Reload
	movq	1096(%rsp), %rdx        # 8-byte Reload
	movq	1280(%rsp), %rcx        # 8-byte Reload
	movq	1240(%rsp), %r8         # 8-byte Reload
	movl	1052(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	2900(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebx
	movl	%ebx, %edx
	movq	1032(%rsp), %rdi        # 8-byte Reload
	movq	1056(%rsp), %rsi        # 8-byte Reload
	movq	1112(%rsp), %rcx        # 8-byte Reload
	movq	1256(%rsp), %r8         # 8-byte Reload
	movq	1288(%rsp), %r9         # 8-byte Reload
	movq	1120(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	996(%rsp), %ebx         # 4-byte Reload
	movl	%ebx, %ebp
	movl	%ebp, %edx
	movq	1112(%rsp), %rdi        # 8-byte Reload
	movq	1056(%rsp), %rsi        # 8-byte Reload
	movq	1112(%rsp), %rcx        # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movq	1288(%rsp), %r9         # 8-byte Reload
	movq	1120(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	996(%rsp), %ebx         # 4-byte Reload
	movl	2900(%rsp), %ebp        # 4-byte Reload
	imull	%ebp, %ebx
.Ltmp519:
	.loc	2 685 0                 # eispack.c:685:0
	movl	%ebx, %esi
	movl	%esi, %edx
	movq	1088(%rsp), %rdi        # 8-byte Reload
	movq	1056(%rsp), %rsi        # 8-byte Reload
	movq	1112(%rsp), %rcx        # 8-byte Reload
	movq	1280(%rsp), %r8         # 8-byte Reload
	movq	1288(%rsp), %r9         # 8-byte Reload
	movq	1120(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%ebx, 992(%rsp)         # 4-byte Spill
	callq	trace_logger_log_int
	movq	1128(%rsp), %rdi        # 8-byte Reload
	movq	1136(%rsp), %rsi        # 8-byte Reload
	movq	1096(%rsp), %rdx        # 8-byte Reload
	movq	1064(%rsp), %rcx        # 8-byte Reload
	movq	1272(%rsp), %r8         # 8-byte Reload
	movl	1052(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	992(%rsp), %r9d         # 4-byte Reload
	movl	%r9d, %ebx
	movl	%ebx, %edx
	movq	1112(%rsp), %rdi        # 8-byte Reload
	movq	1056(%rsp), %rsi        # 8-byte Reload
	movq	1112(%rsp), %rcx        # 8-byte Reload
	movq	1280(%rsp), %r8         # 8-byte Reload
	movq	1288(%rsp), %r9         # 8-byte Reload
	movq	1120(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	992(%rsp), %ebx         # 4-byte Reload
	movslq	%ebx, %rax
	movq	1088(%rsp), %rdi        # 8-byte Reload
	movq	1072(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	1112(%rsp), %rcx        # 8-byte Reload
	movq	1064(%rsp), %r8         # 8-byte Reload
	movq	1288(%rsp), %r9         # 8-byte Reload
	movq	1120(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 984(%rsp)         # 8-byte Spill
	callq	trace_logger_log_int
	movq	1128(%rsp), %rdi        # 8-byte Reload
	movq	1136(%rsp), %rsi        # 8-byte Reload
	movq	1096(%rsp), %rdx        # 8-byte Reload
	movq	1040(%rsp), %rcx        # 8-byte Reload
	movq	1032(%rsp), %r8         # 8-byte Reload
	movl	1052(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1112(%rsp), %rdi        # 8-byte Reload
	movq	1288(%rsp), %rsi        # 8-byte Reload
	movq	1288(%rsp), %rdx        # 8-byte Reload
	movq	1112(%rsp), %rcx        # 8-byte Reload
	movq	1104(%rsp), %r8         # 8-byte Reload
	movq	1288(%rsp), %r9         # 8-byte Reload
	movq	1120(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1288(%rsp), %rax        # 8-byte Reload
	movq	%rax, 976(%rsp)         # 8-byte Spill
.Ltmp520:
.LBB11_7:                               #   Parent Loop BB11_2 Depth=1
                                        #     Parent Loop BB11_4 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movq	976(%rsp), %rax         # 8-byte Reload
	movabsq	$1, %rcx
	leaq	.L.str511, %rdx
	movabsq	$0, %rsi
	leaq	.L.str781, %rdi
	movabsq	$2, %r8
	leaq	.L.str506, %r9
	movabsq	$3, %r10
	leaq	.L.str498, %r11
	movabsq	$685, %rbx              # imm = 0x2AD
	leaq	.L.str475, %r14
	leaq	.L.str512, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 968(%rsp)         # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 960(%rsp)         # 8-byte Spill
	leaq	.L.str510, %rax
	movq	%rax, 952(%rsp)         # 8-byte Spill
	leaq	.L.str488, %rax
	movq	%rax, 944(%rsp)         # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 936(%rsp)         # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 928(%rsp)         # 8-byte Spill
	leaq	.L.str508, %rax
	movq	%rax, 920(%rsp)         # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, 912(%rsp)         # 8-byte Spill
	leaq	.L.str507, %rax
	movq	%rax, 904(%rsp)         # 8-byte Spill
	leaq	.L.str1488, %rax
	movq	%rax, 896(%rsp)         # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, 888(%rsp)         # 8-byte Spill
	leaq	.L.str156, %rax
	movq	%rax, 880(%rsp)         # 8-byte Spill
	leaq	.L.str140, %rax
	movq	%rax, 872(%rsp)         # 8-byte Spill
	movabsq	$687, %rax              # imm = 0x2AF
	movq	%rax, 864(%rsp)         # 8-byte Spill
	leaq	.L.str509, %rax
	movq	%rax, 856(%rsp)         # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, 848(%rsp)         # 8-byte Spill
	leaq	.L.str141, %rax
	movq	%rax, 840(%rsp)         # 8-byte Spill
	leaq	.L.str150, %rax
	movq	%rax, 832(%rsp)         # 8-byte Spill
	movabsq	$9, %rax
	movq	%rax, 824(%rsp)         # 8-byte Spill
	leaq	.L.str121, %rax
	movq	%rax, 816(%rsp)         # 8-byte Spill
	leaq	.L.str149, %rax
	movq	%rax, 808(%rsp)         # 8-byte Spill
	movabsq	$13, %rax
	movq	%rax, 800(%rsp)         # 8-byte Spill
	leaq	.L.str148, %rax
	movq	%rax, 792(%rsp)         # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, 784(%rsp)         # 8-byte Spill
	leaq	.L.str882, %rax
	movq	%rax, 776(%rsp)         # 8-byte Spill
	leaq	.L.str147, %rax
	movq	%rax, 768(%rsp)         # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 760(%rsp)         # 8-byte Spill
	leaq	.L.str146, %rax
	movq	%rax, 752(%rsp)         # 8-byte Spill
	movabsq	$35, %rax
	movq	%rax, 744(%rsp)         # 8-byte Spill
	leaq	.L.str143, %rax
	movq	%rax, 736(%rsp)         # 8-byte Spill
	leaq	.L.str144, %rax
	movq	%rax, 728(%rsp)         # 8-byte Spill
	leaq	.L.str486, %rax
	movq	%rax, 720(%rsp)         # 8-byte Spill
	leaq	.L.str142, %rax
	movq	%rax, 712(%rsp)         # 8-byte Spill
	leaq	.L.str51125, %rax
	movq	%rax, 704(%rsp)         # 8-byte Spill
	movabsq	$12, %rax
	movq	%rax, 696(%rsp)         # 8-byte Spill
	leaq	.L.str69143, %rax
	movq	%rax, 688(%rsp)         # 8-byte Spill
	leaq	.L.str139, %rax
	movq	%rax, 680(%rsp)         # 8-byte Spill
	leaq	.L.str127, %rax
	movq	%rax, 672(%rsp)         # 8-byte Spill
	leaq	.L.str504, %rax
	movq	%rax, 664(%rsp)         # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 656(%rsp)         # 8-byte Spill
	movabsq	$48, %rax
	.loc	2 687 0                 # eispack.c:687:0
.Ltmp521:
	movq	%rax, 648(%rsp)         # 8-byte Spill
	movq	656(%rsp), %rax         # 8-byte Reload
	movq	%rdi, 640(%rsp)         # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 632(%rsp)         # 8-byte Spill
	movq	%r14, %rsi
	movq	%rdx, 624(%rsp)         # 8-byte Spill
	movq	%r9, %rdx
	movq	904(%rsp), %rax         # 8-byte Reload
	movq	%rcx, 616(%rsp)         # 8-byte Spill
	movq	%rax, %rcx
	movq	648(%rsp), %rax         # 8-byte Reload
	movq	%r8, 608(%rsp)          # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 600(%rsp)          # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r15, 592(%rsp)         # 8-byte Spill
	movl	%ebp, 588(%rsp)         # 4-byte Spill
	movl	%r12d, 584(%rsp)        # 4-byte Spill
	movq	%r13, 576(%rsp)         # 8-byte Spill
	movq	%r14, 568(%rsp)         # 8-byte Spill
	movq	%rbx, 560(%rsp)         # 8-byte Spill
	movq	%r10, 552(%rsp)         # 8-byte Spill
	movq	%r11, 544(%rsp)         # 8-byte Spill
	callq	trace_logger_log0
	movq	608(%rsp), %rdi         # 8-byte Reload
	movq	928(%rsp), %rsi         # 8-byte Reload
	movq	632(%rsp), %rdx         # 8-byte Reload
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	920(%rsp), %r8          # 8-byte Reload
	movq	616(%rsp), %r9          # 8-byte Reload
	movq	600(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	616(%rsp), %rdi         # 8-byte Reload
	movq	928(%rsp), %rsi         # 8-byte Reload
	movq	632(%rsp), %rdx         # 8-byte Reload
	movq	632(%rsp), %rcx         # 8-byte Reload
	movq	896(%rsp), %r8          # 8-byte Reload
	movq	616(%rsp), %r9          # 8-byte Reload
	movq	664(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	576(%rsp), %rdi         # 8-byte Reload
	movq	928(%rsp), %rsi         # 8-byte Reload
	movq	968(%rsp), %rdx         # 8-byte Reload
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	904(%rsp), %r8          # 8-byte Reload
	movq	632(%rsp), %r9          # 8-byte Reload
	movq	664(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	864(%rsp), %rdi         # 8-byte Reload
	movq	568(%rsp), %rsi         # 8-byte Reload
	movq	600(%rsp), %rdx         # 8-byte Reload
	movq	680(%rsp), %rcx         # 8-byte Reload
	movq	888(%rsp), %r8          # 8-byte Reload
	movl	588(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	608(%rsp), %rdi         # 8-byte Reload
	movq	928(%rsp), %rsi         # 8-byte Reload
	movq	984(%rsp), %rdx         # 8-byte Reload
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	672(%rsp), %r8          # 8-byte Reload
	movq	632(%rsp), %r9          # 8-byte Reload
	movq	640(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	616(%rsp), %rdi         # 8-byte Reload
	movq	928(%rsp), %rsi         # 8-byte Reload
	movq	968(%rsp), %rdx         # 8-byte Reload
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	904(%rsp), %r8          # 8-byte Reload
	movq	632(%rsp), %r9          # 8-byte Reload
	movq	640(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	968(%rsp), %rax         # 8-byte Reload
	movq	984(%rsp), %rcx         # 8-byte Reload
	addq	%rcx, %rax
	movq	576(%rsp), %rdi         # 8-byte Reload
	movq	928(%rsp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	680(%rsp), %r8          # 8-byte Reload
	movq	632(%rsp), %r9          # 8-byte Reload
	movq	640(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 536(%rsp)         # 8-byte Spill
	callq	trace_logger_log_int
	movq	864(%rsp), %rdi         # 8-byte Reload
	movq	568(%rsp), %rsi         # 8-byte Reload
	movq	600(%rsp), %rdx         # 8-byte Reload
	movq	872(%rsp), %rcx         # 8-byte Reload
	movq	760(%rsp), %r8          # 8-byte Reload
	movl	588(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	608(%rsp), %rdi         # 8-byte Reload
	movq	928(%rsp), %rsi         # 8-byte Reload
	movq	536(%rsp), %rdx         # 8-byte Reload
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	680(%rsp), %r8          # 8-byte Reload
	movq	632(%rsp), %r9          # 8-byte Reload
	movq	640(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	616(%rsp), %rdi         # 8-byte Reload
	movq	928(%rsp), %rsi         # 8-byte Reload
	movq	2872(%rsp), %rdx        # 8-byte Reload
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	688(%rsp), %r8          # 8-byte Reload
	movq	632(%rsp), %r9          # 8-byte Reload
	movq	640(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	536(%rsp), %rax         # 8-byte Reload
	shlq	$3, %rax
	movq	2872(%rsp), %rcx        # 8-byte Reload
	addq	%rax, %rcx
	movq	576(%rsp), %rdi         # 8-byte Reload
	movq	928(%rsp), %rsi         # 8-byte Reload
	movq	%rcx, %rdx
	movq	616(%rsp), %rax         # 8-byte Reload
	movq	%rcx, 528(%rsp)         # 8-byte Spill
	movq	%rax, %rcx
	movq	872(%rsp), %r8          # 8-byte Reload
	movq	632(%rsp), %r9          # 8-byte Reload
	movq	640(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	864(%rsp), %rdi         # 8-byte Reload
	movq	568(%rsp), %rsi         # 8-byte Reload
	movq	600(%rsp), %rdx         # 8-byte Reload
	movq	840(%rsp), %rcx         # 8-byte Reload
	movq	784(%rsp), %r8          # 8-byte Reload
	movl	588(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	616(%rsp), %rdi         # 8-byte Reload
	movq	928(%rsp), %rsi         # 8-byte Reload
	movq	528(%rsp), %rdx         # 8-byte Reload
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	872(%rsp), %r8          # 8-byte Reload
	movq	632(%rsp), %r9          # 8-byte Reload
	movq	640(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2872(%rsp), %rax        # 8-byte Reload
	movq	536(%rsp), %rcx         # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
	movq	576(%rsp), %rdi         # 8-byte Reload
	movq	928(%rsp), %rsi         # 8-byte Reload
	vmovsd	%xmm0, 520(%rsp)        # 8-byte Spill
	movq	616(%rsp), %rdx         # 8-byte Reload
	movq	840(%rsp), %rcx         # 8-byte Reload
	movq	632(%rsp), %r8          # 8-byte Reload
	movq	640(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	864(%rsp), %rdi         # 8-byte Reload
	movq	568(%rsp), %rsi         # 8-byte Reload
	movq	600(%rsp), %rdx         # 8-byte Reload
	movq	712(%rsp), %rcx         # 8-byte Reload
	movq	912(%rsp), %r8          # 8-byte Reload
	movl	588(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	616(%rsp), %rdi         # 8-byte Reload
	movq	928(%rsp), %rsi         # 8-byte Reload
	movq	968(%rsp), %rdx         # 8-byte Reload
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	904(%rsp), %r8          # 8-byte Reload
	movq	632(%rsp), %r9          # 8-byte Reload
	movq	640(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	968(%rsp), %rax         # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	576(%rsp), %rdi         # 8-byte Reload
	movq	960(%rsp), %rsi         # 8-byte Reload
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	712(%rsp), %r8          # 8-byte Reload
	movq	632(%rsp), %r9          # 8-byte Reload
	movq	640(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 516(%rsp)         # 4-byte Spill
	callq	trace_logger_log_int
	movq	864(%rsp), %rdi         # 8-byte Reload
	movq	568(%rsp), %rsi         # 8-byte Reload
	movq	600(%rsp), %rdx         # 8-byte Reload
	movq	736(%rsp), %rcx         # 8-byte Reload
	movq	696(%rsp), %r8          # 8-byte Reload
	movl	588(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	2900(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	608(%rsp), %rdi         # 8-byte Reload
	movq	960(%rsp), %rsi         # 8-byte Reload
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	704(%rsp), %r8          # 8-byte Reload
	movq	632(%rsp), %r9          # 8-byte Reload
	movq	640(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	516(%rsp), %ebp         # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	616(%rsp), %rdi         # 8-byte Reload
	movq	960(%rsp), %rsi         # 8-byte Reload
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	712(%rsp), %r8          # 8-byte Reload
	movq	632(%rsp), %r9          # 8-byte Reload
	movq	640(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	516(%rsp), %ebp         # 4-byte Reload
	movl	2900(%rsp), %r12d       # 4-byte Reload
	imull	%r12d, %ebp
	movl	%ebp, %esi
	movl	%esi, %edx
	movq	576(%rsp), %rdi         # 8-byte Reload
	movq	960(%rsp), %rsi         # 8-byte Reload
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	736(%rsp), %r8          # 8-byte Reload
	movq	632(%rsp), %r9          # 8-byte Reload
	movq	640(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%ebp, 512(%rsp)         # 4-byte Spill
	callq	trace_logger_log_int
	movq	864(%rsp), %rdi         # 8-byte Reload
	movq	568(%rsp), %rsi         # 8-byte Reload
	movq	600(%rsp), %rdx         # 8-byte Reload
	movq	728(%rsp), %rcx         # 8-byte Reload
	movq	912(%rsp), %r8          # 8-byte Reload
	movl	588(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	616(%rsp), %rdi         # 8-byte Reload
	movq	928(%rsp), %rsi         # 8-byte Reload
	movq	2728(%rsp), %rdx        # 8-byte Reload
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	720(%rsp), %r8          # 8-byte Reload
	movq	632(%rsp), %r9          # 8-byte Reload
	movq	640(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2728(%rsp), %rax        # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	576(%rsp), %rdi         # 8-byte Reload
	movq	960(%rsp), %rsi         # 8-byte Reload
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	728(%rsp), %r8          # 8-byte Reload
	movq	632(%rsp), %r9          # 8-byte Reload
	movq	640(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 508(%rsp)         # 4-byte Spill
	callq	trace_logger_log_int
	movq	864(%rsp), %rdi         # 8-byte Reload
	movq	568(%rsp), %rsi         # 8-byte Reload
	movq	600(%rsp), %rdx         # 8-byte Reload
	movq	752(%rsp), %rcx         # 8-byte Reload
	movq	888(%rsp), %r8          # 8-byte Reload
	movl	588(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	508(%rsp), %r9d         # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	608(%rsp), %rdi         # 8-byte Reload
	movq	960(%rsp), %rsi         # 8-byte Reload
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	728(%rsp), %r8          # 8-byte Reload
	movq	632(%rsp), %r9          # 8-byte Reload
	movq	640(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	512(%rsp), %ebp         # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	616(%rsp), %rdi         # 8-byte Reload
	movq	960(%rsp), %rsi         # 8-byte Reload
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	736(%rsp), %r8          # 8-byte Reload
	movq	632(%rsp), %r9          # 8-byte Reload
	movq	640(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	512(%rsp), %ebp         # 4-byte Reload
	movl	508(%rsp), %r12d        # 4-byte Reload
	addl	%r12d, %ebp
	movl	%ebp, %esi
	movl	%esi, %edx
	movq	576(%rsp), %rdi         # 8-byte Reload
	movq	960(%rsp), %rsi         # 8-byte Reload
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	752(%rsp), %r8          # 8-byte Reload
	movq	632(%rsp), %r9          # 8-byte Reload
	movq	640(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%ebp, 504(%rsp)         # 4-byte Spill
	callq	trace_logger_log_int
	movq	864(%rsp), %rdi         # 8-byte Reload
	movq	568(%rsp), %rsi         # 8-byte Reload
	movq	600(%rsp), %rdx         # 8-byte Reload
	movq	768(%rsp), %rcx         # 8-byte Reload
	movq	744(%rsp), %r8          # 8-byte Reload
	movl	588(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	504(%rsp), %r9d         # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	616(%rsp), %rdi         # 8-byte Reload
	movq	960(%rsp), %rsi         # 8-byte Reload
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	752(%rsp), %r8          # 8-byte Reload
	movq	632(%rsp), %r9          # 8-byte Reload
	movq	640(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	504(%rsp), %ebp         # 4-byte Reload
	movslq	%ebp, %rax
	movq	576(%rsp), %rdi         # 8-byte Reload
	movq	928(%rsp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	768(%rsp), %r8          # 8-byte Reload
	movq	632(%rsp), %r9          # 8-byte Reload
	movq	640(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 496(%rsp)         # 8-byte Spill
	callq	trace_logger_log_int
	movq	864(%rsp), %rdi         # 8-byte Reload
	movq	568(%rsp), %rsi         # 8-byte Reload
	movq	600(%rsp), %rdx         # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	760(%rsp), %r8          # 8-byte Reload
	movl	588(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	608(%rsp), %rdi         # 8-byte Reload
	movq	928(%rsp), %rsi         # 8-byte Reload
	movq	496(%rsp), %rdx         # 8-byte Reload
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	768(%rsp), %r8          # 8-byte Reload
	movq	632(%rsp), %r9          # 8-byte Reload
	movq	640(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	616(%rsp), %rdi         # 8-byte Reload
	movq	928(%rsp), %rsi         # 8-byte Reload
	movq	2888(%rsp), %rdx        # 8-byte Reload
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	776(%rsp), %r8          # 8-byte Reload
	movq	632(%rsp), %r9          # 8-byte Reload
	movq	640(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	496(%rsp), %rax         # 8-byte Reload
	shlq	$3, %rax
	movq	2888(%rsp), %rcx        # 8-byte Reload
	addq	%rax, %rcx
	movq	576(%rsp), %rdi         # 8-byte Reload
	movq	928(%rsp), %rsi         # 8-byte Reload
	movq	%rcx, %rdx
	movq	616(%rsp), %rax         # 8-byte Reload
	movq	%rcx, 488(%rsp)         # 8-byte Spill
	movq	%rax, %rcx
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	632(%rsp), %r9          # 8-byte Reload
	movq	640(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	864(%rsp), %rdi         # 8-byte Reload
	movq	568(%rsp), %rsi         # 8-byte Reload
	movq	600(%rsp), %rdx         # 8-byte Reload
	movq	808(%rsp), %rcx         # 8-byte Reload
	movq	784(%rsp), %r8          # 8-byte Reload
	movl	588(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	616(%rsp), %rdi         # 8-byte Reload
	movq	928(%rsp), %rsi         # 8-byte Reload
	movq	488(%rsp), %rdx         # 8-byte Reload
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	632(%rsp), %r9          # 8-byte Reload
	movq	640(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2888(%rsp), %rax        # 8-byte Reload
	movq	496(%rsp), %rcx         # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
	movq	576(%rsp), %rdi         # 8-byte Reload
	movq	928(%rsp), %rsi         # 8-byte Reload
	vmovsd	%xmm0, 480(%rsp)        # 8-byte Spill
	movq	616(%rsp), %rdx         # 8-byte Reload
	movq	808(%rsp), %rcx         # 8-byte Reload
	movq	632(%rsp), %r8          # 8-byte Reload
	movq	640(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	864(%rsp), %rdi         # 8-byte Reload
	movq	568(%rsp), %rsi         # 8-byte Reload
	movq	600(%rsp), %rdx         # 8-byte Reload
	movq	832(%rsp), %rcx         # 8-byte Reload
	movq	800(%rsp), %r8          # 8-byte Reload
	movl	588(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	608(%rsp), %rdi         # 8-byte Reload
	movq	928(%rsp), %rsi         # 8-byte Reload
	vmovsd	480(%rsp), %xmm0        # 8-byte Reload
	movq	616(%rsp), %rdx         # 8-byte Reload
	movq	808(%rsp), %rcx         # 8-byte Reload
	movq	632(%rsp), %r8          # 8-byte Reload
	movq	640(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	616(%rsp), %rdi         # 8-byte Reload
	movq	928(%rsp), %rsi         # 8-byte Reload
	vmovsd	1000(%rsp), %xmm0       # 8-byte Reload
	movq	616(%rsp), %rdx         # 8-byte Reload
	movq	816(%rsp), %rcx         # 8-byte Reload
	movq	632(%rsp), %r8          # 8-byte Reload
	movq	640(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	1000(%rsp), %xmm0       # 8-byte Reload
	vmovsd	480(%rsp), %xmm1        # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	576(%rsp), %rdi         # 8-byte Reload
	movq	928(%rsp), %rsi         # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	616(%rsp), %rdx         # 8-byte Reload
	movq	832(%rsp), %rcx         # 8-byte Reload
	movq	632(%rsp), %r8          # 8-byte Reload
	movq	640(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 472(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	864(%rsp), %rdi         # 8-byte Reload
	movq	568(%rsp), %rsi         # 8-byte Reload
	movq	600(%rsp), %rdx         # 8-byte Reload
	movq	880(%rsp), %rcx         # 8-byte Reload
	movq	824(%rsp), %r8          # 8-byte Reload
	movl	588(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	608(%rsp), %rdi         # 8-byte Reload
	movq	928(%rsp), %rsi         # 8-byte Reload
	vmovsd	472(%rsp), %xmm0        # 8-byte Reload
	movq	616(%rsp), %rdx         # 8-byte Reload
	movq	832(%rsp), %rcx         # 8-byte Reload
	movq	632(%rsp), %r8          # 8-byte Reload
	movq	640(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	616(%rsp), %rdi         # 8-byte Reload
	movq	928(%rsp), %rsi         # 8-byte Reload
	vmovsd	520(%rsp), %xmm0        # 8-byte Reload
	movq	616(%rsp), %rdx         # 8-byte Reload
	movq	840(%rsp), %rcx         # 8-byte Reload
	movq	632(%rsp), %r8          # 8-byte Reload
	movq	640(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	520(%rsp), %xmm0        # 8-byte Reload
	vmovsd	472(%rsp), %xmm1        # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
	movq	576(%rsp), %rdi         # 8-byte Reload
	movq	928(%rsp), %rsi         # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	616(%rsp), %rdx         # 8-byte Reload
	movq	880(%rsp), %rcx         # 8-byte Reload
	movq	632(%rsp), %r8          # 8-byte Reload
	movq	640(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 464(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	864(%rsp), %rdi         # 8-byte Reload
	movq	568(%rsp), %rsi         # 8-byte Reload
	movq	600(%rsp), %rdx         # 8-byte Reload
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	848(%rsp), %r8          # 8-byte Reload
	movl	588(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	608(%rsp), %rdi         # 8-byte Reload
	movq	928(%rsp), %rsi         # 8-byte Reload
	movq	528(%rsp), %rdx         # 8-byte Reload
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	872(%rsp), %r8          # 8-byte Reload
	movq	632(%rsp), %r9          # 8-byte Reload
	movq	640(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	616(%rsp), %rdi         # 8-byte Reload
	movq	928(%rsp), %rsi         # 8-byte Reload
	vmovsd	464(%rsp), %xmm0        # 8-byte Reload
	movq	616(%rsp), %rdx         # 8-byte Reload
	movq	880(%rsp), %rcx         # 8-byte Reload
	movq	632(%rsp), %r8          # 8-byte Reload
	movq	640(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	2872(%rsp), %rax        # 8-byte Reload
	movq	536(%rsp), %rcx         # 8-byte Reload
	vmovsd	464(%rsp), %xmm0        # 8-byte Reload
	vmovsd	%xmm0, (%rax,%rcx,8)
.Ltmp522:
	.loc	2 685 0                 # eispack.c:685:0
	movq	560(%rsp), %rdi         # 8-byte Reload
	movq	568(%rsp), %rsi         # 8-byte Reload
	movq	600(%rsp), %rdx         # 8-byte Reload
	movq	920(%rsp), %rcx         # 8-byte Reload
	movq	888(%rsp), %r8          # 8-byte Reload
	movl	588(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	608(%rsp), %rdi         # 8-byte Reload
	movq	928(%rsp), %rsi         # 8-byte Reload
	movq	616(%rsp), %rdx         # 8-byte Reload
	movq	632(%rsp), %rcx         # 8-byte Reload
	movq	896(%rsp), %r8          # 8-byte Reload
	movq	632(%rsp), %r9          # 8-byte Reload
	movq	640(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	616(%rsp), %rdi         # 8-byte Reload
	movq	928(%rsp), %rsi         # 8-byte Reload
	movq	968(%rsp), %rdx         # 8-byte Reload
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	904(%rsp), %r8          # 8-byte Reload
	movq	632(%rsp), %r9          # 8-byte Reload
	movq	640(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	968(%rsp), %rax         # 8-byte Reload
	addq	$1, %rax
	movq	576(%rsp), %rdi         # 8-byte Reload
	movq	928(%rsp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	920(%rsp), %r8          # 8-byte Reload
	movq	632(%rsp), %r9          # 8-byte Reload
	movq	640(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 456(%rsp)         # 8-byte Spill
	callq	trace_logger_log_int
	movq	560(%rsp), %rdi         # 8-byte Reload
	movq	568(%rsp), %rsi         # 8-byte Reload
	movq	600(%rsp), %rdx         # 8-byte Reload
	movq	952(%rsp), %rcx         # 8-byte Reload
	movq	912(%rsp), %r8          # 8-byte Reload
	movl	588(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	616(%rsp), %rdi         # 8-byte Reload
	movq	928(%rsp), %rsi         # 8-byte Reload
	movq	456(%rsp), %rdx         # 8-byte Reload
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	920(%rsp), %r8          # 8-byte Reload
	movq	632(%rsp), %r9          # 8-byte Reload
	movq	640(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	456(%rsp), %rax         # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	576(%rsp), %rdi         # 8-byte Reload
	movq	960(%rsp), %rsi         # 8-byte Reload
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	952(%rsp), %r8          # 8-byte Reload
	movq	632(%rsp), %r9          # 8-byte Reload
	movq	640(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 452(%rsp)         # 4-byte Spill
	callq	trace_logger_log_int
	movq	560(%rsp), %rdi         # 8-byte Reload
	movq	568(%rsp), %rsi         # 8-byte Reload
	movq	600(%rsp), %rdx         # 8-byte Reload
	movq	624(%rsp), %rcx         # 8-byte Reload
	movq	936(%rsp), %r8          # 8-byte Reload
	movl	588(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	2736(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	608(%rsp), %rdi         # 8-byte Reload
	movq	960(%rsp), %rsi         # 8-byte Reload
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	944(%rsp), %r8          # 8-byte Reload
	movq	632(%rsp), %r9          # 8-byte Reload
	movq	640(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	452(%rsp), %ebp         # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	616(%rsp), %rdi         # 8-byte Reload
	movq	960(%rsp), %rsi         # 8-byte Reload
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	952(%rsp), %r8          # 8-byte Reload
	movq	632(%rsp), %r9          # 8-byte Reload
	movq	640(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	452(%rsp), %ebp         # 4-byte Reload
	movl	2736(%rsp), %r12d       # 4-byte Reload
	cmpl	%r12d, %ebp
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	576(%rsp), %rdi         # 8-byte Reload
	movq	616(%rsp), %rsi         # 8-byte Reload
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	624(%rsp), %r8          # 8-byte Reload
	movq	632(%rsp), %r9          # 8-byte Reload
	movq	640(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 451(%rsp)          # 1-byte Spill
	callq	trace_logger_log_int
	movq	560(%rsp), %rdi         # 8-byte Reload
	movq	568(%rsp), %rsi         # 8-byte Reload
	movq	600(%rsp), %rdx         # 8-byte Reload
	movq	592(%rsp), %rcx         # 8-byte Reload
	movq	608(%rsp), %r8          # 8-byte Reload
	movl	588(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	552(%rsp), %rdi         # 8-byte Reload
	movq	632(%rsp), %rsi         # 8-byte Reload
	movq	632(%rsp), %rdx         # 8-byte Reload
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	544(%rsp), %r8          # 8-byte Reload
	movq	632(%rsp), %r9          # 8-byte Reload
	movq	640(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	608(%rsp), %rdi         # 8-byte Reload
	movq	632(%rsp), %rsi         # 8-byte Reload
	movq	632(%rsp), %rdx         # 8-byte Reload
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	600(%rsp), %r8          # 8-byte Reload
	movq	632(%rsp), %r9          # 8-byte Reload
	movq	640(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	451(%rsp), %al          # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	616(%rsp), %rdi         # 8-byte Reload
	movq	616(%rsp), %rsi         # 8-byte Reload
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	624(%rsp), %r8          # 8-byte Reload
	movq	632(%rsp), %r9          # 8-byte Reload
	movq	640(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	451(%rsp), %al          # 1-byte Reload
	testb	$1, %al
	movq	456(%rsp), %rcx         # 8-byte Reload
	movq	%rcx, 976(%rsp)         # 8-byte Spill
	jne	.LBB11_8
	jmp	.LBB11_7
.Ltmp523:
.LBB11_8:                               # %._crit_edge7
                                        #   in Loop: Header=BB11_4 Depth=2
	movabsq	$1, %rax
	leaq	.L.str514, %rcx
	movabsq	$0, %rdx
	leaq	.L.str781, %rsi
	movabsq	$2, %rdi
	leaq	.L.str114, %r8
	movabsq	$3, %r9
	leaq	.L.str175149, %r10
	movabsq	$677, %r11              # imm = 0x2A5
	leaq	.L.str475, %rbx
	leaq	.L.str498, %r14
	leaq	.L.str515, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 440(%rsp)         # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 432(%rsp)         # 8-byte Spill
	leaq	.L.str513, %rax
	movq	%rax, 424(%rsp)         # 8-byte Spill
	leaq	.L.str477, %rax
	movq	%rax, 416(%rsp)         # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 408(%rsp)         # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 400(%rsp)         # 8-byte Spill
	leaq	.L.str497, %rax
	movq	%rax, 392(%rsp)         # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, 384(%rsp)         # 8-byte Spill
	leaq	.L.str496, %rax
	movq	%rax, 376(%rsp)         # 8-byte Spill
	leaq	.L.str1488, %rax
	movq	%rax, 368(%rsp)         # 8-byte Spill
	movabsq	$8, %rax
	.loc	2 677 0                 # eispack.c:677:0
	movq	%rdi, 360(%rsp)         # 8-byte Spill
	movq	%r11, %rdi
	movq	%rsi, 352(%rsp)         # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, 344(%rsp)         # 8-byte Spill
	movq	%r14, %rdx
	movq	%rax, 336(%rsp)         # 8-byte Spill
	movq	392(%rsp), %rax         # 8-byte Reload
	movq	%rcx, 328(%rsp)         # 8-byte Spill
	movq	%rax, %rcx
	movq	336(%rsp), %rax         # 8-byte Reload
	movq	%r8, 320(%rsp)          # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 312(%rsp)          # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r15, 304(%rsp)         # 8-byte Spill
	movl	%ebp, 300(%rsp)         # 4-byte Spill
	movl	%r12d, 296(%rsp)        # 4-byte Spill
	movq	%r13, 288(%rsp)         # 8-byte Spill
	movq	%r14, 280(%rsp)         # 8-byte Spill
	movq	%rbx, 272(%rsp)         # 8-byte Spill
	movq	%r10, 264(%rsp)         # 8-byte Spill
	movq	%r11, 256(%rsp)         # 8-byte Spill
	callq	trace_logger_log0
	movq	360(%rsp), %rdi         # 8-byte Reload
	movq	400(%rsp), %rsi         # 8-byte Reload
	movq	440(%rsp), %rdx         # 8-byte Reload
	movq	344(%rsp), %rcx         # 8-byte Reload
	movq	368(%rsp), %r8          # 8-byte Reload
	movq	344(%rsp), %r9          # 8-byte Reload
	movq	352(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	440(%rsp), %rdi         # 8-byte Reload
	movq	400(%rsp), %rsi         # 8-byte Reload
	movq	2096(%rsp), %rdx        # 8-byte Reload
	movq	440(%rsp), %rcx         # 8-byte Reload
	movq	376(%rsp), %r8          # 8-byte Reload
	movq	344(%rsp), %r9          # 8-byte Reload
	movq	352(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2096(%rsp), %rax        # 8-byte Reload
	addq	$1, %rax
	movq	288(%rsp), %rdi         # 8-byte Reload
	movq	400(%rsp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	movq	440(%rsp), %rcx         # 8-byte Reload
	movq	392(%rsp), %r8          # 8-byte Reload
	movq	344(%rsp), %r9          # 8-byte Reload
	movq	352(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 248(%rsp)         # 8-byte Spill
	callq	trace_logger_log_int
	movq	256(%rsp), %rdi         # 8-byte Reload
	movq	272(%rsp), %rsi         # 8-byte Reload
	movq	280(%rsp), %rdx         # 8-byte Reload
	movq	424(%rsp), %rcx         # 8-byte Reload
	movq	384(%rsp), %r8          # 8-byte Reload
	movl	300(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	440(%rsp), %rdi         # 8-byte Reload
	movq	400(%rsp), %rsi         # 8-byte Reload
	movq	248(%rsp), %rdx         # 8-byte Reload
	movq	440(%rsp), %rcx         # 8-byte Reload
	movq	392(%rsp), %r8          # 8-byte Reload
	movq	344(%rsp), %r9          # 8-byte Reload
	movq	352(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	248(%rsp), %rax         # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	288(%rsp), %rdi         # 8-byte Reload
	movq	432(%rsp), %rsi         # 8-byte Reload
	movq	440(%rsp), %rcx         # 8-byte Reload
	movq	424(%rsp), %r8          # 8-byte Reload
	movq	344(%rsp), %r9          # 8-byte Reload
	movq	352(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 244(%rsp)         # 4-byte Spill
	callq	trace_logger_log_int
	movq	256(%rsp), %rdi         # 8-byte Reload
	movq	272(%rsp), %rsi         # 8-byte Reload
	movq	280(%rsp), %rdx         # 8-byte Reload
	movq	328(%rsp), %rcx         # 8-byte Reload
	movq	408(%rsp), %r8          # 8-byte Reload
	movl	300(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	3060(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	360(%rsp), %rdi         # 8-byte Reload
	movq	432(%rsp), %rsi         # 8-byte Reload
	movq	440(%rsp), %rcx         # 8-byte Reload
	movq	416(%rsp), %r8          # 8-byte Reload
	movq	344(%rsp), %r9          # 8-byte Reload
	movq	352(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	244(%rsp), %ebp         # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	440(%rsp), %rdi         # 8-byte Reload
	movq	432(%rsp), %rsi         # 8-byte Reload
	movq	440(%rsp), %rcx         # 8-byte Reload
	movq	424(%rsp), %r8          # 8-byte Reload
	movq	344(%rsp), %r9          # 8-byte Reload
	movq	352(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	244(%rsp), %ebp         # 4-byte Reload
	movl	3060(%rsp), %r12d       # 4-byte Reload
	cmpl	%r12d, %ebp
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	288(%rsp), %rdi         # 8-byte Reload
	movq	440(%rsp), %rsi         # 8-byte Reload
	movq	440(%rsp), %rcx         # 8-byte Reload
	movq	328(%rsp), %r8          # 8-byte Reload
	movq	344(%rsp), %r9          # 8-byte Reload
	movq	352(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 243(%rsp)          # 1-byte Spill
	callq	trace_logger_log_int
	movq	256(%rsp), %rdi         # 8-byte Reload
	movq	272(%rsp), %rsi         # 8-byte Reload
	movq	280(%rsp), %rdx         # 8-byte Reload
	movq	304(%rsp), %rcx         # 8-byte Reload
	movq	360(%rsp), %r8          # 8-byte Reload
	movl	300(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	312(%rsp), %rdi         # 8-byte Reload
	movq	344(%rsp), %rsi         # 8-byte Reload
	movq	344(%rsp), %rdx         # 8-byte Reload
	movq	440(%rsp), %rcx         # 8-byte Reload
	movq	264(%rsp), %r8          # 8-byte Reload
	movq	344(%rsp), %r9          # 8-byte Reload
	movq	352(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	360(%rsp), %rdi         # 8-byte Reload
	movq	344(%rsp), %rsi         # 8-byte Reload
	movq	344(%rsp), %rdx         # 8-byte Reload
	movq	440(%rsp), %rcx         # 8-byte Reload
	movq	320(%rsp), %r8          # 8-byte Reload
	movq	344(%rsp), %r9          # 8-byte Reload
	movq	352(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	243(%rsp), %al          # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	440(%rsp), %rdi         # 8-byte Reload
	movq	440(%rsp), %rsi         # 8-byte Reload
	movq	440(%rsp), %rcx         # 8-byte Reload
	movq	328(%rsp), %r8          # 8-byte Reload
	movq	344(%rsp), %r9          # 8-byte Reload
	movq	352(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	243(%rsp), %al          # 1-byte Reload
	testb	$1, %al
	movq	248(%rsp), %rcx         # 8-byte Reload
	movq	%rcx, 2104(%rsp)        # 8-byte Spill
	jne	.LBB11_9
	jmp	.LBB11_4
.Ltmp524:
.LBB11_9:                               # %.loopexit
                                        #   in Loop: Header=BB11_2 Depth=1
	movabsq	$1, %rax
	leaq	.L.str517, %rcx
	movabsq	$0, %rdx
	leaq	.L.str781, %rsi
	movabsq	$2, %rdi
	leaq	.L.str485, %r8
	movabsq	$3, %r9
	leaq	.L.str483, %r10
	movabsq	$671, %r11              # imm = 0x29F
	leaq	.L.str475, %rbx
	leaq	.L.str175149, %r14
	leaq	.L.str518, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 232(%rsp)         # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 224(%rsp)         # 8-byte Spill
	leaq	.L.str516, %rax
	movq	%rax, 216(%rsp)         # 8-byte Spill
	leaq	.L.str51125, %rax
	movq	%rax, 208(%rsp)         # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 200(%rsp)         # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 192(%rsp)         # 8-byte Spill
	leaq	.L.str487, %rax
	movq	%rax, 184(%rsp)         # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, 176(%rsp)         # 8-byte Spill
	leaq	.L.str489, %rax
	movq	%rax, 168(%rsp)         # 8-byte Spill
	leaq	.L.str488, %rax
	movq	%rax, 160(%rsp)         # 8-byte Spill
	leaq	.L.str1488, %rax
	movq	%rax, 152(%rsp)         # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, 144(%rsp)         # 8-byte Spill
	leaq	.L.str486, %rax
	.loc	2 671 0                 # eispack.c:671:0
	movq	%rdi, 136(%rsp)         # 8-byte Spill
	movq	%r11, %rdi
	movq	%rsi, 128(%rsp)         # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, 120(%rsp)         # 8-byte Spill
	movq	%r14, %rdx
	movq	%rax, 112(%rsp)         # 8-byte Spill
	movq	184(%rsp), %rax         # 8-byte Reload
	movq	%rcx, 104(%rsp)         # 8-byte Spill
	movq	%rax, %rcx
	movq	144(%rsp), %rax         # 8-byte Reload
	movq	%r8, 96(%rsp)           # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 88(%rsp)           # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r15, 80(%rsp)          # 8-byte Spill
	movl	%ebp, 76(%rsp)          # 4-byte Spill
	movl	%r12d, 72(%rsp)         # 4-byte Spill
	movq	%r13, 64(%rsp)          # 8-byte Spill
	movq	%r14, 56(%rsp)          # 8-byte Spill
	movq	%rbx, 48(%rsp)          # 8-byte Spill
	movq	%r10, 40(%rsp)          # 8-byte Spill
	movq	%r11, 32(%rsp)          # 8-byte Spill
	callq	trace_logger_log0
	movq	136(%rsp), %rdi         # 8-byte Reload
	movq	192(%rsp), %rsi         # 8-byte Reload
	movq	232(%rsp), %rdx         # 8-byte Reload
	movq	120(%rsp), %rcx         # 8-byte Reload
	movq	152(%rsp), %r8          # 8-byte Reload
	movq	120(%rsp), %r9          # 8-byte Reload
	movq	128(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	232(%rsp), %rdi         # 8-byte Reload
	movq	192(%rsp), %rsi         # 8-byte Reload
	movq	2728(%rsp), %rdx        # 8-byte Reload
	movq	232(%rsp), %rcx         # 8-byte Reload
	movq	112(%rsp), %r8          # 8-byte Reload
	movq	120(%rsp), %r9          # 8-byte Reload
	movq	128(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2728(%rsp), %rax        # 8-byte Reload
	addq	$1, %rax
	movq	64(%rsp), %rdi          # 8-byte Reload
	movq	192(%rsp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	movq	232(%rsp), %rcx         # 8-byte Reload
	movq	184(%rsp), %r8          # 8-byte Reload
	movq	120(%rsp), %r9          # 8-byte Reload
	movq	128(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 24(%rsp)          # 8-byte Spill
	callq	trace_logger_log_int
	movq	32(%rsp), %rdi          # 8-byte Reload
	movq	48(%rsp), %rsi          # 8-byte Reload
	movq	56(%rsp), %rdx          # 8-byte Reload
	movq	168(%rsp), %rcx         # 8-byte Reload
	movq	144(%rsp), %r8          # 8-byte Reload
	movl	76(%rsp), %r9d          # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	136(%rsp), %rdi         # 8-byte Reload
	movq	224(%rsp), %rsi         # 8-byte Reload
	movq	232(%rsp), %rdx         # 8-byte Reload
	movq	120(%rsp), %rcx         # 8-byte Reload
	movq	152(%rsp), %r8          # 8-byte Reload
	movq	120(%rsp), %r9          # 8-byte Reload
	movq	128(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	2736(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	232(%rsp), %rdi         # 8-byte Reload
	movq	224(%rsp), %rsi         # 8-byte Reload
	movq	232(%rsp), %rcx         # 8-byte Reload
	movq	160(%rsp), %r8          # 8-byte Reload
	movq	120(%rsp), %r9          # 8-byte Reload
	movq	128(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	2736(%rsp), %ebp        # 4-byte Reload
	addl	$1, %ebp
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	64(%rsp), %rdi          # 8-byte Reload
	movq	224(%rsp), %rsi         # 8-byte Reload
	movq	232(%rsp), %rcx         # 8-byte Reload
	movq	168(%rsp), %r8          # 8-byte Reload
	movq	120(%rsp), %r9          # 8-byte Reload
	movq	128(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%ebp, 20(%rsp)          # 4-byte Spill
	callq	trace_logger_log_int
.Ltmp525:
	#DEBUG_VALUE: trbak1:i <- [RSP+20]
	movq	32(%rsp), %rdi          # 8-byte Reload
	movq	48(%rsp), %rsi          # 8-byte Reload
	movq	56(%rsp), %rdx          # 8-byte Reload
	movq	216(%rsp), %rcx         # 8-byte Reload
	movq	176(%rsp), %r8          # 8-byte Reload
	movl	76(%rsp), %r9d          # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	232(%rsp), %rdi         # 8-byte Reload
	movq	192(%rsp), %rsi         # 8-byte Reload
	movq	24(%rsp), %rdx          # 8-byte Reload
	movq	232(%rsp), %rcx         # 8-byte Reload
	movq	184(%rsp), %r8          # 8-byte Reload
	movq	120(%rsp), %r9          # 8-byte Reload
	movq	128(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	24(%rsp), %rax          # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	64(%rsp), %rdi          # 8-byte Reload
	movq	224(%rsp), %rsi         # 8-byte Reload
	movq	232(%rsp), %rcx         # 8-byte Reload
	movq	216(%rsp), %r8          # 8-byte Reload
	movq	120(%rsp), %r9          # 8-byte Reload
	movq	128(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 16(%rsp)          # 4-byte Spill
	callq	trace_logger_log_int
	movq	32(%rsp), %rdi          # 8-byte Reload
	movq	48(%rsp), %rsi          # 8-byte Reload
	movq	56(%rsp), %rdx          # 8-byte Reload
	movq	104(%rsp), %rcx         # 8-byte Reload
	movq	200(%rsp), %r8          # 8-byte Reload
	movl	76(%rsp), %r9d          # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	2900(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	136(%rsp), %rdi         # 8-byte Reload
	movq	224(%rsp), %rsi         # 8-byte Reload
	movq	232(%rsp), %rcx         # 8-byte Reload
	movq	208(%rsp), %r8          # 8-byte Reload
	movq	120(%rsp), %r9          # 8-byte Reload
	movq	128(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	16(%rsp), %ebp          # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	232(%rsp), %rdi         # 8-byte Reload
	movq	224(%rsp), %rsi         # 8-byte Reload
	movq	232(%rsp), %rcx         # 8-byte Reload
	movq	216(%rsp), %r8          # 8-byte Reload
	movq	120(%rsp), %r9          # 8-byte Reload
	movq	128(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	16(%rsp), %ebp          # 4-byte Reload
	movl	2900(%rsp), %r12d       # 4-byte Reload
	cmpl	%r12d, %ebp
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	64(%rsp), %rdi          # 8-byte Reload
	movq	232(%rsp), %rsi         # 8-byte Reload
	movq	232(%rsp), %rcx         # 8-byte Reload
	movq	104(%rsp), %r8          # 8-byte Reload
	movq	120(%rsp), %r9          # 8-byte Reload
	movq	128(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 15(%rsp)           # 1-byte Spill
	callq	trace_logger_log_int
	movq	32(%rsp), %rdi          # 8-byte Reload
	movq	48(%rsp), %rsi          # 8-byte Reload
	movq	56(%rsp), %rdx          # 8-byte Reload
	movq	80(%rsp), %rcx          # 8-byte Reload
	movq	136(%rsp), %r8          # 8-byte Reload
	movl	76(%rsp), %r9d          # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	88(%rsp), %rdi          # 8-byte Reload
	movq	120(%rsp), %rsi         # 8-byte Reload
	movq	120(%rsp), %rdx         # 8-byte Reload
	movq	232(%rsp), %rcx         # 8-byte Reload
	movq	40(%rsp), %r8           # 8-byte Reload
	movq	120(%rsp), %r9          # 8-byte Reload
	movq	128(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	136(%rsp), %rdi         # 8-byte Reload
	movq	120(%rsp), %rsi         # 8-byte Reload
	movq	120(%rsp), %rdx         # 8-byte Reload
	movq	232(%rsp), %rcx         # 8-byte Reload
	movq	96(%rsp), %r8           # 8-byte Reload
	movq	120(%rsp), %r9          # 8-byte Reload
	movq	128(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	15(%rsp), %al           # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	232(%rsp), %rdi         # 8-byte Reload
	movq	232(%rsp), %rsi         # 8-byte Reload
	movq	232(%rsp), %rcx         # 8-byte Reload
	movq	104(%rsp), %r8          # 8-byte Reload
	movq	120(%rsp), %r9          # 8-byte Reload
	movq	128(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	15(%rsp), %al           # 1-byte Reload
	testb	$1, %al
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	20(%rsp), %ebp          # 4-byte Reload
	movq	%rcx, 2744(%rsp)        # 8-byte Spill
	movl	%ebp, 2740(%rsp)        # 4-byte Spill
	jne	.LBB11_10
	jmp	.LBB11_2
.Ltmp526:
.LBB11_10:                              # %.loopexit11
	movabsq	$694, %rdi              # imm = 0x2B6
	leaq	.L.str475, %rsi
	leaq	.L.str483, %rdx
	leaq	.L.str519, %rcx
	movabsq	$1, %r8
	movl	$0, %r9d
	movl	$1, %eax
	.loc	2 694 0                 # eispack.c:694:0
	movl	$1, (%rsp)
	movl	%eax, 8(%rsp)           # 4-byte Spill
	callq	trace_logger_log0
	addq	$3080, %rsp             # imm = 0xC08
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
.Ltmp527:
.Ltmp528:
	.size	trbak1, .Ltmp528-trbak1
.Lfunc_end11:
	.cfi_endproc

	.globl	trace_logger_write_labelmap
	.align	16, 0x90
	.type	trace_logger_write_labelmap,@function
trace_logger_write_labelmap:            # @trace_logger_write_labelmap
	.cfi_startproc
# BB#0:
	subq	$24, %rsp
.Ltmp530:
	.cfi_def_cfa_offset 32
	cmpb	$0, initp
	movq	%rdi, 16(%rsp)          # 8-byte Spill
	movq	%rsi, 8(%rsp)           # 8-byte Spill
	jne	.LBB12_2
# BB#1:
	callq	trace_logger_init
.LBB12_2:
	movq	full_trace_file(%rip), %rdi
	movl	$.L.str520, %eax
	movl	%eax, %esi
	movl	$26, %edx
	callq	gzwrite
	movq	full_trace_file(%rip), %rdi
	movq	8(%rsp), %rsi           # 8-byte Reload
	movl	%esi, %edx
	movq	16(%rsp), %rsi          # 8-byte Reload
	movl	%eax, 4(%rsp)           # 4-byte Spill
	callq	gzwrite
	movq	full_trace_file(%rip), %rdi
	movl	$.L.str1521, %edx
	movl	%edx, %esi
	movl	$25, %edx
	movl	%eax, (%rsp)            # 4-byte Spill
	addq	$24, %rsp
	jmp	gzwrite                 # TAILCALL
.Ltmp531:
	.size	trace_logger_write_labelmap, .Ltmp531-trace_logger_write_labelmap
	.cfi_endproc

	.globl	trace_logger_init
	.align	16, 0x90
	.type	trace_logger_init,@function
trace_logger_init:                      # @trace_logger_init
	.cfi_startproc
# BB#0:
	pushq	%rax
.Ltmp533:
	.cfi_def_cfa_offset 16
	movl	$.L.str2522, %eax
	movl	%eax, %edi
	movl	$.L.str3523, %eax
	movl	%eax, %esi
	callq	gzopen
	movq	%rax, full_trace_file
	cmpq	$0, %rax
	jne	.LBB13_2
# BB#1:
	movl	$.L.str4524, %eax
	movl	%eax, %edi
	callq	perror
	movl	$-1, %edi
	callq	exit
.LBB13_2:
	movl	$512, %eax              # imm = 0x200
	movl	%eax, %edi
	movl	$1, %eax
	movl	%eax, %esi
	callq	calloc
	movq	%rax, current_toplevel_function
	movl	$2, current_logging_status
	movl	$trace_logger_fin, %ecx
	movl	%ecx, %edi
	callq	atexit
	movb	$1, initp
	movl	%eax, 4(%rsp)           # 4-byte Spill
	popq	%rax
	ret
.Ltmp534:
	.size	trace_logger_init, .Ltmp534-trace_logger_init
	.cfi_endproc

	.globl	trace_logger_fin
	.align	16, 0x90
	.type	trace_logger_fin,@function
trace_logger_fin:                       # @trace_logger_fin
	.cfi_startproc
# BB#0:
	pushq	%rax
.Ltmp536:
	.cfi_def_cfa_offset 16
	movq	current_toplevel_function(%rip), %rdi
	callq	free
	movq	full_trace_file(%rip), %rdi
	popq	%rax
	jmp	gzclose                 # TAILCALL
.Ltmp537:
	.size	trace_logger_fin, .Ltmp537-trace_logger_fin
	.cfi_endproc

	.globl	log_or_not
	.align	16, 0x90
	.type	log_or_not,@function
log_or_not:                             # @log_or_not
	.cfi_startproc
# BB#0:
	subq	$40, %rsp
.Ltmp539:
	.cfi_def_cfa_offset 48
	movb	%sil, %al
	movb	%dil, %r8b
	testb	$1, %r8b
	movl	%edx, 36(%rsp)          # 4-byte Spill
	movq	%rcx, 24(%rsp)          # 8-byte Spill
	movb	%al, 23(%rsp)           # 1-byte Spill
	jne	.LBB15_2
	jmp	.LBB15_1
.LBB15_1:
	movl	$1, %eax
	movl	$2, %ecx
	movb	23(%rsp), %dl           # 1-byte Reload
	testb	%dl, %dl
	cmovel	%ecx, %eax
	movl	%eax, 16(%rsp)          # 4-byte Spill
	jmp	.LBB15_9
.LBB15_2:
	movb	23(%rsp), %al           # 1-byte Reload
	testb	$1, %al
	jne	.LBB15_4
	jmp	.LBB15_3
.LBB15_3:
	movl	current_logging_status, %eax
	movl	%eax, 16(%rsp)          # 4-byte Spill
	jmp	.LBB15_9
.LBB15_4:
	movl	$1, %eax
	movl	36(%rsp), %ecx          # 4-byte Reload
	cmpl	$1, %ecx
	movl	%eax, 16(%rsp)          # 4-byte Spill
	jne	.LBB15_9
# BB#5:
	movq	current_toplevel_function, %rax
	cmpb	$0, (%rax)
	movq	%rax, 8(%rsp)           # 8-byte Spill
	jne	.LBB15_7
# BB#6:
	movl	$.L.str5525, %eax
	movl	%eax, %edi
	movl	$.L.str6526, %eax
	movl	%eax, %esi
	movl	$.L__PRETTY_FUNCTION__.log_or_not, %eax
	movl	%eax, %ecx
	movl	$118, %edx
	callq	__assert_fail
.LBB15_7:
	movl	$0, %eax
	movq	24(%rsp), %rdi          # 8-byte Reload
	movq	8(%rsp), %rsi           # 8-byte Reload
	movl	%eax, 4(%rsp)           # 4-byte Spill
	callq	strcmp
	cmpl	$0, %eax
	movl	4(%rsp), %eax           # 4-byte Reload
	movl	%eax, 16(%rsp)          # 4-byte Spill
	je	.LBB15_9
# BB#8:
	movl	$.L.str7527, %eax
	movl	%eax, %edi
	movl	$.L.str6526, %eax
	movl	%eax, %esi
	movl	$.L__PRETTY_FUNCTION__.log_or_not, %eax
	movl	%eax, %ecx
	movl	$123, %edx
	callq	__assert_fail
.LBB15_9:
	movl	16(%rsp), %eax          # 4-byte Reload
	addq	$40, %rsp
	ret
.Ltmp540:
	.size	log_or_not, .Ltmp540-log_or_not
	.cfi_endproc

	.globl	convert_bytes_to_hex
	.align	16, 0x90
	.type	convert_bytes_to_hex,@function
convert_bytes_to_hex:                   # @convert_bytes_to_hex
	.cfi_startproc
# BB#0:
	subq	$56, %rsp
.Ltmp542:
	.cfi_def_cfa_offset 64
	movabsq	$0, %rax
	movw	.L.str8528, %cx
	movw	%cx, (%rdi)
	movb	.L.str8528+2, %r8b
	movb	%r8b, 2(%rdi)
	addq	$2, %rdi
	cmpl	$0, %edx
	movq	%rsi, 48(%rsp)          # 8-byte Spill
	movq	%rax, 40(%rsp)          # 8-byte Spill
	movl	%edx, 36(%rsp)          # 4-byte Spill
	movq	%rdi, 24(%rsp)          # 8-byte Spill
	jle	.LBB16_2
.LBB16_1:                               # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	40(%rsp), %rcx          # 8-byte Reload
	movq	48(%rsp), %rdx          # 8-byte Reload
	movzbl	(%rdx,%rcx), %edx
	movl	$.L.str9529, %esi
                                        # kill: RSI<def> ESI<kill>
	xorl	%edi, %edi
	movb	%dil, %r8b
	movq	%rax, %rdi
	movq	%rax, 16(%rsp)          # 8-byte Spill
	movb	%r8b, %al
	movq	%rcx, 8(%rsp)           # 8-byte Spill
	callq	sprintf
	movslq	%eax, %rcx
	movq	16(%rsp), %rsi          # 8-byte Reload
	addq	%rcx, %rsi
	movq	8(%rsp), %rcx           # 8-byte Reload
	addq	$1, %rcx
	movl	%ecx, %eax
	movl	36(%rsp), %edx          # 4-byte Reload
	cmpl	%edx, %eax
	movq	%rcx, 40(%rsp)          # 8-byte Spill
	movq	%rsi, 24(%rsp)          # 8-byte Spill
	jne	.LBB16_1
.LBB16_2:                               # %._crit_edge
	movq	24(%rsp), %rax          # 8-byte Reload
	movb	$0, (%rax)
	addq	$56, %rsp
	ret
.Ltmp543:
	.size	convert_bytes_to_hex, .Ltmp543-convert_bytes_to_hex
	.cfi_endproc

	.globl	update_logging_status
	.align	16, 0x90
	.type	update_logging_status,@function
update_logging_status:                  # @update_logging_status
	.cfi_startproc
# BB#0:
	subq	$56, %rsp
.Ltmp545:
	.cfi_def_cfa_offset 64
	movb	%cl, %al
	movb	%dl, %r8b
	movl	current_logging_status, %ecx
	cmpl	$0, %ecx
	movl	%esi, 52(%rsp)          # 4-byte Spill
	movb	%al, 51(%rsp)           # 1-byte Spill
	movb	%r8b, 50(%rsp)          # 1-byte Spill
	movq	%rdi, 40(%rsp)          # 8-byte Spill
	movl	%ecx, 36(%rsp)          # 4-byte Spill
	jne	.LBB17_2
# BB#1:
	movl	inst_count, %esi
	movl	$.L.str10530, %eax
	movl	%eax, %edi
	xorl	%eax, %eax
	movb	%al, %cl
	movb	%cl, %al
	callq	printf
	movl	$2, current_logging_status
	movl	%eax, 32(%rsp)          # 4-byte Spill
	jmp	.LBB17_8
.LBB17_2:
	movb	51(%rsp), %al           # 1-byte Reload
	movzbl	%al, %ecx
	andl	$1, %ecx
	movb	50(%rsp), %dl           # 1-byte Reload
	movzbl	%dl, %esi
	andl	$1, %esi
	movl	%ecx, %edi
	movl	52(%rsp), %edx          # 4-byte Reload
	movq	40(%rsp), %rcx          # 8-byte Reload
	callq	log_or_not
	movl	%eax, current_logging_status
	movl	36(%rsp), %edx          # 4-byte Reload
	cmpl	$2, %edx
	setne	%r8b
	cmpl	%edx, %eax
	sete	%r9b
	orb	%r9b, %r8b
	testb	$1, %r8b
	movl	%eax, 28(%rsp)          # 4-byte Spill
	jne	.LBB17_4
# BB#3:
	movl	inst_count, %esi
	movl	$.L.str11531, %eax
	movl	%eax, %edi
	xorl	%eax, %eax
	movb	%al, %cl
	movb	%cl, %al
	callq	printf
	movl	current_logging_status, %esi
	movl	%eax, 24(%rsp)          # 4-byte Spill
	movl	%esi, 28(%rsp)          # 4-byte Spill
.LBB17_4:
	movl	28(%rsp), %eax          # 4-byte Reload
	movq	current_toplevel_function, %rcx
	cmpb	$0, (%rcx)
	sete	%dl
	cmpl	$1, %eax
	sete	%sil
	andb	%sil, %dl
	testb	$1, %dl
	movl	%eax, 20(%rsp)          # 4-byte Spill
	movq	%rcx, 8(%rsp)           # 8-byte Spill
	jne	.LBB17_5
	jmp	.LBB17_6
.LBB17_5:
	movq	8(%rsp), %rdi           # 8-byte Reload
	movq	40(%rsp), %rsi          # 8-byte Reload
	callq	strcpy
	movq	%rax, (%rsp)            # 8-byte Spill
	jmp	.LBB17_8
.LBB17_6:
	movl	20(%rsp), %eax          # 4-byte Reload
	cmpl	$0, %eax
	jne	.LBB17_8
# BB#7:
	movl	$0, %esi
	movabsq	$512, %rdx              # imm = 0x200
	movq	8(%rsp), %rdi           # 8-byte Reload
	callq	memset
.LBB17_8:
	addq	$56, %rsp
	ret
.Ltmp546:
	.size	update_logging_status, .Ltmp546-update_logging_status
	.cfi_endproc

	.globl	do_not_log
	.align	16, 0x90
	.type	do_not_log,@function
do_not_log:                             # @do_not_log
	.cfi_startproc
# BB#0:
	cmpl	$2, current_logging_status
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	ret
.Ltmp547:
	.size	do_not_log, .Ltmp547-do_not_log
	.cfi_endproc

	.globl	trace_logger_log_entry
	.align	16, 0x90
	.type	trace_logger_log_entry,@function
trace_logger_log_entry:                 # @trace_logger_log_entry
	.cfi_startproc
# BB#0:
	subq	$24, %rsp
.Ltmp549:
	.cfi_def_cfa_offset 32
	cmpb	$0, initp
	movq	%rdi, 16(%rsp)          # 8-byte Spill
	movl	%esi, 12(%rsp)          # 4-byte Spill
	jne	.LBB19_2
# BB#1:
	callq	trace_logger_init
.LBB19_2:
	xorl	%esi, %esi
	movl	$1, %eax
	movq	16(%rsp), %rdi          # 8-byte Reload
	movl	%eax, %edx
	movl	%eax, %ecx
	callq	update_logging_status
	cmpl	$2, current_logging_status
	je	.LBB19_4
# BB#3:
	movq	full_trace_file, %rdi
	movl	$.L.str12532, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movb	%al, %cl
	movq	16(%rsp), %rdx          # 8-byte Reload
	movl	12(%rsp), %eax          # 4-byte Reload
	movb	%cl, 11(%rsp)           # 1-byte Spill
	movl	%eax, %ecx
	movb	11(%rsp), %al           # 1-byte Reload
	callq	gzprintf
	movl	%eax, 4(%rsp)           # 4-byte Spill
.LBB19_4:
	addq	$24, %rsp
	ret
.Ltmp550:
	.size	trace_logger_log_entry, .Ltmp550-trace_logger_log_entry
	.cfi_endproc

	.globl	trace_logger_log0
	.align	16, 0x90
	.type	trace_logger_log0,@function
trace_logger_log0:                      # @trace_logger_log0
	.cfi_startproc
# BB#0:
	subq	$72, %rsp
.Ltmp552:
	.cfi_def_cfa_offset 80
	movb	%r9b, %al
	movb	80(%rsp), %r10b
	cmpb	$0, initp
	movq	%rsi, 64(%rsp)          # 8-byte Spill
	movb	%r10b, 63(%rsp)         # 1-byte Spill
	movl	%r8d, 56(%rsp)          # 4-byte Spill
	movq	%rcx, 48(%rsp)          # 8-byte Spill
	movq	%rdx, 40(%rsp)          # 8-byte Spill
	movb	%al, 39(%rsp)           # 1-byte Spill
	movl	%edi, 32(%rsp)          # 4-byte Spill
	jne	.LBB20_2
# BB#1:
	callq	trace_logger_init
.LBB20_2:
	movb	39(%rsp), %al           # 1-byte Reload
	movzbl	%al, %ecx
	andl	$1, %ecx
	movb	63(%rsp), %dl           # 1-byte Reload
	movzbl	%dl, %esi
	andl	$1, %esi
	movq	64(%rsp), %rdi          # 8-byte Reload
	movl	56(%rsp), %r8d          # 4-byte Reload
	movl	%esi, 28(%rsp)          # 4-byte Spill
	movl	%r8d, %esi
	movl	%ecx, %edx
	movl	28(%rsp), %ecx          # 4-byte Reload
	callq	update_logging_status
	cmpl	$2, current_logging_status
	je	.LBB20_4
# BB#3:
	movq	full_trace_file, %rdi
	movl	inst_count, %eax
	movq	%rsp, %rcx
	movl	%eax, 8(%rcx)
	movl	56(%rsp), %eax          # 4-byte Reload
	movl	%eax, (%rcx)
	movl	$.L.str13533, %edx
	movl	%edx, %esi
	xorl	%edx, %edx
	movb	%dl, %r8b
	movl	32(%rsp), %edx          # 4-byte Reload
	movq	64(%rsp), %rcx          # 8-byte Reload
	movq	40(%rsp), %r9           # 8-byte Reload
	movb	%r8b, 27(%rsp)          # 1-byte Spill
	movq	%r9, %r8
	movq	48(%rsp), %r9           # 8-byte Reload
	movb	27(%rsp), %al           # 1-byte Reload
	callq	gzprintf
	movl	inst_count, %edx
	addl	$1, %edx
	movl	%edx, inst_count
	movl	%eax, 20(%rsp)          # 4-byte Spill
.LBB20_4:
	addq	$72, %rsp
	ret
.Ltmp553:
	.size	trace_logger_log0, .Ltmp553-trace_logger_log0
	.cfi_endproc

	.globl	trace_logger_log_int
	.align	16, 0x90
	.type	trace_logger_log_int,@function
trace_logger_log_int:                   # @trace_logger_log_int
	.cfi_startproc
# BB#0:
	subq	$120, %rsp
.Ltmp555:
	.cfi_def_cfa_offset 128
	movq	128(%rsp), %rax
	cmpb	$0, initp
	movq	%rax, 112(%rsp)         # 8-byte Spill
	movl	%r9d, 108(%rsp)         # 4-byte Spill
	movq	%r8, 96(%rsp)           # 8-byte Spill
	movl	%ecx, 92(%rsp)          # 4-byte Spill
	movq	%rdx, 80(%rsp)          # 8-byte Spill
	movl	%esi, 76(%rsp)          # 4-byte Spill
	movl	%edi, 72(%rsp)          # 4-byte Spill
	jne	.LBB21_2
# BB#1:
	movl	$.L.str14534, %eax
	movl	%eax, %edi
	movl	$.L.str6526, %eax
	movl	%eax, %esi
	movl	$.L__PRETTY_FUNCTION__.trace_logger_log_int, %eax
	movl	%eax, %ecx
	movl	$204, %edx
	callq	__assert_fail
.LBB21_2:
	callq	do_not_log
	testb	$1, %al
	jne	.LBB21_14
# BB#3:
	movl	72(%rsp), %eax          # 4-byte Reload
	cmpl	$19134, %eax            # imm = 0x4ABE
	jne	.LBB21_5
# BB#4:
	movq	full_trace_file, %rdi
	movl	$.L.str15535, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movb	%al, %cl
	movl	76(%rsp), %edx          # 4-byte Reload
	movq	80(%rsp), %r8           # 8-byte Reload
	movb	%cl, 71(%rsp)           # 1-byte Spill
	movq	%r8, %rcx
	movl	92(%rsp), %r8d          # 4-byte Reload
	movb	71(%rsp), %al           # 1-byte Reload
	callq	gzprintf
	movl	%eax, 64(%rsp)          # 4-byte Spill
	jmp	.LBB21_8
.LBB21_5:
	movq	full_trace_file, %rax
	movl	72(%rsp), %ecx          # 4-byte Reload
	cmpl	$24601, %ecx            # imm = 0x6019
	movq	%rax, 56(%rsp)          # 8-byte Spill
	jne	.LBB21_7
# BB#6:
	movl	$.L.str16536, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movb	%al, %cl
	movq	56(%rsp), %rdi          # 8-byte Reload
	movl	76(%rsp), %edx          # 4-byte Reload
	movq	80(%rsp), %r8           # 8-byte Reload
	movb	%cl, 55(%rsp)           # 1-byte Spill
	movq	%r8, %rcx
	movl	92(%rsp), %r8d          # 4-byte Reload
	movb	55(%rsp), %al           # 1-byte Reload
	callq	gzprintf
	movl	%eax, 48(%rsp)          # 4-byte Spill
	jmp	.LBB21_8
.LBB21_7:
	movl	$.L.str17537, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movb	%al, %cl
	movq	56(%rsp), %rdi          # 8-byte Reload
	movl	72(%rsp), %edx          # 4-byte Reload
	movl	76(%rsp), %eax          # 4-byte Reload
	movb	%cl, 47(%rsp)           # 1-byte Spill
	movl	%eax, %ecx
	movq	80(%rsp), %r8           # 8-byte Reload
	movl	92(%rsp), %r9d          # 4-byte Reload
	movb	47(%rsp), %al           # 1-byte Reload
	callq	gzprintf
	movl	%eax, 40(%rsp)          # 4-byte Spill
.LBB21_8:
	movq	full_trace_file, %rax
	movl	92(%rsp), %ecx          # 4-byte Reload
	cmpl	$0, %ecx
	movq	%rax, 32(%rsp)          # 8-byte Spill
	je	.LBB21_10
# BB#9:
	movl	$.L.str18538, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movb	%al, %cl
	movq	32(%rsp), %rdi          # 8-byte Reload
	movq	96(%rsp), %rdx          # 8-byte Reload
	movb	%cl, %al
	callq	gzprintf
	movl	%eax, 28(%rsp)          # 4-byte Spill
	jmp	.LBB21_11
.LBB21_10:
	movl	$.L.str19539, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movb	%al, %cl
	movq	32(%rsp), %rdi          # 8-byte Reload
	movb	%cl, %al
	callq	gzprintf
	movl	%eax, 24(%rsp)          # 4-byte Spill
.LBB21_11:
	movq	full_trace_file, %rax
	movl	108(%rsp), %ecx         # 4-byte Reload
	cmpl	$0, %ecx
	movq	%rax, 16(%rsp)          # 8-byte Spill
	je	.LBB21_13
# BB#12:
	movl	$.L.str20540, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movb	%al, %cl
	movq	16(%rsp), %rdi          # 8-byte Reload
	movq	112(%rsp), %rdx         # 8-byte Reload
	movb	%cl, %al
	callq	gzprintf
	movl	%eax, 12(%rsp)          # 4-byte Spill
	jmp	.LBB21_14
.LBB21_13:
	movl	$.L.str21541, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movb	%al, %cl
	movq	16(%rsp), %rdi          # 8-byte Reload
	movb	%cl, %al
	callq	gzprintf
	movl	%eax, 8(%rsp)           # 4-byte Spill
.LBB21_14:
	addq	$120, %rsp
	ret
.Ltmp556:
	.size	trace_logger_log_int, .Ltmp556-trace_logger_log_int
	.cfi_endproc

	.globl	trace_logger_log_ptr
	.align	16, 0x90
	.type	trace_logger_log_ptr,@function
trace_logger_log_ptr:                   # @trace_logger_log_ptr
	.cfi_startproc
# BB#0:
	subq	$120, %rsp
.Ltmp558:
	.cfi_def_cfa_offset 128
	movq	128(%rsp), %rax
	cmpb	$0, initp
	movq	%rax, 112(%rsp)         # 8-byte Spill
	movl	%r9d, 108(%rsp)         # 4-byte Spill
	movq	%r8, 96(%rsp)           # 8-byte Spill
	movl	%ecx, 92(%rsp)          # 4-byte Spill
	movq	%rdx, 80(%rsp)          # 8-byte Spill
	movl	%esi, 76(%rsp)          # 4-byte Spill
	movl	%edi, 72(%rsp)          # 4-byte Spill
	jne	.LBB22_2
# BB#1:
	movl	$.L.str14534, %eax
	movl	%eax, %edi
	movl	$.L.str6526, %eax
	movl	%eax, %esi
	movl	$.L__PRETTY_FUNCTION__.trace_logger_log_ptr, %eax
	movl	%eax, %ecx
	movl	$225, %edx
	callq	__assert_fail
.LBB22_2:
	callq	do_not_log
	testb	$1, %al
	jne	.LBB22_14
# BB#3:
	movl	72(%rsp), %eax          # 4-byte Reload
	cmpl	$19134, %eax            # imm = 0x4ABE
	jne	.LBB22_5
# BB#4:
	movq	full_trace_file, %rdi
	movl	$.L.str22542, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movb	%al, %cl
	movl	76(%rsp), %edx          # 4-byte Reload
	movq	80(%rsp), %r8           # 8-byte Reload
	movb	%cl, 71(%rsp)           # 1-byte Spill
	movq	%r8, %rcx
	movl	92(%rsp), %r8d          # 4-byte Reload
	movb	71(%rsp), %al           # 1-byte Reload
	callq	gzprintf
	movl	%eax, 64(%rsp)          # 4-byte Spill
	jmp	.LBB22_8
.LBB22_5:
	movq	full_trace_file, %rax
	movl	72(%rsp), %ecx          # 4-byte Reload
	cmpl	$24601, %ecx            # imm = 0x6019
	movq	%rax, 56(%rsp)          # 8-byte Spill
	jne	.LBB22_7
# BB#6:
	movl	$.L.str23543, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movb	%al, %cl
	movq	56(%rsp), %rdi          # 8-byte Reload
	movl	76(%rsp), %edx          # 4-byte Reload
	movq	80(%rsp), %r8           # 8-byte Reload
	movb	%cl, 55(%rsp)           # 1-byte Spill
	movq	%r8, %rcx
	movl	92(%rsp), %r8d          # 4-byte Reload
	movb	55(%rsp), %al           # 1-byte Reload
	callq	gzprintf
	movl	%eax, 48(%rsp)          # 4-byte Spill
	jmp	.LBB22_8
.LBB22_7:
	movl	$.L.str24544, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movb	%al, %cl
	movq	56(%rsp), %rdi          # 8-byte Reload
	movl	72(%rsp), %edx          # 4-byte Reload
	movl	76(%rsp), %eax          # 4-byte Reload
	movb	%cl, 47(%rsp)           # 1-byte Spill
	movl	%eax, %ecx
	movq	80(%rsp), %r8           # 8-byte Reload
	movl	92(%rsp), %r9d          # 4-byte Reload
	movb	47(%rsp), %al           # 1-byte Reload
	callq	gzprintf
	movl	%eax, 40(%rsp)          # 4-byte Spill
.LBB22_8:
	movq	full_trace_file, %rax
	movl	92(%rsp), %ecx          # 4-byte Reload
	cmpl	$0, %ecx
	movq	%rax, 32(%rsp)          # 8-byte Spill
	je	.LBB22_10
# BB#9:
	movl	$.L.str18538, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movb	%al, %cl
	movq	32(%rsp), %rdi          # 8-byte Reload
	movq	96(%rsp), %rdx          # 8-byte Reload
	movb	%cl, %al
	callq	gzprintf
	movl	%eax, 28(%rsp)          # 4-byte Spill
	jmp	.LBB22_11
.LBB22_10:
	movl	$.L.str19539, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movb	%al, %cl
	movq	32(%rsp), %rdi          # 8-byte Reload
	movb	%cl, %al
	callq	gzprintf
	movl	%eax, 24(%rsp)          # 4-byte Spill
.LBB22_11:
	movq	full_trace_file, %rax
	movl	108(%rsp), %ecx         # 4-byte Reload
	cmpl	$0, %ecx
	movq	%rax, 16(%rsp)          # 8-byte Spill
	je	.LBB22_13
# BB#12:
	movl	$.L.str20540, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movb	%al, %cl
	movq	16(%rsp), %rdi          # 8-byte Reload
	movq	112(%rsp), %rdx         # 8-byte Reload
	movb	%cl, %al
	callq	gzprintf
	movl	%eax, 12(%rsp)          # 4-byte Spill
	jmp	.LBB22_14
.LBB22_13:
	movl	$.L.str21541, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movb	%al, %cl
	movq	16(%rsp), %rdi          # 8-byte Reload
	movb	%cl, %al
	callq	gzprintf
	movl	%eax, 8(%rsp)           # 4-byte Spill
.LBB22_14:
	addq	$120, %rsp
	ret
.Ltmp559:
	.size	trace_logger_log_ptr, .Ltmp559-trace_logger_log_ptr
	.cfi_endproc

	.globl	trace_logger_log_double
	.align	16, 0x90
	.type	trace_logger_log_double,@function
trace_logger_log_double:                # @trace_logger_log_double
	.cfi_startproc
# BB#0:
	subq	$104, %rsp
.Ltmp561:
	.cfi_def_cfa_offset 112
	cmpb	$0, initp
	movl	%esi, 100(%rsp)         # 4-byte Spill
	movq	%r9, 88(%rsp)           # 8-byte Spill
	movl	%r8d, 84(%rsp)          # 4-byte Spill
	movq	%rcx, 72(%rsp)          # 8-byte Spill
	movl	%edx, 68(%rsp)          # 4-byte Spill
	vmovsd	%xmm0, 56(%rsp)         # 8-byte Spill
	movl	%edi, 52(%rsp)          # 4-byte Spill
	jne	.LBB23_2
# BB#1:
	movl	$.L.str14534, %eax
	movl	%eax, %edi
	movl	$.L.str6526, %eax
	movl	%eax, %esi
	movl	$.L__PRETTY_FUNCTION__.trace_logger_log_double, %eax
	movl	%eax, %ecx
	movl	$246, %edx
	callq	__assert_fail
.LBB23_2:
	callq	do_not_log
	testb	$1, %al
	jne	.LBB23_14
# BB#3:
	movl	52(%rsp), %eax          # 4-byte Reload
	cmpl	$19134, %eax            # imm = 0x4ABE
	jne	.LBB23_5
# BB#4:
	movq	full_trace_file, %rdi
	movl	$.L.str25545, %eax
	movl	%eax, %esi
	movb	$1, %al
	movl	100(%rsp), %edx         # 4-byte Reload
	vmovsd	56(%rsp), %xmm0         # 8-byte Reload
	movl	68(%rsp), %ecx          # 4-byte Reload
	callq	gzprintf
	movl	%eax, 48(%rsp)          # 4-byte Spill
	jmp	.LBB23_8
.LBB23_5:
	movq	full_trace_file, %rax
	movl	52(%rsp), %ecx          # 4-byte Reload
	cmpl	$24601, %ecx            # imm = 0x6019
	movq	%rax, 40(%rsp)          # 8-byte Spill
	jne	.LBB23_7
# BB#6:
	movl	$.L.str26546, %eax
	movl	%eax, %esi
	movb	$1, %al
	movq	40(%rsp), %rdi          # 8-byte Reload
	movl	100(%rsp), %edx         # 4-byte Reload
	vmovsd	56(%rsp), %xmm0         # 8-byte Reload
	movl	68(%rsp), %ecx          # 4-byte Reload
	callq	gzprintf
	movl	%eax, 36(%rsp)          # 4-byte Spill
	jmp	.LBB23_8
.LBB23_7:
	movl	$.L.str27547, %eax
	movl	%eax, %esi
	movb	$1, %al
	movq	40(%rsp), %rdi          # 8-byte Reload
	movl	52(%rsp), %edx          # 4-byte Reload
	movl	100(%rsp), %ecx         # 4-byte Reload
	vmovsd	56(%rsp), %xmm0         # 8-byte Reload
	movl	68(%rsp), %r8d          # 4-byte Reload
	callq	gzprintf
	movl	%eax, 32(%rsp)          # 4-byte Spill
.LBB23_8:
	movq	full_trace_file, %rax
	movl	68(%rsp), %ecx          # 4-byte Reload
	cmpl	$0, %ecx
	movq	%rax, 24(%rsp)          # 8-byte Spill
	je	.LBB23_10
# BB#9:
	movl	$.L.str18538, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movb	%al, %cl
	movq	24(%rsp), %rdi          # 8-byte Reload
	movq	72(%rsp), %rdx          # 8-byte Reload
	movb	%cl, %al
	callq	gzprintf
	movl	%eax, 20(%rsp)          # 4-byte Spill
	jmp	.LBB23_11
.LBB23_10:
	movl	$.L.str19539, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movb	%al, %cl
	movq	24(%rsp), %rdi          # 8-byte Reload
	movb	%cl, %al
	callq	gzprintf
	movl	%eax, 16(%rsp)          # 4-byte Spill
.LBB23_11:
	movq	full_trace_file, %rax
	movl	84(%rsp), %ecx          # 4-byte Reload
	cmpl	$0, %ecx
	movq	%rax, 8(%rsp)           # 8-byte Spill
	je	.LBB23_13
# BB#12:
	movl	$.L.str20540, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movb	%al, %cl
	movq	8(%rsp), %rdi           # 8-byte Reload
	movq	88(%rsp), %rdx          # 8-byte Reload
	movb	%cl, %al
	callq	gzprintf
	movl	%eax, 4(%rsp)           # 4-byte Spill
	jmp	.LBB23_14
.LBB23_13:
	movl	$.L.str21541, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movb	%al, %cl
	movq	8(%rsp), %rdi           # 8-byte Reload
	movb	%cl, %al
	callq	gzprintf
	movl	%eax, (%rsp)            # 4-byte Spill
.LBB23_14:
	addq	$104, %rsp
	ret
.Ltmp562:
	.size	trace_logger_log_double, .Ltmp562-trace_logger_log_double
	.cfi_endproc

	.globl	trace_logger_log_vector
	.align	16, 0x90
	.type	trace_logger_log_vector,@function
trace_logger_log_vector:                # @trace_logger_log_vector
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp565:
	.cfi_def_cfa_offset 16
.Ltmp566:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp567:
	.cfi_def_cfa_register %rbp
	subq	$128, %rsp
	movq	16(%rbp), %rax
	cmpb	$0, initp
	movq	%rax, -8(%rbp)          # 8-byte Spill
	movl	%r9d, -12(%rbp)         # 4-byte Spill
	movq	%r8, -24(%rbp)          # 8-byte Spill
	movl	%ecx, -28(%rbp)         # 4-byte Spill
	movq	%rdx, -40(%rbp)         # 8-byte Spill
	movl	%esi, -44(%rbp)         # 4-byte Spill
	movl	%edi, -48(%rbp)         # 4-byte Spill
	jne	.LBB24_2
# BB#1:
	leaq	.L.str14534, %rdi
	leaq	.L.str6526, %rsi
	movl	$267, %edx              # imm = 0x10B
	leaq	.L__PRETTY_FUNCTION__.trace_logger_log_vector, %rcx
	callq	__assert_fail
.LBB24_2:
	callq	do_not_log
	testb	$1, %al
	jne	.LBB24_15
# BB#3:
	movl	$8, %eax
	movl	-44(%rbp), %ecx         # 4-byte Reload
	sarl	$31, %ecx
	shrl	$30, %ecx
	movl	-44(%rbp), %edx         # 4-byte Reload
	addl	%ecx, %edx
	sarl	$2, %edx
	addl	$3, %edx
	movl	%edx, %esi
	movq	%rsp, %rdi
	addq	$15, %rsi
	andq	$-16, %rsi
	movq	%rsp, %r8
	subq	%rsi, %r8
	movq	%r8, %rsp
	movl	-44(%rbp), %ecx         # 4-byte Reload
	movl	%eax, -52(%rbp)         # 4-byte Spill
	movl	%ecx, %eax
	cltd
	movl	-52(%rbp), %r9d         # 4-byte Reload
	idivl	%r9d
	movq	%rdi, -64(%rbp)         # 8-byte Spill
	movq	%r8, %rdi
	movq	-40(%rbp), %rsi         # 8-byte Reload
	movl	%eax, %edx
	movq	%r8, -72(%rbp)          # 8-byte Spill
	callq	convert_bytes_to_hex
	movl	-48(%rbp), %eax         # 4-byte Reload
	cmpl	$19134, %eax            # imm = 0x4ABE
	jne	.LBB24_5
# BB#4:
	leaq	.L.str28548, %rsi
	movq	full_trace_file, %rdi
	movl	-44(%rbp), %edx         # 4-byte Reload
	movq	-72(%rbp), %rcx         # 8-byte Reload
	movl	-28(%rbp), %r8d         # 4-byte Reload
	movb	$0, %al
	callq	gzprintf
	movl	%eax, -76(%rbp)         # 4-byte Spill
	jmp	.LBB24_8
.LBB24_5:
	movq	full_trace_file, %rax
	movl	-48(%rbp), %ecx         # 4-byte Reload
	cmpl	$24601, %ecx            # imm = 0x6019
	movq	%rax, -88(%rbp)         # 8-byte Spill
	jne	.LBB24_7
# BB#6:
	leaq	.L.str29549, %rsi
	movq	-88(%rbp), %rdi         # 8-byte Reload
	movl	-44(%rbp), %edx         # 4-byte Reload
	movq	-72(%rbp), %rcx         # 8-byte Reload
	movl	-28(%rbp), %r8d         # 4-byte Reload
	movb	$0, %al
	callq	gzprintf
	movl	%eax, -92(%rbp)         # 4-byte Spill
	jmp	.LBB24_8
.LBB24_7:
	leaq	.L.str30550, %rsi
	movq	-88(%rbp), %rdi         # 8-byte Reload
	movl	-48(%rbp), %edx         # 4-byte Reload
	movl	-44(%rbp), %ecx         # 4-byte Reload
	movq	-72(%rbp), %r8          # 8-byte Reload
	movl	-28(%rbp), %r9d         # 4-byte Reload
	movb	$0, %al
	callq	gzprintf
	movl	%eax, -96(%rbp)         # 4-byte Spill
.LBB24_8:
	movq	full_trace_file, %rax
	movl	-28(%rbp), %ecx         # 4-byte Reload
	cmpl	$0, %ecx
	movq	%rax, -104(%rbp)        # 8-byte Spill
	je	.LBB24_10
# BB#9:
	leaq	.L.str18538, %rsi
	movq	-104(%rbp), %rdi        # 8-byte Reload
	movq	-24(%rbp), %rdx         # 8-byte Reload
	movb	$0, %al
	callq	gzprintf
	movl	%eax, -108(%rbp)        # 4-byte Spill
	jmp	.LBB24_11
.LBB24_10:
	leaq	.L.str19539, %rsi
	movq	-104(%rbp), %rdi        # 8-byte Reload
	movb	$0, %al
	callq	gzprintf
	movl	%eax, -112(%rbp)        # 4-byte Spill
.LBB24_11:
	movq	full_trace_file, %rax
	movl	-12(%rbp), %ecx         # 4-byte Reload
	cmpl	$0, %ecx
	movq	%rax, -120(%rbp)        # 8-byte Spill
	je	.LBB24_13
# BB#12:
	leaq	.L.str20540, %rsi
	movq	-120(%rbp), %rdi        # 8-byte Reload
	movq	-8(%rbp), %rdx          # 8-byte Reload
	movb	$0, %al
	callq	gzprintf
	movl	%eax, -124(%rbp)        # 4-byte Spill
	jmp	.LBB24_14
.LBB24_13:
	leaq	.L.str21541, %rsi
	movq	-120(%rbp), %rdi        # 8-byte Reload
	movb	$0, %al
	callq	gzprintf
	movl	%eax, -128(%rbp)        # 4-byte Spill
.LBB24_14:
	movq	-64(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rsp
.LBB24_15:
	movq	%rbp, %rsp
	popq	%rbp
	ret
.Ltmp568:
	.size	trace_logger_log_vector, .Ltmp568-trace_logger_log_vector
	.cfi_endproc

	.type	.L.str,@object          # @.str
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str:
	.asciz	"\nstore_loc[%d] = %d\n"
	.size	.L.str, 21

	.type	.L.str1,@object         # @.str1
.L.str1:
	.asciz	"store_vals[%d] = %d\n"
	.size	.L.str1, 21

	.type	.L.str2,@object         # @.str2
.L.str2:
	.asciz	"FAILED: store_loc[%d] = %d, should be %d\n"
	.size	.L.str2, 42

	.type	.L.str3,@object         # @.str3
.L.str3:
	.asciz	"Test failed with %d errors."
	.size	.L.str3, 28

	.type	.L.str4,@object         # @.str4
.L.str4:
	.asciz	"Test passed!\n"
	.size	.L.str4, 14

	.type	.L.str5,@object         # @.str5
	.section	.rodata,"a",@progbits
.L.str5:
	.asciz	"test_stores"
	.size	.L.str5, 12

	.type	.L.str6,@object         # @.str6
.L.str6:
	.asciz	"0:0"
	.size	.L.str6, 4

	.type	.L.str7,@object         # @.str7
.L.str7:
	.asciz	"1"
	.size	.L.str7, 2

	.type	.L.str8,@object         # @.str8
.L.str8:
	.zero	1
	.size	.L.str8, 1

	.type	.L.str9,@object         # @.str9
.L.str9:
	.asciz	"phi"
	.size	.L.str9, 4

	.type	.L.str10,@object        # @.str10
.L.str10:
	.asciz	"num_vals"
	.size	.L.str10, 9

	.type	.L.str11,@object        # @.str11
.L.str11:
	.asciz	"0:0-5"
	.size	.L.str11, 6

	.type	.L.str12,@object        # @.str12
.L.str12:
	.asciz	".lr.ph:1"
	.size	.L.str12, 9

	.type	.L.str13,@object        # @.str13
.L.str13:
	.asciz	"._crit_edge:0"
	.size	.L.str13, 14

	.type	.L.str14,@object        # @.str14
.L.str14:
	.asciz	"indvars.iv"
	.size	.L.str14, 11

	.type	.L.str15,@object        # @.str15
.L.str15:
	.asciz	"indvars.iv.next"
	.size	.L.str15, 16

	.type	.L.str16,@object        # @.str16
.L.str16:
	.asciz	"19:1"
	.size	.L.str16, 5

	.type	.L.str17,@object        # @.str17
.L.str17:
	.asciz	"2"
	.size	.L.str17, 2

	.type	.L.str18,@object        # @.str18
.L.str18:
	.asciz	"stdout"
	.size	.L.str18, 7

	.type	.L.str19,@object        # @.str19
.L.str19:
	.asciz	"3"
	.size	.L.str19, 2

	.type	.L.str20,@object        # @.str20
.L.str20:
	.asciz	"store_loc"
	.size	.L.str20, 10

	.type	.L.str21,@object        # @.str21
.L.str21:
	.asciz	"4"
	.size	.L.str21, 2

	.type	.L.str22,@object        # @.str22
.L.str22:
	.asciz	"5"
	.size	.L.str22, 2

	.type	.L.str23,@object        # @.str23
.L.str23:
	.asciz	"6"
	.size	.L.str23, 2

	.type	.L.str24,@object        # @.str24
.L.str24:
	.asciz	"fprintf"
	.size	.L.str24, 8

	.type	.L.str25,@object        # @.str25
.L.str25:
	.asciz	"7"
	.size	.L.str25, 2

	.type	.L.str26,@object        # @.str26
.L.str26:
	.asciz	"8"
	.size	.L.str26, 2

	.type	.L.str27,@object        # @.str27
.L.str27:
	.asciz	"store_vals"
	.size	.L.str27, 11

	.type	.L.str28,@object        # @.str28
.L.str28:
	.asciz	"9"
	.size	.L.str28, 2

	.type	.L.str29,@object        # @.str29
.L.str29:
	.asciz	"10"
	.size	.L.str29, 3

	.type	.L.str30,@object        # @.str30
.L.str30:
	.asciz	"11"
	.size	.L.str30, 3

	.type	.L.str31,@object        # @.str31
.L.str31:
	.asciz	"12"
	.size	.L.str31, 3

	.type	.L.str32,@object        # @.str32
.L.str32:
	.asciz	"13"
	.size	.L.str32, 3

	.type	.L.str33,@object        # @.str33
.L.str33:
	.asciz	"14"
	.size	.L.str33, 3

	.type	.L.str34,@object        # @.str34
.L.str34:
	.asciz	".lr.ph:1-0"
	.size	.L.str34, 11

	.type	.L.str35,@object        # @.str35
.L.str35:
	.asciz	"15:1"
	.size	.L.str35, 5

	.type	.L.str36,@object        # @.str36
.L.str36:
	.asciz	"16"
	.size	.L.str36, 3

	.type	.L.str37,@object        # @.str37
.L.str37:
	.asciz	"17"
	.size	.L.str37, 3

	.type	.L.str38,@object        # @.str38
.L.str38:
	.asciz	"18"
	.size	.L.str38, 3

	.type	.L.str39,@object        # @.str39
.L.str39:
	.asciz	"15:1-0"
	.size	.L.str39, 7

	.type	.L.str40,@object        # @.str40
.L.str40:
	.asciz	"lftr.wideiv"
	.size	.L.str40, 12

	.type	.L.str41,@object        # @.str41
.L.str41:
	.asciz	"exitcond"
	.size	.L.str41, 9

	.type	.L.str42,@object        # @.str42
.L.str42:
	.asciz	"19:1-0"
	.size	.L.str42, 7

	.type	.L.str43,@object        # @.str43
.L.str43:
	.asciz	"._crit_edge:0-0"
	.size	.L.str43, 16

	.type	.L.str44,@object        # @.str44
.L.str44:
	.asciz	"store_kernel"
	.size	.L.str44, 13

	.type	.L.str45,@object        # @.str45
.L.str45:
	.asciz	"0:0-6"
	.size	.L.str45, 6

	.type	.L.str46,@object        # @.str46
.L.str46:
	.asciz	"a"
	.size	.L.str46, 2

	.type	.L.str47,@object        # @.str47
.L.str47:
	.asciz	"0:0-7"
	.size	.L.str47, 6

	.type	.L.str48,@object        # @.str48
.L.str48:
	.asciz	"0:0-8"
	.size	.L.str48, 6

	.type	.L.str49,@object        # @.str49
.L.str49:
	.asciz	"0:0-9"
	.size	.L.str49, 6

	.type	.L.str50,@object        # @.str50
.L.str50:
	.asciz	"0:0-10"
	.size	.L.str50, 7

	.type	.L.str51,@object        # @.str51
.L.str51:
	.asciz	"0:0-11"
	.size	.L.str51, 7

	.type	.L.str52,@object        # @.str52
.L.str52:
	.asciz	"0:0-12"
	.size	.L.str52, 7

	.type	.L.str53,@object        # @.str53
.L.str53:
	.asciz	"0:0-13"
	.size	.L.str53, 7

	.type	.L.str54,@object        # @.str54
.L.str54:
	.asciz	"0:0-14"
	.size	.L.str54, 7

	.type	.L.str55,@object        # @.str55
.L.str55:
	.asciz	"rs"
	.size	.L.str55, 3

	.type	.L.str56,@object        # @.str56
.L.str56:
	.asciz	"w"
	.size	.L.str56, 2

	.type	.L.str57,@object        # @.str57
.L.str57:
	.asciz	"z"
	.size	.L.str57, 2

	.type	.L.str58,@object        # @.str58
.L.str58:
	.asciz	"15"
	.size	.L.str58, 3

	.type	.L.str59,@object        # @.str59
.L.str59:
	.asciz	"0:0-16"
	.size	.L.str59, 7

	.type	.L.str60,@object        # @.str60
.L.str60:
	.asciz	"19"
	.size	.L.str60, 3

	.type	.L.str61,@object        # @.str61
.L.str61:
	.asciz	"20"
	.size	.L.str61, 3

	.type	.L.str62,@object        # @.str62
.L.str62:
	.asciz	".lr.ph:1-1"
	.size	.L.str62, 11

	.type	.L.str63,@object        # @.str63
.L.str63:
	.asciz	"main"
	.size	.L.str63, 5

	.type	.L.str64,@object        # @.str64
.L.str64:
	.asciz	"malloc"
	.size	.L.str64, 7

	.type	.L.str65,@object        # @.str65
.L.str65:
	.asciz	"0:0-4"
	.size	.L.str65, 6

	.type	.L.str66,@object        # @.str66
.L.str66:
	.asciz	"5:1"
	.size	.L.str66, 4

	.type	.L.str67,@object        # @.str67
.L.str67:
	.asciz	"5:1-0"
	.size	.L.str67, 6

	.type	.L.str68,@object        # @.str68
.L.str68:
	.asciz	"5:1-1"
	.size	.L.str68, 6

	.type	.L.str69,@object        # @.str69
.L.str69:
	.asciz	"5:1-2"
	.size	.L.str69, 6

	.type	.L.str70,@object        # @.str70
.L.str70:
	.asciz	"9:0"
	.size	.L.str70, 4

	.type	.L.str71,@object        # @.str71
.L.str71:
	.asciz	"9:0-0"
	.size	.L.str71, 6

	.type	.L.str72,@object        # @.str72
.L.str72:
	.asciz	"9:0-2"
	.size	.L.str72, 6

	.type	.L.str73,@object        # @.str73
	.align	16
.L.str73:
	.asciz	"store_kernel/loop 50\n"
	.size	.L.str73, 22

	.type	.L.str74,@object        # @.str74
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str74:
	.asciz	"\n"
	.size	.L.str74, 2

	.type	.L.str175,@object       # @.str175
.L.str175:
	.asciz	"RS - Fatal error!\n"
	.size	.L.str175, 19

	.type	.L.str276,@object       # @.str276
.L.str276:
	.asciz	"  Error return from TQLRAT!\n"
	.size	.L.str276, 29

	.type	.L.str377,@object       # @.str377
	.section	.rodata,"a",@progbits
.L.str377:
	.asciz	"pythag"
	.size	.L.str377, 7

	.type	.L.str478,@object       # @.str478
.L.str478:
	.asciz	"0:0"
	.size	.L.str478, 4

	.type	.L.str579,@object       # @.str579
.L.str579:
	.asciz	"1"
	.size	.L.str579, 2

	.type	.L.str680,@object       # @.str680
.L.str680:
	.asciz	"fabs"
	.size	.L.str680, 5

	.type	.L.str781,@object       # @.str781
.L.str781:
	.asciz	"phi"
	.size	.L.str781, 4

	.type	.L.str882,@object       # @.str882
.L.str882:
	.asciz	"a"
	.size	.L.str882, 2

	.type	.L.str983,@object       # @.str983
.L.str983:
	.asciz	"2"
	.size	.L.str983, 2

	.type	.L.str1084,@object      # @.str1084
.L.str1084:
	.asciz	"b"
	.size	.L.str1084, 2

	.type	.L.str1185,@object      # @.str1185
.L.str1185:
	.asciz	"3"
	.size	.L.str1185, 2

	.type	.L.str1286,@object      # @.str1286
.L.str1286:
	.asciz	"r8_max"
	.size	.L.str1286, 7

	.type	.L.str1387,@object      # @.str1387
.L.str1387:
	.asciz	"4"
	.size	.L.str1387, 2

	.type	.L.str1488,@object      # @.str1488
.L.str1488:
	.zero	1
	.size	.L.str1488, 1

	.type	.L.str1589,@object      # @.str1589
.L.str1589:
	.asciz	"0:0-3"
	.size	.L.str1589, 6

	.type	.L.str1690,@object      # @.str1690
.L.str1690:
	.asciz	"5:0"
	.size	.L.str1690, 4

	.type	.L.str1791,@object      # @.str1791
.L.str1791:
	.asciz	".loopexit:0"
	.size	.L.str1791, 12

	.type	.L.str1892,@object      # @.str1892
.L.str1892:
	.asciz	"6"
	.size	.L.str1892, 2

	.type	.L.str1993,@object      # @.str1993
.L.str1993:
	.asciz	"r8_min"
	.size	.L.str1993, 7

	.type	.L.str2094,@object      # @.str2094
.L.str2094:
	.asciz	"7"
	.size	.L.str2094, 2

	.type	.L.str2195,@object      # @.str2195
.L.str2195:
	.asciz	"8"
	.size	.L.str2195, 2

	.type	.L.str2296,@object      # @.str2296
.L.str2296:
	.asciz	"9"
	.size	.L.str2296, 2

	.type	.L.str2397,@object      # @.str2397
.L.str2397:
	.asciz	"10"
	.size	.L.str2397, 3

	.type	.L.str2498,@object      # @.str2498
.L.str2498:
	.asciz	"5:0-3"
	.size	.L.str2498, 6

	.type	.L.str2599,@object      # @.str2599
.L.str2599:
	.asciz	".lr.ph:1"
	.size	.L.str2599, 9

	.type	.L.str26100,@object     # @.str26100
.L.str26100:
	.asciz	"11"
	.size	.L.str26100, 3

	.type	.L.str27101,@object     # @.str27101
.L.str27101:
	.asciz	"19"
	.size	.L.str27101, 3

	.type	.L.str28102,@object     # @.str28102
.L.str28102:
	.asciz	"p.02"
	.size	.L.str28102, 5

	.type	.L.str29103,@object     # @.str29103
.L.str29103:
	.asciz	"15"
	.size	.L.str29103, 3

	.type	.L.str30104,@object     # @.str30104
.L.str30104:
	.asciz	"r.01"
	.size	.L.str30104, 5

	.type	.L.str31105,@object     # @.str31105
.L.str31105:
	.asciz	"18"
	.size	.L.str31105, 3

	.type	.L.str32106,@object     # @.str32106
.L.str32106:
	.asciz	"12"
	.size	.L.str32106, 3

	.type	.L.str33107,@object     # @.str33107
.L.str33107:
	.asciz	"13"
	.size	.L.str33107, 3

	.type	.L.str34108,@object     # @.str34108
.L.str34108:
	.asciz	"14"
	.size	.L.str34108, 3

	.type	.L.str35109,@object     # @.str35109
.L.str35109:
	.asciz	"16"
	.size	.L.str35109, 3

	.type	.L.str36110,@object     # @.str36110
.L.str36110:
	.asciz	"17"
	.size	.L.str36110, 3

	.type	.L.str37111,@object     # @.str37111
.L.str37111:
	.asciz	"20"
	.size	.L.str37111, 3

	.type	.L.str38112,@object     # @.str38112
.L.str38112:
	.asciz	".lr.ph:1-5"
	.size	.L.str38112, 11

	.type	.L.str39113,@object     # @.str39113
.L.str39113:
	.asciz	"p.1"
	.size	.L.str39113, 4

	.type	.L.str40114,@object     # @.str40114
.L.str40114:
	.asciz	".loopexit:0-0"
	.size	.L.str40114, 14

	.type	.L.str41115,@object     # @.str41115
.L.str41115:
	.asciz	"x"
	.size	.L.str41115, 2

	.type	.L.str42116,@object     # @.str42116
.L.str42116:
	.asciz	"y"
	.size	.L.str42116, 2

	.type	.L.str43117,@object     # @.str43117
.L.str43117:
	.asciz	"x.y"
	.size	.L.str43117, 4

	.type	.L.str44118,@object     # @.str44118
.L.str44118:
	.asciz	"0:0-2"
	.size	.L.str44118, 6

	.type	.L.str45119,@object     # @.str45119
.L.str45119:
	.asciz	"y.x"
	.size	.L.str45119, 4

	.type	.L.str46120,@object     # @.str46120
.L.str46120:
	.asciz	"r8_epsilon"
	.size	.L.str46120, 11

	.type	.L.str47121,@object     # @.str47121
.L.str47121:
	.asciz	"0:0-1"
	.size	.L.str47121, 6

	.type	.L.str48122,@object     # @.str48122
.L.str48122:
	.asciz	"r8_sign"
	.size	.L.str48122, 8

	.type	.L.str49123,@object     # @.str49123
.L.str49123:
	.asciz	"."
	.size	.L.str49123, 2

	.type	.L.str50124,@object     # @.str50124
.L.str50124:
	.asciz	"rs"
	.size	.L.str50124, 3

	.type	.L.str51125,@object     # @.str51125
.L.str51125:
	.asciz	"n"
	.size	.L.str51125, 2

	.type	.L.str52126,@object     # @.str52126
.L.str52126:
	.asciz	"0:0-7"
	.size	.L.str52126, 6

	.type	.L.str53127,@object     # @.str53127
.L.str53127:
	.asciz	"11:0"
	.size	.L.str53127, 5

	.type	.L.str54128,@object     # @.str54128
.L.str54128:
	.asciz	"4:0"
	.size	.L.str54128, 4

	.type	.L.str55129,@object     # @.str55129
.L.str55129:
	.asciz	"matz"
	.size	.L.str55129, 5

	.type	.L.str56130,@object     # @.str56130
.L.str56130:
	.asciz	"4:0-0"
	.size	.L.str56130, 6

	.type	.L.str57131,@object     # @.str57131
.L.str57131:
	.asciz	"tred1"
	.size	.L.str57131, 6

	.type	.L.str58132,@object     # @.str58132
.L.str58132:
	.asciz	"w"
	.size	.L.str58132, 2

	.type	.L.str59133,@object     # @.str59133
.L.str59133:
	.asciz	"fv1"
	.size	.L.str59133, 4

	.type	.L.str60134,@object     # @.str60134
.L.str60134:
	.asciz	"fv2"
	.size	.L.str60134, 4

	.type	.L.str61135,@object     # @.str61135
.L.str61135:
	.asciz	"5"
	.size	.L.str61135, 2

	.type	.L.str62136,@object     # @.str62136
.L.str62136:
	.asciz	"tqlrat"
	.size	.L.str62136, 7

	.type	.L.str63137,@object     # @.str63137
.L.str63137:
	.asciz	"4:0-2"
	.size	.L.str63137, 6

	.type	.L.str64138,@object     # @.str64138
.L.str64138:
	.asciz	"7:0"
	.size	.L.str64138, 4

	.type	.L.str65139,@object     # @.str65139
.L.str65139:
	.asciz	"printf"
	.size	.L.str65139, 7

	.type	.L.str66140,@object     # @.str66140
.L.str66140:
	.asciz	"7:0-0"
	.size	.L.str66140, 6

	.type	.L.str67141,@object     # @.str67141
.L.str67141:
	.asciz	".0"
	.size	.L.str67141, 3

	.type	.L.str68142,@object     # @.str68142
.L.str68142:
	.asciz	"11:0-0"
	.size	.L.str68142, 7

	.type	.L.str69143,@object     # @.str69143
.L.str69143:
	.asciz	"z"
	.size	.L.str69143, 2

	.type	.L.str70144,@object     # @.str70144
.L.str70144:
	.asciz	"0:0-6"
	.size	.L.str70144, 6

	.type	.L.str71145,@object     # @.str71145
.L.str71145:
	.asciz	".lr.ph58:0"
	.size	.L.str71145, 11

	.type	.L.str72146,@object     # @.str72146
.L.str72146:
	.asciz	"._crit_edge52:0"
	.size	.L.str72146, 16

	.type	.L.str73147,@object     # @.str73147
.L.str73147:
	.asciz	".lr.ph58:0-0"
	.size	.L.str73147, 13

	.type	.L.str74148,@object     # @.str74148
.L.str74148:
	.asciz	"5:1"
	.size	.L.str74148, 4

	.type	.L.str75,@object        # @.str75
.L.str75:
	.asciz	".preheader53:0"
	.size	.L.str75, 15

	.type	.L.str76,@object        # @.str76
	.align	16
.L.str76:
	.asciz	".preheader53:0-0"
	.size	.L.str76, 17

	.type	.L.str77,@object        # @.str77
.L.str77:
	.asciz	".lr.ph55:0"
	.size	.L.str77, 11

	.type	.L.str78,@object        # @.str78
.L.str78:
	.asciz	".lr.ph55:0-0"
	.size	.L.str78, 13

	.type	.L.str79,@object        # @.str79
.L.str79:
	.asciz	"15:1"
	.size	.L.str79, 5

	.type	.L.str80,@object        # @.str80
.L.str80:
	.asciz	"indvars.iv140"
	.size	.L.str80, 14

	.type	.L.str81,@object        # @.str81
	.align	16
.L.str81:
	.asciz	"indvars.iv.next141"
	.size	.L.str81, 19

	.type	.L.str82,@object        # @.str82
.L.str82:
	.asciz	"d"
	.size	.L.str82, 2

	.type	.L.str83,@object        # @.str83
.L.str83:
	.asciz	"5:1-0"
	.size	.L.str83, 6

	.type	.L.str84,@object        # @.str84
.L.str84:
	.asciz	"lftr.wideiv142"
	.size	.L.str84, 15

	.type	.L.str85,@object        # @.str85
.L.str85:
	.asciz	"exitcond143"
	.size	.L.str85, 12

	.type	.L.str86,@object        # @.str86
.L.str86:
	.asciz	"5:1-1"
	.size	.L.str86, 6

	.type	.L.str87,@object        # @.str87
.L.str87:
	.asciz	".preheader47:0"
	.size	.L.str87, 15

	.type	.L.str88,@object        # @.str88
	.align	16
.L.str88:
	.asciz	".preheader47:0-0"
	.size	.L.str88, 17

	.type	.L.str89,@object        # @.str89
.L.str89:
	.asciz	".lr.ph51:0"
	.size	.L.str89, 11

	.type	.L.str90,@object        # @.str90
.L.str90:
	.asciz	".lr.ph51:0-0"
	.size	.L.str90, 13

	.type	.L.str91,@object        # @.str91
.L.str91:
	.asciz	"26:1"
	.size	.L.str91, 5

	.type	.L.str92,@object        # @.str92
.L.str92:
	.asciz	"indvars.iv136"
	.size	.L.str92, 14

	.type	.L.str93,@object        # @.str93
	.align	16
.L.str93:
	.asciz	"indvars.iv.next137"
	.size	.L.str93, 19

	.type	.L.str94,@object        # @.str94
.L.str94:
	.asciz	"21"
	.size	.L.str94, 3

	.type	.L.str95,@object        # @.str95
.L.str95:
	.asciz	"22"
	.size	.L.str95, 3

	.type	.L.str96,@object        # @.str96
.L.str96:
	.asciz	"23"
	.size	.L.str96, 3

	.type	.L.str97,@object        # @.str97
.L.str97:
	.asciz	"24"
	.size	.L.str97, 3

	.type	.L.str98,@object        # @.str98
.L.str98:
	.asciz	"25"
	.size	.L.str98, 3

	.type	.L.str99,@object        # @.str99
.L.str99:
	.asciz	"15:1-0"
	.size	.L.str99, 7

	.type	.L.str100,@object       # @.str100
.L.str100:
	.asciz	"lftr.wideiv138"
	.size	.L.str100, 15

	.type	.L.str101,@object       # @.str101
.L.str101:
	.asciz	"exitcond139"
	.size	.L.str101, 12

	.type	.L.str102,@object       # @.str102
.L.str102:
	.asciz	"15:1-1"
	.size	.L.str102, 7

	.type	.L.str103,@object       # @.str103
.L.str103:
	.asciz	"indvars.iv134"
	.size	.L.str103, 14

	.type	.L.str104,@object       # @.str104
	.align	16
.L.str104:
	.asciz	"indvars.iv.next135"
	.size	.L.str104, 19

	.type	.L.str105,@object       # @.str105
.L.str105:
	.asciz	".backedge:1"
	.size	.L.str105, 12

	.type	.L.str106,@object       # @.str106
	.align	16
.L.str106:
	.asciz	"indvars.iv130.in"
	.size	.L.str106, 17

	.type	.L.str107,@object       # @.str107
.L.str107:
	.asciz	"indvars.iv130"
	.size	.L.str107, 14

	.type	.L.str108,@object       # @.str108
.L.str108:
	.asciz	"i.150.in"
	.size	.L.str108, 9

	.type	.L.str109,@object       # @.str109
.L.str109:
	.asciz	"i.150"
	.size	.L.str109, 6

	.type	.L.str110,@object       # @.str110
.L.str110:
	.asciz	"27"
	.size	.L.str110, 3

	.type	.L.str111,@object       # @.str111
.L.str111:
	.asciz	"28"
	.size	.L.str111, 3

	.type	.L.str112,@object       # @.str112
.L.str112:
	.asciz	"26:1-4"
	.size	.L.str112, 7

	.type	.L.str113,@object       # @.str113
.L.str113:
	.asciz	"._crit_edge46:1"
	.size	.L.str113, 16

	.type	.L.str114,@object       # @.str114
.L.str114:
	.asciz	".lr.ph:2"
	.size	.L.str114, 9

	.type	.L.str115,@object       # @.str115
.L.str115:
	.asciz	"indvars.iv"
	.size	.L.str115, 11

	.type	.L.str116,@object       # @.str116
.L.str116:
	.asciz	"indvars.iv.next"
	.size	.L.str116, 16

	.type	.L.str117,@object       # @.str117
.L.str117:
	.asciz	"scale.02"
	.size	.L.str117, 9

	.type	.L.str118,@object       # @.str118
.L.str118:
	.asciz	"32"
	.size	.L.str118, 3

	.type	.L.str119,@object       # @.str119
.L.str119:
	.asciz	"29"
	.size	.L.str119, 3

	.type	.L.str120,@object       # @.str120
.L.str120:
	.asciz	"30"
	.size	.L.str120, 3

	.type	.L.str121,@object       # @.str121
.L.str121:
	.asciz	"31"
	.size	.L.str121, 3

	.type	.L.str122,@object       # @.str122
.L.str122:
	.asciz	"lftr.wideiv"
	.size	.L.str122, 12

	.type	.L.str123,@object       # @.str123
.L.str123:
	.asciz	"exitcond"
	.size	.L.str123, 9

	.type	.L.str124,@object       # @.str124
.L.str124:
	.asciz	".lr.ph:2-1"
	.size	.L.str124, 11

	.type	.L.str125,@object       # @.str125
.L.str125:
	.asciz	"._crit_edge:1"
	.size	.L.str125, 14

	.type	.L.str126,@object       # @.str126
.L.str126:
	.asciz	"33"
	.size	.L.str126, 3

	.type	.L.str127,@object       # @.str127
.L.str127:
	.asciz	"34"
	.size	.L.str127, 3

	.type	.L.str128,@object       # @.str128
.L.str128:
	.asciz	"._crit_edge:1-0"
	.size	.L.str128, 16

	.type	.L.str129,@object       # @.str129
.L.str129:
	.asciz	".preheader43:1"
	.size	.L.str129, 15

	.type	.L.str130,@object       # @.str130
.L.str130:
	.asciz	".preheader:1"
	.size	.L.str130, 13

	.type	.L.str131,@object       # @.str131
	.align	16
.L.str131:
	.asciz	".preheader43:1-0"
	.size	.L.str131, 17

	.type	.L.str132,@object       # @.str132
.L.str132:
	.asciz	".lr.ph45:2"
	.size	.L.str132, 11

	.type	.L.str133,@object       # @.str133
.L.str133:
	.asciz	".preheader:1-0"
	.size	.L.str133, 15

	.type	.L.str134,@object       # @.str134
.L.str134:
	.asciz	"._crit_edge8:1"
	.size	.L.str134, 15

	.type	.L.str135,@object       # @.str135
.L.str135:
	.asciz	".lr.ph4:2"
	.size	.L.str135, 10

	.type	.L.str136,@object       # @.str136
.L.str136:
	.asciz	"indvars.iv128"
	.size	.L.str136, 14

	.type	.L.str137,@object       # @.str137
	.align	16
.L.str137:
	.asciz	"indvars.iv.next129"
	.size	.L.str137, 19

	.type	.L.str138,@object       # @.str138
.L.str138:
	.asciz	"35"
	.size	.L.str138, 3

	.type	.L.str139,@object       # @.str139
.L.str139:
	.asciz	"36"
	.size	.L.str139, 3

	.type	.L.str140,@object       # @.str140
.L.str140:
	.asciz	"37"
	.size	.L.str140, 3

	.type	.L.str141,@object       # @.str141
.L.str141:
	.asciz	"38"
	.size	.L.str141, 3

	.type	.L.str142,@object       # @.str142
.L.str142:
	.asciz	"39"
	.size	.L.str142, 3

	.type	.L.str143,@object       # @.str143
.L.str143:
	.asciz	"40"
	.size	.L.str143, 3

	.type	.L.str144,@object       # @.str144
.L.str144:
	.asciz	"41"
	.size	.L.str144, 3

	.type	.L.str145,@object       # @.str145
.L.str145:
	.asciz	".lr.ph45:2-0"
	.size	.L.str145, 13

	.type	.L.str146,@object       # @.str146
.L.str146:
	.asciz	"42"
	.size	.L.str146, 3

	.type	.L.str147,@object       # @.str147
.L.str147:
	.asciz	"43"
	.size	.L.str147, 3

	.type	.L.str148,@object       # @.str148
.L.str148:
	.asciz	"44"
	.size	.L.str148, 3

	.type	.L.str149,@object       # @.str149
.L.str149:
	.asciz	"45"
	.size	.L.str149, 3

	.type	.L.str150,@object       # @.str150
.L.str150:
	.asciz	"46"
	.size	.L.str150, 3

	.type	.L.str151,@object       # @.str151
.L.str151:
	.asciz	".lr.ph45:2-1"
	.size	.L.str151, 13

	.type	.L.str152,@object       # @.str152
.L.str152:
	.asciz	".lr.ph45:2-2"
	.size	.L.str152, 13

	.type	.L.str153,@object       # @.str153
.L.str153:
	.asciz	"lftr.wideiv132"
	.size	.L.str153, 15

	.type	.L.str154,@object       # @.str154
.L.str154:
	.asciz	"exitcond133"
	.size	.L.str154, 12

	.type	.L.str155,@object       # @.str155
.L.str155:
	.asciz	".lr.ph45:2-3"
	.size	.L.str155, 13

	.type	.L.str156,@object       # @.str156
.L.str156:
	.asciz	"47"
	.size	.L.str156, 3

	.type	.L.str157,@object       # @.str157
.L.str157:
	.asciz	"e"
	.size	.L.str157, 2

	.type	.L.str158,@object       # @.str158
	.align	16
.L.str158:
	.asciz	"._crit_edge46:1-0"
	.size	.L.str158, 18

	.type	.L.str159,@object       # @.str159
.L.str159:
	.asciz	"48"
	.size	.L.str159, 3

	.type	.L.str160,@object       # @.str160
.L.str160:
	.asciz	"e2"
	.size	.L.str160, 3

	.type	.L.str161,@object       # @.str161
	.align	16
.L.str161:
	.asciz	"._crit_edge46:1-1"
	.size	.L.str161, 18

	.type	.L.str162,@object       # @.str162
	.align	16
.L.str162:
	.asciz	"._crit_edge46:1-2"
	.size	.L.str162, 18

	.type	.L.str163,@object       # @.str163
.L.str163:
	.asciz	"49"
	.size	.L.str163, 3

	.type	.L.str164,@object       # @.str164
.L.str164:
	.asciz	"50"
	.size	.L.str164, 3

	.type	.L.str165,@object       # @.str165
.L.str165:
	.asciz	".backedge:1-0"
	.size	.L.str165, 14

	.type	.L.str166,@object       # @.str166
.L.str166:
	.asciz	"indvars.iv61"
	.size	.L.str166, 13

	.type	.L.str167,@object       # @.str167
	.align	16
.L.str167:
	.asciz	"indvars.iv.next62"
	.size	.L.str167, 18

	.type	.L.str168,@object       # @.str168
.L.str168:
	.asciz	"51"
	.size	.L.str168, 3

	.type	.L.str169,@object       # @.str169
.L.str169:
	.asciz	"52"
	.size	.L.str169, 3

	.type	.L.str170,@object       # @.str170
.L.str170:
	.asciz	"53"
	.size	.L.str170, 3

	.type	.L.str171,@object       # @.str171
.L.str171:
	.asciz	".lr.ph4:2-0"
	.size	.L.str171, 12

	.type	.L.str172,@object       # @.str172
.L.str172:
	.asciz	"lftr.wideiv65"
	.size	.L.str172, 14

	.type	.L.str173,@object       # @.str173
.L.str173:
	.asciz	"exitcond66"
	.size	.L.str173, 11

	.type	.L.str174,@object       # @.str174
.L.str174:
	.asciz	".lr.ph4:2-1"
	.size	.L.str174, 12

	.type	.L.str175149,@object    # @.str175149
.L.str175149:
	.asciz	".loopexit:1"
	.size	.L.str175149, 12

	.type	.L.str176,@object       # @.str176
.L.str176:
	.asciz	"54"
	.size	.L.str176, 3

	.type	.L.str177,@object       # @.str177
.L.str177:
	.asciz	".loopexit:1-0"
	.size	.L.str177, 14

	.type	.L.str178,@object       # @.str178
.L.str178:
	.asciz	".lr.ph7:2"
	.size	.L.str178, 10

	.type	.L.str179,@object       # @.str179
.L.str179:
	.asciz	"indvars.iv68"
	.size	.L.str179, 13

	.type	.L.str180,@object       # @.str180
	.align	16
.L.str180:
	.asciz	"indvars.iv.next69"
	.size	.L.str180, 18

	.type	.L.str181,@object       # @.str181
.L.str181:
	.asciz	"h.05"
	.size	.L.str181, 5

	.type	.L.str182,@object       # @.str182
.L.str182:
	.asciz	"58"
	.size	.L.str182, 3

	.type	.L.str183,@object       # @.str183
.L.str183:
	.asciz	"55"
	.size	.L.str183, 3

	.type	.L.str184,@object       # @.str184
.L.str184:
	.asciz	"56"
	.size	.L.str184, 3

	.type	.L.str185,@object       # @.str185
.L.str185:
	.asciz	"57"
	.size	.L.str185, 3

	.type	.L.str186,@object       # @.str186
.L.str186:
	.asciz	"lftr.wideiv72"
	.size	.L.str186, 14

	.type	.L.str187,@object       # @.str187
.L.str187:
	.asciz	"exitcond73"
	.size	.L.str187, 11

	.type	.L.str188,@object       # @.str188
.L.str188:
	.asciz	".lr.ph7:2-1"
	.size	.L.str188, 12

	.type	.L.str189,@object       # @.str189
.L.str189:
	.asciz	"h.0.lcssa"
	.size	.L.str189, 10

	.type	.L.str190,@object       # @.str190
.L.str190:
	.asciz	"59"
	.size	.L.str190, 3

	.type	.L.str191,@object       # @.str191
.L.str191:
	.asciz	"60"
	.size	.L.str191, 3

	.type	.L.str192,@object       # @.str192
.L.str192:
	.asciz	"61"
	.size	.L.str192, 3

	.type	.L.str193,@object       # @.str193
	.align	16
.L.str193:
	.asciz	"._crit_edge8:1-0"
	.size	.L.str193, 17

	.type	.L.str194,@object       # @.str194
.L.str194:
	.asciz	"62"
	.size	.L.str194, 3

	.type	.L.str195,@object       # @.str195
.L.str195:
	.asciz	"63"
	.size	.L.str195, 3

	.type	.L.str196,@object       # @.str196
.L.str196:
	.asciz	"64"
	.size	.L.str196, 3

	.type	.L.str197,@object       # @.str197
.L.str197:
	.asciz	"65"
	.size	.L.str197, 3

	.type	.L.str198,@object       # @.str198
.L.str198:
	.asciz	"sqrt"
	.size	.L.str198, 5

	.type	.L.str199,@object       # @.str199
.L.str199:
	.asciz	"66"
	.size	.L.str199, 3

	.type	.L.str200,@object       # @.str200
.L.str200:
	.asciz	"67"
	.size	.L.str200, 3

	.type	.L.str201,@object       # @.str201
.L.str201:
	.asciz	"68"
	.size	.L.str201, 3

	.type	.L.str202,@object       # @.str202
.L.str202:
	.asciz	"69"
	.size	.L.str202, 3

	.type	.L.str203,@object       # @.str203
.L.str203:
	.asciz	"70"
	.size	.L.str203, 3

	.type	.L.str204,@object       # @.str204
	.align	16
.L.str204:
	.asciz	"._crit_edge8:1-3"
	.size	.L.str204, 17

	.type	.L.str205,@object       # @.str205
.L.str205:
	.asciz	"71"
	.size	.L.str205, 3

	.type	.L.str206,@object       # @.str206
.L.str206:
	.asciz	"72"
	.size	.L.str206, 3

	.type	.L.str207,@object       # @.str207
.L.str207:
	.asciz	"73"
	.size	.L.str207, 3

	.type	.L.str208,@object       # @.str208
	.align	16
.L.str208:
	.asciz	"._crit_edge8:1-5"
	.size	.L.str208, 17

	.type	.L.str209,@object       # @.str209
.L.str209:
	.asciz	"74"
	.size	.L.str209, 3

	.type	.L.str210,@object       # @.str210
	.align	16
.L.str210:
	.asciz	"._crit_edge8:1-6"
	.size	.L.str210, 17

	.type	.L.str211,@object       # @.str211
.L.str211:
	.asciz	".lr.ph13:2"
	.size	.L.str211, 11

	.type	.L.str212,@object       # @.str212
.L.str212:
	.asciz	"indvars.iv74"
	.size	.L.str212, 13

	.type	.L.str213,@object       # @.str213
	.align	16
.L.str213:
	.asciz	"indvars.iv.next75"
	.size	.L.str213, 18

	.type	.L.str214,@object       # @.str214
.L.str214:
	.asciz	"75"
	.size	.L.str214, 3

	.type	.L.str215,@object       # @.str215
.L.str215:
	.asciz	".lr.ph13:2-0"
	.size	.L.str215, 13

	.type	.L.str216,@object       # @.str216
.L.str216:
	.asciz	"lftr.wideiv78"
	.size	.L.str216, 14

	.type	.L.str217,@object       # @.str217
.L.str217:
	.asciz	"exitcond79"
	.size	.L.str217, 11

	.type	.L.str218,@object       # @.str218
.L.str218:
	.asciz	".lr.ph13:2-1"
	.size	.L.str218, 13

	.type	.L.str219,@object       # @.str219
.L.str219:
	.asciz	".loopexit11:1"
	.size	.L.str219, 14

	.type	.L.str220,@object       # @.str220
.L.str220:
	.asciz	"76"
	.size	.L.str220, 3

	.type	.L.str221,@object       # @.str221
.L.str221:
	.asciz	".loopexit11:1-0"
	.size	.L.str221, 16

	.type	.L.str222,@object       # @.str222
.L.str222:
	.asciz	".lr.ph22:2"
	.size	.L.str222, 11

	.type	.L.str223,@object       # @.str223
.L.str223:
	.asciz	"indvars.iv89"
	.size	.L.str223, 13

	.type	.L.str224,@object       # @.str224
	.align	16
.L.str224:
	.asciz	"indvars.iv.next90"
	.size	.L.str224, 18

	.type	.L.str225,@object       # @.str225
.L.str225:
	.asciz	"._crit_edge18:2"
	.size	.L.str225, 16

	.type	.L.str226,@object       # @.str226
.L.str226:
	.asciz	"indvars.iv81"
	.size	.L.str226, 13

	.type	.L.str227,@object       # @.str227
	.align	16
.L.str227:
	.asciz	"indvars.iv.next82"
	.size	.L.str227, 18

	.type	.L.str228,@object       # @.str228
.L.str228:
	.asciz	"77"
	.size	.L.str228, 3

	.type	.L.str229,@object       # @.str229
.L.str229:
	.asciz	"78"
	.size	.L.str229, 3

	.type	.L.str230,@object       # @.str230
.L.str230:
	.asciz	"79"
	.size	.L.str230, 3

	.type	.L.str231,@object       # @.str231
.L.str231:
	.asciz	"80"
	.size	.L.str231, 3

	.type	.L.str232,@object       # @.str232
.L.str232:
	.asciz	"81"
	.size	.L.str232, 3

	.type	.L.str233,@object       # @.str233
.L.str233:
	.asciz	"82"
	.size	.L.str233, 3

	.type	.L.str234,@object       # @.str234
.L.str234:
	.asciz	"83"
	.size	.L.str234, 3

	.type	.L.str235,@object       # @.str235
.L.str235:
	.asciz	"84"
	.size	.L.str235, 3

	.type	.L.str236,@object       # @.str236
.L.str236:
	.asciz	"85"
	.size	.L.str236, 3

	.type	.L.str237,@object       # @.str237
.L.str237:
	.asciz	"86"
	.size	.L.str237, 3

	.type	.L.str238,@object       # @.str238
.L.str238:
	.asciz	"87"
	.size	.L.str238, 3

	.type	.L.str239,@object       # @.str239
.L.str239:
	.asciz	"88"
	.size	.L.str239, 3

	.type	.L.str240,@object       # @.str240
.L.str240:
	.asciz	"89"
	.size	.L.str240, 3

	.type	.L.str241,@object       # @.str241
.L.str241:
	.asciz	"90"
	.size	.L.str241, 3

	.type	.L.str242,@object       # @.str242
.L.str242:
	.asciz	"91"
	.size	.L.str242, 3

	.type	.L.str243,@object       # @.str243
.L.str243:
	.asciz	".lr.ph22:2-2"
	.size	.L.str243, 13

	.type	.L.str244,@object       # @.str244
.L.str244:
	.asciz	".lr.ph17:2"
	.size	.L.str244, 11

	.type	.L.str245,@object       # @.str245
.L.str245:
	.asciz	"92"
	.size	.L.str245, 3

	.type	.L.str246,@object       # @.str246
.L.str246:
	.asciz	".lr.ph17:2-0"
	.size	.L.str246, 13

	.type	.L.str247,@object       # @.str247
.L.str247:
	.asciz	"93:3"
	.size	.L.str247, 5

	.type	.L.str248,@object       # @.str248
.L.str248:
	.asciz	"indvars.iv83"
	.size	.L.str248, 13

	.type	.L.str249,@object       # @.str249
	.align	16
.L.str249:
	.asciz	"indvars.iv.next84"
	.size	.L.str249, 18

	.type	.L.str250,@object       # @.str250
.L.str250:
	.asciz	"g.014"
	.size	.L.str250, 6

	.type	.L.str251,@object       # @.str251
.L.str251:
	.asciz	"100"
	.size	.L.str251, 4

	.type	.L.str252,@object       # @.str252
.L.str252:
	.asciz	"94"
	.size	.L.str252, 3

	.type	.L.str253,@object       # @.str253
.L.str253:
	.asciz	"95"
	.size	.L.str253, 3

	.type	.L.str254,@object       # @.str254
.L.str254:
	.asciz	"96"
	.size	.L.str254, 3

	.type	.L.str255,@object       # @.str255
.L.str255:
	.asciz	"97"
	.size	.L.str255, 3

	.type	.L.str256,@object       # @.str256
.L.str256:
	.asciz	"98"
	.size	.L.str256, 3

	.type	.L.str257,@object       # @.str257
.L.str257:
	.asciz	"99"
	.size	.L.str257, 3

	.type	.L.str258,@object       # @.str258
.L.str258:
	.asciz	"101"
	.size	.L.str258, 4

	.type	.L.str259,@object       # @.str259
.L.str259:
	.asciz	"102"
	.size	.L.str259, 4

	.type	.L.str260,@object       # @.str260
.L.str260:
	.asciz	"103"
	.size	.L.str260, 4

	.type	.L.str261,@object       # @.str261
.L.str261:
	.asciz	"104"
	.size	.L.str261, 4

	.type	.L.str262,@object       # @.str262
.L.str262:
	.asciz	"93:3-1"
	.size	.L.str262, 7

	.type	.L.str263,@object       # @.str263
.L.str263:
	.asciz	"lftr.wideiv87"
	.size	.L.str263, 14

	.type	.L.str264,@object       # @.str264
.L.str264:
	.asciz	"exitcond88"
	.size	.L.str264, 11

	.type	.L.str265,@object       # @.str265
.L.str265:
	.asciz	"93:3-2"
	.size	.L.str265, 7

	.type	.L.str266,@object       # @.str266
.L.str266:
	.asciz	"g.0.lcssa"
	.size	.L.str266, 10

	.type	.L.str267,@object       # @.str267
	.align	16
.L.str267:
	.asciz	"._crit_edge18:2-0"
	.size	.L.str267, 18

	.type	.L.str268,@object       # @.str268
.L.str268:
	.asciz	"lftr.wideiv93"
	.size	.L.str268, 14

	.type	.L.str269,@object       # @.str269
.L.str269:
	.asciz	"exitcond94"
	.size	.L.str269, 11

	.type	.L.str270,@object       # @.str270
	.align	16
.L.str270:
	.asciz	"._crit_edge18:2-1"
	.size	.L.str270, 18

	.type	.L.str271,@object       # @.str271
.L.str271:
	.asciz	".loopexit20:1"
	.size	.L.str271, 14

	.type	.L.str272,@object       # @.str272
.L.str272:
	.asciz	"105"
	.size	.L.str272, 4

	.type	.L.str273,@object       # @.str273
.L.str273:
	.asciz	".loopexit20:1-0"
	.size	.L.str273, 16

	.type	.L.str274,@object       # @.str274
.L.str274:
	.asciz	".lr.ph25:2"
	.size	.L.str274, 11

	.type	.L.str275,@object       # @.str275
.L.str275:
	.asciz	"indvars.iv96"
	.size	.L.str275, 13

	.type	.L.str276150,@object    # @.str276150
	.align	16
.L.str276150:
	.asciz	"indvars.iv.next97"
	.size	.L.str276150, 18

	.type	.L.str277,@object       # @.str277
.L.str277:
	.asciz	"f.024"
	.size	.L.str277, 6

	.type	.L.str278,@object       # @.str278
.L.str278:
	.asciz	"112"
	.size	.L.str278, 4

	.type	.L.str279,@object       # @.str279
.L.str279:
	.asciz	"106"
	.size	.L.str279, 4

	.type	.L.str280,@object       # @.str280
.L.str280:
	.asciz	"107"
	.size	.L.str280, 4

	.type	.L.str281,@object       # @.str281
.L.str281:
	.asciz	"108"
	.size	.L.str281, 4

	.type	.L.str282,@object       # @.str282
.L.str282:
	.asciz	".lr.ph25:2-0"
	.size	.L.str282, 13

	.type	.L.str283,@object       # @.str283
.L.str283:
	.asciz	"109"
	.size	.L.str283, 4

	.type	.L.str284,@object       # @.str284
.L.str284:
	.asciz	"110"
	.size	.L.str284, 4

	.type	.L.str285,@object       # @.str285
.L.str285:
	.asciz	"111"
	.size	.L.str285, 4

	.type	.L.str286,@object       # @.str286
.L.str286:
	.asciz	"lftr.wideiv100"
	.size	.L.str286, 15

	.type	.L.str287,@object       # @.str287
.L.str287:
	.asciz	"exitcond101"
	.size	.L.str287, 12

	.type	.L.str288,@object       # @.str288
.L.str288:
	.asciz	".lr.ph25:2-2"
	.size	.L.str288, 13

	.type	.L.str289,@object       # @.str289
.L.str289:
	.asciz	"._crit_edge26:1"
	.size	.L.str289, 16

	.type	.L.str290,@object       # @.str290
.L.str290:
	.asciz	"113"
	.size	.L.str290, 4

	.type	.L.str291,@object       # @.str291
.L.str291:
	.asciz	"114"
	.size	.L.str291, 4

	.type	.L.str292,@object       # @.str292
.L.str292:
	.asciz	"115"
	.size	.L.str292, 4

	.type	.L.str293,@object       # @.str293
	.align	16
.L.str293:
	.asciz	"._crit_edge26:1-2"
	.size	.L.str293, 18

	.type	.L.str294,@object       # @.str294
.L.str294:
	.asciz	".lr.ph31:2"
	.size	.L.str294, 11

	.type	.L.str295,@object       # @.str295
.L.str295:
	.asciz	"indvars.iv102"
	.size	.L.str295, 14

	.type	.L.str296,@object       # @.str296
	.align	16
.L.str296:
	.asciz	"indvars.iv.next103"
	.size	.L.str296, 19

	.type	.L.str297,@object       # @.str297
.L.str297:
	.asciz	"116"
	.size	.L.str297, 4

	.type	.L.str298,@object       # @.str298
.L.str298:
	.asciz	"117"
	.size	.L.str298, 4

	.type	.L.str299,@object       # @.str299
.L.str299:
	.asciz	"118"
	.size	.L.str299, 4

	.type	.L.str300,@object       # @.str300
.L.str300:
	.asciz	"119"
	.size	.L.str300, 4

	.type	.L.str301,@object       # @.str301
.L.str301:
	.asciz	"120"
	.size	.L.str301, 4

	.type	.L.str302,@object       # @.str302
.L.str302:
	.asciz	"121"
	.size	.L.str302, 4

	.type	.L.str303,@object       # @.str303
.L.str303:
	.asciz	".lr.ph31:2-0"
	.size	.L.str303, 13

	.type	.L.str304,@object       # @.str304
.L.str304:
	.asciz	"lftr.wideiv106"
	.size	.L.str304, 15

	.type	.L.str305,@object       # @.str305
.L.str305:
	.asciz	"exitcond107"
	.size	.L.str305, 12

	.type	.L.str306,@object       # @.str306
.L.str306:
	.asciz	".lr.ph31:2-1"
	.size	.L.str306, 13

	.type	.L.str307,@object       # @.str307
.L.str307:
	.asciz	".loopexit28:1"
	.size	.L.str307, 14

	.type	.L.str308,@object       # @.str308
.L.str308:
	.asciz	"122"
	.size	.L.str308, 4

	.type	.L.str309,@object       # @.str309
.L.str309:
	.asciz	".loopexit28:1-0"
	.size	.L.str309, 16

	.type	.L.str310,@object       # @.str310
.L.str310:
	.asciz	".lr.ph34:2"
	.size	.L.str310, 11

	.type	.L.str311,@object       # @.str311
.L.str311:
	.asciz	"indvars.iv116"
	.size	.L.str311, 14

	.type	.L.str312,@object       # @.str312
	.align	16
.L.str312:
	.asciz	"indvars.iv.next117"
	.size	.L.str312, 19

	.type	.L.str313,@object       # @.str313
.L.str313:
	.asciz	"._crit_edge35:2"
	.size	.L.str313, 16

	.type	.L.str314,@object       # @.str314
.L.str314:
	.asciz	"123"
	.size	.L.str314, 4

	.type	.L.str315,@object       # @.str315
.L.str315:
	.asciz	"124"
	.size	.L.str315, 4

	.type	.L.str316,@object       # @.str316
.L.str316:
	.asciz	"125"
	.size	.L.str316, 4

	.type	.L.str317,@object       # @.str317
.L.str317:
	.asciz	"126"
	.size	.L.str317, 4

	.type	.L.str318,@object       # @.str318
.L.str318:
	.asciz	"127"
	.size	.L.str318, 4

	.type	.L.str319,@object       # @.str319
.L.str319:
	.asciz	"128"
	.size	.L.str319, 4

	.type	.L.str320,@object       # @.str320
.L.str320:
	.asciz	"129"
	.size	.L.str320, 4

	.type	.L.str321,@object       # @.str321
.L.str321:
	.asciz	".lr.ph34:2-3"
	.size	.L.str321, 13

	.type	.L.str322,@object       # @.str322
.L.str322:
	.asciz	"130:3"
	.size	.L.str322, 6

	.type	.L.str323,@object       # @.str323
.L.str323:
	.asciz	"indvars.iv110"
	.size	.L.str323, 14

	.type	.L.str324,@object       # @.str324
	.align	16
.L.str324:
	.asciz	"indvars.iv.next111"
	.size	.L.str324, 19

	.type	.L.str325,@object       # @.str325
.L.str325:
	.asciz	"131"
	.size	.L.str325, 4

	.type	.L.str326,@object       # @.str326
.L.str326:
	.asciz	"132"
	.size	.L.str326, 4

	.type	.L.str327,@object       # @.str327
.L.str327:
	.asciz	"133"
	.size	.L.str327, 4

	.type	.L.str328,@object       # @.str328
.L.str328:
	.asciz	"134"
	.size	.L.str328, 4

	.type	.L.str329,@object       # @.str329
.L.str329:
	.asciz	"135"
	.size	.L.str329, 4

	.type	.L.str330,@object       # @.str330
.L.str330:
	.asciz	"136"
	.size	.L.str330, 4

	.type	.L.str331,@object       # @.str331
.L.str331:
	.asciz	"137"
	.size	.L.str331, 4

	.type	.L.str332,@object       # @.str332
.L.str332:
	.asciz	"138"
	.size	.L.str332, 4

	.type	.L.str333,@object       # @.str333
.L.str333:
	.asciz	"139"
	.size	.L.str333, 4

	.type	.L.str334,@object       # @.str334
.L.str334:
	.asciz	"140"
	.size	.L.str334, 4

	.type	.L.str335,@object       # @.str335
.L.str335:
	.asciz	"141"
	.size	.L.str335, 4

	.type	.L.str336,@object       # @.str336
.L.str336:
	.asciz	"130:3-0"
	.size	.L.str336, 8

	.type	.L.str337,@object       # @.str337
.L.str337:
	.asciz	"lftr.wideiv114"
	.size	.L.str337, 15

	.type	.L.str338,@object       # @.str338
.L.str338:
	.asciz	"exitcond115"
	.size	.L.str338, 12

	.type	.L.str339,@object       # @.str339
.L.str339:
	.asciz	"130:3-1"
	.size	.L.str339, 8

	.type	.L.str340,@object       # @.str340
.L.str340:
	.asciz	"lftr.wideiv120"
	.size	.L.str340, 15

	.type	.L.str341,@object       # @.str341
.L.str341:
	.asciz	"exitcond121"
	.size	.L.str341, 12

	.type	.L.str342,@object       # @.str342
	.align	16
.L.str342:
	.asciz	"._crit_edge35:2-0"
	.size	.L.str342, 18

	.type	.L.str343,@object       # @.str343
.L.str343:
	.asciz	".preheader39:1"
	.size	.L.str343, 15

	.type	.L.str344,@object       # @.str344
.L.str344:
	.asciz	"142"
	.size	.L.str344, 4

	.type	.L.str345,@object       # @.str345
	.align	16
.L.str345:
	.asciz	".preheader39:1-0"
	.size	.L.str345, 17

	.type	.L.str346,@object       # @.str346
.L.str346:
	.asciz	".lr.ph42:2"
	.size	.L.str346, 11

	.type	.L.str347,@object       # @.str347
.L.str347:
	.asciz	"indvars.iv122"
	.size	.L.str347, 14

	.type	.L.str348,@object       # @.str348
	.align	16
.L.str348:
	.asciz	"indvars.iv.next123"
	.size	.L.str348, 19

	.type	.L.str349,@object       # @.str349
.L.str349:
	.asciz	"143"
	.size	.L.str349, 4

	.type	.L.str350,@object       # @.str350
.L.str350:
	.asciz	"144"
	.size	.L.str350, 4

	.type	.L.str351,@object       # @.str351
.L.str351:
	.asciz	"145"
	.size	.L.str351, 4

	.type	.L.str352,@object       # @.str352
.L.str352:
	.asciz	"146"
	.size	.L.str352, 4

	.type	.L.str353,@object       # @.str353
.L.str353:
	.asciz	"147"
	.size	.L.str353, 4

	.type	.L.str354,@object       # @.str354
.L.str354:
	.asciz	"148"
	.size	.L.str354, 4

	.type	.L.str355,@object       # @.str355
.L.str355:
	.asciz	"149"
	.size	.L.str355, 4

	.type	.L.str356,@object       # @.str356
.L.str356:
	.asciz	"150"
	.size	.L.str356, 4

	.type	.L.str357,@object       # @.str357
.L.str357:
	.asciz	".lr.ph42:2-1"
	.size	.L.str357, 13

	.type	.L.str358,@object       # @.str358
.L.str358:
	.asciz	"151"
	.size	.L.str358, 4

	.type	.L.str359,@object       # @.str359
.L.str359:
	.asciz	"152"
	.size	.L.str359, 4

	.type	.L.str360,@object       # @.str360
.L.str360:
	.asciz	"153"
	.size	.L.str360, 4

	.type	.L.str361,@object       # @.str361
.L.str361:
	.asciz	"154"
	.size	.L.str361, 4

	.type	.L.str362,@object       # @.str362
.L.str362:
	.asciz	"155"
	.size	.L.str362, 4

	.type	.L.str363,@object       # @.str363
.L.str363:
	.asciz	".lr.ph42:2-2"
	.size	.L.str363, 13

	.type	.L.str364,@object       # @.str364
.L.str364:
	.asciz	"156"
	.size	.L.str364, 4

	.type	.L.str365,@object       # @.str365
.L.str365:
	.asciz	".lr.ph42:2-3"
	.size	.L.str365, 13

	.type	.L.str366,@object       # @.str366
.L.str366:
	.asciz	"lftr.wideiv126"
	.size	.L.str366, 15

	.type	.L.str367,@object       # @.str367
.L.str367:
	.asciz	"exitcond127"
	.size	.L.str367, 12

	.type	.L.str368,@object       # @.str368
.L.str368:
	.asciz	".lr.ph42:2-4"
	.size	.L.str368, 13

	.type	.L.str369,@object       # @.str369
	.align	16
.L.str369:
	.asciz	"._crit_edge52:0-0"
	.size	.L.str369, 18

	.type	.L.str370,@object       # @.str370
.L.str370:
	.asciz	"0:0-4"
	.size	.L.str370, 6

	.type	.L.str371,@object       # @.str371
.L.str371:
	.asciz	".loopexit24:0"
	.size	.L.str371, 14

	.type	.L.str372,@object       # @.str372
.L.str372:
	.asciz	".preheader34:0"
	.size	.L.str372, 15

	.type	.L.str373,@object       # @.str373
	.align	16
.L.str373:
	.asciz	".preheader34:0-0"
	.size	.L.str373, 17

	.type	.L.str374,@object       # @.str374
.L.str374:
	.asciz	".lr.ph36:1"
	.size	.L.str374, 11

	.type	.L.str375,@object       # @.str375
	.align	16
.L.str375:
	.asciz	"._crit_edge37.thread:0"
	.size	.L.str375, 23

	.type	.L.str376,@object       # @.str376
	.align	16
.L.str376:
	.asciz	"._crit_edge37.thread:0-2"
	.size	.L.str376, 25

	.type	.L.str377151,@object    # @.str377151
	.align	16
.L.str377151:
	.asciz	"._crit_edge37.thread:0-4"
	.size	.L.str377151, 25

	.type	.L.str378,@object       # @.str378
.L.str378:
	.asciz	".lr.ph36:1-0"
	.size	.L.str378, 13

	.type	.L.str379,@object       # @.str379
.L.str379:
	.asciz	".lr.ph36:1-1"
	.size	.L.str379, 13

	.type	.L.str380,@object       # @.str380
.L.str380:
	.asciz	"._crit_edge37:0"
	.size	.L.str380, 16

	.type	.L.str381,@object       # @.str381
	.align	16
.L.str381:
	.asciz	"._crit_edge37:0-2"
	.size	.L.str381, 18

	.type	.L.str382,@object       # @.str382
	.align	16
.L.str382:
	.asciz	"._crit_edge37:0-4"
	.size	.L.str382, 18

	.type	.L.str383,@object       # @.str383
.L.str383:
	.asciz	".lr.ph33:1"
	.size	.L.str383, 11

	.type	.L.str384,@object       # @.str384
.L.str384:
	.asciz	"indvars.iv63"
	.size	.L.str384, 13

	.type	.L.str385,@object       # @.str385
	.align	16
.L.str385:
	.asciz	"indvars.iv.next64"
	.size	.L.str385, 18

	.type	.L.str386,@object       # @.str386
.L.str386:
	.asciz	".loopexit17:1"
	.size	.L.str386, 14

	.type	.L.str387,@object       # @.str387
.L.str387:
	.asciz	"indvars.iv49"
	.size	.L.str387, 13

	.type	.L.str388,@object       # @.str388
	.align	16
.L.str388:
	.asciz	"indvars.iv.next50"
	.size	.L.str388, 18

	.type	.L.str389,@object       # @.str389
.L.str389:
	.asciz	"indvars.iv42"
	.size	.L.str389, 13

	.type	.L.str390,@object       # @.str390
	.align	16
.L.str390:
	.asciz	"indvars.iv.next43"
	.size	.L.str390, 18

	.type	.L.str391,@object       # @.str391
.L.str391:
	.asciz	"t.031"
	.size	.L.str391, 6

	.type	.L.str392,@object       # @.str392
.L.str392:
	.asciz	"t.1"
	.size	.L.str392, 4

	.type	.L.str393,@object       # @.str393
.L.str393:
	.asciz	"b.030"
	.size	.L.str393, 6

	.type	.L.str394,@object       # @.str394
.L.str394:
	.asciz	"b.1"
	.size	.L.str394, 4

	.type	.L.str395,@object       # @.str395
.L.str395:
	.asciz	"l.028"
	.size	.L.str395, 6

	.type	.L.str396,@object       # @.str396
.L.str396:
	.asciz	"f.027"
	.size	.L.str396, 6

	.type	.L.str397,@object       # @.str397
.L.str397:
	.asciz	"f.2"
	.size	.L.str397, 4

	.type	.L.str398,@object       # @.str398
.L.str398:
	.asciz	"c.026"
	.size	.L.str398, 6

	.type	.L.str399,@object       # @.str399
.L.str399:
	.asciz	"c.1"
	.size	.L.str399, 4

	.type	.L.str400,@object       # @.str400
.L.str400:
	.asciz	".lr.ph33:1-2"
	.size	.L.str400, 13

	.type	.L.str401,@object       # @.str401
.L.str401:
	.asciz	"22:1"
	.size	.L.str401, 5

	.type	.L.str402,@object       # @.str402
.L.str402:
	.asciz	"22:1-3"
	.size	.L.str402, 7

	.type	.L.str403,@object       # @.str403
.L.str403:
	.asciz	".lr.ph:1-1"
	.size	.L.str403, 11

	.type	.L.str404,@object       # @.str404
.L.str404:
	.asciz	"29:2"
	.size	.L.str404, 5

	.type	.L.str405,@object       # @.str405
.L.str405:
	.asciz	"26:2"
	.size	.L.str405, 5

	.type	.L.str406,@object       # @.str406
	.align	16
.L.str406:
	.asciz	"indvars.iv.next41"
	.size	.L.str406, 18

	.type	.L.str407,@object       # @.str407
.L.str407:
	.asciz	"26:2-0"
	.size	.L.str407, 7

	.type	.L.str408,@object       # @.str408
.L.str408:
	.asciz	"split2:1"
	.size	.L.str408, 9

	.type	.L.str409,@object       # @.str409
.L.str409:
	.asciz	"indvars.iv40"
	.size	.L.str409, 13

	.type	.L.str410,@object       # @.str410
.L.str410:
	.asciz	"m.01"
	.size	.L.str410, 5

	.type	.L.str411,@object       # @.str411
.L.str411:
	.asciz	"29:2-1"
	.size	.L.str411, 7

	.type	.L.str412,@object       # @.str412
.L.str412:
	.asciz	"m.0.lcssa"
	.size	.L.str412, 10

	.type	.L.str413,@object       # @.str413
.L.str413:
	.asciz	"split2:1-0"
	.size	.L.str413, 11

	.type	.L.str414,@object       # @.str414
.L.str414:
	.asciz	".lr.ph23:1"
	.size	.L.str414, 11

	.type	.L.str415,@object       # @.str415
.L.str415:
	.asciz	"46:2"
	.size	.L.str415, 5

	.type	.L.str416,@object       # @.str416
.L.str416:
	.asciz	"f.1"
	.size	.L.str416, 4

	.type	.L.str417,@object       # @.str417
.L.str417:
	.asciz	"106:2"
	.size	.L.str417, 6

	.type	.L.str418,@object       # @.str418
.L.str418:
	.asciz	"j.0"
	.size	.L.str418, 4

	.type	.L.str419,@object       # @.str419
.L.str419:
	.asciz	"46:2-0"
	.size	.L.str419, 7

	.type	.L.str420,@object       # @.str420
.L.str420:
	.asciz	"48:0"
	.size	.L.str420, 5

	.type	.L.str421,@object       # @.str421
.L.str421:
	.asciz	"50:2"
	.size	.L.str421, 5

	.type	.L.str422,@object       # @.str422
.L.str422:
	.asciz	"48:0-1"
	.size	.L.str422, 7

	.type	.L.str423,@object       # @.str423
.L.str423:
	.asciz	"50:2-5"
	.size	.L.str423, 7

	.type	.L.str424,@object       # @.str424
.L.str424:
	.asciz	"50:2-7"
	.size	.L.str424, 7

	.type	.L.str425,@object       # @.str425
.L.str425:
	.asciz	".lr.ph5:3"
	.size	.L.str425, 10

	.type	.L.str426,@object       # @.str426
.L.str426:
	.asciz	"._crit_edge6:2"
	.size	.L.str426, 15

	.type	.L.str427,@object       # @.str427
.L.str427:
	.asciz	"indvars.iv44"
	.size	.L.str427, 13

	.type	.L.str428,@object       # @.str428
	.align	16
.L.str428:
	.asciz	"indvars.iv.next45"
	.size	.L.str428, 18

	.type	.L.str429,@object       # @.str429
.L.str429:
	.asciz	".lr.ph5:3-0"
	.size	.L.str429, 12

	.type	.L.str430,@object       # @.str430
.L.str430:
	.asciz	".lr.ph5:3-1"
	.size	.L.str430, 12

	.type	.L.str431,@object       # @.str431
.L.str431:
	.asciz	"g.0"
	.size	.L.str431, 4

	.type	.L.str432,@object       # @.str432
	.align	16
.L.str432:
	.asciz	"._crit_edge6:2-7"
	.size	.L.str432, 17

	.type	.L.str433,@object       # @.str433
.L.str433:
	.asciz	"._crit_edge13:2"
	.size	.L.str433, 16

	.type	.L.str434,@object       # @.str434
.L.str434:
	.asciz	".lr.ph12:3"
	.size	.L.str434, 11

	.type	.L.str435,@object       # @.str435
.L.str435:
	.asciz	"indvars.iv47"
	.size	.L.str435, 13

	.type	.L.str436,@object       # @.str436
	.align	16
.L.str436:
	.asciz	"indvars.iv.next48"
	.size	.L.str436, 18

	.type	.L.str437,@object       # @.str437
.L.str437:
	.asciz	"s.010"
	.size	.L.str437, 6

	.type	.L.str438,@object       # @.str438
.L.str438:
	.asciz	"h.08"
	.size	.L.str438, 5

	.type	.L.str439,@object       # @.str439
.L.str439:
	.asciz	"g.17"
	.size	.L.str439, 5

	.type	.L.str440,@object       # @.str440
.L.str440:
	.asciz	"g.2"
	.size	.L.str440, 4

	.type	.L.str441,@object       # @.str441
.L.str441:
	.asciz	".lr.ph12:3-3"
	.size	.L.str441, 13

	.type	.L.str442,@object       # @.str442
.L.str442:
	.asciz	".lr.ph12:3-5"
	.size	.L.str442, 13

	.type	.L.str443,@object       # @.str443
.L.str443:
	.asciz	"93"
	.size	.L.str443, 3

	.type	.L.str444,@object       # @.str444
.L.str444:
	.asciz	"lftr.wideiv51"
	.size	.L.str444, 14

	.type	.L.str445,@object       # @.str445
.L.str445:
	.asciz	"exitcond52"
	.size	.L.str445, 11

	.type	.L.str446,@object       # @.str446
.L.str446:
	.asciz	".lr.ph12:3-9"
	.size	.L.str446, 13

	.type	.L.str447,@object       # @.str447
.L.str447:
	.asciz	"s.0.lcssa"
	.size	.L.str447, 10

	.type	.L.str448,@object       # @.str448
.L.str448:
	.asciz	"g.1.lcssa"
	.size	.L.str448, 10

	.type	.L.str449,@object       # @.str449
	.align	16
.L.str449:
	.asciz	"._crit_edge13:2-0"
	.size	.L.str449, 18

	.type	.L.str450,@object       # @.str450
	.align	16
.L.str450:
	.asciz	"._crit_edge13:2-1"
	.size	.L.str450, 18

	.type	.L.str451,@object       # @.str451
	.align	16
.L.str451:
	.asciz	"._crit_edge13:2-2"
	.size	.L.str451, 18

	.type	.L.str452,@object       # @.str452
.L.str452:
	.asciz	"100:2"
	.size	.L.str452, 6

	.type	.L.str453,@object       # @.str453
.L.str453:
	.asciz	"100:2-0"
	.size	.L.str453, 8

	.type	.L.str454,@object       # @.str454
.L.str454:
	.asciz	"106:2-0"
	.size	.L.str454, 8

	.type	.L.str455,@object       # @.str455
.L.str455:
	.asciz	"106:2-1"
	.size	.L.str455, 8

	.type	.L.str456,@object       # @.str456
.L.str456:
	.asciz	".lr.ph23:1-2"
	.size	.L.str456, 13

	.type	.L.str457,@object       # @.str457
.L.str457:
	.asciz	"111:2"
	.size	.L.str457, 6

	.type	.L.str458,@object       # @.str458
.L.str458:
	.asciz	"indvars.iv60"
	.size	.L.str458, 13

	.type	.L.str459,@object       # @.str459
	.align	16
.L.str459:
	.asciz	"indvars.iv.next61"
	.size	.L.str459, 18

	.type	.L.str460,@object       # @.str460
.L.str460:
	.asciz	"123:2"
	.size	.L.str460, 6

	.type	.L.str461,@object       # @.str461
.L.str461:
	.asciz	"i.221"
	.size	.L.str461, 6

	.type	.L.str462,@object       # @.str462
.L.str462:
	.asciz	"111:2-0"
	.size	.L.str462, 8

	.type	.L.str463,@object       # @.str463
.L.str463:
	.asciz	"114:1"
	.size	.L.str463, 6

	.type	.L.str464,@object       # @.str464
.L.str464:
	.asciz	"117:2"
	.size	.L.str464, 6

	.type	.L.str465,@object       # @.str465
.L.str465:
	.asciz	"114:1-0"
	.size	.L.str465, 8

	.type	.L.str466,@object       # @.str466
.L.str466:
	.asciz	"114:1-1"
	.size	.L.str466, 8

	.type	.L.str467,@object       # @.str467
.L.str467:
	.asciz	"117:2-0"
	.size	.L.str467, 8

	.type	.L.str468,@object       # @.str468
.L.str468:
	.asciz	"122:1"
	.size	.L.str468, 6

	.type	.L.str469,@object       # @.str469
.L.str469:
	.asciz	"122:1-0"
	.size	.L.str469, 8

	.type	.L.str470,@object       # @.str470
.L.str470:
	.asciz	"122:1-1"
	.size	.L.str470, 8

	.type	.L.str471,@object       # @.str471
.L.str471:
	.asciz	"123:2-0"
	.size	.L.str471, 8

	.type	.L.str472,@object       # @.str472
.L.str472:
	.asciz	"123:2-2"
	.size	.L.str472, 8

	.type	.L.str473,@object       # @.str473
.L.str473:
	.asciz	".loopexit17:1-1"
	.size	.L.str473, 16

	.type	.L.str474,@object       # @.str474
.L.str474:
	.asciz	".loopexit24:0-0"
	.size	.L.str474, 16

	.type	.L.str475,@object       # @.str475
.L.str475:
	.asciz	"trbak1"
	.size	.L.str475, 7

	.type	.L.str476,@object       # @.str476
.L.str476:
	.asciz	"notlhs"
	.size	.L.str476, 7

	.type	.L.str477,@object       # @.str477
.L.str477:
	.asciz	"m"
	.size	.L.str477, 2

	.type	.L.str478152,@object    # @.str478152
.L.str478152:
	.asciz	"notrhs"
	.size	.L.str478152, 7

	.type	.L.str479,@object       # @.str479
.L.str479:
	.asciz	"or.cond.not"
	.size	.L.str479, 12

	.type	.L.str480,@object       # @.str480
.L.str480:
	.asciz	"or.cond32"
	.size	.L.str480, 10

	.type	.L.str481,@object       # @.str481
.L.str481:
	.asciz	"0:0-5"
	.size	.L.str481, 6

	.type	.L.str482,@object       # @.str482
.L.str482:
	.asciz	".lr.ph15:0"
	.size	.L.str482, 11

	.type	.L.str483,@object       # @.str483
.L.str483:
	.asciz	".loopexit11:0"
	.size	.L.str483, 14

	.type	.L.str484,@object       # @.str484
.L.str484:
	.asciz	".lr.ph15:0-0"
	.size	.L.str484, 13

	.type	.L.str485,@object       # @.str485
.L.str485:
	.asciz	"2:1"
	.size	.L.str485, 4

	.type	.L.str486,@object       # @.str486
.L.str486:
	.asciz	"indvars.iv28"
	.size	.L.str486, 13

	.type	.L.str487,@object       # @.str487
	.align	16
.L.str487:
	.asciz	"indvars.iv.next29"
	.size	.L.str487, 18

	.type	.L.str488,@object       # @.str488
.L.str488:
	.asciz	"indvars.iv20"
	.size	.L.str488, 13

	.type	.L.str489,@object       # @.str489
	.align	16
.L.str489:
	.asciz	"indvars.iv.next21"
	.size	.L.str489, 18

	.type	.L.str490,@object       # @.str490
.L.str490:
	.asciz	".not"
	.size	.L.str490, 5

	.type	.L.str491,@object       # @.str491
.L.str491:
	.asciz	".not33"
	.size	.L.str491, 7

	.type	.L.str492,@object       # @.str492
.L.str492:
	.asciz	"brmerge"
	.size	.L.str492, 8

	.type	.L.str493,@object       # @.str493
.L.str493:
	.asciz	"2:1-0"
	.size	.L.str493, 6

	.type	.L.str494,@object       # @.str494
	.align	16
.L.str494:
	.asciz	".preheader.lr.ph:1"
	.size	.L.str494, 19

	.type	.L.str495,@object       # @.str495
	.align	16
.L.str495:
	.asciz	".preheader.lr.ph:1-0"
	.size	.L.str495, 21

	.type	.L.str496,@object       # @.str496
.L.str496:
	.asciz	"indvars.iv24"
	.size	.L.str496, 13

	.type	.L.str497,@object       # @.str497
	.align	16
.L.str497:
	.asciz	"indvars.iv.next25"
	.size	.L.str497, 18

	.type	.L.str498,@object       # @.str498
.L.str498:
	.asciz	"._crit_edge7:2"
	.size	.L.str498, 15

	.type	.L.str499,@object       # @.str499
.L.str499:
	.asciz	".lr.ph:2-0"
	.size	.L.str499, 11

	.type	.L.str500,@object       # @.str500
.L.str500:
	.asciz	"15:3"
	.size	.L.str500, 5

	.type	.L.str501,@object       # @.str501
.L.str501:
	.asciz	"s.03"
	.size	.L.str501, 5

	.type	.L.str502,@object       # @.str502
.L.str502:
	.asciz	"26"
	.size	.L.str502, 3

	.type	.L.str503,@object       # @.str503
.L.str503:
	.asciz	"15:3-1"
	.size	.L.str503, 7

	.type	.L.str504,@object       # @.str504
.L.str504:
	.asciz	".lr.ph6:2"
	.size	.L.str504, 10

	.type	.L.str505,@object       # @.str505
.L.str505:
	.asciz	".lr.ph6:2-2"
	.size	.L.str505, 12

	.type	.L.str506,@object       # @.str506
.L.str506:
	.asciz	"35:3"
	.size	.L.str506, 5

	.type	.L.str507,@object       # @.str507
.L.str507:
	.asciz	"indvars.iv18"
	.size	.L.str507, 13

	.type	.L.str508,@object       # @.str508
	.align	16
.L.str508:
	.asciz	"indvars.iv.next19"
	.size	.L.str508, 18

	.type	.L.str509,@object       # @.str509
.L.str509:
	.asciz	"35:3-0"
	.size	.L.str509, 7

	.type	.L.str510,@object       # @.str510
.L.str510:
	.asciz	"lftr.wideiv22"
	.size	.L.str510, 14

	.type	.L.str511,@object       # @.str511
.L.str511:
	.asciz	"exitcond23"
	.size	.L.str511, 11

	.type	.L.str512,@object       # @.str512
.L.str512:
	.asciz	"35:3-1"
	.size	.L.str512, 7

	.type	.L.str513,@object       # @.str513
.L.str513:
	.asciz	"lftr.wideiv26"
	.size	.L.str513, 14

	.type	.L.str514,@object       # @.str514
.L.str514:
	.asciz	"exitcond27"
	.size	.L.str514, 11

	.type	.L.str515,@object       # @.str515
	.align	16
.L.str515:
	.asciz	"._crit_edge7:2-0"
	.size	.L.str515, 17

	.type	.L.str516,@object       # @.str516
.L.str516:
	.asciz	"lftr.wideiv30"
	.size	.L.str516, 14

	.type	.L.str517,@object       # @.str517
.L.str517:
	.asciz	"exitcond31"
	.size	.L.str517, 11

	.type	.L.str518,@object       # @.str518
.L.str518:
	.asciz	".loopexit:1-1"
	.size	.L.str518, 14

	.type	.L.str519,@object       # @.str519
.L.str519:
	.asciz	".loopexit11:0-0"
	.size	.L.str519, 16

	.type	initp,@object           # @initp
	.bss
	.globl	initp
initp:
	.byte	0                       # 0x0
	.size	initp, 1

	.type	inst_count,@object      # @inst_count
	.globl	inst_count
	.align	4
inst_count:
	.long	0                       # 0x0
	.size	inst_count, 4

	.type	.L.str520,@object       # @.str520
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str520:
	.asciz	"%%%% LABEL MAP START %%%%\n"
	.size	.L.str520, 27

	.type	.L.str1521,@object      # @.str1521
.L.str1521:
	.asciz	"%%%% LABEL MAP END %%%%\n\n"
	.size	.L.str1521, 26

	.type	full_trace_file,@object # @full_trace_file
	.comm	full_trace_file,8,8
	.type	.L.str2522,@object      # @.str2522
.L.str2522:
	.asciz	"dynamic_trace.gz"
	.size	.L.str2522, 17

	.type	.L.str3523,@object      # @.str3523
.L.str3523:
	.asciz	"w"
	.size	.L.str3523, 2

	.type	.L.str4524,@object      # @.str4524
.L.str4524:
	.asciz	"Failed to open logfile \"dynamic_trace\""
	.size	.L.str4524, 39

	.type	current_toplevel_function,@object # @current_toplevel_function
	.comm	current_toplevel_function,8,8
	.type	current_logging_status,@object # @current_logging_status
	.comm	current_logging_status,4,4
	.type	.L.str5525,@object      # @.str5525
.L.str5525:
	.asciz	"false && \"Returning from within a toplevel function before it was called!\""
	.size	.L.str5525, 75

	.type	.L.str6526,@object      # @.str6526
.L.str6526:
	.asciz	"/workspace/LLVM-Tracer/profile-func/trace_logger.c"
	.size	.L.str6526, 51

	.type	.L__PRETTY_FUNCTION__.log_or_not,@object # @__PRETTY_FUNCTION__.log_or_not
.L__PRETTY_FUNCTION__.log_or_not:
	.asciz	"logging_status log_or_not(_Bool, _Bool, int, char *)"
	.size	.L__PRETTY_FUNCTION__.log_or_not, 53

	.type	.L.str7527,@object      # @.str7527
.L.str7527:
	.asciz	"false && \"Cannot call a top level function from within another one!\""
	.size	.L.str7527, 69

	.type	.L.str8528,@object      # @.str8528
.L.str8528:
	.asciz	"0x"
	.size	.L.str8528, 3

	.type	.L.str9529,@object      # @.str9529
.L.str9529:
	.asciz	"%02x"
	.size	.L.str9529, 5

	.type	.L.str10530,@object     # @.str10530
.L.str10530:
	.asciz	"Stopping logging at inst %d.\n"
	.size	.L.str10530, 30

	.type	.L.str11531,@object     # @.str11531
.L.str11531:
	.asciz	"Starting to log at inst = %d.\n"
	.size	.L.str11531, 31

	.type	.L.str12532,@object     # @.str12532
.L.str12532:
	.asciz	"\nentry,%s,%d,\n"
	.size	.L.str12532, 15

	.type	.L.str13533,@object     # @.str13533
.L.str13533:
	.asciz	"\n0,%d,%s,%s,%s,%d,%d\n"
	.size	.L.str13533, 22

	.type	.L.str14534,@object     # @.str14534
.L.str14534:
	.asciz	"initp == true"
	.size	.L.str14534, 14

	.type	.L__PRETTY_FUNCTION__.trace_logger_log_int,@object # @__PRETTY_FUNCTION__.trace_logger_log_int
.L__PRETTY_FUNCTION__.trace_logger_log_int:
	.asciz	"void trace_logger_log_int(int, int, int64_t, int, char *, int, char *)"
	.size	.L__PRETTY_FUNCTION__.trace_logger_log_int, 71

	.type	.L.str15535,@object     # @.str15535
.L.str15535:
	.asciz	"r,%d,%ld,%d"
	.size	.L.str15535, 12

	.type	.L.str16536,@object     # @.str16536
.L.str16536:
	.asciz	"f,%d,%ld,%d"
	.size	.L.str16536, 12

	.type	.L.str17537,@object     # @.str17537
.L.str17537:
	.asciz	"%d,%d,%ld,%d"
	.size	.L.str17537, 13

	.type	.L.str18538,@object     # @.str18538
.L.str18538:
	.asciz	",%s"
	.size	.L.str18538, 4

	.type	.L.str19539,@object     # @.str19539
.L.str19539:
	.asciz	", "
	.size	.L.str19539, 3

	.type	.L.str20540,@object     # @.str20540
.L.str20540:
	.asciz	",%s,\n"
	.size	.L.str20540, 6

	.type	.L.str21541,@object     # @.str21541
.L.str21541:
	.asciz	",\n"
	.size	.L.str21541, 3

	.type	.L__PRETTY_FUNCTION__.trace_logger_log_ptr,@object # @__PRETTY_FUNCTION__.trace_logger_log_ptr
.L__PRETTY_FUNCTION__.trace_logger_log_ptr:
	.asciz	"void trace_logger_log_ptr(int, int, uint64_t, int, char *, int, char *)"
	.size	.L__PRETTY_FUNCTION__.trace_logger_log_ptr, 72

	.type	.L.str22542,@object     # @.str22542
.L.str22542:
	.asciz	"r,%d,%#llx,%d"
	.size	.L.str22542, 14

	.type	.L.str23543,@object     # @.str23543
.L.str23543:
	.asciz	"f,%d,%#llx,%d"
	.size	.L.str23543, 14

	.type	.L.str24544,@object     # @.str24544
.L.str24544:
	.asciz	"%d,%d,%#llx,%d"
	.size	.L.str24544, 15

	.type	.L__PRETTY_FUNCTION__.trace_logger_log_double,@object # @__PRETTY_FUNCTION__.trace_logger_log_double
.L__PRETTY_FUNCTION__.trace_logger_log_double:
	.asciz	"void trace_logger_log_double(int, int, double, int, char *, int, char *)"
	.size	.L__PRETTY_FUNCTION__.trace_logger_log_double, 73

	.type	.L.str25545,@object     # @.str25545
.L.str25545:
	.asciz	"r,%d,%f,%d"
	.size	.L.str25545, 11

	.type	.L.str26546,@object     # @.str26546
.L.str26546:
	.asciz	"f,%d,%f,%d"
	.size	.L.str26546, 11

	.type	.L.str27547,@object     # @.str27547
.L.str27547:
	.asciz	"%d,%d,%f,%d"
	.size	.L.str27547, 12

	.type	.L__PRETTY_FUNCTION__.trace_logger_log_vector,@object # @__PRETTY_FUNCTION__.trace_logger_log_vector
.L__PRETTY_FUNCTION__.trace_logger_log_vector:
	.asciz	"void trace_logger_log_vector(int, int, uint8_t *, int, char *, int, char *)"
	.size	.L__PRETTY_FUNCTION__.trace_logger_log_vector, 76

	.type	.L.str28548,@object     # @.str28548
.L.str28548:
	.asciz	"r,%d,%s,%d"
	.size	.L.str28548, 11

	.type	.L.str29549,@object     # @.str29549
.L.str29549:
	.asciz	"f,%d,%s,%d"
	.size	.L.str29549, 11

	.type	.L.str30550,@object     # @.str30550
.L.str30550:
	.asciz	"%d,%d,%s,%d"
	.size	.L.str30550, 12

	.text
.Ldebug_end0:
	.section	.debug_str,"MS",@progbits,1
.Linfo_string0:
	.asciz	"clang version 3.4.2 (tags/RELEASE_34/dot2-final)"
.Linfo_string1:
	.asciz	"mma_test_eigen.c"
.Linfo_string2:
	.asciz	"/workspace/gem5-aladdin/src/aladdin/integration-test/with-cpu/mma_test_eigen"
.Linfo_string3:
	.asciz	"num_vals"
.Linfo_string4:
	.asciz	"int"
.Linfo_string5:
	.asciz	"test_stores"
.Linfo_string6:
	.asciz	"store_kernel"
.Linfo_string7:
	.asciz	"main"
.Linfo_string8:
	.asciz	"eispack.c"
.Linfo_string9:
	.asciz	"value"
.Linfo_string10:
	.asciz	"double"
.Linfo_string11:
	.asciz	"pythag"
.Linfo_string12:
	.asciz	"r8_epsilon"
.Linfo_string13:
	.asciz	"r8_max"
.Linfo_string14:
	.asciz	"r8_min"
.Linfo_string15:
	.asciz	"r8_sign"
.Linfo_string16:
	.asciz	"rs"
.Linfo_string17:
	.asciz	"tqlrat"
.Linfo_string18:
	.asciz	"trbak1"
.Linfo_string19:
	.asciz	"tred1"
.Linfo_string20:
	.asciz	"store_vals"
.Linfo_string21:
	.asciz	"store_loc"
.Linfo_string22:
	.asciz	"num_failures"
.Linfo_string23:
	.asciz	"i"
.Linfo_string24:
	.asciz	"z"
.Linfo_string25:
	.asciz	"a"
.Linfo_string26:
	.asciz	"w"
.Linfo_string27:
	.asciz	"b"
.Linfo_string28:
	.asciz	"p"
.Linfo_string29:
	.asciz	"r"
.Linfo_string30:
	.asciz	"t"
.Linfo_string31:
	.asciz	"s"
.Linfo_string32:
	.asciz	"u"
.Linfo_string33:
	.asciz	"x"
.Linfo_string34:
	.asciz	"y"
.Linfo_string35:
	.asciz	"n"
.Linfo_string36:
	.asciz	"matz"
.Linfo_string37:
	.asciz	"_Bool"
.Linfo_string38:
	.asciz	"fv2"
.Linfo_string39:
	.asciz	"ierr"
.Linfo_string40:
	.asciz	"fv1"
.Linfo_string41:
	.asciz	"d"
.Linfo_string42:
	.asciz	"e"
.Linfo_string43:
	.asciz	"e2"
.Linfo_string44:
	.asciz	"j"
.Linfo_string45:
	.asciz	"l"
.Linfo_string46:
	.asciz	"h"
.Linfo_string47:
	.asciz	"scale"
.Linfo_string48:
	.asciz	"k"
.Linfo_string49:
	.asciz	"f"
.Linfo_string50:
	.asciz	"g"
.Linfo_string51:
	.asciz	"ii"
.Linfo_string52:
	.asciz	"c"
.Linfo_string53:
	.asciz	"m"
.Linfo_string54:
	.asciz	"mml"
.Linfo_string55:
	.asciz	"l1"
	.section	.debug_info,"",@progbits
.L.debug_info_begin0:
	.long	451                     # Length of Unit
	.short	4                       # DWARF version number
	.long	.L.debug_abbrev_begin   # Offset Into Abbrev. Section
	.byte	8                       # Address Size (in bytes)
	.byte	1                       # Abbrev [1] 0xb:0x1bc DW_TAG_compile_unit
	.long	.Linfo_string0          # DW_AT_producer
	.short	12                      # DW_AT_language
	.long	.Linfo_string1          # DW_AT_name
	.quad	0                       # DW_AT_low_pc
	.long	.Lsection_line          # DW_AT_stmt_list
	.long	.Linfo_string2          # DW_AT_comp_dir
                                        # DW_AT_APPLE_optimized
	.byte	2                       # Abbrev [2] 0x26:0xc DW_TAG_variable
	.long	.Linfo_string3          # DW_AT_name
	.long	50                      # DW_AT_type
	.byte	1                       # DW_AT_decl_file
	.byte	58                      # DW_AT_decl_line
	.byte	3                       # DW_AT_const_value
	.byte	3                       # Abbrev [3] 0x32:0x5 DW_TAG_const_type
	.long	55                      # DW_AT_type
	.byte	4                       # Abbrev [4] 0x37:0x7 DW_TAG_base_type
	.long	.Linfo_string4          # DW_AT_name
	.byte	5                       # DW_AT_encoding
	.byte	4                       # DW_AT_byte_size
	.byte	5                       # Abbrev [5] 0x3e:0x75 DW_TAG_subprogram
	.long	.Linfo_string5          # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	16                      # DW_AT_decl_line
                                        # DW_AT_prototyped
	.long	55                      # DW_AT_type
                                        # DW_AT_external
	.quad	.Lfunc_begin0           # DW_AT_low_pc
	.quad	.Lfunc_end0             # DW_AT_high_pc
	.byte	1                       # DW_AT_frame_base
	.byte	87
                                        # DW_AT_APPLE_omit_frame_ptr
	.byte	6                       # Abbrev [6] 0x5b:0xf DW_TAG_formal_parameter
	.long	.Linfo_string20         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	16                      # DW_AT_decl_line
	.long	431                     # DW_AT_type
	.long	.Ldebug_loc0            # DW_AT_location
	.byte	6                       # Abbrev [6] 0x6a:0xf DW_TAG_formal_parameter
	.long	.Linfo_string21         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	16                      # DW_AT_decl_line
	.long	431                     # DW_AT_type
	.long	.Ldebug_loc2            # DW_AT_location
	.byte	6                       # Abbrev [6] 0x79:0xf DW_TAG_formal_parameter
	.long	.Linfo_string3          # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	16                      # DW_AT_decl_line
	.long	55                      # DW_AT_type
	.long	.Ldebug_loc4            # DW_AT_location
	.byte	7                       # Abbrev [7] 0x88:0xc DW_TAG_variable
	.long	.Linfo_string22         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	17                      # DW_AT_decl_line
	.long	55                      # DW_AT_type
	.byte	0                       # DW_AT_const_value
	.byte	8                       # Abbrev [8] 0x94:0x1e DW_TAG_lexical_block
	.quad	.Ltmp21                 # DW_AT_low_pc
	.quad	.Ltmp27                 # DW_AT_high_pc
	.byte	7                       # Abbrev [7] 0xa5:0xc DW_TAG_variable
	.long	.Linfo_string23         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	18                      # DW_AT_decl_line
	.long	55                      # DW_AT_type
	.byte	0                       # DW_AT_const_value
	.byte	0                       # End Of Children Mark
	.byte	0                       # End Of Children Mark
	.byte	9                       # Abbrev [9] 0xb3:0x8a DW_TAG_subprogram
	.long	.Linfo_string6          # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	33                      # DW_AT_decl_line
                                        # DW_AT_prototyped
                                        # DW_AT_external
	.quad	.Lfunc_begin1           # DW_AT_low_pc
	.quad	.Lfunc_end1             # DW_AT_high_pc
	.byte	1                       # DW_AT_frame_base
	.byte	86
                                        # DW_AT_APPLE_omit_frame_ptr
	.byte	6                       # Abbrev [6] 0xcc:0xf DW_TAG_formal_parameter
	.long	.Linfo_string20         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	33                      # DW_AT_decl_line
	.long	431                     # DW_AT_type
	.long	.Ldebug_loc6            # DW_AT_location
	.byte	6                       # Abbrev [6] 0xdb:0xf DW_TAG_formal_parameter
	.long	.Linfo_string21         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	33                      # DW_AT_decl_line
	.long	431                     # DW_AT_type
	.long	.Ldebug_loc9            # DW_AT_location
	.byte	6                       # Abbrev [6] 0xea:0xf DW_TAG_formal_parameter
	.long	.Linfo_string3          # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	33                      # DW_AT_decl_line
	.long	55                      # DW_AT_type
	.long	.Ldebug_loc12           # DW_AT_location
	.byte	10                      # Abbrev [10] 0xf9:0xf DW_TAG_variable
	.long	.Linfo_string24         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	36                      # DW_AT_decl_line
	.long	436                     # DW_AT_type
	.long	.Ldebug_loc15           # DW_AT_location
	.byte	11                      # Abbrev [11] 0x108:0xb DW_TAG_variable
	.long	.Linfo_string25         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	34                      # DW_AT_decl_line
	.long	436                     # DW_AT_type
	.byte	11                      # Abbrev [11] 0x113:0xb DW_TAG_variable
	.long	.Linfo_string26         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	35                      # DW_AT_decl_line
	.long	436                     # DW_AT_type
	.byte	8                       # Abbrev [8] 0x11e:0x1e DW_TAG_lexical_block
	.quad	.Ltmp46                 # DW_AT_low_pc
	.quad	.Ltmp51                 # DW_AT_high_pc
	.byte	7                       # Abbrev [7] 0x12f:0xc DW_TAG_variable
	.long	.Linfo_string23         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	50                      # DW_AT_decl_line
	.long	55                      # DW_AT_type
	.byte	0                       # DW_AT_const_value
	.byte	0                       # End Of Children Mark
	.byte	0                       # End Of Children Mark
	.byte	12                      # Abbrev [12] 0x13d:0x72 DW_TAG_subprogram
	.long	.Linfo_string7          # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	56                      # DW_AT_decl_line
	.long	55                      # DW_AT_type
                                        # DW_AT_external
	.quad	.Lfunc_begin2           # DW_AT_low_pc
	.quad	.Lfunc_end2             # DW_AT_high_pc
	.byte	1                       # DW_AT_frame_base
	.byte	87
                                        # DW_AT_APPLE_omit_frame_ptr
	.byte	7                       # Abbrev [7] 0x15a:0xc DW_TAG_variable
	.long	.Linfo_string3          # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	58                      # DW_AT_decl_line
	.long	50                      # DW_AT_type
	.byte	3                       # DW_AT_const_value
	.byte	10                      # Abbrev [10] 0x166:0xf DW_TAG_variable
	.long	.Linfo_string20         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	59                      # DW_AT_decl_line
	.long	431                     # DW_AT_type
	.long	.Ldebug_loc17           # DW_AT_location
	.byte	10                      # Abbrev [10] 0x175:0xf DW_TAG_variable
	.long	.Linfo_string21         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	60                      # DW_AT_decl_line
	.long	431                     # DW_AT_type
	.long	.Ldebug_loc19           # DW_AT_location
	.byte	7                       # Abbrev [7] 0x184:0xc DW_TAG_variable
	.long	.Linfo_string22         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	78                      # DW_AT_decl_line
	.long	55                      # DW_AT_type
	.byte	0                       # DW_AT_const_value
	.byte	8                       # Abbrev [8] 0x190:0x1e DW_TAG_lexical_block
	.quad	.Ltmp78                 # DW_AT_low_pc
	.quad	.Ltmp82                 # DW_AT_high_pc
	.byte	7                       # Abbrev [7] 0x1a1:0xc DW_TAG_variable
	.long	.Linfo_string23         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	61                      # DW_AT_decl_line
	.long	55                      # DW_AT_type
	.byte	0                       # DW_AT_const_value
	.byte	0                       # End Of Children Mark
	.byte	0                       # End Of Children Mark
	.byte	13                      # Abbrev [13] 0x1af:0x5 DW_TAG_pointer_type
	.long	55                      # DW_AT_type
	.byte	14                      # Abbrev [14] 0x1b4:0xb DW_TAG_array_type
	.long	.Lsection_info+509      # DW_AT_type
	.byte	15                      # Abbrev [15] 0x1b9:0x5 DW_TAG_subrange_type
	.long	447                     # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	16                      # Abbrev [16] 0x1bf:0x7 DW_TAG_base_type
	.long	.Linfo_string4          # DW_AT_name
	.byte	4                       # DW_AT_byte_size
	.byte	5                       # DW_AT_encoding
	.byte	0                       # End Of Children Mark
.L.debug_info_end0:
.L.debug_info_begin1:
	.long	1368                    # Length of Unit
	.short	4                       # DWARF version number
	.long	.L.debug_abbrev_begin   # Offset Into Abbrev. Section
	.byte	8                       # Address Size (in bytes)
	.byte	1                       # Abbrev [1] 0xb:0x551 DW_TAG_compile_unit
	.long	.Linfo_string0          # DW_AT_producer
	.short	12                      # DW_AT_language
	.long	.Linfo_string8          # DW_AT_name
	.quad	0                       # DW_AT_low_pc
	.long	.Lsection_line          # DW_AT_stmt_list
	.long	.Linfo_string2          # DW_AT_comp_dir
                                        # DW_AT_APPLE_optimized
	.byte	17                      # Abbrev [17] 0x26:0xb DW_TAG_variable
	.long	.Linfo_string9          # DW_AT_name
	.long	49                      # DW_AT_type
	.byte	2                       # DW_AT_decl_file
	.byte	136                     # DW_AT_decl_line
	.byte	3                       # Abbrev [3] 0x31:0x5 DW_TAG_const_type
	.long	54                      # DW_AT_type
	.byte	4                       # Abbrev [4] 0x36:0x7 DW_TAG_base_type
	.long	.Linfo_string10         # DW_AT_name
	.byte	4                       # DW_AT_encoding
	.byte	8                       # DW_AT_byte_size
	.byte	5                       # Abbrev [5] 0x3d:0x87 DW_TAG_subprogram
	.long	.Linfo_string11         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	11                      # DW_AT_decl_line
                                        # DW_AT_prototyped
	.long	54                      # DW_AT_type
                                        # DW_AT_external
	.quad	.Lfunc_begin3           # DW_AT_low_pc
	.quad	.Lfunc_end3             # DW_AT_high_pc
	.byte	1                       # DW_AT_frame_base
	.byte	87
                                        # DW_AT_APPLE_omit_frame_ptr
	.byte	6                       # Abbrev [6] 0x5a:0xf DW_TAG_formal_parameter
	.long	.Linfo_string25         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	11                      # DW_AT_decl_line
	.long	54                      # DW_AT_type
	.long	.Ldebug_loc21           # DW_AT_location
	.byte	6                       # Abbrev [6] 0x69:0xf DW_TAG_formal_parameter
	.long	.Linfo_string27         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	11                      # DW_AT_decl_line
	.long	54                      # DW_AT_type
	.long	.Ldebug_loc23           # DW_AT_location
	.byte	10                      # Abbrev [10] 0x78:0xf DW_TAG_variable
	.long	.Linfo_string28         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	71                      # DW_AT_decl_line
	.long	54                      # DW_AT_type
	.long	.Ldebug_loc25           # DW_AT_location
	.byte	10                      # Abbrev [10] 0x87:0xf DW_TAG_variable
	.long	.Linfo_string29         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	72                      # DW_AT_decl_line
	.long	54                      # DW_AT_type
	.long	.Ldebug_loc28           # DW_AT_location
	.byte	10                      # Abbrev [10] 0x96:0xf DW_TAG_variable
	.long	.Linfo_string30         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	74                      # DW_AT_decl_line
	.long	54                      # DW_AT_type
	.long	.Ldebug_loc32           # DW_AT_location
	.byte	10                      # Abbrev [10] 0xa5:0xf DW_TAG_variable
	.long	.Linfo_string31         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	73                      # DW_AT_decl_line
	.long	54                      # DW_AT_type
	.long	.Ldebug_loc35           # DW_AT_location
	.byte	10                      # Abbrev [10] 0xb4:0xf DW_TAG_variable
	.long	.Linfo_string32         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	75                      # DW_AT_decl_line
	.long	54                      # DW_AT_type
	.long	.Ldebug_loc37           # DW_AT_location
	.byte	0                       # End Of Children Mark
	.byte	12                      # Abbrev [12] 0xc4:0x32 DW_TAG_subprogram
	.long	.Linfo_string12         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	103                     # DW_AT_decl_line
	.long	54                      # DW_AT_type
                                        # DW_AT_external
	.quad	.Lfunc_begin6           # DW_AT_low_pc
	.quad	.Lfunc_end6             # DW_AT_high_pc
	.byte	1                       # DW_AT_frame_base
	.byte	87
                                        # DW_AT_APPLE_omit_frame_ptr
	.byte	18                      # Abbrev [18] 0xe1:0x14 DW_TAG_variable
	.long	.Linfo_string9          # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	136                     # DW_AT_decl_line
	.long	49                      # DW_AT_type
	.byte	8                       # DW_AT_const_value
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	176
	.byte	60
	.byte	0                       # End Of Children Mark
	.byte	5                       # Abbrev [5] 0xf6:0x47 DW_TAG_subprogram
	.long	.Linfo_string13         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	143                     # DW_AT_decl_line
                                        # DW_AT_prototyped
	.long	54                      # DW_AT_type
                                        # DW_AT_external
	.quad	.Lfunc_begin4           # DW_AT_low_pc
	.quad	.Lfunc_end4             # DW_AT_high_pc
	.byte	1                       # DW_AT_frame_base
	.byte	87
                                        # DW_AT_APPLE_omit_frame_ptr
	.byte	6                       # Abbrev [6] 0x113:0xf DW_TAG_formal_parameter
	.long	.Linfo_string33         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	143                     # DW_AT_decl_line
	.long	54                      # DW_AT_type
	.long	.Ldebug_loc42           # DW_AT_location
	.byte	6                       # Abbrev [6] 0x122:0xf DW_TAG_formal_parameter
	.long	.Linfo_string34         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	143                     # DW_AT_decl_line
	.long	54                      # DW_AT_type
	.long	.Ldebug_loc39           # DW_AT_location
	.byte	11                      # Abbrev [11] 0x131:0xb DW_TAG_variable
	.long	.Linfo_string9          # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	170                     # DW_AT_decl_line
	.long	54                      # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	5                       # Abbrev [5] 0x13d:0x47 DW_TAG_subprogram
	.long	.Linfo_string14         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	184                     # DW_AT_decl_line
                                        # DW_AT_prototyped
	.long	54                      # DW_AT_type
                                        # DW_AT_external
	.quad	.Lfunc_begin5           # DW_AT_low_pc
	.quad	.Lfunc_end5             # DW_AT_high_pc
	.byte	1                       # DW_AT_frame_base
	.byte	87
                                        # DW_AT_APPLE_omit_frame_ptr
	.byte	6                       # Abbrev [6] 0x15a:0xf DW_TAG_formal_parameter
	.long	.Linfo_string33         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	184                     # DW_AT_decl_line
	.long	54                      # DW_AT_type
	.long	.Ldebug_loc48           # DW_AT_location
	.byte	6                       # Abbrev [6] 0x169:0xf DW_TAG_formal_parameter
	.long	.Linfo_string34         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	184                     # DW_AT_decl_line
	.long	54                      # DW_AT_type
	.long	.Ldebug_loc45           # DW_AT_location
	.byte	11                      # Abbrev [11] 0x178:0xb DW_TAG_variable
	.long	.Linfo_string9          # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	211                     # DW_AT_decl_line
	.long	54                      # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	5                       # Abbrev [5] 0x184:0x38 DW_TAG_subprogram
	.long	.Linfo_string15         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	225                     # DW_AT_decl_line
                                        # DW_AT_prototyped
	.long	54                      # DW_AT_type
                                        # DW_AT_external
	.quad	.Lfunc_begin7           # DW_AT_low_pc
	.quad	.Lfunc_end7             # DW_AT_high_pc
	.byte	1                       # DW_AT_frame_base
	.byte	87
                                        # DW_AT_APPLE_omit_frame_ptr
	.byte	6                       # Abbrev [6] 0x1a1:0xf DW_TAG_formal_parameter
	.long	.Linfo_string33         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	225                     # DW_AT_decl_line
	.long	54                      # DW_AT_type
	.long	.Ldebug_loc51           # DW_AT_location
	.byte	11                      # Abbrev [11] 0x1b0:0xb DW_TAG_variable
	.long	.Linfo_string9          # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	252                     # DW_AT_decl_line
	.long	54                      # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	19                      # Abbrev [19] 0x1bc:0x9b DW_TAG_subprogram
	.long	.Linfo_string16         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	267                     # DW_AT_decl_line
                                        # DW_AT_prototyped
	.long	.Lsection_info+55       # DW_AT_type
                                        # DW_AT_external
	.quad	.Lfunc_begin8           # DW_AT_low_pc
	.quad	.Lfunc_end8             # DW_AT_high_pc
	.byte	1                       # DW_AT_frame_base
	.byte	86
                                        # DW_AT_APPLE_omit_frame_ptr
	.byte	20                      # Abbrev [20] 0x1da:0x10 DW_TAG_formal_parameter
	.long	.Linfo_string35         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	267                     # DW_AT_decl_line
	.long	.Lsection_info+55       # DW_AT_type
	.long	.Ldebug_loc66           # DW_AT_location
	.byte	21                      # Abbrev [21] 0x1ea:0x10 DW_TAG_formal_parameter
	.long	.Linfo_string25         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	267                     # DW_AT_decl_line
	.long	1359                    # DW_AT_type
	.long	.Ldebug_loc63           # DW_AT_location
	.byte	21                      # Abbrev [21] 0x1fa:0x10 DW_TAG_formal_parameter
	.long	.Linfo_string26         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	267                     # DW_AT_decl_line
	.long	1359                    # DW_AT_type
	.long	.Ldebug_loc60           # DW_AT_location
	.byte	21                      # Abbrev [21] 0x20a:0x10 DW_TAG_formal_parameter
	.long	.Linfo_string36         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	267                     # DW_AT_decl_line
	.long	1364                    # DW_AT_type
	.long	.Ldebug_loc54           # DW_AT_location
	.byte	21                      # Abbrev [21] 0x21a:0x10 DW_TAG_formal_parameter
	.long	.Linfo_string24         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	267                     # DW_AT_decl_line
	.long	1359                    # DW_AT_type
	.long	.Ldebug_loc57           # DW_AT_location
	.byte	22                      # Abbrev [22] 0x22a:0x10 DW_TAG_variable
	.long	.Linfo_string38         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	335                     # DW_AT_decl_line
	.long	.Lsection_info+436      # DW_AT_type
	.long	.Ldebug_loc69           # DW_AT_location
	.byte	22                      # Abbrev [22] 0x23a:0x10 DW_TAG_variable
	.long	.Linfo_string39         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	336                     # DW_AT_decl_line
	.long	.Lsection_info+55       # DW_AT_type
	.long	.Ldebug_loc71           # DW_AT_location
	.byte	23                      # Abbrev [23] 0x24a:0xc DW_TAG_variable
	.long	.Linfo_string40         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	334                     # DW_AT_decl_line
	.long	.Lsection_info+436      # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	19                      # Abbrev [19] 0x257:0x158 DW_TAG_subprogram
	.long	.Linfo_string17         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	366                     # DW_AT_decl_line
                                        # DW_AT_prototyped
	.long	.Lsection_info+55       # DW_AT_type
                                        # DW_AT_external
	.quad	.Lfunc_begin10          # DW_AT_low_pc
	.quad	.Lfunc_end10            # DW_AT_high_pc
	.byte	1                       # DW_AT_frame_base
	.byte	87
                                        # DW_AT_APPLE_omit_frame_ptr
	.byte	20                      # Abbrev [20] 0x275:0x10 DW_TAG_formal_parameter
	.long	.Linfo_string35         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	366                     # DW_AT_decl_line
	.long	.Lsection_info+55       # DW_AT_type
	.long	.Ldebug_loc107          # DW_AT_location
	.byte	21                      # Abbrev [21] 0x285:0x10 DW_TAG_formal_parameter
	.long	.Linfo_string41         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	366                     # DW_AT_decl_line
	.long	1359                    # DW_AT_type
	.long	.Ldebug_loc109          # DW_AT_location
	.byte	21                      # Abbrev [21] 0x295:0x10 DW_TAG_formal_parameter
	.long	.Linfo_string43         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	366                     # DW_AT_decl_line
	.long	1359                    # DW_AT_type
	.long	.Ldebug_loc111          # DW_AT_location
	.byte	22                      # Abbrev [22] 0x2a5:0x10 DW_TAG_variable
	.long	.Linfo_string39         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	440                     # DW_AT_decl_line
	.long	.Lsection_info+55       # DW_AT_type
	.long	.Ldebug_loc113          # DW_AT_location
	.byte	24                      # Abbrev [24] 0x2b5:0x10 DW_TAG_variable
	.long	.Linfo_string49         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	436                     # DW_AT_decl_line
	.long	54                      # DW_AT_type
	.long	.Ldebug_loc116          # DW_AT_location
	.byte	24                      # Abbrev [24] 0x2c5:0x10 DW_TAG_variable
	.long	.Linfo_string30         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	450                     # DW_AT_decl_line
	.long	54                      # DW_AT_type
	.long	.Ldebug_loc119          # DW_AT_location
	.byte	22                      # Abbrev [22] 0x2d5:0x10 DW_TAG_variable
	.long	.Linfo_string45         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	443                     # DW_AT_decl_line
	.long	.Lsection_info+55       # DW_AT_type
	.long	.Ldebug_loc122          # DW_AT_location
	.byte	22                      # Abbrev [22] 0x2e5:0x10 DW_TAG_variable
	.long	.Linfo_string44         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	442                     # DW_AT_decl_line
	.long	.Lsection_info+55       # DW_AT_type
	.long	.Ldebug_loc125          # DW_AT_location
	.byte	24                      # Abbrev [24] 0x2f5:0x10 DW_TAG_variable
	.long	.Linfo_string46         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	438                     # DW_AT_decl_line
	.long	54                      # DW_AT_type
	.long	.Ldebug_loc128          # DW_AT_location
	.byte	24                      # Abbrev [24] 0x305:0x10 DW_TAG_variable
	.long	.Linfo_string27         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	434                     # DW_AT_decl_line
	.long	54                      # DW_AT_type
	.long	.Ldebug_loc133          # DW_AT_location
	.byte	24                      # Abbrev [24] 0x315:0x10 DW_TAG_variable
	.long	.Linfo_string52         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	435                     # DW_AT_decl_line
	.long	54                      # DW_AT_type
	.long	.Ldebug_loc135          # DW_AT_location
	.byte	22                      # Abbrev [22] 0x325:0x10 DW_TAG_variable
	.long	.Linfo_string53         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	445                     # DW_AT_decl_line
	.long	.Lsection_info+55       # DW_AT_type
	.long	.Ldebug_loc137          # DW_AT_location
	.byte	24                      # Abbrev [24] 0x335:0x10 DW_TAG_variable
	.long	.Linfo_string31         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	449                     # DW_AT_decl_line
	.long	54                      # DW_AT_type
	.long	.Ldebug_loc140          # DW_AT_location
	.byte	24                      # Abbrev [24] 0x345:0x10 DW_TAG_variable
	.long	.Linfo_string50         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	437                     # DW_AT_decl_line
	.long	54                      # DW_AT_type
	.long	.Ldebug_loc144          # DW_AT_location
	.byte	24                      # Abbrev [24] 0x355:0x10 DW_TAG_variable
	.long	.Linfo_string28         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	447                     # DW_AT_decl_line
	.long	54                      # DW_AT_type
	.long	.Ldebug_loc150          # DW_AT_location
	.byte	24                      # Abbrev [24] 0x365:0x10 DW_TAG_variable
	.long	.Linfo_string29         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	448                     # DW_AT_decl_line
	.long	54                      # DW_AT_type
	.long	.Ldebug_loc154          # DW_AT_location
	.byte	22                      # Abbrev [22] 0x375:0x10 DW_TAG_variable
	.long	.Linfo_string54         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	446                     # DW_AT_decl_line
	.long	.Lsection_info+55       # DW_AT_type
	.long	.Ldebug_loc157          # DW_AT_location
	.byte	25                      # Abbrev [25] 0x385:0xd DW_TAG_variable
	.long	.Linfo_string51         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	441                     # DW_AT_decl_line
	.long	.Lsection_info+55       # DW_AT_type
	.byte	1                       # DW_AT_const_value
	.byte	22                      # Abbrev [22] 0x392:0x10 DW_TAG_variable
	.long	.Linfo_string23         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	439                     # DW_AT_decl_line
	.long	.Lsection_info+55       # DW_AT_type
	.long	.Ldebug_loc159          # DW_AT_location
	.byte	23                      # Abbrev [23] 0x3a2:0xc DW_TAG_variable
	.long	.Linfo_string55         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	444                     # DW_AT_decl_line
	.long	.Lsection_info+55       # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	26                      # Abbrev [26] 0x3af:0xb0 DW_TAG_subprogram
	.long	.Linfo_string18         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	592                     # DW_AT_decl_line
                                        # DW_AT_prototyped
                                        # DW_AT_external
	.quad	.Lfunc_begin11          # DW_AT_low_pc
	.quad	.Lfunc_end11            # DW_AT_high_pc
	.byte	1                       # DW_AT_frame_base
	.byte	87
                                        # DW_AT_APPLE_omit_frame_ptr
	.byte	20                      # Abbrev [20] 0x3c9:0x10 DW_TAG_formal_parameter
	.long	.Linfo_string35         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	592                     # DW_AT_decl_line
	.long	.Lsection_info+55       # DW_AT_type
	.long	.Ldebug_loc163          # DW_AT_location
	.byte	21                      # Abbrev [21] 0x3d9:0x10 DW_TAG_formal_parameter
	.long	.Linfo_string25         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	592                     # DW_AT_decl_line
	.long	1359                    # DW_AT_type
	.long	.Ldebug_loc165          # DW_AT_location
	.byte	21                      # Abbrev [21] 0x3e9:0x10 DW_TAG_formal_parameter
	.long	.Linfo_string42         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	592                     # DW_AT_decl_line
	.long	1359                    # DW_AT_type
	.long	.Ldebug_loc167          # DW_AT_location
	.byte	20                      # Abbrev [20] 0x3f9:0x10 DW_TAG_formal_parameter
	.long	.Linfo_string53         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	592                     # DW_AT_decl_line
	.long	.Lsection_info+55       # DW_AT_type
	.long	.Ldebug_loc169          # DW_AT_location
	.byte	21                      # Abbrev [21] 0x409:0x10 DW_TAG_formal_parameter
	.long	.Linfo_string24         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	592                     # DW_AT_decl_line
	.long	1359                    # DW_AT_type
	.long	.Ldebug_loc171          # DW_AT_location
	.byte	24                      # Abbrev [24] 0x419:0x10 DW_TAG_variable
	.long	.Linfo_string31         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	659                     # DW_AT_decl_line
	.long	54                      # DW_AT_type
	.long	.Ldebug_loc173          # DW_AT_location
	.byte	25                      # Abbrev [25] 0x429:0xd DW_TAG_variable
	.long	.Linfo_string48         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	657                     # DW_AT_decl_line
	.long	.Lsection_info+55       # DW_AT_type
	.byte	0                       # DW_AT_const_value
	.byte	22                      # Abbrev [22] 0x436:0x10 DW_TAG_variable
	.long	.Linfo_string23         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	655                     # DW_AT_decl_line
	.long	.Lsection_info+55       # DW_AT_type
	.long	.Ldebug_loc176          # DW_AT_location
	.byte	23                      # Abbrev [23] 0x446:0xc DW_TAG_variable
	.long	.Linfo_string44         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	656                     # DW_AT_decl_line
	.long	.Lsection_info+55       # DW_AT_type
	.byte	23                      # Abbrev [23] 0x452:0xc DW_TAG_variable
	.long	.Linfo_string45         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	658                     # DW_AT_decl_line
	.long	.Lsection_info+55       # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	26                      # Abbrev [26] 0x45f:0xf0 DW_TAG_subprogram
	.long	.Linfo_string19         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	699                     # DW_AT_decl_line
                                        # DW_AT_prototyped
                                        # DW_AT_external
	.quad	.Lfunc_begin9           # DW_AT_low_pc
	.quad	.Lfunc_end9             # DW_AT_high_pc
	.byte	1                       # DW_AT_frame_base
	.byte	87
                                        # DW_AT_APPLE_omit_frame_ptr
	.byte	20                      # Abbrev [20] 0x479:0x10 DW_TAG_formal_parameter
	.long	.Linfo_string35         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	699                     # DW_AT_decl_line
	.long	.Lsection_info+55       # DW_AT_type
	.long	.Ldebug_loc73           # DW_AT_location
	.byte	21                      # Abbrev [21] 0x489:0x10 DW_TAG_formal_parameter
	.long	.Linfo_string25         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	699                     # DW_AT_decl_line
	.long	1359                    # DW_AT_type
	.long	.Ldebug_loc75           # DW_AT_location
	.byte	21                      # Abbrev [21] 0x499:0x10 DW_TAG_formal_parameter
	.long	.Linfo_string41         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	699                     # DW_AT_decl_line
	.long	1359                    # DW_AT_type
	.long	.Ldebug_loc77           # DW_AT_location
	.byte	21                      # Abbrev [21] 0x4a9:0x10 DW_TAG_formal_parameter
	.long	.Linfo_string42         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	699                     # DW_AT_decl_line
	.long	1359                    # DW_AT_type
	.long	.Ldebug_loc79           # DW_AT_location
	.byte	21                      # Abbrev [21] 0x4b9:0x10 DW_TAG_formal_parameter
	.long	.Linfo_string43         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	699                     # DW_AT_decl_line
	.long	1359                    # DW_AT_type
	.long	.Ldebug_loc81           # DW_AT_location
	.byte	22                      # Abbrev [22] 0x4c9:0x10 DW_TAG_variable
	.long	.Linfo_string44         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	773                     # DW_AT_decl_line
	.long	.Lsection_info+55       # DW_AT_type
	.long	.Ldebug_loc83           # DW_AT_location
	.byte	22                      # Abbrev [22] 0x4d9:0x10 DW_TAG_variable
	.long	.Linfo_string45         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	775                     # DW_AT_decl_line
	.long	.Lsection_info+55       # DW_AT_type
	.long	.Ldebug_loc86           # DW_AT_location
	.byte	24                      # Abbrev [24] 0x4e9:0x10 DW_TAG_variable
	.long	.Linfo_string46         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	770                     # DW_AT_decl_line
	.long	54                      # DW_AT_type
	.long	.Ldebug_loc88           # DW_AT_location
	.byte	24                      # Abbrev [24] 0x4f9:0x10 DW_TAG_variable
	.long	.Linfo_string47         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	776                     # DW_AT_decl_line
	.long	54                      # DW_AT_type
	.long	.Ldebug_loc93           # DW_AT_location
	.byte	25                      # Abbrev [25] 0x509:0xd DW_TAG_variable
	.long	.Linfo_string48         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	774                     # DW_AT_decl_line
	.long	.Lsection_info+55       # DW_AT_type
	.byte	0                       # DW_AT_const_value
	.byte	24                      # Abbrev [24] 0x516:0x10 DW_TAG_variable
	.long	.Linfo_string49         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	768                     # DW_AT_decl_line
	.long	54                      # DW_AT_type
	.long	.Ldebug_loc96           # DW_AT_location
	.byte	24                      # Abbrev [24] 0x526:0x10 DW_TAG_variable
	.long	.Linfo_string50         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	769                     # DW_AT_decl_line
	.long	54                      # DW_AT_type
	.long	.Ldebug_loc102          # DW_AT_location
	.byte	23                      # Abbrev [23] 0x536:0xc DW_TAG_variable
	.long	.Linfo_string23         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	771                     # DW_AT_decl_line
	.long	.Lsection_info+55       # DW_AT_type
	.byte	23                      # Abbrev [23] 0x542:0xc DW_TAG_variable
	.long	.Linfo_string51         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	772                     # DW_AT_decl_line
	.long	.Lsection_info+55       # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	13                      # Abbrev [13] 0x54f:0x5 DW_TAG_pointer_type
	.long	54                      # DW_AT_type
	.byte	4                       # Abbrev [4] 0x554:0x7 DW_TAG_base_type
	.long	.Linfo_string37         # DW_AT_name
	.byte	2                       # DW_AT_encoding
	.byte	1                       # DW_AT_byte_size
	.byte	0                       # End Of Children Mark
.L.debug_info_end1:
	.section	.debug_abbrev,"",@progbits
.L.debug_abbrev_begin:
	.byte	1                       # Abbreviation Code
	.byte	17                      # DW_TAG_compile_unit
	.byte	1                       # DW_CHILDREN_yes
	.byte	37                      # DW_AT_producer
	.byte	14                      # DW_FORM_strp
	.byte	19                      # DW_AT_language
	.byte	5                       # DW_FORM_data2
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	17                      # DW_AT_low_pc
	.byte	1                       # DW_FORM_addr
	.byte	16                      # DW_AT_stmt_list
	.byte	23                      # DW_FORM_sec_offset
	.byte	27                      # DW_AT_comp_dir
	.byte	14                      # DW_FORM_strp
	.ascii	"\341\177"              # DW_AT_APPLE_optimized
	.byte	25                      # DW_FORM_flag_present
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	2                       # Abbreviation Code
	.byte	52                      # DW_TAG_variable
	.byte	0                       # DW_CHILDREN_no
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	73                      # DW_AT_type
	.byte	19                      # DW_FORM_ref4
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	11                      # DW_FORM_data1
	.byte	28                      # DW_AT_const_value
	.byte	13                      # DW_FORM_sdata
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	3                       # Abbreviation Code
	.byte	38                      # DW_TAG_const_type
	.byte	0                       # DW_CHILDREN_no
	.byte	73                      # DW_AT_type
	.byte	19                      # DW_FORM_ref4
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	4                       # Abbreviation Code
	.byte	36                      # DW_TAG_base_type
	.byte	0                       # DW_CHILDREN_no
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	62                      # DW_AT_encoding
	.byte	11                      # DW_FORM_data1
	.byte	11                      # DW_AT_byte_size
	.byte	11                      # DW_FORM_data1
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	5                       # Abbreviation Code
	.byte	46                      # DW_TAG_subprogram
	.byte	1                       # DW_CHILDREN_yes
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	11                      # DW_FORM_data1
	.byte	39                      # DW_AT_prototyped
	.byte	25                      # DW_FORM_flag_present
	.byte	73                      # DW_AT_type
	.byte	19                      # DW_FORM_ref4
	.byte	63                      # DW_AT_external
	.byte	25                      # DW_FORM_flag_present
	.byte	17                      # DW_AT_low_pc
	.byte	1                       # DW_FORM_addr
	.byte	18                      # DW_AT_high_pc
	.byte	1                       # DW_FORM_addr
	.byte	64                      # DW_AT_frame_base
	.byte	10                      # DW_FORM_block1
	.ascii	"\347\177"              # DW_AT_APPLE_omit_frame_ptr
	.byte	25                      # DW_FORM_flag_present
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	6                       # Abbreviation Code
	.byte	5                       # DW_TAG_formal_parameter
	.byte	0                       # DW_CHILDREN_no
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	11                      # DW_FORM_data1
	.byte	73                      # DW_AT_type
	.byte	19                      # DW_FORM_ref4
	.byte	2                       # DW_AT_location
	.byte	23                      # DW_FORM_sec_offset
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	7                       # Abbreviation Code
	.byte	52                      # DW_TAG_variable
	.byte	0                       # DW_CHILDREN_no
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	11                      # DW_FORM_data1
	.byte	73                      # DW_AT_type
	.byte	19                      # DW_FORM_ref4
	.byte	28                      # DW_AT_const_value
	.byte	13                      # DW_FORM_sdata
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	8                       # Abbreviation Code
	.byte	11                      # DW_TAG_lexical_block
	.byte	1                       # DW_CHILDREN_yes
	.byte	17                      # DW_AT_low_pc
	.byte	1                       # DW_FORM_addr
	.byte	18                      # DW_AT_high_pc
	.byte	1                       # DW_FORM_addr
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	9                       # Abbreviation Code
	.byte	46                      # DW_TAG_subprogram
	.byte	1                       # DW_CHILDREN_yes
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	11                      # DW_FORM_data1
	.byte	39                      # DW_AT_prototyped
	.byte	25                      # DW_FORM_flag_present
	.byte	63                      # DW_AT_external
	.byte	25                      # DW_FORM_flag_present
	.byte	17                      # DW_AT_low_pc
	.byte	1                       # DW_FORM_addr
	.byte	18                      # DW_AT_high_pc
	.byte	1                       # DW_FORM_addr
	.byte	64                      # DW_AT_frame_base
	.byte	10                      # DW_FORM_block1
	.ascii	"\347\177"              # DW_AT_APPLE_omit_frame_ptr
	.byte	25                      # DW_FORM_flag_present
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	10                      # Abbreviation Code
	.byte	52                      # DW_TAG_variable
	.byte	0                       # DW_CHILDREN_no
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	11                      # DW_FORM_data1
	.byte	73                      # DW_AT_type
	.byte	19                      # DW_FORM_ref4
	.byte	2                       # DW_AT_location
	.byte	23                      # DW_FORM_sec_offset
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	11                      # Abbreviation Code
	.byte	52                      # DW_TAG_variable
	.byte	0                       # DW_CHILDREN_no
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	11                      # DW_FORM_data1
	.byte	73                      # DW_AT_type
	.byte	19                      # DW_FORM_ref4
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	12                      # Abbreviation Code
	.byte	46                      # DW_TAG_subprogram
	.byte	1                       # DW_CHILDREN_yes
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	11                      # DW_FORM_data1
	.byte	73                      # DW_AT_type
	.byte	19                      # DW_FORM_ref4
	.byte	63                      # DW_AT_external
	.byte	25                      # DW_FORM_flag_present
	.byte	17                      # DW_AT_low_pc
	.byte	1                       # DW_FORM_addr
	.byte	18                      # DW_AT_high_pc
	.byte	1                       # DW_FORM_addr
	.byte	64                      # DW_AT_frame_base
	.byte	10                      # DW_FORM_block1
	.ascii	"\347\177"              # DW_AT_APPLE_omit_frame_ptr
	.byte	25                      # DW_FORM_flag_present
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	13                      # Abbreviation Code
	.byte	15                      # DW_TAG_pointer_type
	.byte	0                       # DW_CHILDREN_no
	.byte	73                      # DW_AT_type
	.byte	19                      # DW_FORM_ref4
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	14                      # Abbreviation Code
	.byte	1                       # DW_TAG_array_type
	.byte	1                       # DW_CHILDREN_yes
	.byte	73                      # DW_AT_type
	.byte	16                      # DW_FORM_ref_addr
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	15                      # Abbreviation Code
	.byte	33                      # DW_TAG_subrange_type
	.byte	0                       # DW_CHILDREN_no
	.byte	73                      # DW_AT_type
	.byte	19                      # DW_FORM_ref4
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	16                      # Abbreviation Code
	.byte	36                      # DW_TAG_base_type
	.byte	0                       # DW_CHILDREN_no
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	11                      # DW_AT_byte_size
	.byte	11                      # DW_FORM_data1
	.byte	62                      # DW_AT_encoding
	.byte	11                      # DW_FORM_data1
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	17                      # Abbreviation Code
	.byte	52                      # DW_TAG_variable
	.byte	0                       # DW_CHILDREN_no
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	73                      # DW_AT_type
	.byte	19                      # DW_FORM_ref4
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	11                      # DW_FORM_data1
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	18                      # Abbreviation Code
	.byte	52                      # DW_TAG_variable
	.byte	0                       # DW_CHILDREN_no
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	11                      # DW_FORM_data1
	.byte	73                      # DW_AT_type
	.byte	19                      # DW_FORM_ref4
	.byte	28                      # DW_AT_const_value
	.byte	10                      # DW_FORM_block1
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	19                      # Abbreviation Code
	.byte	46                      # DW_TAG_subprogram
	.byte	1                       # DW_CHILDREN_yes
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	5                       # DW_FORM_data2
	.byte	39                      # DW_AT_prototyped
	.byte	25                      # DW_FORM_flag_present
	.byte	73                      # DW_AT_type
	.byte	16                      # DW_FORM_ref_addr
	.byte	63                      # DW_AT_external
	.byte	25                      # DW_FORM_flag_present
	.byte	17                      # DW_AT_low_pc
	.byte	1                       # DW_FORM_addr
	.byte	18                      # DW_AT_high_pc
	.byte	1                       # DW_FORM_addr
	.byte	64                      # DW_AT_frame_base
	.byte	10                      # DW_FORM_block1
	.ascii	"\347\177"              # DW_AT_APPLE_omit_frame_ptr
	.byte	25                      # DW_FORM_flag_present
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	20                      # Abbreviation Code
	.byte	5                       # DW_TAG_formal_parameter
	.byte	0                       # DW_CHILDREN_no
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	5                       # DW_FORM_data2
	.byte	73                      # DW_AT_type
	.byte	16                      # DW_FORM_ref_addr
	.byte	2                       # DW_AT_location
	.byte	23                      # DW_FORM_sec_offset
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	21                      # Abbreviation Code
	.byte	5                       # DW_TAG_formal_parameter
	.byte	0                       # DW_CHILDREN_no
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	5                       # DW_FORM_data2
	.byte	73                      # DW_AT_type
	.byte	19                      # DW_FORM_ref4
	.byte	2                       # DW_AT_location
	.byte	23                      # DW_FORM_sec_offset
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	22                      # Abbreviation Code
	.byte	52                      # DW_TAG_variable
	.byte	0                       # DW_CHILDREN_no
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	5                       # DW_FORM_data2
	.byte	73                      # DW_AT_type
	.byte	16                      # DW_FORM_ref_addr
	.byte	2                       # DW_AT_location
	.byte	23                      # DW_FORM_sec_offset
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	23                      # Abbreviation Code
	.byte	52                      # DW_TAG_variable
	.byte	0                       # DW_CHILDREN_no
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	5                       # DW_FORM_data2
	.byte	73                      # DW_AT_type
	.byte	16                      # DW_FORM_ref_addr
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	24                      # Abbreviation Code
	.byte	52                      # DW_TAG_variable
	.byte	0                       # DW_CHILDREN_no
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	5                       # DW_FORM_data2
	.byte	73                      # DW_AT_type
	.byte	19                      # DW_FORM_ref4
	.byte	2                       # DW_AT_location
	.byte	23                      # DW_FORM_sec_offset
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	25                      # Abbreviation Code
	.byte	52                      # DW_TAG_variable
	.byte	0                       # DW_CHILDREN_no
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	5                       # DW_FORM_data2
	.byte	73                      # DW_AT_type
	.byte	16                      # DW_FORM_ref_addr
	.byte	28                      # DW_AT_const_value
	.byte	13                      # DW_FORM_sdata
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	26                      # Abbreviation Code
	.byte	46                      # DW_TAG_subprogram
	.byte	1                       # DW_CHILDREN_yes
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	5                       # DW_FORM_data2
	.byte	39                      # DW_AT_prototyped
	.byte	25                      # DW_FORM_flag_present
	.byte	63                      # DW_AT_external
	.byte	25                      # DW_FORM_flag_present
	.byte	17                      # DW_AT_low_pc
	.byte	1                       # DW_FORM_addr
	.byte	18                      # DW_AT_high_pc
	.byte	1                       # DW_FORM_addr
	.byte	64                      # DW_AT_frame_base
	.byte	10                      # DW_FORM_block1
	.ascii	"\347\177"              # DW_AT_APPLE_omit_frame_ptr
	.byte	25                      # DW_FORM_flag_present
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	0                       # EOM(3)
.L.debug_abbrev_end:
	.section	.debug_loc,"",@progbits
.Ldebug_loc0:
	.quad	.Lfunc_begin0
	.quad	.Ltmp22
.Lset0 = .Ltmp570-.Ltmp569              # Loc expr size
	.short	.Lset0
.Ltmp569:
	.byte	119                     # DW_OP_breg7
	.ascii	"\330\013"
.Ltmp570:
	.quad	0
	.quad	0
.Ldebug_loc2:
	.quad	.Lfunc_begin0
	.quad	.Ltmp22
.Lset1 = .Ltmp572-.Ltmp571              # Loc expr size
	.short	.Lset1
.Ltmp571:
	.byte	119                     # DW_OP_breg7
	.ascii	"\320\013"
.Ltmp572:
	.quad	0
	.quad	0
.Ldebug_loc4:
	.quad	.Lfunc_begin0
	.quad	.Ltmp22
.Lset2 = .Ltmp574-.Ltmp573              # Loc expr size
	.short	.Lset2
.Ltmp573:
	.byte	119                     # DW_OP_breg7
	.ascii	"\264\f"
.Ltmp574:
	.quad	0
	.quad	0
.Ldebug_loc6:
	.quad	.Lfunc_begin1
	.quad	.Ltmp43
.Lset3 = .Ltmp576-.Ltmp575              # Loc expr size
	.short	.Lset3
.Ltmp575:
	.byte	85                      # DW_OP_reg5
.Ltmp576:
	.quad	.Ltmp43
	.quad	.Ltmp48
.Lset4 = .Ltmp578-.Ltmp577              # Loc expr size
	.short	.Lset4
.Ltmp577:
	.byte	118                     # DW_OP_breg6
	.ascii	"\350|"
.Ltmp578:
	.quad	0
	.quad	0
.Ldebug_loc9:
	.quad	.Lfunc_begin1
	.quad	.Ltmp44
.Lset5 = .Ltmp580-.Ltmp579              # Loc expr size
	.short	.Lset5
.Ltmp579:
	.byte	84                      # DW_OP_reg4
.Ltmp580:
	.quad	.Ltmp44
	.quad	.Ltmp48
.Lset6 = .Ltmp582-.Ltmp581              # Loc expr size
	.short	.Lset6
.Ltmp581:
	.byte	118                     # DW_OP_breg6
	.ascii	"\340|"
.Ltmp582:
	.quad	0
	.quad	0
.Ldebug_loc12:
	.quad	.Lfunc_begin1
	.quad	.Ltmp42
.Lset7 = .Ltmp584-.Ltmp583              # Loc expr size
	.short	.Lset7
.Ltmp583:
	.byte	81                      # DW_OP_reg1
.Ltmp584:
	.quad	.Ltmp42
	.quad	.Ltmp48
.Lset8 = .Ltmp586-.Ltmp585              # Loc expr size
	.short	.Lset8
.Ltmp585:
	.byte	118                     # DW_OP_breg6
	.ascii	"\360|"
.Ltmp586:
	.quad	0
	.quad	0
.Ldebug_loc15:
	.quad	.Ltmp45
	.quad	.Ltmp48
.Lset9 = .Ltmp588-.Ltmp587              # Loc expr size
	.short	.Lset9
.Ltmp587:
	.byte	118                     # DW_OP_breg6
	.ascii	"\300z"
	.byte	6
.Ltmp588:
	.quad	0
	.quad	0
.Ldebug_loc17:
	.quad	.Ltmp76
	.quad	.Ltmp77
.Lset10 = .Ltmp590-.Ltmp589             # Loc expr size
	.short	.Lset10
.Ltmp589:
	.byte	119                     # DW_OP_breg7
	.ascii	"\300\b"
.Ltmp590:
	.quad	0
	.quad	0
.Ldebug_loc19:
	.quad	.Ltmp78
	.quad	.Ltmp79
.Lset11 = .Ltmp592-.Ltmp591             # Loc expr size
	.short	.Lset11
.Ltmp591:
	.byte	119                     # DW_OP_breg7
	.ascii	"\250\007"
.Ltmp592:
	.quad	0
	.quad	0
.Ldebug_loc21:
	.quad	.Lfunc_begin3
	.quad	.Ltmp110
.Lset12 = .Ltmp594-.Ltmp593             # Loc expr size
	.short	.Lset12
.Ltmp593:
	.byte	119                     # DW_OP_breg7
	.ascii	"\340\n"
.Ltmp594:
	.quad	0
	.quad	0
.Ldebug_loc23:
	.quad	.Lfunc_begin3
	.quad	.Ltmp108
.Lset13 = .Ltmp596-.Ltmp595             # Loc expr size
	.short	.Lset13
.Ltmp595:
	.byte	119                     # DW_OP_breg7
	.ascii	"\260\n"
.Ltmp596:
	.quad	0
	.quad	0
.Ldebug_loc25:
	.quad	.Ltmp109
	.quad	.Ltmp110
.Lset14 = .Ltmp598-.Ltmp597             # Loc expr size
	.short	.Lset14
.Ltmp597:
	.byte	119                     # DW_OP_breg7
	.ascii	"\240\t"
.Ltmp598:
	.quad	.Ltmp118
	.quad	.Ltmp121
.Lset15 = .Ltmp600-.Ltmp599             # Loc expr size
	.short	.Lset15
.Ltmp599:
	.byte	119                     # DW_OP_breg7
	.ascii	"\350\001"
.Ltmp600:
	.quad	0
	.quad	0
.Ldebug_loc28:
	.quad	.Ltmp112
	.quad	.Ltmp113
.Lset16 = .Ltmp602-.Ltmp601             # Loc expr size
	.short	.Lset16
.Ltmp601:
	.byte	119                     # DW_OP_breg7
	.ascii	"\300\005"
.Ltmp602:
	.quad	.Ltmp113
	.quad	.Ltmp115
.Lset17 = .Ltmp604-.Ltmp603             # Loc expr size
	.short	.Lset17
.Ltmp603:
	.byte	119                     # DW_OP_breg7
	.ascii	"\270\005"
.Ltmp604:
	.quad	.Ltmp119
	.quad	.Ltmp121
.Lset18 = .Ltmp606-.Ltmp605             # Loc expr size
	.short	.Lset18
.Ltmp605:
	.byte	119                     # DW_OP_breg7
	.ascii	"\320\001"
.Ltmp606:
	.quad	0
	.quad	0
.Ldebug_loc32:
	.quad	.Ltmp114
	.quad	.Ltmp115
.Lset19 = .Ltmp608-.Ltmp607             # Loc expr size
	.short	.Lset19
.Ltmp607:
	.byte	119                     # DW_OP_breg7
	.ascii	"\260\005"
.Ltmp608:
	.quad	.Ltmp120
	.quad	.Ltmp121
.Lset20 = .Ltmp610-.Ltmp609             # Loc expr size
	.short	.Lset20
.Ltmp609:
	.byte	119                     # DW_OP_breg7
	.ascii	"\340\002"
.Ltmp610:
	.quad	0
	.quad	0
.Ldebug_loc35:
	.quad	.Ltmp116
	.quad	.Ltmp121
.Lset21 = .Ltmp612-.Ltmp611             # Loc expr size
	.short	.Lset21
.Ltmp611:
	.byte	119                     # DW_OP_breg7
	.ascii	"\200\002"
.Ltmp612:
	.quad	0
	.quad	0
.Ldebug_loc37:
	.quad	.Ltmp117
	.quad	.Ltmp121
.Lset22 = .Ltmp614-.Ltmp613             # Loc expr size
	.short	.Lset22
.Ltmp613:
	.byte	119                     # DW_OP_breg7
	.ascii	"\360\001"
.Ltmp614:
	.quad	0
	.quad	0
.Ldebug_loc39:
	.quad	.Lfunc_begin4
	.quad	.Ltmp146
.Lset23 = .Ltmp616-.Ltmp615             # Loc expr size
	.short	.Lset23
.Ltmp615:
	.byte	98                      # DW_OP_reg18
.Ltmp616:
	.quad	.Ltmp146
	.quad	.Ltmp147
.Lset24 = .Ltmp618-.Ltmp617             # Loc expr size
	.short	.Lset24
.Ltmp617:
	.byte	119                     # DW_OP_breg7
	.ascii	"\200\001"
.Ltmp618:
	.quad	0
	.quad	0
.Ldebug_loc42:
	.quad	.Lfunc_begin4
	.quad	.Ltmp145
.Lset25 = .Ltmp620-.Ltmp619             # Loc expr size
	.short	.Lset25
.Ltmp619:
	.byte	97                      # DW_OP_reg17
.Ltmp620:
	.quad	.Ltmp145
	.quad	.Lfunc_end4
.Lset26 = .Ltmp622-.Ltmp621             # Loc expr size
	.short	.Lset26
.Ltmp621:
	.byte	119                     # DW_OP_breg7
	.ascii	"\250\001"
.Ltmp622:
	.quad	0
	.quad	0
.Ldebug_loc45:
	.quad	.Lfunc_begin5
	.quad	.Ltmp177
.Lset27 = .Ltmp624-.Ltmp623             # Loc expr size
	.short	.Lset27
.Ltmp623:
	.byte	98                      # DW_OP_reg18
.Ltmp624:
	.quad	.Ltmp177
	.quad	.Ltmp178
.Lset28 = .Ltmp626-.Ltmp625             # Loc expr size
	.short	.Lset28
.Ltmp625:
	.byte	119                     # DW_OP_breg7
	.ascii	"\200\001"
.Ltmp626:
	.quad	0
	.quad	0
.Ldebug_loc48:
	.quad	.Lfunc_begin5
	.quad	.Ltmp176
.Lset29 = .Ltmp628-.Ltmp627             # Loc expr size
	.short	.Lset29
.Ltmp627:
	.byte	97                      # DW_OP_reg17
.Ltmp628:
	.quad	.Ltmp176
	.quad	.Lfunc_end5
.Lset30 = .Ltmp630-.Ltmp629             # Loc expr size
	.short	.Lset30
.Ltmp629:
	.byte	119                     # DW_OP_breg7
	.ascii	"\250\001"
.Ltmp630:
	.quad	0
	.quad	0
.Ldebug_loc51:
	.quad	.Lfunc_begin7
	.quad	.Ltmp218
.Lset31 = .Ltmp632-.Ltmp631             # Loc expr size
	.short	.Lset31
.Ltmp631:
	.byte	97                      # DW_OP_reg17
.Ltmp632:
	.quad	.Ltmp218
	.quad	.Ltmp219
.Lset32 = .Ltmp634-.Ltmp633             # Loc expr size
	.short	.Lset32
.Ltmp633:
	.byte	119                     # DW_OP_breg7
	.ascii	"\300\001"
.Ltmp634:
	.quad	0
	.quad	0
.Ldebug_loc54:
	.quad	.Lfunc_begin8
	.quad	.Ltmp235
.Lset33 = .Ltmp636-.Ltmp635             # Loc expr size
	.short	.Lset33
.Ltmp635:
	.byte	80                      # DW_OP_reg0
.Ltmp636:
	.quad	.Ltmp235
	.quad	.Ltmp242
.Lset34 = .Ltmp638-.Ltmp637             # Loc expr size
	.short	.Lset34
.Ltmp637:
	.byte	118                     # DW_OP_breg6
	.byte	87
.Ltmp638:
	.quad	0
	.quad	0
.Ldebug_loc57:
	.quad	.Lfunc_begin8
	.quad	.Ltmp240
.Lset35 = .Ltmp640-.Ltmp639             # Loc expr size
	.short	.Lset35
.Ltmp639:
	.byte	88                      # DW_OP_reg8
.Ltmp640:
	.quad	.Ltmp240
	.quad	.Ltmp242
.Lset36 = .Ltmp642-.Ltmp641             # Loc expr size
	.short	.Lset36
.Ltmp641:
	.byte	118                     # DW_OP_breg6
	.ascii	"\270~"
.Ltmp642:
	.quad	0
	.quad	0
.Ldebug_loc60:
	.quad	.Lfunc_begin8
	.quad	.Ltmp239
.Lset37 = .Ltmp644-.Ltmp643             # Loc expr size
	.short	.Lset37
.Ltmp643:
	.byte	81                      # DW_OP_reg1
.Ltmp644:
	.quad	.Ltmp239
	.quad	.Ltmp242
.Lset38 = .Ltmp646-.Ltmp645             # Loc expr size
	.short	.Lset38
.Ltmp645:
	.byte	118                     # DW_OP_breg6
	.ascii	"\310~"
.Ltmp646:
	.quad	0
	.quad	0
.Ldebug_loc63:
	.quad	.Lfunc_begin8
	.quad	.Ltmp236
.Lset39 = .Ltmp648-.Ltmp647             # Loc expr size
	.short	.Lset39
.Ltmp647:
	.byte	84                      # DW_OP_reg4
.Ltmp648:
	.quad	.Ltmp236
	.quad	.Ltmp242
.Lset40 = .Ltmp650-.Ltmp649             # Loc expr size
	.short	.Lset40
.Ltmp649:
	.byte	118                     # DW_OP_breg6
	.ascii	"\270\177"
.Ltmp650:
	.quad	0
	.quad	0
.Ldebug_loc66:
	.quad	.Lfunc_begin8
	.quad	.Ltmp238
.Lset41 = .Ltmp652-.Ltmp651             # Loc expr size
	.short	.Lset41
.Ltmp651:
	.byte	85                      # DW_OP_reg5
.Ltmp652:
	.quad	.Ltmp238
	.quad	.Ltmp242
.Lset42 = .Ltmp654-.Ltmp653             # Loc expr size
	.short	.Lset42
.Ltmp653:
	.byte	118                     # DW_OP_breg6
	.ascii	"\324~"
.Ltmp654:
	.quad	0
	.quad	0
.Ldebug_loc69:
	.quad	.Ltmp241
	.quad	.Ltmp242
.Lset43 = .Ltmp656-.Ltmp655             # Loc expr size
	.short	.Lset43
.Ltmp655:
	.byte	118                     # DW_OP_breg6
	.ascii	"\240}"
	.byte	6
.Ltmp656:
	.quad	0
	.quad	0
.Ldebug_loc71:
	.quad	.Ltmp244
	.quad	.Ltmp245
.Lset44 = .Ltmp658-.Ltmp657             # Loc expr size
	.short	.Lset44
.Ltmp657:
	.byte	118                     # DW_OP_breg6
	.ascii	"\264z"
.Ltmp658:
	.quad	0
	.quad	0
.Ldebug_loc73:
	.quad	.Lfunc_begin9
	.quad	.Ltmp272
.Lset45 = .Ltmp660-.Ltmp659             # Loc expr size
	.short	.Lset45
.Ltmp659:
	.byte	119                     # DW_OP_breg7
	.asciz	"\354\325"
.Ltmp660:
	.quad	0
	.quad	0
.Ldebug_loc75:
	.quad	.Lfunc_begin9
	.quad	.Ltmp272
.Lset46 = .Ltmp662-.Ltmp661             # Loc expr size
	.short	.Lset46
.Ltmp661:
	.byte	119                     # DW_OP_breg7
	.asciz	"\340\326"
.Ltmp662:
	.quad	0
	.quad	0
.Ldebug_loc77:
	.quad	.Lfunc_begin9
	.quad	.Ltmp272
.Lset47 = .Ltmp664-.Ltmp663             # Loc expr size
	.short	.Lset47
.Ltmp663:
	.byte	119                     # DW_OP_breg7
	.asciz	"\330\325"
.Ltmp664:
	.quad	0
	.quad	0
.Ldebug_loc79:
	.quad	.Lfunc_begin9
	.quad	.Ltmp272
.Lset48 = .Ltmp666-.Ltmp665             # Loc expr size
	.short	.Lset48
.Ltmp665:
	.byte	119                     # DW_OP_breg7
	.asciz	"\320\325"
.Ltmp666:
	.quad	0
	.quad	0
.Ldebug_loc81:
	.quad	.Lfunc_begin9
	.quad	.Ltmp272
.Lset49 = .Ltmp668-.Ltmp667             # Loc expr size
	.short	.Lset49
.Ltmp667:
	.byte	119                     # DW_OP_breg7
	.asciz	"\310\325"
.Ltmp668:
	.quad	0
	.quad	0
.Ldebug_loc83:
	.quad	.Ltmp271
	.quad	.Lfunc_end9
.Lset50 = .Ltmp670-.Ltmp669             # Loc expr size
	.short	.Lset50
.Ltmp669:
	.byte	16                      # DW_OP_constu
	.byte	0
.Ltmp670:
	.quad	0
	.quad	0
.Ldebug_loc86:
	.quad	.Ltmp290
	.quad	.Ltmp291
.Lset51 = .Ltmp672-.Ltmp671             # Loc expr size
	.short	.Lset51
.Ltmp671:
	.byte	119                     # DW_OP_breg7
	.asciz	"\260\305"
.Ltmp672:
	.quad	0
	.quad	0
.Ldebug_loc88:
	.quad	.Ltmp290
	.quad	.Ltmp311
.Lset52 = .Ltmp674-.Ltmp673             # Loc expr size
	.short	.Lset52
.Ltmp673:
.Ltmp674:
	.quad	.Ltmp311
	.quad	.Ltmp312
.Lset53 = .Ltmp676-.Ltmp675             # Loc expr size
	.short	.Lset53
.Ltmp675:
	.byte	119                     # DW_OP_breg7
	.ascii	"\2201"
.Ltmp676:
	.quad	.Ltmp316
	.quad	.Ltmp318
.Lset54 = .Ltmp678-.Ltmp677             # Loc expr size
	.short	.Lset54
.Ltmp677:
	.byte	119                     # DW_OP_breg7
	.ascii	"\220*"
.Ltmp678:
	.quad	.Ltmp338
	.quad	.Ltmp339
.Lset55 = .Ltmp680-.Ltmp679             # Loc expr size
	.short	.Lset55
.Ltmp679:
	.byte	119                     # DW_OP_breg7
	.ascii	"\230\023"
.Ltmp680:
	.quad	0
	.quad	0
.Ldebug_loc93:
	.quad	.Ltmp290
	.quad	.Ltmp293
.Lset56 = .Ltmp682-.Ltmp681             # Loc expr size
	.short	.Lset56
.Ltmp681:
.Ltmp682:
	.quad	.Ltmp293
	.quad	.Ltmp294
.Lset57 = .Ltmp684-.Ltmp683             # Loc expr size
	.short	.Lset57
.Ltmp683:
	.byte	119                     # DW_OP_breg7
	.asciz	"\250\302"
.Ltmp684:
	.quad	0
	.quad	0
.Ldebug_loc96:
	.quad	.Ltmp313
	.quad	.Ltmp314
.Lset58 = .Ltmp686-.Ltmp685             # Loc expr size
	.short	.Lset58
.Ltmp685:
	.byte	119                     # DW_OP_breg7
	.ascii	"\320-"
.Ltmp686:
	.quad	.Ltmp324
	.quad	.Ltmp327
.Lset59 = .Ltmp688-.Ltmp687             # Loc expr size
	.short	.Lset59
.Ltmp687:
	.byte	119                     # DW_OP_breg7
	.ascii	"\310\""
.Ltmp688:
	.quad	.Ltmp336
	.quad	.Ltmp337
.Lset60 = .Ltmp690-.Ltmp689             # Loc expr size
	.short	.Lset60
.Ltmp689:
	.byte	119                     # DW_OP_breg7
	.ascii	"\210\025"
.Ltmp690:
	.quad	.Ltmp345
	.quad	.Ltmp348
.Lset61 = .Ltmp692-.Ltmp691             # Loc expr size
	.short	.Lset61
.Ltmp691:
	.byte	119                     # DW_OP_breg7
	.ascii	"\200\f"
.Ltmp692:
	.quad	.Ltmp355
	.quad	.Ltmp357
.Lset62 = .Ltmp694-.Ltmp693             # Loc expr size
	.short	.Lset62
.Ltmp693:
	.byte	119                     # DW_OP_breg7
	.asciz	"\360"
.Ltmp694:
	.quad	0
	.quad	0
.Ldebug_loc102:
	.quad	.Ltmp315
	.quad	.Ltmp318
.Lset63 = .Ltmp696-.Ltmp695             # Loc expr size
	.short	.Lset63
.Ltmp695:
	.byte	119                     # DW_OP_breg7
	.ascii	"\260*"
.Ltmp696:
	.quad	.Ltmp325
	.quad	.Ltmp327
.Lset64 = .Ltmp698-.Ltmp697             # Loc expr size
	.short	.Lset64
.Ltmp697:
	.byte	119                     # DW_OP_breg7
	.ascii	"\200\""
.Ltmp698:
	.quad	.Ltmp329
	.quad	.Ltmp331
.Lset65 = .Ltmp700-.Ltmp699             # Loc expr size
	.short	.Lset65
.Ltmp699:
	.byte	119                     # DW_OP_breg7
	.ascii	"\330\034"
.Ltmp700:
	.quad	.Ltmp346
	.quad	.Ltmp348
.Lset66 = .Ltmp702-.Ltmp701             # Loc expr size
	.short	.Lset66
.Ltmp701:
	.byte	119                     # DW_OP_breg7
	.ascii	"\360\013"
.Ltmp702:
	.quad	0
	.quad	0
.Ldebug_loc107:
	.quad	.Lfunc_begin10
	.quad	.Ltmp382
.Lset67 = .Ltmp704-.Ltmp703             # Loc expr size
	.short	.Lset67
.Ltmp703:
	.byte	119                     # DW_OP_breg7
	.asciz	"\214\310"
.Ltmp704:
	.quad	0
	.quad	0
.Ldebug_loc109:
	.quad	.Lfunc_begin10
	.quad	.Ltmp382
.Lset68 = .Ltmp706-.Ltmp705             # Loc expr size
	.short	.Lset68
.Ltmp705:
	.byte	119                     # DW_OP_breg7
	.asciz	"\200\310"
.Ltmp706:
	.quad	0
	.quad	0
.Ldebug_loc111:
	.quad	.Lfunc_begin10
	.quad	.Ltmp382
.Lset69 = .Ltmp708-.Ltmp707             # Loc expr size
	.short	.Lset69
.Ltmp707:
	.byte	119                     # DW_OP_breg7
	.asciz	"\370\307"
.Ltmp708:
	.quad	0
	.quad	0
.Ldebug_loc113:
	.quad	.Ltmp381
	.quad	.Ltmp414
.Lset70 = .Ltmp710-.Ltmp709             # Loc expr size
	.short	.Lset70
.Ltmp709:
	.byte	16                      # DW_OP_constu
	.byte	0
.Ltmp710:
	.quad	.Ltmp414
	.quad	.Ltmp415
.Lset71 = .Ltmp712-.Ltmp711             # Loc expr size
	.short	.Lset71
.Ltmp711:
	.byte	119                     # DW_OP_breg7
	.ascii	"\204*"
.Ltmp712:
	.quad	0
	.quad	0
.Ldebug_loc116:
	.quad	.Ltmp385
	.quad	.Ltmp429
.Lset72 = .Ltmp714-.Ltmp713             # Loc expr size
	.short	.Lset72
.Ltmp713:
.Ltmp714:
	.quad	.Ltmp429
	.quad	.Ltmp430
.Lset73 = .Ltmp716-.Ltmp715             # Loc expr size
	.short	.Lset73
.Ltmp715:
	.byte	119                     # DW_OP_breg7
	.ascii	"\260\036"
.Ltmp716:
	.quad	0
	.quad	0
.Ldebug_loc119:
	.quad	.Ltmp385
	.quad	.Ltmp396
.Lset74 = .Ltmp718-.Ltmp717             # Loc expr size
	.short	.Lset74
.Ltmp717:
.Ltmp718:
	.quad	.Ltmp396
	.quad	.Ltmp399
.Lset75 = .Ltmp720-.Ltmp719             # Loc expr size
	.short	.Lset75
.Ltmp719:
	.byte	119                     # DW_OP_breg7
	.ascii	"\220:"
.Ltmp720:
	.quad	0
	.quad	0
.Ldebug_loc122:
	.quad	.Ltmp386
	.quad	.Ltmp479
.Lset76 = .Ltmp722-.Ltmp721             # Loc expr size
	.short	.Lset76
.Ltmp721:
	.byte	16                      # DW_OP_constu
	.byte	0
.Ltmp722:
	.quad	.Ltmp479
	.quad	.Ltmp480
.Lset77 = .Ltmp724-.Ltmp723             # Loc expr size
	.short	.Lset77
.Ltmp723:
	.byte	119                     # DW_OP_breg7
	.ascii	"\354\001"
.Ltmp724:
	.quad	0
	.quad	0
.Ldebug_loc125:
	.quad	.Ltmp393
	.quad	.Ltmp416
.Lset78 = .Ltmp726-.Ltmp725             # Loc expr size
	.short	.Lset78
.Ltmp725:
	.byte	16                      # DW_OP_constu
	.byte	0
.Ltmp726:
	.quad	.Ltmp416
	.quad	.Ltmp417
.Lset79 = .Ltmp728-.Ltmp727             # Loc expr size
	.short	.Lset79
.Ltmp727:
	.byte	119                     # DW_OP_breg7
	.ascii	"\244'"
.Ltmp728:
	.quad	0
	.quad	0
.Ldebug_loc128:
	.quad	.Ltmp394
	.quad	.Ltmp395
.Lset80 = .Ltmp730-.Ltmp729             # Loc expr size
	.short	.Lset80
.Ltmp729:
	.byte	119                     # DW_OP_breg7
	.ascii	"\220:"
.Ltmp730:
	.quad	.Ltmp424
	.quad	.Ltmp425
.Lset81 = .Ltmp732-.Ltmp731             # Loc expr size
	.short	.Lset81
.Ltmp731:
	.byte	119                     # DW_OP_breg7
	.ascii	"\210#"
.Ltmp732:
	.quad	.Ltmp438
	.quad	.Ltmp439
.Lset82 = .Ltmp734-.Ltmp733             # Loc expr size
	.short	.Lset82
.Ltmp733:
	.byte	119                     # DW_OP_breg7
	.ascii	"\350\035"
.Ltmp734:
	.quad	.Ltmp458
	.quad	.Ltmp459
.Lset83 = .Ltmp736-.Ltmp735             # Loc expr size
	.short	.Lset83
.Ltmp735:
	.byte	119                     # DW_OP_breg7
	.ascii	"\310\025"
.Ltmp736:
	.quad	0
	.quad	0
.Ldebug_loc133:
	.quad	.Ltmp397
	.quad	.Ltmp399
.Lset84 = .Ltmp738-.Ltmp737             # Loc expr size
	.short	.Lset84
.Ltmp737:
	.byte	119                     # DW_OP_breg7
	.ascii	"\2308"
.Ltmp738:
	.quad	0
	.quad	0
.Ldebug_loc135:
	.quad	.Ltmp398
	.quad	.Ltmp399
.Lset85 = .Ltmp740-.Ltmp739             # Loc expr size
	.short	.Lset85
.Ltmp739:
	.byte	119                     # DW_OP_breg7
	.ascii	"\2208"
.Ltmp740:
	.quad	0
	.quad	0
.Ldebug_loc137:
	.quad	.Ltmp401
	.quad	.Ltmp402
.Lset86 = .Ltmp742-.Ltmp741             # Loc expr size
	.short	.Lset86
.Ltmp741:
	.byte	119                     # DW_OP_breg7
	.ascii	"\314>"
.Ltmp742:
	.quad	.Ltmp405
	.quad	.Ltmp406
.Lset87 = .Ltmp744-.Ltmp743             # Loc expr size
	.short	.Lset87
.Ltmp743:
	.byte	119                     # DW_OP_breg7
	.ascii	"\3344"
.Ltmp744:
	.quad	0
	.quad	0
.Ldebug_loc140:
	.quad	.Ltmp418
	.quad	.Ltmp425
.Lset88 = .Ltmp746-.Ltmp745             # Loc expr size
	.short	.Lset88
.Ltmp745:
	.byte	119                     # DW_OP_breg7
	.ascii	"\220'"
.Ltmp746:
	.quad	.Ltmp438
	.quad	.Ltmp447
.Lset89 = .Ltmp748-.Ltmp747             # Loc expr size
	.short	.Lset89
.Ltmp747:
.Ltmp748:
	.quad	.Ltmp447
	.quad	.Ltmp448
.Lset90 = .Ltmp750-.Ltmp749             # Loc expr size
	.short	.Lset90
.Ltmp749:
	.byte	119                     # DW_OP_breg7
	.ascii	"\300\027"
.Ltmp750:
	.quad	0
	.quad	0
.Ldebug_loc144:
	.quad	.Ltmp419
	.quad	.Ltmp425
.Lset91 = .Ltmp752-.Ltmp751             # Loc expr size
	.short	.Lset91
.Ltmp751:
	.byte	119                     # DW_OP_breg7
	.ascii	"\210'"
.Ltmp752:
	.quad	.Ltmp431
	.quad	.Ltmp432
.Lset92 = .Ltmp754-.Ltmp753             # Loc expr size
	.short	.Lset92
.Ltmp753:
	.byte	119                     # DW_OP_breg7
	.ascii	"\240\036"
.Ltmp754:
	.quad	.Ltmp435
	.quad	.Ltmp436
.Lset93 = .Ltmp756-.Ltmp755             # Loc expr size
	.short	.Lset93
.Ltmp755:
	.byte	119                     # DW_OP_breg7
	.ascii	"\3606"
.Ltmp756:
	.quad	.Ltmp449
	.quad	.Ltmp450
.Lset94 = .Ltmp758-.Ltmp757             # Loc expr size
	.short	.Lset94
.Ltmp757:
	.byte	119                     # DW_OP_breg7
	.ascii	"\210\026"
.Ltmp758:
	.quad	.Ltmp455
	.quad	.Ltmp456
.Lset95 = .Ltmp760-.Ltmp759             # Loc expr size
	.short	.Lset95
.Ltmp759:
	.byte	119                     # DW_OP_breg7
	.ascii	"\3606"
.Ltmp760:
	.quad	0
	.quad	0
.Ldebug_loc150:
	.quad	.Ltmp420
	.quad	.Ltmp421
.Lset96 = .Ltmp762-.Ltmp761             # Loc expr size
	.short	.Lset96
.Ltmp761:
	.byte	119                     # DW_OP_breg7
	.ascii	"\350&"
.Ltmp762:
	.quad	.Ltmp443
	.quad	.Ltmp444
.Lset97 = .Ltmp764-.Ltmp763             # Loc expr size
	.short	.Lset97
.Ltmp763:
	.byte	119                     # DW_OP_breg7
	.ascii	"\260\031"
.Ltmp764:
	.quad	.Ltmp466
	.quad	.Ltmp467
.Lset98 = .Ltmp766-.Ltmp765             # Loc expr size
	.short	.Lset98
.Ltmp765:
	.byte	119                     # DW_OP_breg7
	.ascii	"\360\f"
.Ltmp766:
	.quad	0
	.quad	0
.Ldebug_loc154:
	.quad	.Ltmp422
	.quad	.Ltmp423
.Lset99 = .Ltmp768-.Ltmp767             # Loc expr size
	.short	.Lset99
.Ltmp767:
	.byte	119                     # DW_OP_breg7
	.ascii	"\240&"
.Ltmp768:
	.quad	.Ltmp445
	.quad	.Ltmp446
.Lset100 = .Ltmp770-.Ltmp769            # Loc expr size
	.short	.Lset100
.Ltmp769:
	.byte	119                     # DW_OP_breg7
	.ascii	"\300\030"
.Ltmp770:
	.quad	0
	.quad	0
.Ldebug_loc157:
	.quad	.Ltmp438
	.quad	.Ltmp439
.Lset101 = .Ltmp772-.Ltmp771            # Loc expr size
	.short	.Lset101
.Ltmp771:
	.byte	119                     # DW_OP_breg7
	.ascii	"\250-"
.Ltmp772:
	.quad	0
	.quad	0
.Ldebug_loc159:
	.quad	.Ltmp441
	.quad	.Ltmp442
.Lset102 = .Ltmp774-.Ltmp773            # Loc expr size
	.short	.Lset102
.Ltmp773:
	.byte	119                     # DW_OP_breg7
	.ascii	"\314\031"
.Ltmp774:
	.quad	.Ltmp466
	.quad	.Ltmp467
.Lset103 = .Ltmp776-.Ltmp775            # Loc expr size
	.short	.Lset103
.Ltmp775:
	.byte	119                     # DW_OP_breg7
	.ascii	"\314>"
.Ltmp776:
	.quad	.Ltmp477
	.quad	.Ltmp478
.Lset104 = .Ltmp778-.Ltmp777            # Loc expr size
	.short	.Lset104
.Ltmp777:
	.byte	119                     # DW_OP_breg7
	.ascii	"\204\004"
.Ltmp778:
	.quad	0
	.quad	0
.Ldebug_loc163:
	.quad	.Lfunc_begin11
	.quad	.Ltmp507
.Lset105 = .Ltmp780-.Ltmp779            # Loc expr size
	.short	.Lset105
.Ltmp779:
	.byte	119                     # DW_OP_breg7
	.ascii	"\324\026"
.Ltmp780:
	.quad	0
	.quad	0
.Ldebug_loc165:
	.quad	.Lfunc_begin11
	.quad	.Ltmp507
.Lset106 = .Ltmp782-.Ltmp781            # Loc expr size
	.short	.Lset106
.Ltmp781:
	.byte	119                     # DW_OP_breg7
	.ascii	"\310\026"
.Ltmp782:
	.quad	0
	.quad	0
.Ldebug_loc167:
	.quad	.Lfunc_begin11
	.quad	.Ltmp507
.Lset107 = .Ltmp784-.Ltmp783            # Loc expr size
	.short	.Lset107
.Ltmp783:
	.byte	119                     # DW_OP_breg7
	.ascii	"\300\026"
.Ltmp784:
	.quad	0
	.quad	0
.Ldebug_loc169:
	.quad	.Lfunc_begin11
	.quad	.Ltmp507
.Lset108 = .Ltmp786-.Ltmp785            # Loc expr size
	.short	.Lset108
.Ltmp785:
	.byte	119                     # DW_OP_breg7
	.ascii	"\364\027"
.Ltmp786:
	.quad	0
	.quad	0
.Ldebug_loc171:
	.quad	.Lfunc_begin11
	.quad	.Ltmp507
.Lset109 = .Ltmp788-.Ltmp787            # Loc expr size
	.short	.Lset109
.Ltmp787:
	.byte	119                     # DW_OP_breg7
	.ascii	"\270\026"
.Ltmp788:
	.quad	0
	.quad	0
.Ldebug_loc173:
	.quad	.Ltmp516
	.quad	.Ltmp517
.Lset110 = .Ltmp790-.Ltmp789            # Loc expr size
	.short	.Lset110
.Ltmp789:
	.byte	119                     # DW_OP_breg7
	.ascii	"\240\n"
.Ltmp790:
	.quad	.Ltmp518
	.quad	.Ltmp520
.Lset111 = .Ltmp792-.Ltmp791            # Loc expr size
	.short	.Lset111
.Ltmp791:
	.byte	119                     # DW_OP_breg7
	.ascii	"\350\007"
.Ltmp792:
	.quad	0
	.quad	0
.Ldebug_loc176:
	.quad	.Ltmp525
	.quad	.Ltmp526
.Lset112 = .Ltmp794-.Ltmp793            # Loc expr size
	.short	.Lset112
.Ltmp793:
	.byte	119                     # DW_OP_breg7
	.byte	20
.Ltmp794:
	.quad	0
	.quad	0
.Ldebug_loc178:
	.section	.debug_aranges,"",@progbits
	.long	44                      # Length of ARange Set
	.short	2                       # DWARF Arange version number
	.long	.L.debug_info_begin0    # Offset Into Debug Info Section
	.byte	8                       # Address Size (in bytes)
	.byte	0                       # Segment Size (in bytes)
	.byte	255
	.byte	255
	.byte	255
	.byte	255
	.quad	.Lfunc_begin0
.Lset113 = .Lfunc_begin3-.Lfunc_begin0
	.quad	.Lset113
	.quad	0                       # ARange terminator
	.quad	0
	.long	44                      # Length of ARange Set
	.short	2                       # DWARF Arange version number
	.long	.L.debug_info_begin1    # Offset Into Debug Info Section
	.byte	8                       # Address Size (in bytes)
	.byte	0                       # Segment Size (in bytes)
	.byte	255
	.byte	255
	.byte	255
	.byte	255
	.quad	.Lfunc_begin3
.Lset114 = .Ldebug_end0-.Lfunc_begin3
	.quad	.Lset114
	.quad	0                       # ARange terminator
	.quad	0
	.section	.debug_ranges,"",@progbits
	.section	.debug_macinfo,"",@progbits
	.section	.debug_pubnames,"",@progbits
.Lset115 = .Lpubnames_end0-.Lpubnames_begin0 # Length of Public Names Info
	.long	.Lset115
.Lpubnames_begin0:
	.short	2                       # DWARF Version
	.long	.L.debug_info_begin0    # Offset of Compilation Unit Info
.Lset116 = .L.debug_info_end0-.L.debug_info_begin0 # Compilation Unit Length
	.long	.Lset116
	.long	317                     # DIE offset
	.asciz	"main"                  # External Name
	.long	179                     # DIE offset
	.asciz	"store_kernel"          # External Name
	.long	62                      # DIE offset
	.asciz	"test_stores"           # External Name
	.long	0                       # End Mark
.Lpubnames_end0:
.Lset117 = .Lpubnames_end1-.Lpubnames_begin1 # Length of Public Names Info
	.long	.Lset117
.Lpubnames_begin1:
	.short	2                       # DWARF Version
	.long	.L.debug_info_begin1    # Offset of Compilation Unit Info
.Lset118 = .L.debug_info_end1-.L.debug_info_begin1 # Compilation Unit Length
	.long	.Lset118
	.long	1119                    # DIE offset
	.asciz	"tred1"                 # External Name
	.long	196                     # DIE offset
	.asciz	"r8_epsilon"            # External Name
	.long	444                     # DIE offset
	.asciz	"rs"                    # External Name
	.long	943                     # DIE offset
	.asciz	"trbak1"                # External Name
	.long	599                     # DIE offset
	.asciz	"tqlrat"                # External Name
	.long	388                     # DIE offset
	.asciz	"r8_sign"               # External Name
	.long	61                      # DIE offset
	.asciz	"pythag"                # External Name
	.long	317                     # DIE offset
	.asciz	"r8_min"                # External Name
	.long	246                     # DIE offset
	.asciz	"r8_max"                # External Name
	.long	0                       # End Mark
.Lpubnames_end1:
	.section	.debug_pubtypes,"",@progbits
.Lset119 = .Lpubtypes_end0-.Lpubtypes_begin0 # Length of Public Types Info
	.long	.Lset119
.Lpubtypes_begin0:
	.short	2                       # DWARF Version
	.long	.L.debug_info_begin0    # Offset of Compilation Unit Info
.Lset120 = .L.debug_info_end0-.L.debug_info_begin0 # Compilation Unit Length
	.long	.Lset120
	.long	55                      # DIE offset
	.asciz	"int"                   # External Name
	.long	54                      # DIE offset
	.asciz	"double"                # External Name
	.long	0                       # End Mark
.Lpubtypes_end0:
.Lset121 = .Lpubtypes_end1-.Lpubtypes_begin1 # Length of Public Types Info
	.long	.Lset121
.Lpubtypes_begin1:
	.short	2                       # DWARF Version
	.long	.L.debug_info_begin1    # Offset of Compilation Unit Info
.Lset122 = .L.debug_info_end1-.L.debug_info_begin1 # Compilation Unit Length
	.long	.Lset122
	.long	54                      # DIE offset
	.asciz	"double"                # External Name
	.long	55                      # DIE offset
	.asciz	"int"                   # External Name
	.long	1364                    # DIE offset
	.asciz	"_Bool"                 # External Name
	.long	0                       # End Mark
.Lpubtypes_end1:

	.ident	"clang version 3.4.2 (tags/RELEASE_34/dot2-final)"
	.ident	"clang version 3.4.2 (tags/RELEASE_34/dot2-final)"
	.ident	"clang version 3.4.2 (tags/RELEASE_34/dot2-final)"
	.section	".note.GNU-stack","",@progbits
